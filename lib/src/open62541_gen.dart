// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'dart:ffi';
import 'package:ffi/ffi.dart';

NativeLibrary cOPC =
      NativeLibrary(DynamicLibrary.open("open62541.dll"));

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  ffi.Pointer<ffi.Void> UA_atomic_xchg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> addr,
    ffi.Pointer<ffi.Void> newptr,
  ) {
    return _UA_atomic_xchg(
      addr,
      newptr,
    );
  }

  late final _UA_atomic_xchgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('UA_atomic_xchg');
  late final _UA_atomic_xchg = _UA_atomic_xchgPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> UA_atomic_cmpxchg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> addr,
    ffi.Pointer<ffi.Void> expected,
    ffi.Pointer<ffi.Void> newptr,
  ) {
    return _UA_atomic_cmpxchg(
      addr,
      expected,
      newptr,
    );
  }

  late final _UA_atomic_cmpxchgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('UA_atomic_cmpxchg');
  late final _UA_atomic_cmpxchg = _UA_atomic_cmpxchgPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int UA_atomic_addUInt32(
    ffi.Pointer<ffi.Uint32> addr,
    int increase,
  ) {
    return _UA_atomic_addUInt32(
      addr,
      increase,
    );
  }

  late final _UA_atomic_addUInt32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('UA_atomic_addUInt32');
  late final _UA_atomic_addUInt32 = _UA_atomic_addUInt32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int UA_atomic_addSize(
    ffi.Pointer<ffi.Size> addr,
    int increase,
  ) {
    return _UA_atomic_addSize(
      addr,
      increase,
    );
  }

  late final _UA_atomic_addSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Size>, ffi.Size)>>(
      'UA_atomic_addSize');
  late final _UA_atomic_addSize = _UA_atomic_addSizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, int)>();

  int UA_atomic_subUInt32(
    ffi.Pointer<ffi.Uint32> addr,
    int decrease,
  ) {
    return _UA_atomic_subUInt32(
      addr,
      decrease,
    );
  }

  late final _UA_atomic_subUInt32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('UA_atomic_subUInt32');
  late final _UA_atomic_subUInt32 = _UA_atomic_subUInt32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int UA_atomic_subSize(
    ffi.Pointer<ffi.Size> addr,
    int decrease,
  ) {
    return _UA_atomic_subSize(
      addr,
      decrease,
    );
  }

  late final _UA_atomic_subSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Size>, ffi.Size)>>(
      'UA_atomic_subSize');
  late final _UA_atomic_subSize = _UA_atomic_subSizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, int)>();

  late final ffi.Pointer<GUID> _GUID_MAX_POWER_SAVINGS =
      _lookup<GUID>('GUID_MAX_POWER_SAVINGS');

  GUID get GUID_MAX_POWER_SAVINGS => _GUID_MAX_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _GUID_MIN_POWER_SAVINGS =
      _lookup<GUID>('GUID_MIN_POWER_SAVINGS');

  GUID get GUID_MIN_POWER_SAVINGS => _GUID_MIN_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _GUID_TYPICAL_POWER_SAVINGS =
      _lookup<GUID>('GUID_TYPICAL_POWER_SAVINGS');

  GUID get GUID_TYPICAL_POWER_SAVINGS => _GUID_TYPICAL_POWER_SAVINGS.ref;

  late final ffi.Pointer<GUID> _NO_SUBGROUP_GUID =
      _lookup<GUID>('NO_SUBGROUP_GUID');

  GUID get NO_SUBGROUP_GUID => _NO_SUBGROUP_GUID.ref;

  late final ffi.Pointer<GUID> _ALL_POWERSCHEMES_GUID =
      _lookup<GUID>('ALL_POWERSCHEMES_GUID');

  GUID get ALL_POWERSCHEMES_GUID => _ALL_POWERSCHEMES_GUID.ref;

  late final ffi.Pointer<GUID> _GUID_POWERSCHEME_PERSONALITY =
      _lookup<GUID>('GUID_POWERSCHEME_PERSONALITY');

  GUID get GUID_POWERSCHEME_PERSONALITY => _GUID_POWERSCHEME_PERSONALITY.ref;

  late final ffi.Pointer<GUID> _GUID_ACTIVE_POWERSCHEME =
      _lookup<GUID>('GUID_ACTIVE_POWERSCHEME');

  GUID get GUID_ACTIVE_POWERSCHEME => _GUID_ACTIVE_POWERSCHEME.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_RESILIENCY_SUBGROUP =
      _lookup<GUID>('GUID_IDLE_RESILIENCY_SUBGROUP');

  GUID get GUID_IDLE_RESILIENCY_SUBGROUP => _GUID_IDLE_RESILIENCY_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_RESILIENCY_PERIOD =
      _lookup<GUID>('GUID_IDLE_RESILIENCY_PERIOD');

  GUID get GUID_IDLE_RESILIENCY_PERIOD => _GUID_IDLE_RESILIENCY_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_DEEP_SLEEP_ENABLED =
      _lookup<GUID>('GUID_DEEP_SLEEP_ENABLED');

  GUID get GUID_DEEP_SLEEP_ENABLED => _GUID_DEEP_SLEEP_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_DEEP_SLEEP_PLATFORM_STATE =
      _lookup<GUID>('GUID_DEEP_SLEEP_PLATFORM_STATE');

  GUID get GUID_DEEP_SLEEP_PLATFORM_STATE =>
      _GUID_DEEP_SLEEP_PLATFORM_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_COALESCING_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_DISK_COALESCING_POWERDOWN_TIMEOUT');

  GUID get GUID_DISK_COALESCING_POWERDOWN_TIMEOUT =>
      _GUID_DISK_COALESCING_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT =
      _lookup<GUID>('GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT');

  GUID get GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT =>
      _GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_SUBGROUP =
      _lookup<GUID>('GUID_VIDEO_SUBGROUP');

  GUID get GUID_VIDEO_SUBGROUP => _GUID_VIDEO_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_POWERDOWN_TIMEOUT');

  GUID get GUID_VIDEO_POWERDOWN_TIMEOUT => _GUID_VIDEO_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ANNOYANCE_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_ANNOYANCE_TIMEOUT');

  GUID get GUID_VIDEO_ANNOYANCE_TIMEOUT => _GUID_VIDEO_ANNOYANCE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE');

  GUID get GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE =>
      _GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_DIM_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_DIM_TIMEOUT');

  GUID get GUID_VIDEO_DIM_TIMEOUT => _GUID_VIDEO_DIM_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_POWERDOWN =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_POWERDOWN');

  GUID get GUID_VIDEO_ADAPTIVE_POWERDOWN => _GUID_VIDEO_ADAPTIVE_POWERDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_MONITOR_POWER_ON =
      _lookup<GUID>('GUID_MONITOR_POWER_ON');

  GUID get GUID_MONITOR_POWER_ON => _GUID_MONITOR_POWER_ON.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS =
      _lookup<GUID>('GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS');

  GUID get GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS =>
      _GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS =
      _lookup<GUID>('GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS');

  GUID get GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS =>
      _GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS =
      _lookup<GUID>('GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS');

  GUID get GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS =>
      _GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS =
      _lookup<GUID>('GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS');

  GUID get GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS =>
      _GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_CONSOLE_DISPLAY_STATE =
      _lookup<GUID>('GUID_CONSOLE_DISPLAY_STATE');

  GUID get GUID_CONSOLE_DISPLAY_STATE => _GUID_CONSOLE_DISPLAY_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_DISPLAY_REQUIRED =
      _lookup<GUID>('GUID_ALLOW_DISPLAY_REQUIRED');

  GUID get GUID_ALLOW_DISPLAY_REQUIRED => _GUID_ALLOW_DISPLAY_REQUIRED.ref;

  late final ffi.Pointer<GUID> _GUID_VIDEO_CONSOLE_LOCK_TIMEOUT =
      _lookup<GUID>('GUID_VIDEO_CONSOLE_LOCK_TIMEOUT');

  GUID get GUID_VIDEO_CONSOLE_LOCK_TIMEOUT =>
      _GUID_VIDEO_CONSOLE_LOCK_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ADVANCED_COLOR_QUALITY_BIAS =
      _lookup<GUID>('GUID_ADVANCED_COLOR_QUALITY_BIAS');

  GUID get GUID_ADVANCED_COLOR_QUALITY_BIAS =>
      _GUID_ADVANCED_COLOR_QUALITY_BIAS.ref;

  late final ffi.Pointer<GUID> _GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP =
      _lookup<GUID>('GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP');

  GUID get GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP =>
      _GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_NON_ADAPTIVE_INPUT_TIMEOUT =
      _lookup<GUID>('GUID_NON_ADAPTIVE_INPUT_TIMEOUT');

  GUID get GUID_NON_ADAPTIVE_INPUT_TIMEOUT =>
      _GUID_NON_ADAPTIVE_INPUT_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ADAPTIVE_INPUT_CONTROLLER_STATE =
      _lookup<GUID>('GUID_ADAPTIVE_INPUT_CONTROLLER_STATE');

  GUID get GUID_ADAPTIVE_INPUT_CONTROLLER_STATE =>
      _GUID_ADAPTIVE_INPUT_CONTROLLER_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_SUBGROUP =
      _lookup<GUID>('GUID_DISK_SUBGROUP');

  GUID get GUID_DISK_SUBGROUP => _GUID_DISK_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_MAX_POWER =
      _lookup<GUID>('GUID_DISK_MAX_POWER');

  GUID get GUID_DISK_MAX_POWER => _GUID_DISK_MAX_POWER.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_POWERDOWN_TIMEOUT =
      _lookup<GUID>('GUID_DISK_POWERDOWN_TIMEOUT');

  GUID get GUID_DISK_POWERDOWN_TIMEOUT => _GUID_DISK_POWERDOWN_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_IDLE_TIMEOUT =
      _lookup<GUID>('GUID_DISK_IDLE_TIMEOUT');

  GUID get GUID_DISK_IDLE_TIMEOUT => _GUID_DISK_IDLE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_BURST_IGNORE_THRESHOLD =
      _lookup<GUID>('GUID_DISK_BURST_IGNORE_THRESHOLD');

  GUID get GUID_DISK_BURST_IGNORE_THRESHOLD =>
      _GUID_DISK_BURST_IGNORE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_ADAPTIVE_POWERDOWN =
      _lookup<GUID>('GUID_DISK_ADAPTIVE_POWERDOWN');

  GUID get GUID_DISK_ADAPTIVE_POWERDOWN => _GUID_DISK_ADAPTIVE_POWERDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_DISK_NVME_NOPPME =
      _lookup<GUID>('GUID_DISK_NVME_NOPPME');

  GUID get GUID_DISK_NVME_NOPPME => _GUID_DISK_NVME_NOPPME.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEP_SUBGROUP =
      _lookup<GUID>('GUID_SLEEP_SUBGROUP');

  GUID get GUID_SLEEP_SUBGROUP => _GUID_SLEEP_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEP_IDLE_THRESHOLD =
      _lookup<GUID>('GUID_SLEEP_IDLE_THRESHOLD');

  GUID get GUID_SLEEP_IDLE_THRESHOLD => _GUID_SLEEP_IDLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_TIMEOUT =
      _lookup<GUID>('GUID_STANDBY_TIMEOUT');

  GUID get GUID_STANDBY_TIMEOUT => _GUID_STANDBY_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_UNATTEND_SLEEP_TIMEOUT =
      _lookup<GUID>('GUID_UNATTEND_SLEEP_TIMEOUT');

  GUID get GUID_UNATTEND_SLEEP_TIMEOUT => _GUID_UNATTEND_SLEEP_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HIBERNATE_TIMEOUT =
      _lookup<GUID>('GUID_HIBERNATE_TIMEOUT');

  GUID get GUID_HIBERNATE_TIMEOUT => _GUID_HIBERNATE_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HIBERNATE_FASTS4_POLICY =
      _lookup<GUID>('GUID_HIBERNATE_FASTS4_POLICY');

  GUID get GUID_HIBERNATE_FASTS4_POLICY => _GUID_HIBERNATE_FASTS4_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_CRITICAL_POWER_TRANSITION =
      _lookup<GUID>('GUID_CRITICAL_POWER_TRANSITION');

  GUID get GUID_CRITICAL_POWER_TRANSITION =>
      _GUID_CRITICAL_POWER_TRANSITION.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_AWAYMODE =
      _lookup<GUID>('GUID_SYSTEM_AWAYMODE');

  GUID get GUID_SYSTEM_AWAYMODE => _GUID_SYSTEM_AWAYMODE.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_AWAYMODE =
      _lookup<GUID>('GUID_ALLOW_AWAYMODE');

  GUID get GUID_ALLOW_AWAYMODE => _GUID_ALLOW_AWAYMODE.ref;

  late final ffi.Pointer<GUID> _GUID_USER_PRESENCE_PREDICTION =
      _lookup<GUID>('GUID_USER_PRESENCE_PREDICTION');

  GUID get GUID_USER_PRESENCE_PREDICTION => _GUID_USER_PRESENCE_PREDICTION.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_BUDGET_GRACE_PERIOD =
      _lookup<GUID>('GUID_STANDBY_BUDGET_GRACE_PERIOD');

  GUID get GUID_STANDBY_BUDGET_GRACE_PERIOD =>
      _GUID_STANDBY_BUDGET_GRACE_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_BUDGET_PERCENT =
      _lookup<GUID>('GUID_STANDBY_BUDGET_PERCENT');

  GUID get GUID_STANDBY_BUDGET_PERCENT => _GUID_STANDBY_BUDGET_PERCENT.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESERVE_GRACE_PERIOD =
      _lookup<GUID>('GUID_STANDBY_RESERVE_GRACE_PERIOD');

  GUID get GUID_STANDBY_RESERVE_GRACE_PERIOD =>
      _GUID_STANDBY_RESERVE_GRACE_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESERVE_TIME =
      _lookup<GUID>('GUID_STANDBY_RESERVE_TIME');

  GUID get GUID_STANDBY_RESERVE_TIME => _GUID_STANDBY_RESERVE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_STANDBY_RESET_PERCENT =
      _lookup<GUID>('GUID_STANDBY_RESET_PERCENT');

  GUID get GUID_STANDBY_RESET_PERCENT => _GUID_STANDBY_RESET_PERCENT.ref;

  late final ffi.Pointer<GUID> _GUID_HUPR_ADAPTIVE_AWAY_DISPLAY_TIMEOUT =
      _lookup<GUID>('GUID_HUPR_ADAPTIVE_AWAY_DISPLAY_TIMEOUT');

  GUID get GUID_HUPR_ADAPTIVE_AWAY_DISPLAY_TIMEOUT =>
      _GUID_HUPR_ADAPTIVE_AWAY_DISPLAY_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HUPR_ADAPTIVE_INATTENTIVE_DIM_TIMEOUT =
      _lookup<GUID>('GUID_HUPR_ADAPTIVE_INATTENTIVE_DIM_TIMEOUT');

  GUID get GUID_HUPR_ADAPTIVE_INATTENTIVE_DIM_TIMEOUT =>
      _GUID_HUPR_ADAPTIVE_INATTENTIVE_DIM_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HUPR_ADAPTIVE_INATTENTIVE_DISPLAY_TIMEOUT =
      _lookup<GUID>('GUID_HUPR_ADAPTIVE_INATTENTIVE_DISPLAY_TIMEOUT');

  GUID get GUID_HUPR_ADAPTIVE_INATTENTIVE_DISPLAY_TIMEOUT =>
      _GUID_HUPR_ADAPTIVE_INATTENTIVE_DISPLAY_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_HUPR_ADAPTIVE_AWAY_DIM_TIMEOUT =
      _lookup<GUID>('GUID_HUPR_ADAPTIVE_AWAY_DIM_TIMEOUT');

  GUID get GUID_HUPR_ADAPTIVE_AWAY_DIM_TIMEOUT =>
      _GUID_HUPR_ADAPTIVE_AWAY_DIM_TIMEOUT.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_STANDBY_STATES =
      _lookup<GUID>('GUID_ALLOW_STANDBY_STATES');

  GUID get GUID_ALLOW_STANDBY_STATES => _GUID_ALLOW_STANDBY_STATES.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_RTC_WAKE =
      _lookup<GUID>('GUID_ALLOW_RTC_WAKE');

  GUID get GUID_ALLOW_RTC_WAKE => _GUID_ALLOW_RTC_WAKE.ref;

  late final ffi.Pointer<GUID> _GUID_LEGACY_RTC_MITIGATION =
      _lookup<GUID>('GUID_LEGACY_RTC_MITIGATION');

  GUID get GUID_LEGACY_RTC_MITIGATION => _GUID_LEGACY_RTC_MITIGATION.ref;

  late final ffi.Pointer<GUID> _GUID_ALLOW_SYSTEM_REQUIRED =
      _lookup<GUID>('GUID_ALLOW_SYSTEM_REQUIRED');

  GUID get GUID_ALLOW_SYSTEM_REQUIRED => _GUID_ALLOW_SYSTEM_REQUIRED.ref;

  late final ffi.Pointer<GUID> _GUID_POWER_SAVING_STATUS =
      _lookup<GUID>('GUID_POWER_SAVING_STATUS');

  GUID get GUID_POWER_SAVING_STATUS => _GUID_POWER_SAVING_STATUS.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_SUBGROUP =
      _lookup<GUID>('GUID_ENERGY_SAVER_SUBGROUP');

  GUID get GUID_ENERGY_SAVER_SUBGROUP => _GUID_ENERGY_SAVER_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_BATTERY_THRESHOLD =
      _lookup<GUID>('GUID_ENERGY_SAVER_BATTERY_THRESHOLD');

  GUID get GUID_ENERGY_SAVER_BATTERY_THRESHOLD =>
      _GUID_ENERGY_SAVER_BATTERY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_BRIGHTNESS =
      _lookup<GUID>('GUID_ENERGY_SAVER_BRIGHTNESS');

  GUID get GUID_ENERGY_SAVER_BRIGHTNESS => _GUID_ENERGY_SAVER_BRIGHTNESS.ref;

  late final ffi.Pointer<GUID> _GUID_ENERGY_SAVER_POLICY =
      _lookup<GUID>('GUID_ENERGY_SAVER_POLICY');

  GUID get GUID_ENERGY_SAVER_POLICY => _GUID_ENERGY_SAVER_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_BUTTON_SUBGROUP =
      _lookup<GUID>('GUID_SYSTEM_BUTTON_SUBGROUP');

  GUID get GUID_SYSTEM_BUTTON_SUBGROUP => _GUID_SYSTEM_BUTTON_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_POWERBUTTON_ACTION =
      _lookup<GUID>('GUID_POWERBUTTON_ACTION');

  GUID get GUID_POWERBUTTON_ACTION => _GUID_POWERBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_SLEEPBUTTON_ACTION =
      _lookup<GUID>('GUID_SLEEPBUTTON_ACTION');

  GUID get GUID_SLEEPBUTTON_ACTION => _GUID_SLEEPBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_USERINTERFACEBUTTON_ACTION =
      _lookup<GUID>('GUID_USERINTERFACEBUTTON_ACTION');

  GUID get GUID_USERINTERFACEBUTTON_ACTION =>
      _GUID_USERINTERFACEBUTTON_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_LIDCLOSE_ACTION =
      _lookup<GUID>('GUID_LIDCLOSE_ACTION');

  GUID get GUID_LIDCLOSE_ACTION => _GUID_LIDCLOSE_ACTION.ref;

  late final ffi.Pointer<GUID> _GUID_LIDOPEN_POWERSTATE =
      _lookup<GUID>('GUID_LIDOPEN_POWERSTATE');

  GUID get GUID_LIDOPEN_POWERSTATE => _GUID_LIDOPEN_POWERSTATE.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_SUBGROUP =
      _lookup<GUID>('GUID_BATTERY_SUBGROUP');

  GUID get GUID_BATTERY_SUBGROUP => _GUID_BATTERY_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_0');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_0 =>
      _GUID_BATTERY_DISCHARGE_ACTION_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_0');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_0 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_0 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_0');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_0 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_0.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_1');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_1 =>
      _GUID_BATTERY_DISCHARGE_ACTION_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_1');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_1 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_1 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_1');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_1 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_1.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_2');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_2 =>
      _GUID_BATTERY_DISCHARGE_ACTION_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_2');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_2 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_2 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_2');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_2 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_2.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_ACTION_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_ACTION_3');

  GUID get GUID_BATTERY_DISCHARGE_ACTION_3 =>
      _GUID_BATTERY_DISCHARGE_ACTION_3.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_LEVEL_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_LEVEL_3');

  GUID get GUID_BATTERY_DISCHARGE_LEVEL_3 =>
      _GUID_BATTERY_DISCHARGE_LEVEL_3.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_DISCHARGE_FLAGS_3 =
      _lookup<GUID>('GUID_BATTERY_DISCHARGE_FLAGS_3');

  GUID get GUID_BATTERY_DISCHARGE_FLAGS_3 =>
      _GUID_BATTERY_DISCHARGE_FLAGS_3.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SETTINGS_SUBGROUP =
      _lookup<GUID>('GUID_PROCESSOR_SETTINGS_SUBGROUP');

  GUID get GUID_PROCESSOR_SETTINGS_SUBGROUP =>
      _GUID_PROCESSOR_SETTINGS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_POLICY');

  GUID get GUID_PROCESSOR_THROTTLE_POLICY =>
      _GUID_PROCESSOR_THROTTLE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MAXIMUM =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MAXIMUM');

  GUID get GUID_PROCESSOR_THROTTLE_MAXIMUM =>
      _GUID_PROCESSOR_THROTTLE_MAXIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MAXIMUM_1 =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MAXIMUM_1');

  GUID get GUID_PROCESSOR_THROTTLE_MAXIMUM_1 =>
      _GUID_PROCESSOR_THROTTLE_MAXIMUM_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MINIMUM =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MINIMUM');

  GUID get GUID_PROCESSOR_THROTTLE_MINIMUM =>
      _GUID_PROCESSOR_THROTTLE_MINIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THROTTLE_MINIMUM_1 =
      _lookup<GUID>('GUID_PROCESSOR_THROTTLE_MINIMUM_1');

  GUID get GUID_PROCESSOR_THROTTLE_MINIMUM_1 =>
      _GUID_PROCESSOR_THROTTLE_MINIMUM_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_FREQUENCY_LIMIT =
      _lookup<GUID>('GUID_PROCESSOR_FREQUENCY_LIMIT');

  GUID get GUID_PROCESSOR_FREQUENCY_LIMIT =>
      _GUID_PROCESSOR_FREQUENCY_LIMIT.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_FREQUENCY_LIMIT_1 =
      _lookup<GUID>('GUID_PROCESSOR_FREQUENCY_LIMIT_1');

  GUID get GUID_PROCESSOR_FREQUENCY_LIMIT_1 =>
      _GUID_PROCESSOR_FREQUENCY_LIMIT_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_ALLOW_THROTTLING =
      _lookup<GUID>('GUID_PROCESSOR_ALLOW_THROTTLING');

  GUID get GUID_PROCESSOR_ALLOW_THROTTLING =>
      _GUID_PROCESSOR_ALLOW_THROTTLING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLESTATE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_IDLESTATE_POLICY');

  GUID get GUID_PROCESSOR_IDLESTATE_POLICY =>
      _GUID_PROCESSOR_IDLESTATE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERFSTATE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERFSTATE_POLICY');

  GUID get GUID_PROCESSOR_PERFSTATE_POLICY =>
      _GUID_PROCESSOR_PERFSTATE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_PERF_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_PERF_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_POLICY');

  GUID get GUID_PROCESSOR_PERF_INCREASE_POLICY =>
      _GUID_PROCESSOR_PERF_INCREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_POLICY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_POLICY_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_POLICY_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_POLICY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_POLICY');

  GUID get GUID_PROCESSOR_PERF_DECREASE_POLICY =>
      _GUID_PROCESSOR_PERF_DECREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_POLICY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_POLICY_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_POLICY_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_POLICY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_TIME');

  GUID get GUID_PROCESSOR_PERF_INCREASE_TIME =>
      _GUID_PROCESSOR_PERF_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_TIME_1');

  GUID get GUID_PROCESSOR_PERF_INCREASE_TIME_1 =>
      _GUID_PROCESSOR_PERF_INCREASE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_TIME');

  GUID get GUID_PROCESSOR_PERF_DECREASE_TIME =>
      _GUID_PROCESSOR_PERF_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_TIME_1');

  GUID get GUID_PROCESSOR_PERF_DECREASE_TIME_1 =>
      _GUID_PROCESSOR_PERF_DECREASE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_TIME_CHECK =
      _lookup<GUID>('GUID_PROCESSOR_PERF_TIME_CHECK');

  GUID get GUID_PROCESSOR_PERF_TIME_CHECK =>
      _GUID_PROCESSOR_PERF_TIME_CHECK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_BOOST_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_BOOST_POLICY');

  GUID get GUID_PROCESSOR_PERF_BOOST_POLICY =>
      _GUID_PROCESSOR_PERF_BOOST_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_BOOST_MODE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_BOOST_MODE');

  GUID get GUID_PROCESSOR_PERF_BOOST_MODE =>
      _GUID_PROCESSOR_PERF_BOOST_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_AUTONOMOUS_MODE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_AUTONOMOUS_MODE');

  GUID get GUID_PROCESSOR_PERF_AUTONOMOUS_MODE =>
      _GUID_PROCESSOR_PERF_AUTONOMOUS_MODE.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE =
      _lookup<GUID>('GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE');

  GUID get GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE =>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1');

  GUID get GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 =>
      _GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW =
      _lookup<GUID>('GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW');

  GUID get GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW =>
      _GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_DUTY_CYCLING =
      _lookup<GUID>('GUID_PROCESSOR_DUTY_CYCLING');

  GUID get GUID_PROCESSOR_DUTY_CYCLING => _GUID_PROCESSOR_DUTY_CYCLING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_ALLOW_SCALING =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_ALLOW_SCALING');

  GUID get GUID_PROCESSOR_IDLE_ALLOW_SCALING =>
      _GUID_PROCESSOR_IDLE_ALLOW_SCALING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_DISABLE =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_DISABLE');

  GUID get GUID_PROCESSOR_IDLE_DISABLE => _GUID_PROCESSOR_IDLE_DISABLE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_STATE_MAXIMUM =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_STATE_MAXIMUM');

  GUID get GUID_PROCESSOR_IDLE_STATE_MAXIMUM =>
      _GUID_PROCESSOR_IDLE_STATE_MAXIMUM.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_TIME_CHECK =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_TIME_CHECK');

  GUID get GUID_PROCESSOR_IDLE_TIME_CHECK =>
      _GUID_PROCESSOR_IDLE_TIME_CHECK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD');

  GUID get GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD =>
      _GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD');

  GUID get GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD =>
      _GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MAX_CORES =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MAX_CORES');

  GUID get GUID_PROCESSOR_CORE_PARKING_MAX_CORES =>
      _GUID_PROCESSOR_CORE_PARKING_MAX_CORES.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1');

  GUID get GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 =>
      _GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MIN_CORES =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MIN_CORES');

  GUID get GUID_PROCESSOR_CORE_PARKING_MIN_CORES =>
      _GUID_PROCESSOR_CORE_PARKING_MIN_CORES.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1');

  GUID get GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 =>
      _GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME');

  GUID get GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME =>
      _GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME');

  GUID get GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME =>
      _GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING');

  GUID get GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING =>
      _GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR');

  GUID
      get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR =>
          _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR
              .ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD =
      _lookup<GUID>(
          'GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD');

  GUID get GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD =>
      _GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_CORE_OVERRIDE =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_CORE_OVERRIDE');

  GUID get GUID_PROCESSOR_PARKING_CORE_OVERRIDE =>
      _GUID_PROCESSOR_PARKING_CORE_OVERRIDE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_PERF_STATE =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_PERF_STATE');

  GUID get GUID_PROCESSOR_PARKING_PERF_STATE =>
      _GUID_PROCESSOR_PARKING_PERF_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_PERF_STATE_1 =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_PERF_STATE_1');

  GUID get GUID_PROCESSOR_PARKING_PERF_STATE_1 =>
      _GUID_PROCESSOR_PARKING_PERF_STATE_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD');

  GUID get GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD =>
      _GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SOFT_PARKING_LATENCY =
      _lookup<GUID>('GUID_PROCESSOR_SOFT_PARKING_LATENCY');

  GUID get GUID_PROCESSOR_SOFT_PARKING_LATENCY =>
      _GUID_PROCESSOR_SOFT_PARKING_LATENCY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_HISTORY');

  GUID get GUID_PROCESSOR_PERF_HISTORY => _GUID_PROCESSOR_PERF_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_HISTORY_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_HISTORY_1');

  GUID get GUID_PROCESSOR_PERF_HISTORY_1 => _GUID_PROCESSOR_PERF_HISTORY_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_INCREASE_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_INCREASE_HISTORY');

  GUID get GUID_PROCESSOR_PERF_INCREASE_HISTORY =>
      _GUID_PROCESSOR_PERF_INCREASE_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_DECREASE_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_DECREASE_HISTORY');

  GUID get GUID_PROCESSOR_PERF_DECREASE_HISTORY =>
      _GUID_PROCESSOR_PERF_DECREASE_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY =
      _lookup<GUID>('GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY');

  GUID get GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY =>
      _GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT_PERF');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT_PERF =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 =
      _lookup<GUID>('GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1');

  GUID get GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 =>
      _GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK =
      _lookup<GUID>('GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK');

  GUID get GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK =>
      _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 =
      _lookup<GUID>('GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1');

  GUID get GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 =>
      _GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_MODULE_PARKING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_MODULE_PARKING_POLICY');

  GUID get GUID_PROCESSOR_MODULE_PARKING_POLICY =>
      _GUID_PROCESSOR_MODULE_PARKING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_COMPLEX_PARKING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_COMPLEX_PARKING_POLICY');

  GUID get GUID_PROCESSOR_COMPLEX_PARKING_POLICY =>
      _GUID_PROCESSOR_COMPLEX_PARKING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SMT_UNPARKING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_SMT_UNPARKING_POLICY');

  GUID get GUID_PROCESSOR_SMT_UNPARKING_POLICY =>
      _GUID_PROCESSOR_SMT_UNPARKING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_DISTRIBUTE_UTILITY =
      _lookup<GUID>('GUID_PROCESSOR_DISTRIBUTE_UTILITY');

  GUID get GUID_PROCESSOR_DISTRIBUTE_UTILITY =>
      _GUID_PROCESSOR_DISTRIBUTE_UTILITY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETEROGENEOUS_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_HETEROGENEOUS_POLICY');

  GUID get GUID_PROCESSOR_HETEROGENEOUS_POLICY =>
      _GUID_PROCESSOR_HETEROGENEOUS_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_DECREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_DECREASE_TIME');

  GUID get GUID_PROCESSOR_HETERO_DECREASE_TIME =>
      _GUID_PROCESSOR_HETERO_DECREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_INCREASE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_INCREASE_TIME');

  GUID get GUID_PROCESSOR_HETERO_INCREASE_TIME =>
      _GUID_PROCESSOR_HETERO_INCREASE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD =>
      _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD');

  GUID get GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD =>
      _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1 =>
      _GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CLASS0_FLOOR_PERF =
      _lookup<GUID>('GUID_PROCESSOR_CLASS0_FLOOR_PERF');

  GUID get GUID_PROCESSOR_CLASS0_FLOOR_PERF =>
      _GUID_PROCESSOR_CLASS0_FLOOR_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_CLASS1_INITIAL_PERF =
      _lookup<GUID>('GUID_PROCESSOR_CLASS1_INITIAL_PERF');

  GUID get GUID_PROCESSOR_CLASS1_INITIAL_PERF =>
      _GUID_PROCESSOR_CLASS1_INITIAL_PERF.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_THREAD_SCHEDULING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_THREAD_SCHEDULING_POLICY');

  GUID get GUID_PROCESSOR_THREAD_SCHEDULING_POLICY =>
      _GUID_PROCESSOR_THREAD_SCHEDULING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY');

  GUID get GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY =>
      _GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD');

  GUID get GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD =>
      _GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD');

  GUID get GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD =>
      _GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD');

  GUID get GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD =>
      _GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD');

  GUID get GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD =>
      _GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD');

  GUID get GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD =>
      _GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_SYSTEM_COOLING_POLICY =
      _lookup<GUID>('GUID_SYSTEM_COOLING_POLICY');

  GUID get GUID_SYSTEM_COOLING_POLICY => _GUID_SYSTEM_COOLING_POLICY.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD.ref;

  late final ffi.Pointer<GUID>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING =>
      _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR =>
      _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR.ref;

  late final ffi.Pointer<GUID> _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 =
      _lookup<GUID>('GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1');

  GUID get GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 =>
      _GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1.ref;

  late final ffi.Pointer<GUID> _GUID_LOCK_CONSOLE_ON_WAKE =
      _lookup<GUID>('GUID_LOCK_CONSOLE_ON_WAKE');

  GUID get GUID_LOCK_CONSOLE_ON_WAKE => _GUID_LOCK_CONSOLE_ON_WAKE.ref;

  late final ffi.Pointer<GUID> _GUID_DEVICE_IDLE_POLICY =
      _lookup<GUID>('GUID_DEVICE_IDLE_POLICY');

  GUID get GUID_DEVICE_IDLE_POLICY => _GUID_DEVICE_IDLE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_CONNECTIVITY_IN_STANDBY =
      _lookup<GUID>('GUID_CONNECTIVITY_IN_STANDBY');

  GUID get GUID_CONNECTIVITY_IN_STANDBY => _GUID_CONNECTIVITY_IN_STANDBY.ref;

  late final ffi.Pointer<GUID> _GUID_DISCONNECTED_STANDBY_MODE =
      _lookup<GUID>('GUID_DISCONNECTED_STANDBY_MODE');

  GUID get GUID_DISCONNECTED_STANDBY_MODE =>
      _GUID_DISCONNECTED_STANDBY_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_ACDC_POWER_SOURCE =
      _lookup<GUID>('GUID_ACDC_POWER_SOURCE');

  GUID get GUID_ACDC_POWER_SOURCE => _GUID_ACDC_POWER_SOURCE.ref;

  late final ffi.Pointer<GUID> _GUID_LIDSWITCH_STATE_CHANGE =
      _lookup<GUID>('GUID_LIDSWITCH_STATE_CHANGE');

  GUID get GUID_LIDSWITCH_STATE_CHANGE => _GUID_LIDSWITCH_STATE_CHANGE.ref;

  late final ffi.Pointer<GUID> _GUID_LIDSWITCH_STATE_RELIABILITY =
      _lookup<GUID>('GUID_LIDSWITCH_STATE_RELIABILITY');

  GUID get GUID_LIDSWITCH_STATE_RELIABILITY =>
      _GUID_LIDSWITCH_STATE_RELIABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_PERCENTAGE_REMAINING =
      _lookup<GUID>('GUID_BATTERY_PERCENTAGE_REMAINING');

  GUID get GUID_BATTERY_PERCENTAGE_REMAINING =>
      _GUID_BATTERY_PERCENTAGE_REMAINING.ref;

  late final ffi.Pointer<GUID> _GUID_BATTERY_COUNT =
      _lookup<GUID>('GUID_BATTERY_COUNT');

  GUID get GUID_BATTERY_COUNT => _GUID_BATTERY_COUNT.ref;

  late final ffi.Pointer<GUID> _GUID_GLOBAL_USER_PRESENCE =
      _lookup<GUID>('GUID_GLOBAL_USER_PRESENCE');

  GUID get GUID_GLOBAL_USER_PRESENCE => _GUID_GLOBAL_USER_PRESENCE.ref;

  late final ffi.Pointer<GUID> _GUID_SESSION_DISPLAY_STATUS =
      _lookup<GUID>('GUID_SESSION_DISPLAY_STATUS');

  GUID get GUID_SESSION_DISPLAY_STATUS => _GUID_SESSION_DISPLAY_STATUS.ref;

  late final ffi.Pointer<GUID> _GUID_SESSION_USER_PRESENCE =
      _lookup<GUID>('GUID_SESSION_USER_PRESENCE');

  GUID get GUID_SESSION_USER_PRESENCE => _GUID_SESSION_USER_PRESENCE.ref;

  late final ffi.Pointer<GUID> _GUID_IDLE_BACKGROUND_TASK =
      _lookup<GUID>('GUID_IDLE_BACKGROUND_TASK');

  GUID get GUID_IDLE_BACKGROUND_TASK => _GUID_IDLE_BACKGROUND_TASK.ref;

  late final ffi.Pointer<GUID> _GUID_BACKGROUND_TASK_NOTIFICATION =
      _lookup<GUID>('GUID_BACKGROUND_TASK_NOTIFICATION');

  GUID get GUID_BACKGROUND_TASK_NOTIFICATION =>
      _GUID_BACKGROUND_TASK_NOTIFICATION.ref;

  late final ffi.Pointer<GUID> _GUID_APPLAUNCH_BUTTON =
      _lookup<GUID>('GUID_APPLAUNCH_BUTTON');

  GUID get GUID_APPLAUNCH_BUTTON => _GUID_APPLAUNCH_BUTTON.ref;

  late final ffi.Pointer<GUID> _GUID_PCIEXPRESS_SETTINGS_SUBGROUP =
      _lookup<GUID>('GUID_PCIEXPRESS_SETTINGS_SUBGROUP');

  GUID get GUID_PCIEXPRESS_SETTINGS_SUBGROUP =>
      _GUID_PCIEXPRESS_SETTINGS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_PCIEXPRESS_ASPM_POLICY =
      _lookup<GUID>('GUID_PCIEXPRESS_ASPM_POLICY');

  GUID get GUID_PCIEXPRESS_ASPM_POLICY => _GUID_PCIEXPRESS_ASPM_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_ENABLE_SWITCH_FORCED_SHUTDOWN =
      _lookup<GUID>('GUID_ENABLE_SWITCH_FORCED_SHUTDOWN');

  GUID get GUID_ENABLE_SWITCH_FORCED_SHUTDOWN =>
      _GUID_ENABLE_SWITCH_FORCED_SHUTDOWN.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_SUBGROUP =
      _lookup<GUID>('GUID_INTSTEER_SUBGROUP');

  GUID get GUID_INTSTEER_SUBGROUP => _GUID_INTSTEER_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_MODE =
      _lookup<GUID>('GUID_INTSTEER_MODE');

  GUID get GUID_INTSTEER_MODE => _GUID_INTSTEER_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_LOAD_PER_PROC_TRIGGER =
      _lookup<GUID>('GUID_INTSTEER_LOAD_PER_PROC_TRIGGER');

  GUID get GUID_INTSTEER_LOAD_PER_PROC_TRIGGER =>
      _GUID_INTSTEER_LOAD_PER_PROC_TRIGGER.ref;

  late final ffi.Pointer<GUID> _GUID_INTSTEER_TIME_UNPARK_TRIGGER =
      _lookup<GUID>('GUID_INTSTEER_TIME_UNPARK_TRIGGER');

  GUID get GUID_INTSTEER_TIME_UNPARK_TRIGGER =>
      _GUID_INTSTEER_TIME_UNPARK_TRIGGER.ref;

  late final ffi.Pointer<GUID> _GUID_GRAPHICS_SUBGROUP =
      _lookup<GUID>('GUID_GRAPHICS_SUBGROUP');

  GUID get GUID_GRAPHICS_SUBGROUP => _GUID_GRAPHICS_SUBGROUP.ref;

  late final ffi.Pointer<GUID> _GUID_GPU_PREFERENCE_POLICY =
      _lookup<GUID>('GUID_GPU_PREFERENCE_POLICY');

  GUID get GUID_GPU_PREFERENCE_POLICY => _GUID_GPU_PREFERENCE_POLICY.ref;

  late final ffi.Pointer<GUID> _GUID_MIXED_REALITY_MODE =
      _lookup<GUID>('GUID_MIXED_REALITY_MODE');

  GUID get GUID_MIXED_REALITY_MODE => _GUID_MIXED_REALITY_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_SPR_ACTIVE_SESSION_CHANGE =
      _lookup<GUID>('GUID_SPR_ACTIVE_SESSION_CHANGE');

  GUID get GUID_SPR_ACTIVE_SESSION_CHANGE =>
      _GUID_SPR_ACTIVE_SESSION_CHANGE.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATE_CHANGE_GUID =
      _lookup<GUID>('PPM_PERFSTATE_CHANGE_GUID');

  GUID get PPM_PERFSTATE_CHANGE_GUID => _PPM_PERFSTATE_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATE_DOMAIN_CHANGE_GUID =
      _lookup<GUID>('PPM_PERFSTATE_DOMAIN_CHANGE_GUID');

  GUID get PPM_PERFSTATE_DOMAIN_CHANGE_GUID =>
      _PPM_PERFSTATE_DOMAIN_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLESTATE_CHANGE_GUID =
      _lookup<GUID>('PPM_IDLESTATE_CHANGE_GUID');

  GUID get PPM_IDLESTATE_CHANGE_GUID => _PPM_IDLESTATE_CHANGE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFSTATES_DATA_GUID =
      _lookup<GUID>('PPM_PERFSTATES_DATA_GUID');

  GUID get PPM_PERFSTATES_DATA_GUID => _PPM_PERFSTATES_DATA_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLESTATES_DATA_GUID =
      _lookup<GUID>('PPM_IDLESTATES_DATA_GUID');

  GUID get PPM_IDLESTATES_DATA_GUID => _PPM_IDLESTATES_DATA_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLE_ACCOUNTING_GUID =
      _lookup<GUID>('PPM_IDLE_ACCOUNTING_GUID');

  GUID get PPM_IDLE_ACCOUNTING_GUID => _PPM_IDLE_ACCOUNTING_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_IDLE_ACCOUNTING_EX_GUID =
      _lookup<GUID>('PPM_IDLE_ACCOUNTING_EX_GUID');

  GUID get PPM_IDLE_ACCOUNTING_EX_GUID => _PPM_IDLE_ACCOUNTING_EX_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_THERMALCONSTRAINT_GUID =
      _lookup<GUID>('PPM_THERMALCONSTRAINT_GUID');

  GUID get PPM_THERMALCONSTRAINT_GUID => _PPM_THERMALCONSTRAINT_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_PERFMON_PERFSTATE_GUID =
      _lookup<GUID>('PPM_PERFMON_PERFSTATE_GUID');

  GUID get PPM_PERFMON_PERFSTATE_GUID => _PPM_PERFMON_PERFSTATE_GUID.ref;

  late final ffi.Pointer<GUID> _PPM_THERMAL_POLICY_CHANGE_GUID =
      _lookup<GUID>('PPM_THERMAL_POLICY_CHANGE_GUID');

  GUID get PPM_THERMAL_POLICY_CHANGE_GUID =>
      _PPM_THERMAL_POLICY_CHANGE_GUID.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IWinTypesBase_v0_1_c_ifspec =
      _lookup<RPC_IF_HANDLE>('IWinTypesBase_v0_1_c_ifspec');

  RPC_IF_HANDLE get IWinTypesBase_v0_1_c_ifspec =>
      _IWinTypesBase_v0_1_c_ifspec.value;

  set IWinTypesBase_v0_1_c_ifspec(RPC_IF_HANDLE value) =>
      _IWinTypesBase_v0_1_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IWinTypesBase_v0_1_s_ifspec =
      _lookup<RPC_IF_HANDLE>('IWinTypesBase_v0_1_s_ifspec');

  RPC_IF_HANDLE get IWinTypesBase_v0_1_s_ifspec =>
      _IWinTypesBase_v0_1_s_ifspec.value;

  set IWinTypesBase_v0_1_s_ifspec(RPC_IF_HANDLE value) =>
      _IWinTypesBase_v0_1_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IWinTypes_v0_1_c_ifspec =
      _lookup<RPC_IF_HANDLE>('IWinTypes_v0_1_c_ifspec');

  RPC_IF_HANDLE get IWinTypes_v0_1_c_ifspec => _IWinTypes_v0_1_c_ifspec.value;

  set IWinTypes_v0_1_c_ifspec(RPC_IF_HANDLE value) =>
      _IWinTypes_v0_1_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IWinTypes_v0_1_s_ifspec =
      _lookup<RPC_IF_HANDLE>('IWinTypes_v0_1_s_ifspec');

  RPC_IF_HANDLE get IWinTypes_v0_1_s_ifspec => _IWinTypes_v0_1_s_ifspec.value;

  set IWinTypes_v0_1_s_ifspec(RPC_IF_HANDLE value) =>
      _IWinTypes_v0_1_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_DISK =
      _lookup<GUID>('GUID_DEVINTERFACE_DISK');

  GUID get GUID_DEVINTERFACE_DISK => _GUID_DEVINTERFACE_DISK.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_CDROM =
      _lookup<GUID>('GUID_DEVINTERFACE_CDROM');

  GUID get GUID_DEVINTERFACE_CDROM => _GUID_DEVINTERFACE_CDROM.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_PARTITION =
      _lookup<GUID>('GUID_DEVINTERFACE_PARTITION');

  GUID get GUID_DEVINTERFACE_PARTITION => _GUID_DEVINTERFACE_PARTITION.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_TAPE =
      _lookup<GUID>('GUID_DEVINTERFACE_TAPE');

  GUID get GUID_DEVINTERFACE_TAPE => _GUID_DEVINTERFACE_TAPE.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_WRITEONCEDISK =
      _lookup<GUID>('GUID_DEVINTERFACE_WRITEONCEDISK');

  GUID get GUID_DEVINTERFACE_WRITEONCEDISK =>
      _GUID_DEVINTERFACE_WRITEONCEDISK.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_VOLUME =
      _lookup<GUID>('GUID_DEVINTERFACE_VOLUME');

  GUID get GUID_DEVINTERFACE_VOLUME => _GUID_DEVINTERFACE_VOLUME.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_MEDIUMCHANGER =
      _lookup<GUID>('GUID_DEVINTERFACE_MEDIUMCHANGER');

  GUID get GUID_DEVINTERFACE_MEDIUMCHANGER =>
      _GUID_DEVINTERFACE_MEDIUMCHANGER.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_FLOPPY =
      _lookup<GUID>('GUID_DEVINTERFACE_FLOPPY');

  GUID get GUID_DEVINTERFACE_FLOPPY => _GUID_DEVINTERFACE_FLOPPY.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_CDCHANGER =
      _lookup<GUID>('GUID_DEVINTERFACE_CDCHANGER');

  GUID get GUID_DEVINTERFACE_CDCHANGER => _GUID_DEVINTERFACE_CDCHANGER.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_STORAGEPORT =
      _lookup<GUID>('GUID_DEVINTERFACE_STORAGEPORT');

  GUID get GUID_DEVINTERFACE_STORAGEPORT => _GUID_DEVINTERFACE_STORAGEPORT.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_VMLUN =
      _lookup<GUID>('GUID_DEVINTERFACE_VMLUN');

  GUID get GUID_DEVINTERFACE_VMLUN => _GUID_DEVINTERFACE_VMLUN.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_SES =
      _lookup<GUID>('GUID_DEVINTERFACE_SES');

  GUID get GUID_DEVINTERFACE_SES => _GUID_DEVINTERFACE_SES.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_ZNSDISK =
      _lookup<GUID>('GUID_DEVINTERFACE_ZNSDISK');

  GUID get GUID_DEVINTERFACE_ZNSDISK => _GUID_DEVINTERFACE_ZNSDISK.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_SERVICE_VOLUME =
      _lookup<GUID>('GUID_DEVINTERFACE_SERVICE_VOLUME');

  GUID get GUID_DEVINTERFACE_SERVICE_VOLUME =>
      _GUID_DEVINTERFACE_SERVICE_VOLUME.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_HIDDEN_VOLUME =
      _lookup<GUID>('GUID_DEVINTERFACE_HIDDEN_VOLUME');

  GUID get GUID_DEVINTERFACE_HIDDEN_VOLUME =>
      _GUID_DEVINTERFACE_HIDDEN_VOLUME.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB =
      _lookup<GUID>('GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB');

  GUID get GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB =>
      _GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE =
      _lookup<GUID>('GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE');

  GUID get GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE =>
      _GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE.ref;

  late final ffi.Pointer<GUID> _GUID_SCM_PD_HEALTH_NOTIFICATION =
      _lookup<GUID>('GUID_SCM_PD_HEALTH_NOTIFICATION');

  GUID get GUID_SCM_PD_HEALTH_NOTIFICATION =>
      _GUID_SCM_PD_HEALTH_NOTIFICATION.ref;

  late final ffi.Pointer<GUID> _GUID_SCM_PD_PASSTHROUGH_INVDIMM =
      _lookup<GUID>('GUID_SCM_PD_PASSTHROUGH_INVDIMM');

  GUID get GUID_SCM_PD_PASSTHROUGH_INVDIMM =>
      _GUID_SCM_PD_PASSTHROUGH_INVDIMM.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_COMPORT =
      _lookup<GUID>('GUID_DEVINTERFACE_COMPORT');

  GUID get GUID_DEVINTERFACE_COMPORT => _GUID_DEVINTERFACE_COMPORT.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR =
      _lookup<GUID>('GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR');

  GUID get GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR =>
      _GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR.ref;

  late final ffi.Pointer<GUID> _FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE =
      _lookup<GUID>('FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE');

  GUID get FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE =>
      _FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE.ref;

  late final ffi.Pointer<GUID> _FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE =
      _lookup<GUID>('FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE');

  GUID get FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE =>
      _FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE.ref;

  late final ffi.Pointer<GUID> _FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE =
      _lookup<GUID>('FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE');

  GUID get FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE =>
      _FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE.ref;

  late final ffi.Pointer<GUID> _GUID_DEVINTERFACE_SMARTCARD_READER =
      _lookup<GUID>('GUID_DEVINTERFACE_SMARTCARD_READER');

  GUID get GUID_DEVINTERFACE_SMARTCARD_READER =>
      _GUID_DEVINTERFACE_SMARTCARD_READER.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT0Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT0Pci');

  SCARD_IO_REQUEST get g_rgSCardT0Pci => _g_rgSCardT0Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardT1Pci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardT1Pci');

  SCARD_IO_REQUEST get g_rgSCardT1Pci => _g_rgSCardT1Pci.ref;

  late final ffi.Pointer<SCARD_IO_REQUEST> _g_rgSCardRawPci =
      _lookup<SCARD_IO_REQUEST>('g_rgSCardRawPci');

  SCARD_IO_REQUEST get g_rgSCardRawPci => _g_rgSCardRawPci.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IUnknown = _lookup<IID>('IID_IUnknown');

  IID get IID_IUnknown => _IID_IUnknown.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_AsyncIUnknown =
      _lookup<IID>('IID_AsyncIUnknown');

  IID get IID_AsyncIUnknown => _IID_AsyncIUnknown.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IClassFactory =
      _lookup<IID>('IID_IClassFactory');

  IID get IID_IClassFactory => _IID_IClassFactory.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec =>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMarshal = _lookup<IID>('IID_IMarshal');

  IID get IID_IMarshal => _IID_IMarshal.ref;

  late final ffi.Pointer<IID> _IID_INoMarshal = _lookup<IID>('IID_INoMarshal');

  IID get IID_INoMarshal => _IID_INoMarshal.ref;

  late final ffi.Pointer<IID> _IID_IAgileObject =
      _lookup<IID>('IID_IAgileObject');

  IID get IID_IAgileObject => _IID_IAgileObject.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IActivationFilter =
      _lookup<IID>('IID_IActivationFilter');

  IID get IID_IActivationFilter => _IID_IActivationFilter.ref;

  late final ffi.Pointer<IID> _IID_IMarshal2 = _lookup<IID>('IID_IMarshal2');

  IID get IID_IMarshal2 => _IID_IMarshal2.ref;

  late final ffi.Pointer<IID> _IID_IMalloc = _lookup<IID>('IID_IMalloc');

  IID get IID_IMalloc => _IID_IMalloc.ref;

  late final ffi.Pointer<IID> _IID_IStdMarshalInfo =
      _lookup<IID>('IID_IStdMarshalInfo');

  IID get IID_IStdMarshalInfo => _IID_IStdMarshalInfo.ref;

  late final ffi.Pointer<IID> _IID_IExternalConnection =
      _lookup<IID>('IID_IExternalConnection');

  IID get IID_IExternalConnection => _IID_IExternalConnection.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMultiQI = _lookup<IID>('IID_IMultiQI');

  IID get IID_IMultiQI => _IID_IMultiQI.ref;

  late final ffi.Pointer<IID> _IID_AsyncIMultiQI =
      _lookup<IID>('IID_AsyncIMultiQI');

  IID get IID_AsyncIMultiQI => _IID_AsyncIMultiQI.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternalUnknown =
      _lookup<IID>('IID_IInternalUnknown');

  IID get IID_IInternalUnknown => _IID_IInternalUnknown.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0010_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IEnumUnknown =
      _lookup<IID>('IID_IEnumUnknown');

  IID get IID_IEnumUnknown => _IID_IEnumUnknown.ref;

  late final ffi.Pointer<IID> _IID_IEnumString =
      _lookup<IID>('IID_IEnumString');

  IID get IID_IEnumString => _IID_IEnumString.ref;

  late final ffi.Pointer<IID> _IID_ISequentialStream =
      _lookup<IID>('IID_ISequentialStream');

  IID get IID_ISequentialStream => _IID_ISequentialStream.ref;

  late final ffi.Pointer<IID> _IID_IStream = _lookup<IID>('IID_IStream');

  IID get IID_IStream => _IID_IStream.ref;

  late final ffi.Pointer<IID> _IID_IRpcChannelBuffer =
      _lookup<IID>('IID_IRpcChannelBuffer');

  IID get IID_IRpcChannelBuffer => _IID_IRpcChannelBuffer.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0015_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IRpcChannelBuffer2 =
      _lookup<IID>('IID_IRpcChannelBuffer2');

  IID get IID_IRpcChannelBuffer2 => _IID_IRpcChannelBuffer2.ref;

  late final ffi.Pointer<IID> _IID_IAsyncRpcChannelBuffer =
      _lookup<IID>('IID_IAsyncRpcChannelBuffer');

  IID get IID_IAsyncRpcChannelBuffer => _IID_IAsyncRpcChannelBuffer.ref;

  late final ffi.Pointer<IID> _IID_IRpcChannelBuffer3 =
      _lookup<IID>('IID_IRpcChannelBuffer3');

  IID get IID_IRpcChannelBuffer3 => _IID_IRpcChannelBuffer3.ref;

  late final ffi.Pointer<IID> _IID_IRpcSyntaxNegotiate =
      _lookup<IID>('IID_IRpcSyntaxNegotiate');

  IID get IID_IRpcSyntaxNegotiate => _IID_IRpcSyntaxNegotiate.ref;

  late final ffi.Pointer<IID> _IID_IRpcProxyBuffer =
      _lookup<IID>('IID_IRpcProxyBuffer');

  IID get IID_IRpcProxyBuffer => _IID_IRpcProxyBuffer.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0020_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IRpcStubBuffer =
      _lookup<IID>('IID_IRpcStubBuffer');

  IID get IID_IRpcStubBuffer => _IID_IRpcStubBuffer.ref;

  late final ffi.Pointer<IID> _IID_IPSFactoryBuffer =
      _lookup<IID>('IID_IPSFactoryBuffer');

  IID get IID_IPSFactoryBuffer => _IID_IPSFactoryBuffer.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IChannelHook =
      _lookup<IID>('IID_IChannelHook');

  IID get IID_IChannelHook => _IID_IChannelHook.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IClientSecurity =
      _lookup<IID>('IID_IClientSecurity');

  IID get IID_IClientSecurity => _IID_IClientSecurity.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IServerSecurity =
      _lookup<IID>('IID_IServerSecurity');

  IID get IID_IServerSecurity => _IID_IServerSecurity.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IRpcOptions =
      _lookup<IID>('IID_IRpcOptions');

  IID get IID_IRpcOptions => _IID_IRpcOptions.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IGlobalOptions =
      _lookup<IID>('IID_IGlobalOptions');

  IID get IID_IGlobalOptions => _IID_IGlobalOptions.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0027_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ISurrogate = _lookup<IID>('IID_ISurrogate');

  IID get IID_ISurrogate => _IID_ISurrogate.ref;

  late final ffi.Pointer<IID> _IID_IGlobalInterfaceTable =
      _lookup<IID>('IID_IGlobalInterfaceTable');

  IID get IID_IGlobalInterfaceTable => _IID_IGlobalInterfaceTable.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0029_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ISynchronize =
      _lookup<IID>('IID_ISynchronize');

  IID get IID_ISynchronize => _IID_ISynchronize.ref;

  late final ffi.Pointer<IID> _IID_ISynchronizeHandle =
      _lookup<IID>('IID_ISynchronizeHandle');

  IID get IID_ISynchronizeHandle => _IID_ISynchronizeHandle.ref;

  late final ffi.Pointer<IID> _IID_ISynchronizeEvent =
      _lookup<IID>('IID_ISynchronizeEvent');

  IID get IID_ISynchronizeEvent => _IID_ISynchronizeEvent.ref;

  late final ffi.Pointer<IID> _IID_ISynchronizeContainer =
      _lookup<IID>('IID_ISynchronizeContainer');

  IID get IID_ISynchronizeContainer => _IID_ISynchronizeContainer.ref;

  late final ffi.Pointer<IID> _IID_ISynchronizeMutex =
      _lookup<IID>('IID_ISynchronizeMutex');

  IID get IID_ISynchronizeMutex => _IID_ISynchronizeMutex.ref;

  late final ffi.Pointer<IID> _IID_ICancelMethodCalls =
      _lookup<IID>('IID_ICancelMethodCalls');

  IID get IID_ICancelMethodCalls => _IID_ICancelMethodCalls.ref;

  late final ffi.Pointer<IID> _IID_IAsyncManager =
      _lookup<IID>('IID_IAsyncManager');

  IID get IID_IAsyncManager => _IID_IAsyncManager.ref;

  late final ffi.Pointer<IID> _IID_ICallFactory =
      _lookup<IID>('IID_ICallFactory');

  IID get IID_ICallFactory => _IID_ICallFactory.ref;

  late final ffi.Pointer<IID> _IID_IRpcHelper = _lookup<IID>('IID_IRpcHelper');

  IID get IID_IRpcHelper => _IID_IRpcHelper.ref;

  late final ffi.Pointer<IID> _IID_IReleaseMarshalBuffers =
      _lookup<IID>('IID_IReleaseMarshalBuffers');

  IID get IID_IReleaseMarshalBuffers => _IID_IReleaseMarshalBuffers.ref;

  late final ffi.Pointer<IID> _IID_IWaitMultiple =
      _lookup<IID>('IID_IWaitMultiple');

  IID get IID_IWaitMultiple => _IID_IWaitMultiple.ref;

  late final ffi.Pointer<IID> _IID_IAddrTrackingControl =
      _lookup<IID>('IID_IAddrTrackingControl');

  IID get IID_IAddrTrackingControl => _IID_IAddrTrackingControl.ref;

  late final ffi.Pointer<IID> _IID_IAddrExclusionControl =
      _lookup<IID>('IID_IAddrExclusionControl');

  IID get IID_IAddrExclusionControl => _IID_IAddrExclusionControl.ref;

  late final ffi.Pointer<IID> _IID_IPipeByte = _lookup<IID>('IID_IPipeByte');

  IID get IID_IPipeByte => _IID_IPipeByte.ref;

  late final ffi.Pointer<IID> _IID_AsyncIPipeByte =
      _lookup<IID>('IID_AsyncIPipeByte');

  IID get IID_AsyncIPipeByte => _IID_AsyncIPipeByte.ref;

  late final ffi.Pointer<IID> _IID_IPipeLong = _lookup<IID>('IID_IPipeLong');

  IID get IID_IPipeLong => _IID_IPipeLong.ref;

  late final ffi.Pointer<IID> _IID_AsyncIPipeLong =
      _lookup<IID>('IID_AsyncIPipeLong');

  IID get IID_AsyncIPipeLong => _IID_AsyncIPipeLong.ref;

  late final ffi.Pointer<IID> _IID_IPipeDouble =
      _lookup<IID>('IID_IPipeDouble');

  IID get IID_IPipeDouble => _IID_IPipeDouble.ref;

  late final ffi.Pointer<IID> _IID_AsyncIPipeDouble =
      _lookup<IID>('IID_AsyncIPipeDouble');

  IID get IID_AsyncIPipeDouble => _IID_AsyncIPipeDouble.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0048_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IComThreadingInfo =
      _lookup<IID>('IID_IComThreadingInfo');

  IID get IID_IComThreadingInfo => _IID_IComThreadingInfo.ref;

  late final ffi.Pointer<IID> _IID_IProcessInitControl =
      _lookup<IID>('IID_IProcessInitControl');

  IID get IID_IProcessInitControl => _IID_IProcessInitControl.ref;

  late final ffi.Pointer<IID> _IID_IFastRundown =
      _lookup<IID>('IID_IFastRundown');

  IID get IID_IFastRundown => _IID_IFastRundown.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMarshalingStream =
      _lookup<IID>('IID_IMarshalingStream');

  IID get IID_IMarshalingStream => _IID_IMarshalingStream.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0052_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IAgileReference =
      _lookup<IID>('IID_IAgileReference');

  IID get IID_IAgileReference => _IID_IAgileReference.ref;

  late final ffi.Pointer<GUID> _IID_ICallbackWithNoReentrancyToApplicationSTA =
      _lookup<GUID>('IID_ICallbackWithNoReentrancyToApplicationSTA');

  GUID get IID_ICallbackWithNoReentrancyToApplicationSTA =>
      _IID_ICallbackWithNoReentrancyToApplicationSTA.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0053_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMachineGlobalObjectTable =
      _lookup<IID>('IID_IMachineGlobalObjectTable');

  IID get IID_IMachineGlobalObjectTable => _IID_IMachineGlobalObjectTable.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0054_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ISupportAllowLowerTrustActivation =
      _lookup<IID>('IID_ISupportAllowLowerTrustActivation');

  IID get IID_ISupportAllowLowerTrustActivation =>
      _IID_ISupportAllowLowerTrustActivation.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec =>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec =>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec.value;

  set __MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidlbase_0000_0055_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _GUID_NULL = _lookup<IID>('GUID_NULL');

  IID get GUID_NULL => _GUID_NULL.ref;

  late final ffi.Pointer<IID> _CATID_MARSHALER =
      _lookup<IID>('CATID_MARSHALER');

  IID get CATID_MARSHALER => _CATID_MARSHALER.ref;

  late final ffi.Pointer<IID> _IID_IRpcChannel =
      _lookup<IID>('IID_IRpcChannel');

  IID get IID_IRpcChannel => _IID_IRpcChannel.ref;

  late final ffi.Pointer<IID> _IID_IRpcStub = _lookup<IID>('IID_IRpcStub');

  IID get IID_IRpcStub => _IID_IRpcStub.ref;

  late final ffi.Pointer<IID> _IID_IStubManager =
      _lookup<IID>('IID_IStubManager');

  IID get IID_IStubManager => _IID_IStubManager.ref;

  late final ffi.Pointer<IID> _IID_IRpcProxy = _lookup<IID>('IID_IRpcProxy');

  IID get IID_IRpcProxy => _IID_IRpcProxy.ref;

  late final ffi.Pointer<IID> _IID_IProxyManager =
      _lookup<IID>('IID_IProxyManager');

  IID get IID_IProxyManager => _IID_IProxyManager.ref;

  late final ffi.Pointer<IID> _IID_IPSFactory = _lookup<IID>('IID_IPSFactory');

  IID get IID_IPSFactory => _IID_IPSFactory.ref;

  late final ffi.Pointer<IID> _IID_IInternalMoniker =
      _lookup<IID>('IID_IInternalMoniker');

  IID get IID_IInternalMoniker => _IID_IInternalMoniker.ref;

  late final ffi.Pointer<IID> _IID_IDfReserved1 =
      _lookup<IID>('IID_IDfReserved1');

  IID get IID_IDfReserved1 => _IID_IDfReserved1.ref;

  late final ffi.Pointer<IID> _IID_IDfReserved2 =
      _lookup<IID>('IID_IDfReserved2');

  IID get IID_IDfReserved2 => _IID_IDfReserved2.ref;

  late final ffi.Pointer<IID> _IID_IDfReserved3 =
      _lookup<IID>('IID_IDfReserved3');

  IID get IID_IDfReserved3 => _IID_IDfReserved3.ref;

  late final ffi.Pointer<CLSID> _CLSID_StdMarshal =
      _lookup<CLSID>('CLSID_StdMarshal');

  CLSID get CLSID_StdMarshal => _CLSID_StdMarshal.ref;

  late final ffi.Pointer<CLSID> _CLSID_AggStdMarshal =
      _lookup<CLSID>('CLSID_AggStdMarshal');

  CLSID get CLSID_AggStdMarshal => _CLSID_AggStdMarshal.ref;

  late final ffi.Pointer<CLSID> _CLSID_StdAsyncActManager =
      _lookup<CLSID>('CLSID_StdAsyncActManager');

  CLSID get CLSID_StdAsyncActManager => _CLSID_StdAsyncActManager.ref;

  late final ffi.Pointer<IID> _IID_IStub = _lookup<IID>('IID_IStub');

  IID get IID_IStub => _IID_IStub.ref;

  late final ffi.Pointer<IID> _IID_IProxy = _lookup<IID>('IID_IProxy');

  IID get IID_IProxy => _IID_IProxy.ref;

  late final ffi.Pointer<IID> _IID_IEnumGeneric =
      _lookup<IID>('IID_IEnumGeneric');

  IID get IID_IEnumGeneric => _IID_IEnumGeneric.ref;

  late final ffi.Pointer<IID> _IID_IEnumHolder =
      _lookup<IID>('IID_IEnumHolder');

  IID get IID_IEnumHolder => _IID_IEnumHolder.ref;

  late final ffi.Pointer<IID> _IID_IEnumCallback =
      _lookup<IID>('IID_IEnumCallback');

  IID get IID_IEnumCallback => _IID_IEnumCallback.ref;

  late final ffi.Pointer<IID> _IID_IOleManager =
      _lookup<IID>('IID_IOleManager');

  IID get IID_IOleManager => _IID_IOleManager.ref;

  late final ffi.Pointer<IID> _IID_IOlePresObj =
      _lookup<IID>('IID_IOlePresObj');

  IID get IID_IOlePresObj => _IID_IOlePresObj.ref;

  late final ffi.Pointer<IID> _IID_IDebug = _lookup<IID>('IID_IDebug');

  IID get IID_IDebug => _IID_IDebug.ref;

  late final ffi.Pointer<IID> _IID_IDebugStream =
      _lookup<IID>('IID_IDebugStream');

  IID get IID_IDebugStream => _IID_IDebugStream.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSGenObject =
      _lookup<CLSID>('CLSID_PSGenObject');

  CLSID get CLSID_PSGenObject => _CLSID_PSGenObject.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSClientSite =
      _lookup<CLSID>('CLSID_PSClientSite');

  CLSID get CLSID_PSClientSite => _CLSID_PSClientSite.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSClassObject =
      _lookup<CLSID>('CLSID_PSClassObject');

  CLSID get CLSID_PSClassObject => _CLSID_PSClassObject.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSInPlaceActive =
      _lookup<CLSID>('CLSID_PSInPlaceActive');

  CLSID get CLSID_PSInPlaceActive => _CLSID_PSInPlaceActive.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSInPlaceFrame =
      _lookup<CLSID>('CLSID_PSInPlaceFrame');

  CLSID get CLSID_PSInPlaceFrame => _CLSID_PSInPlaceFrame.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSDragDrop =
      _lookup<CLSID>('CLSID_PSDragDrop');

  CLSID get CLSID_PSDragDrop => _CLSID_PSDragDrop.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSBindCtx =
      _lookup<CLSID>('CLSID_PSBindCtx');

  CLSID get CLSID_PSBindCtx => _CLSID_PSBindCtx.ref;

  late final ffi.Pointer<CLSID> _CLSID_PSEnumerators =
      _lookup<CLSID>('CLSID_PSEnumerators');

  CLSID get CLSID_PSEnumerators => _CLSID_PSEnumerators.ref;

  late final ffi.Pointer<CLSID> _CLSID_StaticMetafile =
      _lookup<CLSID>('CLSID_StaticMetafile');

  CLSID get CLSID_StaticMetafile => _CLSID_StaticMetafile.ref;

  late final ffi.Pointer<CLSID> _CLSID_StaticDib =
      _lookup<CLSID>('CLSID_StaticDib');

  CLSID get CLSID_StaticDib => _CLSID_StaticDib.ref;

  late final ffi.Pointer<CLSID> _CID_CDfsVolume =
      _lookup<CLSID>('CID_CDfsVolume');

  CLSID get CID_CDfsVolume => _CID_CDfsVolume.ref;

  late final ffi.Pointer<CLSID> _CLSID_DCOMAccessControl =
      _lookup<CLSID>('CLSID_DCOMAccessControl');

  CLSID get CLSID_DCOMAccessControl => _CLSID_DCOMAccessControl.ref;

  late final ffi.Pointer<CLSID> _CLSID_GlobalOptions =
      _lookup<CLSID>('CLSID_GlobalOptions');

  CLSID get CLSID_GlobalOptions => _CLSID_GlobalOptions.ref;

  late final ffi.Pointer<CLSID> _CLSID_StdGlobalInterfaceTable =
      _lookup<CLSID>('CLSID_StdGlobalInterfaceTable');

  CLSID get CLSID_StdGlobalInterfaceTable => _CLSID_StdGlobalInterfaceTable.ref;

  late final ffi.Pointer<CLSID> _CLSID_MachineGlobalObjectTable =
      _lookup<CLSID>('CLSID_MachineGlobalObjectTable');

  CLSID get CLSID_MachineGlobalObjectTable =>
      _CLSID_MachineGlobalObjectTable.ref;

  late final ffi.Pointer<CLSID> _CLSID_ActivationCapabilities =
      _lookup<CLSID>('CLSID_ActivationCapabilities');

  CLSID get CLSID_ActivationCapabilities => _CLSID_ActivationCapabilities.ref;

  late final ffi.Pointer<CLSID> _CLSID_ComBinding =
      _lookup<CLSID>('CLSID_ComBinding');

  CLSID get CLSID_ComBinding => _CLSID_ComBinding.ref;

  late final ffi.Pointer<CLSID> _CLSID_StdEvent =
      _lookup<CLSID>('CLSID_StdEvent');

  CLSID get CLSID_StdEvent => _CLSID_StdEvent.ref;

  late final ffi.Pointer<CLSID> _CLSID_ManualResetEvent =
      _lookup<CLSID>('CLSID_ManualResetEvent');

  CLSID get CLSID_ManualResetEvent => _CLSID_ManualResetEvent.ref;

  late final ffi.Pointer<CLSID> _CLSID_SynchronizeContainer =
      _lookup<CLSID>('CLSID_SynchronizeContainer');

  CLSID get CLSID_SynchronizeContainer => _CLSID_SynchronizeContainer.ref;

  late final ffi.Pointer<CLSID> _CLSID_AddrControl =
      _lookup<CLSID>('CLSID_AddrControl');

  CLSID get CLSID_AddrControl => _CLSID_AddrControl.ref;

  late final ffi.Pointer<CLSID> _CLSID_ContextSwitcher =
      _lookup<CLSID>('CLSID_ContextSwitcher');

  CLSID get CLSID_ContextSwitcher => _CLSID_ContextSwitcher.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDFormKrnl =
      _lookup<CLSID>('CLSID_CCDFormKrnl');

  CLSID get CLSID_CCDFormKrnl => _CLSID_CCDFormKrnl.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDPropertyPage =
      _lookup<CLSID>('CLSID_CCDPropertyPage');

  CLSID get CLSID_CCDPropertyPage => _CLSID_CCDPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDFormDialog =
      _lookup<CLSID>('CLSID_CCDFormDialog');

  CLSID get CLSID_CCDFormDialog => _CLSID_CCDFormDialog.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDCommandButton =
      _lookup<CLSID>('CLSID_CCDCommandButton');

  CLSID get CLSID_CCDCommandButton => _CLSID_CCDCommandButton.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDComboBox =
      _lookup<CLSID>('CLSID_CCDComboBox');

  CLSID get CLSID_CCDComboBox => _CLSID_CCDComboBox.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDTextBox =
      _lookup<CLSID>('CLSID_CCDTextBox');

  CLSID get CLSID_CCDTextBox => _CLSID_CCDTextBox.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDCheckBox =
      _lookup<CLSID>('CLSID_CCDCheckBox');

  CLSID get CLSID_CCDCheckBox => _CLSID_CCDCheckBox.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDLabel =
      _lookup<CLSID>('CLSID_CCDLabel');

  CLSID get CLSID_CCDLabel => _CLSID_CCDLabel.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDOptionButton =
      _lookup<CLSID>('CLSID_CCDOptionButton');

  CLSID get CLSID_CCDOptionButton => _CLSID_CCDOptionButton.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDListBox =
      _lookup<CLSID>('CLSID_CCDListBox');

  CLSID get CLSID_CCDListBox => _CLSID_CCDListBox.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDScrollBar =
      _lookup<CLSID>('CLSID_CCDScrollBar');

  CLSID get CLSID_CCDScrollBar => _CLSID_CCDScrollBar.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDGroupBox =
      _lookup<CLSID>('CLSID_CCDGroupBox');

  CLSID get CLSID_CCDGroupBox => _CLSID_CCDGroupBox.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDGeneralPropertyPage =
      _lookup<CLSID>('CLSID_CCDGeneralPropertyPage');

  CLSID get CLSID_CCDGeneralPropertyPage => _CLSID_CCDGeneralPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDGenericPropertyPage =
      _lookup<CLSID>('CLSID_CCDGenericPropertyPage');

  CLSID get CLSID_CCDGenericPropertyPage => _CLSID_CCDGenericPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDFontPropertyPage =
      _lookup<CLSID>('CLSID_CCDFontPropertyPage');

  CLSID get CLSID_CCDFontPropertyPage => _CLSID_CCDFontPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDColorPropertyPage =
      _lookup<CLSID>('CLSID_CCDColorPropertyPage');

  CLSID get CLSID_CCDColorPropertyPage => _CLSID_CCDColorPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDLabelPropertyPage =
      _lookup<CLSID>('CLSID_CCDLabelPropertyPage');

  CLSID get CLSID_CCDLabelPropertyPage => _CLSID_CCDLabelPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDCheckBoxPropertyPage =
      _lookup<CLSID>('CLSID_CCDCheckBoxPropertyPage');

  CLSID get CLSID_CCDCheckBoxPropertyPage => _CLSID_CCDCheckBoxPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDTextBoxPropertyPage =
      _lookup<CLSID>('CLSID_CCDTextBoxPropertyPage');

  CLSID get CLSID_CCDTextBoxPropertyPage => _CLSID_CCDTextBoxPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDOptionButtonPropertyPage =
      _lookup<CLSID>('CLSID_CCDOptionButtonPropertyPage');

  CLSID get CLSID_CCDOptionButtonPropertyPage =>
      _CLSID_CCDOptionButtonPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDListBoxPropertyPage =
      _lookup<CLSID>('CLSID_CCDListBoxPropertyPage');

  CLSID get CLSID_CCDListBoxPropertyPage => _CLSID_CCDListBoxPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDCommandButtonPropertyPage =
      _lookup<CLSID>('CLSID_CCDCommandButtonPropertyPage');

  CLSID get CLSID_CCDCommandButtonPropertyPage =>
      _CLSID_CCDCommandButtonPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDComboBoxPropertyPage =
      _lookup<CLSID>('CLSID_CCDComboBoxPropertyPage');

  CLSID get CLSID_CCDComboBoxPropertyPage => _CLSID_CCDComboBoxPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDScrollBarPropertyPage =
      _lookup<CLSID>('CLSID_CCDScrollBarPropertyPage');

  CLSID get CLSID_CCDScrollBarPropertyPage =>
      _CLSID_CCDScrollBarPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDGroupBoxPropertyPage =
      _lookup<CLSID>('CLSID_CCDGroupBoxPropertyPage');

  CLSID get CLSID_CCDGroupBoxPropertyPage => _CLSID_CCDGroupBoxPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CCDXObjectPropertyPage =
      _lookup<CLSID>('CLSID_CCDXObjectPropertyPage');

  CLSID get CLSID_CCDXObjectPropertyPage => _CLSID_CCDXObjectPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CStdPropertyFrame =
      _lookup<CLSID>('CLSID_CStdPropertyFrame');

  CLSID get CLSID_CStdPropertyFrame => _CLSID_CStdPropertyFrame.ref;

  late final ffi.Pointer<CLSID> _CLSID_CFormPropertyPage =
      _lookup<CLSID>('CLSID_CFormPropertyPage');

  CLSID get CLSID_CFormPropertyPage => _CLSID_CFormPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CGridPropertyPage =
      _lookup<CLSID>('CLSID_CGridPropertyPage');

  CLSID get CLSID_CGridPropertyPage => _CLSID_CGridPropertyPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CWSJArticlePage =
      _lookup<CLSID>('CLSID_CWSJArticlePage');

  CLSID get CLSID_CWSJArticlePage => _CLSID_CWSJArticlePage.ref;

  late final ffi.Pointer<CLSID> _CLSID_CSystemPage =
      _lookup<CLSID>('CLSID_CSystemPage');

  CLSID get CLSID_CSystemPage => _CLSID_CSystemPage.ref;

  late final ffi.Pointer<CLSID> _CLSID_IdentityUnmarshal =
      _lookup<CLSID>('CLSID_IdentityUnmarshal');

  CLSID get CLSID_IdentityUnmarshal => _CLSID_IdentityUnmarshal.ref;

  late final ffi.Pointer<CLSID> _CLSID_InProcFreeMarshaler =
      _lookup<CLSID>('CLSID_InProcFreeMarshaler');

  CLSID get CLSID_InProcFreeMarshaler => _CLSID_InProcFreeMarshaler.ref;

  late final ffi.Pointer<CLSID> _CLSID_Picture_Metafile =
      _lookup<CLSID>('CLSID_Picture_Metafile');

  CLSID get CLSID_Picture_Metafile => _CLSID_Picture_Metafile.ref;

  late final ffi.Pointer<CLSID> _CLSID_Picture_EnhMetafile =
      _lookup<CLSID>('CLSID_Picture_EnhMetafile');

  CLSID get CLSID_Picture_EnhMetafile => _CLSID_Picture_EnhMetafile.ref;

  late final ffi.Pointer<CLSID> _CLSID_Picture_Dib =
      _lookup<CLSID>('CLSID_Picture_Dib');

  CLSID get CLSID_Picture_Dib => _CLSID_Picture_Dib.ref;

  late final ffi.Pointer<GUID> _GUID_TRISTATE = _lookup<GUID>('GUID_TRISTATE');

  GUID get GUID_TRISTATE => _GUID_TRISTATE.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec =>
      ___MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec =>
      ___MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec =>
      ___MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec.value;

  set __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec =>
      ___MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec.value;

  set __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0055_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0055_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0055_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0055_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0055_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0055_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0055_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0055_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0055_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0055_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMallocSpy = _lookup<IID>('IID_IMallocSpy');

  IID get IID_IMallocSpy => _IID_IMallocSpy.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0056_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0056_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0056_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0056_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0056_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0056_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0056_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0056_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindCtx = _lookup<IID>('IID_IBindCtx');

  IID get IID_IBindCtx => _IID_IBindCtx.ref;

  late final ffi.Pointer<IID> _IID_IEnumMoniker =
      _lookup<IID>('IID_IEnumMoniker');

  IID get IID_IEnumMoniker => _IID_IEnumMoniker.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0058_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0058_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0058_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0058_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0058_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0058_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0058_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0058_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0058_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0058_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IRunnableObject =
      _lookup<IID>('IID_IRunnableObject');

  IID get IID_IRunnableObject => _IID_IRunnableObject.ref;

  late final ffi.Pointer<IID> _IID_IRunningObjectTable =
      _lookup<IID>('IID_IRunningObjectTable');

  IID get IID_IRunningObjectTable => _IID_IRunningObjectTable.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0060_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0060_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0060_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0060_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0060_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0060_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0060_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0060_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IPersist = _lookup<IID>('IID_IPersist');

  IID get IID_IPersist => _IID_IPersist.ref;

  late final ffi.Pointer<IID> _IID_IPersistStream =
      _lookup<IID>('IID_IPersistStream');

  IID get IID_IPersistStream => _IID_IPersistStream.ref;

  late final ffi.Pointer<IID> _IID_IMoniker = _lookup<IID>('IID_IMoniker');

  IID get IID_IMoniker => _IID_IMoniker.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0063_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0063_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0063_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0063_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0063_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0063_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0063_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0063_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0063_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0063_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IROTData = _lookup<IID>('IID_IROTData');

  IID get IID_IROTData => _IID_IROTData.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0064_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0064_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0064_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0064_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0064_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0064_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0064_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0064_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IEnumSTATSTG =
      _lookup<IID>('IID_IEnumSTATSTG');

  IID get IID_IEnumSTATSTG => _IID_IEnumSTATSTG.ref;

  late final ffi.Pointer<IID> _IID_IStorage = _lookup<IID>('IID_IStorage');

  IID get IID_IStorage => _IID_IStorage.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0066_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0066_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0066_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0066_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0066_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0066_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0066_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0066_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0066_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0066_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IPersistFile =
      _lookup<IID>('IID_IPersistFile');

  IID get IID_IPersistFile => _IID_IPersistFile.ref;

  late final ffi.Pointer<IID> _IID_IPersistStorage =
      _lookup<IID>('IID_IPersistStorage');

  IID get IID_IPersistStorage => _IID_IPersistStorage.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0068_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0068_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0068_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0068_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0068_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0068_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0068_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0068_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0068_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0068_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ILockBytes = _lookup<IID>('IID_ILockBytes');

  IID get IID_ILockBytes => _IID_ILockBytes.ref;

  late final ffi.Pointer<IID> _IID_IEnumFORMATETC =
      _lookup<IID>('IID_IEnumFORMATETC');

  IID get IID_IEnumFORMATETC => _IID_IEnumFORMATETC.ref;

  late final ffi.Pointer<IID> _IID_IEnumSTATDATA =
      _lookup<IID>('IID_IEnumSTATDATA');

  IID get IID_IEnumSTATDATA => _IID_IEnumSTATDATA.ref;

  late final ffi.Pointer<IID> _IID_IRootStorage =
      _lookup<IID>('IID_IRootStorage');

  IID get IID_IRootStorage => _IID_IRootStorage.ref;

  late final ffi.Pointer<IID> _IID_IAdviseSink =
      _lookup<IID>('IID_IAdviseSink');

  IID get IID_IAdviseSink => _IID_IAdviseSink.ref;

  late final ffi.Pointer<IID> _IID_AsyncIAdviseSink =
      _lookup<IID>('IID_AsyncIAdviseSink');

  IID get IID_AsyncIAdviseSink => _IID_AsyncIAdviseSink.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0073_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0073_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0073_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0073_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0073_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0073_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0073_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0073_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IAdviseSink2 =
      _lookup<IID>('IID_IAdviseSink2');

  IID get IID_IAdviseSink2 => _IID_IAdviseSink2.ref;

  late final ffi.Pointer<IID> _IID_AsyncIAdviseSink2 =
      _lookup<IID>('IID_AsyncIAdviseSink2');

  IID get IID_AsyncIAdviseSink2 => _IID_AsyncIAdviseSink2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0074_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0074_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0074_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0074_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0074_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0074_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0074_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0074_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IDataObject =
      _lookup<IID>('IID_IDataObject');

  IID get IID_IDataObject => _IID_IDataObject.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0075_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0075_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0075_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0075_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0075_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0075_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0075_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0075_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IDataAdviseHolder =
      _lookup<IID>('IID_IDataAdviseHolder');

  IID get IID_IDataAdviseHolder => _IID_IDataAdviseHolder.ref;

  late final ffi.Pointer<IID> _IID_IMessageFilter =
      _lookup<IID>('IID_IMessageFilter');

  IID get IID_IMessageFilter => _IID_IMessageFilter.ref;

  late final ffi.Pointer<FMTID> _FMTID_SummaryInformation =
      _lookup<FMTID>('FMTID_SummaryInformation');

  FMTID get FMTID_SummaryInformation => _FMTID_SummaryInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_DocSummaryInformation =
      _lookup<FMTID>('FMTID_DocSummaryInformation');

  FMTID get FMTID_DocSummaryInformation => _FMTID_DocSummaryInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_UserDefinedProperties =
      _lookup<FMTID>('FMTID_UserDefinedProperties');

  FMTID get FMTID_UserDefinedProperties => _FMTID_UserDefinedProperties.ref;

  late final ffi.Pointer<FMTID> _FMTID_DiscardableInformation =
      _lookup<FMTID>('FMTID_DiscardableInformation');

  FMTID get FMTID_DiscardableInformation => _FMTID_DiscardableInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_ImageSummaryInformation =
      _lookup<FMTID>('FMTID_ImageSummaryInformation');

  FMTID get FMTID_ImageSummaryInformation => _FMTID_ImageSummaryInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_AudioSummaryInformation =
      _lookup<FMTID>('FMTID_AudioSummaryInformation');

  FMTID get FMTID_AudioSummaryInformation => _FMTID_AudioSummaryInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_VideoSummaryInformation =
      _lookup<FMTID>('FMTID_VideoSummaryInformation');

  FMTID get FMTID_VideoSummaryInformation => _FMTID_VideoSummaryInformation.ref;

  late final ffi.Pointer<FMTID> _FMTID_MediaFileSummaryInformation =
      _lookup<FMTID>('FMTID_MediaFileSummaryInformation');

  FMTID get FMTID_MediaFileSummaryInformation =>
      _FMTID_MediaFileSummaryInformation.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0077_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0077_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0077_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0077_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0077_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0077_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0077_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0077_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IClassActivator =
      _lookup<IID>('IID_IClassActivator');

  IID get IID_IClassActivator => _IID_IClassActivator.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0078_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0078_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0078_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0078_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0078_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0078_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0078_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0078_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0078_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0078_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IFillLockBytes =
      _lookup<IID>('IID_IFillLockBytes');

  IID get IID_IFillLockBytes => _IID_IFillLockBytes.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0079_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0079_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0079_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0079_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0079_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0079_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0079_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0079_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0079_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0079_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IProgressNotify =
      _lookup<IID>('IID_IProgressNotify');

  IID get IID_IProgressNotify => _IID_IProgressNotify.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0080_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0080_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0080_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0080_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0080_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0080_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0080_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0080_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ILayoutStorage =
      _lookup<IID>('IID_ILayoutStorage');

  IID get IID_ILayoutStorage => _IID_ILayoutStorage.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0081_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0081_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0081_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0081_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0081_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0081_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0081_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0081_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBlockingLock =
      _lookup<IID>('IID_IBlockingLock');

  IID get IID_IBlockingLock => _IID_IBlockingLock.ref;

  late final ffi.Pointer<IID> _IID_ITimeAndNoticeControl =
      _lookup<IID>('IID_ITimeAndNoticeControl');

  IID get IID_ITimeAndNoticeControl => _IID_ITimeAndNoticeControl.ref;

  late final ffi.Pointer<IID> _IID_IOplockStorage =
      _lookup<IID>('IID_IOplockStorage');

  IID get IID_IOplockStorage => _IID_IOplockStorage.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0084_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0084_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0084_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0084_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0084_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0084_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0084_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0084_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0084_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0084_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IDirectWriterLock =
      _lookup<IID>('IID_IDirectWriterLock');

  IID get IID_IDirectWriterLock => _IID_IDirectWriterLock.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0085_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0085_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0085_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0085_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0085_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0085_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0085_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0085_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IUrlMon = _lookup<IID>('IID_IUrlMon');

  IID get IID_IUrlMon => _IID_IUrlMon.ref;

  late final ffi.Pointer<IID> _IID_IForegroundTransfer =
      _lookup<IID>('IID_IForegroundTransfer');

  IID get IID_IForegroundTransfer => _IID_IForegroundTransfer.ref;

  late final ffi.Pointer<IID> _IID_IThumbnailExtractor =
      _lookup<IID>('IID_IThumbnailExtractor');

  IID get IID_IThumbnailExtractor => _IID_IThumbnailExtractor.ref;

  late final ffi.Pointer<IID> _IID_IDummyHICONIncluder =
      _lookup<IID>('IID_IDummyHICONIncluder');

  IID get IID_IDummyHICONIncluder => _IID_IDummyHICONIncluder.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0089_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0089_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0089_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0089_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0089_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0089_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0089_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0089_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IProcessLock =
      _lookup<IID>('IID_IProcessLock');

  IID get IID_IProcessLock => _IID_IProcessLock.ref;

  late final ffi.Pointer<IID> _IID_ISurrogateService =
      _lookup<IID>('IID_ISurrogateService');

  IID get IID_ISurrogateService => _IID_ISurrogateService.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0091_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0091_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0091_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0091_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0091_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0091_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0091_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0091_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0091_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0091_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInitializeSpy =
      _lookup<IID>('IID_IInitializeSpy');

  IID get IID_IInitializeSpy => _IID_IInitializeSpy.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0092_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0092_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0092_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0092_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0092_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0092_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0092_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0092_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0092_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0092_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IApartmentShutdown =
      _lookup<IID>('IID_IApartmentShutdown');

  IID get IID_IApartmentShutdown => _IID_IApartmentShutdown.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0093_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0093_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec =>
      ___MIDL_itf_objidl_0000_0093_v0_0_c_ifspec.value;

  set __MIDL_itf_objidl_0000_0093_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0093_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_objidl_0000_0093_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_objidl_0000_0093_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec =>
      ___MIDL_itf_objidl_0000_0093_v0_0_s_ifspec.value;

  set __MIDL_itf_objidl_0000_0093_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_objidl_0000_0093_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IOleAutomationTypes_v1_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('IOleAutomationTypes_v1_0_c_ifspec');

  RPC_IF_HANDLE get IOleAutomationTypes_v1_0_c_ifspec =>
      _IOleAutomationTypes_v1_0_c_ifspec.value;

  set IOleAutomationTypes_v1_0_c_ifspec(RPC_IF_HANDLE value) =>
      _IOleAutomationTypes_v1_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IOleAutomationTypes_v1_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('IOleAutomationTypes_v1_0_s_ifspec');

  RPC_IF_HANDLE get IOleAutomationTypes_v1_0_s_ifspec =>
      _IOleAutomationTypes_v1_0_s_ifspec.value;

  set IOleAutomationTypes_v1_0_s_ifspec(RPC_IF_HANDLE value) =>
      _IOleAutomationTypes_v1_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ICreateTypeInfo =
      _lookup<IID>('IID_ICreateTypeInfo');

  IID get IID_ICreateTypeInfo => _IID_ICreateTypeInfo.ref;

  late final ffi.Pointer<IID> _IID_ICreateTypeInfo2 =
      _lookup<IID>('IID_ICreateTypeInfo2');

  IID get IID_ICreateTypeInfo2 => _IID_ICreateTypeInfo2.ref;

  late final ffi.Pointer<IID> _IID_ICreateTypeLib =
      _lookup<IID>('IID_ICreateTypeLib');

  IID get IID_ICreateTypeLib => _IID_ICreateTypeLib.ref;

  late final ffi.Pointer<IID> _IID_ICreateTypeLib2 =
      _lookup<IID>('IID_ICreateTypeLib2');

  IID get IID_ICreateTypeLib2 => _IID_ICreateTypeLib2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IDispatch = _lookup<IID>('IID_IDispatch');

  IID get IID_IDispatch => _IID_IDispatch.ref;

  late final ffi.Pointer<IID> _IID_IEnumVARIANT =
      _lookup<IID>('IID_IEnumVARIANT');

  IID get IID_IEnumVARIANT => _IID_IEnumVARIANT.ref;

  late final ffi.Pointer<IID> _IID_ITypeComp = _lookup<IID>('IID_ITypeComp');

  IID get IID_ITypeComp => _IID_ITypeComp.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ITypeInfo = _lookup<IID>('IID_ITypeInfo');

  IID get IID_ITypeInfo => _IID_ITypeInfo.ref;

  late final ffi.Pointer<IID> _IID_ITypeInfo2 = _lookup<IID>('IID_ITypeInfo2');

  IID get IID_ITypeInfo2 => _IID_ITypeInfo2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ITypeLib = _lookup<IID>('IID_ITypeLib');

  IID get IID_ITypeLib => _IID_ITypeLib.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ITypeLib2 = _lookup<IID>('IID_ITypeLib2');

  IID get IID_ITypeLib2 => _IID_ITypeLib2.ref;

  late final ffi.Pointer<IID> _IID_ITypeChangeEvents =
      _lookup<IID>('IID_ITypeChangeEvents');

  IID get IID_ITypeChangeEvents => _IID_ITypeChangeEvents.ref;

  late final ffi.Pointer<IID> _IID_IErrorInfo = _lookup<IID>('IID_IErrorInfo');

  IID get IID_IErrorInfo => _IID_IErrorInfo.ref;

  late final ffi.Pointer<IID> _IID_ICreateErrorInfo =
      _lookup<IID>('IID_ICreateErrorInfo');

  IID get IID_ICreateErrorInfo => _IID_ICreateErrorInfo.ref;

  late final ffi.Pointer<IID> _IID_ISupportErrorInfo =
      _lookup<IID>('IID_ISupportErrorInfo');

  IID get IID_ISupportErrorInfo => _IID_ISupportErrorInfo.ref;

  late final ffi.Pointer<IID> _IID_ITypeFactory =
      _lookup<IID>('IID_ITypeFactory');

  IID get IID_ITypeFactory => _IID_ITypeFactory.ref;

  late final ffi.Pointer<IID> _IID_ITypeMarshal =
      _lookup<IID>('IID_ITypeMarshal');

  IID get IID_ITypeMarshal => _IID_ITypeMarshal.ref;

  late final ffi.Pointer<IID> _IID_IRecordInfo =
      _lookup<IID>('IID_IRecordInfo');

  IID get IID_IRecordInfo => _IID_IRecordInfo.ref;

  late final ffi.Pointer<IID> _IID_IErrorLog = _lookup<IID>('IID_IErrorLog');

  IID get IID_IErrorLog => _IID_IErrorLog.ref;

  late final ffi.Pointer<IID> _IID_IPropertyBag =
      _lookup<IID>('IID_IPropertyBag');

  IID get IID_IPropertyBag => _IID_IPropertyBag.ref;

  late final ffi.Pointer<IID> _IID_ITypeLibRegistrationReader =
      _lookup<IID>('IID_ITypeLibRegistrationReader');

  IID get IID_ITypeLibRegistrationReader => _IID_ITypeLibRegistrationReader.ref;

  late final ffi.Pointer<IID> _IID_ITypeLibRegistration =
      _lookup<IID>('IID_ITypeLibRegistration');

  IID get IID_ITypeLibRegistration => _IID_ITypeLibRegistration.ref;

  late final ffi.Pointer<CLSID> _CLSID_TypeLibRegistrationReader =
      _lookup<CLSID>('CLSID_TypeLibRegistrationReader');

  CLSID get CLSID_TypeLibRegistrationReader =>
      _CLSID_TypeLibRegistrationReader.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec =>
      ___MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec.value;

  set __MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0023_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec =>
      ___MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec.value;

  set __MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oaidl_0000_0023_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidlbase_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IPropertyStorage =
      _lookup<IID>('IID_IPropertyStorage');

  IID get IID_IPropertyStorage => _IID_IPropertyStorage.ref;

  late final ffi.Pointer<IID> _IID_IPropertySetStorage =
      _lookup<IID>('IID_IPropertySetStorage');

  IID get IID_IPropertySetStorage => _IID_IPropertySetStorage.ref;

  late final ffi.Pointer<IID> _IID_IEnumSTATPROPSTG =
      _lookup<IID>('IID_IEnumSTATPROPSTG');

  IID get IID_IEnumSTATPROPSTG => _IID_IEnumSTATPROPSTG.ref;

  late final ffi.Pointer<IID> _IID_IEnumSTATPROPSETSTG =
      _lookup<IID>('IID_IEnumSTATPROPSETSTG');

  IID get IID_IEnumSTATPROPSETSTG => _IID_IEnumSTATPROPSETSTG.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec =>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec.value;

  set __MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec =>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec.value;

  set __MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidlbase_0000_0004_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IOleAdviseHolder =
      _lookup<IID>('IID_IOleAdviseHolder');

  IID get IID_IOleAdviseHolder => _IID_IOleAdviseHolder.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IOleCache = _lookup<IID>('IID_IOleCache');

  IID get IID_IOleCache => _IID_IOleCache.ref;

  late final ffi.Pointer<IID> _IID_IOleCache2 = _lookup<IID>('IID_IOleCache2');

  IID get IID_IOleCache2 => _IID_IOleCache2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec =>
      ___MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec.value;

  set __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec =>
      ___MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec.value;

  set __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IOleCacheControl =
      _lookup<IID>('IID_IOleCacheControl');

  IID get IID_IOleCacheControl => _IID_IOleCacheControl.ref;

  late final ffi.Pointer<IID> _IID_IParseDisplayName =
      _lookup<IID>('IID_IParseDisplayName');

  IID get IID_IParseDisplayName => _IID_IParseDisplayName.ref;

  late final ffi.Pointer<IID> _IID_IOleContainer =
      _lookup<IID>('IID_IOleContainer');

  IID get IID_IOleContainer => _IID_IOleContainer.ref;

  late final ffi.Pointer<IID> _IID_IOleClientSite =
      _lookup<IID>('IID_IOleClientSite');

  IID get IID_IOleClientSite => _IID_IOleClientSite.ref;

  late final ffi.Pointer<IID> _IID_IOleObject = _lookup<IID>('IID_IOleObject');

  IID get IID_IOleObject => _IID_IOleObject.ref;

  late final ffi.Pointer<RPC_IF_HANDLE> _IOLETypes_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('IOLETypes_v0_0_c_ifspec');

  RPC_IF_HANDLE get IOLETypes_v0_0_c_ifspec => _IOLETypes_v0_0_c_ifspec.value;

  set IOLETypes_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      _IOLETypes_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE> _IOLETypes_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('IOLETypes_v0_0_s_ifspec');

  RPC_IF_HANDLE get IOLETypes_v0_0_s_ifspec => _IOLETypes_v0_0_s_ifspec.value;

  set IOLETypes_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      _IOLETypes_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IOleWindow = _lookup<IID>('IID_IOleWindow');

  IID get IID_IOleWindow => _IID_IOleWindow.ref;

  late final ffi.Pointer<IID> _IID_IOleLink = _lookup<IID>('IID_IOleLink');

  IID get IID_IOleLink => _IID_IOleLink.ref;

  late final ffi.Pointer<IID> _IID_IOleItemContainer =
      _lookup<IID>('IID_IOleItemContainer');

  IID get IID_IOleItemContainer => _IID_IOleItemContainer.ref;

  late final ffi.Pointer<IID> _IID_IOleInPlaceUIWindow =
      _lookup<IID>('IID_IOleInPlaceUIWindow');

  IID get IID_IOleInPlaceUIWindow => _IID_IOleInPlaceUIWindow.ref;

  late final ffi.Pointer<IID> _IID_IOleInPlaceActiveObject =
      _lookup<IID>('IID_IOleInPlaceActiveObject');

  IID get IID_IOleInPlaceActiveObject => _IID_IOleInPlaceActiveObject.ref;

  late final ffi.Pointer<IID> _IID_IOleInPlaceFrame =
      _lookup<IID>('IID_IOleInPlaceFrame');

  IID get IID_IOleInPlaceFrame => _IID_IOleInPlaceFrame.ref;

  late final ffi.Pointer<IID> _IID_IOleInPlaceObject =
      _lookup<IID>('IID_IOleInPlaceObject');

  IID get IID_IOleInPlaceObject => _IID_IOleInPlaceObject.ref;

  late final ffi.Pointer<IID> _IID_IOleInPlaceSite =
      _lookup<IID>('IID_IOleInPlaceSite');

  IID get IID_IOleInPlaceSite => _IID_IOleInPlaceSite.ref;

  late final ffi.Pointer<IID> _IID_IContinue = _lookup<IID>('IID_IContinue');

  IID get IID_IContinue => _IID_IContinue.ref;

  late final ffi.Pointer<IID> _IID_IViewObject =
      _lookup<IID>('IID_IViewObject');

  IID get IID_IViewObject => _IID_IViewObject.ref;

  late final ffi.Pointer<IID> _IID_IViewObject2 =
      _lookup<IID>('IID_IViewObject2');

  IID get IID_IViewObject2 => _IID_IViewObject2.ref;

  late final ffi.Pointer<IID> _IID_IDropSource =
      _lookup<IID>('IID_IDropSource');

  IID get IID_IDropSource => _IID_IDropSource.ref;

  late final ffi.Pointer<IID> _IID_IDropTarget =
      _lookup<IID>('IID_IDropTarget');

  IID get IID_IDropTarget => _IID_IDropTarget.ref;

  late final ffi.Pointer<IID> _IID_IDropSourceNotify =
      _lookup<IID>('IID_IDropSourceNotify');

  IID get IID_IDropSourceNotify => _IID_IDropSourceNotify.ref;

  late final ffi.Pointer<IID> _IID_IEnterpriseDropTarget =
      _lookup<IID>('IID_IEnterpriseDropTarget');

  IID get IID_IEnterpriseDropTarget => _IID_IEnterpriseDropTarget.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec =>
      ___MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec.value;

  set __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec =>
      ___MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec.value;

  set __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IEnumOLEVERB =
      _lookup<IID>('IID_IEnumOLEVERB');

  IID get IID_IEnumOLEVERB => _IID_IEnumOLEVERB.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec =>
      ___MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec.value;

  set __MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0025_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec =>
      ___MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec.value;

  set __MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_oleidl_0000_0025_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_servprov_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_servprov_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_servprov_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_servprov_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_servprov_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_servprov_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_servprov_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_servprov_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IServiceProvider =
      _lookup<IID>('IID_IServiceProvider');

  IID get IID_IServiceProvider => _IID_IServiceProvider.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_servprov_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_servprov_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_servprov_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_servprov_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_servprov_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_servprov_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_servprov_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_servprov_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_msxml_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_msxml_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_msxml_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_msxml_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_msxml_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_msxml_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_msxml_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_msxml_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _LIBID_MSXML = _lookup<IID>('LIBID_MSXML');

  IID get LIBID_MSXML => _LIBID_MSXML.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMImplementation =
      _lookup<IID>('IID_IXMLDOMImplementation');

  IID get IID_IXMLDOMImplementation => _IID_IXMLDOMImplementation.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMNode =
      _lookup<IID>('IID_IXMLDOMNode');

  IID get IID_IXMLDOMNode => _IID_IXMLDOMNode.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMDocumentFragment =
      _lookup<IID>('IID_IXMLDOMDocumentFragment');

  IID get IID_IXMLDOMDocumentFragment => _IID_IXMLDOMDocumentFragment.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMDocument =
      _lookup<IID>('IID_IXMLDOMDocument');

  IID get IID_IXMLDOMDocument => _IID_IXMLDOMDocument.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMNodeList =
      _lookup<IID>('IID_IXMLDOMNodeList');

  IID get IID_IXMLDOMNodeList => _IID_IXMLDOMNodeList.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMNamedNodeMap =
      _lookup<IID>('IID_IXMLDOMNamedNodeMap');

  IID get IID_IXMLDOMNamedNodeMap => _IID_IXMLDOMNamedNodeMap.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMCharacterData =
      _lookup<IID>('IID_IXMLDOMCharacterData');

  IID get IID_IXMLDOMCharacterData => _IID_IXMLDOMCharacterData.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMAttribute =
      _lookup<IID>('IID_IXMLDOMAttribute');

  IID get IID_IXMLDOMAttribute => _IID_IXMLDOMAttribute.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMElement =
      _lookup<IID>('IID_IXMLDOMElement');

  IID get IID_IXMLDOMElement => _IID_IXMLDOMElement.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMText =
      _lookup<IID>('IID_IXMLDOMText');

  IID get IID_IXMLDOMText => _IID_IXMLDOMText.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMComment =
      _lookup<IID>('IID_IXMLDOMComment');

  IID get IID_IXMLDOMComment => _IID_IXMLDOMComment.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMProcessingInstruction =
      _lookup<IID>('IID_IXMLDOMProcessingInstruction');

  IID get IID_IXMLDOMProcessingInstruction =>
      _IID_IXMLDOMProcessingInstruction.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMCDATASection =
      _lookup<IID>('IID_IXMLDOMCDATASection');

  IID get IID_IXMLDOMCDATASection => _IID_IXMLDOMCDATASection.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMDocumentType =
      _lookup<IID>('IID_IXMLDOMDocumentType');

  IID get IID_IXMLDOMDocumentType => _IID_IXMLDOMDocumentType.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMNotation =
      _lookup<IID>('IID_IXMLDOMNotation');

  IID get IID_IXMLDOMNotation => _IID_IXMLDOMNotation.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMEntity =
      _lookup<IID>('IID_IXMLDOMEntity');

  IID get IID_IXMLDOMEntity => _IID_IXMLDOMEntity.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMEntityReference =
      _lookup<IID>('IID_IXMLDOMEntityReference');

  IID get IID_IXMLDOMEntityReference => _IID_IXMLDOMEntityReference.ref;

  late final ffi.Pointer<IID> _IID_IXMLDOMParseError =
      _lookup<IID>('IID_IXMLDOMParseError');

  IID get IID_IXMLDOMParseError => _IID_IXMLDOMParseError.ref;

  late final ffi.Pointer<IID> _IID_IXTLRuntime =
      _lookup<IID>('IID_IXTLRuntime');

  IID get IID_IXTLRuntime => _IID_IXTLRuntime.ref;

  late final ffi.Pointer<IID> _DIID_XMLDOMDocumentEvents =
      _lookup<IID>('DIID_XMLDOMDocumentEvents');

  IID get DIID_XMLDOMDocumentEvents => _DIID_XMLDOMDocumentEvents.ref;

  late final ffi.Pointer<CLSID> _CLSID_DOMDocument =
      _lookup<CLSID>('CLSID_DOMDocument');

  CLSID get CLSID_DOMDocument => _CLSID_DOMDocument.ref;

  late final ffi.Pointer<CLSID> _CLSID_DOMFreeThreadedDocument =
      _lookup<CLSID>('CLSID_DOMFreeThreadedDocument');

  CLSID get CLSID_DOMFreeThreadedDocument => _CLSID_DOMFreeThreadedDocument.ref;

  late final ffi.Pointer<IID> _IID_IXMLHttpRequest =
      _lookup<IID>('IID_IXMLHttpRequest');

  IID get IID_IXMLHttpRequest => _IID_IXMLHttpRequest.ref;

  late final ffi.Pointer<CLSID> _CLSID_XMLHTTPRequest =
      _lookup<CLSID>('CLSID_XMLHTTPRequest');

  CLSID get CLSID_XMLHTTPRequest => _CLSID_XMLHTTPRequest.ref;

  late final ffi.Pointer<IID> _IID_IXMLDSOControl =
      _lookup<IID>('IID_IXMLDSOControl');

  IID get IID_IXMLDSOControl => _IID_IXMLDSOControl.ref;

  late final ffi.Pointer<CLSID> _CLSID_XMLDSOControl =
      _lookup<CLSID>('CLSID_XMLDSOControl');

  CLSID get CLSID_XMLDSOControl => _CLSID_XMLDSOControl.ref;

  late final ffi.Pointer<IID> _IID_IXMLElementCollection =
      _lookup<IID>('IID_IXMLElementCollection');

  IID get IID_IXMLElementCollection => _IID_IXMLElementCollection.ref;

  late final ffi.Pointer<IID> _IID_IXMLDocument =
      _lookup<IID>('IID_IXMLDocument');

  IID get IID_IXMLDocument => _IID_IXMLDocument.ref;

  late final ffi.Pointer<IID> _IID_IXMLDocument2 =
      _lookup<IID>('IID_IXMLDocument2');

  IID get IID_IXMLDocument2 => _IID_IXMLDocument2.ref;

  late final ffi.Pointer<IID> _IID_IXMLElement =
      _lookup<IID>('IID_IXMLElement');

  IID get IID_IXMLElement => _IID_IXMLElement.ref;

  late final ffi.Pointer<IID> _IID_IXMLElement2 =
      _lookup<IID>('IID_IXMLElement2');

  IID get IID_IXMLElement2 => _IID_IXMLElement2.ref;

  late final ffi.Pointer<IID> _IID_IXMLAttribute =
      _lookup<IID>('IID_IXMLAttribute');

  IID get IID_IXMLAttribute => _IID_IXMLAttribute.ref;

  late final ffi.Pointer<IID> _IID_IXMLError = _lookup<IID>('IID_IXMLError');

  IID get IID_IXMLError => _IID_IXMLError.ref;

  late final ffi.Pointer<CLSID> _CLSID_XMLDocument =
      _lookup<CLSID>('CLSID_XMLDocument');

  CLSID get CLSID_XMLDocument => _CLSID_XMLDocument.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_msxml_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_msxml_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_msxml_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_msxml_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_msxml_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_msxml_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_msxml_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_msxml_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _CLSID_SBS_StdURLMoniker =
      _lookup<IID>('CLSID_SBS_StdURLMoniker');

  IID get CLSID_SBS_StdURLMoniker => _CLSID_SBS_StdURLMoniker.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_HttpProtocol =
      _lookup<IID>('CLSID_SBS_HttpProtocol');

  IID get CLSID_SBS_HttpProtocol => _CLSID_SBS_HttpProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_FtpProtocol =
      _lookup<IID>('CLSID_SBS_FtpProtocol');

  IID get CLSID_SBS_FtpProtocol => _CLSID_SBS_FtpProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_GopherProtocol =
      _lookup<IID>('CLSID_SBS_GopherProtocol');

  IID get CLSID_SBS_GopherProtocol => _CLSID_SBS_GopherProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_HttpSProtocol =
      _lookup<IID>('CLSID_SBS_HttpSProtocol');

  IID get CLSID_SBS_HttpSProtocol => _CLSID_SBS_HttpSProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_FileProtocol =
      _lookup<IID>('CLSID_SBS_FileProtocol');

  IID get CLSID_SBS_FileProtocol => _CLSID_SBS_FileProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_MkProtocol =
      _lookup<IID>('CLSID_SBS_MkProtocol');

  IID get CLSID_SBS_MkProtocol => _CLSID_SBS_MkProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_UrlMkBindCtx =
      _lookup<IID>('CLSID_SBS_UrlMkBindCtx');

  IID get CLSID_SBS_UrlMkBindCtx => _CLSID_SBS_UrlMkBindCtx.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_SoftDistExt =
      _lookup<IID>('CLSID_SBS_SoftDistExt');

  IID get CLSID_SBS_SoftDistExt => _CLSID_SBS_SoftDistExt.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_CdlProtocol =
      _lookup<IID>('CLSID_SBS_CdlProtocol');

  IID get CLSID_SBS_CdlProtocol => _CLSID_SBS_CdlProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_ClassInstallFilter =
      _lookup<IID>('CLSID_SBS_ClassInstallFilter');

  IID get CLSID_SBS_ClassInstallFilter => _CLSID_SBS_ClassInstallFilter.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_InternetSecurityManager =
      _lookup<IID>('CLSID_SBS_InternetSecurityManager');

  IID get CLSID_SBS_InternetSecurityManager =>
      _CLSID_SBS_InternetSecurityManager.ref;

  late final ffi.Pointer<IID> _CLSID_SBS_InternetZoneManager =
      _lookup<IID>('CLSID_SBS_InternetZoneManager');

  IID get CLSID_SBS_InternetZoneManager => _CLSID_SBS_InternetZoneManager.ref;

  late final ffi.Pointer<IID> _IID_IAsyncMoniker =
      _lookup<IID>('IID_IAsyncMoniker');

  IID get IID_IAsyncMoniker => _IID_IAsyncMoniker.ref;

  late final ffi.Pointer<IID> _CLSID_StdURLMoniker =
      _lookup<IID>('CLSID_StdURLMoniker');

  IID get CLSID_StdURLMoniker => _CLSID_StdURLMoniker.ref;

  late final ffi.Pointer<IID> _CLSID_HttpProtocol =
      _lookup<IID>('CLSID_HttpProtocol');

  IID get CLSID_HttpProtocol => _CLSID_HttpProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_FtpProtocol =
      _lookup<IID>('CLSID_FtpProtocol');

  IID get CLSID_FtpProtocol => _CLSID_FtpProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_GopherProtocol =
      _lookup<IID>('CLSID_GopherProtocol');

  IID get CLSID_GopherProtocol => _CLSID_GopherProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_HttpSProtocol =
      _lookup<IID>('CLSID_HttpSProtocol');

  IID get CLSID_HttpSProtocol => _CLSID_HttpSProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_FileProtocol =
      _lookup<IID>('CLSID_FileProtocol');

  IID get CLSID_FileProtocol => _CLSID_FileProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_ResProtocol =
      _lookup<IID>('CLSID_ResProtocol');

  IID get CLSID_ResProtocol => _CLSID_ResProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_AboutProtocol =
      _lookup<IID>('CLSID_AboutProtocol');

  IID get CLSID_AboutProtocol => _CLSID_AboutProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_JSProtocol =
      _lookup<IID>('CLSID_JSProtocol');

  IID get CLSID_JSProtocol => _CLSID_JSProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_MailtoProtocol =
      _lookup<IID>('CLSID_MailtoProtocol');

  IID get CLSID_MailtoProtocol => _CLSID_MailtoProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_IE4_PROTOCOLS =
      _lookup<IID>('CLSID_IE4_PROTOCOLS');

  IID get CLSID_IE4_PROTOCOLS => _CLSID_IE4_PROTOCOLS.ref;

  late final ffi.Pointer<IID> _CLSID_MkProtocol =
      _lookup<IID>('CLSID_MkProtocol');

  IID get CLSID_MkProtocol => _CLSID_MkProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_StdURLProtocol =
      _lookup<IID>('CLSID_StdURLProtocol');

  IID get CLSID_StdURLProtocol => _CLSID_StdURLProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_TBAuthProtocol =
      _lookup<IID>('CLSID_TBAuthProtocol');

  IID get CLSID_TBAuthProtocol => _CLSID_TBAuthProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_UrlMkBindCtx =
      _lookup<IID>('CLSID_UrlMkBindCtx');

  IID get CLSID_UrlMkBindCtx => _CLSID_UrlMkBindCtx.ref;

  late final ffi.Pointer<IID> _CLSID_CdlProtocol =
      _lookup<IID>('CLSID_CdlProtocol');

  IID get CLSID_CdlProtocol => _CLSID_CdlProtocol.ref;

  late final ffi.Pointer<IID> _CLSID_ClassInstallFilter =
      _lookup<IID>('CLSID_ClassInstallFilter');

  IID get CLSID_ClassInstallFilter => _CLSID_ClassInstallFilter.ref;

  late final ffi.Pointer<IID> _IID_IAsyncBindCtx =
      _lookup<IID>('IID_IAsyncBindCtx');

  IID get IID_IAsyncBindCtx => _IID_IAsyncBindCtx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IPersistMoniker =
      _lookup<IID>('IID_IPersistMoniker');

  IID get IID_IPersistMoniker => _IID_IPersistMoniker.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IMonikerProp =
      _lookup<IID>('IID_IMonikerProp');

  IID get IID_IMonikerProp => _IID_IMonikerProp.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindProtocol =
      _lookup<IID>('IID_IBindProtocol');

  IID get IID_IBindProtocol => _IID_IBindProtocol.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBinding = _lookup<IID>('IID_IBinding');

  IID get IID_IBinding => _IID_IBinding.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindStatusCallback =
      _lookup<IID>('IID_IBindStatusCallback');

  IID get IID_IBindStatusCallback => _IID_IBindStatusCallback.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindStatusCallbackEx =
      _lookup<IID>('IID_IBindStatusCallbackEx');

  IID get IID_IBindStatusCallbackEx => _IID_IBindStatusCallbackEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IAuthenticate =
      _lookup<IID>('IID_IAuthenticate');

  IID get IID_IAuthenticate => _IID_IAuthenticate.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IAuthenticateEx =
      _lookup<IID>('IID_IAuthenticateEx');

  IID get IID_IAuthenticateEx => _IID_IAuthenticateEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IHttpNegotiate =
      _lookup<IID>('IID_IHttpNegotiate');

  IID get IID_IHttpNegotiate => _IID_IHttpNegotiate.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IHttpNegotiate2 =
      _lookup<IID>('IID_IHttpNegotiate2');

  IID get IID_IHttpNegotiate2 => _IID_IHttpNegotiate2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IHttpNegotiate3 =
      _lookup<IID>('IID_IHttpNegotiate3');

  IID get IID_IHttpNegotiate3 => _IID_IHttpNegotiate3.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetFileStream =
      _lookup<IID>('IID_IWinInetFileStream');

  IID get IID_IWinInetFileStream => _IID_IWinInetFileStream.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWindowForBindingUI =
      _lookup<IID>('IID_IWindowForBindingUI');

  IID get IID_IWindowForBindingUI => _IID_IWindowForBindingUI.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ICodeInstall =
      _lookup<IID>('IID_ICodeInstall');

  IID get IID_ICodeInstall => _IID_ICodeInstall.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IUri = _lookup<IID>('IID_IUri');

  IID get IID_IUri => _IID_IUri.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IUriContainer =
      _lookup<IID>('IID_IUriContainer');

  IID get IID_IUriContainer => _IID_IUriContainer.ref;

  late final ffi.Pointer<IID> _IID_IUriBuilder =
      _lookup<IID>('IID_IUriBuilder');

  IID get IID_IUriBuilder => _IID_IUriBuilder.ref;

  late final ffi.Pointer<IID> _IID_IUriBuilderFactory =
      _lookup<IID>('IID_IUriBuilderFactory');

  IID get IID_IUriBuilderFactory => _IID_IUriBuilderFactory.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetInfo =
      _lookup<IID>('IID_IWinInetInfo');

  IID get IID_IWinInetInfo => _IID_IWinInetInfo.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IHttpSecurity =
      _lookup<IID>('IID_IHttpSecurity');

  IID get IID_IHttpSecurity => _IID_IHttpSecurity.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetHttpInfo =
      _lookup<IID>('IID_IWinInetHttpInfo');

  IID get IID_IWinInetHttpInfo => _IID_IWinInetHttpInfo.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetHttpTimeouts =
      _lookup<IID>('IID_IWinInetHttpTimeouts');

  IID get IID_IWinInetHttpTimeouts => _IID_IWinInetHttpTimeouts.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetCacheHints =
      _lookup<IID>('IID_IWinInetCacheHints');

  IID get IID_IWinInetCacheHints => _IID_IWinInetCacheHints.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWinInetCacheHints2 =
      _lookup<IID>('IID_IWinInetCacheHints2');

  IID get IID_IWinInetCacheHints2 => _IID_IWinInetCacheHints2.ref;

  late final ffi.Pointer<GUID> _SID_BindHost = _lookup<GUID>('SID_BindHost');

  GUID get SID_BindHost => _SID_BindHost.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindHost = _lookup<IID>('IID_IBindHost');

  IID get IID_IBindHost => _IID_IBindHost.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternet = _lookup<IID>('IID_IInternet');

  IID get IID_IInternet => _IID_IInternet.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetBindInfo =
      _lookup<IID>('IID_IInternetBindInfo');

  IID get IID_IInternetBindInfo => _IID_IInternetBindInfo.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetBindInfoEx =
      _lookup<IID>('IID_IInternetBindInfoEx');

  IID get IID_IInternetBindInfoEx => _IID_IInternetBindInfoEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocolRoot =
      _lookup<IID>('IID_IInternetProtocolRoot');

  IID get IID_IInternetProtocolRoot => _IID_IInternetProtocolRoot.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocol =
      _lookup<IID>('IID_IInternetProtocol');

  IID get IID_IInternetProtocol => _IID_IInternetProtocol.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocolEx =
      _lookup<IID>('IID_IInternetProtocolEx');

  IID get IID_IInternetProtocolEx => _IID_IInternetProtocolEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocolSink =
      _lookup<IID>('IID_IInternetProtocolSink');

  IID get IID_IInternetProtocolSink => _IID_IInternetProtocolSink.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocolSinkStackable =
      _lookup<IID>('IID_IInternetProtocolSinkStackable');

  IID get IID_IInternetProtocolSinkStackable =>
      _IID_IInternetProtocolSinkStackable.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetSession =
      _lookup<IID>('IID_IInternetSession');

  IID get IID_IInternetSession => _IID_IInternetSession.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetThreadSwitch =
      _lookup<IID>('IID_IInternetThreadSwitch');

  IID get IID_IInternetThreadSwitch => _IID_IInternetThreadSwitch.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetPriority =
      _lookup<IID>('IID_IInternetPriority');

  IID get IID_IInternetPriority => _IID_IInternetPriority.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetProtocolInfo =
      _lookup<IID>('IID_IInternetProtocolInfo');

  IID get IID_IInternetProtocolInfo => _IID_IInternetProtocolInfo.ref;

  late final ffi.Pointer<IID> _CLSID_InternetSecurityManager =
      _lookup<IID>('CLSID_InternetSecurityManager');

  IID get CLSID_InternetSecurityManager => _CLSID_InternetSecurityManager.ref;

  late final ffi.Pointer<IID> _CLSID_InternetZoneManager =
      _lookup<IID>('CLSID_InternetZoneManager');

  IID get CLSID_InternetZoneManager => _CLSID_InternetZoneManager.ref;

  late final ffi.Pointer<IID> _CLSID_PersistentZoneIdentifier =
      _lookup<IID>('CLSID_PersistentZoneIdentifier');

  IID get CLSID_PersistentZoneIdentifier => _CLSID_PersistentZoneIdentifier.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetSecurityMgrSite =
      _lookup<IID>('IID_IInternetSecurityMgrSite');

  IID get IID_IInternetSecurityMgrSite => _IID_IInternetSecurityMgrSite.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetSecurityManager =
      _lookup<IID>('IID_IInternetSecurityManager');

  IID get IID_IInternetSecurityManager => _IID_IInternetSecurityManager.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetSecurityManagerEx =
      _lookup<IID>('IID_IInternetSecurityManagerEx');

  IID get IID_IInternetSecurityManagerEx => _IID_IInternetSecurityManagerEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetSecurityManagerEx2 =
      _lookup<IID>('IID_IInternetSecurityManagerEx2');

  IID get IID_IInternetSecurityManagerEx2 =>
      _IID_IInternetSecurityManagerEx2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IZoneIdentifier =
      _lookup<IID>('IID_IZoneIdentifier');

  IID get IID_IZoneIdentifier => _IID_IZoneIdentifier.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IZoneIdentifier2 =
      _lookup<IID>('IID_IZoneIdentifier2');

  IID get IID_IZoneIdentifier2 => _IID_IZoneIdentifier2.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetHostSecurityManager =
      _lookup<IID>('IID_IInternetHostSecurityManager');

  IID get IID_IInternetHostSecurityManager =>
      _IID_IInternetHostSecurityManager.ref;

  late final ffi.Pointer<GUID> _GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED =
      _lookup<GUID>('GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED');

  GUID get GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED =>
      _GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetZoneManager =
      _lookup<IID>('IID_IInternetZoneManager');

  IID get IID_IInternetZoneManager => _IID_IInternetZoneManager.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetZoneManagerEx =
      _lookup<IID>('IID_IInternetZoneManagerEx');

  IID get IID_IInternetZoneManagerEx => _IID_IInternetZoneManagerEx.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IInternetZoneManagerEx2 =
      _lookup<IID>('IID_IInternetZoneManagerEx2');

  IID get IID_IInternetZoneManagerEx2 => _IID_IInternetZoneManagerEx2.ref;

  late final ffi.Pointer<IID> _CLSID_SoftDistExt =
      _lookup<IID>('CLSID_SoftDistExt');

  IID get CLSID_SoftDistExt => _CLSID_SoftDistExt.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ISoftDistExt =
      _lookup<IID>('IID_ISoftDistExt');

  IID get IID_ISoftDistExt => _IID_ISoftDistExt.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_ICatalogFileInfo =
      _lookup<IID>('IID_ICatalogFileInfo');

  IID get IID_ICatalogFileInfo => _IID_ICatalogFileInfo.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IDataFilter =
      _lookup<IID>('IID_IDataFilter');

  IID get IID_IDataFilter => _IID_IDataFilter.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IEncodingFilterFactory =
      _lookup<IID>('IID_IEncodingFilterFactory');

  IID get IID_IEncodingFilterFactory => _IID_IEncodingFilterFactory.ref;

  late final ffi.Pointer<GUID> _GUID_CUSTOM_CONFIRMOBJECTSAFETY =
      _lookup<GUID>('GUID_CUSTOM_CONFIRMOBJECTSAFETY');

  GUID get GUID_CUSTOM_CONFIRMOBJECTSAFETY =>
      _GUID_CUSTOM_CONFIRMOBJECTSAFETY.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IWrappedProtocol =
      _lookup<IID>('IID_IWrappedProtocol');

  IID get IID_IWrappedProtocol => _IID_IWrappedProtocol.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IGetBindHandle =
      _lookup<IID>('IID_IGetBindHandle');

  IID get IID_IGetBindHandle => _IID_IGetBindHandle.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindCallbackRedirect =
      _lookup<IID>('IID_IBindCallbackRedirect');

  IID get IID_IBindCallbackRedirect => _IID_IBindCallbackRedirect.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0054_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0054_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_IBindHttpSecurity =
      _lookup<IID>('IID_IBindHttpSecurity');

  IID get IID_IBindHttpSecurity => _IID_IBindHttpSecurity.ref;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec =>
      ___MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec.value;

  set __MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0055_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec =>
      ___MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec.value;

  set __MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_urlmon_0000_0055_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidl_0000_0004_v0_0_c_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidl_0000_0004_v0_0_c_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec =>
      ___MIDL_itf_propidl_0000_0004_v0_0_c_ifspec.value;

  set __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidl_0000_0004_v0_0_c_ifspec.value = value;

  late final ffi.Pointer<RPC_IF_HANDLE>
      ___MIDL_itf_propidl_0000_0004_v0_0_s_ifspec =
      _lookup<RPC_IF_HANDLE>('__MIDL_itf_propidl_0000_0004_v0_0_s_ifspec');

  RPC_IF_HANDLE get __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec =>
      ___MIDL_itf_propidl_0000_0004_v0_0_s_ifspec.value;

  set __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec(RPC_IF_HANDLE value) =>
      ___MIDL_itf_propidl_0000_0004_v0_0_s_ifspec.value = value;

  late final ffi.Pointer<IID> _IID_StdOle = _lookup<IID>('IID_StdOle');

  IID get IID_StdOle => _IID_StdOle.ref;

  late final ffi.Pointer<GUID> _IID_IPrintDialogCallback =
      _lookup<GUID>('IID_IPrintDialogCallback');

  GUID get IID_IPrintDialogCallback => _IID_IPrintDialogCallback.ref;

  late final ffi.Pointer<GUID> _IID_IPrintDialogServices =
      _lookup<GUID>('IID_IPrintDialogServices');

  GUID get IID_IPrintDialogServices => _IID_IPrintDialogServices.ref;

  late final ffi.Pointer<GUID> _NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID =
      _lookup<GUID>('NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID');

  GUID get NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID =>
      _NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID.ref;

  late final ffi.Pointer<GUID> _NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID =
      _lookup<GUID>('NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID');

  GUID get NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID =>
      _NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID.ref;

  late final ffi.Pointer<GUID> _DOMAIN_JOIN_GUID =
      _lookup<GUID>('DOMAIN_JOIN_GUID');

  GUID get DOMAIN_JOIN_GUID => _DOMAIN_JOIN_GUID.ref;

  late final ffi.Pointer<GUID> _DOMAIN_LEAVE_GUID =
      _lookup<GUID>('DOMAIN_LEAVE_GUID');

  GUID get DOMAIN_LEAVE_GUID => _DOMAIN_LEAVE_GUID.ref;

  late final ffi.Pointer<GUID> _FIREWALL_PORT_OPEN_GUID =
      _lookup<GUID>('FIREWALL_PORT_OPEN_GUID');

  GUID get FIREWALL_PORT_OPEN_GUID => _FIREWALL_PORT_OPEN_GUID.ref;

  late final ffi.Pointer<GUID> _FIREWALL_PORT_CLOSE_GUID =
      _lookup<GUID>('FIREWALL_PORT_CLOSE_GUID');

  GUID get FIREWALL_PORT_CLOSE_GUID => _FIREWALL_PORT_CLOSE_GUID.ref;

  late final ffi.Pointer<GUID> _MACHINE_POLICY_PRESENT_GUID =
      _lookup<GUID>('MACHINE_POLICY_PRESENT_GUID');

  GUID get MACHINE_POLICY_PRESENT_GUID => _MACHINE_POLICY_PRESENT_GUID.ref;

  late final ffi.Pointer<GUID> _USER_POLICY_PRESENT_GUID =
      _lookup<GUID>('USER_POLICY_PRESENT_GUID');

  GUID get USER_POLICY_PRESENT_GUID => _USER_POLICY_PRESENT_GUID.ref;

  late final ffi.Pointer<GUID> _RPC_INTERFACE_EVENT_GUID =
      _lookup<GUID>('RPC_INTERFACE_EVENT_GUID');

  GUID get RPC_INTERFACE_EVENT_GUID => _RPC_INTERFACE_EVENT_GUID.ref;

  late final ffi.Pointer<GUID> _NAMED_PIPE_EVENT_GUID =
      _lookup<GUID>('NAMED_PIPE_EVENT_GUID');

  GUID get NAMED_PIPE_EVENT_GUID => _NAMED_PIPE_EVENT_GUID.ref;

  late final ffi.Pointer<GUID> _CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID =
      _lookup<GUID>('CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID');

  GUID get CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID =>
      _CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID.ref;

  late final ffi.Pointer<SCOPE_ID> _scopeid_unspecified =
      _lookup<SCOPE_ID>('scopeid_unspecified');

  ffi.Pointer<SCOPE_ID> get scopeid_unspecified => _scopeid_unspecified;

  late final ffi.Pointer<IN_ADDR> _in4addr_any =
      _lookup<IN_ADDR>('in4addr_any');

  IN_ADDR get in4addr_any => _in4addr_any.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_loopback =
      _lookup<IN_ADDR>('in4addr_loopback');

  IN_ADDR get in4addr_loopback => _in4addr_loopback.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_broadcast =
      _lookup<IN_ADDR>('in4addr_broadcast');

  IN_ADDR get in4addr_broadcast => _in4addr_broadcast.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_allnodesonlink =
      _lookup<IN_ADDR>('in4addr_allnodesonlink');

  IN_ADDR get in4addr_allnodesonlink => _in4addr_allnodesonlink.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_allroutersonlink =
      _lookup<IN_ADDR>('in4addr_allroutersonlink');

  IN_ADDR get in4addr_allroutersonlink => _in4addr_allroutersonlink.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_alligmpv3routersonlink =
      _lookup<IN_ADDR>('in4addr_alligmpv3routersonlink');

  IN_ADDR get in4addr_alligmpv3routersonlink =>
      _in4addr_alligmpv3routersonlink.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_allteredohostsonlink =
      _lookup<IN_ADDR>('in4addr_allteredohostsonlink');

  IN_ADDR get in4addr_allteredohostsonlink => _in4addr_allteredohostsonlink.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_linklocalprefix =
      _lookup<IN_ADDR>('in4addr_linklocalprefix');

  IN_ADDR get in4addr_linklocalprefix => _in4addr_linklocalprefix.ref;

  late final ffi.Pointer<IN_ADDR> _in4addr_multicastprefix =
      _lookup<IN_ADDR>('in4addr_multicastprefix');

  IN_ADDR get in4addr_multicastprefix => _in4addr_multicastprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_any =
      _lookup<IN6_ADDR>('in6addr_any');

  IN6_ADDR get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_loopback =
      _lookup<IN6_ADDR>('in6addr_loopback');

  IN6_ADDR get in6addr_loopback => _in6addr_loopback.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_allnodesonnode =
      _lookup<IN6_ADDR>('in6addr_allnodesonnode');

  IN6_ADDR get in6addr_allnodesonnode => _in6addr_allnodesonnode.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_allnodesonlink =
      _lookup<IN6_ADDR>('in6addr_allnodesonlink');

  IN6_ADDR get in6addr_allnodesonlink => _in6addr_allnodesonlink.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_allroutersonlink =
      _lookup<IN6_ADDR>('in6addr_allroutersonlink');

  IN6_ADDR get in6addr_allroutersonlink => _in6addr_allroutersonlink.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_allmldv2routersonlink =
      _lookup<IN6_ADDR>('in6addr_allmldv2routersonlink');

  IN6_ADDR get in6addr_allmldv2routersonlink =>
      _in6addr_allmldv2routersonlink.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_teredoinitiallinklocaladdress =
      _lookup<IN6_ADDR>('in6addr_teredoinitiallinklocaladdress');

  IN6_ADDR get in6addr_teredoinitiallinklocaladdress =>
      _in6addr_teredoinitiallinklocaladdress.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_linklocalprefix =
      _lookup<IN6_ADDR>('in6addr_linklocalprefix');

  IN6_ADDR get in6addr_linklocalprefix => _in6addr_linklocalprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_multicastprefix =
      _lookup<IN6_ADDR>('in6addr_multicastprefix');

  IN6_ADDR get in6addr_multicastprefix => _in6addr_multicastprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_solicitednodemulticastprefix =
      _lookup<IN6_ADDR>('in6addr_solicitednodemulticastprefix');

  IN6_ADDR get in6addr_solicitednodemulticastprefix =>
      _in6addr_solicitednodemulticastprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_v4mappedprefix =
      _lookup<IN6_ADDR>('in6addr_v4mappedprefix');

  IN6_ADDR get in6addr_v4mappedprefix => _in6addr_v4mappedprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_6to4prefix =
      _lookup<IN6_ADDR>('in6addr_6to4prefix');

  IN6_ADDR get in6addr_6to4prefix => _in6addr_6to4prefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_teredoprefix =
      _lookup<IN6_ADDR>('in6addr_teredoprefix');

  IN6_ADDR get in6addr_teredoprefix => _in6addr_teredoprefix.ref;

  late final ffi.Pointer<IN6_ADDR> _in6addr_teredoprefix_old =
      _lookup<IN6_ADDR>('in6addr_teredoprefix_old');

  IN6_ADDR get in6addr_teredoprefix_old => _in6addr_teredoprefix_old.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_NAME =
      _lookup<DEVPROPKEY>('DEVPKEY_NAME');

  DEVPROPKEY get DEVPKEY_NAME => _DEVPKEY_NAME.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DeviceDesc =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DeviceDesc');

  DEVPROPKEY get DEVPKEY_Device_DeviceDesc => _DEVPKEY_Device_DeviceDesc.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_HardwareIds =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_HardwareIds');

  DEVPROPKEY get DEVPKEY_Device_HardwareIds => _DEVPKEY_Device_HardwareIds.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_CompatibleIds =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_CompatibleIds');

  DEVPROPKEY get DEVPKEY_Device_CompatibleIds =>
      _DEVPKEY_Device_CompatibleIds.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Service =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Service');

  DEVPROPKEY get DEVPKEY_Device_Service => _DEVPKEY_Device_Service.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Class =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Class');

  DEVPROPKEY get DEVPKEY_Device_Class => _DEVPKEY_Device_Class.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ClassGuid =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ClassGuid');

  DEVPROPKEY get DEVPKEY_Device_ClassGuid => _DEVPKEY_Device_ClassGuid.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Driver =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Driver');

  DEVPROPKEY get DEVPKEY_Device_Driver => _DEVPKEY_Device_Driver.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ConfigFlags =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ConfigFlags');

  DEVPROPKEY get DEVPKEY_Device_ConfigFlags => _DEVPKEY_Device_ConfigFlags.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Manufacturer =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Manufacturer');

  DEVPROPKEY get DEVPKEY_Device_Manufacturer =>
      _DEVPKEY_Device_Manufacturer.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FriendlyName =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FriendlyName');

  DEVPROPKEY get DEVPKEY_Device_FriendlyName =>
      _DEVPKEY_Device_FriendlyName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LocationInfo =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LocationInfo');

  DEVPROPKEY get DEVPKEY_Device_LocationInfo =>
      _DEVPKEY_Device_LocationInfo.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PDOName =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PDOName');

  DEVPROPKEY get DEVPKEY_Device_PDOName => _DEVPKEY_Device_PDOName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Capabilities =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Capabilities');

  DEVPROPKEY get DEVPKEY_Device_Capabilities =>
      _DEVPKEY_Device_Capabilities.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_UINumber =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_UINumber');

  DEVPROPKEY get DEVPKEY_Device_UINumber => _DEVPKEY_Device_UINumber.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_UpperFilters =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_UpperFilters');

  DEVPROPKEY get DEVPKEY_Device_UpperFilters =>
      _DEVPKEY_Device_UpperFilters.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LowerFilters =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LowerFilters');

  DEVPROPKEY get DEVPKEY_Device_LowerFilters =>
      _DEVPKEY_Device_LowerFilters.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BusTypeGuid =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BusTypeGuid');

  DEVPROPKEY get DEVPKEY_Device_BusTypeGuid => _DEVPKEY_Device_BusTypeGuid.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LegacyBusType =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LegacyBusType');

  DEVPROPKEY get DEVPKEY_Device_LegacyBusType =>
      _DEVPKEY_Device_LegacyBusType.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BusNumber =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BusNumber');

  DEVPROPKEY get DEVPKEY_Device_BusNumber => _DEVPKEY_Device_BusNumber.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_EnumeratorName =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_EnumeratorName');

  DEVPROPKEY get DEVPKEY_Device_EnumeratorName =>
      _DEVPKEY_Device_EnumeratorName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Security =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Security');

  DEVPROPKEY get DEVPKEY_Device_Security => _DEVPKEY_Device_Security.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_SecuritySDS =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SecuritySDS');

  DEVPROPKEY get DEVPKEY_Device_SecuritySDS => _DEVPKEY_Device_SecuritySDS.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DevType =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DevType');

  DEVPROPKEY get DEVPKEY_Device_DevType => _DEVPKEY_Device_DevType.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Exclusive =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Exclusive');

  DEVPROPKEY get DEVPKEY_Device_Exclusive => _DEVPKEY_Device_Exclusive.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Characteristics =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Characteristics');

  DEVPROPKEY get DEVPKEY_Device_Characteristics =>
      _DEVPKEY_Device_Characteristics.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Address =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Address');

  DEVPROPKEY get DEVPKEY_Device_Address => _DEVPKEY_Device_Address.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_UINumberDescFormat =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_UINumberDescFormat');

  DEVPROPKEY get DEVPKEY_Device_UINumberDescFormat =>
      _DEVPKEY_Device_UINumberDescFormat.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PowerData =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PowerData');

  DEVPROPKEY get DEVPKEY_Device_PowerData => _DEVPKEY_Device_PowerData.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_RemovalPolicy =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_RemovalPolicy');

  DEVPROPKEY get DEVPKEY_Device_RemovalPolicy =>
      _DEVPKEY_Device_RemovalPolicy.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_RemovalPolicyDefault =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_RemovalPolicyDefault');

  DEVPROPKEY get DEVPKEY_Device_RemovalPolicyDefault =>
      _DEVPKEY_Device_RemovalPolicyDefault.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_RemovalPolicyOverride =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_RemovalPolicyOverride');

  DEVPROPKEY get DEVPKEY_Device_RemovalPolicyOverride =>
      _DEVPKEY_Device_RemovalPolicyOverride.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_InstallState =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_InstallState');

  DEVPROPKEY get DEVPKEY_Device_InstallState =>
      _DEVPKEY_Device_InstallState.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LocationPaths =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LocationPaths');

  DEVPROPKEY get DEVPKEY_Device_LocationPaths =>
      _DEVPKEY_Device_LocationPaths.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BaseContainerId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BaseContainerId');

  DEVPROPKEY get DEVPKEY_Device_BaseContainerId =>
      _DEVPKEY_Device_BaseContainerId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_InstanceId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_InstanceId');

  DEVPROPKEY get DEVPKEY_Device_InstanceId => _DEVPKEY_Device_InstanceId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DevNodeStatus =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DevNodeStatus');

  DEVPROPKEY get DEVPKEY_Device_DevNodeStatus =>
      _DEVPKEY_Device_DevNodeStatus.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ProblemCode =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ProblemCode');

  DEVPROPKEY get DEVPKEY_Device_ProblemCode => _DEVPKEY_Device_ProblemCode.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_EjectionRelations =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_EjectionRelations');

  DEVPROPKEY get DEVPKEY_Device_EjectionRelations =>
      _DEVPKEY_Device_EjectionRelations.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_RemovalRelations =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_RemovalRelations');

  DEVPROPKEY get DEVPKEY_Device_RemovalRelations =>
      _DEVPKEY_Device_RemovalRelations.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PowerRelations =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PowerRelations');

  DEVPROPKEY get DEVPKEY_Device_PowerRelations =>
      _DEVPKEY_Device_PowerRelations.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BusRelations =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BusRelations');

  DEVPROPKEY get DEVPKEY_Device_BusRelations =>
      _DEVPKEY_Device_BusRelations.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Parent =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Parent');

  DEVPROPKEY get DEVPKEY_Device_Parent => _DEVPKEY_Device_Parent.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Children =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Children');

  DEVPROPKEY get DEVPKEY_Device_Children => _DEVPKEY_Device_Children.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Siblings =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Siblings');

  DEVPROPKEY get DEVPKEY_Device_Siblings => _DEVPKEY_Device_Siblings.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_TransportRelations =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_TransportRelations');

  DEVPROPKEY get DEVPKEY_Device_TransportRelations =>
      _DEVPKEY_Device_TransportRelations.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ProblemStatus =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ProblemStatus');

  DEVPROPKEY get DEVPKEY_Device_ProblemStatus =>
      _DEVPKEY_Device_ProblemStatus.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Reported =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Reported');

  DEVPROPKEY get DEVPKEY_Device_Reported => _DEVPKEY_Device_Reported.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Legacy =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Legacy');

  DEVPROPKEY get DEVPKEY_Device_Legacy => _DEVPKEY_Device_Legacy.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ContainerId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ContainerId');

  DEVPROPKEY get DEVPKEY_Device_ContainerId => _DEVPKEY_Device_ContainerId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_InLocalMachineContainer =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_InLocalMachineContainer');

  DEVPROPKEY get DEVPKEY_Device_InLocalMachineContainer =>
      _DEVPKEY_Device_InLocalMachineContainer.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Model =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Model');

  DEVPROPKEY get DEVPKEY_Device_Model => _DEVPKEY_Device_Model.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ModelId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ModelId');

  DEVPROPKEY get DEVPKEY_Device_ModelId => _DEVPKEY_Device_ModelId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FriendlyNameAttributes =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FriendlyNameAttributes');

  DEVPROPKEY get DEVPKEY_Device_FriendlyNameAttributes =>
      _DEVPKEY_Device_FriendlyNameAttributes.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ManufacturerAttributes =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ManufacturerAttributes');

  DEVPROPKEY get DEVPKEY_Device_ManufacturerAttributes =>
      _DEVPKEY_Device_ManufacturerAttributes.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PresenceNotForDevice =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PresenceNotForDevice');

  DEVPROPKEY get DEVPKEY_Device_PresenceNotForDevice =>
      _DEVPKEY_Device_PresenceNotForDevice.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_SignalStrength =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SignalStrength');

  DEVPROPKEY get DEVPKEY_Device_SignalStrength =>
      _DEVPKEY_Device_SignalStrength.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_Device_IsAssociateableByUserAction =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_IsAssociateableByUserAction');

  DEVPROPKEY get DEVPKEY_Device_IsAssociateableByUserAction =>
      _DEVPKEY_Device_IsAssociateableByUserAction.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ShowInUninstallUI =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ShowInUninstallUI');

  DEVPROPKEY get DEVPKEY_Device_ShowInUninstallUI =>
      _DEVPKEY_Device_ShowInUninstallUI.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_CompanionApps =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_CompanionApps');

  DEVPROPKEY get DEVPKEY_Device_CompanionApps =>
      _DEVPKEY_Device_CompanionApps.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PrimaryCompanionApp =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PrimaryCompanionApp');

  DEVPROPKEY get DEVPKEY_Device_PrimaryCompanionApp =>
      _DEVPKEY_Device_PrimaryCompanionApp.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Numa_Proximity_Domain =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Numa_Proximity_Domain');

  DEVPROPKEY get DEVPKEY_Device_Numa_Proximity_Domain =>
      _DEVPKEY_Device_Numa_Proximity_Domain.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DHP_Rebalance_Policy =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DHP_Rebalance_Policy');

  DEVPROPKEY get DEVPKEY_Device_DHP_Rebalance_Policy =>
      _DEVPKEY_Device_DHP_Rebalance_Policy.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Numa_Node =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Numa_Node');

  DEVPROPKEY get DEVPKEY_Device_Numa_Node => _DEVPKEY_Device_Numa_Node.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BusReportedDeviceDesc =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BusReportedDeviceDesc');

  DEVPROPKEY get DEVPKEY_Device_BusReportedDeviceDesc =>
      _DEVPKEY_Device_BusReportedDeviceDesc.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_IsPresent =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_IsPresent');

  DEVPROPKEY get DEVPKEY_Device_IsPresent => _DEVPKEY_Device_IsPresent.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_HasProblem =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_HasProblem');

  DEVPROPKEY get DEVPKEY_Device_HasProblem => _DEVPKEY_Device_HasProblem.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ConfigurationId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ConfigurationId');

  DEVPROPKEY get DEVPKEY_Device_ConfigurationId =>
      _DEVPKEY_Device_ConfigurationId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ReportedDeviceIdsHash =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ReportedDeviceIdsHash');

  DEVPROPKEY get DEVPKEY_Device_ReportedDeviceIdsHash =>
      _DEVPKEY_Device_ReportedDeviceIdsHash.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PhysicalDeviceLocation =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PhysicalDeviceLocation');

  DEVPROPKEY get DEVPKEY_Device_PhysicalDeviceLocation =>
      _DEVPKEY_Device_PhysicalDeviceLocation.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_BiosDeviceName =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_BiosDeviceName');

  DEVPROPKEY get DEVPKEY_Device_BiosDeviceName =>
      _DEVPKEY_Device_BiosDeviceName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverProblemDesc =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverProblemDesc');

  DEVPROPKEY get DEVPKEY_Device_DriverProblemDesc =>
      _DEVPKEY_Device_DriverProblemDesc.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DebuggerSafe =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DebuggerSafe');

  DEVPROPKEY get DEVPKEY_Device_DebuggerSafe =>
      _DEVPKEY_Device_DebuggerSafe.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_PostInstallInProgress =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_PostInstallInProgress');

  DEVPROPKEY get DEVPKEY_Device_PostInstallInProgress =>
      _DEVPKEY_Device_PostInstallInProgress.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_Stack =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_Stack');

  DEVPROPKEY get DEVPKEY_Device_Stack => _DEVPKEY_Device_Stack.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ExtendedConfigurationIds =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ExtendedConfigurationIds');

  DEVPROPKEY get DEVPKEY_Device_ExtendedConfigurationIds =>
      _DEVPKEY_Device_ExtendedConfigurationIds.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_IsRebootRequired =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_IsRebootRequired');

  DEVPROPKEY get DEVPKEY_Device_IsRebootRequired =>
      _DEVPKEY_Device_IsRebootRequired.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FirmwareDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FirmwareDate');

  DEVPROPKEY get DEVPKEY_Device_FirmwareDate =>
      _DEVPKEY_Device_FirmwareDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FirmwareVersion =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FirmwareVersion');

  DEVPROPKEY get DEVPKEY_Device_FirmwareVersion =>
      _DEVPKEY_Device_FirmwareVersion.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FirmwareRevision =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FirmwareRevision');

  DEVPROPKEY get DEVPKEY_Device_FirmwareRevision =>
      _DEVPKEY_Device_FirmwareRevision.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DependencyProviders =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DependencyProviders');

  DEVPROPKEY get DEVPKEY_Device_DependencyProviders =>
      _DEVPKEY_Device_DependencyProviders.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DependencyDependents =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DependencyDependents');

  DEVPROPKEY get DEVPKEY_Device_DependencyDependents =>
      _DEVPKEY_Device_DependencyDependents.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_SoftRestartSupported =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SoftRestartSupported');

  DEVPROPKEY get DEVPKEY_Device_SoftRestartSupported =>
      _DEVPKEY_Device_SoftRestartSupported.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ExtendedAddress =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ExtendedAddress');

  DEVPROPKEY get DEVPKEY_Device_ExtendedAddress =>
      _DEVPKEY_Device_ExtendedAddress.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_AssignedToGuest =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_AssignedToGuest');

  DEVPROPKEY get DEVPKEY_Device_AssignedToGuest =>
      _DEVPKEY_Device_AssignedToGuest.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_CreatorProcessId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_CreatorProcessId');

  DEVPROPKEY get DEVPKEY_Device_CreatorProcessId =>
      _DEVPKEY_Device_CreatorProcessId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FirmwareVendor =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FirmwareVendor');

  DEVPROPKEY get DEVPKEY_Device_FirmwareVendor =>
      _DEVPKEY_Device_FirmwareVendor.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_SessionId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SessionId');

  DEVPROPKEY get DEVPKEY_Device_SessionId => _DEVPKEY_Device_SessionId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_InstallDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_InstallDate');

  DEVPROPKEY get DEVPKEY_Device_InstallDate => _DEVPKEY_Device_InstallDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_FirstInstallDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_FirstInstallDate');

  DEVPROPKEY get DEVPKEY_Device_FirstInstallDate =>
      _DEVPKEY_Device_FirstInstallDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LastArrivalDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LastArrivalDate');

  DEVPROPKEY get DEVPKEY_Device_LastArrivalDate =>
      _DEVPKEY_Device_LastArrivalDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_LastRemovalDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_LastRemovalDate');

  DEVPROPKEY get DEVPKEY_Device_LastRemovalDate =>
      _DEVPKEY_Device_LastRemovalDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverDate =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverDate');

  DEVPROPKEY get DEVPKEY_Device_DriverDate => _DEVPKEY_Device_DriverDate.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverVersion =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverVersion');

  DEVPROPKEY get DEVPKEY_Device_DriverVersion =>
      _DEVPKEY_Device_DriverVersion.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverDesc =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverDesc');

  DEVPROPKEY get DEVPKEY_Device_DriverDesc => _DEVPKEY_Device_DriverDesc.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverInfPath =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverInfPath');

  DEVPROPKEY get DEVPKEY_Device_DriverInfPath =>
      _DEVPKEY_Device_DriverInfPath.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverInfSection =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverInfSection');

  DEVPROPKEY get DEVPKEY_Device_DriverInfSection =>
      _DEVPKEY_Device_DriverInfSection.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverInfSectionExt =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverInfSectionExt');

  DEVPROPKEY get DEVPKEY_Device_DriverInfSectionExt =>
      _DEVPKEY_Device_DriverInfSectionExt.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_MatchingDeviceId =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_MatchingDeviceId');

  DEVPROPKEY get DEVPKEY_Device_MatchingDeviceId =>
      _DEVPKEY_Device_MatchingDeviceId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverProvider =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverProvider');

  DEVPROPKEY get DEVPKEY_Device_DriverProvider =>
      _DEVPKEY_Device_DriverProvider.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverPropPageProvider =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverPropPageProvider');

  DEVPROPKEY get DEVPKEY_Device_DriverPropPageProvider =>
      _DEVPKEY_Device_DriverPropPageProvider.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverCoInstallers =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverCoInstallers');

  DEVPROPKEY get DEVPKEY_Device_DriverCoInstallers =>
      _DEVPKEY_Device_DriverCoInstallers.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ResourcePickerTags =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ResourcePickerTags');

  DEVPROPKEY get DEVPKEY_Device_ResourcePickerTags =>
      _DEVPKEY_Device_ResourcePickerTags.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_ResourcePickerExceptions =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_ResourcePickerExceptions');

  DEVPROPKEY get DEVPKEY_Device_ResourcePickerExceptions =>
      _DEVPKEY_Device_ResourcePickerExceptions.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverRank =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverRank');

  DEVPROPKEY get DEVPKEY_Device_DriverRank => _DEVPKEY_Device_DriverRank.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_DriverLogoLevel =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_DriverLogoLevel');

  DEVPROPKEY get DEVPKEY_Device_DriverLogoLevel =>
      _DEVPKEY_Device_DriverLogoLevel.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_NoConnectSound =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_NoConnectSound');

  DEVPROPKEY get DEVPKEY_Device_NoConnectSound =>
      _DEVPKEY_Device_NoConnectSound.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_GenericDriverInstalled =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_GenericDriverInstalled');

  DEVPROPKEY get DEVPKEY_Device_GenericDriverInstalled =>
      _DEVPKEY_Device_GenericDriverInstalled.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_Device_AdditionalSoftwareRequested =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_AdditionalSoftwareRequested');

  DEVPROPKEY get DEVPKEY_Device_AdditionalSoftwareRequested =>
      _DEVPKEY_Device_AdditionalSoftwareRequested.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_Device_SafeRemovalRequired =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SafeRemovalRequired');

  DEVPROPKEY get DEVPKEY_Device_SafeRemovalRequired =>
      _DEVPKEY_Device_SafeRemovalRequired.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_Device_SafeRemovalRequiredOverride =
      _lookup<DEVPROPKEY>('DEVPKEY_Device_SafeRemovalRequiredOverride');

  DEVPROPKEY get DEVPKEY_Device_SafeRemovalRequiredOverride =>
      _DEVPKEY_Device_SafeRemovalRequiredOverride.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_Model =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_Model');

  DEVPROPKEY get DEVPKEY_DrvPkg_Model => _DEVPKEY_DrvPkg_Model.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_VendorWebSite =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_VendorWebSite');

  DEVPROPKEY get DEVPKEY_DrvPkg_VendorWebSite =>
      _DEVPKEY_DrvPkg_VendorWebSite.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_DetailedDescription =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_DetailedDescription');

  DEVPROPKEY get DEVPKEY_DrvPkg_DetailedDescription =>
      _DEVPKEY_DrvPkg_DetailedDescription.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_DocumentationLink =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_DocumentationLink');

  DEVPROPKEY get DEVPKEY_DrvPkg_DocumentationLink =>
      _DEVPKEY_DrvPkg_DocumentationLink.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_Icon =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_Icon');

  DEVPROPKEY get DEVPKEY_DrvPkg_Icon => _DEVPKEY_DrvPkg_Icon.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DrvPkg_BrandingIcon =
      _lookup<DEVPROPKEY>('DEVPKEY_DrvPkg_BrandingIcon');

  DEVPROPKEY get DEVPKEY_DrvPkg_BrandingIcon =>
      _DEVPKEY_DrvPkg_BrandingIcon.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_UpperFilters =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_UpperFilters');

  DEVPROPKEY get DEVPKEY_DeviceClass_UpperFilters =>
      _DEVPKEY_DeviceClass_UpperFilters.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_LowerFilters =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_LowerFilters');

  DEVPROPKEY get DEVPKEY_DeviceClass_LowerFilters =>
      _DEVPKEY_DeviceClass_LowerFilters.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_Security =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_Security');

  DEVPROPKEY get DEVPKEY_DeviceClass_Security =>
      _DEVPKEY_DeviceClass_Security.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_SecuritySDS =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_SecuritySDS');

  DEVPROPKEY get DEVPKEY_DeviceClass_SecuritySDS =>
      _DEVPKEY_DeviceClass_SecuritySDS.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_DevType =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_DevType');

  DEVPROPKEY get DEVPKEY_DeviceClass_DevType =>
      _DEVPKEY_DeviceClass_DevType.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_Exclusive =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_Exclusive');

  DEVPROPKEY get DEVPKEY_DeviceClass_Exclusive =>
      _DEVPKEY_DeviceClass_Exclusive.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_Characteristics =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_Characteristics');

  DEVPROPKEY get DEVPKEY_DeviceClass_Characteristics =>
      _DEVPKEY_DeviceClass_Characteristics.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_Name =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_Name');

  DEVPROPKEY get DEVPKEY_DeviceClass_Name => _DEVPKEY_DeviceClass_Name.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_ClassName =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_ClassName');

  DEVPROPKEY get DEVPKEY_DeviceClass_ClassName =>
      _DEVPKEY_DeviceClass_ClassName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_Icon =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_Icon');

  DEVPROPKEY get DEVPKEY_DeviceClass_Icon => _DEVPKEY_DeviceClass_Icon.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_ClassInstaller =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_ClassInstaller');

  DEVPROPKEY get DEVPKEY_DeviceClass_ClassInstaller =>
      _DEVPKEY_DeviceClass_ClassInstaller.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_PropPageProvider =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_PropPageProvider');

  DEVPROPKEY get DEVPKEY_DeviceClass_PropPageProvider =>
      _DEVPKEY_DeviceClass_PropPageProvider.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_NoInstallClass =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_NoInstallClass');

  DEVPROPKEY get DEVPKEY_DeviceClass_NoInstallClass =>
      _DEVPKEY_DeviceClass_NoInstallClass.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_NoDisplayClass =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_NoDisplayClass');

  DEVPROPKEY get DEVPKEY_DeviceClass_NoDisplayClass =>
      _DEVPKEY_DeviceClass_NoDisplayClass.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_SilentInstall =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_SilentInstall');

  DEVPROPKEY get DEVPKEY_DeviceClass_SilentInstall =>
      _DEVPKEY_DeviceClass_SilentInstall.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_NoUseClass =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_NoUseClass');

  DEVPROPKEY get DEVPKEY_DeviceClass_NoUseClass =>
      _DEVPKEY_DeviceClass_NoUseClass.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_DefaultService =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_DefaultService');

  DEVPROPKEY get DEVPKEY_DeviceClass_DefaultService =>
      _DEVPKEY_DeviceClass_DefaultService.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_IconPath =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_IconPath');

  DEVPROPKEY get DEVPKEY_DeviceClass_IconPath =>
      _DEVPKEY_DeviceClass_IconPath.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_DHPRebalanceOptOut =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_DHPRebalanceOptOut');

  DEVPROPKEY get DEVPKEY_DeviceClass_DHPRebalanceOptOut =>
      _DEVPKEY_DeviceClass_DHPRebalanceOptOut.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceClass_ClassCoInstallers =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceClass_ClassCoInstallers');

  DEVPROPKEY get DEVPKEY_DeviceClass_ClassCoInstallers =>
      _DEVPKEY_DeviceClass_ClassCoInstallers.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_FriendlyName =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_FriendlyName');

  DEVPROPKEY get DEVPKEY_DeviceInterface_FriendlyName =>
      _DEVPKEY_DeviceInterface_FriendlyName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_Enabled =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_Enabled');

  DEVPROPKEY get DEVPKEY_DeviceInterface_Enabled =>
      _DEVPKEY_DeviceInterface_Enabled.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_ClassGuid =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_ClassGuid');

  DEVPROPKEY get DEVPKEY_DeviceInterface_ClassGuid =>
      _DEVPKEY_DeviceInterface_ClassGuid.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_ReferenceString =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_ReferenceString');

  DEVPROPKEY get DEVPKEY_DeviceInterface_ReferenceString =>
      _DEVPKEY_DeviceInterface_ReferenceString.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_Restricted =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_Restricted');

  DEVPROPKEY get DEVPKEY_DeviceInterface_Restricted =>
      _DEVPKEY_DeviceInterface_Restricted.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceInterface_UnrestrictedAppCapabilities =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceInterface_UnrestrictedAppCapabilities');

  DEVPROPKEY get DEVPKEY_DeviceInterface_UnrestrictedAppCapabilities =>
      _DEVPKEY_DeviceInterface_UnrestrictedAppCapabilities.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterface_SchematicName =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterface_SchematicName');

  DEVPROPKEY get DEVPKEY_DeviceInterface_SchematicName =>
      _DEVPKEY_DeviceInterface_SchematicName.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceInterfaceClass_DefaultInterface =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterfaceClass_DefaultInterface');

  DEVPROPKEY get DEVPKEY_DeviceInterfaceClass_DefaultInterface =>
      _DEVPKEY_DeviceInterfaceClass_DefaultInterface.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceInterfaceClass_Name =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceInterfaceClass_Name');

  DEVPROPKEY get DEVPKEY_DeviceInterfaceClass_Name =>
      _DEVPKEY_DeviceInterfaceClass_Name.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Address =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Address');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Address =>
      _DEVPKEY_DeviceContainer_Address.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_DiscoveryMethod =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_DiscoveryMethod');

  DEVPROPKEY get DEVPKEY_DeviceContainer_DiscoveryMethod =>
      _DEVPKEY_DeviceContainer_DiscoveryMethod.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsEncrypted =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsEncrypted');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsEncrypted =>
      _DEVPKEY_DeviceContainer_IsEncrypted.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsAuthenticated =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsAuthenticated');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsAuthenticated =>
      _DEVPKEY_DeviceContainer_IsAuthenticated.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsConnected =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsConnected');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsConnected =>
      _DEVPKEY_DeviceContainer_IsConnected.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsPaired =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsPaired');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsPaired =>
      _DEVPKEY_DeviceContainer_IsPaired.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Icon =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Icon');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Icon =>
      _DEVPKEY_DeviceContainer_Icon.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Version =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Version');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Version =>
      _DEVPKEY_DeviceContainer_Version.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Last_Seen =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Last_Seen');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Last_Seen =>
      _DEVPKEY_DeviceContainer_Last_Seen.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Last_Connected =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Last_Connected');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Last_Connected =>
      _DEVPKEY_DeviceContainer_Last_Connected.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_IsShowInDisconnectedState =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsShowInDisconnectedState');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsShowInDisconnectedState =>
      _DEVPKEY_DeviceContainer_IsShowInDisconnectedState.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsLocalMachine =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsLocalMachine');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsLocalMachine =>
      _DEVPKEY_DeviceContainer_IsLocalMachine.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_MetadataPath =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_MetadataPath');

  DEVPROPKEY get DEVPKEY_DeviceContainer_MetadataPath =>
      _DEVPKEY_DeviceContainer_MetadataPath.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_IsMetadataSearchInProgress =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsMetadataSearchInProgress');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsMetadataSearchInProgress =>
      _DEVPKEY_DeviceContainer_IsMetadataSearchInProgress.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_MetadataChecksum =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_MetadataChecksum');

  DEVPROPKEY get DEVPKEY_DeviceContainer_MetadataChecksum =>
      _DEVPKEY_DeviceContainer_MetadataChecksum.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_IsNotInterestingForDisplay =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsNotInterestingForDisplay');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsNotInterestingForDisplay =>
      _DEVPKEY_DeviceContainer_IsNotInterestingForDisplay.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect');

  DEVPROPKEY get DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect =>
      _DEVPKEY_DeviceContainer_LaunchDeviceStageOnDeviceConnect.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer');

  DEVPROPKEY get DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer =>
      _DEVPKEY_DeviceContainer_LaunchDeviceStageFromExplorer.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_BaselineExperienceId =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_BaselineExperienceId');

  DEVPROPKEY get DEVPKEY_DeviceContainer_BaselineExperienceId =>
      _DEVPKEY_DeviceContainer_BaselineExperienceId.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable =>
      _DEVPKEY_DeviceContainer_IsDeviceUniquelyIdentifiable.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_AssociationArray =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_AssociationArray');

  DEVPROPKEY get DEVPKEY_DeviceContainer_AssociationArray =>
      _DEVPKEY_DeviceContainer_AssociationArray.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_DeviceDescription1 =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_DeviceDescription1');

  DEVPROPKEY get DEVPKEY_DeviceContainer_DeviceDescription1 =>
      _DEVPKEY_DeviceContainer_DeviceDescription1.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_DeviceDescription2 =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_DeviceDescription2');

  DEVPROPKEY get DEVPKEY_DeviceContainer_DeviceDescription2 =>
      _DEVPKEY_DeviceContainer_DeviceDescription2.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_HasProblem =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_HasProblem');

  DEVPROPKEY get DEVPKEY_DeviceContainer_HasProblem =>
      _DEVPKEY_DeviceContainer_HasProblem.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsSharedDevice =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsSharedDevice');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsSharedDevice =>
      _DEVPKEY_DeviceContainer_IsSharedDevice.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsNetworkDevice =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsNetworkDevice');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsNetworkDevice =>
      _DEVPKEY_DeviceContainer_IsNetworkDevice.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsDefaultDevice =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsDefaultDevice');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsDefaultDevice =>
      _DEVPKEY_DeviceContainer_IsDefaultDevice.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_MetadataCabinet =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_MetadataCabinet');

  DEVPROPKEY get DEVPKEY_DeviceContainer_MetadataCabinet =>
      _DEVPKEY_DeviceContainer_MetadataCabinet.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_RequiresPairingElevation =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_RequiresPairingElevation');

  DEVPROPKEY get DEVPKEY_DeviceContainer_RequiresPairingElevation =>
      _DEVPKEY_DeviceContainer_RequiresPairingElevation.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_ExperienceId =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_ExperienceId');

  DEVPROPKEY get DEVPKEY_DeviceContainer_ExperienceId =>
      _DEVPKEY_DeviceContainer_ExperienceId.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Category =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Category');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Category =>
      _DEVPKEY_DeviceContainer_Category.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_Category_Desc_Singular =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Category_Desc_Singular');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Category_Desc_Singular =>
      _DEVPKEY_DeviceContainer_Category_Desc_Singular.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_Category_Desc_Plural =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Category_Desc_Plural');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Category_Desc_Plural =>
      _DEVPKEY_DeviceContainer_Category_Desc_Plural.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Category_Icon =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Category_Icon');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Category_Icon =>
      _DEVPKEY_DeviceContainer_Category_Icon.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_CategoryGroup_Desc =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_CategoryGroup_Desc');

  DEVPROPKEY get DEVPKEY_DeviceContainer_CategoryGroup_Desc =>
      _DEVPKEY_DeviceContainer_CategoryGroup_Desc.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_CategoryGroup_Icon =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_CategoryGroup_Icon');

  DEVPROPKEY get DEVPKEY_DeviceContainer_CategoryGroup_Icon =>
      _DEVPKEY_DeviceContainer_CategoryGroup_Icon.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_PrimaryCategory =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_PrimaryCategory');

  DEVPROPKEY get DEVPKEY_DeviceContainer_PrimaryCategory =>
      _DEVPKEY_DeviceContainer_PrimaryCategory.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_UnpairUninstall =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_UnpairUninstall');

  DEVPROPKEY get DEVPKEY_DeviceContainer_UnpairUninstall =>
      _DEVPKEY_DeviceContainer_UnpairUninstall.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_RequiresUninstallElevation =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_RequiresUninstallElevation');

  DEVPROPKEY get DEVPKEY_DeviceContainer_RequiresUninstallElevation =>
      _DEVPKEY_DeviceContainer_RequiresUninstallElevation.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_DeviceFunctionSubRank =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_DeviceFunctionSubRank');

  DEVPROPKEY get DEVPKEY_DeviceContainer_DeviceFunctionSubRank =>
      _DEVPKEY_DeviceContainer_DeviceFunctionSubRank.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected');

  DEVPROPKEY get DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected =>
      _DEVPKEY_DeviceContainer_AlwaysShowDeviceAsConnected.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_ConfigFlags =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_ConfigFlags');

  DEVPROPKEY get DEVPKEY_DeviceContainer_ConfigFlags =>
      _DEVPKEY_DeviceContainer_ConfigFlags.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames');

  DEVPROPKEY get DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames =>
      _DEVPKEY_DeviceContainer_PrivilegedPackageFamilyNames.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames');

  DEVPROPKEY get DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames =>
      _DEVPKEY_DeviceContainer_CustomPrivilegedPackageFamilyNames.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_IsRebootRequired =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_IsRebootRequired');

  DEVPROPKEY get DEVPKEY_DeviceContainer_IsRebootRequired =>
      _DEVPKEY_DeviceContainer_IsRebootRequired.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_FriendlyName =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_FriendlyName');

  DEVPROPKEY get DEVPKEY_DeviceContainer_FriendlyName =>
      _DEVPKEY_DeviceContainer_FriendlyName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_Manufacturer =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_Manufacturer');

  DEVPROPKEY get DEVPKEY_DeviceContainer_Manufacturer =>
      _DEVPKEY_DeviceContainer_Manufacturer.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_ModelName =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_ModelName');

  DEVPROPKEY get DEVPKEY_DeviceContainer_ModelName =>
      _DEVPKEY_DeviceContainer_ModelName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DeviceContainer_ModelNumber =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_ModelNumber');

  DEVPROPKEY get DEVPKEY_DeviceContainer_ModelNumber =>
      _DEVPKEY_DeviceContainer_ModelNumber.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_DeviceContainer_InstallInProgress =
      _lookup<DEVPROPKEY>('DEVPKEY_DeviceContainer_InstallInProgress');

  DEVPROPKEY get DEVPKEY_DeviceContainer_InstallInProgress =>
      _DEVPKEY_DeviceContainer_InstallInProgress.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_DevQuery_ObjectType =
      _lookup<DEVPROPKEY>('DEVPKEY_DevQuery_ObjectType');

  DEVPROPKEY get DEVPKEY_DevQuery_ObjectType =>
      _DEVPKEY_DevQuery_ObjectType.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_SecondaryInterface =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_SecondaryInterface');

  DEVPROPKEY get DEVPKEY_PciRootBus_SecondaryInterface =>
      _DEVPKEY_PciRootBus_SecondaryInterface.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_CurrentSpeedAndMode =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_CurrentSpeedAndMode');

  DEVPROPKEY get DEVPKEY_PciRootBus_CurrentSpeedAndMode =>
      _DEVPKEY_PciRootBus_CurrentSpeedAndMode.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_SupportedSpeedsAndModes =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_SupportedSpeedsAndModes');

  DEVPROPKEY get DEVPKEY_PciRootBus_SupportedSpeedsAndModes =>
      _DEVPKEY_PciRootBus_SupportedSpeedsAndModes.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_DeviceIDMessagingCapable =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_DeviceIDMessagingCapable');

  DEVPROPKEY get DEVPKEY_PciRootBus_DeviceIDMessagingCapable =>
      _DEVPKEY_PciRootBus_DeviceIDMessagingCapable.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_SecondaryBusWidth =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_SecondaryBusWidth');

  DEVPROPKEY get DEVPKEY_PciRootBus_SecondaryBusWidth =>
      _DEVPKEY_PciRootBus_SecondaryBusWidth.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_ExtendedConfigAvailable =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_ExtendedConfigAvailable');

  DEVPROPKEY get DEVPKEY_PciRootBus_ExtendedConfigAvailable =>
      _DEVPKEY_PciRootBus_ExtendedConfigAvailable.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport =
      _lookup<DEVPROPKEY>(
          'DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport =>
      _DEVPKEY_PciRootBus_ExtendedPCIConfigOpRegionSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_ASPMSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_ASPMSupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_ASPMSupport =>
      _DEVPKEY_PciRootBus_ASPMSupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_ClockPowerManagementSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_ClockPowerManagementSupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_ClockPowerManagementSupport =>
      _DEVPKEY_PciRootBus_ClockPowerManagementSupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_PCISegmentGroupsSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_PCISegmentGroupsSupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_PCISegmentGroupsSupport =>
      _DEVPKEY_PciRootBus_PCISegmentGroupsSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_MSISupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_MSISupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_MSISupport =>
      _DEVPKEY_PciRootBus_MSISupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl =>
      _DEVPKEY_PciRootBus_PCIExpressNativeHotPlugControl.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_SHPCNativeHotPlugControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_SHPCNativeHotPlugControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_SHPCNativeHotPlugControl =>
      _DEVPKEY_PciRootBus_SHPCNativeHotPlugControl.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_PCIExpressNativePMEControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_PCIExpressNativePMEControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_PCIExpressNativePMEControl =>
      _DEVPKEY_PciRootBus_PCIExpressNativePMEControl.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_PCIExpressAERControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_PCIExpressAERControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_PCIExpressAERControl =>
      _DEVPKEY_PciRootBus_PCIExpressAERControl.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_PCIExpressCapabilityControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_PCIExpressCapabilityControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_PCIExpressCapabilityControl =>
      _DEVPKEY_PciRootBus_PCIExpressCapabilityControl.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciRootBus_NativePciExpressControl =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_NativePciExpressControl');

  DEVPROPKEY get DEVPKEY_PciRootBus_NativePciExpressControl =>
      _DEVPKEY_PciRootBus_NativePciExpressControl.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciRootBus_SystemMsiSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciRootBus_SystemMsiSupport');

  DEVPROPKEY get DEVPKEY_PciRootBus_SystemMsiSupport =>
      _DEVPKEY_PciRootBus_SystemMsiSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_DeviceType =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_DeviceType');

  DEVPROPKEY get DEVPKEY_PciDevice_DeviceType =>
      _DEVPKEY_PciDevice_DeviceType.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_CurrentSpeedAndMode =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_CurrentSpeedAndMode');

  DEVPROPKEY get DEVPKEY_PciDevice_CurrentSpeedAndMode =>
      _DEVPKEY_PciDevice_CurrentSpeedAndMode.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_BaseClass =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_BaseClass');

  DEVPROPKEY get DEVPKEY_PciDevice_BaseClass =>
      _DEVPKEY_PciDevice_BaseClass.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_SubClass =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_SubClass');

  DEVPROPKEY get DEVPKEY_PciDevice_SubClass => _DEVPKEY_PciDevice_SubClass.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_ProgIf =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_ProgIf');

  DEVPROPKEY get DEVPKEY_PciDevice_ProgIf => _DEVPKEY_PciDevice_ProgIf.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_CurrentPayloadSize =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_CurrentPayloadSize');

  DEVPROPKEY get DEVPKEY_PciDevice_CurrentPayloadSize =>
      _DEVPKEY_PciDevice_CurrentPayloadSize.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_MaxPayloadSize =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_MaxPayloadSize');

  DEVPROPKEY get DEVPKEY_PciDevice_MaxPayloadSize =>
      _DEVPKEY_PciDevice_MaxPayloadSize.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_MaxReadRequestSize =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_MaxReadRequestSize');

  DEVPROPKEY get DEVPKEY_PciDevice_MaxReadRequestSize =>
      _DEVPKEY_PciDevice_MaxReadRequestSize.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_CurrentLinkSpeed =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_CurrentLinkSpeed');

  DEVPROPKEY get DEVPKEY_PciDevice_CurrentLinkSpeed =>
      _DEVPKEY_PciDevice_CurrentLinkSpeed.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_CurrentLinkWidth =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_CurrentLinkWidth');

  DEVPROPKEY get DEVPKEY_PciDevice_CurrentLinkWidth =>
      _DEVPKEY_PciDevice_CurrentLinkWidth.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_MaxLinkSpeed =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_MaxLinkSpeed');

  DEVPROPKEY get DEVPKEY_PciDevice_MaxLinkSpeed =>
      _DEVPKEY_PciDevice_MaxLinkSpeed.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_MaxLinkWidth =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_MaxLinkWidth');

  DEVPROPKEY get DEVPKEY_PciDevice_MaxLinkWidth =>
      _DEVPKEY_PciDevice_MaxLinkWidth.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_ExpressSpecVersion =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_ExpressSpecVersion');

  DEVPROPKEY get DEVPKEY_PciDevice_ExpressSpecVersion =>
      _DEVPKEY_PciDevice_ExpressSpecVersion.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_InterruptSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_InterruptSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_InterruptSupport =>
      _DEVPKEY_PciDevice_InterruptSupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_InterruptMessageMaximum =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_InterruptMessageMaximum');

  DEVPROPKEY get DEVPKEY_PciDevice_InterruptMessageMaximum =>
      _DEVPKEY_PciDevice_InterruptMessageMaximum.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_BarTypes =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_BarTypes');

  DEVPROPKEY get DEVPKEY_PciDevice_BarTypes => _DEVPKEY_PciDevice_BarTypes.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AERCapabilityPresent =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AERCapabilityPresent');

  DEVPROPKEY get DEVPKEY_PciDevice_AERCapabilityPresent =>
      _DEVPKEY_PciDevice_AERCapabilityPresent.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_FirmwareErrorHandling =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_FirmwareErrorHandling');

  DEVPROPKEY get DEVPKEY_PciDevice_FirmwareErrorHandling =>
      _DEVPKEY_PciDevice_FirmwareErrorHandling.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_Uncorrectable_Error_Mask =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Uncorrectable_Error_Mask');

  DEVPROPKEY get DEVPKEY_PciDevice_Uncorrectable_Error_Mask =>
      _DEVPKEY_PciDevice_Uncorrectable_Error_Mask.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_Uncorrectable_Error_Severity =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Uncorrectable_Error_Severity');

  DEVPROPKEY get DEVPKEY_PciDevice_Uncorrectable_Error_Severity =>
      _DEVPKEY_PciDevice_Uncorrectable_Error_Severity.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_Correctable_Error_Mask =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Correctable_Error_Mask');

  DEVPROPKEY get DEVPKEY_PciDevice_Correctable_Error_Mask =>
      _DEVPKEY_PciDevice_Correctable_Error_Mask.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_ECRC_Errors =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_ECRC_Errors');

  DEVPROPKEY get DEVPKEY_PciDevice_ECRC_Errors =>
      _DEVPKEY_PciDevice_ECRC_Errors.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_Error_Reporting =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Error_Reporting');

  DEVPROPKEY get DEVPKEY_PciDevice_Error_Reporting =>
      _DEVPKEY_PciDevice_Error_Reporting.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_RootError_Reporting =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_RootError_Reporting');

  DEVPROPKEY get DEVPKEY_PciDevice_RootError_Reporting =>
      _DEVPKEY_PciDevice_RootError_Reporting.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_S0WakeupSupported =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_S0WakeupSupported');

  DEVPROPKEY get DEVPKEY_PciDevice_S0WakeupSupported =>
      _DEVPKEY_PciDevice_S0WakeupSupported.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_SriovSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_SriovSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_SriovSupport =>
      _DEVPKEY_PciDevice_SriovSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_Label_Id =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Label_Id');

  DEVPROPKEY get DEVPKEY_PciDevice_Label_Id => _DEVPKEY_PciDevice_Label_Id.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_Label_String =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_Label_String');

  DEVPROPKEY get DEVPKEY_PciDevice_Label_String =>
      _DEVPKEY_PciDevice_Label_String.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AcsSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AcsSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_AcsSupport =>
      _DEVPKEY_PciDevice_AcsSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AriSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AriSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_AriSupport =>
      _DEVPKEY_PciDevice_AriSupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_AcsCompatibleUpHierarchy =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AcsCompatibleUpHierarchy');

  DEVPROPKEY get DEVPKEY_PciDevice_AcsCompatibleUpHierarchy =>
      _DEVPKEY_PciDevice_AcsCompatibleUpHierarchy.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AcsCapabilityRegister =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AcsCapabilityRegister');

  DEVPROPKEY get DEVPKEY_PciDevice_AcsCapabilityRegister =>
      _DEVPKEY_PciDevice_AcsCapabilityRegister.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AtsSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AtsSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_AtsSupport =>
      _DEVPKEY_PciDevice_AtsSupport.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_RequiresReservedMemoryRegion =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_RequiresReservedMemoryRegion');

  DEVPROPKEY get DEVPKEY_PciDevice_RequiresReservedMemoryRegion =>
      _DEVPKEY_PciDevice_RequiresReservedMemoryRegion.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_AtomicsSupported =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_AtomicsSupported');

  DEVPROPKEY get DEVPKEY_PciDevice_AtomicsSupported =>
      _DEVPKEY_PciDevice_AtomicsSupported.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_SupportedLinkSubState =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_SupportedLinkSubState');

  DEVPROPKEY get DEVPKEY_PciDevice_SupportedLinkSubState =>
      _DEVPKEY_PciDevice_SupportedLinkSubState.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_OnPostPath =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_OnPostPath');

  DEVPROPKEY get DEVPKEY_PciDevice_OnPostPath =>
      _DEVPKEY_PciDevice_OnPostPath.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_D3ColdSupport =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_D3ColdSupport');

  DEVPROPKEY get DEVPKEY_PciDevice_D3ColdSupport =>
      _DEVPKEY_PciDevice_D3ColdSupport.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_SerialNumber =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_SerialNumber');

  DEVPROPKEY get DEVPKEY_PciDevice_SerialNumber =>
      _DEVPKEY_PciDevice_SerialNumber.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_UsbDvsecPortType =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_UsbDvsecPortType');

  DEVPROPKEY get DEVPKEY_PciDevice_UsbDvsecPortType =>
      _DEVPKEY_PciDevice_UsbDvsecPortType.ref;

  late final ffi.Pointer<DEVPROPKEY>
      _DEVPKEY_PciDevice_UsbDvsecPortSpecificAttributes =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_UsbDvsecPortSpecificAttributes');

  DEVPROPKEY get DEVPKEY_PciDevice_UsbDvsecPortSpecificAttributes =>
      _DEVPKEY_PciDevice_UsbDvsecPortSpecificAttributes.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_UsbComponentRelation =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_UsbComponentRelation');

  DEVPROPKEY get DEVPKEY_PciDevice_UsbComponentRelation =>
      _DEVPKEY_PciDevice_UsbComponentRelation.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_UsbHostRouterName =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_UsbHostRouterName');

  DEVPROPKEY get DEVPKEY_PciDevice_UsbHostRouterName =>
      _DEVPKEY_PciDevice_UsbHostRouterName.ref;

  late final ffi.Pointer<DEVPROPKEY> _DEVPKEY_PciDevice_ParentSerialNumber =
      _lookup<DEVPROPKEY>('DEVPKEY_PciDevice_ParentSerialNumber');

  DEVPROPKEY get DEVPKEY_PciDevice_ParentSerialNumber =>
      _DEVPKEY_PciDevice_ParentSerialNumber.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_OFFLOAD_CAPABILITY =
      _lookup<GUID>('GUID_NWF_OFFLOAD_CAPABILITY');

  GUID get GUID_NWF_OFFLOAD_CAPABILITY => _GUID_NWF_OFFLOAD_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_OFFLOAD_CAPABILITY =
      _lookup<GUID>('GUID_NWF_CURRENT_OFFLOAD_CAPABILITY');

  GUID get GUID_NWF_CURRENT_OFFLOAD_CAPABILITY =>
      _GUID_NWF_CURRENT_OFFLOAD_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WEP_OFFLOAD =
      _lookup<GUID>('GUID_NWF_WEP_OFFLOAD');

  GUID get GUID_NWF_WEP_OFFLOAD => _GUID_NWF_WEP_OFFLOAD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WEP_UPLOAD =
      _lookup<GUID>('GUID_NWF_WEP_UPLOAD');

  GUID get GUID_NWF_WEP_UPLOAD => _GUID_NWF_WEP_UPLOAD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DEFAULT_WEP_OFFLOAD =
      _lookup<GUID>('GUID_NWF_DEFAULT_WEP_OFFLOAD');

  GUID get GUID_NWF_DEFAULT_WEP_OFFLOAD => _GUID_NWF_DEFAULT_WEP_OFFLOAD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DEFAULT_WEP_UPLOAD =
      _lookup<GUID>('GUID_NWF_DEFAULT_WEP_UPLOAD');

  GUID get GUID_NWF_DEFAULT_WEP_UPLOAD => _GUID_NWF_DEFAULT_WEP_UPLOAD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MPDU_MAX_LENGTH =
      _lookup<GUID>('GUID_NWF_MPDU_MAX_LENGTH');

  GUID get GUID_NWF_MPDU_MAX_LENGTH => _GUID_NWF_MPDU_MAX_LENGTH.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_OPERATION_MODE_CAPABILITY =
      _lookup<GUID>('GUID_NWF_OPERATION_MODE_CAPABILITY');

  GUID get GUID_NWF_OPERATION_MODE_CAPABILITY =>
      _GUID_NWF_OPERATION_MODE_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_OPERATION_MODE =
      _lookup<GUID>('GUID_NWF_CURRENT_OPERATION_MODE');

  GUID get GUID_NWF_CURRENT_OPERATION_MODE =>
      _GUID_NWF_CURRENT_OPERATION_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_PACKET_FILTER =
      _lookup<GUID>('GUID_NWF_CURRENT_PACKET_FILTER');

  GUID get GUID_NWF_CURRENT_PACKET_FILTER =>
      _GUID_NWF_CURRENT_PACKET_FILTER.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ATIM_WINDOW =
      _lookup<GUID>('GUID_NWF_ATIM_WINDOW');

  GUID get GUID_NWF_ATIM_WINDOW => _GUID_NWF_ATIM_WINDOW.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SCAN_REQUEST =
      _lookup<GUID>('GUID_NWF_SCAN_REQUEST');

  GUID get GUID_NWF_SCAN_REQUEST => _GUID_NWF_SCAN_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_PHY_TYPE =
      _lookup<GUID>('GUID_NWF_CURRENT_PHY_TYPE');

  GUID get GUID_NWF_CURRENT_PHY_TYPE => _GUID_NWF_CURRENT_PHY_TYPE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_JOIN_REQUEST =
      _lookup<GUID>('GUID_NWF_JOIN_REQUEST');

  GUID get GUID_NWF_JOIN_REQUEST => _GUID_NWF_JOIN_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_START_REQUEST =
      _lookup<GUID>('GUID_NWF_START_REQUEST');

  GUID get GUID_NWF_START_REQUEST => _GUID_NWF_START_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_UPDATE_IE =
      _lookup<GUID>('GUID_NWF_UPDATE_IE');

  GUID get GUID_NWF_UPDATE_IE => _GUID_NWF_UPDATE_IE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RESET_REQUEST =
      _lookup<GUID>('GUID_NWF_RESET_REQUEST');

  GUID get GUID_NWF_RESET_REQUEST => _GUID_NWF_RESET_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_NIC_POWER_STATE =
      _lookup<GUID>('GUID_NWF_NIC_POWER_STATE');

  GUID get GUID_NWF_NIC_POWER_STATE => _GUID_NWF_NIC_POWER_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_OPTIONAL_CAPABILITY =
      _lookup<GUID>('GUID_NWF_OPTIONAL_CAPABILITY');

  GUID get GUID_NWF_OPTIONAL_CAPABILITY => _GUID_NWF_OPTIONAL_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_OPTIONAL_CAPABILITY =
      _lookup<GUID>('GUID_NWF_CURRENT_OPTIONAL_CAPABILITY');

  GUID get GUID_NWF_CURRENT_OPTIONAL_CAPABILITY =>
      _GUID_NWF_CURRENT_OPTIONAL_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_STATION_ID =
      _lookup<GUID>('GUID_NWF_STATION_ID');

  GUID get GUID_NWF_STATION_ID => _GUID_NWF_STATION_ID.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MEDIUM_OCCUPANCY_LIMIT =
      _lookup<GUID>('GUID_NWF_MEDIUM_OCCUPANCY_LIMIT');

  GUID get GUID_NWF_MEDIUM_OCCUPANCY_LIMIT =>
      _GUID_NWF_MEDIUM_OCCUPANCY_LIMIT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CF_POLLABLE =
      _lookup<GUID>('GUID_NWF_CF_POLLABLE');

  GUID get GUID_NWF_CF_POLLABLE => _GUID_NWF_CF_POLLABLE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CFP_PERIOD =
      _lookup<GUID>('GUID_NWF_CFP_PERIOD');

  GUID get GUID_NWF_CFP_PERIOD => _GUID_NWF_CFP_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CFP_MAX_DURATION =
      _lookup<GUID>('GUID_NWF_CFP_MAX_DURATION');

  GUID get GUID_NWF_CFP_MAX_DURATION => _GUID_NWF_CFP_MAX_DURATION.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_POWER_MGMT_MODE =
      _lookup<GUID>('GUID_NWF_POWER_MGMT_MODE');

  GUID get GUID_NWF_POWER_MGMT_MODE => _GUID_NWF_POWER_MGMT_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_OPERATIONAL_RATE_SET =
      _lookup<GUID>('GUID_NWF_OPERATIONAL_RATE_SET');

  GUID get GUID_NWF_OPERATIONAL_RATE_SET => _GUID_NWF_OPERATIONAL_RATE_SET.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_BEACON_PERIOD =
      _lookup<GUID>('GUID_NWF_BEACON_PERIOD');

  GUID get GUID_NWF_BEACON_PERIOD => _GUID_NWF_BEACON_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DTIM_PERIOD =
      _lookup<GUID>('GUID_NWF_DTIM_PERIOD');

  GUID get GUID_NWF_DTIM_PERIOD => _GUID_NWF_DTIM_PERIOD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WEP_ICV_ERROR_COUNT =
      _lookup<GUID>('GUID_NWF_WEP_ICV_ERROR_COUNT');

  GUID get GUID_NWF_WEP_ICV_ERROR_COUNT => _GUID_NWF_WEP_ICV_ERROR_COUNT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAC_ADDRESS =
      _lookup<GUID>('GUID_NWF_MAC_ADDRESS');

  GUID get GUID_NWF_MAC_ADDRESS => _GUID_NWF_MAC_ADDRESS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RTS_THRESHOLD =
      _lookup<GUID>('GUID_NWF_RTS_THRESHOLD');

  GUID get GUID_NWF_RTS_THRESHOLD => _GUID_NWF_RTS_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SHORT_RETRY_LIMIT =
      _lookup<GUID>('GUID_NWF_SHORT_RETRY_LIMIT');

  GUID get GUID_NWF_SHORT_RETRY_LIMIT => _GUID_NWF_SHORT_RETRY_LIMIT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_LONG_RETRY_LIMIT =
      _lookup<GUID>('GUID_NWF_LONG_RETRY_LIMIT');

  GUID get GUID_NWF_LONG_RETRY_LIMIT => _GUID_NWF_LONG_RETRY_LIMIT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_FRAGMENTATION_THRESHOLD =
      _lookup<GUID>('GUID_NWF_FRAGMENTATION_THRESHOLD');

  GUID get GUID_NWF_FRAGMENTATION_THRESHOLD =>
      _GUID_NWF_FRAGMENTATION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME =
      _lookup<GUID>('GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME');

  GUID get GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME =>
      _GUID_NWF_MAX_TRANSMIT_MSDU_LIFETIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAX_RECEIVE_LIFETIME =
      _lookup<GUID>('GUID_NWF_MAX_RECEIVE_LIFETIME');

  GUID get GUID_NWF_MAX_RECEIVE_LIFETIME => _GUID_NWF_MAX_RECEIVE_LIFETIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_COUNTERS_ENTRY =
      _lookup<GUID>('GUID_NWF_COUNTERS_ENTRY');

  GUID get GUID_NWF_COUNTERS_ENTRY => _GUID_NWF_COUNTERS_ENTRY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_PHY_TYPES =
      _lookup<GUID>('GUID_NWF_SUPPORTED_PHY_TYPES');

  GUID get GUID_NWF_SUPPORTED_PHY_TYPES => _GUID_NWF_SUPPORTED_PHY_TYPES.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_REG_DOMAIN =
      _lookup<GUID>('GUID_NWF_CURRENT_REG_DOMAIN');

  GUID get GUID_NWF_CURRENT_REG_DOMAIN => _GUID_NWF_CURRENT_REG_DOMAIN.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_TEMP_TYPE =
      _lookup<GUID>('GUID_NWF_TEMP_TYPE');

  GUID get GUID_NWF_TEMP_TYPE => _GUID_NWF_TEMP_TYPE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_TX_ANTENNA =
      _lookup<GUID>('GUID_NWF_CURRENT_TX_ANTENNA');

  GUID get GUID_NWF_CURRENT_TX_ANTENNA => _GUID_NWF_CURRENT_TX_ANTENNA.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DIVERSITY_SUPPORT =
      _lookup<GUID>('GUID_NWF_DIVERSITY_SUPPORT');

  GUID get GUID_NWF_DIVERSITY_SUPPORT => _GUID_NWF_DIVERSITY_SUPPORT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_RX_ANTENNA =
      _lookup<GUID>('GUID_NWF_CURRENT_RX_ANTENNA');

  GUID get GUID_NWF_CURRENT_RX_ANTENNA => _GUID_NWF_CURRENT_RX_ANTENNA.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_POWER_LEVELS =
      _lookup<GUID>('GUID_NWF_SUPPORTED_POWER_LEVELS');

  GUID get GUID_NWF_SUPPORTED_POWER_LEVELS =>
      _GUID_NWF_SUPPORTED_POWER_LEVELS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_TX_POWER_LEVEL =
      _lookup<GUID>('GUID_NWF_CURRENT_TX_POWER_LEVEL');

  GUID get GUID_NWF_CURRENT_TX_POWER_LEVEL =>
      _GUID_NWF_CURRENT_TX_POWER_LEVEL.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HOP_TIME =
      _lookup<GUID>('GUID_NWF_HOP_TIME');

  GUID get GUID_NWF_HOP_TIME => _GUID_NWF_HOP_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_CHANNEL_NUMBER =
      _lookup<GUID>('GUID_NWF_CURRENT_CHANNEL_NUMBER');

  GUID get GUID_NWF_CURRENT_CHANNEL_NUMBER =>
      _GUID_NWF_CURRENT_CHANNEL_NUMBER.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAX_DWELL_TIME =
      _lookup<GUID>('GUID_NWF_MAX_DWELL_TIME');

  GUID get GUID_NWF_MAX_DWELL_TIME => _GUID_NWF_MAX_DWELL_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_DWELL_TIME =
      _lookup<GUID>('GUID_NWF_CURRENT_DWELL_TIME');

  GUID get GUID_NWF_CURRENT_DWELL_TIME => _GUID_NWF_CURRENT_DWELL_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_SET =
      _lookup<GUID>('GUID_NWF_CURRENT_SET');

  GUID get GUID_NWF_CURRENT_SET => _GUID_NWF_CURRENT_SET.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_PATTERN =
      _lookup<GUID>('GUID_NWF_CURRENT_PATTERN');

  GUID get GUID_NWF_CURRENT_PATTERN => _GUID_NWF_CURRENT_PATTERN.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_INDEX =
      _lookup<GUID>('GUID_NWF_CURRENT_INDEX');

  GUID get GUID_NWF_CURRENT_INDEX => _GUID_NWF_CURRENT_INDEX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_CHANNEL =
      _lookup<GUID>('GUID_NWF_CURRENT_CHANNEL');

  GUID get GUID_NWF_CURRENT_CHANNEL => _GUID_NWF_CURRENT_CHANNEL.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CCA_MODE_SUPPORTED =
      _lookup<GUID>('GUID_NWF_CCA_MODE_SUPPORTED');

  GUID get GUID_NWF_CCA_MODE_SUPPORTED => _GUID_NWF_CCA_MODE_SUPPORTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_CCA_MODE =
      _lookup<GUID>('GUID_NWF_CURRENT_CCA_MODE');

  GUID get GUID_NWF_CURRENT_CCA_MODE => _GUID_NWF_CURRENT_CCA_MODE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ED_THRESHOLD =
      _lookup<GUID>('GUID_NWF_ED_THRESHOLD');

  GUID get GUID_NWF_ED_THRESHOLD => _GUID_NWF_ED_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CCA_WATCHDOG_TIMER_MAX =
      _lookup<GUID>('GUID_NWF_CCA_WATCHDOG_TIMER_MAX');

  GUID get GUID_NWF_CCA_WATCHDOG_TIMER_MAX =>
      _GUID_NWF_CCA_WATCHDOG_TIMER_MAX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CCA_WATCHDOG_COUNT_MAX =
      _lookup<GUID>('GUID_NWF_CCA_WATCHDOG_COUNT_MAX');

  GUID get GUID_NWF_CCA_WATCHDOG_COUNT_MAX =>
      _GUID_NWF_CCA_WATCHDOG_COUNT_MAX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CCA_WATCHDOG_TIMER_MIN =
      _lookup<GUID>('GUID_NWF_CCA_WATCHDOG_TIMER_MIN');

  GUID get GUID_NWF_CCA_WATCHDOG_TIMER_MIN =>
      _GUID_NWF_CCA_WATCHDOG_TIMER_MIN.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CCA_WATCHDOG_COUNT_MIN =
      _lookup<GUID>('GUID_NWF_CCA_WATCHDOG_COUNT_MIN');

  GUID get GUID_NWF_CCA_WATCHDOG_COUNT_MIN =>
      _GUID_NWF_CCA_WATCHDOG_COUNT_MIN.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_REG_DOMAINS_SUPPORT_VALUE =
      _lookup<GUID>('GUID_NWF_REG_DOMAINS_SUPPORT_VALUE');

  GUID get GUID_NWF_REG_DOMAINS_SUPPORT_VALUE =>
      _GUID_NWF_REG_DOMAINS_SUPPORT_VALUE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_TX_ANTENNA =
      _lookup<GUID>('GUID_NWF_SUPPORTED_TX_ANTENNA');

  GUID get GUID_NWF_SUPPORTED_TX_ANTENNA => _GUID_NWF_SUPPORTED_TX_ANTENNA.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_RX_ANTENNA =
      _lookup<GUID>('GUID_NWF_SUPPORTED_RX_ANTENNA');

  GUID get GUID_NWF_SUPPORTED_RX_ANTENNA => _GUID_NWF_SUPPORTED_RX_ANTENNA.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DIVERSITY_SELECTION_RX =
      _lookup<GUID>('GUID_NWF_DIVERSITY_SELECTION_RX');

  GUID get GUID_NWF_DIVERSITY_SELECTION_RX =>
      _GUID_NWF_DIVERSITY_SELECTION_RX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_DATA_RATES_VALUE =
      _lookup<GUID>('GUID_NWF_SUPPORTED_DATA_RATES_VALUE');

  GUID get GUID_NWF_SUPPORTED_DATA_RATES_VALUE =>
      _GUID_NWF_SUPPORTED_DATA_RATES_VALUE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_FREQUENCY =
      _lookup<GUID>('GUID_NWF_CURRENT_FREQUENCY');

  GUID get GUID_NWF_CURRENT_FREQUENCY => _GUID_NWF_CURRENT_FREQUENCY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_TI_THRESHOLD =
      _lookup<GUID>('GUID_NWF_TI_THRESHOLD');

  GUID get GUID_NWF_TI_THRESHOLD => _GUID_NWF_TI_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_FREQUENCY_BANDS_SUPPORTED =
      _lookup<GUID>('GUID_NWF_FREQUENCY_BANDS_SUPPORTED');

  GUID get GUID_NWF_FREQUENCY_BANDS_SUPPORTED =>
      _GUID_NWF_FREQUENCY_BANDS_SUPPORTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED');

  GUID get GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED =>
      _GUID_NWF_SHORT_PREAMBLE_OPTION_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PBCC_OPTION_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_PBCC_OPTION_IMPLEMENTED');

  GUID get GUID_NWF_PBCC_OPTION_IMPLEMENTED =>
      _GUID_NWF_PBCC_OPTION_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CHANNEL_AGILITY_PRESENT =
      _lookup<GUID>('GUID_NWF_CHANNEL_AGILITY_PRESENT');

  GUID get GUID_NWF_CHANNEL_AGILITY_PRESENT =>
      _GUID_NWF_CHANNEL_AGILITY_PRESENT.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CHANNEL_AGILITY_ENABLED =
      _lookup<GUID>('GUID_NWF_CHANNEL_AGILITY_ENABLED');

  GUID get GUID_NWF_CHANNEL_AGILITY_ENABLED =>
      _GUID_NWF_CHANNEL_AGILITY_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HR_CCA_MODE_SUPPORTED =
      _lookup<GUID>('GUID_NWF_HR_CCA_MODE_SUPPORTED');

  GUID get GUID_NWF_HR_CCA_MODE_SUPPORTED =>
      _GUID_NWF_HR_CCA_MODE_SUPPORTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED');

  GUID get GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED =>
      _GUID_NWF_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED =
      _lookup<GUID>('GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED');

  GUID get GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED =>
      _GUID_NWF_MULTI_DOMAIN_CAPABILITY_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_COUNTRY_STRING =
      _lookup<GUID>('GUID_NWF_COUNTRY_STRING');

  GUID get GUID_NWF_COUNTRY_STRING => _GUID_NWF_COUNTRY_STRING.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MULTI_DOMAIN_CAPABILITY =
      _lookup<GUID>('GUID_NWF_MULTI_DOMAIN_CAPABILITY');

  GUID get GUID_NWF_MULTI_DOMAIN_CAPABILITY =>
      _GUID_NWF_MULTI_DOMAIN_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EHCC_PRIME_RADIX =
      _lookup<GUID>('GUID_NWF_EHCC_PRIME_RADIX');

  GUID get GUID_NWF_EHCC_PRIME_RADIX => _GUID_NWF_EHCC_PRIME_RADIX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX =
      _lookup<GUID>('GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX');

  GUID get GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX =>
      _GUID_NWF_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED');

  GUID get GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED =>
      _GUID_NWF_EHCC_CAPABILITY_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EHCC_CAPABILITY_ENABLED =
      _lookup<GUID>('GUID_NWF_EHCC_CAPABILITY_ENABLED');

  GUID get GUID_NWF_EHCC_CAPABILITY_ENABLED =>
      _GUID_NWF_EHCC_CAPABILITY_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HOP_ALGORITHM_ADOPTED =
      _lookup<GUID>('GUID_NWF_HOP_ALGORITHM_ADOPTED');

  GUID get GUID_NWF_HOP_ALGORITHM_ADOPTED =>
      _GUID_NWF_HOP_ALGORITHM_ADOPTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RANDOM_TABLE_FLAG =
      _lookup<GUID>('GUID_NWF_RANDOM_TABLE_FLAG');

  GUID get GUID_NWF_RANDOM_TABLE_FLAG => _GUID_NWF_RANDOM_TABLE_FLAG.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_NUMBER_OF_HOPPING_SETS =
      _lookup<GUID>('GUID_NWF_NUMBER_OF_HOPPING_SETS');

  GUID get GUID_NWF_NUMBER_OF_HOPPING_SETS =>
      _GUID_NWF_NUMBER_OF_HOPPING_SETS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HOP_MODULUS =
      _lookup<GUID>('GUID_NWF_HOP_MODULUS');

  GUID get GUID_NWF_HOP_MODULUS => _GUID_NWF_HOP_MODULUS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HOP_OFFSET =
      _lookup<GUID>('GUID_NWF_HOP_OFFSET');

  GUID get GUID_NWF_HOP_OFFSET => _GUID_NWF_HOP_OFFSET.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HOPPING_PATTERN =
      _lookup<GUID>('GUID_NWF_HOPPING_PATTERN');

  GUID get GUID_NWF_HOPPING_PATTERN => _GUID_NWF_HOPPING_PATTERN.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RANDOM_TABLE_FIELD_NUMBER =
      _lookup<GUID>('GUID_NWF_RANDOM_TABLE_FIELD_NUMBER');

  GUID get GUID_NWF_RANDOM_TABLE_FIELD_NUMBER =>
      _GUID_NWF_RANDOM_TABLE_FIELD_NUMBER.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WPA_TSC =
      _lookup<GUID>('GUID_NWF_WPA_TSC');

  GUID get GUID_NWF_WPA_TSC => _GUID_NWF_WPA_TSC.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RSSI_RANGE =
      _lookup<GUID>('GUID_NWF_RSSI_RANGE');

  GUID get GUID_NWF_RSSI_RANGE => _GUID_NWF_RSSI_RANGE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RF_USAGE =
      _lookup<GUID>('GUID_NWF_RF_USAGE');

  GUID get GUID_NWF_RF_USAGE => _GUID_NWF_RF_USAGE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_NIC_SPECIFIC_EXTENSION =
      _lookup<GUID>('GUID_NWF_NIC_SPECIFIC_EXTENSION');

  GUID get GUID_NWF_NIC_SPECIFIC_EXTENSION =>
      _GUID_NWF_NIC_SPECIFIC_EXTENSION.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_AP_JOIN_REQUEST =
      _lookup<GUID>('GUID_NWF_AP_JOIN_REQUEST');

  GUID get GUID_NWF_AP_JOIN_REQUEST => _GUID_NWF_AP_JOIN_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED');

  GUID get GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED =>
      _GUID_NWF_ERP_PBCC_OPTION_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ERP_PBCC_OPTION_ENABLED =
      _lookup<GUID>('GUID_NWF_ERP_PBCC_OPTION_ENABLED');

  GUID get GUID_NWF_ERP_PBCC_OPTION_ENABLED =>
      _GUID_NWF_ERP_PBCC_OPTION_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED');

  GUID get GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED =>
      _GUID_NWF_DSSS_OFDM_OPTION_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DSSS_OFDM_OPTION_ENABLED =
      _lookup<GUID>('GUID_NWF_DSSS_OFDM_OPTION_ENABLED');

  GUID get GUID_NWF_DSSS_OFDM_OPTION_ENABLED =>
      _GUID_NWF_DSSS_OFDM_OPTION_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED');

  GUID get GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED =>
      _GUID_NWF_SHORT_SLOT_TIME_OPTION_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED =
      _lookup<GUID>('GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED');

  GUID get GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED =>
      _GUID_NWF_SHORT_SLOT_TIME_OPTION_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAX_MAC_ADDRESS_STATES =
      _lookup<GUID>('GUID_NWF_MAX_MAC_ADDRESS_STATES');

  GUID get GUID_NWF_MAX_MAC_ADDRESS_STATES =>
      _GUID_NWF_MAX_MAC_ADDRESS_STATES.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_RECV_SENSITIVITY_LIST =
      _lookup<GUID>('GUID_NWF_RECV_SENSITIVITY_LIST');

  GUID get GUID_NWF_RECV_SENSITIVITY_LIST =>
      _GUID_NWF_RECV_SENSITIVITY_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WME_IMPLEMENTED =
      _lookup<GUID>('GUID_NWF_WME_IMPLEMENTED');

  GUID get GUID_NWF_WME_IMPLEMENTED => _GUID_NWF_WME_IMPLEMENTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WME_ENABLED =
      _lookup<GUID>('GUID_NWF_WME_ENABLED');

  GUID get GUID_NWF_WME_ENABLED => _GUID_NWF_WME_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WME_AC_PARAMETERS =
      _lookup<GUID>('GUID_NWF_WME_AC_PARAMETERS');

  GUID get GUID_NWF_WME_AC_PARAMETERS => _GUID_NWF_WME_AC_PARAMETERS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_WME_UPDATE_IE =
      _lookup<GUID>('GUID_NWF_WME_UPDATE_IE');

  GUID get GUID_NWF_WME_UPDATE_IE => _GUID_NWF_WME_UPDATE_IE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_QOS_TX_QUEUES_SUPPORTED =
      _lookup<GUID>('GUID_NWF_QOS_TX_QUEUES_SUPPORTED');

  GUID get GUID_NWF_QOS_TX_QUEUES_SUPPORTED =>
      _GUID_NWF_QOS_TX_QUEUES_SUPPORTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_QOS_TX_DURATION =
      _lookup<GUID>('GUID_NWF_QOS_TX_DURATION');

  GUID get GUID_NWF_QOS_TX_DURATION => _GUID_NWF_QOS_TX_DURATION.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_QOS_TX_MEDIUM_TIME =
      _lookup<GUID>('GUID_NWF_QOS_TX_MEDIUM_TIME');

  GUID get GUID_NWF_QOS_TX_MEDIUM_TIME => _GUID_NWF_QOS_TX_MEDIUM_TIME.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST =
      _lookup<GUID>('GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST');

  GUID get GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST =>
      _GUID_NWF_SUPPORTED_OFDM_FREQUENCY_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST =
      _lookup<GUID>('GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST');

  GUID get GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST =>
      _GUID_NWF_SUPPORTED_DSSS_CHANNEL_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_AUTO_CONFIG_ENABLED =
      _lookup<GUID>('GUID_NWF_AUTO_CONFIG_ENABLED');

  GUID get GUID_NWF_AUTO_CONFIG_ENABLED => _GUID_NWF_AUTO_CONFIG_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ENUM_BSS_LIST =
      _lookup<GUID>('GUID_NWF_ENUM_BSS_LIST');

  GUID get GUID_NWF_ENUM_BSS_LIST => _GUID_NWF_ENUM_BSS_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_FLUSH_BSS_LIST =
      _lookup<GUID>('GUID_NWF_FLUSH_BSS_LIST');

  GUID get GUID_NWF_FLUSH_BSS_LIST => _GUID_NWF_FLUSH_BSS_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_POWER_MGMT_REQUEST =
      _lookup<GUID>('GUID_NWF_POWER_MGMT_REQUEST');

  GUID get GUID_NWF_POWER_MGMT_REQUEST => _GUID_NWF_POWER_MGMT_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DESIRED_SSID_LIST =
      _lookup<GUID>('GUID_NWF_DESIRED_SSID_LIST');

  GUID get GUID_NWF_DESIRED_SSID_LIST => _GUID_NWF_DESIRED_SSID_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST =
      _lookup<GUID>('GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST');

  GUID get GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST =>
      _GUID_NWF_EXCLUDED_MAC_ADDRESS_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DESIRED_BSSID_LIST =
      _lookup<GUID>('GUID_NWF_DESIRED_BSSID_LIST');

  GUID get GUID_NWF_DESIRED_BSSID_LIST => _GUID_NWF_DESIRED_BSSID_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DESIRED_BSS_TYPE =
      _lookup<GUID>('GUID_NWF_DESIRED_BSS_TYPE');

  GUID get GUID_NWF_DESIRED_BSS_TYPE => _GUID_NWF_DESIRED_BSS_TYPE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PMKID_LIST =
      _lookup<GUID>('GUID_NWF_PMKID_LIST');

  GUID get GUID_NWF_PMKID_LIST => _GUID_NWF_PMKID_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CONNECT_REQUEST =
      _lookup<GUID>('GUID_NWF_CONNECT_REQUEST');

  GUID get GUID_NWF_CONNECT_REQUEST => _GUID_NWF_CONNECT_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EXCLUDE_UNENCRYPTED =
      _lookup<GUID>('GUID_NWF_EXCLUDE_UNENCRYPTED');

  GUID get GUID_NWF_EXCLUDE_UNENCRYPTED => _GUID_NWF_EXCLUDE_UNENCRYPTED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_STATISTICS =
      _lookup<GUID>('GUID_NWF_STATISTICS');

  GUID get GUID_NWF_STATISTICS => _GUID_NWF_STATISTICS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PRIVACY_EXEMPTION_LIST =
      _lookup<GUID>('GUID_NWF_PRIVACY_EXEMPTION_LIST');

  GUID get GUID_NWF_PRIVACY_EXEMPTION_LIST =>
      _GUID_NWF_PRIVACY_EXEMPTION_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM =
      _lookup<GUID>('GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM');

  GUID get GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM =>
      _GUID_NWF_ENABLED_AUTHENTICATION_ALGORITHM.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR =
      _lookup<GUID>('GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR');

  GUID get GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR =>
      _GUID_NWF_SUPPORTED_UNICAST_ALGORITHM_PAIR.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM =
      _lookup<GUID>('GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM');

  GUID get GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM =>
      _GUID_NWF_ENABLED_UNICAST_CIPHER_ALGORITHM.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR =
      _lookup<GUID>('GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR');

  GUID get GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR =>
      _GUID_NWF_SUPPORTED_MULTICAST_ALGORITHM_PAIR.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM =
      _lookup<GUID>('GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM');

  GUID get GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM =>
      _GUID_NWF_ENABLED_MULTICAST_CIPHER_ALGORITHM.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CIPHER_DEFAULT_KEY_ID =
      _lookup<GUID>('GUID_NWF_CIPHER_DEFAULT_KEY_ID');

  GUID get GUID_NWF_CIPHER_DEFAULT_KEY_ID =>
      _GUID_NWF_CIPHER_DEFAULT_KEY_ID.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CIPHER_DEFAULT_KEY =
      _lookup<GUID>('GUID_NWF_CIPHER_DEFAULT_KEY');

  GUID get GUID_NWF_CIPHER_DEFAULT_KEY => _GUID_NWF_CIPHER_DEFAULT_KEY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CIPHER_KEY_MAPPING_KEY =
      _lookup<GUID>('GUID_NWF_CIPHER_KEY_MAPPING_KEY');

  GUID get GUID_NWF_CIPHER_KEY_MAPPING_KEY =>
      _GUID_NWF_CIPHER_KEY_MAPPING_KEY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ENUM_ASSOCIATION_INFO =
      _lookup<GUID>('GUID_NWF_ENUM_ASSOCIATION_INFO');

  GUID get GUID_NWF_ENUM_ASSOCIATION_INFO =>
      _GUID_NWF_ENUM_ASSOCIATION_INFO.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DISCONNECT_REQUEST =
      _lookup<GUID>('GUID_NWF_DISCONNECT_REQUEST');

  GUID get GUID_NWF_DISCONNECT_REQUEST => _GUID_NWF_DISCONNECT_REQUEST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_UNICAST_USE_GROUP_ENABLED =
      _lookup<GUID>('GUID_NWF_UNICAST_USE_GROUP_ENABLED');

  GUID get GUID_NWF_UNICAST_USE_GROUP_ENABLED =>
      _GUID_NWF_UNICAST_USE_GROUP_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PHY_STATE =
      _lookup<GUID>('GUID_NWF_PHY_STATE');

  GUID get GUID_NWF_PHY_STATE => _GUID_NWF_PHY_STATE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DESIRED_PHY_LIST =
      _lookup<GUID>('GUID_NWF_DESIRED_PHY_LIST');

  GUID get GUID_NWF_DESIRED_PHY_LIST => _GUID_NWF_DESIRED_PHY_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_PHY_ID =
      _lookup<GUID>('GUID_NWF_CURRENT_PHY_ID');

  GUID get GUID_NWF_CURRENT_PHY_ID => _GUID_NWF_CURRENT_PHY_ID.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MEDIA_STREAMING_ENABLED =
      _lookup<GUID>('GUID_NWF_MEDIA_STREAMING_ENABLED');

  GUID get GUID_NWF_MEDIA_STREAMING_ENABLED =>
      _GUID_NWF_MEDIA_STREAMING_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD =
      _lookup<GUID>('GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD');

  GUID get GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD =>
      _GUID_NWF_UNREACHABLE_DETECTION_THRESHOLD.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ACTIVE_PHY_LIST =
      _lookup<GUID>('GUID_NWF_ACTIVE_PHY_LIST');

  GUID get GUID_NWF_ACTIVE_PHY_LIST => _GUID_NWF_ACTIVE_PHY_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_EXTSTA_CAPABILITY =
      _lookup<GUID>('GUID_NWF_EXTSTA_CAPABILITY');

  GUID get GUID_NWF_EXTSTA_CAPABILITY => _GUID_NWF_EXTSTA_CAPABILITY.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DATA_RATE_MAPPING_TABLE =
      _lookup<GUID>('GUID_NWF_DATA_RATE_MAPPING_TABLE');

  GUID get GUID_NWF_DATA_RATE_MAPPING_TABLE =>
      _GUID_NWF_DATA_RATE_MAPPING_TABLE.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING =
      _lookup<GUID>('GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING');

  GUID get GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING =>
      _GUID_NWF_SUPPORTED_COUNTRY_OR_REGION_STRING.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING =
      _lookup<GUID>('GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING');

  GUID get GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING =>
      _GUID_NWF_DESIRED_COUNTRY_OR_REGION_STRING.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PORT_STATE_NOTIFICATION =
      _lookup<GUID>('GUID_NWF_PORT_STATE_NOTIFICATION');

  GUID get GUID_NWF_PORT_STATE_NOTIFICATION =>
      _GUID_NWF_PORT_STATE_NOTIFICATION.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_IBSS_PARAMS =
      _lookup<GUID>('GUID_NWF_IBSS_PARAMS');

  GUID get GUID_NWF_IBSS_PARAMS => _GUID_NWF_IBSS_PARAMS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_QOS_PARAMS =
      _lookup<GUID>('GUID_NWF_QOS_PARAMS');

  GUID get GUID_NWF_QOS_PARAMS => _GUID_NWF_QOS_PARAMS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_SAFE_MODE_ENABLED =
      _lookup<GUID>('GUID_NWF_SAFE_MODE_ENABLED');

  GUID get GUID_NWF_SAFE_MODE_ENABLED => _GUID_NWF_SAFE_MODE_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_HIDDEN_NETWORK_ENABLED =
      _lookup<GUID>('GUID_NWF_HIDDEN_NETWORK_ENABLED');

  GUID get GUID_NWF_HIDDEN_NETWORK_ENABLED =>
      _GUID_NWF_HIDDEN_NETWORK_ENABLED.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_ASSOCIATION_PARAMS =
      _lookup<GUID>('GUID_NWF_ASSOCIATION_PARAMS');

  GUID get GUID_NWF_ASSOCIATION_PARAMS => _GUID_NWF_ASSOCIATION_PARAMS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_CURRENT_ADDRESS =
      _lookup<GUID>('GUID_NWF_CURRENT_ADDRESS');

  GUID get GUID_NWF_CURRENT_ADDRESS => _GUID_NWF_CURRENT_ADDRESS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_PERMANENT_ADDRESS =
      _lookup<GUID>('GUID_NWF_PERMANENT_ADDRESS');

  GUID get GUID_NWF_PERMANENT_ADDRESS => _GUID_NWF_PERMANENT_ADDRESS.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MULTICAST_LIST =
      _lookup<GUID>('GUID_NWF_MULTICAST_LIST');

  GUID get GUID_NWF_MULTICAST_LIST => _GUID_NWF_MULTICAST_LIST.ref;

  late final ffi.Pointer<GUID> _GUID_NWF_MAXIMUM_LIST_SIZE =
      _lookup<GUID>('GUID_NWF_MAXIMUM_LIST_SIZE');

  GUID get GUID_NWF_MAXIMUM_LIST_SIZE => _GUID_NWF_MAXIMUM_LIST_SIZE.ref;

  ffi.Pointer<ffi.Char> UA_StatusCode_name(
    int code,
  ) {
    return _UA_StatusCode_name(
      code,
    );
  }

  late final _UA_StatusCode_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(UA_StatusCode)>>(
      'UA_StatusCode_name');
  late final _UA_StatusCode_name =
      _UA_StatusCode_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool UA_StatusCode_isBad(
    int code,
  ) {
    return _UA_StatusCode_isBad(
      code,
    );
  }

  late final _UA_StatusCode_isBadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isBad');
  late final _UA_StatusCode_isBad =
      _UA_StatusCode_isBadPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isUncertain(
    int code,
  ) {
    return _UA_StatusCode_isUncertain(
      code,
    );
  }

  late final _UA_StatusCode_isUncertainPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isUncertain');
  late final _UA_StatusCode_isUncertain =
      _UA_StatusCode_isUncertainPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isGood(
    int code,
  ) {
    return _UA_StatusCode_isGood(
      code,
    );
  }

  late final _UA_StatusCode_isGoodPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isGood');
  late final _UA_StatusCode_isGood =
      _UA_StatusCode_isGoodPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isEqualTop(
    int s1,
    int s2,
  ) {
    return _UA_StatusCode_isEqualTop(
      s1,
      s2,
    );
  }

  late final _UA_StatusCode_isEqualTopPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(UA_StatusCode, UA_StatusCode)>>(
      'UA_StatusCode_isEqualTop');
  late final _UA_StatusCode_isEqualTop =
      _UA_StatusCode_isEqualTopPtr.asFunction<bool Function(int, int)>();

  UA_String UA_String_fromChars(
    ffi.Pointer<ffi.Char> src,
  ) {
    return _UA_String_fromChars(
      src,
    );
  }

  late final _UA_String_fromCharsPtr =
      _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>(
          'UA_String_fromChars');
  late final _UA_String_fromChars = _UA_String_fromCharsPtr.asFunction<
      UA_String Function(ffi.Pointer<ffi.Char>)>();

  bool UA_String_equal(
    ffi.Pointer<UA_String> s1,
    ffi.Pointer<UA_String> s2,
  ) {
    return _UA_String_equal(
      s1,
      s2,
    );
  }

  late final _UA_String_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>)>>('UA_String_equal');
  late final _UA_String_equal = _UA_String_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  late final ffi.Pointer<UA_String> _UA_STRING_NULL =
      _lookup<UA_String>('UA_STRING_NULL');

  UA_String get UA_STRING_NULL => _UA_STRING_NULL.ref;

  /// ``UA_STRING`` returns a string pointing to the original char-array.
  /// ``UA_STRING_ALLOC`` is shorthand for ``UA_String_fromChars`` and makes a copy
  /// of the char-array.
  UA_String UA_STRING(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_STRING(
      chars,
    );
  }

  late final _UA_STRINGPtr =
      _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>(
          'UA_STRING');
  late final _UA_STRING =
      _UA_STRINGPtr.asFunction<UA_String Function(ffi.Pointer<ffi.Char>)>();

  int UA_DateTime_now() {
    return _UA_DateTime_now();
  }

  late final _UA_DateTime_nowPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function()>>('UA_DateTime_now');
  late final _UA_DateTime_now =
      _UA_DateTime_nowPtr.asFunction<int Function()>();

  int UA_DateTime_localTimeUtcOffset() {
    return _UA_DateTime_localTimeUtcOffset();
  }

  late final _UA_DateTime_localTimeUtcOffsetPtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function()>>(
          'UA_DateTime_localTimeUtcOffset');
  late final _UA_DateTime_localTimeUtcOffset =
      _UA_DateTime_localTimeUtcOffsetPtr.asFunction<int Function()>();

  int UA_DateTime_nowMonotonic() {
    return _UA_DateTime_nowMonotonic();
  }

  late final _UA_DateTime_nowMonotonicPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function()>>(
          'UA_DateTime_nowMonotonic');
  late final _UA_DateTime_nowMonotonic =
      _UA_DateTime_nowMonotonicPtr.asFunction<int Function()>();

  UA_DateTimeStruct UA_DateTime_toStruct(
    int t,
  ) {
    return _UA_DateTime_toStruct(
      t,
    );
  }

  late final _UA_DateTime_toStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTimeStruct Function(UA_DateTime)>>(
          'UA_DateTime_toStruct');
  late final _UA_DateTime_toStruct =
      _UA_DateTime_toStructPtr.asFunction<UA_DateTimeStruct Function(int)>();

  int UA_DateTime_fromStruct(
    UA_DateTimeStruct ts,
  ) {
    return _UA_DateTime_fromStruct(
      ts,
    );
  }

  late final _UA_DateTime_fromStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_DateTimeStruct)>>(
          'UA_DateTime_fromStruct');
  late final _UA_DateTime_fromStruct =
      _UA_DateTime_fromStructPtr.asFunction<int Function(UA_DateTimeStruct)>();

  int UA_DateTime_toUnixTime(
    int date,
  ) {
    return _UA_DateTime_toUnixTime(
      date,
    );
  }

  late final _UA_DateTime_toUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function(UA_DateTime)>>(
          'UA_DateTime_toUnixTime');
  late final _UA_DateTime_toUnixTime =
      _UA_DateTime_toUnixTimePtr.asFunction<int Function(int)>();

  int UA_DateTime_fromUnixTime(
    int unixDate,
  ) {
    return _UA_DateTime_fromUnixTime(
      unixDate,
    );
  }

  late final _UA_DateTime_fromUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_Int64)>>(
          'UA_DateTime_fromUnixTime');
  late final _UA_DateTime_fromUnixTime =
      _UA_DateTime_fromUnixTimePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<UA_Guid> _UA_GUID_NULL =
      _lookup<UA_Guid>('UA_GUID_NULL');

  UA_Guid get UA_GUID_NULL => _UA_GUID_NULL.ref;

  bool UA_Guid_equal(
    ffi.Pointer<UA_Guid> g1,
    ffi.Pointer<UA_Guid> g2,
  ) {
    return _UA_Guid_equal(
      g1,
      g2,
    );
  }

  late final _UA_Guid_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_equal');
  late final _UA_Guid_equal = _UA_Guid_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  int UA_Guid_parse(
    ffi.Pointer<UA_Guid> guid,
    UA_String str,
  ) {
    return _UA_Guid_parse(
      guid,
      str,
    );
  }

  late final _UA_Guid_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Guid>, UA_String)>>('UA_Guid_parse');
  late final _UA_Guid_parse = _UA_Guid_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>, UA_String)>();

  UA_Guid UA_GUID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_GUID(
      chars,
    );
  }

  late final _UA_GUIDPtr =
      _lookup<ffi.NativeFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>>(
          'UA_GUID');
  late final _UA_GUID =
      _UA_GUIDPtr.asFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<UA_ByteString> _UA_BYTESTRING_NULL =
      _lookup<UA_ByteString>('UA_BYTESTRING_NULL');

  UA_ByteString get UA_BYTESTRING_NULL => _UA_BYTESTRING_NULL.ref;

  int UA_ByteString_allocBuffer(
    ffi.Pointer<UA_ByteString> bs,
    int length,
  ) {
    return _UA_ByteString_allocBuffer(
      bs,
      length,
    );
  }

  late final _UA_ByteString_allocBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Size)>>('UA_ByteString_allocBuffer');
  late final _UA_ByteString_allocBuffer = _UA_ByteString_allocBufferPtr
      .asFunction<int Function(ffi.Pointer<UA_ByteString>, int)>();

  int UA_ByteString_toBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ByteString_toBase64(
      bs,
      output,
    );
  }

  late final _UA_ByteString_toBase64Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_String>)>>('UA_ByteString_toBase64');
  late final _UA_ByteString_toBase64 = _UA_ByteString_toBase64Ptr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_ByteString_fromBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> input,
  ) {
    return _UA_ByteString_fromBase64(
      bs,
      input,
    );
  }

  late final _UA_ByteString_fromBase64Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_String>)>>('UA_ByteString_fromBase64');
  late final _UA_ByteString_fromBase64 =
      _UA_ByteString_fromBase64Ptr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  UA_ByteString UA_BYTESTRING(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_BYTESTRING(
      chars,
    );
  }

  late final _UA_BYTESTRINGPtr = _lookup<
          ffi.NativeFunction<UA_ByteString Function(ffi.Pointer<ffi.Char>)>>(
      'UA_BYTESTRING');
  late final _UA_BYTESTRING = _UA_BYTESTRINGPtr.asFunction<
      UA_ByteString Function(ffi.Pointer<ffi.Char>)>();

  UA_ByteString UA_BYTESTRING_ALLOC(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_BYTESTRING_ALLOC(
      chars,
    );
  }

  late final _UA_BYTESTRING_ALLOCPtr = _lookup<
          ffi.NativeFunction<UA_ByteString Function(ffi.Pointer<ffi.Char>)>>(
      'UA_BYTESTRING_ALLOC');
  late final _UA_BYTESTRING_ALLOC = _UA_BYTESTRING_ALLOCPtr.asFunction<
      UA_ByteString Function(ffi.Pointer<ffi.Char>)>();

  bool UA_ByteString_equal(
    ffi.Pointer<UA_ByteString> string1,
    ffi.Pointer<UA_ByteString> string2,
  ) {
    return _UA_ByteString_equal(
      string1,
      string2,
    );
  }

  late final _UA_ByteString_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ByteString_equal');
  late final _UA_ByteString_equal = _UA_ByteString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ByteString_hash(
    int initialHashValue,
    ffi.Pointer<UA_Byte> data,
    int size,
  ) {
    return _UA_ByteString_hash(
      initialHashValue,
      data,
      size,
    );
  }

  late final _UA_ByteString_hashPtr = _lookup<
      ffi.NativeFunction<
          UA_UInt32 Function(UA_UInt32, ffi.Pointer<UA_Byte>,
              ffi.Size)>>('UA_ByteString_hash');
  late final _UA_ByteString_hash = _UA_ByteString_hashPtr.asFunction<
      int Function(int, ffi.Pointer<UA_Byte>, int)>();

  late final ffi.Pointer<UA_NodeId> _UA_NODEID_NULL =
      _lookup<UA_NodeId>('UA_NODEID_NULL');

  UA_NodeId get UA_NODEID_NULL => _UA_NODEID_NULL.ref;

  bool UA_NodeId_isNull(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_isNull(
      p,
    );
  }

  late final _UA_NodeId_isNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_isNull');
  late final _UA_NodeId_isNull =
      _UA_NodeId_isNullPtr.asFunction<bool Function(ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_print(
    ffi.Pointer<UA_NodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_NodeId_print(
      id,
      output,
    );
  }

  late final _UA_NodeId_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_String>)>>('UA_NodeId_print');
  late final _UA_NodeId_print = _UA_NodeId_printPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>)>();

  int UA_NodeId_parse(
    ffi.Pointer<UA_NodeId> id,
    UA_String str,
  ) {
    return _UA_NodeId_parse(
      id,
      str,
    );
  }

  late final _UA_NodeId_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NodeId>, UA_String)>>('UA_NodeId_parse');
  late final _UA_NodeId_parse = _UA_NodeId_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, UA_String)>();

  UA_NodeId UA_NODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID(
      chars,
    );
  }

  late final _UA_NODEIDPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>>(
          'UA_NODEID');
  late final _UA_NODEID =
      _UA_NODEIDPtr.asFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>();

  /// The following functions are shorthand for creating NodeIds.
  UA_NodeId UA_NODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_NODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_NODEID_NUMERICPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_UInt32)>>(
          'UA_NODEID_NUMERIC');
  late final _UA_NODEID_NUMERIC =
      _UA_NODEID_NUMERICPtr.asFunction<UA_NodeId Function(int, int)>();

  UA_NodeId UA_NODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING');
  late final _UA_NODEID_STRING = _UA_NODEID_STRINGPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING_ALLOC');
  late final _UA_NODEID_STRING_ALLOC = _UA_NODEID_STRING_ALLOCPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_NODEID_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_NODEID_GUIDPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_Guid)>>(
          'UA_NODEID_GUID');
  late final _UA_NODEID_GUID =
      _UA_NODEID_GUIDPtr.asFunction<UA_NodeId Function(int, UA_Guid)>();

  UA_NodeId UA_NODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING');
  late final _UA_NODEID_BYTESTRING = _UA_NODEID_BYTESTRINGPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING_ALLOC');
  late final _UA_NODEID_BYTESTRING_ALLOC = _UA_NODEID_BYTESTRING_ALLOCPtr
      .asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  int UA_NodeId_order(
    ffi.Pointer<UA_NodeId> n1,
    ffi.Pointer<UA_NodeId> n2,
  ) {
    return _UA_NodeId_order(
      n1,
      n2,
    );
  }

  late final _UA_NodeId_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_order');
  late final _UA_NodeId_order = _UA_NodeId_orderPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  bool UA_NodeId_equal(
    ffi.Pointer<UA_NodeId> n1,
    ffi.Pointer<UA_NodeId> n2,
  ) {
    return _UA_NodeId_equal(
      n1,
      n2,
    );
  }

  late final _UA_NodeId_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_equal');
  late final _UA_NodeId_equal = _UA_NodeId_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_hash(
    ffi.Pointer<UA_NodeId> n,
  ) {
    return _UA_NodeId_hash(
      n,
    );
  }

  late final _UA_NodeId_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_hash');
  late final _UA_NodeId_hash =
      _UA_NodeId_hashPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>)>();

  late final ffi.Pointer<UA_ExpandedNodeId> _UA_EXPANDEDNODEID_NULL =
      _lookup<UA_ExpandedNodeId>('UA_EXPANDEDNODEID_NULL');

  UA_ExpandedNodeId get UA_EXPANDEDNODEID_NULL => _UA_EXPANDEDNODEID_NULL.ref;

  int UA_ExpandedNodeId_print(
    ffi.Pointer<UA_ExpandedNodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ExpandedNodeId_print(
      id,
      output,
    );
  }

  late final _UA_ExpandedNodeId_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_String>)>>('UA_ExpandedNodeId_print');
  late final _UA_ExpandedNodeId_print = _UA_ExpandedNodeId_printPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>)>();

  int UA_ExpandedNodeId_parse(
    ffi.Pointer<UA_ExpandedNodeId> id,
    UA_String str,
  ) {
    return _UA_ExpandedNodeId_parse(
      id,
      str,
    );
  }

  late final _UA_ExpandedNodeId_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              UA_String)>>('UA_ExpandedNodeId_parse');
  late final _UA_ExpandedNodeId_parse = _UA_ExpandedNodeId_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, UA_String)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID(
      chars,
    );
  }

  late final _UA_EXPANDEDNODEIDPtr = _lookup<
          ffi
          .NativeFunction<UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>>(
      'UA_EXPANDEDNODEID');
  late final _UA_EXPANDEDNODEID = _UA_EXPANDEDNODEIDPtr.asFunction<
      UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>();

  /// The following functions are shorthand for creating ExpandedNodeIds.
  UA_ExpandedNodeId UA_EXPANDEDNODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_EXPANDEDNODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_EXPANDEDNODEID_NUMERICPtr = _lookup<
          ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_UInt32)>>(
      'UA_EXPANDEDNODEID_NUMERIC');
  late final _UA_EXPANDEDNODEID_NUMERIC = _UA_EXPANDEDNODEID_NUMERICPtr
      .asFunction<UA_ExpandedNodeId Function(int, int)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_STRING');
  late final _UA_EXPANDEDNODEID_STRING = _UA_EXPANDEDNODEID_STRINGPtr
      .asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_STRING_ALLOC');
  late final _UA_EXPANDEDNODEID_STRING_ALLOC =
      _UA_EXPANDEDNODEID_STRING_ALLOCPtr.asFunction<
          UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_EXPANDEDNODEID_STRING_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_GUIDPtr = _lookup<
          ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_Guid)>>(
      'UA_EXPANDEDNODEID_STRING_GUID');
  late final _UA_EXPANDEDNODEID_STRING_GUID = _UA_EXPANDEDNODEID_STRING_GUIDPtr
      .asFunction<UA_ExpandedNodeId Function(int, UA_Guid)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_BYTESTRING');
  late final _UA_EXPANDEDNODEID_BYTESTRING = _UA_EXPANDEDNODEID_BYTESTRINGPtr
      .asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_BYTESTRING_ALLOC');
  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOC =
      _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr.asFunction<
          UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_NODEID(
    UA_NodeId nodeId,
  ) {
    return _UA_EXPANDEDNODEID_NODEID(
      nodeId,
    );
  }

  late final _UA_EXPANDEDNODEID_NODEIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodeId)>>(
          'UA_EXPANDEDNODEID_NODEID');
  late final _UA_EXPANDEDNODEID_NODEID = _UA_EXPANDEDNODEID_NODEIDPtr
      .asFunction<UA_ExpandedNodeId Function(UA_NodeId)>();

  bool UA_ExpandedNodeId_isLocal(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_isLocal(
      n,
    );
  }

  late final _UA_ExpandedNodeId_isLocalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_isLocal');
  late final _UA_ExpandedNodeId_isLocal = _UA_ExpandedNodeId_isLocalPtr
      .asFunction<bool Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_order(
    ffi.Pointer<UA_ExpandedNodeId> n1,
    ffi.Pointer<UA_ExpandedNodeId> n2,
  ) {
    return _UA_ExpandedNodeId_order(
      n1,
      n2,
    );
  }

  late final _UA_ExpandedNodeId_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_order');
  late final _UA_ExpandedNodeId_order = _UA_ExpandedNodeId_orderPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_ExpandedNodeId_equal(
    ffi.Pointer<UA_ExpandedNodeId> n1,
    ffi.Pointer<UA_ExpandedNodeId> n2,
  ) {
    return _UA_ExpandedNodeId_equal(
      n1,
      n2,
    );
  }

  late final _UA_ExpandedNodeId_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_equal');
  late final _UA_ExpandedNodeId_equal = _UA_ExpandedNodeId_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_hash(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_hash(
      n,
    );
  }

  late final _UA_ExpandedNodeId_hashPtr = _lookup<
          ffi
          .NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_hash');
  late final _UA_ExpandedNodeId_hash = _UA_ExpandedNodeId_hashPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_QualifiedName_isNull(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_isNull(
      q,
    );
  }

  late final _UA_QualifiedName_isNullPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_isNull');
  late final _UA_QualifiedName_isNull = _UA_QualifiedName_isNullPtr.asFunction<
      bool Function(ffi.Pointer<UA_QualifiedName>)>();

  int UA_QualifiedName_hash(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_hash(
      q,
    );
  }

  late final _UA_QualifiedName_hashPtr = _lookup<
          ffi
          .NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_hash');
  late final _UA_QualifiedName_hash = _UA_QualifiedName_hashPtr.asFunction<
      int Function(ffi.Pointer<UA_QualifiedName>)>();

  UA_QualifiedName UA_QUALIFIEDNAME(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAMEPtr = _lookup<
      ffi.NativeFunction<
          UA_QualifiedName Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_QUALIFIEDNAME');
  late final _UA_QUALIFIEDNAME = _UA_QUALIFIEDNAMEPtr.asFunction<
      UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  UA_QualifiedName UA_QUALIFIEDNAME_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAME_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_QualifiedName Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_QUALIFIEDNAME_ALLOC');
  late final _UA_QUALIFIEDNAME_ALLOC = _UA_QUALIFIEDNAME_ALLOCPtr.asFunction<
      UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  bool UA_QualifiedName_equal(
    ffi.Pointer<UA_QualifiedName> qn1,
    ffi.Pointer<UA_QualifiedName> qn2,
  ) {
    return _UA_QualifiedName_equal(
      qn1,
      qn2,
    );
  }

  late final _UA_QualifiedName_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_equal');
  late final _UA_QualifiedName_equal = _UA_QualifiedName_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXTPtr = _lookup<
      ffi.NativeFunction<
          UA_LocalizedText Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_LOCALIZEDTEXT');
  late final _UA_LOCALIZEDTEXT = _UA_LOCALIZEDTEXTPtr.asFunction<
      UA_LocalizedText Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT_ALLOC(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT_ALLOC(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXT_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_LocalizedText Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_LOCALIZEDTEXT_ALLOC');
  late final _UA_LOCALIZEDTEXT_ALLOC = _UA_LOCALIZEDTEXT_ALLOCPtr.asFunction<
      UA_LocalizedText Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_NumericRange_parse(
    ffi.Pointer<UA_NumericRange> range,
    UA_String str,
  ) {
    return _UA_NumericRange_parse(
      range,
      str,
    );
  }

  late final _UA_NumericRange_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NumericRange>,
              UA_String)>>('UA_NumericRange_parse');
  late final _UA_NumericRange_parse = _UA_NumericRange_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_NumericRange>, UA_String)>();

  UA_NumericRange UA_NUMERICRANGE(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _UA_NUMERICRANGE(
      s,
    );
  }

  late final _UA_NUMERICRANGEPtr = _lookup<
          ffi.NativeFunction<UA_NumericRange Function(ffi.Pointer<ffi.Char>)>>(
      'UA_NUMERICRANGE');
  late final _UA_NUMERICRANGE = _UA_NUMERICRANGEPtr.asFunction<
      UA_NumericRange Function(ffi.Pointer<ffi.Char>)>();

  bool UA_Variant_isEmpty(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isEmpty(
      v,
    );
  }

  late final _UA_Variant_isEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_isEmpty');
  late final _UA_Variant_isEmpty = _UA_Variant_isEmptyPtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_isScalar(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isScalar(
      v,
    );
  }

  late final _UA_Variant_isScalarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_isScalar');
  late final _UA_Variant_isScalar = _UA_Variant_isScalarPtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_hasScalarType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasScalarType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasScalarTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_hasScalarType');
  late final _UA_Variant_hasScalarType =
      _UA_Variant_hasScalarTypePtr.asFunction<
          bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  bool UA_Variant_hasArrayType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasArrayType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasArrayTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_hasArrayType');
  late final _UA_Variant_hasArrayType = _UA_Variant_hasArrayTypePtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setScalar(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalar(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setScalar');
  late final _UA_Variant_setScalar = _UA_Variant_setScalarPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setScalarCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalarCopy(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setScalarCopy');
  late final _UA_Variant_setScalarCopy =
      _UA_Variant_setScalarCopyPtr.asFunction<
          int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setArray(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArray(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Variant_setArray');
  late final _UA_Variant_setArray = _UA_Variant_setArrayPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setArrayCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArrayCopy(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Variant_setArrayCopy');
  late final _UA_Variant_setArrayCopy = _UA_Variant_setArrayCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_copyRange(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
    UA_NumericRange range,
  ) {
    return _UA_Variant_copyRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_Variant_copyRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_Variant>,
              UA_NumericRange)>>('UA_Variant_copyRange');
  late final _UA_Variant_copyRange = _UA_Variant_copyRangePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>, UA_NumericRange)>();

  int UA_Variant_setRange(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRange(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, UA_NumericRange)>>('UA_Variant_setRange');
  late final _UA_Variant_setRange = _UA_Variant_setRangePtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          UA_NumericRange)>();

  int UA_Variant_setRangeCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRangeCopy(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangeCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, UA_NumericRange)>>('UA_Variant_setRangeCopy');
  late final _UA_Variant_setRangeCopy = _UA_Variant_setRangeCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          UA_NumericRange)>();

  void UA_ExtensionObject_setValue(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValue(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValue');
  late final _UA_ExtensionObject_setValue =
      _UA_ExtensionObject_setValuePtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  void UA_ExtensionObject_setValueNoDelete(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueNoDelete(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueNoDeletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ExtensionObject>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_ExtensionObject_setValueNoDelete');
  late final _UA_ExtensionObject_setValueNoDelete =
      _UA_ExtensionObject_setValueNoDeletePtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  int UA_ExtensionObject_setValueCopy(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueCopy(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValueCopy');
  late final _UA_ExtensionObject_setValueCopy =
      _UA_ExtensionObject_setValueCopyPtr.asFunction<
          int Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  int UA_DataValue_copyVariantRange(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
    UA_NumericRange range,
  ) {
    return _UA_DataValue_copyVariantRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_DataValue_copyVariantRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataValue>,
              ffi.Pointer<UA_DataValue>,
              UA_NumericRange)>>('UA_DataValue_copyVariantRange');
  late final _UA_DataValue_copyVariantRange =
      _UA_DataValue_copyVariantRangePtr.asFunction<
          int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>,
              UA_NumericRange)>();

  bool UA_DataType_getStructMember(
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Char> memberName,
    ffi.Pointer<ffi.Size> outOffset,
    ffi.Pointer<ffi.Pointer<UA_DataType>> outMemberType,
    ffi.Pointer<ffi.Bool> outIsArray,
  ) {
    return _UA_DataType_getStructMember(
      type,
      memberName,
      outOffset,
      outMemberType,
      outIsArray,
    );
  }

  late final _UA_DataType_getStructMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_DataType>>,
              ffi.Pointer<ffi.Bool>)>>('UA_DataType_getStructMember');
  late final _UA_DataType_getStructMember =
      _UA_DataType_getStructMemberPtr.asFunction<
          bool Function(
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_DataType>>,
              ffi.Pointer<ffi.Bool>)>();

  bool UA_DataType_isNumeric(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_DataType_isNumeric(
      type,
    );
  }

  late final _UA_DataType_isNumericPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataType>)>>(
          'UA_DataType_isNumeric');
  late final _UA_DataType_isNumeric = _UA_DataType_isNumericPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataType>)>();

  int UA_DataType_getPrecedence(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_DataType_getPrecedence(
      type,
    );
  }

  late final _UA_DataType_getPrecedencePtr =
      _lookup<ffi.NativeFunction<UA_Int16 Function(ffi.Pointer<UA_DataType>)>>(
          'UA_DataType_getPrecedence');
  late final _UA_DataType_getPrecedence = _UA_DataType_getPrecedencePtr
      .asFunction<int Function(ffi.Pointer<UA_DataType>)>();

  /// Builtin data types can be accessed as UA_TYPES[UA_TYPES_XXX], where XXX is
  /// the name of the data type. If only the NodeId of a type is known, use the
  /// following method to retrieve the data type description.
  ffi.Pointer<UA_DataType> UA_findDataType(
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_findDataType(
      typeId,
    );
  }

  late final _UA_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(
              ffi.Pointer<UA_NodeId>)>>('UA_findDataType');
  late final _UA_findDataType = _UA_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<ffi.Void> UA_new(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_new(
      type,
    );
  }

  late final _UA_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>>('UA_new');
  late final _UA_new = _UA_newPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>();

  void UA_init(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_init(
      p,
      type,
    );
  }

  late final _UA_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_init');
  late final _UA_init = _UA_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_copy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_copy(
      src,
      dst,
      type,
    );
  }

  late final _UA_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_copy');
  late final _UA_copy = _UA_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  void UA_clear(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_clear(
      p,
      type,
    );
  }

  late final _UA_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_clear');
  late final _UA_clear = _UA_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_delete(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_delete(
      p,
      type,
    );
  }

  late final _UA_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_delete');
  late final _UA_delete = _UA_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_print(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_print(
      p,
      type,
      output,
    );
  }

  late final _UA_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>, ffi.Pointer<UA_String>)>>('UA_print');
  late final _UA_print = _UA_printPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_String>)>();

  int UA_order(
    ffi.Pointer<ffi.Void> p1,
    ffi.Pointer<ffi.Void> p2,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_order(
      p1,
      p2,
      type,
    );
  }

  late final _UA_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_order');
  late final _UA_order = _UA_orderPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  /// Encoding/Decoding
  /// ^^^^^^^^^^^^^^^^^^
  /// Encoding and decoding routines for the available formats. For all formats
  /// the _calcSize, _encode and _decode methods are provided.
  int UA_calcSizeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_calcSizeBinary(
      p,
      type,
    );
  }

  late final _UA_calcSizeBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_calcSizeBinary');
  late final _UA_calcSizeBinary = _UA_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_encodeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_ByteString> outBuf,
  ) {
    return _UA_encodeBinary(
      p,
      type,
      outBuf,
    );
  }

  late final _UA_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_ByteString>)>>('UA_encodeBinary');
  late final _UA_encodeBinary = _UA_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_ByteString>)>();

  int UA_decodeBinary(
    ffi.Pointer<UA_ByteString> inBuf,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_DecodeBinaryOptions> options,
  ) {
    return _UA_decodeBinary(
      inBuf,
      p,
      type,
      options,
    );
  }

  late final _UA_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_DecodeBinaryOptions>)>>('UA_decodeBinary');
  late final _UA_decodeBinary = _UA_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>, ffi.Pointer<UA_DecodeBinaryOptions>)>();

  ffi.Pointer<ffi.Void> UA_Array_new(
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_new(
      size,
      type,
    );
  }

  late final _UA_Array_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Array_new');
  late final _UA_Array_new = _UA_Array_newPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_copy(
    ffi.Pointer<ffi.Void> src,
    int size,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_copy(
      src,
      size,
      dst,
      type,
    );
  }

  late final _UA_Array_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_copy');
  late final _UA_Array_copy = _UA_Array_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<UA_DataType>)>();

  int UA_Array_resize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    int newSize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_resize(
      p,
      size,
      newSize,
      type,
    );
  }

  late final _UA_Array_resizePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Array_resize');
  late final _UA_Array_resize = _UA_Array_resizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_append(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_append(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_append');
  late final _UA_Array_append = _UA_Array_appendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Array_appendCopy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_appendCopy(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_appendCopy');
  late final _UA_Array_appendCopy = _UA_Array_appendCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_Array_delete(
    ffi.Pointer<ffi.Void> p,
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_delete(
      p,
      size,
      type,
    );
  }

  late final _UA_Array_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Array_delete');
  late final _UA_Array_delete = _UA_Array_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_DataType>)>();

  /// Random Number Generator
  /// -----------------------
  /// If UA_MULTITHREADING is defined, then the seed is stored in thread
  /// local storage. The seed is initialized for every thread in the
  /// server/client.
  void UA_random_seed(
    int seed,
  ) {
    return _UA_random_seed(
      seed,
    );
  }

  late final _UA_random_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UA_UInt64)>>(
          'UA_random_seed');
  late final _UA_random_seed =
      _UA_random_seedPtr.asFunction<void Function(int)>();

  int UA_UInt32_random() {
    return _UA_UInt32_random();
  }

  late final _UA_UInt32_randomPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function()>>('UA_UInt32_random');
  late final _UA_UInt32_random =
      _UA_UInt32_randomPtr.asFunction<int Function()>();

  UA_Guid UA_Guid_random() {
    return _UA_Guid_random();
  }

  late final _UA_Guid_randomPtr =
      _lookup<ffi.NativeFunction<UA_Guid Function()>>('UA_Guid_random');
  late final _UA_Guid_random =
      _UA_Guid_randomPtr.asFunction<UA_Guid Function()>();

  late final ffi.Pointer<ffi.Pointer<UA_DataType>> _UA_TYPES =
      _lookup<ffi.Pointer<UA_DataType>>('UA_TYPES');

  ffi.Pointer<UA_DataType> get UA_TYPES => _UA_TYPES.value;

  set UA_TYPES(ffi.Pointer<UA_DataType> value) => _UA_TYPES.value = value;

  void UA_Boolean_init(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_init(
      p,
    );
  }

  late final _UA_Boolean_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_init');
  late final _UA_Boolean_init =
      _UA_Boolean_initPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<ffi.Bool> UA_Boolean_new() {
    return _UA_Boolean_new();
  }

  late final _UA_Boolean_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function()>>(
          'UA_Boolean_new');
  late final _UA_Boolean_new =
      _UA_Boolean_newPtr.asFunction<ffi.Pointer<ffi.Bool> Function()>();

  int UA_Boolean_copy(
    ffi.Pointer<ffi.Bool> src,
    ffi.Pointer<ffi.Bool> dst,
  ) {
    return _UA_Boolean_copy(
      src,
      dst,
    );
  }

  late final _UA_Boolean_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('UA_Boolean_copy');
  late final _UA_Boolean_copy = _UA_Boolean_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_deleteMembers(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_deleteMembers(
      p,
    );
  }

  late final _UA_Boolean_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_deleteMembers');
  late final _UA_Boolean_deleteMembers = _UA_Boolean_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_clear(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_clear(
      p,
    );
  }

  late final _UA_Boolean_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_clear');
  late final _UA_Boolean_clear =
      _UA_Boolean_clearPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_delete(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_delete(
      p,
    );
  }

  late final _UA_Boolean_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_delete');
  late final _UA_Boolean_delete =
      _UA_Boolean_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_SByte_init(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_init(
      p,
    );
  }

  late final _UA_SByte_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_init');
  late final _UA_SByte_init =
      _UA_SByte_initPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  ffi.Pointer<UA_SByte> UA_SByte_new() {
    return _UA_SByte_new();
  }

  late final _UA_SByte_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SByte> Function()>>(
          'UA_SByte_new');
  late final _UA_SByte_new =
      _UA_SByte_newPtr.asFunction<ffi.Pointer<UA_SByte> Function()>();

  int UA_SByte_copy(
    ffi.Pointer<UA_SByte> src,
    ffi.Pointer<UA_SByte> dst,
  ) {
    return _UA_SByte_copy(
      src,
      dst,
    );
  }

  late final _UA_SByte_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>>('UA_SByte_copy');
  late final _UA_SByte_copy = _UA_SByte_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>();

  void UA_SByte_deleteMembers(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_deleteMembers(
      p,
    );
  }

  late final _UA_SByte_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_deleteMembers');
  late final _UA_SByte_deleteMembers = _UA_SByte_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_SByte>)>();

  void UA_SByte_clear(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_clear(
      p,
    );
  }

  late final _UA_SByte_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_clear');
  late final _UA_SByte_clear =
      _UA_SByte_clearPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  void UA_SByte_delete(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_delete(
      p,
    );
  }

  late final _UA_SByte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_delete');
  late final _UA_SByte_delete =
      _UA_SByte_deletePtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  void UA_Byte_init(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_init(
      p,
    );
  }

  late final _UA_Byte_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_init');
  late final _UA_Byte_init =
      _UA_Byte_initPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  ffi.Pointer<UA_Byte> UA_Byte_new() {
    return _UA_Byte_new();
  }

  late final _UA_Byte_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Byte> Function()>>(
          'UA_Byte_new');
  late final _UA_Byte_new =
      _UA_Byte_newPtr.asFunction<ffi.Pointer<UA_Byte> Function()>();

  int UA_Byte_copy(
    ffi.Pointer<UA_Byte> src,
    ffi.Pointer<UA_Byte> dst,
  ) {
    return _UA_Byte_copy(
      src,
      dst,
    );
  }

  late final _UA_Byte_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>>('UA_Byte_copy');
  late final _UA_Byte_copy = _UA_Byte_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>();

  void UA_Byte_deleteMembers(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_deleteMembers(
      p,
    );
  }

  late final _UA_Byte_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_deleteMembers');
  late final _UA_Byte_deleteMembers = _UA_Byte_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Byte_clear(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_clear(
      p,
    );
  }

  late final _UA_Byte_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_clear');
  late final _UA_Byte_clear =
      _UA_Byte_clearPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Byte_delete(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_delete(
      p,
    );
  }

  late final _UA_Byte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_delete');
  late final _UA_Byte_delete =
      _UA_Byte_deletePtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Int16_init(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_init(
      p,
    );
  }

  late final _UA_Int16_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_init');
  late final _UA_Int16_init =
      _UA_Int16_initPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  ffi.Pointer<UA_Int16> UA_Int16_new() {
    return _UA_Int16_new();
  }

  late final _UA_Int16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int16> Function()>>(
          'UA_Int16_new');
  late final _UA_Int16_new =
      _UA_Int16_newPtr.asFunction<ffi.Pointer<UA_Int16> Function()>();

  int UA_Int16_copy(
    ffi.Pointer<UA_Int16> src,
    ffi.Pointer<UA_Int16> dst,
  ) {
    return _UA_Int16_copy(
      src,
      dst,
    );
  }

  late final _UA_Int16_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>>('UA_Int16_copy');
  late final _UA_Int16_copy = _UA_Int16_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>();

  void UA_Int16_deleteMembers(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_deleteMembers(
      p,
    );
  }

  late final _UA_Int16_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_deleteMembers');
  late final _UA_Int16_deleteMembers = _UA_Int16_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int16>)>();

  void UA_Int16_clear(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_clear(
      p,
    );
  }

  late final _UA_Int16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_clear');
  late final _UA_Int16_clear =
      _UA_Int16_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  void UA_Int16_delete(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_delete(
      p,
    );
  }

  late final _UA_Int16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_delete');
  late final _UA_Int16_delete =
      _UA_Int16_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  void UA_UInt16_init(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_init(
      p,
    );
  }

  late final _UA_UInt16_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_init');
  late final _UA_UInt16_init =
      _UA_UInt16_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  ffi.Pointer<UA_UInt16> UA_UInt16_new() {
    return _UA_UInt16_new();
  }

  late final _UA_UInt16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt16> Function()>>(
          'UA_UInt16_new');
  late final _UA_UInt16_new =
      _UA_UInt16_newPtr.asFunction<ffi.Pointer<UA_UInt16> Function()>();

  int UA_UInt16_copy(
    ffi.Pointer<UA_UInt16> src,
    ffi.Pointer<UA_UInt16> dst,
  ) {
    return _UA_UInt16_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt16_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_UInt16>)>>('UA_UInt16_copy');
  late final _UA_UInt16_copy = _UA_UInt16_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_deleteMembers(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_deleteMembers(
      p,
    );
  }

  late final _UA_UInt16_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_deleteMembers');
  late final _UA_UInt16_deleteMembers = _UA_UInt16_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_clear(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_clear(
      p,
    );
  }

  late final _UA_UInt16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_clear');
  late final _UA_UInt16_clear =
      _UA_UInt16_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_delete(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_delete(
      p,
    );
  }

  late final _UA_UInt16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_delete');
  late final _UA_UInt16_delete =
      _UA_UInt16_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_Int32_init(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_init(
      p,
    );
  }

  late final _UA_Int32_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_init');
  late final _UA_Int32_init =
      _UA_Int32_initPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  ffi.Pointer<UA_Int32> UA_Int32_new() {
    return _UA_Int32_new();
  }

  late final _UA_Int32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int32> Function()>>(
          'UA_Int32_new');
  late final _UA_Int32_new =
      _UA_Int32_newPtr.asFunction<ffi.Pointer<UA_Int32> Function()>();

  int UA_Int32_copy(
    ffi.Pointer<UA_Int32> src,
    ffi.Pointer<UA_Int32> dst,
  ) {
    return _UA_Int32_copy(
      src,
      dst,
    );
  }

  late final _UA_Int32_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>>('UA_Int32_copy');
  late final _UA_Int32_copy = _UA_Int32_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>();

  void UA_Int32_deleteMembers(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_deleteMembers(
      p,
    );
  }

  late final _UA_Int32_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_deleteMembers');
  late final _UA_Int32_deleteMembers = _UA_Int32_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int32>)>();

  void UA_Int32_clear(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_clear(
      p,
    );
  }

  late final _UA_Int32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_clear');
  late final _UA_Int32_clear =
      _UA_Int32_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  void UA_Int32_delete(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_delete(
      p,
    );
  }

  late final _UA_Int32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_delete');
  late final _UA_Int32_delete =
      _UA_Int32_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  void UA_UInt32_init(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_init(
      p,
    );
  }

  late final _UA_UInt32_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_init');
  late final _UA_UInt32_init =
      _UA_UInt32_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  ffi.Pointer<UA_UInt32> UA_UInt32_new() {
    return _UA_UInt32_new();
  }

  late final _UA_UInt32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt32> Function()>>(
          'UA_UInt32_new');
  late final _UA_UInt32_new =
      _UA_UInt32_newPtr.asFunction<ffi.Pointer<UA_UInt32> Function()>();

  int UA_UInt32_copy(
    ffi.Pointer<UA_UInt32> src,
    ffi.Pointer<UA_UInt32> dst,
  ) {
    return _UA_UInt32_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt32_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt32>,
              ffi.Pointer<UA_UInt32>)>>('UA_UInt32_copy');
  late final _UA_UInt32_copy = _UA_UInt32_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_deleteMembers(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_deleteMembers(
      p,
    );
  }

  late final _UA_UInt32_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_deleteMembers');
  late final _UA_UInt32_deleteMembers = _UA_UInt32_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_clear(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_clear(
      p,
    );
  }

  late final _UA_UInt32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_clear');
  late final _UA_UInt32_clear =
      _UA_UInt32_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_delete(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_delete(
      p,
    );
  }

  late final _UA_UInt32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_delete');
  late final _UA_UInt32_delete =
      _UA_UInt32_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_Int64_init(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_init(
      p,
    );
  }

  late final _UA_Int64_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_init');
  late final _UA_Int64_init =
      _UA_Int64_initPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  ffi.Pointer<UA_Int64> UA_Int64_new() {
    return _UA_Int64_new();
  }

  late final _UA_Int64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int64> Function()>>(
          'UA_Int64_new');
  late final _UA_Int64_new =
      _UA_Int64_newPtr.asFunction<ffi.Pointer<UA_Int64> Function()>();

  int UA_Int64_copy(
    ffi.Pointer<UA_Int64> src,
    ffi.Pointer<UA_Int64> dst,
  ) {
    return _UA_Int64_copy(
      src,
      dst,
    );
  }

  late final _UA_Int64_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>>('UA_Int64_copy');
  late final _UA_Int64_copy = _UA_Int64_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>();

  void UA_Int64_deleteMembers(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_deleteMembers(
      p,
    );
  }

  late final _UA_Int64_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_deleteMembers');
  late final _UA_Int64_deleteMembers = _UA_Int64_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int64>)>();

  void UA_Int64_clear(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_clear(
      p,
    );
  }

  late final _UA_Int64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_clear');
  late final _UA_Int64_clear =
      _UA_Int64_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  void UA_Int64_delete(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_delete(
      p,
    );
  }

  late final _UA_Int64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_delete');
  late final _UA_Int64_delete =
      _UA_Int64_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  void UA_UInt64_init(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_init(
      p,
    );
  }

  late final _UA_UInt64_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_init');
  late final _UA_UInt64_init =
      _UA_UInt64_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  ffi.Pointer<UA_UInt64> UA_UInt64_new() {
    return _UA_UInt64_new();
  }

  late final _UA_UInt64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt64> Function()>>(
          'UA_UInt64_new');
  late final _UA_UInt64_new =
      _UA_UInt64_newPtr.asFunction<ffi.Pointer<UA_UInt64> Function()>();

  int UA_UInt64_copy(
    ffi.Pointer<UA_UInt64> src,
    ffi.Pointer<UA_UInt64> dst,
  ) {
    return _UA_UInt64_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt64_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt64>,
              ffi.Pointer<UA_UInt64>)>>('UA_UInt64_copy');
  late final _UA_UInt64_copy = _UA_UInt64_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_deleteMembers(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_deleteMembers(
      p,
    );
  }

  late final _UA_UInt64_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_deleteMembers');
  late final _UA_UInt64_deleteMembers = _UA_UInt64_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_clear(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_clear(
      p,
    );
  }

  late final _UA_UInt64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_clear');
  late final _UA_UInt64_clear =
      _UA_UInt64_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_delete(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_delete(
      p,
    );
  }

  late final _UA_UInt64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_delete');
  late final _UA_UInt64_delete =
      _UA_UInt64_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_Float_init(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_init(
      p,
    );
  }

  late final _UA_Float_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_init');
  late final _UA_Float_init =
      _UA_Float_initPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  ffi.Pointer<UA_Float> UA_Float_new() {
    return _UA_Float_new();
  }

  late final _UA_Float_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Float> Function()>>(
          'UA_Float_new');
  late final _UA_Float_new =
      _UA_Float_newPtr.asFunction<ffi.Pointer<UA_Float> Function()>();

  int UA_Float_copy(
    ffi.Pointer<UA_Float> src,
    ffi.Pointer<UA_Float> dst,
  ) {
    return _UA_Float_copy(
      src,
      dst,
    );
  }

  late final _UA_Float_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>>('UA_Float_copy');
  late final _UA_Float_copy = _UA_Float_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>();

  void UA_Float_deleteMembers(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_deleteMembers(
      p,
    );
  }

  late final _UA_Float_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_deleteMembers');
  late final _UA_Float_deleteMembers = _UA_Float_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Float>)>();

  void UA_Float_clear(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_clear(
      p,
    );
  }

  late final _UA_Float_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_clear');
  late final _UA_Float_clear =
      _UA_Float_clearPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  void UA_Float_delete(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_delete(
      p,
    );
  }

  late final _UA_Float_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_delete');
  late final _UA_Float_delete =
      _UA_Float_deletePtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  void UA_Double_init(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_init(
      p,
    );
  }

  late final _UA_Double_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_init');
  late final _UA_Double_init =
      _UA_Double_initPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  ffi.Pointer<UA_Double> UA_Double_new() {
    return _UA_Double_new();
  }

  late final _UA_Double_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Double> Function()>>(
          'UA_Double_new');
  late final _UA_Double_new =
      _UA_Double_newPtr.asFunction<ffi.Pointer<UA_Double> Function()>();

  int UA_Double_copy(
    ffi.Pointer<UA_Double> src,
    ffi.Pointer<UA_Double> dst,
  ) {
    return _UA_Double_copy(
      src,
      dst,
    );
  }

  late final _UA_Double_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Double>,
              ffi.Pointer<UA_Double>)>>('UA_Double_copy');
  late final _UA_Double_copy = _UA_Double_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>();

  void UA_Double_deleteMembers(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_deleteMembers(
      p,
    );
  }

  late final _UA_Double_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_deleteMembers');
  late final _UA_Double_deleteMembers = _UA_Double_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Double>)>();

  void UA_Double_clear(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_clear(
      p,
    );
  }

  late final _UA_Double_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_clear');
  late final _UA_Double_clear =
      _UA_Double_clearPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  void UA_Double_delete(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_delete(
      p,
    );
  }

  late final _UA_Double_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_delete');
  late final _UA_Double_delete =
      _UA_Double_deletePtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  void UA_String_init(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_init(
      p,
    );
  }

  late final _UA_String_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_init');
  late final _UA_String_init =
      _UA_String_initPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  ffi.Pointer<UA_String> UA_String_new() {
    return _UA_String_new();
  }

  late final _UA_String_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_String> Function()>>(
          'UA_String_new');
  late final _UA_String_new =
      _UA_String_newPtr.asFunction<ffi.Pointer<UA_String> Function()>();

  int UA_String_copy(
    ffi.Pointer<UA_String> src,
    ffi.Pointer<UA_String> dst,
  ) {
    return _UA_String_copy(
      src,
      dst,
    );
  }

  late final _UA_String_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>)>>('UA_String_copy');
  late final _UA_String_copy = _UA_String_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  void UA_String_deleteMembers(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_deleteMembers(
      p,
    );
  }

  late final _UA_String_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_deleteMembers');
  late final _UA_String_deleteMembers = _UA_String_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_String>)>();

  void UA_String_clear(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_clear(
      p,
    );
  }

  late final _UA_String_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_clear');
  late final _UA_String_clear =
      _UA_String_clearPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  void UA_String_delete(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_delete(
      p,
    );
  }

  late final _UA_String_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_delete');
  late final _UA_String_delete =
      _UA_String_deletePtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  void UA_DateTime_init(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_init(
      p,
    );
  }

  late final _UA_DateTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_init');
  late final _UA_DateTime_init = _UA_DateTime_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  ffi.Pointer<UA_DateTime> UA_DateTime_new() {
    return _UA_DateTime_new();
  }

  late final _UA_DateTime_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DateTime> Function()>>(
          'UA_DateTime_new');
  late final _UA_DateTime_new =
      _UA_DateTime_newPtr.asFunction<ffi.Pointer<UA_DateTime> Function()>();

  int UA_DateTime_copy(
    ffi.Pointer<UA_DateTime> src,
    ffi.Pointer<UA_DateTime> dst,
  ) {
    return _UA_DateTime_copy(
      src,
      dst,
    );
  }

  late final _UA_DateTime_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DateTime>,
              ffi.Pointer<UA_DateTime>)>>('UA_DateTime_copy');
  late final _UA_DateTime_copy = _UA_DateTime_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_deleteMembers(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_deleteMembers(
      p,
    );
  }

  late final _UA_DateTime_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_deleteMembers');
  late final _UA_DateTime_deleteMembers = _UA_DateTime_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_clear(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_clear(
      p,
    );
  }

  late final _UA_DateTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_clear');
  late final _UA_DateTime_clear = _UA_DateTime_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_delete(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_delete(
      p,
    );
  }

  late final _UA_DateTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_delete');
  late final _UA_DateTime_delete = _UA_DateTime_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_Guid_init(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_init(
      p,
    );
  }

  late final _UA_Guid_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_init');
  late final _UA_Guid_init =
      _UA_Guid_initPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  ffi.Pointer<UA_Guid> UA_Guid_new() {
    return _UA_Guid_new();
  }

  late final _UA_Guid_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Guid> Function()>>(
          'UA_Guid_new');
  late final _UA_Guid_new =
      _UA_Guid_newPtr.asFunction<ffi.Pointer<UA_Guid> Function()>();

  int UA_Guid_copy(
    ffi.Pointer<UA_Guid> src,
    ffi.Pointer<UA_Guid> dst,
  ) {
    return _UA_Guid_copy(
      src,
      dst,
    );
  }

  late final _UA_Guid_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_copy');
  late final _UA_Guid_copy = _UA_Guid_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  void UA_Guid_deleteMembers(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_deleteMembers(
      p,
    );
  }

  late final _UA_Guid_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_deleteMembers');
  late final _UA_Guid_deleteMembers = _UA_Guid_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Guid>)>();

  void UA_Guid_clear(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_clear(
      p,
    );
  }

  late final _UA_Guid_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_clear');
  late final _UA_Guid_clear =
      _UA_Guid_clearPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  void UA_Guid_delete(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_delete(
      p,
    );
  }

  late final _UA_Guid_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_delete');
  late final _UA_Guid_delete =
      _UA_Guid_deletePtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  void UA_ByteString_init(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_init(
      p,
    );
  }

  late final _UA_ByteString_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_init');
  late final _UA_ByteString_init = _UA_ByteString_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  ffi.Pointer<UA_ByteString> UA_ByteString_new() {
    return _UA_ByteString_new();
  }

  late final _UA_ByteString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ByteString> Function()>>(
          'UA_ByteString_new');
  late final _UA_ByteString_new =
      _UA_ByteString_newPtr.asFunction<ffi.Pointer<UA_ByteString> Function()>();

  int UA_ByteString_copy(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<UA_ByteString> dst,
  ) {
    return _UA_ByteString_copy(
      src,
      dst,
    );
  }

  late final _UA_ByteString_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ByteString_copy');
  late final _UA_ByteString_copy = _UA_ByteString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_deleteMembers(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_deleteMembers(
      p,
    );
  }

  late final _UA_ByteString_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_deleteMembers');
  late final _UA_ByteString_deleteMembers = _UA_ByteString_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_clear(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_clear(
      p,
    );
  }

  late final _UA_ByteString_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_clear');
  late final _UA_ByteString_clear = _UA_ByteString_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_delete(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_delete(
      p,
    );
  }

  late final _UA_ByteString_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_delete');
  late final _UA_ByteString_delete = _UA_ByteString_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_XmlElement_init(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_init(
      p,
    );
  }

  late final _UA_XmlElement_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_init');
  late final _UA_XmlElement_init = _UA_XmlElement_initPtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  ffi.Pointer<UA_XmlElement> UA_XmlElement_new() {
    return _UA_XmlElement_new();
  }

  late final _UA_XmlElement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_XmlElement> Function()>>(
          'UA_XmlElement_new');
  late final _UA_XmlElement_new =
      _UA_XmlElement_newPtr.asFunction<ffi.Pointer<UA_XmlElement> Function()>();

  int UA_XmlElement_copy(
    ffi.Pointer<UA_XmlElement> src,
    ffi.Pointer<UA_XmlElement> dst,
  ) {
    return _UA_XmlElement_copy(
      src,
      dst,
    );
  }

  late final _UA_XmlElement_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_XmlElement>,
              ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_copy');
  late final _UA_XmlElement_copy = _UA_XmlElement_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_deleteMembers(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_deleteMembers(
      p,
    );
  }

  late final _UA_XmlElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_deleteMembers');
  late final _UA_XmlElement_deleteMembers = _UA_XmlElement_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_clear(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_clear(
      p,
    );
  }

  late final _UA_XmlElement_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_clear');
  late final _UA_XmlElement_clear = _UA_XmlElement_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_delete(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_delete(
      p,
    );
  }

  late final _UA_XmlElement_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_delete');
  late final _UA_XmlElement_delete = _UA_XmlElement_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_NodeId_init(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_init(
      p,
    );
  }

  late final _UA_NodeId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_init');
  late final _UA_NodeId_init =
      _UA_NodeId_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<UA_NodeId> UA_NodeId_new() {
    return _UA_NodeId_new();
  }

  late final _UA_NodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeId> Function()>>(
          'UA_NodeId_new');
  late final _UA_NodeId_new =
      _UA_NodeId_newPtr.asFunction<ffi.Pointer<UA_NodeId> Function()>();

  int UA_NodeId_copy(
    ffi.Pointer<UA_NodeId> src,
    ffi.Pointer<UA_NodeId> dst,
  ) {
    return _UA_NodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_copy');
  late final _UA_NodeId_copy = _UA_NodeId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_deleteMembers(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_deleteMembers(
      p,
    );
  }

  late final _UA_NodeId_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_deleteMembers');
  late final _UA_NodeId_deleteMembers = _UA_NodeId_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_clear(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_clear(
      p,
    );
  }

  late final _UA_NodeId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_clear');
  late final _UA_NodeId_clear =
      _UA_NodeId_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_delete(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_delete(
      p,
    );
  }

  late final _UA_NodeId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_delete');
  late final _UA_NodeId_delete =
      _UA_NodeId_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_ExpandedNodeId_init(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_init(
      p,
    );
  }

  late final _UA_ExpandedNodeId_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_init');
  late final _UA_ExpandedNodeId_init = _UA_ExpandedNodeId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  ffi.Pointer<UA_ExpandedNodeId> UA_ExpandedNodeId_new() {
    return _UA_ExpandedNodeId_new();
  }

  late final _UA_ExpandedNodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExpandedNodeId> Function()>>(
          'UA_ExpandedNodeId_new');
  late final _UA_ExpandedNodeId_new = _UA_ExpandedNodeId_newPtr.asFunction<
      ffi.Pointer<UA_ExpandedNodeId> Function()>();

  int UA_ExpandedNodeId_copy(
    ffi.Pointer<UA_ExpandedNodeId> src,
    ffi.Pointer<UA_ExpandedNodeId> dst,
  ) {
    return _UA_ExpandedNodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_ExpandedNodeId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_copy');
  late final _UA_ExpandedNodeId_copy = _UA_ExpandedNodeId_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_deleteMembers(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_deleteMembers(
      p,
    );
  }

  late final _UA_ExpandedNodeId_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_deleteMembers');
  late final _UA_ExpandedNodeId_deleteMembers =
      _UA_ExpandedNodeId_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_clear(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_clear(
      p,
    );
  }

  late final _UA_ExpandedNodeId_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_clear');
  late final _UA_ExpandedNodeId_clear = _UA_ExpandedNodeId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_delete(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_delete(
      p,
    );
  }

  late final _UA_ExpandedNodeId_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_delete');
  late final _UA_ExpandedNodeId_delete = _UA_ExpandedNodeId_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_StatusCode_init(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_init(
      p,
    );
  }

  late final _UA_StatusCode_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_init');
  late final _UA_StatusCode_init = _UA_StatusCode_initPtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_StatusCode> UA_StatusCode_new() {
    return _UA_StatusCode_new();
  }

  late final _UA_StatusCode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StatusCode> Function()>>(
          'UA_StatusCode_new');
  late final _UA_StatusCode_new =
      _UA_StatusCode_newPtr.asFunction<ffi.Pointer<UA_StatusCode> Function()>();

  int UA_StatusCode_copy(
    ffi.Pointer<UA_StatusCode> src,
    ffi.Pointer<UA_StatusCode> dst,
  ) {
    return _UA_StatusCode_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusCode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StatusCode>,
              ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_copy');
  late final _UA_StatusCode_copy = _UA_StatusCode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_deleteMembers(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_deleteMembers(
      p,
    );
  }

  late final _UA_StatusCode_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_deleteMembers');
  late final _UA_StatusCode_deleteMembers = _UA_StatusCode_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_clear(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_clear(
      p,
    );
  }

  late final _UA_StatusCode_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_clear');
  late final _UA_StatusCode_clear = _UA_StatusCode_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_delete(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_delete(
      p,
    );
  }

  late final _UA_StatusCode_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_delete');
  late final _UA_StatusCode_delete = _UA_StatusCode_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_QualifiedName_init(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_init(
      p,
    );
  }

  late final _UA_QualifiedName_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_init');
  late final _UA_QualifiedName_init = _UA_QualifiedName_initPtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  ffi.Pointer<UA_QualifiedName> UA_QualifiedName_new() {
    return _UA_QualifiedName_new();
  }

  late final _UA_QualifiedName_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QualifiedName> Function()>>(
          'UA_QualifiedName_new');
  late final _UA_QualifiedName_new = _UA_QualifiedName_newPtr.asFunction<
      ffi.Pointer<UA_QualifiedName> Function()>();

  int UA_QualifiedName_copy(
    ffi.Pointer<UA_QualifiedName> src,
    ffi.Pointer<UA_QualifiedName> dst,
  ) {
    return _UA_QualifiedName_copy(
      src,
      dst,
    );
  }

  late final _UA_QualifiedName_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_copy');
  late final _UA_QualifiedName_copy = _UA_QualifiedName_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_deleteMembers(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_deleteMembers(
      p,
    );
  }

  late final _UA_QualifiedName_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_deleteMembers');
  late final _UA_QualifiedName_deleteMembers =
      _UA_QualifiedName_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_clear(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_clear(
      p,
    );
  }

  late final _UA_QualifiedName_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_clear');
  late final _UA_QualifiedName_clear = _UA_QualifiedName_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_delete(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_delete(
      p,
    );
  }

  late final _UA_QualifiedName_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_delete');
  late final _UA_QualifiedName_delete = _UA_QualifiedName_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_LocalizedText_init(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_init(
      p,
    );
  }

  late final _UA_LocalizedText_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_init');
  late final _UA_LocalizedText_init = _UA_LocalizedText_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  ffi.Pointer<UA_LocalizedText> UA_LocalizedText_new() {
    return _UA_LocalizedText_new();
  }

  late final _UA_LocalizedText_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocalizedText> Function()>>(
          'UA_LocalizedText_new');
  late final _UA_LocalizedText_new = _UA_LocalizedText_newPtr.asFunction<
      ffi.Pointer<UA_LocalizedText> Function()>();

  int UA_LocalizedText_copy(
    ffi.Pointer<UA_LocalizedText> src,
    ffi.Pointer<UA_LocalizedText> dst,
  ) {
    return _UA_LocalizedText_copy(
      src,
      dst,
    );
  }

  late final _UA_LocalizedText_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LocalizedText>,
              ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_copy');
  late final _UA_LocalizedText_copy = _UA_LocalizedText_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_deleteMembers(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_deleteMembers(
      p,
    );
  }

  late final _UA_LocalizedText_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_deleteMembers');
  late final _UA_LocalizedText_deleteMembers =
      _UA_LocalizedText_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_clear(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_clear(
      p,
    );
  }

  late final _UA_LocalizedText_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_clear');
  late final _UA_LocalizedText_clear = _UA_LocalizedText_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_delete(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_delete(
      p,
    );
  }

  late final _UA_LocalizedText_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_delete');
  late final _UA_LocalizedText_delete = _UA_LocalizedText_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_ExtensionObject_init(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_init(
      p,
    );
  }

  late final _UA_ExtensionObject_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_init');
  late final _UA_ExtensionObject_init = _UA_ExtensionObject_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ExtensionObject>)>();

  ffi.Pointer<UA_ExtensionObject> UA_ExtensionObject_new() {
    return _UA_ExtensionObject_new();
  }

  late final _UA_ExtensionObject_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExtensionObject> Function()>>(
          'UA_ExtensionObject_new');
  late final _UA_ExtensionObject_new = _UA_ExtensionObject_newPtr.asFunction<
      ffi.Pointer<UA_ExtensionObject> Function()>();

  int UA_ExtensionObject_copy(
    ffi.Pointer<UA_ExtensionObject> src,
    ffi.Pointer<UA_ExtensionObject> dst,
  ) {
    return _UA_ExtensionObject_copy(
      src,
      dst,
    );
  }

  late final _UA_ExtensionObject_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<UA_ExtensionObject>)>>('UA_ExtensionObject_copy');
  late final _UA_ExtensionObject_copy = _UA_ExtensionObject_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_deleteMembers(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_deleteMembers(
      p,
    );
  }

  late final _UA_ExtensionObject_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_deleteMembers');
  late final _UA_ExtensionObject_deleteMembers =
      _UA_ExtensionObject_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_clear(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_clear(
      p,
    );
  }

  late final _UA_ExtensionObject_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_clear');
  late final _UA_ExtensionObject_clear = _UA_ExtensionObject_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_delete(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_delete(
      p,
    );
  }

  late final _UA_ExtensionObject_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_delete');
  late final _UA_ExtensionObject_delete = _UA_ExtensionObject_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_DataValue_init(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_init(
      p,
    );
  }

  late final _UA_DataValue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_init');
  late final _UA_DataValue_init = _UA_DataValue_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  ffi.Pointer<UA_DataValue> UA_DataValue_new() {
    return _UA_DataValue_new();
  }

  late final _UA_DataValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataValue> Function()>>(
          'UA_DataValue_new');
  late final _UA_DataValue_new =
      _UA_DataValue_newPtr.asFunction<ffi.Pointer<UA_DataValue> Function()>();

  int UA_DataValue_copy(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
  ) {
    return _UA_DataValue_copy(
      src,
      dst,
    );
  }

  late final _UA_DataValue_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataValue>,
              ffi.Pointer<UA_DataValue>)>>('UA_DataValue_copy');
  late final _UA_DataValue_copy = _UA_DataValue_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_deleteMembers(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_deleteMembers(
      p,
    );
  }

  late final _UA_DataValue_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_deleteMembers');
  late final _UA_DataValue_deleteMembers = _UA_DataValue_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_clear(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_clear(
      p,
    );
  }

  late final _UA_DataValue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_clear');
  late final _UA_DataValue_clear = _UA_DataValue_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_delete(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_delete(
      p,
    );
  }

  late final _UA_DataValue_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_delete');
  late final _UA_DataValue_delete = _UA_DataValue_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_Variant_init(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_init(
      p,
    );
  }

  late final _UA_Variant_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_init');
  late final _UA_Variant_init =
      _UA_Variant_initPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  ffi.Pointer<UA_Variant> UA_Variant_new() {
    return _UA_Variant_new();
  }

  late final _UA_Variant_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Variant> Function()>>(
          'UA_Variant_new');
  late final _UA_Variant_new =
      _UA_Variant_newPtr.asFunction<ffi.Pointer<UA_Variant> Function()>();

  int UA_Variant_copy(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
  ) {
    return _UA_Variant_copy(
      src,
      dst,
    );
  }

  late final _UA_Variant_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_Variant>)>>('UA_Variant_copy');
  late final _UA_Variant_copy = _UA_Variant_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>();

  void UA_Variant_deleteMembers(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_deleteMembers(
      p,
    );
  }

  late final _UA_Variant_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_deleteMembers');
  late final _UA_Variant_deleteMembers = _UA_Variant_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  void UA_Variant_clear(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_clear(
      p,
    );
  }

  late final _UA_Variant_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_clear');
  late final _UA_Variant_clear =
      _UA_Variant_clearPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  void UA_Variant_delete(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_delete(
      p,
    );
  }

  late final _UA_Variant_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_delete');
  late final _UA_Variant_delete = _UA_Variant_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>)>();

  void UA_DiagnosticInfo_init(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_init(
      p,
    );
  }

  late final _UA_DiagnosticInfo_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_init');
  late final _UA_DiagnosticInfo_init = _UA_DiagnosticInfo_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  ffi.Pointer<UA_DiagnosticInfo> UA_DiagnosticInfo_new() {
    return _UA_DiagnosticInfo_new();
  }

  late final _UA_DiagnosticInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DiagnosticInfo> Function()>>(
          'UA_DiagnosticInfo_new');
  late final _UA_DiagnosticInfo_new = _UA_DiagnosticInfo_newPtr.asFunction<
      ffi.Pointer<UA_DiagnosticInfo> Function()>();

  int UA_DiagnosticInfo_copy(
    ffi.Pointer<UA_DiagnosticInfo> src,
    ffi.Pointer<UA_DiagnosticInfo> dst,
  ) {
    return _UA_DiagnosticInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_DiagnosticInfo_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DiagnosticInfo>,
              ffi.Pointer<UA_DiagnosticInfo>)>>('UA_DiagnosticInfo_copy');
  late final _UA_DiagnosticInfo_copy = _UA_DiagnosticInfo_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_deleteMembers(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_deleteMembers(
      p,
    );
  }

  late final _UA_DiagnosticInfo_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_deleteMembers');
  late final _UA_DiagnosticInfo_deleteMembers =
      _UA_DiagnosticInfo_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_clear(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_clear(
      p,
    );
  }

  late final _UA_DiagnosticInfo_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_clear');
  late final _UA_DiagnosticInfo_clear = _UA_DiagnosticInfo_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_delete(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_delete(
      p,
    );
  }

  late final _UA_DiagnosticInfo_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_delete');
  late final _UA_DiagnosticInfo_delete = _UA_DiagnosticInfo_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_KeyValuePair_init(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_init(
      p,
    );
  }

  late final _UA_KeyValuePair_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_init');
  late final _UA_KeyValuePair_init = _UA_KeyValuePair_initPtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  ffi.Pointer<UA_KeyValuePair> UA_KeyValuePair_new() {
    return _UA_KeyValuePair_new();
  }

  late final _UA_KeyValuePair_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_KeyValuePair> Function()>>(
          'UA_KeyValuePair_new');
  late final _UA_KeyValuePair_new = _UA_KeyValuePair_newPtr.asFunction<
      ffi.Pointer<UA_KeyValuePair> Function()>();

  int UA_KeyValuePair_copy(
    ffi.Pointer<UA_KeyValuePair> src,
    ffi.Pointer<UA_KeyValuePair> dst,
  ) {
    return _UA_KeyValuePair_copy(
      src,
      dst,
    );
  }

  late final _UA_KeyValuePair_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_KeyValuePair>,
              ffi.Pointer<UA_KeyValuePair>)>>('UA_KeyValuePair_copy');
  late final _UA_KeyValuePair_copy = _UA_KeyValuePair_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_deleteMembers(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_deleteMembers(
      p,
    );
  }

  late final _UA_KeyValuePair_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_deleteMembers');
  late final _UA_KeyValuePair_deleteMembers = _UA_KeyValuePair_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_clear(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_clear(
      p,
    );
  }

  late final _UA_KeyValuePair_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_clear');
  late final _UA_KeyValuePair_clear = _UA_KeyValuePair_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_delete(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_delete(
      p,
    );
  }

  late final _UA_KeyValuePair_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_delete');
  late final _UA_KeyValuePair_delete = _UA_KeyValuePair_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_SimpleTypeDescription_init(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_init(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_init');
  late final _UA_SimpleTypeDescription_init = _UA_SimpleTypeDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  ffi.Pointer<UA_SimpleTypeDescription> UA_SimpleTypeDescription_new() {
    return _UA_SimpleTypeDescription_new();
  }

  late final _UA_SimpleTypeDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>>(
      'UA_SimpleTypeDescription_new');
  late final _UA_SimpleTypeDescription_new = _UA_SimpleTypeDescription_newPtr
      .asFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>();

  int UA_SimpleTypeDescription_copy(
    ffi.Pointer<UA_SimpleTypeDescription> src,
    ffi.Pointer<UA_SimpleTypeDescription> dst,
  ) {
    return _UA_SimpleTypeDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleTypeDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SimpleTypeDescription>,
                  ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_copy');
  late final _UA_SimpleTypeDescription_copy =
      _UA_SimpleTypeDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SimpleTypeDescription>,
              ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_deleteMembers(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_deleteMembers(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_deleteMembers');
  late final _UA_SimpleTypeDescription_deleteMembers =
      _UA_SimpleTypeDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_clear(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_clear(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_clear');
  late final _UA_SimpleTypeDescription_clear =
      _UA_SimpleTypeDescription_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_delete(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_delete(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_delete');
  late final _UA_SimpleTypeDescription_delete =
      _UA_SimpleTypeDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_PubSubState_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_init(
      p,
    );
  }

  late final _UA_PubSubState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_init');
  late final _UA_PubSubState_init = _UA_PubSubState_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_PubSubState_new() {
    return _UA_PubSubState_new();
  }

  late final _UA_PubSubState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_PubSubState_new');
  late final _UA_PubSubState_new =
      _UA_PubSubState_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_PubSubState_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_PubSubState_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubState_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_PubSubState_copy');
  late final _UA_PubSubState_copy = _UA_PubSubState_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubState_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_deleteMembers');
  late final _UA_PubSubState_deleteMembers = _UA_PubSubState_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_clear(
      p,
    );
  }

  late final _UA_PubSubState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_clear');
  late final _UA_PubSubState_clear = _UA_PubSubState_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_delete(
      p,
    );
  }

  late final _UA_PubSubState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_delete');
  late final _UA_PubSubState_delete = _UA_PubSubState_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetFieldFlags_init(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_init(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_init');
  late final _UA_DataSetFieldFlags_init = _UA_DataSetFieldFlags_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  ffi.Pointer<UA_DataSetFieldFlags> UA_DataSetFieldFlags_new() {
    return _UA_DataSetFieldFlags_new();
  }

  late final _UA_DataSetFieldFlags_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>>(
          'UA_DataSetFieldFlags_new');
  late final _UA_DataSetFieldFlags_new = _UA_DataSetFieldFlags_newPtr
      .asFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>();

  int UA_DataSetFieldFlags_copy(
    ffi.Pointer<UA_DataSetFieldFlags> src,
    ffi.Pointer<UA_DataSetFieldFlags> dst,
  ) {
    return _UA_DataSetFieldFlags_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldFlags_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldFlags>,
              ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_copy');
  late final _UA_DataSetFieldFlags_copy =
      _UA_DataSetFieldFlags_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetFieldFlags>,
              ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_deleteMembers(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_deleteMembers');
  late final _UA_DataSetFieldFlags_deleteMembers =
      _UA_DataSetFieldFlags_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_clear(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_clear(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_clear');
  late final _UA_DataSetFieldFlags_clear = _UA_DataSetFieldFlags_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_delete(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_delete(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_delete');
  late final _UA_DataSetFieldFlags_delete = _UA_DataSetFieldFlags_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_ConfigurationVersionDataType_init(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_init(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_init');
  late final _UA_ConfigurationVersionDataType_init =
      _UA_ConfigurationVersionDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  ffi.Pointer<UA_ConfigurationVersionDataType>
      UA_ConfigurationVersionDataType_new() {
    return _UA_ConfigurationVersionDataType_new();
  }

  late final _UA_ConfigurationVersionDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ConfigurationVersionDataType>
              Function()>>('UA_ConfigurationVersionDataType_new');
  late final _UA_ConfigurationVersionDataType_new =
      _UA_ConfigurationVersionDataType_newPtr.asFunction<
          ffi.Pointer<UA_ConfigurationVersionDataType> Function()>();

  int UA_ConfigurationVersionDataType_copy(
    ffi.Pointer<UA_ConfigurationVersionDataType> src,
    ffi.Pointer<UA_ConfigurationVersionDataType> dst,
  ) {
    return _UA_ConfigurationVersionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ConfigurationVersionDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ConfigurationVersionDataType>,
                  ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_copy');
  late final _UA_ConfigurationVersionDataType_copy =
      _UA_ConfigurationVersionDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ConfigurationVersionDataType>,
              ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_deleteMembers(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_deleteMembers');
  late final _UA_ConfigurationVersionDataType_deleteMembers =
      _UA_ConfigurationVersionDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_clear(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_clear(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_clear');
  late final _UA_ConfigurationVersionDataType_clear =
      _UA_ConfigurationVersionDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_delete(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_delete(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_delete');
  late final _UA_ConfigurationVersionDataType_delete =
      _UA_ConfigurationVersionDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_PublishedVariableDataType_init(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_init(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_init');
  late final _UA_PublishedVariableDataType_init =
      _UA_PublishedVariableDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  ffi.Pointer<UA_PublishedVariableDataType> UA_PublishedVariableDataType_new() {
    return _UA_PublishedVariableDataType_new();
  }

  late final _UA_PublishedVariableDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishedVariableDataType>
              Function()>>('UA_PublishedVariableDataType_new');
  late final _UA_PublishedVariableDataType_new =
      _UA_PublishedVariableDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedVariableDataType> Function()>();

  int UA_PublishedVariableDataType_copy(
    ffi.Pointer<UA_PublishedVariableDataType> src,
    ffi.Pointer<UA_PublishedVariableDataType> dst,
  ) {
    return _UA_PublishedVariableDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedVariableDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedVariableDataType>,
                  ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_copy');
  late final _UA_PublishedVariableDataType_copy =
      _UA_PublishedVariableDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedVariableDataType>,
              ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_deleteMembers(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_deleteMembers');
  late final _UA_PublishedVariableDataType_deleteMembers =
      _UA_PublishedVariableDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_clear(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_clear(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_clear');
  late final _UA_PublishedVariableDataType_clear =
      _UA_PublishedVariableDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_delete(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_delete(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_delete');
  late final _UA_PublishedVariableDataType_delete =
      _UA_PublishedVariableDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedDataItemsDataType_init(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_init');
  late final _UA_PublishedDataItemsDataType_init =
      _UA_PublishedDataItemsDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  ffi.Pointer<UA_PublishedDataItemsDataType>
      UA_PublishedDataItemsDataType_new() {
    return _UA_PublishedDataItemsDataType_new();
  }

  late final _UA_PublishedDataItemsDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishedDataItemsDataType>
              Function()>>('UA_PublishedDataItemsDataType_new');
  late final _UA_PublishedDataItemsDataType_new =
      _UA_PublishedDataItemsDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedDataItemsDataType> Function()>();

  int UA_PublishedDataItemsDataType_copy(
    ffi.Pointer<UA_PublishedDataItemsDataType> src,
    ffi.Pointer<UA_PublishedDataItemsDataType> dst,
  ) {
    return _UA_PublishedDataItemsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataItemsDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
                  ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_copy');
  late final _UA_PublishedDataItemsDataType_copy =
      _UA_PublishedDataItemsDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
              ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_deleteMembers(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_deleteMembers');
  late final _UA_PublishedDataItemsDataType_deleteMembers =
      _UA_PublishedDataItemsDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_clear(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_clear');
  late final _UA_PublishedDataItemsDataType_clear =
      _UA_PublishedDataItemsDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_delete(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_delete');
  late final _UA_PublishedDataItemsDataType_delete =
      _UA_PublishedDataItemsDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_DataSetFieldContentMask_init(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_init(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_init');
  late final _UA_DataSetFieldContentMask_init =
      _UA_DataSetFieldContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  ffi.Pointer<UA_DataSetFieldContentMask> UA_DataSetFieldContentMask_new() {
    return _UA_DataSetFieldContentMask_new();
  }

  late final _UA_DataSetFieldContentMask_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DataSetFieldContentMask> Function()>>(
      'UA_DataSetFieldContentMask_new');
  late final _UA_DataSetFieldContentMask_new =
      _UA_DataSetFieldContentMask_newPtr.asFunction<
          ffi.Pointer<UA_DataSetFieldContentMask> Function()>();

  int UA_DataSetFieldContentMask_copy(
    ffi.Pointer<UA_DataSetFieldContentMask> src,
    ffi.Pointer<UA_DataSetFieldContentMask> dst,
  ) {
    return _UA_DataSetFieldContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldContentMask>,
                  ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_copy');
  late final _UA_DataSetFieldContentMask_copy =
      _UA_DataSetFieldContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetFieldContentMask>,
              ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_deleteMembers(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_deleteMembers');
  late final _UA_DataSetFieldContentMask_deleteMembers =
      _UA_DataSetFieldContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_clear(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_clear(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_clear');
  late final _UA_DataSetFieldContentMask_clear =
      _UA_DataSetFieldContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_delete(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_delete(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_delete');
  late final _UA_DataSetFieldContentMask_delete =
      _UA_DataSetFieldContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetWriterDataType_init(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_init(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_init');
  late final _UA_DataSetWriterDataType_init = _UA_DataSetWriterDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  ffi.Pointer<UA_DataSetWriterDataType> UA_DataSetWriterDataType_new() {
    return _UA_DataSetWriterDataType_new();
  }

  late final _UA_DataSetWriterDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>>(
      'UA_DataSetWriterDataType_new');
  late final _UA_DataSetWriterDataType_new = _UA_DataSetWriterDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>();

  int UA_DataSetWriterDataType_copy(
    ffi.Pointer<UA_DataSetWriterDataType> src,
    ffi.Pointer<UA_DataSetWriterDataType> dst,
  ) {
    return _UA_DataSetWriterDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetWriterDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetWriterDataType>,
                  ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_copy');
  late final _UA_DataSetWriterDataType_copy =
      _UA_DataSetWriterDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetWriterDataType>,
              ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_deleteMembers(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_deleteMembers');
  late final _UA_DataSetWriterDataType_deleteMembers =
      _UA_DataSetWriterDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_clear(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_clear(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_clear');
  late final _UA_DataSetWriterDataType_clear =
      _UA_DataSetWriterDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_delete(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_delete(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_delete');
  late final _UA_DataSetWriterDataType_delete =
      _UA_DataSetWriterDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_NetworkAddressUrlDataType_init(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_init(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_init');
  late final _UA_NetworkAddressUrlDataType_init =
      _UA_NetworkAddressUrlDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  ffi.Pointer<UA_NetworkAddressUrlDataType> UA_NetworkAddressUrlDataType_new() {
    return _UA_NetworkAddressUrlDataType_new();
  }

  late final _UA_NetworkAddressUrlDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_NetworkAddressUrlDataType>
              Function()>>('UA_NetworkAddressUrlDataType_new');
  late final _UA_NetworkAddressUrlDataType_new =
      _UA_NetworkAddressUrlDataType_newPtr.asFunction<
          ffi.Pointer<UA_NetworkAddressUrlDataType> Function()>();

  int UA_NetworkAddressUrlDataType_copy(
    ffi.Pointer<UA_NetworkAddressUrlDataType> src,
    ffi.Pointer<UA_NetworkAddressUrlDataType> dst,
  ) {
    return _UA_NetworkAddressUrlDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_NetworkAddressUrlDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
                  ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_copy');
  late final _UA_NetworkAddressUrlDataType_copy =
      _UA_NetworkAddressUrlDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
              ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_deleteMembers(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_deleteMembers(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_deleteMembers');
  late final _UA_NetworkAddressUrlDataType_deleteMembers =
      _UA_NetworkAddressUrlDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_clear(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_clear(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_clear');
  late final _UA_NetworkAddressUrlDataType_clear =
      _UA_NetworkAddressUrlDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_delete(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_delete(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_delete');
  late final _UA_NetworkAddressUrlDataType_delete =
      _UA_NetworkAddressUrlDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_OverrideValueHandling_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_init(
      p,
    );
  }

  late final _UA_OverrideValueHandling_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_init');
  late final _UA_OverrideValueHandling_init = _UA_OverrideValueHandling_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_OverrideValueHandling_new() {
    return _UA_OverrideValueHandling_new();
  }

  late final _UA_OverrideValueHandling_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_OverrideValueHandling_new');
  late final _UA_OverrideValueHandling_new = _UA_OverrideValueHandling_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_OverrideValueHandling_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_OverrideValueHandling_copy(
      src,
      dst,
    );
  }

  late final _UA_OverrideValueHandling_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_OverrideValueHandling_copy');
  late final _UA_OverrideValueHandling_copy =
      _UA_OverrideValueHandling_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_deleteMembers(
      p,
    );
  }

  late final _UA_OverrideValueHandling_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_deleteMembers');
  late final _UA_OverrideValueHandling_deleteMembers =
      _UA_OverrideValueHandling_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_clear(
      p,
    );
  }

  late final _UA_OverrideValueHandling_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_clear');
  late final _UA_OverrideValueHandling_clear =
      _UA_OverrideValueHandling_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_delete(
      p,
    );
  }

  late final _UA_OverrideValueHandling_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_delete');
  late final _UA_OverrideValueHandling_delete =
      _UA_OverrideValueHandling_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_init(
      p,
    );
  }

  late final _UA_DataSetOrderingType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_init');
  late final _UA_DataSetOrderingType_init = _UA_DataSetOrderingType_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DataSetOrderingType_new() {
    return _UA_DataSetOrderingType_new();
  }

  late final _UA_DataSetOrderingType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DataSetOrderingType_new');
  late final _UA_DataSetOrderingType_new = _UA_DataSetOrderingType_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DataSetOrderingType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DataSetOrderingType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetOrderingType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DataSetOrderingType_copy');
  late final _UA_DataSetOrderingType_copy =
      _UA_DataSetOrderingType_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetOrderingType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_deleteMembers');
  late final _UA_DataSetOrderingType_deleteMembers =
      _UA_DataSetOrderingType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_clear(
      p,
    );
  }

  late final _UA_DataSetOrderingType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_clear');
  late final _UA_DataSetOrderingType_clear = _UA_DataSetOrderingType_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_delete(
      p,
    );
  }

  late final _UA_DataSetOrderingType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_delete');
  late final _UA_DataSetOrderingType_delete = _UA_DataSetOrderingType_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UadpNetworkMessageContentMask_init(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_init');
  late final _UA_UadpNetworkMessageContentMask_init =
      _UA_UadpNetworkMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  ffi.Pointer<UA_UadpNetworkMessageContentMask>
      UA_UadpNetworkMessageContentMask_new() {
    return _UA_UadpNetworkMessageContentMask_new();
  }

  late final _UA_UadpNetworkMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpNetworkMessageContentMask>
              Function()>>('UA_UadpNetworkMessageContentMask_new');
  late final _UA_UadpNetworkMessageContentMask_new =
      _UA_UadpNetworkMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_UadpNetworkMessageContentMask> Function()>();

  int UA_UadpNetworkMessageContentMask_copy(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> src,
    ffi.Pointer<UA_UadpNetworkMessageContentMask> dst,
  ) {
    return _UA_UadpNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>,
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_copy');
  late final _UA_UadpNetworkMessageContentMask_copy =
      _UA_UadpNetworkMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>,
              ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_deleteMembers(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_deleteMembers');
  late final _UA_UadpNetworkMessageContentMask_deleteMembers =
      _UA_UadpNetworkMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_clear(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_clear');
  late final _UA_UadpNetworkMessageContentMask_clear =
      _UA_UadpNetworkMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_delete(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_delete');
  late final _UA_UadpNetworkMessageContentMask_delete =
      _UA_UadpNetworkMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpWriterGroupMessageDataType_init(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_init');
  late final _UA_UadpWriterGroupMessageDataType_init =
      _UA_UadpWriterGroupMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_UadpWriterGroupMessageDataType>
      UA_UadpWriterGroupMessageDataType_new() {
    return _UA_UadpWriterGroupMessageDataType_new();
  }

  late final _UA_UadpWriterGroupMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpWriterGroupMessageDataType>
              Function()>>('UA_UadpWriterGroupMessageDataType_new');
  late final _UA_UadpWriterGroupMessageDataType_new =
      _UA_UadpWriterGroupMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpWriterGroupMessageDataType> Function()>();

  int UA_UadpWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> src,
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> dst,
  ) {
    return _UA_UadpWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_copy');
  late final _UA_UadpWriterGroupMessageDataType_copy =
      _UA_UadpWriterGroupMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
              ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_deleteMembers');
  late final _UA_UadpWriterGroupMessageDataType_deleteMembers =
      _UA_UadpWriterGroupMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_clear');
  late final _UA_UadpWriterGroupMessageDataType_clear =
      _UA_UadpWriterGroupMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_delete');
  late final _UA_UadpWriterGroupMessageDataType_delete =
      _UA_UadpWriterGroupMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpDataSetMessageContentMask_init(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_init');
  late final _UA_UadpDataSetMessageContentMask_init =
      _UA_UadpDataSetMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  ffi.Pointer<UA_UadpDataSetMessageContentMask>
      UA_UadpDataSetMessageContentMask_new() {
    return _UA_UadpDataSetMessageContentMask_new();
  }

  late final _UA_UadpDataSetMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetMessageContentMask>
              Function()>>('UA_UadpDataSetMessageContentMask_new');
  late final _UA_UadpDataSetMessageContentMask_new =
      _UA_UadpDataSetMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetMessageContentMask> Function()>();

  int UA_UadpDataSetMessageContentMask_copy(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> src,
    ffi.Pointer<UA_UadpDataSetMessageContentMask> dst,
  ) {
    return _UA_UadpDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>,
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_copy');
  late final _UA_UadpDataSetMessageContentMask_copy =
      _UA_UadpDataSetMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>,
              ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_deleteMembers(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_deleteMembers');
  late final _UA_UadpDataSetMessageContentMask_deleteMembers =
      _UA_UadpDataSetMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_clear(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_clear');
  late final _UA_UadpDataSetMessageContentMask_clear =
      _UA_UadpDataSetMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_delete(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_delete');
  late final _UA_UadpDataSetMessageContentMask_delete =
      _UA_UadpDataSetMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_init');
  late final _UA_UadpDataSetWriterMessageDataType_init =
      _UA_UadpDataSetWriterMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>
      UA_UadpDataSetWriterMessageDataType_new() {
    return _UA_UadpDataSetWriterMessageDataType_new();
  }

  late final _UA_UadpDataSetWriterMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType>
              Function()>>('UA_UadpDataSetWriterMessageDataType_new');
  late final _UA_UadpDataSetWriterMessageDataType_new =
      _UA_UadpDataSetWriterMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType> Function()>();

  int UA_UadpDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> dst,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_copy');
  late final _UA_UadpDataSetWriterMessageDataType_copy =
      _UA_UadpDataSetWriterMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
              ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_deleteMembers');
  late final _UA_UadpDataSetWriterMessageDataType_deleteMembers =
      _UA_UadpDataSetWriterMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_clear');
  late final _UA_UadpDataSetWriterMessageDataType_clear =
      _UA_UadpDataSetWriterMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_delete');
  late final _UA_UadpDataSetWriterMessageDataType_delete =
      _UA_UadpDataSetWriterMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_init');
  late final _UA_UadpDataSetReaderMessageDataType_init =
      _UA_UadpDataSetReaderMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>
      UA_UadpDataSetReaderMessageDataType_new() {
    return _UA_UadpDataSetReaderMessageDataType_new();
  }

  late final _UA_UadpDataSetReaderMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType>
              Function()>>('UA_UadpDataSetReaderMessageDataType_new');
  late final _UA_UadpDataSetReaderMessageDataType_new =
      _UA_UadpDataSetReaderMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType> Function()>();

  int UA_UadpDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> dst,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_copy');
  late final _UA_UadpDataSetReaderMessageDataType_copy =
      _UA_UadpDataSetReaderMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
              ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_deleteMembers');
  late final _UA_UadpDataSetReaderMessageDataType_deleteMembers =
      _UA_UadpDataSetReaderMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_clear');
  late final _UA_UadpDataSetReaderMessageDataType_clear =
      _UA_UadpDataSetReaderMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_delete');
  late final _UA_UadpDataSetReaderMessageDataType_delete =
      _UA_UadpDataSetReaderMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_JsonNetworkMessageContentMask_init(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_init');
  late final _UA_JsonNetworkMessageContentMask_init =
      _UA_JsonNetworkMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  ffi.Pointer<UA_JsonNetworkMessageContentMask>
      UA_JsonNetworkMessageContentMask_new() {
    return _UA_JsonNetworkMessageContentMask_new();
  }

  late final _UA_JsonNetworkMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonNetworkMessageContentMask>
              Function()>>('UA_JsonNetworkMessageContentMask_new');
  late final _UA_JsonNetworkMessageContentMask_new =
      _UA_JsonNetworkMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_JsonNetworkMessageContentMask> Function()>();

  int UA_JsonNetworkMessageContentMask_copy(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> src,
    ffi.Pointer<UA_JsonNetworkMessageContentMask> dst,
  ) {
    return _UA_JsonNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>,
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_copy');
  late final _UA_JsonNetworkMessageContentMask_copy =
      _UA_JsonNetworkMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>,
              ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_deleteMembers(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_deleteMembers');
  late final _UA_JsonNetworkMessageContentMask_deleteMembers =
      _UA_JsonNetworkMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_clear(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_clear');
  late final _UA_JsonNetworkMessageContentMask_clear =
      _UA_JsonNetworkMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_delete(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_delete');
  late final _UA_JsonNetworkMessageContentMask_delete =
      _UA_JsonNetworkMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonWriterGroupMessageDataType_init(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_init');
  late final _UA_JsonWriterGroupMessageDataType_init =
      _UA_JsonWriterGroupMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_JsonWriterGroupMessageDataType>
      UA_JsonWriterGroupMessageDataType_new() {
    return _UA_JsonWriterGroupMessageDataType_new();
  }

  late final _UA_JsonWriterGroupMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonWriterGroupMessageDataType>
              Function()>>('UA_JsonWriterGroupMessageDataType_new');
  late final _UA_JsonWriterGroupMessageDataType_new =
      _UA_JsonWriterGroupMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonWriterGroupMessageDataType> Function()>();

  int UA_JsonWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> src,
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> dst,
  ) {
    return _UA_JsonWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_copy');
  late final _UA_JsonWriterGroupMessageDataType_copy =
      _UA_JsonWriterGroupMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
              ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_deleteMembers');
  late final _UA_JsonWriterGroupMessageDataType_deleteMembers =
      _UA_JsonWriterGroupMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_clear');
  late final _UA_JsonWriterGroupMessageDataType_clear =
      _UA_JsonWriterGroupMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_delete');
  late final _UA_JsonWriterGroupMessageDataType_delete =
      _UA_JsonWriterGroupMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonDataSetMessageContentMask_init(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_init');
  late final _UA_JsonDataSetMessageContentMask_init =
      _UA_JsonDataSetMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  ffi.Pointer<UA_JsonDataSetMessageContentMask>
      UA_JsonDataSetMessageContentMask_new() {
    return _UA_JsonDataSetMessageContentMask_new();
  }

  late final _UA_JsonDataSetMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetMessageContentMask>
              Function()>>('UA_JsonDataSetMessageContentMask_new');
  late final _UA_JsonDataSetMessageContentMask_new =
      _UA_JsonDataSetMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetMessageContentMask> Function()>();

  int UA_JsonDataSetMessageContentMask_copy(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> src,
    ffi.Pointer<UA_JsonDataSetMessageContentMask> dst,
  ) {
    return _UA_JsonDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>,
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_copy');
  late final _UA_JsonDataSetMessageContentMask_copy =
      _UA_JsonDataSetMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>,
              ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_deleteMembers(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_deleteMembers');
  late final _UA_JsonDataSetMessageContentMask_deleteMembers =
      _UA_JsonDataSetMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_clear(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_clear');
  late final _UA_JsonDataSetMessageContentMask_clear =
      _UA_JsonDataSetMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_delete(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_delete');
  late final _UA_JsonDataSetMessageContentMask_delete =
      _UA_JsonDataSetMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_init');
  late final _UA_JsonDataSetWriterMessageDataType_init =
      _UA_JsonDataSetWriterMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>
      UA_JsonDataSetWriterMessageDataType_new() {
    return _UA_JsonDataSetWriterMessageDataType_new();
  }

  late final _UA_JsonDataSetWriterMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType>
              Function()>>('UA_JsonDataSetWriterMessageDataType_new');
  late final _UA_JsonDataSetWriterMessageDataType_new =
      _UA_JsonDataSetWriterMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType> Function()>();

  int UA_JsonDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> dst,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_copy');
  late final _UA_JsonDataSetWriterMessageDataType_copy =
      _UA_JsonDataSetWriterMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
              ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_deleteMembers');
  late final _UA_JsonDataSetWriterMessageDataType_deleteMembers =
      _UA_JsonDataSetWriterMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_clear');
  late final _UA_JsonDataSetWriterMessageDataType_clear =
      _UA_JsonDataSetWriterMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_delete');
  late final _UA_JsonDataSetWriterMessageDataType_delete =
      _UA_JsonDataSetWriterMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_init');
  late final _UA_JsonDataSetReaderMessageDataType_init =
      _UA_JsonDataSetReaderMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>
      UA_JsonDataSetReaderMessageDataType_new() {
    return _UA_JsonDataSetReaderMessageDataType_new();
  }

  late final _UA_JsonDataSetReaderMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType>
              Function()>>('UA_JsonDataSetReaderMessageDataType_new');
  late final _UA_JsonDataSetReaderMessageDataType_new =
      _UA_JsonDataSetReaderMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType> Function()>();

  int UA_JsonDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> dst,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_copy');
  late final _UA_JsonDataSetReaderMessageDataType_copy =
      _UA_JsonDataSetReaderMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
              ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_deleteMembers');
  late final _UA_JsonDataSetReaderMessageDataType_deleteMembers =
      _UA_JsonDataSetReaderMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_clear');
  late final _UA_JsonDataSetReaderMessageDataType_clear =
      _UA_JsonDataSetReaderMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_delete');
  late final _UA_JsonDataSetReaderMessageDataType_delete =
      _UA_JsonDataSetReaderMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_DatagramConnectionTransportDataType_init(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_init');
  late final _UA_DatagramConnectionTransportDataType_init =
      _UA_DatagramConnectionTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  ffi.Pointer<UA_DatagramConnectionTransportDataType>
      UA_DatagramConnectionTransportDataType_new() {
    return _UA_DatagramConnectionTransportDataType_new();
  }

  late final _UA_DatagramConnectionTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DatagramConnectionTransportDataType>
              Function()>>('UA_DatagramConnectionTransportDataType_new');
  late final _UA_DatagramConnectionTransportDataType_new =
      _UA_DatagramConnectionTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_DatagramConnectionTransportDataType> Function()>();

  int UA_DatagramConnectionTransportDataType_copy(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> src,
    ffi.Pointer<UA_DatagramConnectionTransportDataType> dst,
  ) {
    return _UA_DatagramConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>,
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_copy');
  late final _UA_DatagramConnectionTransportDataType_copy =
      _UA_DatagramConnectionTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>,
              ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_deleteMembers(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_deleteMembers');
  late final _UA_DatagramConnectionTransportDataType_deleteMembers =
      _UA_DatagramConnectionTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_clear(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_clear');
  late final _UA_DatagramConnectionTransportDataType_clear =
      _UA_DatagramConnectionTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_delete(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_delete');
  late final _UA_DatagramConnectionTransportDataType_delete =
      _UA_DatagramConnectionTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_init(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_init');
  late final _UA_DatagramWriterGroupTransportDataType_init =
      _UA_DatagramWriterGroupTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>
      UA_DatagramWriterGroupTransportDataType_new() {
    return _UA_DatagramWriterGroupTransportDataType_new();
  }

  late final _UA_DatagramWriterGroupTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DatagramWriterGroupTransportDataType>
              Function()>>('UA_DatagramWriterGroupTransportDataType_new');
  late final _UA_DatagramWriterGroupTransportDataType_new =
      _UA_DatagramWriterGroupTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_DatagramWriterGroupTransportDataType> Function()>();

  int UA_DatagramWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> src,
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> dst,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_copy');
  late final _UA_DatagramWriterGroupTransportDataType_copy =
      _UA_DatagramWriterGroupTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_deleteMembers(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
          'UA_DatagramWriterGroupTransportDataType_deleteMembers');
  late final _UA_DatagramWriterGroupTransportDataType_deleteMembers =
      _UA_DatagramWriterGroupTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_clear');
  late final _UA_DatagramWriterGroupTransportDataType_clear =
      _UA_DatagramWriterGroupTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_delete');
  late final _UA_DatagramWriterGroupTransportDataType_delete =
      _UA_DatagramWriterGroupTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_init(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_init');
  late final _UA_BrokerConnectionTransportDataType_init =
      _UA_BrokerConnectionTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  ffi.Pointer<UA_BrokerConnectionTransportDataType>
      UA_BrokerConnectionTransportDataType_new() {
    return _UA_BrokerConnectionTransportDataType_new();
  }

  late final _UA_BrokerConnectionTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerConnectionTransportDataType>
              Function()>>('UA_BrokerConnectionTransportDataType_new');
  late final _UA_BrokerConnectionTransportDataType_new =
      _UA_BrokerConnectionTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerConnectionTransportDataType> Function()>();

  int UA_BrokerConnectionTransportDataType_copy(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> src,
    ffi.Pointer<UA_BrokerConnectionTransportDataType> dst,
  ) {
    return _UA_BrokerConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>,
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_copy');
  late final _UA_BrokerConnectionTransportDataType_copy =
      _UA_BrokerConnectionTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>,
              ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_deleteMembers');
  late final _UA_BrokerConnectionTransportDataType_deleteMembers =
      _UA_BrokerConnectionTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_clear(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_clear');
  late final _UA_BrokerConnectionTransportDataType_clear =
      _UA_BrokerConnectionTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_delete(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_delete');
  late final _UA_BrokerConnectionTransportDataType_delete =
      _UA_BrokerConnectionTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerTransportQualityOfService_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_init(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_init');
  late final _UA_BrokerTransportQualityOfService_init =
      _UA_BrokerTransportQualityOfService_initPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrokerTransportQualityOfService_new() {
    return _UA_BrokerTransportQualityOfService_new();
  }

  late final _UA_BrokerTransportQualityOfService_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrokerTransportQualityOfService_new');
  late final _UA_BrokerTransportQualityOfService_new =
      _UA_BrokerTransportQualityOfService_newPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrokerTransportQualityOfService_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrokerTransportQualityOfService_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerTransportQualityOfService_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>(
      'UA_BrokerTransportQualityOfService_copy');
  late final _UA_BrokerTransportQualityOfService_copy =
      _UA_BrokerTransportQualityOfService_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_deleteMembers');
  late final _UA_BrokerTransportQualityOfService_deleteMembers =
      _UA_BrokerTransportQualityOfService_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_clear(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_clear');
  late final _UA_BrokerTransportQualityOfService_clear =
      _UA_BrokerTransportQualityOfService_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_delete(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_delete');
  late final _UA_BrokerTransportQualityOfService_delete =
      _UA_BrokerTransportQualityOfService_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerWriterGroupTransportDataType_init(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_init');
  late final _UA_BrokerWriterGroupTransportDataType_init =
      _UA_BrokerWriterGroupTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>
      UA_BrokerWriterGroupTransportDataType_new() {
    return _UA_BrokerWriterGroupTransportDataType_new();
  }

  late final _UA_BrokerWriterGroupTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType>
              Function()>>('UA_BrokerWriterGroupTransportDataType_new');
  late final _UA_BrokerWriterGroupTransportDataType_new =
      _UA_BrokerWriterGroupTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType> Function()>();

  int UA_BrokerWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> src,
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> dst,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_copy');
  late final _UA_BrokerWriterGroupTransportDataType_copy =
      _UA_BrokerWriterGroupTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
              ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_deleteMembers');
  late final _UA_BrokerWriterGroupTransportDataType_deleteMembers =
      _UA_BrokerWriterGroupTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_clear');
  late final _UA_BrokerWriterGroupTransportDataType_clear =
      _UA_BrokerWriterGroupTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_delete');
  late final _UA_BrokerWriterGroupTransportDataType_delete =
      _UA_BrokerWriterGroupTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_init');
  late final _UA_BrokerDataSetWriterTransportDataType_init =
      _UA_BrokerDataSetWriterTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>
      UA_BrokerDataSetWriterTransportDataType_new() {
    return _UA_BrokerDataSetWriterTransportDataType_new();
  }

  late final _UA_BrokerDataSetWriterTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>
              Function()>>('UA_BrokerDataSetWriterTransportDataType_new');
  late final _UA_BrokerDataSetWriterTransportDataType_new =
      _UA_BrokerDataSetWriterTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> Function()>();

  int UA_BrokerDataSetWriterTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_copy');
  late final _UA_BrokerDataSetWriterTransportDataType_copy =
      _UA_BrokerDataSetWriterTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
          'UA_BrokerDataSetWriterTransportDataType_deleteMembers');
  late final _UA_BrokerDataSetWriterTransportDataType_deleteMembers =
      _UA_BrokerDataSetWriterTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_clear');
  late final _UA_BrokerDataSetWriterTransportDataType_clear =
      _UA_BrokerDataSetWriterTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_delete');
  late final _UA_BrokerDataSetWriterTransportDataType_delete =
      _UA_BrokerDataSetWriterTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_init');
  late final _UA_BrokerDataSetReaderTransportDataType_init =
      _UA_BrokerDataSetReaderTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>
      UA_BrokerDataSetReaderTransportDataType_new() {
    return _UA_BrokerDataSetReaderTransportDataType_new();
  }

  late final _UA_BrokerDataSetReaderTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>
              Function()>>('UA_BrokerDataSetReaderTransportDataType_new');
  late final _UA_BrokerDataSetReaderTransportDataType_new =
      _UA_BrokerDataSetReaderTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> Function()>();

  int UA_BrokerDataSetReaderTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_copy');
  late final _UA_BrokerDataSetReaderTransportDataType_copy =
      _UA_BrokerDataSetReaderTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
          'UA_BrokerDataSetReaderTransportDataType_deleteMembers');
  late final _UA_BrokerDataSetReaderTransportDataType_deleteMembers =
      _UA_BrokerDataSetReaderTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_clear');
  late final _UA_BrokerDataSetReaderTransportDataType_clear =
      _UA_BrokerDataSetReaderTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_delete');
  late final _UA_BrokerDataSetReaderTransportDataType_delete =
      _UA_BrokerDataSetReaderTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_NodeClass_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_init(
      p,
    );
  }

  late final _UA_NodeClass_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_init');
  late final _UA_NodeClass_init =
      _UA_NodeClass_initPtr.asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_NodeClass_new() {
    return _UA_NodeClass_new();
  }

  late final _UA_NodeClass_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_NodeClass_new');
  late final _UA_NodeClass_new =
      _UA_NodeClass_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_NodeClass_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_NodeClass_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeClass_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_NodeClass_copy');
  late final _UA_NodeClass_copy = _UA_NodeClass_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_deleteMembers(
      p,
    );
  }

  late final _UA_NodeClass_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_deleteMembers');
  late final _UA_NodeClass_deleteMembers = _UA_NodeClass_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_clear(
      p,
    );
  }

  late final _UA_NodeClass_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_clear');
  late final _UA_NodeClass_clear = _UA_NodeClass_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_delete(
      p,
    );
  }

  late final _UA_NodeClass_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_delete');
  late final _UA_NodeClass_delete = _UA_NodeClass_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PermissionType_init(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_init(
      p,
    );
  }

  late final _UA_PermissionType_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_init');
  late final _UA_PermissionType_init = _UA_PermissionType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PermissionType>)>();

  ffi.Pointer<UA_PermissionType> UA_PermissionType_new() {
    return _UA_PermissionType_new();
  }

  late final _UA_PermissionType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PermissionType> Function()>>(
          'UA_PermissionType_new');
  late final _UA_PermissionType_new = _UA_PermissionType_newPtr.asFunction<
      ffi.Pointer<UA_PermissionType> Function()>();

  int UA_PermissionType_copy(
    ffi.Pointer<UA_PermissionType> src,
    ffi.Pointer<UA_PermissionType> dst,
  ) {
    return _UA_PermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_PermissionType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PermissionType>,
              ffi.Pointer<UA_PermissionType>)>>('UA_PermissionType_copy');
  late final _UA_PermissionType_copy = _UA_PermissionType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_deleteMembers(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_deleteMembers(
      p,
    );
  }

  late final _UA_PermissionType_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_deleteMembers');
  late final _UA_PermissionType_deleteMembers =
      _UA_PermissionType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_clear(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_clear(
      p,
    );
  }

  late final _UA_PermissionType_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_clear');
  late final _UA_PermissionType_clear = _UA_PermissionType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_delete(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_delete(
      p,
    );
  }

  late final _UA_PermissionType_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_delete');
  late final _UA_PermissionType_delete = _UA_PermissionType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_RolePermissionType_init(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_init(
      p,
    );
  }

  late final _UA_RolePermissionType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_init');
  late final _UA_RolePermissionType_init = _UA_RolePermissionType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  ffi.Pointer<UA_RolePermissionType> UA_RolePermissionType_new() {
    return _UA_RolePermissionType_new();
  }

  late final _UA_RolePermissionType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RolePermissionType> Function()>>(
      'UA_RolePermissionType_new');
  late final _UA_RolePermissionType_new = _UA_RolePermissionType_newPtr
      .asFunction<ffi.Pointer<UA_RolePermissionType> Function()>();

  int UA_RolePermissionType_copy(
    ffi.Pointer<UA_RolePermissionType> src,
    ffi.Pointer<UA_RolePermissionType> dst,
  ) {
    return _UA_RolePermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_RolePermissionType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RolePermissionType>,
                  ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_copy');
  late final _UA_RolePermissionType_copy =
      _UA_RolePermissionType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RolePermissionType>,
              ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_deleteMembers(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_deleteMembers(
      p,
    );
  }

  late final _UA_RolePermissionType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_deleteMembers');
  late final _UA_RolePermissionType_deleteMembers =
      _UA_RolePermissionType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_clear(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_clear(
      p,
    );
  }

  late final _UA_RolePermissionType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_clear');
  late final _UA_RolePermissionType_clear = _UA_RolePermissionType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_delete(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_delete(
      p,
    );
  }

  late final _UA_RolePermissionType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_delete');
  late final _UA_RolePermissionType_delete = _UA_RolePermissionType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_StructureType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_init(
      p,
    );
  }

  late final _UA_StructureType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_init');
  late final _UA_StructureType_init = _UA_StructureType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_StructureType_new() {
    return _UA_StructureType_new();
  }

  late final _UA_StructureType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_StructureType_new');
  late final _UA_StructureType_new =
      _UA_StructureType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_StructureType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_StructureType_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_StructureType_copy');
  late final _UA_StructureType_copy = _UA_StructureType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_deleteMembers(
      p,
    );
  }

  late final _UA_StructureType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_deleteMembers');
  late final _UA_StructureType_deleteMembers =
      _UA_StructureType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_clear(
      p,
    );
  }

  late final _UA_StructureType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_clear');
  late final _UA_StructureType_clear = _UA_StructureType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_delete(
      p,
    );
  }

  late final _UA_StructureType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_delete');
  late final _UA_StructureType_delete = _UA_StructureType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureField_init(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_init(
      p,
    );
  }

  late final _UA_StructureField_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_init');
  late final _UA_StructureField_init = _UA_StructureField_initPtr.asFunction<
      void Function(ffi.Pointer<UA_StructureField>)>();

  ffi.Pointer<UA_StructureField> UA_StructureField_new() {
    return _UA_StructureField_new();
  }

  late final _UA_StructureField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StructureField> Function()>>(
          'UA_StructureField_new');
  late final _UA_StructureField_new = _UA_StructureField_newPtr.asFunction<
      ffi.Pointer<UA_StructureField> Function()>();

  int UA_StructureField_copy(
    ffi.Pointer<UA_StructureField> src,
    ffi.Pointer<UA_StructureField> dst,
  ) {
    return _UA_StructureField_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureField_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StructureField>,
              ffi.Pointer<UA_StructureField>)>>('UA_StructureField_copy');
  late final _UA_StructureField_copy = _UA_StructureField_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_deleteMembers(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_deleteMembers(
      p,
    );
  }

  late final _UA_StructureField_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_deleteMembers');
  late final _UA_StructureField_deleteMembers =
      _UA_StructureField_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_clear(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_clear(
      p,
    );
  }

  late final _UA_StructureField_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_clear');
  late final _UA_StructureField_clear = _UA_StructureField_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_delete(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_delete(
      p,
    );
  }

  late final _UA_StructureField_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_delete');
  late final _UA_StructureField_delete = _UA_StructureField_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureDefinition_init(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_init(
      p,
    );
  }

  late final _UA_StructureDefinition_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_init');
  late final _UA_StructureDefinition_init = _UA_StructureDefinition_initPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  ffi.Pointer<UA_StructureDefinition> UA_StructureDefinition_new() {
    return _UA_StructureDefinition_new();
  }

  late final _UA_StructureDefinition_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_StructureDefinition> Function()>>(
      'UA_StructureDefinition_new');
  late final _UA_StructureDefinition_new = _UA_StructureDefinition_newPtr
      .asFunction<ffi.Pointer<UA_StructureDefinition> Function()>();

  int UA_StructureDefinition_copy(
    ffi.Pointer<UA_StructureDefinition> src,
    ffi.Pointer<UA_StructureDefinition> dst,
  ) {
    return _UA_StructureDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDefinition_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StructureDefinition>,
                  ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_copy');
  late final _UA_StructureDefinition_copy =
      _UA_StructureDefinition_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StructureDefinition>,
              ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_deleteMembers(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_deleteMembers(
      p,
    );
  }

  late final _UA_StructureDefinition_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_deleteMembers');
  late final _UA_StructureDefinition_deleteMembers =
      _UA_StructureDefinition_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_clear(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_clear(
      p,
    );
  }

  late final _UA_StructureDefinition_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_clear');
  late final _UA_StructureDefinition_clear = _UA_StructureDefinition_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_delete(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_delete(
      p,
    );
  }

  late final _UA_StructureDefinition_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_delete');
  late final _UA_StructureDefinition_delete = _UA_StructureDefinition_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_Argument_init(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_init(
      p,
    );
  }

  late final _UA_Argument_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_init');
  late final _UA_Argument_init = _UA_Argument_initPtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  ffi.Pointer<UA_Argument> UA_Argument_new() {
    return _UA_Argument_new();
  }

  late final _UA_Argument_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Argument> Function()>>(
          'UA_Argument_new');
  late final _UA_Argument_new =
      _UA_Argument_newPtr.asFunction<ffi.Pointer<UA_Argument> Function()>();

  int UA_Argument_copy(
    ffi.Pointer<UA_Argument> src,
    ffi.Pointer<UA_Argument> dst,
  ) {
    return _UA_Argument_copy(
      src,
      dst,
    );
  }

  late final _UA_Argument_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Argument>,
              ffi.Pointer<UA_Argument>)>>('UA_Argument_copy');
  late final _UA_Argument_copy = _UA_Argument_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>();

  void UA_Argument_deleteMembers(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_deleteMembers(
      p,
    );
  }

  late final _UA_Argument_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_deleteMembers');
  late final _UA_Argument_deleteMembers = _UA_Argument_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Argument>)>();

  void UA_Argument_clear(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_clear(
      p,
    );
  }

  late final _UA_Argument_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_clear');
  late final _UA_Argument_clear = _UA_Argument_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  void UA_Argument_delete(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_delete(
      p,
    );
  }

  late final _UA_Argument_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_delete');
  late final _UA_Argument_delete = _UA_Argument_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  void UA_EnumValueType_init(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_init(
      p,
    );
  }

  late final _UA_EnumValueType_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_init');
  late final _UA_EnumValueType_init = _UA_EnumValueType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  ffi.Pointer<UA_EnumValueType> UA_EnumValueType_new() {
    return _UA_EnumValueType_new();
  }

  late final _UA_EnumValueType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumValueType> Function()>>(
          'UA_EnumValueType_new');
  late final _UA_EnumValueType_new = _UA_EnumValueType_newPtr.asFunction<
      ffi.Pointer<UA_EnumValueType> Function()>();

  int UA_EnumValueType_copy(
    ffi.Pointer<UA_EnumValueType> src,
    ffi.Pointer<UA_EnumValueType> dst,
  ) {
    return _UA_EnumValueType_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumValueType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumValueType>,
              ffi.Pointer<UA_EnumValueType>)>>('UA_EnumValueType_copy');
  late final _UA_EnumValueType_copy = _UA_EnumValueType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_deleteMembers(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_deleteMembers(
      p,
    );
  }

  late final _UA_EnumValueType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_deleteMembers');
  late final _UA_EnumValueType_deleteMembers =
      _UA_EnumValueType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_clear(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_clear(
      p,
    );
  }

  late final _UA_EnumValueType_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_clear');
  late final _UA_EnumValueType_clear = _UA_EnumValueType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_delete(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_delete(
      p,
    );
  }

  late final _UA_EnumValueType_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_delete');
  late final _UA_EnumValueType_delete = _UA_EnumValueType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumField_init(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_init(
      p,
    );
  }

  late final _UA_EnumField_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_init');
  late final _UA_EnumField_init = _UA_EnumField_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  ffi.Pointer<UA_EnumField> UA_EnumField_new() {
    return _UA_EnumField_new();
  }

  late final _UA_EnumField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumField> Function()>>(
          'UA_EnumField_new');
  late final _UA_EnumField_new =
      _UA_EnumField_newPtr.asFunction<ffi.Pointer<UA_EnumField> Function()>();

  int UA_EnumField_copy(
    ffi.Pointer<UA_EnumField> src,
    ffi.Pointer<UA_EnumField> dst,
  ) {
    return _UA_EnumField_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumField_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumField>,
              ffi.Pointer<UA_EnumField>)>>('UA_EnumField_copy');
  late final _UA_EnumField_copy = _UA_EnumField_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_deleteMembers(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_deleteMembers(
      p,
    );
  }

  late final _UA_EnumField_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_deleteMembers');
  late final _UA_EnumField_deleteMembers = _UA_EnumField_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_clear(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_clear(
      p,
    );
  }

  late final _UA_EnumField_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_clear');
  late final _UA_EnumField_clear = _UA_EnumField_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_delete(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_delete(
      p,
    );
  }

  late final _UA_EnumField_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_delete');
  late final _UA_EnumField_delete = _UA_EnumField_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_Duration_init(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_init(
      p,
    );
  }

  late final _UA_Duration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_init');
  late final _UA_Duration_init = _UA_Duration_initPtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  ffi.Pointer<UA_Duration> UA_Duration_new() {
    return _UA_Duration_new();
  }

  late final _UA_Duration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Duration> Function()>>(
          'UA_Duration_new');
  late final _UA_Duration_new =
      _UA_Duration_newPtr.asFunction<ffi.Pointer<UA_Duration> Function()>();

  int UA_Duration_copy(
    ffi.Pointer<UA_Duration> src,
    ffi.Pointer<UA_Duration> dst,
  ) {
    return _UA_Duration_copy(
      src,
      dst,
    );
  }

  late final _UA_Duration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Duration>,
              ffi.Pointer<UA_Duration>)>>('UA_Duration_copy');
  late final _UA_Duration_copy = _UA_Duration_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>();

  void UA_Duration_deleteMembers(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_deleteMembers(
      p,
    );
  }

  late final _UA_Duration_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_deleteMembers');
  late final _UA_Duration_deleteMembers = _UA_Duration_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Duration>)>();

  void UA_Duration_clear(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_clear(
      p,
    );
  }

  late final _UA_Duration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_clear');
  late final _UA_Duration_clear = _UA_Duration_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  void UA_Duration_delete(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_delete(
      p,
    );
  }

  late final _UA_Duration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_delete');
  late final _UA_Duration_delete = _UA_Duration_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  void UA_UtcTime_init(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_init(
      p,
    );
  }

  late final _UA_UtcTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_init');
  late final _UA_UtcTime_init =
      _UA_UtcTime_initPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  ffi.Pointer<UA_UtcTime> UA_UtcTime_new() {
    return _UA_UtcTime_new();
  }

  late final _UA_UtcTime_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UtcTime> Function()>>(
          'UA_UtcTime_new');
  late final _UA_UtcTime_new =
      _UA_UtcTime_newPtr.asFunction<ffi.Pointer<UA_UtcTime> Function()>();

  int UA_UtcTime_copy(
    ffi.Pointer<UA_UtcTime> src,
    ffi.Pointer<UA_UtcTime> dst,
  ) {
    return _UA_UtcTime_copy(
      src,
      dst,
    );
  }

  late final _UA_UtcTime_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UtcTime>,
              ffi.Pointer<UA_UtcTime>)>>('UA_UtcTime_copy');
  late final _UA_UtcTime_copy = _UA_UtcTime_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_deleteMembers(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_deleteMembers(
      p,
    );
  }

  late final _UA_UtcTime_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_deleteMembers');
  late final _UA_UtcTime_deleteMembers = _UA_UtcTime_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_clear(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_clear(
      p,
    );
  }

  late final _UA_UtcTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_clear');
  late final _UA_UtcTime_clear =
      _UA_UtcTime_clearPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_delete(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_delete(
      p,
    );
  }

  late final _UA_UtcTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_delete');
  late final _UA_UtcTime_delete = _UA_UtcTime_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_LocaleId_init(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_init(
      p,
    );
  }

  late final _UA_LocaleId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_init');
  late final _UA_LocaleId_init = _UA_LocaleId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  ffi.Pointer<UA_LocaleId> UA_LocaleId_new() {
    return _UA_LocaleId_new();
  }

  late final _UA_LocaleId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocaleId> Function()>>(
          'UA_LocaleId_new');
  late final _UA_LocaleId_new =
      _UA_LocaleId_newPtr.asFunction<ffi.Pointer<UA_LocaleId> Function()>();

  int UA_LocaleId_copy(
    ffi.Pointer<UA_LocaleId> src,
    ffi.Pointer<UA_LocaleId> dst,
  ) {
    return _UA_LocaleId_copy(
      src,
      dst,
    );
  }

  late final _UA_LocaleId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LocaleId>,
              ffi.Pointer<UA_LocaleId>)>>('UA_LocaleId_copy');
  late final _UA_LocaleId_copy = _UA_LocaleId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_deleteMembers(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_deleteMembers(
      p,
    );
  }

  late final _UA_LocaleId_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_deleteMembers');
  late final _UA_LocaleId_deleteMembers = _UA_LocaleId_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_clear(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_clear(
      p,
    );
  }

  late final _UA_LocaleId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_clear');
  late final _UA_LocaleId_clear = _UA_LocaleId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_delete(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_delete(
      p,
    );
  }

  late final _UA_LocaleId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_delete');
  late final _UA_LocaleId_delete = _UA_LocaleId_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_TimeZoneDataType_init(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_init(
      p,
    );
  }

  late final _UA_TimeZoneDataType_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_init');
  late final _UA_TimeZoneDataType_init = _UA_TimeZoneDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  ffi.Pointer<UA_TimeZoneDataType> UA_TimeZoneDataType_new() {
    return _UA_TimeZoneDataType_new();
  }

  late final _UA_TimeZoneDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TimeZoneDataType> Function()>>(
          'UA_TimeZoneDataType_new');
  late final _UA_TimeZoneDataType_new = _UA_TimeZoneDataType_newPtr.asFunction<
      ffi.Pointer<UA_TimeZoneDataType> Function()>();

  int UA_TimeZoneDataType_copy(
    ffi.Pointer<UA_TimeZoneDataType> src,
    ffi.Pointer<UA_TimeZoneDataType> dst,
  ) {
    return _UA_TimeZoneDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TimeZoneDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TimeZoneDataType>,
              ffi.Pointer<UA_TimeZoneDataType>)>>('UA_TimeZoneDataType_copy');
  late final _UA_TimeZoneDataType_copy =
      _UA_TimeZoneDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TimeZoneDataType>,
              ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_deleteMembers(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_deleteMembers(
      p,
    );
  }

  late final _UA_TimeZoneDataType_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_deleteMembers');
  late final _UA_TimeZoneDataType_deleteMembers =
      _UA_TimeZoneDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_clear(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_clear(
      p,
    );
  }

  late final _UA_TimeZoneDataType_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_clear');
  late final _UA_TimeZoneDataType_clear = _UA_TimeZoneDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_delete(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_delete(
      p,
    );
  }

  late final _UA_TimeZoneDataType_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_delete');
  late final _UA_TimeZoneDataType_delete = _UA_TimeZoneDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_ApplicationType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_init(
      p,
    );
  }

  late final _UA_ApplicationType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_init');
  late final _UA_ApplicationType_init = _UA_ApplicationType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_ApplicationType_new() {
    return _UA_ApplicationType_new();
  }

  late final _UA_ApplicationType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_ApplicationType_new');
  late final _UA_ApplicationType_new = _UA_ApplicationType_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_ApplicationType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_ApplicationType_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_ApplicationType_copy');
  late final _UA_ApplicationType_copy = _UA_ApplicationType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_deleteMembers(
      p,
    );
  }

  late final _UA_ApplicationType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_deleteMembers');
  late final _UA_ApplicationType_deleteMembers =
      _UA_ApplicationType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_clear(
      p,
    );
  }

  late final _UA_ApplicationType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_clear');
  late final _UA_ApplicationType_clear = _UA_ApplicationType_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_delete(
      p,
    );
  }

  late final _UA_ApplicationType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_delete');
  late final _UA_ApplicationType_delete = _UA_ApplicationType_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationDescription_init(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_init(
      p,
    );
  }

  late final _UA_ApplicationDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_init');
  late final _UA_ApplicationDescription_init =
      _UA_ApplicationDescription_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  ffi.Pointer<UA_ApplicationDescription> UA_ApplicationDescription_new() {
    return _UA_ApplicationDescription_new();
  }

  late final _UA_ApplicationDescription_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ApplicationDescription> Function()>>(
      'UA_ApplicationDescription_new');
  late final _UA_ApplicationDescription_new = _UA_ApplicationDescription_newPtr
      .asFunction<ffi.Pointer<UA_ApplicationDescription> Function()>();

  int UA_ApplicationDescription_copy(
    ffi.Pointer<UA_ApplicationDescription> src,
    ffi.Pointer<UA_ApplicationDescription> dst,
  ) {
    return _UA_ApplicationDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ApplicationDescription>,
                  ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_copy');
  late final _UA_ApplicationDescription_copy =
      _UA_ApplicationDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ApplicationDescription>,
              ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_deleteMembers(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ApplicationDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_deleteMembers');
  late final _UA_ApplicationDescription_deleteMembers =
      _UA_ApplicationDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_clear(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_clear(
      p,
    );
  }

  late final _UA_ApplicationDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_clear');
  late final _UA_ApplicationDescription_clear =
      _UA_ApplicationDescription_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_delete(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_delete(
      p,
    );
  }

  late final _UA_ApplicationDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_delete');
  late final _UA_ApplicationDescription_delete =
      _UA_ApplicationDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_RequestHeader_init(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_init(
      p,
    );
  }

  late final _UA_RequestHeader_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_init');
  late final _UA_RequestHeader_init = _UA_RequestHeader_initPtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  ffi.Pointer<UA_RequestHeader> UA_RequestHeader_new() {
    return _UA_RequestHeader_new();
  }

  late final _UA_RequestHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RequestHeader> Function()>>(
          'UA_RequestHeader_new');
  late final _UA_RequestHeader_new = _UA_RequestHeader_newPtr.asFunction<
      ffi.Pointer<UA_RequestHeader> Function()>();

  int UA_RequestHeader_copy(
    ffi.Pointer<UA_RequestHeader> src,
    ffi.Pointer<UA_RequestHeader> dst,
  ) {
    return _UA_RequestHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_RequestHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RequestHeader>,
              ffi.Pointer<UA_RequestHeader>)>>('UA_RequestHeader_copy');
  late final _UA_RequestHeader_copy = _UA_RequestHeader_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_deleteMembers(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_deleteMembers(
      p,
    );
  }

  late final _UA_RequestHeader_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_deleteMembers');
  late final _UA_RequestHeader_deleteMembers =
      _UA_RequestHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_clear(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_clear(
      p,
    );
  }

  late final _UA_RequestHeader_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_clear');
  late final _UA_RequestHeader_clear = _UA_RequestHeader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_delete(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_delete(
      p,
    );
  }

  late final _UA_RequestHeader_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_delete');
  late final _UA_RequestHeader_delete = _UA_RequestHeader_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_ResponseHeader_init(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_init(
      p,
    );
  }

  late final _UA_ResponseHeader_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_init');
  late final _UA_ResponseHeader_init = _UA_ResponseHeader_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ResponseHeader>)>();

  ffi.Pointer<UA_ResponseHeader> UA_ResponseHeader_new() {
    return _UA_ResponseHeader_new();
  }

  late final _UA_ResponseHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ResponseHeader> Function()>>(
          'UA_ResponseHeader_new');
  late final _UA_ResponseHeader_new = _UA_ResponseHeader_newPtr.asFunction<
      ffi.Pointer<UA_ResponseHeader> Function()>();

  int UA_ResponseHeader_copy(
    ffi.Pointer<UA_ResponseHeader> src,
    ffi.Pointer<UA_ResponseHeader> dst,
  ) {
    return _UA_ResponseHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_ResponseHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ResponseHeader>,
              ffi.Pointer<UA_ResponseHeader>)>>('UA_ResponseHeader_copy');
  late final _UA_ResponseHeader_copy = _UA_ResponseHeader_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_deleteMembers(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_deleteMembers(
      p,
    );
  }

  late final _UA_ResponseHeader_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_deleteMembers');
  late final _UA_ResponseHeader_deleteMembers =
      _UA_ResponseHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_clear(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_clear(
      p,
    );
  }

  late final _UA_ResponseHeader_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_clear');
  late final _UA_ResponseHeader_clear = _UA_ResponseHeader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_delete(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_delete(
      p,
    );
  }

  late final _UA_ResponseHeader_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_delete');
  late final _UA_ResponseHeader_delete = _UA_ResponseHeader_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ServiceFault_init(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_init(
      p,
    );
  }

  late final _UA_ServiceFault_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_init');
  late final _UA_ServiceFault_init = _UA_ServiceFault_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  ffi.Pointer<UA_ServiceFault> UA_ServiceFault_new() {
    return _UA_ServiceFault_new();
  }

  late final _UA_ServiceFault_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServiceFault> Function()>>(
          'UA_ServiceFault_new');
  late final _UA_ServiceFault_new = _UA_ServiceFault_newPtr.asFunction<
      ffi.Pointer<UA_ServiceFault> Function()>();

  int UA_ServiceFault_copy(
    ffi.Pointer<UA_ServiceFault> src,
    ffi.Pointer<UA_ServiceFault> dst,
  ) {
    return _UA_ServiceFault_copy(
      src,
      dst,
    );
  }

  late final _UA_ServiceFault_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServiceFault>,
              ffi.Pointer<UA_ServiceFault>)>>('UA_ServiceFault_copy');
  late final _UA_ServiceFault_copy = _UA_ServiceFault_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_deleteMembers(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_deleteMembers(
      p,
    );
  }

  late final _UA_ServiceFault_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_deleteMembers');
  late final _UA_ServiceFault_deleteMembers = _UA_ServiceFault_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_clear(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_clear(
      p,
    );
  }

  late final _UA_ServiceFault_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_clear');
  late final _UA_ServiceFault_clear = _UA_ServiceFault_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_delete(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_delete(
      p,
    );
  }

  late final _UA_ServiceFault_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_delete');
  late final _UA_ServiceFault_delete = _UA_ServiceFault_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_FindServersRequest_init(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_init(
      p,
    );
  }

  late final _UA_FindServersRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_init');
  late final _UA_FindServersRequest_init = _UA_FindServersRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  ffi.Pointer<UA_FindServersRequest> UA_FindServersRequest_new() {
    return _UA_FindServersRequest_new();
  }

  late final _UA_FindServersRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FindServersRequest> Function()>>(
      'UA_FindServersRequest_new');
  late final _UA_FindServersRequest_new = _UA_FindServersRequest_newPtr
      .asFunction<ffi.Pointer<UA_FindServersRequest> Function()>();

  int UA_FindServersRequest_copy(
    ffi.Pointer<UA_FindServersRequest> src,
    ffi.Pointer<UA_FindServersRequest> dst,
  ) {
    return _UA_FindServersRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FindServersRequest>,
                  ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_copy');
  late final _UA_FindServersRequest_copy =
      _UA_FindServersRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FindServersRequest>,
              ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_deleteMembers(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_deleteMembers(
      p,
    );
  }

  late final _UA_FindServersRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_deleteMembers');
  late final _UA_FindServersRequest_deleteMembers =
      _UA_FindServersRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_clear(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_clear(
      p,
    );
  }

  late final _UA_FindServersRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_clear');
  late final _UA_FindServersRequest_clear = _UA_FindServersRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_delete(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_delete(
      p,
    );
  }

  late final _UA_FindServersRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_delete');
  late final _UA_FindServersRequest_delete = _UA_FindServersRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersResponse_init(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_init(
      p,
    );
  }

  late final _UA_FindServersResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_init');
  late final _UA_FindServersResponse_init = _UA_FindServersResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  ffi.Pointer<UA_FindServersResponse> UA_FindServersResponse_new() {
    return _UA_FindServersResponse_new();
  }

  late final _UA_FindServersResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FindServersResponse> Function()>>(
      'UA_FindServersResponse_new');
  late final _UA_FindServersResponse_new = _UA_FindServersResponse_newPtr
      .asFunction<ffi.Pointer<UA_FindServersResponse> Function()>();

  int UA_FindServersResponse_copy(
    ffi.Pointer<UA_FindServersResponse> src,
    ffi.Pointer<UA_FindServersResponse> dst,
  ) {
    return _UA_FindServersResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FindServersResponse>,
                  ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_copy');
  late final _UA_FindServersResponse_copy =
      _UA_FindServersResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FindServersResponse>,
              ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_deleteMembers(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_deleteMembers(
      p,
    );
  }

  late final _UA_FindServersResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_deleteMembers');
  late final _UA_FindServersResponse_deleteMembers =
      _UA_FindServersResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_clear(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_clear(
      p,
    );
  }

  late final _UA_FindServersResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_clear');
  late final _UA_FindServersResponse_clear = _UA_FindServersResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_delete(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_delete(
      p,
    );
  }

  late final _UA_FindServersResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_delete');
  late final _UA_FindServersResponse_delete = _UA_FindServersResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_MessageSecurityMode_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_init(
      p,
    );
  }

  late final _UA_MessageSecurityMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_init');
  late final _UA_MessageSecurityMode_init = _UA_MessageSecurityMode_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_MessageSecurityMode_new() {
    return _UA_MessageSecurityMode_new();
  }

  late final _UA_MessageSecurityMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_MessageSecurityMode_new');
  late final _UA_MessageSecurityMode_new = _UA_MessageSecurityMode_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_MessageSecurityMode_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_MessageSecurityMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MessageSecurityMode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_MessageSecurityMode_copy');
  late final _UA_MessageSecurityMode_copy =
      _UA_MessageSecurityMode_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_deleteMembers(
      p,
    );
  }

  late final _UA_MessageSecurityMode_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_deleteMembers');
  late final _UA_MessageSecurityMode_deleteMembers =
      _UA_MessageSecurityMode_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_clear(
      p,
    );
  }

  late final _UA_MessageSecurityMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_clear');
  late final _UA_MessageSecurityMode_clear = _UA_MessageSecurityMode_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_delete(
      p,
    );
  }

  late final _UA_MessageSecurityMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_delete');
  late final _UA_MessageSecurityMode_delete = _UA_MessageSecurityMode_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_init(
      p,
    );
  }

  late final _UA_UserTokenType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_init');
  late final _UA_UserTokenType_init = _UA_UserTokenType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_UserTokenType_new() {
    return _UA_UserTokenType_new();
  }

  late final _UA_UserTokenType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_UserTokenType_new');
  late final _UA_UserTokenType_new =
      _UA_UserTokenType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_UserTokenType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_UserTokenType_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_UserTokenType_copy');
  late final _UA_UserTokenType_copy = _UA_UserTokenType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_deleteMembers(
      p,
    );
  }

  late final _UA_UserTokenType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_deleteMembers');
  late final _UA_UserTokenType_deleteMembers =
      _UA_UserTokenType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_clear(
      p,
    );
  }

  late final _UA_UserTokenType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_clear');
  late final _UA_UserTokenType_clear = _UA_UserTokenType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_delete(
      p,
    );
  }

  late final _UA_UserTokenType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_delete');
  late final _UA_UserTokenType_delete = _UA_UserTokenType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenPolicy_init(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_init(
      p,
    );
  }

  late final _UA_UserTokenPolicy_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_init');
  late final _UA_UserTokenPolicy_init = _UA_UserTokenPolicy_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  ffi.Pointer<UA_UserTokenPolicy> UA_UserTokenPolicy_new() {
    return _UA_UserTokenPolicy_new();
  }

  late final _UA_UserTokenPolicy_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserTokenPolicy> Function()>>(
          'UA_UserTokenPolicy_new');
  late final _UA_UserTokenPolicy_new = _UA_UserTokenPolicy_newPtr.asFunction<
      ffi.Pointer<UA_UserTokenPolicy> Function()>();

  int UA_UserTokenPolicy_copy(
    ffi.Pointer<UA_UserTokenPolicy> src,
    ffi.Pointer<UA_UserTokenPolicy> dst,
  ) {
    return _UA_UserTokenPolicy_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenPolicy_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserTokenPolicy>,
              ffi.Pointer<UA_UserTokenPolicy>)>>('UA_UserTokenPolicy_copy');
  late final _UA_UserTokenPolicy_copy = _UA_UserTokenPolicy_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_deleteMembers(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_deleteMembers(
      p,
    );
  }

  late final _UA_UserTokenPolicy_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_deleteMembers');
  late final _UA_UserTokenPolicy_deleteMembers =
      _UA_UserTokenPolicy_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_clear(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_clear(
      p,
    );
  }

  late final _UA_UserTokenPolicy_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_clear');
  late final _UA_UserTokenPolicy_clear = _UA_UserTokenPolicy_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_delete(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_delete(
      p,
    );
  }

  late final _UA_UserTokenPolicy_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_delete');
  late final _UA_UserTokenPolicy_delete = _UA_UserTokenPolicy_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_EndpointDescription_init(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_init(
      p,
    );
  }

  late final _UA_EndpointDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_init');
  late final _UA_EndpointDescription_init = _UA_EndpointDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  ffi.Pointer<UA_EndpointDescription> UA_EndpointDescription_new() {
    return _UA_EndpointDescription_new();
  }

  late final _UA_EndpointDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_EndpointDescription> Function()>>(
      'UA_EndpointDescription_new');
  late final _UA_EndpointDescription_new = _UA_EndpointDescription_newPtr
      .asFunction<ffi.Pointer<UA_EndpointDescription> Function()>();

  int UA_EndpointDescription_copy(
    ffi.Pointer<UA_EndpointDescription> src,
    ffi.Pointer<UA_EndpointDescription> dst,
  ) {
    return _UA_EndpointDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_EndpointDescription>,
                  ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_copy');
  late final _UA_EndpointDescription_copy =
      _UA_EndpointDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EndpointDescription>,
              ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_deleteMembers(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_deleteMembers(
      p,
    );
  }

  late final _UA_EndpointDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_deleteMembers');
  late final _UA_EndpointDescription_deleteMembers =
      _UA_EndpointDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_clear(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_clear(
      p,
    );
  }

  late final _UA_EndpointDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_clear');
  late final _UA_EndpointDescription_clear = _UA_EndpointDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_delete(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_delete(
      p,
    );
  }

  late final _UA_EndpointDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_delete');
  late final _UA_EndpointDescription_delete = _UA_EndpointDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_GetEndpointsRequest_init(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_init(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_init');
  late final _UA_GetEndpointsRequest_init = _UA_GetEndpointsRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  ffi.Pointer<UA_GetEndpointsRequest> UA_GetEndpointsRequest_new() {
    return _UA_GetEndpointsRequest_new();
  }

  late final _UA_GetEndpointsRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>>(
      'UA_GetEndpointsRequest_new');
  late final _UA_GetEndpointsRequest_new = _UA_GetEndpointsRequest_newPtr
      .asFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>();

  int UA_GetEndpointsRequest_copy(
    ffi.Pointer<UA_GetEndpointsRequest> src,
    ffi.Pointer<UA_GetEndpointsRequest> dst,
  ) {
    return _UA_GetEndpointsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsRequest>,
                  ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_copy');
  late final _UA_GetEndpointsRequest_copy =
      _UA_GetEndpointsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_GetEndpointsRequest>,
              ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_deleteMembers(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_deleteMembers');
  late final _UA_GetEndpointsRequest_deleteMembers =
      _UA_GetEndpointsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_clear(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_clear(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_clear');
  late final _UA_GetEndpointsRequest_clear = _UA_GetEndpointsRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_delete(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_delete(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_delete');
  late final _UA_GetEndpointsRequest_delete = _UA_GetEndpointsRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsResponse_init(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_init(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_init');
  late final _UA_GetEndpointsResponse_init = _UA_GetEndpointsResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  ffi.Pointer<UA_GetEndpointsResponse> UA_GetEndpointsResponse_new() {
    return _UA_GetEndpointsResponse_new();
  }

  late final _UA_GetEndpointsResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>>(
      'UA_GetEndpointsResponse_new');
  late final _UA_GetEndpointsResponse_new = _UA_GetEndpointsResponse_newPtr
      .asFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>();

  int UA_GetEndpointsResponse_copy(
    ffi.Pointer<UA_GetEndpointsResponse> src,
    ffi.Pointer<UA_GetEndpointsResponse> dst,
  ) {
    return _UA_GetEndpointsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsResponse>,
                  ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_copy');
  late final _UA_GetEndpointsResponse_copy =
      _UA_GetEndpointsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_GetEndpointsResponse>,
              ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_deleteMembers(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_deleteMembers');
  late final _UA_GetEndpointsResponse_deleteMembers =
      _UA_GetEndpointsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_clear(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_clear(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_clear');
  late final _UA_GetEndpointsResponse_clear = _UA_GetEndpointsResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_delete(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_delete(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_delete');
  late final _UA_GetEndpointsResponse_delete =
      _UA_GetEndpointsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_SecurityTokenRequestType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_init(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_init');
  late final _UA_SecurityTokenRequestType_init =
      _UA_SecurityTokenRequestType_initPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_SecurityTokenRequestType_new() {
    return _UA_SecurityTokenRequestType_new();
  }

  late final _UA_SecurityTokenRequestType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_SecurityTokenRequestType_new');
  late final _UA_SecurityTokenRequestType_new =
      _UA_SecurityTokenRequestType_newPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function()>();

  int UA_SecurityTokenRequestType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_SecurityTokenRequestType_copy(
      src,
      dst,
    );
  }

  late final _UA_SecurityTokenRequestType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_SecurityTokenRequestType_copy');
  late final _UA_SecurityTokenRequestType_copy =
      _UA_SecurityTokenRequestType_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_deleteMembers(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_deleteMembers');
  late final _UA_SecurityTokenRequestType_deleteMembers =
      _UA_SecurityTokenRequestType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_clear(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_clear');
  late final _UA_SecurityTokenRequestType_clear =
      _UA_SecurityTokenRequestType_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_delete(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_delete');
  late final _UA_SecurityTokenRequestType_delete =
      _UA_SecurityTokenRequestType_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ChannelSecurityToken_init(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_init(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_init');
  late final _UA_ChannelSecurityToken_init = _UA_ChannelSecurityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  ffi.Pointer<UA_ChannelSecurityToken> UA_ChannelSecurityToken_new() {
    return _UA_ChannelSecurityToken_new();
  }

  late final _UA_ChannelSecurityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>>(
      'UA_ChannelSecurityToken_new');
  late final _UA_ChannelSecurityToken_new = _UA_ChannelSecurityToken_newPtr
      .asFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>();

  int UA_ChannelSecurityToken_copy(
    ffi.Pointer<UA_ChannelSecurityToken> src,
    ffi.Pointer<UA_ChannelSecurityToken> dst,
  ) {
    return _UA_ChannelSecurityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_ChannelSecurityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ChannelSecurityToken>,
                  ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_copy');
  late final _UA_ChannelSecurityToken_copy =
      _UA_ChannelSecurityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ChannelSecurityToken>,
              ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_deleteMembers(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_deleteMembers(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_deleteMembers');
  late final _UA_ChannelSecurityToken_deleteMembers =
      _UA_ChannelSecurityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_clear(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_clear(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_clear');
  late final _UA_ChannelSecurityToken_clear = _UA_ChannelSecurityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_delete(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_delete(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_delete');
  late final _UA_ChannelSecurityToken_delete =
      _UA_ChannelSecurityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_OpenSecureChannelRequest_init(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_init');
  late final _UA_OpenSecureChannelRequest_init =
      _UA_OpenSecureChannelRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  ffi.Pointer<UA_OpenSecureChannelRequest> UA_OpenSecureChannelRequest_new() {
    return _UA_OpenSecureChannelRequest_new();
  }

  late final _UA_OpenSecureChannelRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_OpenSecureChannelRequest> Function()>>(
      'UA_OpenSecureChannelRequest_new');
  late final _UA_OpenSecureChannelRequest_new =
      _UA_OpenSecureChannelRequest_newPtr.asFunction<
          ffi.Pointer<UA_OpenSecureChannelRequest> Function()>();

  int UA_OpenSecureChannelRequest_copy(
    ffi.Pointer<UA_OpenSecureChannelRequest> src,
    ffi.Pointer<UA_OpenSecureChannelRequest> dst,
  ) {
    return _UA_OpenSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
                  ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_copy');
  late final _UA_OpenSecureChannelRequest_copy =
      _UA_OpenSecureChannelRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_deleteMembers(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_deleteMembers(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_deleteMembers');
  late final _UA_OpenSecureChannelRequest_deleteMembers =
      _UA_OpenSecureChannelRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_clear(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_clear');
  late final _UA_OpenSecureChannelRequest_clear =
      _UA_OpenSecureChannelRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_delete(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_delete');
  late final _UA_OpenSecureChannelRequest_delete =
      _UA_OpenSecureChannelRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelResponse_init(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_init');
  late final _UA_OpenSecureChannelResponse_init =
      _UA_OpenSecureChannelResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  ffi.Pointer<UA_OpenSecureChannelResponse> UA_OpenSecureChannelResponse_new() {
    return _UA_OpenSecureChannelResponse_new();
  }

  late final _UA_OpenSecureChannelResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_OpenSecureChannelResponse>
              Function()>>('UA_OpenSecureChannelResponse_new');
  late final _UA_OpenSecureChannelResponse_new =
      _UA_OpenSecureChannelResponse_newPtr.asFunction<
          ffi.Pointer<UA_OpenSecureChannelResponse> Function()>();

  int UA_OpenSecureChannelResponse_copy(
    ffi.Pointer<UA_OpenSecureChannelResponse> src,
    ffi.Pointer<UA_OpenSecureChannelResponse> dst,
  ) {
    return _UA_OpenSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
                  ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_copy');
  late final _UA_OpenSecureChannelResponse_copy =
      _UA_OpenSecureChannelResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_deleteMembers(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_deleteMembers(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_deleteMembers');
  late final _UA_OpenSecureChannelResponse_deleteMembers =
      _UA_OpenSecureChannelResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_clear(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_clear');
  late final _UA_OpenSecureChannelResponse_clear =
      _UA_OpenSecureChannelResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_delete(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_delete');
  late final _UA_OpenSecureChannelResponse_delete =
      _UA_OpenSecureChannelResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_CloseSecureChannelRequest_init(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_init');
  late final _UA_CloseSecureChannelRequest_init =
      _UA_CloseSecureChannelRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  ffi.Pointer<UA_CloseSecureChannelRequest> UA_CloseSecureChannelRequest_new() {
    return _UA_CloseSecureChannelRequest_new();
  }

  late final _UA_CloseSecureChannelRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CloseSecureChannelRequest>
              Function()>>('UA_CloseSecureChannelRequest_new');
  late final _UA_CloseSecureChannelRequest_new =
      _UA_CloseSecureChannelRequest_newPtr.asFunction<
          ffi.Pointer<UA_CloseSecureChannelRequest> Function()>();

  int UA_CloseSecureChannelRequest_copy(
    ffi.Pointer<UA_CloseSecureChannelRequest> src,
    ffi.Pointer<UA_CloseSecureChannelRequest> dst,
  ) {
    return _UA_CloseSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
                  ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_copy');
  late final _UA_CloseSecureChannelRequest_copy =
      _UA_CloseSecureChannelRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
              ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_deleteMembers(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_deleteMembers');
  late final _UA_CloseSecureChannelRequest_deleteMembers =
      _UA_CloseSecureChannelRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_clear(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_clear');
  late final _UA_CloseSecureChannelRequest_clear =
      _UA_CloseSecureChannelRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_delete(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_delete');
  late final _UA_CloseSecureChannelRequest_delete =
      _UA_CloseSecureChannelRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelResponse_init(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_init');
  late final _UA_CloseSecureChannelResponse_init =
      _UA_CloseSecureChannelResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  ffi.Pointer<UA_CloseSecureChannelResponse>
      UA_CloseSecureChannelResponse_new() {
    return _UA_CloseSecureChannelResponse_new();
  }

  late final _UA_CloseSecureChannelResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CloseSecureChannelResponse>
              Function()>>('UA_CloseSecureChannelResponse_new');
  late final _UA_CloseSecureChannelResponse_new =
      _UA_CloseSecureChannelResponse_newPtr.asFunction<
          ffi.Pointer<UA_CloseSecureChannelResponse> Function()>();

  int UA_CloseSecureChannelResponse_copy(
    ffi.Pointer<UA_CloseSecureChannelResponse> src,
    ffi.Pointer<UA_CloseSecureChannelResponse> dst,
  ) {
    return _UA_CloseSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
                  ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_copy');
  late final _UA_CloseSecureChannelResponse_copy =
      _UA_CloseSecureChannelResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
              ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_deleteMembers(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_deleteMembers');
  late final _UA_CloseSecureChannelResponse_deleteMembers =
      _UA_CloseSecureChannelResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_clear(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_clear');
  late final _UA_CloseSecureChannelResponse_clear =
      _UA_CloseSecureChannelResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_delete(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_delete');
  late final _UA_CloseSecureChannelResponse_delete =
      _UA_CloseSecureChannelResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_SignedSoftwareCertificate_init(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_init(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_init');
  late final _UA_SignedSoftwareCertificate_init =
      _UA_SignedSoftwareCertificate_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  ffi.Pointer<UA_SignedSoftwareCertificate> UA_SignedSoftwareCertificate_new() {
    return _UA_SignedSoftwareCertificate_new();
  }

  late final _UA_SignedSoftwareCertificate_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SignedSoftwareCertificate>
              Function()>>('UA_SignedSoftwareCertificate_new');
  late final _UA_SignedSoftwareCertificate_new =
      _UA_SignedSoftwareCertificate_newPtr.asFunction<
          ffi.Pointer<UA_SignedSoftwareCertificate> Function()>();

  int UA_SignedSoftwareCertificate_copy(
    ffi.Pointer<UA_SignedSoftwareCertificate> src,
    ffi.Pointer<UA_SignedSoftwareCertificate> dst,
  ) {
    return _UA_SignedSoftwareCertificate_copy(
      src,
      dst,
    );
  }

  late final _UA_SignedSoftwareCertificate_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
                  ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_copy');
  late final _UA_SignedSoftwareCertificate_copy =
      _UA_SignedSoftwareCertificate_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
              ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_deleteMembers(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_deleteMembers(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_deleteMembers');
  late final _UA_SignedSoftwareCertificate_deleteMembers =
      _UA_SignedSoftwareCertificate_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_clear(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_clear(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_clear');
  late final _UA_SignedSoftwareCertificate_clear =
      _UA_SignedSoftwareCertificate_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_delete(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_delete(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_delete');
  late final _UA_SignedSoftwareCertificate_delete =
      _UA_SignedSoftwareCertificate_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignatureData_init(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_init(
      p,
    );
  }

  late final _UA_SignatureData_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_init');
  late final _UA_SignatureData_init = _UA_SignatureData_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  ffi.Pointer<UA_SignatureData> UA_SignatureData_new() {
    return _UA_SignatureData_new();
  }

  late final _UA_SignatureData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SignatureData> Function()>>(
          'UA_SignatureData_new');
  late final _UA_SignatureData_new = _UA_SignatureData_newPtr.asFunction<
      ffi.Pointer<UA_SignatureData> Function()>();

  int UA_SignatureData_copy(
    ffi.Pointer<UA_SignatureData> src,
    ffi.Pointer<UA_SignatureData> dst,
  ) {
    return _UA_SignatureData_copy(
      src,
      dst,
    );
  }

  late final _UA_SignatureData_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SignatureData>,
              ffi.Pointer<UA_SignatureData>)>>('UA_SignatureData_copy');
  late final _UA_SignatureData_copy = _UA_SignatureData_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_deleteMembers(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_deleteMembers(
      p,
    );
  }

  late final _UA_SignatureData_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_deleteMembers');
  late final _UA_SignatureData_deleteMembers =
      _UA_SignatureData_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_clear(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_clear(
      p,
    );
  }

  late final _UA_SignatureData_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_clear');
  late final _UA_SignatureData_clear = _UA_SignatureData_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_delete(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_delete(
      p,
    );
  }

  late final _UA_SignatureData_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_delete');
  late final _UA_SignatureData_delete = _UA_SignatureData_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_CreateSessionRequest_init(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_init(
      p,
    );
  }

  late final _UA_CreateSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_init');
  late final _UA_CreateSessionRequest_init = _UA_CreateSessionRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  ffi.Pointer<UA_CreateSessionRequest> UA_CreateSessionRequest_new() {
    return _UA_CreateSessionRequest_new();
  }

  late final _UA_CreateSessionRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>>(
      'UA_CreateSessionRequest_new');
  late final _UA_CreateSessionRequest_new = _UA_CreateSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>();

  int UA_CreateSessionRequest_copy(
    ffi.Pointer<UA_CreateSessionRequest> src,
    ffi.Pointer<UA_CreateSessionRequest> dst,
  ) {
    return _UA_CreateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSessionRequest>,
                  ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_copy');
  late final _UA_CreateSessionRequest_copy =
      _UA_CreateSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSessionRequest>,
              ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_deleteMembers(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_deleteMembers');
  late final _UA_CreateSessionRequest_deleteMembers =
      _UA_CreateSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_clear(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_clear');
  late final _UA_CreateSessionRequest_clear = _UA_CreateSessionRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_delete(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_delete');
  late final _UA_CreateSessionRequest_delete =
      _UA_CreateSessionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionResponse_init(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_init(
      p,
    );
  }

  late final _UA_CreateSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_init');
  late final _UA_CreateSessionResponse_init = _UA_CreateSessionResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  ffi.Pointer<UA_CreateSessionResponse> UA_CreateSessionResponse_new() {
    return _UA_CreateSessionResponse_new();
  }

  late final _UA_CreateSessionResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>>(
      'UA_CreateSessionResponse_new');
  late final _UA_CreateSessionResponse_new = _UA_CreateSessionResponse_newPtr
      .asFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>();

  int UA_CreateSessionResponse_copy(
    ffi.Pointer<UA_CreateSessionResponse> src,
    ffi.Pointer<UA_CreateSessionResponse> dst,
  ) {
    return _UA_CreateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSessionResponse>,
                  ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_copy');
  late final _UA_CreateSessionResponse_copy =
      _UA_CreateSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSessionResponse>,
              ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_deleteMembers(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_deleteMembers');
  late final _UA_CreateSessionResponse_deleteMembers =
      _UA_CreateSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_clear(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_clear');
  late final _UA_CreateSessionResponse_clear =
      _UA_CreateSessionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_delete(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_delete');
  late final _UA_CreateSessionResponse_delete =
      _UA_CreateSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_UserIdentityToken_init(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_init(
      p,
    );
  }

  late final _UA_UserIdentityToken_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_init');
  late final _UA_UserIdentityToken_init = _UA_UserIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  ffi.Pointer<UA_UserIdentityToken> UA_UserIdentityToken_new() {
    return _UA_UserIdentityToken_new();
  }

  late final _UA_UserIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserIdentityToken> Function()>>(
          'UA_UserIdentityToken_new');
  late final _UA_UserIdentityToken_new = _UA_UserIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_UserIdentityToken> Function()>();

  int UA_UserIdentityToken_copy(
    ffi.Pointer<UA_UserIdentityToken> src,
    ffi.Pointer<UA_UserIdentityToken> dst,
  ) {
    return _UA_UserIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserIdentityToken>,
              ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_copy');
  late final _UA_UserIdentityToken_copy =
      _UA_UserIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UserIdentityToken>,
              ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_deleteMembers(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_UserIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_deleteMembers');
  late final _UA_UserIdentityToken_deleteMembers =
      _UA_UserIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_clear(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_clear');
  late final _UA_UserIdentityToken_clear = _UA_UserIdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_delete(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_delete');
  late final _UA_UserIdentityToken_delete = _UA_UserIdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_AnonymousIdentityToken_init(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_init(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_init');
  late final _UA_AnonymousIdentityToken_init =
      _UA_AnonymousIdentityToken_initPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  ffi.Pointer<UA_AnonymousIdentityToken> UA_AnonymousIdentityToken_new() {
    return _UA_AnonymousIdentityToken_new();
  }

  late final _UA_AnonymousIdentityToken_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>>(
      'UA_AnonymousIdentityToken_new');
  late final _UA_AnonymousIdentityToken_new = _UA_AnonymousIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>();

  int UA_AnonymousIdentityToken_copy(
    ffi.Pointer<UA_AnonymousIdentityToken> src,
    ffi.Pointer<UA_AnonymousIdentityToken> dst,
  ) {
    return _UA_AnonymousIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_AnonymousIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AnonymousIdentityToken>,
                  ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_copy');
  late final _UA_AnonymousIdentityToken_copy =
      _UA_AnonymousIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AnonymousIdentityToken>,
              ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_deleteMembers(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_deleteMembers');
  late final _UA_AnonymousIdentityToken_deleteMembers =
      _UA_AnonymousIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_clear(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_clear(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_clear');
  late final _UA_AnonymousIdentityToken_clear =
      _UA_AnonymousIdentityToken_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_delete(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_delete(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_delete');
  late final _UA_AnonymousIdentityToken_delete =
      _UA_AnonymousIdentityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_UserNameIdentityToken_init(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_init(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_init');
  late final _UA_UserNameIdentityToken_init = _UA_UserNameIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  ffi.Pointer<UA_UserNameIdentityToken> UA_UserNameIdentityToken_new() {
    return _UA_UserNameIdentityToken_new();
  }

  late final _UA_UserNameIdentityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>>(
      'UA_UserNameIdentityToken_new');
  late final _UA_UserNameIdentityToken_new = _UA_UserNameIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>();

  int UA_UserNameIdentityToken_copy(
    ffi.Pointer<UA_UserNameIdentityToken> src,
    ffi.Pointer<UA_UserNameIdentityToken> dst,
  ) {
    return _UA_UserNameIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserNameIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UserNameIdentityToken>,
                  ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_copy');
  late final _UA_UserNameIdentityToken_copy =
      _UA_UserNameIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UserNameIdentityToken>,
              ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_deleteMembers(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_deleteMembers');
  late final _UA_UserNameIdentityToken_deleteMembers =
      _UA_UserNameIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_clear(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_clear');
  late final _UA_UserNameIdentityToken_clear =
      _UA_UserNameIdentityToken_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_delete(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_delete');
  late final _UA_UserNameIdentityToken_delete =
      _UA_UserNameIdentityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_X509IdentityToken_init(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_init(
      p,
    );
  }

  late final _UA_X509IdentityToken_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_init');
  late final _UA_X509IdentityToken_init = _UA_X509IdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  ffi.Pointer<UA_X509IdentityToken> UA_X509IdentityToken_new() {
    return _UA_X509IdentityToken_new();
  }

  late final _UA_X509IdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_X509IdentityToken> Function()>>(
          'UA_X509IdentityToken_new');
  late final _UA_X509IdentityToken_new = _UA_X509IdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_X509IdentityToken> Function()>();

  int UA_X509IdentityToken_copy(
    ffi.Pointer<UA_X509IdentityToken> src,
    ffi.Pointer<UA_X509IdentityToken> dst,
  ) {
    return _UA_X509IdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_X509IdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_X509IdentityToken>,
              ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_copy');
  late final _UA_X509IdentityToken_copy =
      _UA_X509IdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_X509IdentityToken>,
              ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_deleteMembers(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_X509IdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_deleteMembers');
  late final _UA_X509IdentityToken_deleteMembers =
      _UA_X509IdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_clear(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_clear(
      p,
    );
  }

  late final _UA_X509IdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_clear');
  late final _UA_X509IdentityToken_clear = _UA_X509IdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_delete(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_delete(
      p,
    );
  }

  late final _UA_X509IdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_delete');
  late final _UA_X509IdentityToken_delete = _UA_X509IdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_IssuedIdentityToken_init(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_init(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_init');
  late final _UA_IssuedIdentityToken_init = _UA_IssuedIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  ffi.Pointer<UA_IssuedIdentityToken> UA_IssuedIdentityToken_new() {
    return _UA_IssuedIdentityToken_new();
  }

  late final _UA_IssuedIdentityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>>(
      'UA_IssuedIdentityToken_new');
  late final _UA_IssuedIdentityToken_new = _UA_IssuedIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>();

  int UA_IssuedIdentityToken_copy(
    ffi.Pointer<UA_IssuedIdentityToken> src,
    ffi.Pointer<UA_IssuedIdentityToken> dst,
  ) {
    return _UA_IssuedIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_IssuedIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_IssuedIdentityToken>,
                  ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_copy');
  late final _UA_IssuedIdentityToken_copy =
      _UA_IssuedIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_IssuedIdentityToken>,
              ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_deleteMembers(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_deleteMembers');
  late final _UA_IssuedIdentityToken_deleteMembers =
      _UA_IssuedIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_clear(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_clear(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_clear');
  late final _UA_IssuedIdentityToken_clear = _UA_IssuedIdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_delete(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_delete(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_delete');
  late final _UA_IssuedIdentityToken_delete = _UA_IssuedIdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_ActivateSessionRequest_init(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_init(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_init');
  late final _UA_ActivateSessionRequest_init =
      _UA_ActivateSessionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  ffi.Pointer<UA_ActivateSessionRequest> UA_ActivateSessionRequest_new() {
    return _UA_ActivateSessionRequest_new();
  }

  late final _UA_ActivateSessionRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>>(
      'UA_ActivateSessionRequest_new');
  late final _UA_ActivateSessionRequest_new = _UA_ActivateSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>();

  int UA_ActivateSessionRequest_copy(
    ffi.Pointer<UA_ActivateSessionRequest> src,
    ffi.Pointer<UA_ActivateSessionRequest> dst,
  ) {
    return _UA_ActivateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionRequest>,
                  ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_copy');
  late final _UA_ActivateSessionRequest_copy =
      _UA_ActivateSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ActivateSessionRequest>,
              ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_deleteMembers(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_deleteMembers');
  late final _UA_ActivateSessionRequest_deleteMembers =
      _UA_ActivateSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_clear(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_clear(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_clear');
  late final _UA_ActivateSessionRequest_clear =
      _UA_ActivateSessionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_delete(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_delete(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_delete');
  late final _UA_ActivateSessionRequest_delete =
      _UA_ActivateSessionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionResponse_init(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_init(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_init');
  late final _UA_ActivateSessionResponse_init =
      _UA_ActivateSessionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  ffi.Pointer<UA_ActivateSessionResponse> UA_ActivateSessionResponse_new() {
    return _UA_ActivateSessionResponse_new();
  }

  late final _UA_ActivateSessionResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ActivateSessionResponse> Function()>>(
      'UA_ActivateSessionResponse_new');
  late final _UA_ActivateSessionResponse_new =
      _UA_ActivateSessionResponse_newPtr.asFunction<
          ffi.Pointer<UA_ActivateSessionResponse> Function()>();

  int UA_ActivateSessionResponse_copy(
    ffi.Pointer<UA_ActivateSessionResponse> src,
    ffi.Pointer<UA_ActivateSessionResponse> dst,
  ) {
    return _UA_ActivateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionResponse>,
                  ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_copy');
  late final _UA_ActivateSessionResponse_copy =
      _UA_ActivateSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ActivateSessionResponse>,
              ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_deleteMembers(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_deleteMembers');
  late final _UA_ActivateSessionResponse_deleteMembers =
      _UA_ActivateSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_clear(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_clear(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_clear');
  late final _UA_ActivateSessionResponse_clear =
      _UA_ActivateSessionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_delete(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_delete(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_delete');
  late final _UA_ActivateSessionResponse_delete =
      _UA_ActivateSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_CloseSessionRequest_init(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_init(
      p,
    );
  }

  late final _UA_CloseSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_init');
  late final _UA_CloseSessionRequest_init = _UA_CloseSessionRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  ffi.Pointer<UA_CloseSessionRequest> UA_CloseSessionRequest_new() {
    return _UA_CloseSessionRequest_new();
  }

  late final _UA_CloseSessionRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>>(
      'UA_CloseSessionRequest_new');
  late final _UA_CloseSessionRequest_new = _UA_CloseSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>();

  int UA_CloseSessionRequest_copy(
    ffi.Pointer<UA_CloseSessionRequest> src,
    ffi.Pointer<UA_CloseSessionRequest> dst,
  ) {
    return _UA_CloseSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSessionRequest>,
                  ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_copy');
  late final _UA_CloseSessionRequest_copy =
      _UA_CloseSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSessionRequest>,
              ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_deleteMembers(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_deleteMembers');
  late final _UA_CloseSessionRequest_deleteMembers =
      _UA_CloseSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_clear(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_clear(
      p,
    );
  }

  late final _UA_CloseSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_clear');
  late final _UA_CloseSessionRequest_clear = _UA_CloseSessionRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_delete(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_delete(
      p,
    );
  }

  late final _UA_CloseSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_delete');
  late final _UA_CloseSessionRequest_delete = _UA_CloseSessionRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionResponse_init(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_init(
      p,
    );
  }

  late final _UA_CloseSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_init');
  late final _UA_CloseSessionResponse_init = _UA_CloseSessionResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  ffi.Pointer<UA_CloseSessionResponse> UA_CloseSessionResponse_new() {
    return _UA_CloseSessionResponse_new();
  }

  late final _UA_CloseSessionResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>>(
      'UA_CloseSessionResponse_new');
  late final _UA_CloseSessionResponse_new = _UA_CloseSessionResponse_newPtr
      .asFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>();

  int UA_CloseSessionResponse_copy(
    ffi.Pointer<UA_CloseSessionResponse> src,
    ffi.Pointer<UA_CloseSessionResponse> dst,
  ) {
    return _UA_CloseSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSessionResponse>,
                  ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_copy');
  late final _UA_CloseSessionResponse_copy =
      _UA_CloseSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSessionResponse>,
              ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_deleteMembers(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_deleteMembers');
  late final _UA_CloseSessionResponse_deleteMembers =
      _UA_CloseSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_clear(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_clear(
      p,
    );
  }

  late final _UA_CloseSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_clear');
  late final _UA_CloseSessionResponse_clear = _UA_CloseSessionResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_delete(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_delete(
      p,
    );
  }

  late final _UA_CloseSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_delete');
  late final _UA_CloseSessionResponse_delete =
      _UA_CloseSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_NodeAttributesMask_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_init(
      p,
    );
  }

  late final _UA_NodeAttributesMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_init');
  late final _UA_NodeAttributesMask_init = _UA_NodeAttributesMask_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_NodeAttributesMask_new() {
    return _UA_NodeAttributesMask_new();
  }

  late final _UA_NodeAttributesMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_NodeAttributesMask_new');
  late final _UA_NodeAttributesMask_new = _UA_NodeAttributesMask_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_NodeAttributesMask_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_NodeAttributesMask_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributesMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_NodeAttributesMask_copy');
  late final _UA_NodeAttributesMask_copy =
      _UA_NodeAttributesMask_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_deleteMembers(
      p,
    );
  }

  late final _UA_NodeAttributesMask_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_deleteMembers');
  late final _UA_NodeAttributesMask_deleteMembers =
      _UA_NodeAttributesMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_clear(
      p,
    );
  }

  late final _UA_NodeAttributesMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_clear');
  late final _UA_NodeAttributesMask_clear = _UA_NodeAttributesMask_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_delete(
      p,
    );
  }

  late final _UA_NodeAttributesMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_delete');
  late final _UA_NodeAttributesMask_delete = _UA_NodeAttributesMask_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributes_init(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_init(
      p,
    );
  }

  late final _UA_NodeAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_init');
  late final _UA_NodeAttributes_init = _UA_NodeAttributes_initPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeAttributes>)>();

  ffi.Pointer<UA_NodeAttributes> UA_NodeAttributes_new() {
    return _UA_NodeAttributes_new();
  }

  late final _UA_NodeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeAttributes> Function()>>(
          'UA_NodeAttributes_new');
  late final _UA_NodeAttributes_new = _UA_NodeAttributes_newPtr.asFunction<
      ffi.Pointer<UA_NodeAttributes> Function()>();

  int UA_NodeAttributes_copy(
    ffi.Pointer<UA_NodeAttributes> src,
    ffi.Pointer<UA_NodeAttributes> dst,
  ) {
    return _UA_NodeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeAttributes>,
              ffi.Pointer<UA_NodeAttributes>)>>('UA_NodeAttributes_copy');
  late final _UA_NodeAttributes_copy = _UA_NodeAttributes_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_deleteMembers(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_NodeAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_deleteMembers');
  late final _UA_NodeAttributes_deleteMembers =
      _UA_NodeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_clear(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_clear(
      p,
    );
  }

  late final _UA_NodeAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_clear');
  late final _UA_NodeAttributes_clear = _UA_NodeAttributes_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_delete(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_delete(
      p,
    );
  }

  late final _UA_NodeAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_delete');
  late final _UA_NodeAttributes_delete = _UA_NodeAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_ObjectAttributes_init(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_init(
      p,
    );
  }

  late final _UA_ObjectAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_init');
  late final _UA_ObjectAttributes_init = _UA_ObjectAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  ffi.Pointer<UA_ObjectAttributes> UA_ObjectAttributes_new() {
    return _UA_ObjectAttributes_new();
  }

  late final _UA_ObjectAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ObjectAttributes> Function()>>(
          'UA_ObjectAttributes_new');
  late final _UA_ObjectAttributes_new = _UA_ObjectAttributes_newPtr.asFunction<
      ffi.Pointer<UA_ObjectAttributes> Function()>();

  int UA_ObjectAttributes_copy(
    ffi.Pointer<UA_ObjectAttributes> src,
    ffi.Pointer<UA_ObjectAttributes> dst,
  ) {
    return _UA_ObjectAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ObjectAttributes>,
              ffi.Pointer<UA_ObjectAttributes>)>>('UA_ObjectAttributes_copy');
  late final _UA_ObjectAttributes_copy =
      _UA_ObjectAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ObjectAttributes>,
              ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_deleteMembers(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ObjectAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_deleteMembers');
  late final _UA_ObjectAttributes_deleteMembers =
      _UA_ObjectAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_clear(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_clear');
  late final _UA_ObjectAttributes_clear = _UA_ObjectAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_delete(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_delete');
  late final _UA_ObjectAttributes_delete = _UA_ObjectAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_VariableAttributes_init(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_init(
      p,
    );
  }

  late final _UA_VariableAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_init');
  late final _UA_VariableAttributes_init = _UA_VariableAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  ffi.Pointer<UA_VariableAttributes> UA_VariableAttributes_new() {
    return _UA_VariableAttributes_new();
  }

  late final _UA_VariableAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_VariableAttributes> Function()>>(
      'UA_VariableAttributes_new');
  late final _UA_VariableAttributes_new = _UA_VariableAttributes_newPtr
      .asFunction<ffi.Pointer<UA_VariableAttributes> Function()>();

  int UA_VariableAttributes_copy(
    ffi.Pointer<UA_VariableAttributes> src,
    ffi.Pointer<UA_VariableAttributes> dst,
  ) {
    return _UA_VariableAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_VariableAttributes>,
                  ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_copy');
  late final _UA_VariableAttributes_copy =
      _UA_VariableAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_VariableAttributes>,
              ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_deleteMembers(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_VariableAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_deleteMembers');
  late final _UA_VariableAttributes_deleteMembers =
      _UA_VariableAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_clear(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_clear(
      p,
    );
  }

  late final _UA_VariableAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_clear');
  late final _UA_VariableAttributes_clear = _UA_VariableAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_delete(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_delete(
      p,
    );
  }

  late final _UA_VariableAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_delete');
  late final _UA_VariableAttributes_delete = _UA_VariableAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_MethodAttributes_init(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_init(
      p,
    );
  }

  late final _UA_MethodAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_init');
  late final _UA_MethodAttributes_init = _UA_MethodAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  ffi.Pointer<UA_MethodAttributes> UA_MethodAttributes_new() {
    return _UA_MethodAttributes_new();
  }

  late final _UA_MethodAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MethodAttributes> Function()>>(
          'UA_MethodAttributes_new');
  late final _UA_MethodAttributes_new = _UA_MethodAttributes_newPtr.asFunction<
      ffi.Pointer<UA_MethodAttributes> Function()>();

  int UA_MethodAttributes_copy(
    ffi.Pointer<UA_MethodAttributes> src,
    ffi.Pointer<UA_MethodAttributes> dst,
  ) {
    return _UA_MethodAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_MethodAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MethodAttributes>,
              ffi.Pointer<UA_MethodAttributes>)>>('UA_MethodAttributes_copy');
  late final _UA_MethodAttributes_copy =
      _UA_MethodAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MethodAttributes>,
              ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_deleteMembers(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_MethodAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_deleteMembers');
  late final _UA_MethodAttributes_deleteMembers =
      _UA_MethodAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_clear(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_clear(
      p,
    );
  }

  late final _UA_MethodAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_clear');
  late final _UA_MethodAttributes_clear = _UA_MethodAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_delete(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_delete(
      p,
    );
  }

  late final _UA_MethodAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_delete');
  late final _UA_MethodAttributes_delete = _UA_MethodAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_ObjectTypeAttributes_init(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_init(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_init');
  late final _UA_ObjectTypeAttributes_init = _UA_ObjectTypeAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  ffi.Pointer<UA_ObjectTypeAttributes> UA_ObjectTypeAttributes_new() {
    return _UA_ObjectTypeAttributes_new();
  }

  late final _UA_ObjectTypeAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>>(
      'UA_ObjectTypeAttributes_new');
  late final _UA_ObjectTypeAttributes_new = _UA_ObjectTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>();

  int UA_ObjectTypeAttributes_copy(
    ffi.Pointer<UA_ObjectTypeAttributes> src,
    ffi.Pointer<UA_ObjectTypeAttributes> dst,
  ) {
    return _UA_ObjectTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ObjectTypeAttributes>,
                  ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_copy');
  late final _UA_ObjectTypeAttributes_copy =
      _UA_ObjectTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ObjectTypeAttributes>,
              ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_deleteMembers(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_deleteMembers');
  late final _UA_ObjectTypeAttributes_deleteMembers =
      _UA_ObjectTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_clear(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_clear');
  late final _UA_ObjectTypeAttributes_clear = _UA_ObjectTypeAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_delete(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_delete');
  late final _UA_ObjectTypeAttributes_delete =
      _UA_ObjectTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_VariableTypeAttributes_init(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_init(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_init');
  late final _UA_VariableTypeAttributes_init =
      _UA_VariableTypeAttributes_initPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  ffi.Pointer<UA_VariableTypeAttributes> UA_VariableTypeAttributes_new() {
    return _UA_VariableTypeAttributes_new();
  }

  late final _UA_VariableTypeAttributes_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>>(
      'UA_VariableTypeAttributes_new');
  late final _UA_VariableTypeAttributes_new = _UA_VariableTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>();

  int UA_VariableTypeAttributes_copy(
    ffi.Pointer<UA_VariableTypeAttributes> src,
    ffi.Pointer<UA_VariableTypeAttributes> dst,
  ) {
    return _UA_VariableTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_VariableTypeAttributes>,
                  ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_copy');
  late final _UA_VariableTypeAttributes_copy =
      _UA_VariableTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_VariableTypeAttributes>,
              ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_deleteMembers(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_deleteMembers');
  late final _UA_VariableTypeAttributes_deleteMembers =
      _UA_VariableTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_clear(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_clear(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_clear');
  late final _UA_VariableTypeAttributes_clear =
      _UA_VariableTypeAttributes_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_delete(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_delete(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_delete');
  late final _UA_VariableTypeAttributes_delete =
      _UA_VariableTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_init(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_init(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_init');
  late final _UA_ReferenceTypeAttributes_init =
      _UA_ReferenceTypeAttributes_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  ffi.Pointer<UA_ReferenceTypeAttributes> UA_ReferenceTypeAttributes_new() {
    return _UA_ReferenceTypeAttributes_new();
  }

  late final _UA_ReferenceTypeAttributes_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ReferenceTypeAttributes> Function()>>(
      'UA_ReferenceTypeAttributes_new');
  late final _UA_ReferenceTypeAttributes_new =
      _UA_ReferenceTypeAttributes_newPtr.asFunction<
          ffi.Pointer<UA_ReferenceTypeAttributes> Function()>();

  int UA_ReferenceTypeAttributes_copy(
    ffi.Pointer<UA_ReferenceTypeAttributes> src,
    ffi.Pointer<UA_ReferenceTypeAttributes> dst,
  ) {
    return _UA_ReferenceTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
                  ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_copy');
  late final _UA_ReferenceTypeAttributes_copy =
      _UA_ReferenceTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
              ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_deleteMembers(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_deleteMembers');
  late final _UA_ReferenceTypeAttributes_deleteMembers =
      _UA_ReferenceTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_clear(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_clear');
  late final _UA_ReferenceTypeAttributes_clear =
      _UA_ReferenceTypeAttributes_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_delete(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_delete');
  late final _UA_ReferenceTypeAttributes_delete =
      _UA_ReferenceTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_DataTypeAttributes_init(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_init(
      p,
    );
  }

  late final _UA_DataTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_init');
  late final _UA_DataTypeAttributes_init = _UA_DataTypeAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  ffi.Pointer<UA_DataTypeAttributes> UA_DataTypeAttributes_new() {
    return _UA_DataTypeAttributes_new();
  }

  late final _UA_DataTypeAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>>(
      'UA_DataTypeAttributes_new');
  late final _UA_DataTypeAttributes_new = _UA_DataTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>();

  int UA_DataTypeAttributes_copy(
    ffi.Pointer<UA_DataTypeAttributes> src,
    ffi.Pointer<UA_DataTypeAttributes> dst,
  ) {
    return _UA_DataTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataTypeAttributes>,
                  ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_copy');
  late final _UA_DataTypeAttributes_copy =
      _UA_DataTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataTypeAttributes>,
              ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_deleteMembers(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_DataTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_deleteMembers');
  late final _UA_DataTypeAttributes_deleteMembers =
      _UA_DataTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_clear(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_clear(
      p,
    );
  }

  late final _UA_DataTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_clear');
  late final _UA_DataTypeAttributes_clear = _UA_DataTypeAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_delete(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_delete(
      p,
    );
  }

  late final _UA_DataTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_delete');
  late final _UA_DataTypeAttributes_delete = _UA_DataTypeAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_ViewAttributes_init(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_init(
      p,
    );
  }

  late final _UA_ViewAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_init');
  late final _UA_ViewAttributes_init = _UA_ViewAttributes_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewAttributes>)>();

  ffi.Pointer<UA_ViewAttributes> UA_ViewAttributes_new() {
    return _UA_ViewAttributes_new();
  }

  late final _UA_ViewAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewAttributes> Function()>>(
          'UA_ViewAttributes_new');
  late final _UA_ViewAttributes_new = _UA_ViewAttributes_newPtr.asFunction<
      ffi.Pointer<UA_ViewAttributes> Function()>();

  int UA_ViewAttributes_copy(
    ffi.Pointer<UA_ViewAttributes> src,
    ffi.Pointer<UA_ViewAttributes> dst,
  ) {
    return _UA_ViewAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ViewAttributes>,
              ffi.Pointer<UA_ViewAttributes>)>>('UA_ViewAttributes_copy');
  late final _UA_ViewAttributes_copy = _UA_ViewAttributes_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_deleteMembers(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ViewAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_deleteMembers');
  late final _UA_ViewAttributes_deleteMembers =
      _UA_ViewAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_clear(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_clear(
      p,
    );
  }

  late final _UA_ViewAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_clear');
  late final _UA_ViewAttributes_clear = _UA_ViewAttributes_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_delete(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_delete(
      p,
    );
  }

  late final _UA_ViewAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_delete');
  late final _UA_ViewAttributes_delete = _UA_ViewAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_AddNodesItem_init(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_init(
      p,
    );
  }

  late final _UA_AddNodesItem_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_init');
  late final _UA_AddNodesItem_init = _UA_AddNodesItem_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  ffi.Pointer<UA_AddNodesItem> UA_AddNodesItem_new() {
    return _UA_AddNodesItem_new();
  }

  late final _UA_AddNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesItem> Function()>>(
          'UA_AddNodesItem_new');
  late final _UA_AddNodesItem_new = _UA_AddNodesItem_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesItem> Function()>();

  int UA_AddNodesItem_copy(
    ffi.Pointer<UA_AddNodesItem> src,
    ffi.Pointer<UA_AddNodesItem> dst,
  ) {
    return _UA_AddNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesItem>,
              ffi.Pointer<UA_AddNodesItem>)>>('UA_AddNodesItem_copy');
  late final _UA_AddNodesItem_copy = _UA_AddNodesItem_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_deleteMembers(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_deleteMembers');
  late final _UA_AddNodesItem_deleteMembers = _UA_AddNodesItem_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_clear(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_clear(
      p,
    );
  }

  late final _UA_AddNodesItem_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_clear');
  late final _UA_AddNodesItem_clear = _UA_AddNodesItem_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_delete(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_delete(
      p,
    );
  }

  late final _UA_AddNodesItem_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_delete');
  late final _UA_AddNodesItem_delete = _UA_AddNodesItem_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesResult_init(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_init(
      p,
    );
  }

  late final _UA_AddNodesResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_init');
  late final _UA_AddNodesResult_init = _UA_AddNodesResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesResult>)>();

  ffi.Pointer<UA_AddNodesResult> UA_AddNodesResult_new() {
    return _UA_AddNodesResult_new();
  }

  late final _UA_AddNodesResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResult> Function()>>(
          'UA_AddNodesResult_new');
  late final _UA_AddNodesResult_new = _UA_AddNodesResult_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesResult> Function()>();

  int UA_AddNodesResult_copy(
    ffi.Pointer<UA_AddNodesResult> src,
    ffi.Pointer<UA_AddNodesResult> dst,
  ) {
    return _UA_AddNodesResult_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesResult>,
              ffi.Pointer<UA_AddNodesResult>)>>('UA_AddNodesResult_copy');
  late final _UA_AddNodesResult_copy = _UA_AddNodesResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_deleteMembers(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_deleteMembers');
  late final _UA_AddNodesResult_deleteMembers =
      _UA_AddNodesResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_clear(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_clear(
      p,
    );
  }

  late final _UA_AddNodesResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_clear');
  late final _UA_AddNodesResult_clear = _UA_AddNodesResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_delete(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_delete(
      p,
    );
  }

  late final _UA_AddNodesResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_delete');
  late final _UA_AddNodesResult_delete = _UA_AddNodesResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesRequest_init(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_init(
      p,
    );
  }

  late final _UA_AddNodesRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_init');
  late final _UA_AddNodesRequest_init = _UA_AddNodesRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  ffi.Pointer<UA_AddNodesRequest> UA_AddNodesRequest_new() {
    return _UA_AddNodesRequest_new();
  }

  late final _UA_AddNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesRequest> Function()>>(
          'UA_AddNodesRequest_new');
  late final _UA_AddNodesRequest_new = _UA_AddNodesRequest_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesRequest> Function()>();

  int UA_AddNodesRequest_copy(
    ffi.Pointer<UA_AddNodesRequest> src,
    ffi.Pointer<UA_AddNodesRequest> dst,
  ) {
    return _UA_AddNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesRequest>,
              ffi.Pointer<UA_AddNodesRequest>)>>('UA_AddNodesRequest_copy');
  late final _UA_AddNodesRequest_copy = _UA_AddNodesRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_deleteMembers(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_deleteMembers');
  late final _UA_AddNodesRequest_deleteMembers =
      _UA_AddNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_clear(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_clear(
      p,
    );
  }

  late final _UA_AddNodesRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_clear');
  late final _UA_AddNodesRequest_clear = _UA_AddNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_delete(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_delete(
      p,
    );
  }

  late final _UA_AddNodesRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_delete');
  late final _UA_AddNodesRequest_delete = _UA_AddNodesRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesResponse_init(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_init(
      p,
    );
  }

  late final _UA_AddNodesResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_init');
  late final _UA_AddNodesResponse_init = _UA_AddNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  ffi.Pointer<UA_AddNodesResponse> UA_AddNodesResponse_new() {
    return _UA_AddNodesResponse_new();
  }

  late final _UA_AddNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResponse> Function()>>(
          'UA_AddNodesResponse_new');
  late final _UA_AddNodesResponse_new = _UA_AddNodesResponse_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesResponse> Function()>();

  int UA_AddNodesResponse_copy(
    ffi.Pointer<UA_AddNodesResponse> src,
    ffi.Pointer<UA_AddNodesResponse> dst,
  ) {
    return _UA_AddNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesResponse>,
              ffi.Pointer<UA_AddNodesResponse>)>>('UA_AddNodesResponse_copy');
  late final _UA_AddNodesResponse_copy =
      _UA_AddNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddNodesResponse>,
              ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_deleteMembers(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_deleteMembers');
  late final _UA_AddNodesResponse_deleteMembers =
      _UA_AddNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_clear(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_clear(
      p,
    );
  }

  late final _UA_AddNodesResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_clear');
  late final _UA_AddNodesResponse_clear = _UA_AddNodesResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_delete(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_delete(
      p,
    );
  }

  late final _UA_AddNodesResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_delete');
  late final _UA_AddNodesResponse_delete = _UA_AddNodesResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddReferencesItem_init(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_init(
      p,
    );
  }

  late final _UA_AddReferencesItem_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_init');
  late final _UA_AddReferencesItem_init = _UA_AddReferencesItem_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  ffi.Pointer<UA_AddReferencesItem> UA_AddReferencesItem_new() {
    return _UA_AddReferencesItem_new();
  }

  late final _UA_AddReferencesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddReferencesItem> Function()>>(
          'UA_AddReferencesItem_new');
  late final _UA_AddReferencesItem_new = _UA_AddReferencesItem_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesItem> Function()>();

  int UA_AddReferencesItem_copy(
    ffi.Pointer<UA_AddReferencesItem> src,
    ffi.Pointer<UA_AddReferencesItem> dst,
  ) {
    return _UA_AddReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddReferencesItem>,
              ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_copy');
  late final _UA_AddReferencesItem_copy =
      _UA_AddReferencesItem_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesItem>,
              ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_deleteMembers(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_deleteMembers');
  late final _UA_AddReferencesItem_deleteMembers =
      _UA_AddReferencesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_clear(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_clear(
      p,
    );
  }

  late final _UA_AddReferencesItem_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_clear');
  late final _UA_AddReferencesItem_clear = _UA_AddReferencesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_delete(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_delete(
      p,
    );
  }

  late final _UA_AddReferencesItem_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_delete');
  late final _UA_AddReferencesItem_delete = _UA_AddReferencesItem_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesRequest_init(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_init(
      p,
    );
  }

  late final _UA_AddReferencesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_init');
  late final _UA_AddReferencesRequest_init = _UA_AddReferencesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  ffi.Pointer<UA_AddReferencesRequest> UA_AddReferencesRequest_new() {
    return _UA_AddReferencesRequest_new();
  }

  late final _UA_AddReferencesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>>(
      'UA_AddReferencesRequest_new');
  late final _UA_AddReferencesRequest_new = _UA_AddReferencesRequest_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>();

  int UA_AddReferencesRequest_copy(
    ffi.Pointer<UA_AddReferencesRequest> src,
    ffi.Pointer<UA_AddReferencesRequest> dst,
  ) {
    return _UA_AddReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AddReferencesRequest>,
                  ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_copy');
  late final _UA_AddReferencesRequest_copy =
      _UA_AddReferencesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesRequest>,
              ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_deleteMembers(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_deleteMembers');
  late final _UA_AddReferencesRequest_deleteMembers =
      _UA_AddReferencesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_clear(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_clear(
      p,
    );
  }

  late final _UA_AddReferencesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_clear');
  late final _UA_AddReferencesRequest_clear = _UA_AddReferencesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_delete(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_delete(
      p,
    );
  }

  late final _UA_AddReferencesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_delete');
  late final _UA_AddReferencesRequest_delete =
      _UA_AddReferencesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesResponse_init(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_init(
      p,
    );
  }

  late final _UA_AddReferencesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_init');
  late final _UA_AddReferencesResponse_init = _UA_AddReferencesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  ffi.Pointer<UA_AddReferencesResponse> UA_AddReferencesResponse_new() {
    return _UA_AddReferencesResponse_new();
  }

  late final _UA_AddReferencesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>>(
      'UA_AddReferencesResponse_new');
  late final _UA_AddReferencesResponse_new = _UA_AddReferencesResponse_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>();

  int UA_AddReferencesResponse_copy(
    ffi.Pointer<UA_AddReferencesResponse> src,
    ffi.Pointer<UA_AddReferencesResponse> dst,
  ) {
    return _UA_AddReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AddReferencesResponse>,
                  ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_copy');
  late final _UA_AddReferencesResponse_copy =
      _UA_AddReferencesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesResponse>,
              ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_deleteMembers(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_deleteMembers');
  late final _UA_AddReferencesResponse_deleteMembers =
      _UA_AddReferencesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_clear(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_clear(
      p,
    );
  }

  late final _UA_AddReferencesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_clear');
  late final _UA_AddReferencesResponse_clear =
      _UA_AddReferencesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_delete(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_delete(
      p,
    );
  }

  late final _UA_AddReferencesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_delete');
  late final _UA_AddReferencesResponse_delete =
      _UA_AddReferencesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_DeleteNodesItem_init(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_init(
      p,
    );
  }

  late final _UA_DeleteNodesItem_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_init');
  late final _UA_DeleteNodesItem_init = _UA_DeleteNodesItem_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  ffi.Pointer<UA_DeleteNodesItem> UA_DeleteNodesItem_new() {
    return _UA_DeleteNodesItem_new();
  }

  late final _UA_DeleteNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesItem> Function()>>(
          'UA_DeleteNodesItem_new');
  late final _UA_DeleteNodesItem_new = _UA_DeleteNodesItem_newPtr.asFunction<
      ffi.Pointer<UA_DeleteNodesItem> Function()>();

  int UA_DeleteNodesItem_copy(
    ffi.Pointer<UA_DeleteNodesItem> src,
    ffi.Pointer<UA_DeleteNodesItem> dst,
  ) {
    return _UA_DeleteNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesItem>,
              ffi.Pointer<UA_DeleteNodesItem>)>>('UA_DeleteNodesItem_copy');
  late final _UA_DeleteNodesItem_copy = _UA_DeleteNodesItem_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_deleteMembers(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesItem_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_deleteMembers');
  late final _UA_DeleteNodesItem_deleteMembers =
      _UA_DeleteNodesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_clear(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_clear(
      p,
    );
  }

  late final _UA_DeleteNodesItem_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_clear');
  late final _UA_DeleteNodesItem_clear = _UA_DeleteNodesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_delete(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_delete(
      p,
    );
  }

  late final _UA_DeleteNodesItem_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_delete');
  late final _UA_DeleteNodesItem_delete = _UA_DeleteNodesItem_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesRequest_init(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_init(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_init');
  late final _UA_DeleteNodesRequest_init = _UA_DeleteNodesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  ffi.Pointer<UA_DeleteNodesRequest> UA_DeleteNodesRequest_new() {
    return _UA_DeleteNodesRequest_new();
  }

  late final _UA_DeleteNodesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>>(
      'UA_DeleteNodesRequest_new');
  late final _UA_DeleteNodesRequest_new = _UA_DeleteNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>();

  int UA_DeleteNodesRequest_copy(
    ffi.Pointer<UA_DeleteNodesRequest> src,
    ffi.Pointer<UA_DeleteNodesRequest> dst,
  ) {
    return _UA_DeleteNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesRequest>,
                  ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_copy');
  late final _UA_DeleteNodesRequest_copy =
      _UA_DeleteNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteNodesRequest>,
              ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_deleteMembers(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_deleteMembers');
  late final _UA_DeleteNodesRequest_deleteMembers =
      _UA_DeleteNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_clear(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_clear');
  late final _UA_DeleteNodesRequest_clear = _UA_DeleteNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_delete(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_delete');
  late final _UA_DeleteNodesRequest_delete = _UA_DeleteNodesRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesResponse_init(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_init(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_init');
  late final _UA_DeleteNodesResponse_init = _UA_DeleteNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  ffi.Pointer<UA_DeleteNodesResponse> UA_DeleteNodesResponse_new() {
    return _UA_DeleteNodesResponse_new();
  }

  late final _UA_DeleteNodesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>>(
      'UA_DeleteNodesResponse_new');
  late final _UA_DeleteNodesResponse_new = _UA_DeleteNodesResponse_newPtr
      .asFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>();

  int UA_DeleteNodesResponse_copy(
    ffi.Pointer<UA_DeleteNodesResponse> src,
    ffi.Pointer<UA_DeleteNodesResponse> dst,
  ) {
    return _UA_DeleteNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesResponse>,
                  ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_copy');
  late final _UA_DeleteNodesResponse_copy =
      _UA_DeleteNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteNodesResponse>,
              ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_deleteMembers(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_deleteMembers');
  late final _UA_DeleteNodesResponse_deleteMembers =
      _UA_DeleteNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_clear(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_clear');
  late final _UA_DeleteNodesResponse_clear = _UA_DeleteNodesResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_delete(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_delete');
  late final _UA_DeleteNodesResponse_delete = _UA_DeleteNodesResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteReferencesItem_init(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_init(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_init');
  late final _UA_DeleteReferencesItem_init = _UA_DeleteReferencesItem_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  ffi.Pointer<UA_DeleteReferencesItem> UA_DeleteReferencesItem_new() {
    return _UA_DeleteReferencesItem_new();
  }

  late final _UA_DeleteReferencesItem_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>>(
      'UA_DeleteReferencesItem_new');
  late final _UA_DeleteReferencesItem_new = _UA_DeleteReferencesItem_newPtr
      .asFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>();

  int UA_DeleteReferencesItem_copy(
    ffi.Pointer<UA_DeleteReferencesItem> src,
    ffi.Pointer<UA_DeleteReferencesItem> dst,
  ) {
    return _UA_DeleteReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesItem_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesItem>,
                  ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_copy');
  late final _UA_DeleteReferencesItem_copy =
      _UA_DeleteReferencesItem_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesItem>,
              ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_deleteMembers');
  late final _UA_DeleteReferencesItem_deleteMembers =
      _UA_DeleteReferencesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_clear(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_clear');
  late final _UA_DeleteReferencesItem_clear = _UA_DeleteReferencesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_delete(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_delete');
  late final _UA_DeleteReferencesItem_delete =
      _UA_DeleteReferencesItem_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesRequest_init(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_init(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_init');
  late final _UA_DeleteReferencesRequest_init =
      _UA_DeleteReferencesRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  ffi.Pointer<UA_DeleteReferencesRequest> UA_DeleteReferencesRequest_new() {
    return _UA_DeleteReferencesRequest_new();
  }

  late final _UA_DeleteReferencesRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DeleteReferencesRequest> Function()>>(
      'UA_DeleteReferencesRequest_new');
  late final _UA_DeleteReferencesRequest_new =
      _UA_DeleteReferencesRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteReferencesRequest> Function()>();

  int UA_DeleteReferencesRequest_copy(
    ffi.Pointer<UA_DeleteReferencesRequest> src,
    ffi.Pointer<UA_DeleteReferencesRequest> dst,
  ) {
    return _UA_DeleteReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesRequest>,
                  ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_copy');
  late final _UA_DeleteReferencesRequest_copy =
      _UA_DeleteReferencesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesRequest>,
              ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_deleteMembers');
  late final _UA_DeleteReferencesRequest_deleteMembers =
      _UA_DeleteReferencesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_clear(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_clear');
  late final _UA_DeleteReferencesRequest_clear =
      _UA_DeleteReferencesRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_delete(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_delete');
  late final _UA_DeleteReferencesRequest_delete =
      _UA_DeleteReferencesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesResponse_init(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_init(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_init');
  late final _UA_DeleteReferencesResponse_init =
      _UA_DeleteReferencesResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  ffi.Pointer<UA_DeleteReferencesResponse> UA_DeleteReferencesResponse_new() {
    return _UA_DeleteReferencesResponse_new();
  }

  late final _UA_DeleteReferencesResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DeleteReferencesResponse> Function()>>(
      'UA_DeleteReferencesResponse_new');
  late final _UA_DeleteReferencesResponse_new =
      _UA_DeleteReferencesResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteReferencesResponse> Function()>();

  int UA_DeleteReferencesResponse_copy(
    ffi.Pointer<UA_DeleteReferencesResponse> src,
    ffi.Pointer<UA_DeleteReferencesResponse> dst,
  ) {
    return _UA_DeleteReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesResponse>,
                  ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_copy');
  late final _UA_DeleteReferencesResponse_copy =
      _UA_DeleteReferencesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesResponse>,
              ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_deleteMembers');
  late final _UA_DeleteReferencesResponse_deleteMembers =
      _UA_DeleteReferencesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_clear(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_clear');
  late final _UA_DeleteReferencesResponse_clear =
      _UA_DeleteReferencesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_delete(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_delete');
  late final _UA_DeleteReferencesResponse_delete =
      _UA_DeleteReferencesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_BrowseDirection_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_init(
      p,
    );
  }

  late final _UA_BrowseDirection_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_init');
  late final _UA_BrowseDirection_init = _UA_BrowseDirection_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrowseDirection_new() {
    return _UA_BrowseDirection_new();
  }

  late final _UA_BrowseDirection_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrowseDirection_new');
  late final _UA_BrowseDirection_new = _UA_BrowseDirection_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrowseDirection_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrowseDirection_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDirection_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_BrowseDirection_copy');
  late final _UA_BrowseDirection_copy = _UA_BrowseDirection_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseDirection_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_deleteMembers');
  late final _UA_BrowseDirection_deleteMembers =
      _UA_BrowseDirection_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_clear(
      p,
    );
  }

  late final _UA_BrowseDirection_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_clear');
  late final _UA_BrowseDirection_clear = _UA_BrowseDirection_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_delete(
      p,
    );
  }

  late final _UA_BrowseDirection_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_delete');
  late final _UA_BrowseDirection_delete = _UA_BrowseDirection_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ViewDescription_init(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_init(
      p,
    );
  }

  late final _UA_ViewDescription_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_init');
  late final _UA_ViewDescription_init = _UA_ViewDescription_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewDescription>)>();

  ffi.Pointer<UA_ViewDescription> UA_ViewDescription_new() {
    return _UA_ViewDescription_new();
  }

  late final _UA_ViewDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewDescription> Function()>>(
          'UA_ViewDescription_new');
  late final _UA_ViewDescription_new = _UA_ViewDescription_newPtr.asFunction<
      ffi.Pointer<UA_ViewDescription> Function()>();

  int UA_ViewDescription_copy(
    ffi.Pointer<UA_ViewDescription> src,
    ffi.Pointer<UA_ViewDescription> dst,
  ) {
    return _UA_ViewDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ViewDescription>,
              ffi.Pointer<UA_ViewDescription>)>>('UA_ViewDescription_copy');
  late final _UA_ViewDescription_copy = _UA_ViewDescription_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_deleteMembers(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ViewDescription_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_deleteMembers');
  late final _UA_ViewDescription_deleteMembers =
      _UA_ViewDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_clear(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_clear(
      p,
    );
  }

  late final _UA_ViewDescription_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_clear');
  late final _UA_ViewDescription_clear = _UA_ViewDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_delete(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_delete(
      p,
    );
  }

  late final _UA_ViewDescription_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_delete');
  late final _UA_ViewDescription_delete = _UA_ViewDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_BrowseDescription_init(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_init(
      p,
    );
  }

  late final _UA_BrowseDescription_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_init');
  late final _UA_BrowseDescription_init = _UA_BrowseDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  ffi.Pointer<UA_BrowseDescription> UA_BrowseDescription_new() {
    return _UA_BrowseDescription_new();
  }

  late final _UA_BrowseDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseDescription> Function()>>(
          'UA_BrowseDescription_new');
  late final _UA_BrowseDescription_new = _UA_BrowseDescription_newPtr
      .asFunction<ffi.Pointer<UA_BrowseDescription> Function()>();

  int UA_BrowseDescription_copy(
    ffi.Pointer<UA_BrowseDescription> src,
    ffi.Pointer<UA_BrowseDescription> dst,
  ) {
    return _UA_BrowseDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_copy');
  late final _UA_BrowseDescription_copy =
      _UA_BrowseDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_deleteMembers(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_deleteMembers');
  late final _UA_BrowseDescription_deleteMembers =
      _UA_BrowseDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_clear(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_clear(
      p,
    );
  }

  late final _UA_BrowseDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_clear');
  late final _UA_BrowseDescription_clear = _UA_BrowseDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_delete(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_delete(
      p,
    );
  }

  late final _UA_BrowseDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_delete');
  late final _UA_BrowseDescription_delete = _UA_BrowseDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseResultMask_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_init(
      p,
    );
  }

  late final _UA_BrowseResultMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_init');
  late final _UA_BrowseResultMask_init = _UA_BrowseResultMask_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrowseResultMask_new() {
    return _UA_BrowseResultMask_new();
  }

  late final _UA_BrowseResultMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrowseResultMask_new');
  late final _UA_BrowseResultMask_new = _UA_BrowseResultMask_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrowseResultMask_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrowseResultMask_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResultMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_BrowseResultMask_copy');
  late final _UA_BrowseResultMask_copy =
      _UA_BrowseResultMask_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResultMask_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_deleteMembers');
  late final _UA_BrowseResultMask_deleteMembers =
      _UA_BrowseResultMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_clear(
      p,
    );
  }

  late final _UA_BrowseResultMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_clear');
  late final _UA_BrowseResultMask_clear = _UA_BrowseResultMask_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_delete(
      p,
    );
  }

  late final _UA_BrowseResultMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_delete');
  late final _UA_BrowseResultMask_delete = _UA_BrowseResultMask_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ReferenceDescription_init(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_init(
      p,
    );
  }

  late final _UA_ReferenceDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_init');
  late final _UA_ReferenceDescription_init = _UA_ReferenceDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  ffi.Pointer<UA_ReferenceDescription> UA_ReferenceDescription_new() {
    return _UA_ReferenceDescription_new();
  }

  late final _UA_ReferenceDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ReferenceDescription> Function()>>(
      'UA_ReferenceDescription_new');
  late final _UA_ReferenceDescription_new = _UA_ReferenceDescription_newPtr
      .asFunction<ffi.Pointer<UA_ReferenceDescription> Function()>();

  int UA_ReferenceDescription_copy(
    ffi.Pointer<UA_ReferenceDescription> src,
    ffi.Pointer<UA_ReferenceDescription> dst,
  ) {
    return _UA_ReferenceDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReferenceDescription>,
                  ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_copy');
  late final _UA_ReferenceDescription_copy =
      _UA_ReferenceDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReferenceDescription>,
              ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_deleteMembers(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ReferenceDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_deleteMembers');
  late final _UA_ReferenceDescription_deleteMembers =
      _UA_ReferenceDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_clear(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_clear(
      p,
    );
  }

  late final _UA_ReferenceDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_clear');
  late final _UA_ReferenceDescription_clear = _UA_ReferenceDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_delete(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_delete(
      p,
    );
  }

  late final _UA_ReferenceDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_delete');
  late final _UA_ReferenceDescription_delete =
      _UA_ReferenceDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_BrowseResult_init(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_init(
      p,
    );
  }

  late final _UA_BrowseResult_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_init');
  late final _UA_BrowseResult_init = _UA_BrowseResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  ffi.Pointer<UA_BrowseResult> UA_BrowseResult_new() {
    return _UA_BrowseResult_new();
  }

  late final _UA_BrowseResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResult> Function()>>(
          'UA_BrowseResult_new');
  late final _UA_BrowseResult_new = _UA_BrowseResult_newPtr.asFunction<
      ffi.Pointer<UA_BrowseResult> Function()>();

  int UA_BrowseResult_copy(
    ffi.Pointer<UA_BrowseResult> src,
    ffi.Pointer<UA_BrowseResult> dst,
  ) {
    return _UA_BrowseResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseResult>,
              ffi.Pointer<UA_BrowseResult>)>>('UA_BrowseResult_copy');
  late final _UA_BrowseResult_copy = _UA_BrowseResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_deleteMembers(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_deleteMembers');
  late final _UA_BrowseResult_deleteMembers = _UA_BrowseResult_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_clear(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_clear(
      p,
    );
  }

  late final _UA_BrowseResult_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_clear');
  late final _UA_BrowseResult_clear = _UA_BrowseResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_delete(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_delete(
      p,
    );
  }

  late final _UA_BrowseResult_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_delete');
  late final _UA_BrowseResult_delete = _UA_BrowseResult_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseRequest_init(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_init(
      p,
    );
  }

  late final _UA_BrowseRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_init');
  late final _UA_BrowseRequest_init = _UA_BrowseRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  ffi.Pointer<UA_BrowseRequest> UA_BrowseRequest_new() {
    return _UA_BrowseRequest_new();
  }

  late final _UA_BrowseRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseRequest> Function()>>(
          'UA_BrowseRequest_new');
  late final _UA_BrowseRequest_new = _UA_BrowseRequest_newPtr.asFunction<
      ffi.Pointer<UA_BrowseRequest> Function()>();

  int UA_BrowseRequest_copy(
    ffi.Pointer<UA_BrowseRequest> src,
    ffi.Pointer<UA_BrowseRequest> dst,
  ) {
    return _UA_BrowseRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseRequest>,
              ffi.Pointer<UA_BrowseRequest>)>>('UA_BrowseRequest_copy');
  late final _UA_BrowseRequest_copy = _UA_BrowseRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_deleteMembers(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_deleteMembers');
  late final _UA_BrowseRequest_deleteMembers =
      _UA_BrowseRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_clear(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_clear(
      p,
    );
  }

  late final _UA_BrowseRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_clear');
  late final _UA_BrowseRequest_clear = _UA_BrowseRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_delete(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_delete(
      p,
    );
  }

  late final _UA_BrowseRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_delete');
  late final _UA_BrowseRequest_delete = _UA_BrowseRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseResponse_init(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_init(
      p,
    );
  }

  late final _UA_BrowseResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_init');
  late final _UA_BrowseResponse_init = _UA_BrowseResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResponse>)>();

  ffi.Pointer<UA_BrowseResponse> UA_BrowseResponse_new() {
    return _UA_BrowseResponse_new();
  }

  late final _UA_BrowseResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResponse> Function()>>(
          'UA_BrowseResponse_new');
  late final _UA_BrowseResponse_new = _UA_BrowseResponse_newPtr.asFunction<
      ffi.Pointer<UA_BrowseResponse> Function()>();

  int UA_BrowseResponse_copy(
    ffi.Pointer<UA_BrowseResponse> src,
    ffi.Pointer<UA_BrowseResponse> dst,
  ) {
    return _UA_BrowseResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseResponse>,
              ffi.Pointer<UA_BrowseResponse>)>>('UA_BrowseResponse_copy');
  late final _UA_BrowseResponse_copy = _UA_BrowseResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_deleteMembers(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_deleteMembers');
  late final _UA_BrowseResponse_deleteMembers =
      _UA_BrowseResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_clear(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_clear(
      p,
    );
  }

  late final _UA_BrowseResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_clear');
  late final _UA_BrowseResponse_clear = _UA_BrowseResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_delete(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_delete(
      p,
    );
  }

  late final _UA_BrowseResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_delete');
  late final _UA_BrowseResponse_delete = _UA_BrowseResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseNextRequest_init(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_init(
      p,
    );
  }

  late final _UA_BrowseNextRequest_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_init');
  late final _UA_BrowseNextRequest_init = _UA_BrowseNextRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  ffi.Pointer<UA_BrowseNextRequest> UA_BrowseNextRequest_new() {
    return _UA_BrowseNextRequest_new();
  }

  late final _UA_BrowseNextRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>>(
          'UA_BrowseNextRequest_new');
  late final _UA_BrowseNextRequest_new = _UA_BrowseNextRequest_newPtr
      .asFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>();

  int UA_BrowseNextRequest_copy(
    ffi.Pointer<UA_BrowseNextRequest> src,
    ffi.Pointer<UA_BrowseNextRequest> dst,
  ) {
    return _UA_BrowseNextRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseNextRequest>,
              ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_copy');
  late final _UA_BrowseNextRequest_copy =
      _UA_BrowseNextRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseNextRequest>,
              ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_deleteMembers(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseNextRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_deleteMembers');
  late final _UA_BrowseNextRequest_deleteMembers =
      _UA_BrowseNextRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_clear(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_clear(
      p,
    );
  }

  late final _UA_BrowseNextRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_clear');
  late final _UA_BrowseNextRequest_clear = _UA_BrowseNextRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_delete(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_delete(
      p,
    );
  }

  late final _UA_BrowseNextRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_delete');
  late final _UA_BrowseNextRequest_delete = _UA_BrowseNextRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextResponse_init(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_init(
      p,
    );
  }

  late final _UA_BrowseNextResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_init');
  late final _UA_BrowseNextResponse_init = _UA_BrowseNextResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  ffi.Pointer<UA_BrowseNextResponse> UA_BrowseNextResponse_new() {
    return _UA_BrowseNextResponse_new();
  }

  late final _UA_BrowseNextResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>>(
      'UA_BrowseNextResponse_new');
  late final _UA_BrowseNextResponse_new = _UA_BrowseNextResponse_newPtr
      .asFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>();

  int UA_BrowseNextResponse_copy(
    ffi.Pointer<UA_BrowseNextResponse> src,
    ffi.Pointer<UA_BrowseNextResponse> dst,
  ) {
    return _UA_BrowseNextResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_BrowseNextResponse>,
                  ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_copy');
  late final _UA_BrowseNextResponse_copy =
      _UA_BrowseNextResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseNextResponse>,
              ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_deleteMembers(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseNextResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_deleteMembers');
  late final _UA_BrowseNextResponse_deleteMembers =
      _UA_BrowseNextResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_clear(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_clear(
      p,
    );
  }

  late final _UA_BrowseNextResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_clear');
  late final _UA_BrowseNextResponse_clear = _UA_BrowseNextResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_delete(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_delete(
      p,
    );
  }

  late final _UA_BrowseNextResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_delete');
  late final _UA_BrowseNextResponse_delete = _UA_BrowseNextResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_RelativePathElement_init(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_init(
      p,
    );
  }

  late final _UA_RelativePathElement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_init');
  late final _UA_RelativePathElement_init = _UA_RelativePathElement_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  ffi.Pointer<UA_RelativePathElement> UA_RelativePathElement_new() {
    return _UA_RelativePathElement_new();
  }

  late final _UA_RelativePathElement_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RelativePathElement> Function()>>(
      'UA_RelativePathElement_new');
  late final _UA_RelativePathElement_new = _UA_RelativePathElement_newPtr
      .asFunction<ffi.Pointer<UA_RelativePathElement> Function()>();

  int UA_RelativePathElement_copy(
    ffi.Pointer<UA_RelativePathElement> src,
    ffi.Pointer<UA_RelativePathElement> dst,
  ) {
    return _UA_RelativePathElement_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePathElement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RelativePathElement>,
                  ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_copy');
  late final _UA_RelativePathElement_copy =
      _UA_RelativePathElement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RelativePathElement>,
              ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_deleteMembers(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_deleteMembers(
      p,
    );
  }

  late final _UA_RelativePathElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_deleteMembers');
  late final _UA_RelativePathElement_deleteMembers =
      _UA_RelativePathElement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_clear(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_clear(
      p,
    );
  }

  late final _UA_RelativePathElement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_clear');
  late final _UA_RelativePathElement_clear = _UA_RelativePathElement_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_delete(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_delete(
      p,
    );
  }

  late final _UA_RelativePathElement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_delete');
  late final _UA_RelativePathElement_delete = _UA_RelativePathElement_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePath_init(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_init(
      p,
    );
  }

  late final _UA_RelativePath_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_init');
  late final _UA_RelativePath_init = _UA_RelativePath_initPtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  ffi.Pointer<UA_RelativePath> UA_RelativePath_new() {
    return _UA_RelativePath_new();
  }

  late final _UA_RelativePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RelativePath> Function()>>(
          'UA_RelativePath_new');
  late final _UA_RelativePath_new = _UA_RelativePath_newPtr.asFunction<
      ffi.Pointer<UA_RelativePath> Function()>();

  int UA_RelativePath_copy(
    ffi.Pointer<UA_RelativePath> src,
    ffi.Pointer<UA_RelativePath> dst,
  ) {
    return _UA_RelativePath_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePath_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RelativePath>,
              ffi.Pointer<UA_RelativePath>)>>('UA_RelativePath_copy');
  late final _UA_RelativePath_copy = _UA_RelativePath_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_deleteMembers(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_deleteMembers(
      p,
    );
  }

  late final _UA_RelativePath_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_deleteMembers');
  late final _UA_RelativePath_deleteMembers = _UA_RelativePath_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_clear(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_clear(
      p,
    );
  }

  late final _UA_RelativePath_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_clear');
  late final _UA_RelativePath_clear = _UA_RelativePath_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_delete(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_delete(
      p,
    );
  }

  late final _UA_RelativePath_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_delete');
  late final _UA_RelativePath_delete = _UA_RelativePath_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_BrowsePath_init(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_init(
      p,
    );
  }

  late final _UA_BrowsePath_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_init');
  late final _UA_BrowsePath_init = _UA_BrowsePath_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  ffi.Pointer<UA_BrowsePath> UA_BrowsePath_new() {
    return _UA_BrowsePath_new();
  }

  late final _UA_BrowsePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePath> Function()>>(
          'UA_BrowsePath_new');
  late final _UA_BrowsePath_new =
      _UA_BrowsePath_newPtr.asFunction<ffi.Pointer<UA_BrowsePath> Function()>();

  int UA_BrowsePath_copy(
    ffi.Pointer<UA_BrowsePath> src,
    ffi.Pointer<UA_BrowsePath> dst,
  ) {
    return _UA_BrowsePath_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePath_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePath>,
              ffi.Pointer<UA_BrowsePath>)>>('UA_BrowsePath_copy');
  late final _UA_BrowsePath_copy = _UA_BrowsePath_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_deleteMembers(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePath_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_deleteMembers');
  late final _UA_BrowsePath_deleteMembers = _UA_BrowsePath_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_clear(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_clear(
      p,
    );
  }

  late final _UA_BrowsePath_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_clear');
  late final _UA_BrowsePath_clear = _UA_BrowsePath_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_delete(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_delete(
      p,
    );
  }

  late final _UA_BrowsePath_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_delete');
  late final _UA_BrowsePath_delete = _UA_BrowsePath_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePathTarget_init(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_init(
      p,
    );
  }

  late final _UA_BrowsePathTarget_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_init');
  late final _UA_BrowsePathTarget_init = _UA_BrowsePathTarget_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  ffi.Pointer<UA_BrowsePathTarget> UA_BrowsePathTarget_new() {
    return _UA_BrowsePathTarget_new();
  }

  late final _UA_BrowsePathTarget_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathTarget> Function()>>(
          'UA_BrowsePathTarget_new');
  late final _UA_BrowsePathTarget_new = _UA_BrowsePathTarget_newPtr.asFunction<
      ffi.Pointer<UA_BrowsePathTarget> Function()>();

  int UA_BrowsePathTarget_copy(
    ffi.Pointer<UA_BrowsePathTarget> src,
    ffi.Pointer<UA_BrowsePathTarget> dst,
  ) {
    return _UA_BrowsePathTarget_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathTarget_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePathTarget>,
              ffi.Pointer<UA_BrowsePathTarget>)>>('UA_BrowsePathTarget_copy');
  late final _UA_BrowsePathTarget_copy =
      _UA_BrowsePathTarget_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowsePathTarget>,
              ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_deleteMembers(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePathTarget_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_deleteMembers');
  late final _UA_BrowsePathTarget_deleteMembers =
      _UA_BrowsePathTarget_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_clear(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_clear(
      p,
    );
  }

  late final _UA_BrowsePathTarget_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_clear');
  late final _UA_BrowsePathTarget_clear = _UA_BrowsePathTarget_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_delete(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_delete(
      p,
    );
  }

  late final _UA_BrowsePathTarget_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_delete');
  late final _UA_BrowsePathTarget_delete = _UA_BrowsePathTarget_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathResult_init(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_init(
      p,
    );
  }

  late final _UA_BrowsePathResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_init');
  late final _UA_BrowsePathResult_init = _UA_BrowsePathResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  ffi.Pointer<UA_BrowsePathResult> UA_BrowsePathResult_new() {
    return _UA_BrowsePathResult_new();
  }

  late final _UA_BrowsePathResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathResult> Function()>>(
          'UA_BrowsePathResult_new');
  late final _UA_BrowsePathResult_new = _UA_BrowsePathResult_newPtr.asFunction<
      ffi.Pointer<UA_BrowsePathResult> Function()>();

  int UA_BrowsePathResult_copy(
    ffi.Pointer<UA_BrowsePathResult> src,
    ffi.Pointer<UA_BrowsePathResult> dst,
  ) {
    return _UA_BrowsePathResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePathResult>,
              ffi.Pointer<UA_BrowsePathResult>)>>('UA_BrowsePathResult_copy');
  late final _UA_BrowsePathResult_copy =
      _UA_BrowsePathResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowsePathResult>,
              ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_deleteMembers(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePathResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_deleteMembers');
  late final _UA_BrowsePathResult_deleteMembers =
      _UA_BrowsePathResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_clear(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_clear(
      p,
    );
  }

  late final _UA_BrowsePathResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_clear');
  late final _UA_BrowsePathResult_clear = _UA_BrowsePathResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_delete(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_delete(
      p,
    );
  }

  late final _UA_BrowsePathResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_delete');
  late final _UA_BrowsePathResult_delete = _UA_BrowsePathResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_init');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_init =
      _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>
      UA_TranslateBrowsePathsToNodeIdsRequest_new() {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>
              Function()>>('UA_TranslateBrowsePathsToNodeIdsRequest_new');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_new =
      _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr.asFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsRequest_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copy =
      _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers =
      _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clear =
      _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_delete =
      _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_init');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_init =
      _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>
      UA_TranslateBrowsePathsToNodeIdsResponse_new() {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>
              Function()>>('UA_TranslateBrowsePathsToNodeIdsResponse_new');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_new =
      _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr.asFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsResponse_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copy =
      _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers =
      _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clear =
      _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_delete =
      _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_RegisterNodesRequest_init(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_init(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_init');
  late final _UA_RegisterNodesRequest_init = _UA_RegisterNodesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  ffi.Pointer<UA_RegisterNodesRequest> UA_RegisterNodesRequest_new() {
    return _UA_RegisterNodesRequest_new();
  }

  late final _UA_RegisterNodesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>>(
      'UA_RegisterNodesRequest_new');
  late final _UA_RegisterNodesRequest_new = _UA_RegisterNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>();

  int UA_RegisterNodesRequest_copy(
    ffi.Pointer<UA_RegisterNodesRequest> src,
    ffi.Pointer<UA_RegisterNodesRequest> dst,
  ) {
    return _UA_RegisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesRequest>,
                  ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_copy');
  late final _UA_RegisterNodesRequest_copy =
      _UA_RegisterNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RegisterNodesRequest>,
              ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_deleteMembers(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_deleteMembers');
  late final _UA_RegisterNodesRequest_deleteMembers =
      _UA_RegisterNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_clear(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_clear');
  late final _UA_RegisterNodesRequest_clear = _UA_RegisterNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_delete(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_delete');
  late final _UA_RegisterNodesRequest_delete =
      _UA_RegisterNodesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesResponse_init(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_init(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_init');
  late final _UA_RegisterNodesResponse_init = _UA_RegisterNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  ffi.Pointer<UA_RegisterNodesResponse> UA_RegisterNodesResponse_new() {
    return _UA_RegisterNodesResponse_new();
  }

  late final _UA_RegisterNodesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>>(
      'UA_RegisterNodesResponse_new');
  late final _UA_RegisterNodesResponse_new = _UA_RegisterNodesResponse_newPtr
      .asFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>();

  int UA_RegisterNodesResponse_copy(
    ffi.Pointer<UA_RegisterNodesResponse> src,
    ffi.Pointer<UA_RegisterNodesResponse> dst,
  ) {
    return _UA_RegisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesResponse>,
                  ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_copy');
  late final _UA_RegisterNodesResponse_copy =
      _UA_RegisterNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RegisterNodesResponse>,
              ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_deleteMembers(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_deleteMembers');
  late final _UA_RegisterNodesResponse_deleteMembers =
      _UA_RegisterNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_clear(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_clear');
  late final _UA_RegisterNodesResponse_clear =
      _UA_RegisterNodesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_delete(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_delete');
  late final _UA_RegisterNodesResponse_delete =
      _UA_RegisterNodesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_UnregisterNodesRequest_init(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_init(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_init');
  late final _UA_UnregisterNodesRequest_init =
      _UA_UnregisterNodesRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  ffi.Pointer<UA_UnregisterNodesRequest> UA_UnregisterNodesRequest_new() {
    return _UA_UnregisterNodesRequest_new();
  }

  late final _UA_UnregisterNodesRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>>(
      'UA_UnregisterNodesRequest_new');
  late final _UA_UnregisterNodesRequest_new = _UA_UnregisterNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>();

  int UA_UnregisterNodesRequest_copy(
    ffi.Pointer<UA_UnregisterNodesRequest> src,
    ffi.Pointer<UA_UnregisterNodesRequest> dst,
  ) {
    return _UA_UnregisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesRequest>,
                  ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_copy');
  late final _UA_UnregisterNodesRequest_copy =
      _UA_UnregisterNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UnregisterNodesRequest>,
              ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_deleteMembers(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_deleteMembers');
  late final _UA_UnregisterNodesRequest_deleteMembers =
      _UA_UnregisterNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_clear(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_clear');
  late final _UA_UnregisterNodesRequest_clear =
      _UA_UnregisterNodesRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_delete(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_delete');
  late final _UA_UnregisterNodesRequest_delete =
      _UA_UnregisterNodesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesResponse_init(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_init(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_init');
  late final _UA_UnregisterNodesResponse_init =
      _UA_UnregisterNodesResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  ffi.Pointer<UA_UnregisterNodesResponse> UA_UnregisterNodesResponse_new() {
    return _UA_UnregisterNodesResponse_new();
  }

  late final _UA_UnregisterNodesResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_UnregisterNodesResponse> Function()>>(
      'UA_UnregisterNodesResponse_new');
  late final _UA_UnregisterNodesResponse_new =
      _UA_UnregisterNodesResponse_newPtr.asFunction<
          ffi.Pointer<UA_UnregisterNodesResponse> Function()>();

  int UA_UnregisterNodesResponse_copy(
    ffi.Pointer<UA_UnregisterNodesResponse> src,
    ffi.Pointer<UA_UnregisterNodesResponse> dst,
  ) {
    return _UA_UnregisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesResponse>,
                  ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_copy');
  late final _UA_UnregisterNodesResponse_copy =
      _UA_UnregisterNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UnregisterNodesResponse>,
              ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_deleteMembers(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_deleteMembers');
  late final _UA_UnregisterNodesResponse_deleteMembers =
      _UA_UnregisterNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_clear(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_clear');
  late final _UA_UnregisterNodesResponse_clear =
      _UA_UnregisterNodesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_delete(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_delete');
  late final _UA_UnregisterNodesResponse_delete =
      _UA_UnregisterNodesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_FilterOperator_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_init(
      p,
    );
  }

  late final _UA_FilterOperator_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_init');
  late final _UA_FilterOperator_init = _UA_FilterOperator_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_FilterOperator_new() {
    return _UA_FilterOperator_new();
  }

  late final _UA_FilterOperator_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_FilterOperator_new');
  late final _UA_FilterOperator_new =
      _UA_FilterOperator_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_FilterOperator_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_FilterOperator_copy(
      src,
      dst,
    );
  }

  late final _UA_FilterOperator_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_FilterOperator_copy');
  late final _UA_FilterOperator_copy = _UA_FilterOperator_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_deleteMembers(
      p,
    );
  }

  late final _UA_FilterOperator_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_deleteMembers');
  late final _UA_FilterOperator_deleteMembers =
      _UA_FilterOperator_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_clear(
      p,
    );
  }

  late final _UA_FilterOperator_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_clear');
  late final _UA_FilterOperator_clear = _UA_FilterOperator_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_delete(
      p,
    );
  }

  late final _UA_FilterOperator_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_delete');
  late final _UA_FilterOperator_delete = _UA_FilterOperator_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ContentFilterElement_init(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_init(
      p,
    );
  }

  late final _UA_ContentFilterElement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_init');
  late final _UA_ContentFilterElement_init = _UA_ContentFilterElement_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  ffi.Pointer<UA_ContentFilterElement> UA_ContentFilterElement_new() {
    return _UA_ContentFilterElement_new();
  }

  late final _UA_ContentFilterElement_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ContentFilterElement> Function()>>(
      'UA_ContentFilterElement_new');
  late final _UA_ContentFilterElement_new = _UA_ContentFilterElement_newPtr
      .asFunction<ffi.Pointer<UA_ContentFilterElement> Function()>();

  int UA_ContentFilterElement_copy(
    ffi.Pointer<UA_ContentFilterElement> src,
    ffi.Pointer<UA_ContentFilterElement> dst,
  ) {
    return _UA_ContentFilterElement_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElement>,
                  ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_copy');
  late final _UA_ContentFilterElement_copy =
      _UA_ContentFilterElement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterElement>,
              ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_deleteMembers(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_deleteMembers');
  late final _UA_ContentFilterElement_deleteMembers =
      _UA_ContentFilterElement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_clear(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_clear(
      p,
    );
  }

  late final _UA_ContentFilterElement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_clear');
  late final _UA_ContentFilterElement_clear = _UA_ContentFilterElement_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_delete(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_delete(
      p,
    );
  }

  late final _UA_ContentFilterElement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_delete');
  late final _UA_ContentFilterElement_delete =
      _UA_ContentFilterElement_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilter_init(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_init(
      p,
    );
  }

  late final _UA_ContentFilter_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_init');
  late final _UA_ContentFilter_init = _UA_ContentFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  ffi.Pointer<UA_ContentFilter> UA_ContentFilter_new() {
    return _UA_ContentFilter_new();
  }

  late final _UA_ContentFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilter> Function()>>(
          'UA_ContentFilter_new');
  late final _UA_ContentFilter_new = _UA_ContentFilter_newPtr.asFunction<
      ffi.Pointer<UA_ContentFilter> Function()>();

  int UA_ContentFilter_copy(
    ffi.Pointer<UA_ContentFilter> src,
    ffi.Pointer<UA_ContentFilter> dst,
  ) {
    return _UA_ContentFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ContentFilter>,
              ffi.Pointer<UA_ContentFilter>)>>('UA_ContentFilter_copy');
  late final _UA_ContentFilter_copy = _UA_ContentFilter_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_deleteMembers(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilter_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_deleteMembers');
  late final _UA_ContentFilter_deleteMembers =
      _UA_ContentFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_clear(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_clear(
      p,
    );
  }

  late final _UA_ContentFilter_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_clear');
  late final _UA_ContentFilter_clear = _UA_ContentFilter_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_delete(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_delete(
      p,
    );
  }

  late final _UA_ContentFilter_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_delete');
  late final _UA_ContentFilter_delete = _UA_ContentFilter_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ElementOperand_init(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_init(
      p,
    );
  }

  late final _UA_ElementOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_init');
  late final _UA_ElementOperand_init = _UA_ElementOperand_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ElementOperand>)>();

  ffi.Pointer<UA_ElementOperand> UA_ElementOperand_new() {
    return _UA_ElementOperand_new();
  }

  late final _UA_ElementOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ElementOperand> Function()>>(
          'UA_ElementOperand_new');
  late final _UA_ElementOperand_new = _UA_ElementOperand_newPtr.asFunction<
      ffi.Pointer<UA_ElementOperand> Function()>();

  int UA_ElementOperand_copy(
    ffi.Pointer<UA_ElementOperand> src,
    ffi.Pointer<UA_ElementOperand> dst,
  ) {
    return _UA_ElementOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_ElementOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ElementOperand>,
              ffi.Pointer<UA_ElementOperand>)>>('UA_ElementOperand_copy');
  late final _UA_ElementOperand_copy = _UA_ElementOperand_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_deleteMembers(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_deleteMembers(
      p,
    );
  }

  late final _UA_ElementOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_deleteMembers');
  late final _UA_ElementOperand_deleteMembers =
      _UA_ElementOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_clear(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_clear(
      p,
    );
  }

  late final _UA_ElementOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_clear');
  late final _UA_ElementOperand_clear = _UA_ElementOperand_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_delete(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_delete(
      p,
    );
  }

  late final _UA_ElementOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_delete');
  late final _UA_ElementOperand_delete = _UA_ElementOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_LiteralOperand_init(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_init(
      p,
    );
  }

  late final _UA_LiteralOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_init');
  late final _UA_LiteralOperand_init = _UA_LiteralOperand_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LiteralOperand>)>();

  ffi.Pointer<UA_LiteralOperand> UA_LiteralOperand_new() {
    return _UA_LiteralOperand_new();
  }

  late final _UA_LiteralOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LiteralOperand> Function()>>(
          'UA_LiteralOperand_new');
  late final _UA_LiteralOperand_new = _UA_LiteralOperand_newPtr.asFunction<
      ffi.Pointer<UA_LiteralOperand> Function()>();

  int UA_LiteralOperand_copy(
    ffi.Pointer<UA_LiteralOperand> src,
    ffi.Pointer<UA_LiteralOperand> dst,
  ) {
    return _UA_LiteralOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_LiteralOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LiteralOperand>,
              ffi.Pointer<UA_LiteralOperand>)>>('UA_LiteralOperand_copy');
  late final _UA_LiteralOperand_copy = _UA_LiteralOperand_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_deleteMembers(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_deleteMembers(
      p,
    );
  }

  late final _UA_LiteralOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_deleteMembers');
  late final _UA_LiteralOperand_deleteMembers =
      _UA_LiteralOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_clear(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_clear(
      p,
    );
  }

  late final _UA_LiteralOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_clear');
  late final _UA_LiteralOperand_clear = _UA_LiteralOperand_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_delete(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_delete(
      p,
    );
  }

  late final _UA_LiteralOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_delete');
  late final _UA_LiteralOperand_delete = _UA_LiteralOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_AttributeOperand_init(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_init(
      p,
    );
  }

  late final _UA_AttributeOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_init');
  late final _UA_AttributeOperand_init = _UA_AttributeOperand_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  ffi.Pointer<UA_AttributeOperand> UA_AttributeOperand_new() {
    return _UA_AttributeOperand_new();
  }

  late final _UA_AttributeOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AttributeOperand> Function()>>(
          'UA_AttributeOperand_new');
  late final _UA_AttributeOperand_new = _UA_AttributeOperand_newPtr.asFunction<
      ffi.Pointer<UA_AttributeOperand> Function()>();

  int UA_AttributeOperand_copy(
    ffi.Pointer<UA_AttributeOperand> src,
    ffi.Pointer<UA_AttributeOperand> dst,
  ) {
    return _UA_AttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_AttributeOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AttributeOperand>,
              ffi.Pointer<UA_AttributeOperand>)>>('UA_AttributeOperand_copy');
  late final _UA_AttributeOperand_copy =
      _UA_AttributeOperand_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AttributeOperand>,
              ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_deleteMembers(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_deleteMembers(
      p,
    );
  }

  late final _UA_AttributeOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_deleteMembers');
  late final _UA_AttributeOperand_deleteMembers =
      _UA_AttributeOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_clear(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_clear(
      p,
    );
  }

  late final _UA_AttributeOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_clear');
  late final _UA_AttributeOperand_clear = _UA_AttributeOperand_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_delete(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_delete(
      p,
    );
  }

  late final _UA_AttributeOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_delete');
  late final _UA_AttributeOperand_delete = _UA_AttributeOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_SimpleAttributeOperand_init(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_init(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_init');
  late final _UA_SimpleAttributeOperand_init =
      _UA_SimpleAttributeOperand_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  ffi.Pointer<UA_SimpleAttributeOperand> UA_SimpleAttributeOperand_new() {
    return _UA_SimpleAttributeOperand_new();
  }

  late final _UA_SimpleAttributeOperand_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>>(
      'UA_SimpleAttributeOperand_new');
  late final _UA_SimpleAttributeOperand_new = _UA_SimpleAttributeOperand_newPtr
      .asFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>();

  int UA_SimpleAttributeOperand_copy(
    ffi.Pointer<UA_SimpleAttributeOperand> src,
    ffi.Pointer<UA_SimpleAttributeOperand> dst,
  ) {
    return _UA_SimpleAttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleAttributeOperand_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SimpleAttributeOperand>,
                  ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_copy');
  late final _UA_SimpleAttributeOperand_copy =
      _UA_SimpleAttributeOperand_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SimpleAttributeOperand>,
              ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_deleteMembers(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_deleteMembers(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_deleteMembers');
  late final _UA_SimpleAttributeOperand_deleteMembers =
      _UA_SimpleAttributeOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_clear(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_clear(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_clear');
  late final _UA_SimpleAttributeOperand_clear =
      _UA_SimpleAttributeOperand_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_delete(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_delete(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_delete');
  late final _UA_SimpleAttributeOperand_delete =
      _UA_SimpleAttributeOperand_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_ContentFilterElementResult_init(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_init(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_init');
  late final _UA_ContentFilterElementResult_init =
      _UA_ContentFilterElementResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  ffi.Pointer<UA_ContentFilterElementResult>
      UA_ContentFilterElementResult_new() {
    return _UA_ContentFilterElementResult_new();
  }

  late final _UA_ContentFilterElementResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ContentFilterElementResult>
              Function()>>('UA_ContentFilterElementResult_new');
  late final _UA_ContentFilterElementResult_new =
      _UA_ContentFilterElementResult_newPtr.asFunction<
          ffi.Pointer<UA_ContentFilterElementResult> Function()>();

  int UA_ContentFilterElementResult_copy(
    ffi.Pointer<UA_ContentFilterElementResult> src,
    ffi.Pointer<UA_ContentFilterElementResult> dst,
  ) {
    return _UA_ContentFilterElementResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElementResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElementResult>,
                  ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_copy');
  late final _UA_ContentFilterElementResult_copy =
      _UA_ContentFilterElementResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterElementResult>,
              ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_deleteMembers(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_deleteMembers');
  late final _UA_ContentFilterElementResult_deleteMembers =
      _UA_ContentFilterElementResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_clear(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_clear');
  late final _UA_ContentFilterElementResult_clear =
      _UA_ContentFilterElementResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_delete(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_delete');
  late final _UA_ContentFilterElementResult_delete =
      _UA_ContentFilterElementResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterResult_init(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_init(
      p,
    );
  }

  late final _UA_ContentFilterResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_init');
  late final _UA_ContentFilterResult_init = _UA_ContentFilterResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  ffi.Pointer<UA_ContentFilterResult> UA_ContentFilterResult_new() {
    return _UA_ContentFilterResult_new();
  }

  late final _UA_ContentFilterResult_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ContentFilterResult> Function()>>(
      'UA_ContentFilterResult_new');
  late final _UA_ContentFilterResult_new = _UA_ContentFilterResult_newPtr
      .asFunction<ffi.Pointer<UA_ContentFilterResult> Function()>();

  int UA_ContentFilterResult_copy(
    ffi.Pointer<UA_ContentFilterResult> src,
    ffi.Pointer<UA_ContentFilterResult> dst,
  ) {
    return _UA_ContentFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterResult>,
                  ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_copy');
  late final _UA_ContentFilterResult_copy =
      _UA_ContentFilterResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterResult>,
              ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_deleteMembers(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_deleteMembers');
  late final _UA_ContentFilterResult_deleteMembers =
      _UA_ContentFilterResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_clear(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_clear');
  late final _UA_ContentFilterResult_clear = _UA_ContentFilterResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_delete(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_delete');
  late final _UA_ContentFilterResult_delete = _UA_ContentFilterResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_TimestampsToReturn_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_init(
      p,
    );
  }

  late final _UA_TimestampsToReturn_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_init');
  late final _UA_TimestampsToReturn_init = _UA_TimestampsToReturn_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_TimestampsToReturn_new() {
    return _UA_TimestampsToReturn_new();
  }

  late final _UA_TimestampsToReturn_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_TimestampsToReturn_new');
  late final _UA_TimestampsToReturn_new = _UA_TimestampsToReturn_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_TimestampsToReturn_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_TimestampsToReturn_copy(
      src,
      dst,
    );
  }

  late final _UA_TimestampsToReturn_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_TimestampsToReturn_copy');
  late final _UA_TimestampsToReturn_copy =
      _UA_TimestampsToReturn_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_deleteMembers(
      p,
    );
  }

  late final _UA_TimestampsToReturn_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_deleteMembers');
  late final _UA_TimestampsToReturn_deleteMembers =
      _UA_TimestampsToReturn_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_clear(
      p,
    );
  }

  late final _UA_TimestampsToReturn_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_clear');
  late final _UA_TimestampsToReturn_clear = _UA_TimestampsToReturn_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_delete(
      p,
    );
  }

  late final _UA_TimestampsToReturn_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_delete');
  late final _UA_TimestampsToReturn_delete = _UA_TimestampsToReturn_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ReadValueId_init(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_init(
      p,
    );
  }

  late final _UA_ReadValueId_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_init');
  late final _UA_ReadValueId_init = _UA_ReadValueId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  ffi.Pointer<UA_ReadValueId> UA_ReadValueId_new() {
    return _UA_ReadValueId_new();
  }

  late final _UA_ReadValueId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadValueId> Function()>>(
          'UA_ReadValueId_new');
  late final _UA_ReadValueId_new = _UA_ReadValueId_newPtr.asFunction<
      ffi.Pointer<UA_ReadValueId> Function()>();

  int UA_ReadValueId_copy(
    ffi.Pointer<UA_ReadValueId> src,
    ffi.Pointer<UA_ReadValueId> dst,
  ) {
    return _UA_ReadValueId_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadValueId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadValueId>,
              ffi.Pointer<UA_ReadValueId>)>>('UA_ReadValueId_copy');
  late final _UA_ReadValueId_copy = _UA_ReadValueId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_deleteMembers(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_deleteMembers(
      p,
    );
  }

  late final _UA_ReadValueId_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_deleteMembers');
  late final _UA_ReadValueId_deleteMembers = _UA_ReadValueId_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_clear(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_clear(
      p,
    );
  }

  late final _UA_ReadValueId_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_clear');
  late final _UA_ReadValueId_clear = _UA_ReadValueId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_delete(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_delete(
      p,
    );
  }

  late final _UA_ReadValueId_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_delete');
  late final _UA_ReadValueId_delete = _UA_ReadValueId_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadRequest_init(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_init(
      p,
    );
  }

  late final _UA_ReadRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_init');
  late final _UA_ReadRequest_init = _UA_ReadRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  ffi.Pointer<UA_ReadRequest> UA_ReadRequest_new() {
    return _UA_ReadRequest_new();
  }

  late final _UA_ReadRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadRequest> Function()>>(
          'UA_ReadRequest_new');
  late final _UA_ReadRequest_new = _UA_ReadRequest_newPtr.asFunction<
      ffi.Pointer<UA_ReadRequest> Function()>();

  int UA_ReadRequest_copy(
    ffi.Pointer<UA_ReadRequest> src,
    ffi.Pointer<UA_ReadRequest> dst,
  ) {
    return _UA_ReadRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadRequest>,
              ffi.Pointer<UA_ReadRequest>)>>('UA_ReadRequest_copy');
  late final _UA_ReadRequest_copy = _UA_ReadRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_deleteMembers(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ReadRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_deleteMembers');
  late final _UA_ReadRequest_deleteMembers = _UA_ReadRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_clear(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_clear(
      p,
    );
  }

  late final _UA_ReadRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_clear');
  late final _UA_ReadRequest_clear = _UA_ReadRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_delete(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_delete(
      p,
    );
  }

  late final _UA_ReadRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_delete');
  late final _UA_ReadRequest_delete = _UA_ReadRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadResponse_init(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_init(
      p,
    );
  }

  late final _UA_ReadResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_init');
  late final _UA_ReadResponse_init = _UA_ReadResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  ffi.Pointer<UA_ReadResponse> UA_ReadResponse_new() {
    return _UA_ReadResponse_new();
  }

  late final _UA_ReadResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadResponse> Function()>>(
          'UA_ReadResponse_new');
  late final _UA_ReadResponse_new = _UA_ReadResponse_newPtr.asFunction<
      ffi.Pointer<UA_ReadResponse> Function()>();

  int UA_ReadResponse_copy(
    ffi.Pointer<UA_ReadResponse> src,
    ffi.Pointer<UA_ReadResponse> dst,
  ) {
    return _UA_ReadResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadResponse>,
              ffi.Pointer<UA_ReadResponse>)>>('UA_ReadResponse_copy');
  late final _UA_ReadResponse_copy = _UA_ReadResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_deleteMembers(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ReadResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_deleteMembers');
  late final _UA_ReadResponse_deleteMembers = _UA_ReadResponse_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_clear(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_clear(
      p,
    );
  }

  late final _UA_ReadResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_clear');
  late final _UA_ReadResponse_clear = _UA_ReadResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_delete(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_delete(
      p,
    );
  }

  late final _UA_ReadResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_delete');
  late final _UA_ReadResponse_delete = _UA_ReadResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_WriteValue_init(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_init(
      p,
    );
  }

  late final _UA_WriteValue_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_init');
  late final _UA_WriteValue_init = _UA_WriteValue_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  ffi.Pointer<UA_WriteValue> UA_WriteValue_new() {
    return _UA_WriteValue_new();
  }

  late final _UA_WriteValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteValue> Function()>>(
          'UA_WriteValue_new');
  late final _UA_WriteValue_new =
      _UA_WriteValue_newPtr.asFunction<ffi.Pointer<UA_WriteValue> Function()>();

  int UA_WriteValue_copy(
    ffi.Pointer<UA_WriteValue> src,
    ffi.Pointer<UA_WriteValue> dst,
  ) {
    return _UA_WriteValue_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteValue_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteValue>,
              ffi.Pointer<UA_WriteValue>)>>('UA_WriteValue_copy');
  late final _UA_WriteValue_copy = _UA_WriteValue_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_deleteMembers(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_deleteMembers(
      p,
    );
  }

  late final _UA_WriteValue_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_deleteMembers');
  late final _UA_WriteValue_deleteMembers = _UA_WriteValue_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_clear(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_clear(
      p,
    );
  }

  late final _UA_WriteValue_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_clear');
  late final _UA_WriteValue_clear = _UA_WriteValue_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_delete(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_delete(
      p,
    );
  }

  late final _UA_WriteValue_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_delete');
  late final _UA_WriteValue_delete = _UA_WriteValue_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteRequest_init(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_init(
      p,
    );
  }

  late final _UA_WriteRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_init');
  late final _UA_WriteRequest_init = _UA_WriteRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  ffi.Pointer<UA_WriteRequest> UA_WriteRequest_new() {
    return _UA_WriteRequest_new();
  }

  late final _UA_WriteRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteRequest> Function()>>(
          'UA_WriteRequest_new');
  late final _UA_WriteRequest_new = _UA_WriteRequest_newPtr.asFunction<
      ffi.Pointer<UA_WriteRequest> Function()>();

  int UA_WriteRequest_copy(
    ffi.Pointer<UA_WriteRequest> src,
    ffi.Pointer<UA_WriteRequest> dst,
  ) {
    return _UA_WriteRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteRequest>,
              ffi.Pointer<UA_WriteRequest>)>>('UA_WriteRequest_copy');
  late final _UA_WriteRequest_copy = _UA_WriteRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_deleteMembers(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_deleteMembers(
      p,
    );
  }

  late final _UA_WriteRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_deleteMembers');
  late final _UA_WriteRequest_deleteMembers = _UA_WriteRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_clear(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_clear(
      p,
    );
  }

  late final _UA_WriteRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_clear');
  late final _UA_WriteRequest_clear = _UA_WriteRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_delete(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_delete(
      p,
    );
  }

  late final _UA_WriteRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_delete');
  late final _UA_WriteRequest_delete = _UA_WriteRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteResponse_init(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_init(
      p,
    );
  }

  late final _UA_WriteResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_init');
  late final _UA_WriteResponse_init = _UA_WriteResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  ffi.Pointer<UA_WriteResponse> UA_WriteResponse_new() {
    return _UA_WriteResponse_new();
  }

  late final _UA_WriteResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteResponse> Function()>>(
          'UA_WriteResponse_new');
  late final _UA_WriteResponse_new = _UA_WriteResponse_newPtr.asFunction<
      ffi.Pointer<UA_WriteResponse> Function()>();

  int UA_WriteResponse_copy(
    ffi.Pointer<UA_WriteResponse> src,
    ffi.Pointer<UA_WriteResponse> dst,
  ) {
    return _UA_WriteResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteResponse>,
              ffi.Pointer<UA_WriteResponse>)>>('UA_WriteResponse_copy');
  late final _UA_WriteResponse_copy = _UA_WriteResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_deleteMembers(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_deleteMembers(
      p,
    );
  }

  late final _UA_WriteResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_deleteMembers');
  late final _UA_WriteResponse_deleteMembers =
      _UA_WriteResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_clear(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_clear(
      p,
    );
  }

  late final _UA_WriteResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_clear');
  late final _UA_WriteResponse_clear = _UA_WriteResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_delete(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_delete(
      p,
    );
  }

  late final _UA_WriteResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_delete');
  late final _UA_WriteResponse_delete = _UA_WriteResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_CallMethodRequest_init(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_init(
      p,
    );
  }

  late final _UA_CallMethodRequest_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_init');
  late final _UA_CallMethodRequest_init = _UA_CallMethodRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  ffi.Pointer<UA_CallMethodRequest> UA_CallMethodRequest_new() {
    return _UA_CallMethodRequest_new();
  }

  late final _UA_CallMethodRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodRequest> Function()>>(
          'UA_CallMethodRequest_new');
  late final _UA_CallMethodRequest_new = _UA_CallMethodRequest_newPtr
      .asFunction<ffi.Pointer<UA_CallMethodRequest> Function()>();

  int UA_CallMethodRequest_copy(
    ffi.Pointer<UA_CallMethodRequest> src,
    ffi.Pointer<UA_CallMethodRequest> dst,
  ) {
    return _UA_CallMethodRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallMethodRequest>,
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_copy');
  late final _UA_CallMethodRequest_copy =
      _UA_CallMethodRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CallMethodRequest>,
              ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_deleteMembers(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CallMethodRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_deleteMembers');
  late final _UA_CallMethodRequest_deleteMembers =
      _UA_CallMethodRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_clear(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_clear(
      p,
    );
  }

  late final _UA_CallMethodRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_clear');
  late final _UA_CallMethodRequest_clear = _UA_CallMethodRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_delete(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_delete(
      p,
    );
  }

  late final _UA_CallMethodRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_delete');
  late final _UA_CallMethodRequest_delete = _UA_CallMethodRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodResult_init(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_init(
      p,
    );
  }

  late final _UA_CallMethodResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_init');
  late final _UA_CallMethodResult_init = _UA_CallMethodResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  ffi.Pointer<UA_CallMethodResult> UA_CallMethodResult_new() {
    return _UA_CallMethodResult_new();
  }

  late final _UA_CallMethodResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodResult> Function()>>(
          'UA_CallMethodResult_new');
  late final _UA_CallMethodResult_new = _UA_CallMethodResult_newPtr.asFunction<
      ffi.Pointer<UA_CallMethodResult> Function()>();

  int UA_CallMethodResult_copy(
    ffi.Pointer<UA_CallMethodResult> src,
    ffi.Pointer<UA_CallMethodResult> dst,
  ) {
    return _UA_CallMethodResult_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallMethodResult>,
              ffi.Pointer<UA_CallMethodResult>)>>('UA_CallMethodResult_copy');
  late final _UA_CallMethodResult_copy =
      _UA_CallMethodResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CallMethodResult>,
              ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_deleteMembers(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_deleteMembers(
      p,
    );
  }

  late final _UA_CallMethodResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_deleteMembers');
  late final _UA_CallMethodResult_deleteMembers =
      _UA_CallMethodResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_clear(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_clear(
      p,
    );
  }

  late final _UA_CallMethodResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_clear');
  late final _UA_CallMethodResult_clear = _UA_CallMethodResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_delete(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_delete(
      p,
    );
  }

  late final _UA_CallMethodResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_delete');
  late final _UA_CallMethodResult_delete = _UA_CallMethodResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallRequest_init(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_init(
      p,
    );
  }

  late final _UA_CallRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_init');
  late final _UA_CallRequest_init = _UA_CallRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  ffi.Pointer<UA_CallRequest> UA_CallRequest_new() {
    return _UA_CallRequest_new();
  }

  late final _UA_CallRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallRequest> Function()>>(
          'UA_CallRequest_new');
  late final _UA_CallRequest_new = _UA_CallRequest_newPtr.asFunction<
      ffi.Pointer<UA_CallRequest> Function()>();

  int UA_CallRequest_copy(
    ffi.Pointer<UA_CallRequest> src,
    ffi.Pointer<UA_CallRequest> dst,
  ) {
    return _UA_CallRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallRequest>,
              ffi.Pointer<UA_CallRequest>)>>('UA_CallRequest_copy');
  late final _UA_CallRequest_copy = _UA_CallRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_deleteMembers(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CallRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_deleteMembers');
  late final _UA_CallRequest_deleteMembers = _UA_CallRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_clear(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_clear(
      p,
    );
  }

  late final _UA_CallRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_clear');
  late final _UA_CallRequest_clear = _UA_CallRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_delete(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_delete(
      p,
    );
  }

  late final _UA_CallRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_delete');
  late final _UA_CallRequest_delete = _UA_CallRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallResponse_init(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_init(
      p,
    );
  }

  late final _UA_CallResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_init');
  late final _UA_CallResponse_init = _UA_CallResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  ffi.Pointer<UA_CallResponse> UA_CallResponse_new() {
    return _UA_CallResponse_new();
  }

  late final _UA_CallResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallResponse> Function()>>(
          'UA_CallResponse_new');
  late final _UA_CallResponse_new = _UA_CallResponse_newPtr.asFunction<
      ffi.Pointer<UA_CallResponse> Function()>();

  int UA_CallResponse_copy(
    ffi.Pointer<UA_CallResponse> src,
    ffi.Pointer<UA_CallResponse> dst,
  ) {
    return _UA_CallResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CallResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallResponse>,
              ffi.Pointer<UA_CallResponse>)>>('UA_CallResponse_copy');
  late final _UA_CallResponse_copy = _UA_CallResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_deleteMembers(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CallResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_deleteMembers');
  late final _UA_CallResponse_deleteMembers = _UA_CallResponse_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_clear(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_clear(
      p,
    );
  }

  late final _UA_CallResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_clear');
  late final _UA_CallResponse_clear = _UA_CallResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_delete(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_delete(
      p,
    );
  }

  late final _UA_CallResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_delete');
  late final _UA_CallResponse_delete = _UA_CallResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_MonitoringMode_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_init(
      p,
    );
  }

  late final _UA_MonitoringMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_init');
  late final _UA_MonitoringMode_init = _UA_MonitoringMode_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_MonitoringMode_new() {
    return _UA_MonitoringMode_new();
  }

  late final _UA_MonitoringMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_MonitoringMode_new');
  late final _UA_MonitoringMode_new =
      _UA_MonitoringMode_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_MonitoringMode_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_MonitoringMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringMode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_MonitoringMode_copy');
  late final _UA_MonitoringMode_copy = _UA_MonitoringMode_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoringMode_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_deleteMembers');
  late final _UA_MonitoringMode_deleteMembers =
      _UA_MonitoringMode_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_clear(
      p,
    );
  }

  late final _UA_MonitoringMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_clear');
  late final _UA_MonitoringMode_clear = _UA_MonitoringMode_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_delete(
      p,
    );
  }

  late final _UA_MonitoringMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_delete');
  late final _UA_MonitoringMode_delete = _UA_MonitoringMode_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_init(
      p,
    );
  }

  late final _UA_DataChangeTrigger_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_init');
  late final _UA_DataChangeTrigger_init = _UA_DataChangeTrigger_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DataChangeTrigger_new() {
    return _UA_DataChangeTrigger_new();
  }

  late final _UA_DataChangeTrigger_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DataChangeTrigger_new');
  late final _UA_DataChangeTrigger_new = _UA_DataChangeTrigger_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DataChangeTrigger_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DataChangeTrigger_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeTrigger_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DataChangeTrigger_copy');
  late final _UA_DataChangeTrigger_copy =
      _UA_DataChangeTrigger_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeTrigger_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_deleteMembers');
  late final _UA_DataChangeTrigger_deleteMembers =
      _UA_DataChangeTrigger_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_clear(
      p,
    );
  }

  late final _UA_DataChangeTrigger_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_clear');
  late final _UA_DataChangeTrigger_clear = _UA_DataChangeTrigger_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_delete(
      p,
    );
  }

  late final _UA_DataChangeTrigger_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_delete');
  late final _UA_DataChangeTrigger_delete = _UA_DataChangeTrigger_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_init(
      p,
    );
  }

  late final _UA_DeadbandType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_init');
  late final _UA_DeadbandType_init = _UA_DeadbandType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DeadbandType_new() {
    return _UA_DeadbandType_new();
  }

  late final _UA_DeadbandType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DeadbandType_new');
  late final _UA_DeadbandType_new =
      _UA_DeadbandType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DeadbandType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DeadbandType_copy(
      src,
      dst,
    );
  }

  late final _UA_DeadbandType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DeadbandType_copy');
  late final _UA_DeadbandType_copy = _UA_DeadbandType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_deleteMembers(
      p,
    );
  }

  late final _UA_DeadbandType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_deleteMembers');
  late final _UA_DeadbandType_deleteMembers = _UA_DeadbandType_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_clear(
      p,
    );
  }

  late final _UA_DeadbandType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_clear');
  late final _UA_DeadbandType_clear = _UA_DeadbandType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_delete(
      p,
    );
  }

  late final _UA_DeadbandType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_delete');
  late final _UA_DeadbandType_delete = _UA_DeadbandType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeFilter_init(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_init(
      p,
    );
  }

  late final _UA_DataChangeFilter_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_init');
  late final _UA_DataChangeFilter_init = _UA_DataChangeFilter_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  ffi.Pointer<UA_DataChangeFilter> UA_DataChangeFilter_new() {
    return _UA_DataChangeFilter_new();
  }

  late final _UA_DataChangeFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataChangeFilter> Function()>>(
          'UA_DataChangeFilter_new');
  late final _UA_DataChangeFilter_new = _UA_DataChangeFilter_newPtr.asFunction<
      ffi.Pointer<UA_DataChangeFilter> Function()>();

  int UA_DataChangeFilter_copy(
    ffi.Pointer<UA_DataChangeFilter> src,
    ffi.Pointer<UA_DataChangeFilter> dst,
  ) {
    return _UA_DataChangeFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataChangeFilter>,
              ffi.Pointer<UA_DataChangeFilter>)>>('UA_DataChangeFilter_copy');
  late final _UA_DataChangeFilter_copy =
      _UA_DataChangeFilter_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataChangeFilter>,
              ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_deleteMembers(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeFilter_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_deleteMembers');
  late final _UA_DataChangeFilter_deleteMembers =
      _UA_DataChangeFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_clear(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_clear(
      p,
    );
  }

  late final _UA_DataChangeFilter_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_clear');
  late final _UA_DataChangeFilter_clear = _UA_DataChangeFilter_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_delete(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_delete(
      p,
    );
  }

  late final _UA_DataChangeFilter_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_delete');
  late final _UA_DataChangeFilter_delete = _UA_DataChangeFilter_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_EventFilter_init(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_init(
      p,
    );
  }

  late final _UA_EventFilter_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_init');
  late final _UA_EventFilter_init = _UA_EventFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  ffi.Pointer<UA_EventFilter> UA_EventFilter_new() {
    return _UA_EventFilter_new();
  }

  late final _UA_EventFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilter> Function()>>(
          'UA_EventFilter_new');
  late final _UA_EventFilter_new = _UA_EventFilter_newPtr.asFunction<
      ffi.Pointer<UA_EventFilter> Function()>();

  int UA_EventFilter_copy(
    ffi.Pointer<UA_EventFilter> src,
    ffi.Pointer<UA_EventFilter> dst,
  ) {
    return _UA_EventFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFilter>,
              ffi.Pointer<UA_EventFilter>)>>('UA_EventFilter_copy');
  late final _UA_EventFilter_copy = _UA_EventFilter_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_deleteMembers(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_deleteMembers(
      p,
    );
  }

  late final _UA_EventFilter_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_deleteMembers');
  late final _UA_EventFilter_deleteMembers = _UA_EventFilter_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_clear(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_clear(
      p,
    );
  }

  late final _UA_EventFilter_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_clear');
  late final _UA_EventFilter_clear = _UA_EventFilter_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_delete(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_delete(
      p,
    );
  }

  late final _UA_EventFilter_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_delete');
  late final _UA_EventFilter_delete = _UA_EventFilter_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_AggregateConfiguration_init(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_init(
      p,
    );
  }

  late final _UA_AggregateConfiguration_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_init');
  late final _UA_AggregateConfiguration_init =
      _UA_AggregateConfiguration_initPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  ffi.Pointer<UA_AggregateConfiguration> UA_AggregateConfiguration_new() {
    return _UA_AggregateConfiguration_new();
  }

  late final _UA_AggregateConfiguration_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>>(
      'UA_AggregateConfiguration_new');
  late final _UA_AggregateConfiguration_new = _UA_AggregateConfiguration_newPtr
      .asFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>();

  int UA_AggregateConfiguration_copy(
    ffi.Pointer<UA_AggregateConfiguration> src,
    ffi.Pointer<UA_AggregateConfiguration> dst,
  ) {
    return _UA_AggregateConfiguration_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateConfiguration_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AggregateConfiguration>,
                  ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_copy');
  late final _UA_AggregateConfiguration_copy =
      _UA_AggregateConfiguration_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AggregateConfiguration>,
              ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_deleteMembers(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_deleteMembers(
      p,
    );
  }

  late final _UA_AggregateConfiguration_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_deleteMembers');
  late final _UA_AggregateConfiguration_deleteMembers =
      _UA_AggregateConfiguration_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_clear(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_clear(
      p,
    );
  }

  late final _UA_AggregateConfiguration_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_clear');
  late final _UA_AggregateConfiguration_clear =
      _UA_AggregateConfiguration_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_delete(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_delete(
      p,
    );
  }

  late final _UA_AggregateConfiguration_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_delete');
  late final _UA_AggregateConfiguration_delete =
      _UA_AggregateConfiguration_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateFilter_init(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_init(
      p,
    );
  }

  late final _UA_AggregateFilter_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_init');
  late final _UA_AggregateFilter_init = _UA_AggregateFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AggregateFilter>)>();

  ffi.Pointer<UA_AggregateFilter> UA_AggregateFilter_new() {
    return _UA_AggregateFilter_new();
  }

  late final _UA_AggregateFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AggregateFilter> Function()>>(
          'UA_AggregateFilter_new');
  late final _UA_AggregateFilter_new = _UA_AggregateFilter_newPtr.asFunction<
      ffi.Pointer<UA_AggregateFilter> Function()>();

  int UA_AggregateFilter_copy(
    ffi.Pointer<UA_AggregateFilter> src,
    ffi.Pointer<UA_AggregateFilter> dst,
  ) {
    return _UA_AggregateFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AggregateFilter>,
              ffi.Pointer<UA_AggregateFilter>)>>('UA_AggregateFilter_copy');
  late final _UA_AggregateFilter_copy = _UA_AggregateFilter_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_deleteMembers(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_deleteMembers(
      p,
    );
  }

  late final _UA_AggregateFilter_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_deleteMembers');
  late final _UA_AggregateFilter_deleteMembers =
      _UA_AggregateFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_clear(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_clear(
      p,
    );
  }

  late final _UA_AggregateFilter_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_clear');
  late final _UA_AggregateFilter_clear = _UA_AggregateFilter_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_delete(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_delete(
      p,
    );
  }

  late final _UA_AggregateFilter_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_delete');
  late final _UA_AggregateFilter_delete = _UA_AggregateFilter_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_EventFilterResult_init(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_init(
      p,
    );
  }

  late final _UA_EventFilterResult_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_init');
  late final _UA_EventFilterResult_init = _UA_EventFilterResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  ffi.Pointer<UA_EventFilterResult> UA_EventFilterResult_new() {
    return _UA_EventFilterResult_new();
  }

  late final _UA_EventFilterResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilterResult> Function()>>(
          'UA_EventFilterResult_new');
  late final _UA_EventFilterResult_new = _UA_EventFilterResult_newPtr
      .asFunction<ffi.Pointer<UA_EventFilterResult> Function()>();

  int UA_EventFilterResult_copy(
    ffi.Pointer<UA_EventFilterResult> src,
    ffi.Pointer<UA_EventFilterResult> dst,
  ) {
    return _UA_EventFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilterResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFilterResult>,
              ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_copy');
  late final _UA_EventFilterResult_copy =
      _UA_EventFilterResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EventFilterResult>,
              ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_deleteMembers(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_deleteMembers(
      p,
    );
  }

  late final _UA_EventFilterResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_deleteMembers');
  late final _UA_EventFilterResult_deleteMembers =
      _UA_EventFilterResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_clear(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_clear(
      p,
    );
  }

  late final _UA_EventFilterResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_clear');
  late final _UA_EventFilterResult_clear = _UA_EventFilterResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_delete(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_delete(
      p,
    );
  }

  late final _UA_EventFilterResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_delete');
  late final _UA_EventFilterResult_delete = _UA_EventFilterResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_MonitoringParameters_init(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_init(
      p,
    );
  }

  late final _UA_MonitoringParameters_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_init');
  late final _UA_MonitoringParameters_init = _UA_MonitoringParameters_initPtr
      .asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  ffi.Pointer<UA_MonitoringParameters> UA_MonitoringParameters_new() {
    return _UA_MonitoringParameters_new();
  }

  late final _UA_MonitoringParameters_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_MonitoringParameters> Function()>>(
      'UA_MonitoringParameters_new');
  late final _UA_MonitoringParameters_new = _UA_MonitoringParameters_newPtr
      .asFunction<ffi.Pointer<UA_MonitoringParameters> Function()>();

  int UA_MonitoringParameters_copy(
    ffi.Pointer<UA_MonitoringParameters> src,
    ffi.Pointer<UA_MonitoringParameters> dst,
  ) {
    return _UA_MonitoringParameters_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringParameters_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoringParameters>,
                  ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_copy');
  late final _UA_MonitoringParameters_copy =
      _UA_MonitoringParameters_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoringParameters>,
              ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_deleteMembers(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoringParameters_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_deleteMembers');
  late final _UA_MonitoringParameters_deleteMembers =
      _UA_MonitoringParameters_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_clear(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_clear(
      p,
    );
  }

  late final _UA_MonitoringParameters_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_clear');
  late final _UA_MonitoringParameters_clear = _UA_MonitoringParameters_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_delete(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_delete(
      p,
    );
  }

  late final _UA_MonitoringParameters_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_delete');
  late final _UA_MonitoringParameters_delete =
      _UA_MonitoringParameters_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoredItemCreateRequest_init(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_init');
  late final _UA_MonitoredItemCreateRequest_init =
      _UA_MonitoredItemCreateRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  ffi.Pointer<UA_MonitoredItemCreateRequest>
      UA_MonitoredItemCreateRequest_new() {
    return _UA_MonitoredItemCreateRequest_new();
  }

  late final _UA_MonitoredItemCreateRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemCreateRequest>
              Function()>>('UA_MonitoredItemCreateRequest_new');
  late final _UA_MonitoredItemCreateRequest_new =
      _UA_MonitoredItemCreateRequest_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemCreateRequest> Function()>();

  int UA_MonitoredItemCreateRequest_copy(
    ffi.Pointer<UA_MonitoredItemCreateRequest> src,
    ffi.Pointer<UA_MonitoredItemCreateRequest> dst,
  ) {
    return _UA_MonitoredItemCreateRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
                  ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_copy');
  late final _UA_MonitoredItemCreateRequest_copy =
      _UA_MonitoredItemCreateRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
              ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_deleteMembers(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_deleteMembers');
  late final _UA_MonitoredItemCreateRequest_deleteMembers =
      _UA_MonitoredItemCreateRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_clear(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_clear');
  late final _UA_MonitoredItemCreateRequest_clear =
      _UA_MonitoredItemCreateRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_delete(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_delete');
  late final _UA_MonitoredItemCreateRequest_delete =
      _UA_MonitoredItemCreateRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateResult_init(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_init');
  late final _UA_MonitoredItemCreateResult_init =
      _UA_MonitoredItemCreateResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  ffi.Pointer<UA_MonitoredItemCreateResult> UA_MonitoredItemCreateResult_new() {
    return _UA_MonitoredItemCreateResult_new();
  }

  late final _UA_MonitoredItemCreateResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemCreateResult>
              Function()>>('UA_MonitoredItemCreateResult_new');
  late final _UA_MonitoredItemCreateResult_new =
      _UA_MonitoredItemCreateResult_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemCreateResult> Function()>();

  int UA_MonitoredItemCreateResult_copy(
    ffi.Pointer<UA_MonitoredItemCreateResult> src,
    ffi.Pointer<UA_MonitoredItemCreateResult> dst,
  ) {
    return _UA_MonitoredItemCreateResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
                  ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_copy');
  late final _UA_MonitoredItemCreateResult_copy =
      _UA_MonitoredItemCreateResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
              ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_deleteMembers(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_deleteMembers');
  late final _UA_MonitoredItemCreateResult_deleteMembers =
      _UA_MonitoredItemCreateResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_clear(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_clear');
  late final _UA_MonitoredItemCreateResult_clear =
      _UA_MonitoredItemCreateResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_delete(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_delete');
  late final _UA_MonitoredItemCreateResult_delete =
      _UA_MonitoredItemCreateResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_CreateMonitoredItemsRequest_init(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_init');
  late final _UA_CreateMonitoredItemsRequest_init =
      _UA_CreateMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  ffi.Pointer<UA_CreateMonitoredItemsRequest>
      UA_CreateMonitoredItemsRequest_new() {
    return _UA_CreateMonitoredItemsRequest_new();
  }

  late final _UA_CreateMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateMonitoredItemsRequest>
              Function()>>('UA_CreateMonitoredItemsRequest_new');
  late final _UA_CreateMonitoredItemsRequest_new =
      _UA_CreateMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_CreateMonitoredItemsRequest> Function()>();

  int UA_CreateMonitoredItemsRequest_copy(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> src,
    ffi.Pointer<UA_CreateMonitoredItemsRequest> dst,
  ) {
    return _UA_CreateMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_CreateMonitoredItemsRequest>,
                  ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_copy');
  late final _UA_CreateMonitoredItemsRequest_copy =
      _UA_CreateMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>,
              ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_deleteMembers');
  late final _UA_CreateMonitoredItemsRequest_deleteMembers =
      _UA_CreateMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_clear(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_clear');
  late final _UA_CreateMonitoredItemsRequest_clear =
      _UA_CreateMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_delete(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_delete');
  late final _UA_CreateMonitoredItemsRequest_delete =
      _UA_CreateMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsResponse_init(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_init');
  late final _UA_CreateMonitoredItemsResponse_init =
      _UA_CreateMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  ffi.Pointer<UA_CreateMonitoredItemsResponse>
      UA_CreateMonitoredItemsResponse_new() {
    return _UA_CreateMonitoredItemsResponse_new();
  }

  late final _UA_CreateMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateMonitoredItemsResponse>
              Function()>>('UA_CreateMonitoredItemsResponse_new');
  late final _UA_CreateMonitoredItemsResponse_new =
      _UA_CreateMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_CreateMonitoredItemsResponse> Function()>();

  int UA_CreateMonitoredItemsResponse_copy(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> src,
    ffi.Pointer<UA_CreateMonitoredItemsResponse> dst,
  ) {
    return _UA_CreateMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_CreateMonitoredItemsResponse>,
                  ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_copy');
  late final _UA_CreateMonitoredItemsResponse_copy =
      _UA_CreateMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>,
              ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_deleteMembers');
  late final _UA_CreateMonitoredItemsResponse_deleteMembers =
      _UA_CreateMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_clear(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_clear');
  late final _UA_CreateMonitoredItemsResponse_clear =
      _UA_CreateMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_delete(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_delete');
  late final _UA_CreateMonitoredItemsResponse_delete =
      _UA_CreateMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_MonitoredItemModifyRequest_init(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_init');
  late final _UA_MonitoredItemModifyRequest_init =
      _UA_MonitoredItemModifyRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  ffi.Pointer<UA_MonitoredItemModifyRequest>
      UA_MonitoredItemModifyRequest_new() {
    return _UA_MonitoredItemModifyRequest_new();
  }

  late final _UA_MonitoredItemModifyRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemModifyRequest>
              Function()>>('UA_MonitoredItemModifyRequest_new');
  late final _UA_MonitoredItemModifyRequest_new =
      _UA_MonitoredItemModifyRequest_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemModifyRequest> Function()>();

  int UA_MonitoredItemModifyRequest_copy(
    ffi.Pointer<UA_MonitoredItemModifyRequest> src,
    ffi.Pointer<UA_MonitoredItemModifyRequest> dst,
  ) {
    return _UA_MonitoredItemModifyRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
                  ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_copy');
  late final _UA_MonitoredItemModifyRequest_copy =
      _UA_MonitoredItemModifyRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
              ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_deleteMembers(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_deleteMembers');
  late final _UA_MonitoredItemModifyRequest_deleteMembers =
      _UA_MonitoredItemModifyRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_clear(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_clear');
  late final _UA_MonitoredItemModifyRequest_clear =
      _UA_MonitoredItemModifyRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_delete(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_delete');
  late final _UA_MonitoredItemModifyRequest_delete =
      _UA_MonitoredItemModifyRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyResult_init(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_init');
  late final _UA_MonitoredItemModifyResult_init =
      _UA_MonitoredItemModifyResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  ffi.Pointer<UA_MonitoredItemModifyResult> UA_MonitoredItemModifyResult_new() {
    return _UA_MonitoredItemModifyResult_new();
  }

  late final _UA_MonitoredItemModifyResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemModifyResult>
              Function()>>('UA_MonitoredItemModifyResult_new');
  late final _UA_MonitoredItemModifyResult_new =
      _UA_MonitoredItemModifyResult_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemModifyResult> Function()>();

  int UA_MonitoredItemModifyResult_copy(
    ffi.Pointer<UA_MonitoredItemModifyResult> src,
    ffi.Pointer<UA_MonitoredItemModifyResult> dst,
  ) {
    return _UA_MonitoredItemModifyResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
                  ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_copy');
  late final _UA_MonitoredItemModifyResult_copy =
      _UA_MonitoredItemModifyResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
              ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_deleteMembers(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_deleteMembers');
  late final _UA_MonitoredItemModifyResult_deleteMembers =
      _UA_MonitoredItemModifyResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_clear(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_clear');
  late final _UA_MonitoredItemModifyResult_clear =
      _UA_MonitoredItemModifyResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_delete(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_delete');
  late final _UA_MonitoredItemModifyResult_delete =
      _UA_MonitoredItemModifyResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_ModifyMonitoredItemsRequest_init(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_init');
  late final _UA_ModifyMonitoredItemsRequest_init =
      _UA_ModifyMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsRequest>
      UA_ModifyMonitoredItemsRequest_new() {
    return _UA_ModifyMonitoredItemsRequest_new();
  }

  late final _UA_ModifyMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsRequest>
              Function()>>('UA_ModifyMonitoredItemsRequest_new');
  late final _UA_ModifyMonitoredItemsRequest_new =
      _UA_ModifyMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsRequest> Function()>();

  int UA_ModifyMonitoredItemsRequest_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> src,
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> dst,
  ) {
    return _UA_ModifyMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
                  ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_copy');
  late final _UA_ModifyMonitoredItemsRequest_copy =
      _UA_ModifyMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
              ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_deleteMembers');
  late final _UA_ModifyMonitoredItemsRequest_deleteMembers =
      _UA_ModifyMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_clear');
  late final _UA_ModifyMonitoredItemsRequest_clear =
      _UA_ModifyMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_delete');
  late final _UA_ModifyMonitoredItemsRequest_delete =
      _UA_ModifyMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsResponse_init(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_init');
  late final _UA_ModifyMonitoredItemsResponse_init =
      _UA_ModifyMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsResponse>
      UA_ModifyMonitoredItemsResponse_new() {
    return _UA_ModifyMonitoredItemsResponse_new();
  }

  late final _UA_ModifyMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsResponse>
              Function()>>('UA_ModifyMonitoredItemsResponse_new');
  late final _UA_ModifyMonitoredItemsResponse_new =
      _UA_ModifyMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsResponse> Function()>();

  int UA_ModifyMonitoredItemsResponse_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> src,
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> dst,
  ) {
    return _UA_ModifyMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
                  ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_copy');
  late final _UA_ModifyMonitoredItemsResponse_copy =
      _UA_ModifyMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
              ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_deleteMembers');
  late final _UA_ModifyMonitoredItemsResponse_deleteMembers =
      _UA_ModifyMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_clear');
  late final _UA_ModifyMonitoredItemsResponse_clear =
      _UA_ModifyMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_delete');
  late final _UA_ModifyMonitoredItemsResponse_delete =
      _UA_ModifyMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_SetMonitoringModeRequest_init(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_init');
  late final _UA_SetMonitoringModeRequest_init =
      _UA_SetMonitoringModeRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  ffi.Pointer<UA_SetMonitoringModeRequest> UA_SetMonitoringModeRequest_new() {
    return _UA_SetMonitoringModeRequest_new();
  }

  late final _UA_SetMonitoringModeRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SetMonitoringModeRequest> Function()>>(
      'UA_SetMonitoringModeRequest_new');
  late final _UA_SetMonitoringModeRequest_new =
      _UA_SetMonitoringModeRequest_newPtr.asFunction<
          ffi.Pointer<UA_SetMonitoringModeRequest> Function()>();

  int UA_SetMonitoringModeRequest_copy(
    ffi.Pointer<UA_SetMonitoringModeRequest> src,
    ffi.Pointer<UA_SetMonitoringModeRequest> dst,
  ) {
    return _UA_SetMonitoringModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
                  ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_copy');
  late final _UA_SetMonitoringModeRequest_copy =
      _UA_SetMonitoringModeRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
              ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_deleteMembers(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_deleteMembers');
  late final _UA_SetMonitoringModeRequest_deleteMembers =
      _UA_SetMonitoringModeRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_clear(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_clear');
  late final _UA_SetMonitoringModeRequest_clear =
      _UA_SetMonitoringModeRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_delete(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_delete');
  late final _UA_SetMonitoringModeRequest_delete =
      _UA_SetMonitoringModeRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeResponse_init(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_init');
  late final _UA_SetMonitoringModeResponse_init =
      _UA_SetMonitoringModeResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  ffi.Pointer<UA_SetMonitoringModeResponse> UA_SetMonitoringModeResponse_new() {
    return _UA_SetMonitoringModeResponse_new();
  }

  late final _UA_SetMonitoringModeResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SetMonitoringModeResponse>
              Function()>>('UA_SetMonitoringModeResponse_new');
  late final _UA_SetMonitoringModeResponse_new =
      _UA_SetMonitoringModeResponse_newPtr.asFunction<
          ffi.Pointer<UA_SetMonitoringModeResponse> Function()>();

  int UA_SetMonitoringModeResponse_copy(
    ffi.Pointer<UA_SetMonitoringModeResponse> src,
    ffi.Pointer<UA_SetMonitoringModeResponse> dst,
  ) {
    return _UA_SetMonitoringModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
                  ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_copy');
  late final _UA_SetMonitoringModeResponse_copy =
      _UA_SetMonitoringModeResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
              ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_deleteMembers(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_deleteMembers');
  late final _UA_SetMonitoringModeResponse_deleteMembers =
      _UA_SetMonitoringModeResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_clear(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_clear');
  late final _UA_SetMonitoringModeResponse_clear =
      _UA_SetMonitoringModeResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_delete(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_delete');
  late final _UA_SetMonitoringModeResponse_delete =
      _UA_SetMonitoringModeResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetTriggeringRequest_init(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_init(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_init');
  late final _UA_SetTriggeringRequest_init = _UA_SetTriggeringRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  ffi.Pointer<UA_SetTriggeringRequest> UA_SetTriggeringRequest_new() {
    return _UA_SetTriggeringRequest_new();
  }

  late final _UA_SetTriggeringRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>>(
      'UA_SetTriggeringRequest_new');
  late final _UA_SetTriggeringRequest_new = _UA_SetTriggeringRequest_newPtr
      .asFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>();

  int UA_SetTriggeringRequest_copy(
    ffi.Pointer<UA_SetTriggeringRequest> src,
    ffi.Pointer<UA_SetTriggeringRequest> dst,
  ) {
    return _UA_SetTriggeringRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringRequest>,
                  ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_copy');
  late final _UA_SetTriggeringRequest_copy =
      _UA_SetTriggeringRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetTriggeringRequest>,
              ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_deleteMembers(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_deleteMembers');
  late final _UA_SetTriggeringRequest_deleteMembers =
      _UA_SetTriggeringRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_clear(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_clear(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_clear');
  late final _UA_SetTriggeringRequest_clear = _UA_SetTriggeringRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_delete(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_delete(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_delete');
  late final _UA_SetTriggeringRequest_delete =
      _UA_SetTriggeringRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringResponse_init(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_init(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_init');
  late final _UA_SetTriggeringResponse_init = _UA_SetTriggeringResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  ffi.Pointer<UA_SetTriggeringResponse> UA_SetTriggeringResponse_new() {
    return _UA_SetTriggeringResponse_new();
  }

  late final _UA_SetTriggeringResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>>(
      'UA_SetTriggeringResponse_new');
  late final _UA_SetTriggeringResponse_new = _UA_SetTriggeringResponse_newPtr
      .asFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>();

  int UA_SetTriggeringResponse_copy(
    ffi.Pointer<UA_SetTriggeringResponse> src,
    ffi.Pointer<UA_SetTriggeringResponse> dst,
  ) {
    return _UA_SetTriggeringResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringResponse>,
                  ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_copy');
  late final _UA_SetTriggeringResponse_copy =
      _UA_SetTriggeringResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetTriggeringResponse>,
              ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_deleteMembers(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_deleteMembers');
  late final _UA_SetTriggeringResponse_deleteMembers =
      _UA_SetTriggeringResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_clear(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_clear(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_clear');
  late final _UA_SetTriggeringResponse_clear =
      _UA_SetTriggeringResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_delete(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_delete(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_delete');
  late final _UA_SetTriggeringResponse_delete =
      _UA_SetTriggeringResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_DeleteMonitoredItemsRequest_init(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_init');
  late final _UA_DeleteMonitoredItemsRequest_init =
      _UA_DeleteMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsRequest>
      UA_DeleteMonitoredItemsRequest_new() {
    return _UA_DeleteMonitoredItemsRequest_new();
  }

  late final _UA_DeleteMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsRequest>
              Function()>>('UA_DeleteMonitoredItemsRequest_new');
  late final _UA_DeleteMonitoredItemsRequest_new =
      _UA_DeleteMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsRequest> Function()>();

  int UA_DeleteMonitoredItemsRequest_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> src,
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> dst,
  ) {
    return _UA_DeleteMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
                  ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_copy');
  late final _UA_DeleteMonitoredItemsRequest_copy =
      _UA_DeleteMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
              ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_deleteMembers');
  late final _UA_DeleteMonitoredItemsRequest_deleteMembers =
      _UA_DeleteMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_clear');
  late final _UA_DeleteMonitoredItemsRequest_clear =
      _UA_DeleteMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_delete');
  late final _UA_DeleteMonitoredItemsRequest_delete =
      _UA_DeleteMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsResponse_init(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_init');
  late final _UA_DeleteMonitoredItemsResponse_init =
      _UA_DeleteMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsResponse>
      UA_DeleteMonitoredItemsResponse_new() {
    return _UA_DeleteMonitoredItemsResponse_new();
  }

  late final _UA_DeleteMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsResponse>
              Function()>>('UA_DeleteMonitoredItemsResponse_new');
  late final _UA_DeleteMonitoredItemsResponse_new =
      _UA_DeleteMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsResponse> Function()>();

  int UA_DeleteMonitoredItemsResponse_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> src,
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> dst,
  ) {
    return _UA_DeleteMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
                  ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_copy');
  late final _UA_DeleteMonitoredItemsResponse_copy =
      _UA_DeleteMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
              ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_deleteMembers');
  late final _UA_DeleteMonitoredItemsResponse_deleteMembers =
      _UA_DeleteMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_clear');
  late final _UA_DeleteMonitoredItemsResponse_clear =
      _UA_DeleteMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_delete');
  late final _UA_DeleteMonitoredItemsResponse_delete =
      _UA_DeleteMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_CreateSubscriptionRequest_init(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_init');
  late final _UA_CreateSubscriptionRequest_init =
      _UA_CreateSubscriptionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  ffi.Pointer<UA_CreateSubscriptionRequest> UA_CreateSubscriptionRequest_new() {
    return _UA_CreateSubscriptionRequest_new();
  }

  late final _UA_CreateSubscriptionRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateSubscriptionRequest>
              Function()>>('UA_CreateSubscriptionRequest_new');
  late final _UA_CreateSubscriptionRequest_new =
      _UA_CreateSubscriptionRequest_newPtr.asFunction<
          ffi.Pointer<UA_CreateSubscriptionRequest> Function()>();

  int UA_CreateSubscriptionRequest_copy(
    ffi.Pointer<UA_CreateSubscriptionRequest> src,
    ffi.Pointer<UA_CreateSubscriptionRequest> dst,
  ) {
    return _UA_CreateSubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
                  ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_copy');
  late final _UA_CreateSubscriptionRequest_copy =
      _UA_CreateSubscriptionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
              ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_deleteMembers(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_deleteMembers');
  late final _UA_CreateSubscriptionRequest_deleteMembers =
      _UA_CreateSubscriptionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_clear(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_clear');
  late final _UA_CreateSubscriptionRequest_clear =
      _UA_CreateSubscriptionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_delete(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_delete');
  late final _UA_CreateSubscriptionRequest_delete =
      _UA_CreateSubscriptionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionResponse_init(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_init');
  late final _UA_CreateSubscriptionResponse_init =
      _UA_CreateSubscriptionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  ffi.Pointer<UA_CreateSubscriptionResponse>
      UA_CreateSubscriptionResponse_new() {
    return _UA_CreateSubscriptionResponse_new();
  }

  late final _UA_CreateSubscriptionResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateSubscriptionResponse>
              Function()>>('UA_CreateSubscriptionResponse_new');
  late final _UA_CreateSubscriptionResponse_new =
      _UA_CreateSubscriptionResponse_newPtr.asFunction<
          ffi.Pointer<UA_CreateSubscriptionResponse> Function()>();

  int UA_CreateSubscriptionResponse_copy(
    ffi.Pointer<UA_CreateSubscriptionResponse> src,
    ffi.Pointer<UA_CreateSubscriptionResponse> dst,
  ) {
    return _UA_CreateSubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
                  ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_copy');
  late final _UA_CreateSubscriptionResponse_copy =
      _UA_CreateSubscriptionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
              ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_deleteMembers(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_deleteMembers');
  late final _UA_CreateSubscriptionResponse_deleteMembers =
      _UA_CreateSubscriptionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_clear(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_clear');
  late final _UA_CreateSubscriptionResponse_clear =
      _UA_CreateSubscriptionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_delete(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_delete');
  late final _UA_CreateSubscriptionResponse_delete =
      _UA_CreateSubscriptionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_ModifySubscriptionRequest_init(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_init');
  late final _UA_ModifySubscriptionRequest_init =
      _UA_ModifySubscriptionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  ffi.Pointer<UA_ModifySubscriptionRequest> UA_ModifySubscriptionRequest_new() {
    return _UA_ModifySubscriptionRequest_new();
  }

  late final _UA_ModifySubscriptionRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifySubscriptionRequest>
              Function()>>('UA_ModifySubscriptionRequest_new');
  late final _UA_ModifySubscriptionRequest_new =
      _UA_ModifySubscriptionRequest_newPtr.asFunction<
          ffi.Pointer<UA_ModifySubscriptionRequest> Function()>();

  int UA_ModifySubscriptionRequest_copy(
    ffi.Pointer<UA_ModifySubscriptionRequest> src,
    ffi.Pointer<UA_ModifySubscriptionRequest> dst,
  ) {
    return _UA_ModifySubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
                  ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_copy');
  late final _UA_ModifySubscriptionRequest_copy =
      _UA_ModifySubscriptionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
              ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_deleteMembers(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_deleteMembers');
  late final _UA_ModifySubscriptionRequest_deleteMembers =
      _UA_ModifySubscriptionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_clear(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_clear');
  late final _UA_ModifySubscriptionRequest_clear =
      _UA_ModifySubscriptionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_delete(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_delete');
  late final _UA_ModifySubscriptionRequest_delete =
      _UA_ModifySubscriptionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionResponse_init(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_init');
  late final _UA_ModifySubscriptionResponse_init =
      _UA_ModifySubscriptionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  ffi.Pointer<UA_ModifySubscriptionResponse>
      UA_ModifySubscriptionResponse_new() {
    return _UA_ModifySubscriptionResponse_new();
  }

  late final _UA_ModifySubscriptionResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifySubscriptionResponse>
              Function()>>('UA_ModifySubscriptionResponse_new');
  late final _UA_ModifySubscriptionResponse_new =
      _UA_ModifySubscriptionResponse_newPtr.asFunction<
          ffi.Pointer<UA_ModifySubscriptionResponse> Function()>();

  int UA_ModifySubscriptionResponse_copy(
    ffi.Pointer<UA_ModifySubscriptionResponse> src,
    ffi.Pointer<UA_ModifySubscriptionResponse> dst,
  ) {
    return _UA_ModifySubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
                  ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_copy');
  late final _UA_ModifySubscriptionResponse_copy =
      _UA_ModifySubscriptionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
              ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_deleteMembers(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_deleteMembers');
  late final _UA_ModifySubscriptionResponse_deleteMembers =
      _UA_ModifySubscriptionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_clear(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_clear');
  late final _UA_ModifySubscriptionResponse_clear =
      _UA_ModifySubscriptionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_delete(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_delete');
  late final _UA_ModifySubscriptionResponse_delete =
      _UA_ModifySubscriptionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_SetPublishingModeRequest_init(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_init(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_init');
  late final _UA_SetPublishingModeRequest_init =
      _UA_SetPublishingModeRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  ffi.Pointer<UA_SetPublishingModeRequest> UA_SetPublishingModeRequest_new() {
    return _UA_SetPublishingModeRequest_new();
  }

  late final _UA_SetPublishingModeRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SetPublishingModeRequest> Function()>>(
      'UA_SetPublishingModeRequest_new');
  late final _UA_SetPublishingModeRequest_new =
      _UA_SetPublishingModeRequest_newPtr.asFunction<
          ffi.Pointer<UA_SetPublishingModeRequest> Function()>();

  int UA_SetPublishingModeRequest_copy(
    ffi.Pointer<UA_SetPublishingModeRequest> src,
    ffi.Pointer<UA_SetPublishingModeRequest> dst,
  ) {
    return _UA_SetPublishingModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeRequest>,
                  ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_copy');
  late final _UA_SetPublishingModeRequest_copy =
      _UA_SetPublishingModeRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetPublishingModeRequest>,
              ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_deleteMembers(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_deleteMembers');
  late final _UA_SetPublishingModeRequest_deleteMembers =
      _UA_SetPublishingModeRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_clear(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_clear');
  late final _UA_SetPublishingModeRequest_clear =
      _UA_SetPublishingModeRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_delete(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_delete');
  late final _UA_SetPublishingModeRequest_delete =
      _UA_SetPublishingModeRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeResponse_init(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_init(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_init');
  late final _UA_SetPublishingModeResponse_init =
      _UA_SetPublishingModeResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  ffi.Pointer<UA_SetPublishingModeResponse> UA_SetPublishingModeResponse_new() {
    return _UA_SetPublishingModeResponse_new();
  }

  late final _UA_SetPublishingModeResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SetPublishingModeResponse>
              Function()>>('UA_SetPublishingModeResponse_new');
  late final _UA_SetPublishingModeResponse_new =
      _UA_SetPublishingModeResponse_newPtr.asFunction<
          ffi.Pointer<UA_SetPublishingModeResponse> Function()>();

  int UA_SetPublishingModeResponse_copy(
    ffi.Pointer<UA_SetPublishingModeResponse> src,
    ffi.Pointer<UA_SetPublishingModeResponse> dst,
  ) {
    return _UA_SetPublishingModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeResponse>,
                  ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_copy');
  late final _UA_SetPublishingModeResponse_copy =
      _UA_SetPublishingModeResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetPublishingModeResponse>,
              ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_deleteMembers(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_deleteMembers');
  late final _UA_SetPublishingModeResponse_deleteMembers =
      _UA_SetPublishingModeResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_clear(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_clear');
  late final _UA_SetPublishingModeResponse_clear =
      _UA_SetPublishingModeResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_delete(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_delete');
  late final _UA_SetPublishingModeResponse_delete =
      _UA_SetPublishingModeResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_NotificationMessage_init(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_init(
      p,
    );
  }

  late final _UA_NotificationMessage_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_init');
  late final _UA_NotificationMessage_init = _UA_NotificationMessage_initPtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  ffi.Pointer<UA_NotificationMessage> UA_NotificationMessage_new() {
    return _UA_NotificationMessage_new();
  }

  late final _UA_NotificationMessage_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_NotificationMessage> Function()>>(
      'UA_NotificationMessage_new');
  late final _UA_NotificationMessage_new = _UA_NotificationMessage_newPtr
      .asFunction<ffi.Pointer<UA_NotificationMessage> Function()>();

  int UA_NotificationMessage_copy(
    ffi.Pointer<UA_NotificationMessage> src,
    ffi.Pointer<UA_NotificationMessage> dst,
  ) {
    return _UA_NotificationMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_NotificationMessage_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NotificationMessage>,
                  ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_copy');
  late final _UA_NotificationMessage_copy =
      _UA_NotificationMessage_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_NotificationMessage>,
              ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_deleteMembers(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_deleteMembers(
      p,
    );
  }

  late final _UA_NotificationMessage_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_deleteMembers');
  late final _UA_NotificationMessage_deleteMembers =
      _UA_NotificationMessage_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_clear(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_clear(
      p,
    );
  }

  late final _UA_NotificationMessage_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_clear');
  late final _UA_NotificationMessage_clear = _UA_NotificationMessage_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_delete(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_delete(
      p,
    );
  }

  late final _UA_NotificationMessage_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_delete');
  late final _UA_NotificationMessage_delete = _UA_NotificationMessage_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_MonitoredItemNotification_init(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_init(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_init');
  late final _UA_MonitoredItemNotification_init =
      _UA_MonitoredItemNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  ffi.Pointer<UA_MonitoredItemNotification> UA_MonitoredItemNotification_new() {
    return _UA_MonitoredItemNotification_new();
  }

  late final _UA_MonitoredItemNotification_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemNotification>
              Function()>>('UA_MonitoredItemNotification_new');
  late final _UA_MonitoredItemNotification_new =
      _UA_MonitoredItemNotification_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemNotification> Function()>();

  int UA_MonitoredItemNotification_copy(
    ffi.Pointer<UA_MonitoredItemNotification> src,
    ffi.Pointer<UA_MonitoredItemNotification> dst,
  ) {
    return _UA_MonitoredItemNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemNotification>,
                  ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_copy');
  late final _UA_MonitoredItemNotification_copy =
      _UA_MonitoredItemNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemNotification>,
              ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_deleteMembers(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_deleteMembers');
  late final _UA_MonitoredItemNotification_deleteMembers =
      _UA_MonitoredItemNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_clear(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_clear(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_clear');
  late final _UA_MonitoredItemNotification_clear =
      _UA_MonitoredItemNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_delete(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_delete(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_delete');
  late final _UA_MonitoredItemNotification_delete =
      _UA_MonitoredItemNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_EventFieldList_init(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_init(
      p,
    );
  }

  late final _UA_EventFieldList_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_init');
  late final _UA_EventFieldList_init = _UA_EventFieldList_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFieldList>)>();

  ffi.Pointer<UA_EventFieldList> UA_EventFieldList_new() {
    return _UA_EventFieldList_new();
  }

  late final _UA_EventFieldList_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFieldList> Function()>>(
          'UA_EventFieldList_new');
  late final _UA_EventFieldList_new = _UA_EventFieldList_newPtr.asFunction<
      ffi.Pointer<UA_EventFieldList> Function()>();

  int UA_EventFieldList_copy(
    ffi.Pointer<UA_EventFieldList> src,
    ffi.Pointer<UA_EventFieldList> dst,
  ) {
    return _UA_EventFieldList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFieldList_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFieldList>,
              ffi.Pointer<UA_EventFieldList>)>>('UA_EventFieldList_copy');
  late final _UA_EventFieldList_copy = _UA_EventFieldList_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_deleteMembers(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_deleteMembers(
      p,
    );
  }

  late final _UA_EventFieldList_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_deleteMembers');
  late final _UA_EventFieldList_deleteMembers =
      _UA_EventFieldList_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_clear(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_clear(
      p,
    );
  }

  late final _UA_EventFieldList_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_clear');
  late final _UA_EventFieldList_clear = _UA_EventFieldList_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_delete(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_delete(
      p,
    );
  }

  late final _UA_EventFieldList_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_delete');
  late final _UA_EventFieldList_delete = _UA_EventFieldList_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_StatusChangeNotification_init(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_init(
      p,
    );
  }

  late final _UA_StatusChangeNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_init');
  late final _UA_StatusChangeNotification_init =
      _UA_StatusChangeNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  ffi.Pointer<UA_StatusChangeNotification> UA_StatusChangeNotification_new() {
    return _UA_StatusChangeNotification_new();
  }

  late final _UA_StatusChangeNotification_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_StatusChangeNotification> Function()>>(
      'UA_StatusChangeNotification_new');
  late final _UA_StatusChangeNotification_new =
      _UA_StatusChangeNotification_newPtr.asFunction<
          ffi.Pointer<UA_StatusChangeNotification> Function()>();

  int UA_StatusChangeNotification_copy(
    ffi.Pointer<UA_StatusChangeNotification> src,
    ffi.Pointer<UA_StatusChangeNotification> dst,
  ) {
    return _UA_StatusChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusChangeNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StatusChangeNotification>,
                  ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_copy');
  late final _UA_StatusChangeNotification_copy =
      _UA_StatusChangeNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StatusChangeNotification>,
              ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_deleteMembers(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_deleteMembers(
      p,
    );
  }

  late final _UA_StatusChangeNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_deleteMembers');
  late final _UA_StatusChangeNotification_deleteMembers =
      _UA_StatusChangeNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_clear(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_clear(
      p,
    );
  }

  late final _UA_StatusChangeNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_clear');
  late final _UA_StatusChangeNotification_clear =
      _UA_StatusChangeNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_delete(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_delete(
      p,
    );
  }

  late final _UA_StatusChangeNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_delete');
  late final _UA_StatusChangeNotification_delete =
      _UA_StatusChangeNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_SubscriptionAcknowledgement_init(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_init(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_init');
  late final _UA_SubscriptionAcknowledgement_init =
      _UA_SubscriptionAcknowledgement_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  ffi.Pointer<UA_SubscriptionAcknowledgement>
      UA_SubscriptionAcknowledgement_new() {
    return _UA_SubscriptionAcknowledgement_new();
  }

  late final _UA_SubscriptionAcknowledgement_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SubscriptionAcknowledgement>
              Function()>>('UA_SubscriptionAcknowledgement_new');
  late final _UA_SubscriptionAcknowledgement_new =
      _UA_SubscriptionAcknowledgement_newPtr.asFunction<
          ffi.Pointer<UA_SubscriptionAcknowledgement> Function()>();

  int UA_SubscriptionAcknowledgement_copy(
    ffi.Pointer<UA_SubscriptionAcknowledgement> src,
    ffi.Pointer<UA_SubscriptionAcknowledgement> dst,
  ) {
    return _UA_SubscriptionAcknowledgement_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscriptionAcknowledgement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SubscriptionAcknowledgement>,
                  ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_copy');
  late final _UA_SubscriptionAcknowledgement_copy =
      _UA_SubscriptionAcknowledgement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SubscriptionAcknowledgement>,
              ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_deleteMembers(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_deleteMembers(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_deleteMembers');
  late final _UA_SubscriptionAcknowledgement_deleteMembers =
      _UA_SubscriptionAcknowledgement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_clear(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_clear(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_clear');
  late final _UA_SubscriptionAcknowledgement_clear =
      _UA_SubscriptionAcknowledgement_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_delete(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_delete(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_delete');
  late final _UA_SubscriptionAcknowledgement_delete =
      _UA_SubscriptionAcknowledgement_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_PublishRequest_init(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_init(
      p,
    );
  }

  late final _UA_PublishRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_init');
  late final _UA_PublishRequest_init = _UA_PublishRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishRequest>)>();

  ffi.Pointer<UA_PublishRequest> UA_PublishRequest_new() {
    return _UA_PublishRequest_new();
  }

  late final _UA_PublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishRequest> Function()>>(
          'UA_PublishRequest_new');
  late final _UA_PublishRequest_new = _UA_PublishRequest_newPtr.asFunction<
      ffi.Pointer<UA_PublishRequest> Function()>();

  int UA_PublishRequest_copy(
    ffi.Pointer<UA_PublishRequest> src,
    ffi.Pointer<UA_PublishRequest> dst,
  ) {
    return _UA_PublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishRequest>,
              ffi.Pointer<UA_PublishRequest>)>>('UA_PublishRequest_copy');
  late final _UA_PublishRequest_copy = _UA_PublishRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_deleteMembers(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_deleteMembers(
      p,
    );
  }

  late final _UA_PublishRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_deleteMembers');
  late final _UA_PublishRequest_deleteMembers =
      _UA_PublishRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_clear(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_clear(
      p,
    );
  }

  late final _UA_PublishRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_clear');
  late final _UA_PublishRequest_clear = _UA_PublishRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_delete(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_delete(
      p,
    );
  }

  late final _UA_PublishRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_delete');
  late final _UA_PublishRequest_delete = _UA_PublishRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishResponse_init(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_init(
      p,
    );
  }

  late final _UA_PublishResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_init');
  late final _UA_PublishResponse_init = _UA_PublishResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishResponse>)>();

  ffi.Pointer<UA_PublishResponse> UA_PublishResponse_new() {
    return _UA_PublishResponse_new();
  }

  late final _UA_PublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishResponse> Function()>>(
          'UA_PublishResponse_new');
  late final _UA_PublishResponse_new = _UA_PublishResponse_newPtr.asFunction<
      ffi.Pointer<UA_PublishResponse> Function()>();

  int UA_PublishResponse_copy(
    ffi.Pointer<UA_PublishResponse> src,
    ffi.Pointer<UA_PublishResponse> dst,
  ) {
    return _UA_PublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishResponse>,
              ffi.Pointer<UA_PublishResponse>)>>('UA_PublishResponse_copy');
  late final _UA_PublishResponse_copy = _UA_PublishResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_deleteMembers(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_deleteMembers(
      p,
    );
  }

  late final _UA_PublishResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_deleteMembers');
  late final _UA_PublishResponse_deleteMembers =
      _UA_PublishResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_clear(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_clear(
      p,
    );
  }

  late final _UA_PublishResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_clear');
  late final _UA_PublishResponse_clear = _UA_PublishResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_delete(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_delete(
      p,
    );
  }

  late final _UA_PublishResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_delete');
  late final _UA_PublishResponse_delete = _UA_PublishResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_RepublishRequest_init(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_init(
      p,
    );
  }

  late final _UA_RepublishRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_init');
  late final _UA_RepublishRequest_init = _UA_RepublishRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  ffi.Pointer<UA_RepublishRequest> UA_RepublishRequest_new() {
    return _UA_RepublishRequest_new();
  }

  late final _UA_RepublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishRequest> Function()>>(
          'UA_RepublishRequest_new');
  late final _UA_RepublishRequest_new = _UA_RepublishRequest_newPtr.asFunction<
      ffi.Pointer<UA_RepublishRequest> Function()>();

  int UA_RepublishRequest_copy(
    ffi.Pointer<UA_RepublishRequest> src,
    ffi.Pointer<UA_RepublishRequest> dst,
  ) {
    return _UA_RepublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RepublishRequest>,
              ffi.Pointer<UA_RepublishRequest>)>>('UA_RepublishRequest_copy');
  late final _UA_RepublishRequest_copy =
      _UA_RepublishRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RepublishRequest>,
              ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_deleteMembers(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_deleteMembers(
      p,
    );
  }

  late final _UA_RepublishRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_deleteMembers');
  late final _UA_RepublishRequest_deleteMembers =
      _UA_RepublishRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_clear(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_clear(
      p,
    );
  }

  late final _UA_RepublishRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_clear');
  late final _UA_RepublishRequest_clear = _UA_RepublishRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_delete(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_delete(
      p,
    );
  }

  late final _UA_RepublishRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_delete');
  late final _UA_RepublishRequest_delete = _UA_RepublishRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishResponse_init(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_init(
      p,
    );
  }

  late final _UA_RepublishResponse_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_init');
  late final _UA_RepublishResponse_init = _UA_RepublishResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  ffi.Pointer<UA_RepublishResponse> UA_RepublishResponse_new() {
    return _UA_RepublishResponse_new();
  }

  late final _UA_RepublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishResponse> Function()>>(
          'UA_RepublishResponse_new');
  late final _UA_RepublishResponse_new = _UA_RepublishResponse_newPtr
      .asFunction<ffi.Pointer<UA_RepublishResponse> Function()>();

  int UA_RepublishResponse_copy(
    ffi.Pointer<UA_RepublishResponse> src,
    ffi.Pointer<UA_RepublishResponse> dst,
  ) {
    return _UA_RepublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RepublishResponse>,
              ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_copy');
  late final _UA_RepublishResponse_copy =
      _UA_RepublishResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RepublishResponse>,
              ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_deleteMembers(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_deleteMembers(
      p,
    );
  }

  late final _UA_RepublishResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_deleteMembers');
  late final _UA_RepublishResponse_deleteMembers =
      _UA_RepublishResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_clear(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_clear(
      p,
    );
  }

  late final _UA_RepublishResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_clear');
  late final _UA_RepublishResponse_clear = _UA_RepublishResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_delete(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_delete(
      p,
    );
  }

  late final _UA_RepublishResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_delete');
  late final _UA_RepublishResponse_delete = _UA_RepublishResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_TransferResult_init(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_init(
      p,
    );
  }

  late final _UA_TransferResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_init');
  late final _UA_TransferResult_init = _UA_TransferResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferResult>)>();

  ffi.Pointer<UA_TransferResult> UA_TransferResult_new() {
    return _UA_TransferResult_new();
  }

  late final _UA_TransferResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransferResult> Function()>>(
          'UA_TransferResult_new');
  late final _UA_TransferResult_new = _UA_TransferResult_newPtr.asFunction<
      ffi.Pointer<UA_TransferResult> Function()>();

  int UA_TransferResult_copy(
    ffi.Pointer<UA_TransferResult> src,
    ffi.Pointer<UA_TransferResult> dst,
  ) {
    return _UA_TransferResult_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TransferResult>,
              ffi.Pointer<UA_TransferResult>)>>('UA_TransferResult_copy');
  late final _UA_TransferResult_copy = _UA_TransferResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_deleteMembers(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_deleteMembers(
      p,
    );
  }

  late final _UA_TransferResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_deleteMembers');
  late final _UA_TransferResult_deleteMembers =
      _UA_TransferResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_clear(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_clear(
      p,
    );
  }

  late final _UA_TransferResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_clear');
  late final _UA_TransferResult_clear = _UA_TransferResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_delete(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_delete(
      p,
    );
  }

  late final _UA_TransferResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_delete');
  late final _UA_TransferResult_delete = _UA_TransferResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferSubscriptionsRequest_init(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_init');
  late final _UA_TransferSubscriptionsRequest_init =
      _UA_TransferSubscriptionsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  ffi.Pointer<UA_TransferSubscriptionsRequest>
      UA_TransferSubscriptionsRequest_new() {
    return _UA_TransferSubscriptionsRequest_new();
  }

  late final _UA_TransferSubscriptionsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TransferSubscriptionsRequest>
              Function()>>('UA_TransferSubscriptionsRequest_new');
  late final _UA_TransferSubscriptionsRequest_new =
      _UA_TransferSubscriptionsRequest_newPtr.asFunction<
          ffi.Pointer<UA_TransferSubscriptionsRequest> Function()>();

  int UA_TransferSubscriptionsRequest_copy(
    ffi.Pointer<UA_TransferSubscriptionsRequest> src,
    ffi.Pointer<UA_TransferSubscriptionsRequest> dst,
  ) {
    return _UA_TransferSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TransferSubscriptionsRequest>,
                  ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_copy');
  late final _UA_TransferSubscriptionsRequest_copy =
      _UA_TransferSubscriptionsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TransferSubscriptionsRequest>,
              ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_deleteMembers(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_deleteMembers');
  late final _UA_TransferSubscriptionsRequest_deleteMembers =
      _UA_TransferSubscriptionsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_clear(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_clear');
  late final _UA_TransferSubscriptionsRequest_clear =
      _UA_TransferSubscriptionsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_delete(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_delete');
  late final _UA_TransferSubscriptionsRequest_delete =
      _UA_TransferSubscriptionsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsResponse_init(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_init');
  late final _UA_TransferSubscriptionsResponse_init =
      _UA_TransferSubscriptionsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  ffi.Pointer<UA_TransferSubscriptionsResponse>
      UA_TransferSubscriptionsResponse_new() {
    return _UA_TransferSubscriptionsResponse_new();
  }

  late final _UA_TransferSubscriptionsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TransferSubscriptionsResponse>
              Function()>>('UA_TransferSubscriptionsResponse_new');
  late final _UA_TransferSubscriptionsResponse_new =
      _UA_TransferSubscriptionsResponse_newPtr.asFunction<
          ffi.Pointer<UA_TransferSubscriptionsResponse> Function()>();

  int UA_TransferSubscriptionsResponse_copy(
    ffi.Pointer<UA_TransferSubscriptionsResponse> src,
    ffi.Pointer<UA_TransferSubscriptionsResponse> dst,
  ) {
    return _UA_TransferSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>,
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_copy');
  late final _UA_TransferSubscriptionsResponse_copy =
      _UA_TransferSubscriptionsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TransferSubscriptionsResponse>,
              ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_deleteMembers(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_deleteMembers');
  late final _UA_TransferSubscriptionsResponse_deleteMembers =
      _UA_TransferSubscriptionsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_clear(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_clear');
  late final _UA_TransferSubscriptionsResponse_clear =
      _UA_TransferSubscriptionsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_delete(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_delete');
  late final _UA_TransferSubscriptionsResponse_delete =
      _UA_TransferSubscriptionsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsRequest_init(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_init');
  late final _UA_DeleteSubscriptionsRequest_init =
      _UA_DeleteSubscriptionsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  ffi.Pointer<UA_DeleteSubscriptionsRequest>
      UA_DeleteSubscriptionsRequest_new() {
    return _UA_DeleteSubscriptionsRequest_new();
  }

  late final _UA_DeleteSubscriptionsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteSubscriptionsRequest>
              Function()>>('UA_DeleteSubscriptionsRequest_new');
  late final _UA_DeleteSubscriptionsRequest_new =
      _UA_DeleteSubscriptionsRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteSubscriptionsRequest> Function()>();

  int UA_DeleteSubscriptionsRequest_copy(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> src,
    ffi.Pointer<UA_DeleteSubscriptionsRequest> dst,
  ) {
    return _UA_DeleteSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
                  ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_copy');
  late final _UA_DeleteSubscriptionsRequest_copy =
      _UA_DeleteSubscriptionsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
              ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_deleteMembers(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_deleteMembers');
  late final _UA_DeleteSubscriptionsRequest_deleteMembers =
      _UA_DeleteSubscriptionsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_clear(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_clear');
  late final _UA_DeleteSubscriptionsRequest_clear =
      _UA_DeleteSubscriptionsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_delete(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_delete');
  late final _UA_DeleteSubscriptionsRequest_delete =
      _UA_DeleteSubscriptionsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsResponse_init(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_init');
  late final _UA_DeleteSubscriptionsResponse_init =
      _UA_DeleteSubscriptionsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  ffi.Pointer<UA_DeleteSubscriptionsResponse>
      UA_DeleteSubscriptionsResponse_new() {
    return _UA_DeleteSubscriptionsResponse_new();
  }

  late final _UA_DeleteSubscriptionsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteSubscriptionsResponse>
              Function()>>('UA_DeleteSubscriptionsResponse_new');
  late final _UA_DeleteSubscriptionsResponse_new =
      _UA_DeleteSubscriptionsResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteSubscriptionsResponse> Function()>();

  int UA_DeleteSubscriptionsResponse_copy(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> src,
    ffi.Pointer<UA_DeleteSubscriptionsResponse> dst,
  ) {
    return _UA_DeleteSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteSubscriptionsResponse>,
                  ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_copy');
  late final _UA_DeleteSubscriptionsResponse_copy =
      _UA_DeleteSubscriptionsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>,
              ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_deleteMembers(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_deleteMembers');
  late final _UA_DeleteSubscriptionsResponse_deleteMembers =
      _UA_DeleteSubscriptionsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_clear(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_clear');
  late final _UA_DeleteSubscriptionsResponse_clear =
      _UA_DeleteSubscriptionsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_delete(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_delete');
  late final _UA_DeleteSubscriptionsResponse_delete =
      _UA_DeleteSubscriptionsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_BuildInfo_init(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_init(
      p,
    );
  }

  late final _UA_BuildInfo_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_init');
  late final _UA_BuildInfo_init = _UA_BuildInfo_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  ffi.Pointer<UA_BuildInfo> UA_BuildInfo_new() {
    return _UA_BuildInfo_new();
  }

  late final _UA_BuildInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BuildInfo> Function()>>(
          'UA_BuildInfo_new');
  late final _UA_BuildInfo_new =
      _UA_BuildInfo_newPtr.asFunction<ffi.Pointer<UA_BuildInfo> Function()>();

  int UA_BuildInfo_copy(
    ffi.Pointer<UA_BuildInfo> src,
    ffi.Pointer<UA_BuildInfo> dst,
  ) {
    return _UA_BuildInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_BuildInfo_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BuildInfo>,
              ffi.Pointer<UA_BuildInfo>)>>('UA_BuildInfo_copy');
  late final _UA_BuildInfo_copy = _UA_BuildInfo_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_deleteMembers(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_deleteMembers(
      p,
    );
  }

  late final _UA_BuildInfo_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_deleteMembers');
  late final _UA_BuildInfo_deleteMembers = _UA_BuildInfo_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_clear(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_clear(
      p,
    );
  }

  late final _UA_BuildInfo_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_clear');
  late final _UA_BuildInfo_clear = _UA_BuildInfo_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_delete(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_delete(
      p,
    );
  }

  late final _UA_BuildInfo_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_delete');
  late final _UA_BuildInfo_delete = _UA_BuildInfo_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_RedundancySupport_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_init(
      p,
    );
  }

  late final _UA_RedundancySupport_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_init');
  late final _UA_RedundancySupport_init = _UA_RedundancySupport_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_RedundancySupport_new() {
    return _UA_RedundancySupport_new();
  }

  late final _UA_RedundancySupport_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_RedundancySupport_new');
  late final _UA_RedundancySupport_new = _UA_RedundancySupport_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_RedundancySupport_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_RedundancySupport_copy(
      src,
      dst,
    );
  }

  late final _UA_RedundancySupport_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_RedundancySupport_copy');
  late final _UA_RedundancySupport_copy =
      _UA_RedundancySupport_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_deleteMembers(
      p,
    );
  }

  late final _UA_RedundancySupport_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_deleteMembers');
  late final _UA_RedundancySupport_deleteMembers =
      _UA_RedundancySupport_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_clear(
      p,
    );
  }

  late final _UA_RedundancySupport_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_clear');
  late final _UA_RedundancySupport_clear = _UA_RedundancySupport_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_delete(
      p,
    );
  }

  late final _UA_RedundancySupport_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_delete');
  late final _UA_RedundancySupport_delete = _UA_RedundancySupport_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_init(
      p,
    );
  }

  late final _UA_ServerState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_init');
  late final _UA_ServerState_init = _UA_ServerState_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_ServerState_new() {
    return _UA_ServerState_new();
  }

  late final _UA_ServerState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_ServerState_new');
  late final _UA_ServerState_new =
      _UA_ServerState_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_ServerState_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_ServerState_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerState_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_ServerState_copy');
  late final _UA_ServerState_copy = _UA_ServerState_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_deleteMembers(
      p,
    );
  }

  late final _UA_ServerState_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_deleteMembers');
  late final _UA_ServerState_deleteMembers = _UA_ServerState_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_clear(
      p,
    );
  }

  late final _UA_ServerState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_clear');
  late final _UA_ServerState_clear = _UA_ServerState_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_delete(
      p,
    );
  }

  late final _UA_ServerState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_delete');
  late final _UA_ServerState_delete = _UA_ServerState_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerDiagnosticsSummaryDataType_init(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_init(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_init');
  late final _UA_ServerDiagnosticsSummaryDataType_init =
      _UA_ServerDiagnosticsSummaryDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>
      UA_ServerDiagnosticsSummaryDataType_new() {
    return _UA_ServerDiagnosticsSummaryDataType_new();
  }

  late final _UA_ServerDiagnosticsSummaryDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>
              Function()>>('UA_ServerDiagnosticsSummaryDataType_new');
  late final _UA_ServerDiagnosticsSummaryDataType_new =
      _UA_ServerDiagnosticsSummaryDataType_newPtr.asFunction<
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> Function()>();

  int UA_ServerDiagnosticsSummaryDataType_copy(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> src,
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> dst,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_copy');
  late final _UA_ServerDiagnosticsSummaryDataType_copy =
      _UA_ServerDiagnosticsSummaryDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
              ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_deleteMembers(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_deleteMembers');
  late final _UA_ServerDiagnosticsSummaryDataType_deleteMembers =
      _UA_ServerDiagnosticsSummaryDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_clear(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_clear(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_clear');
  late final _UA_ServerDiagnosticsSummaryDataType_clear =
      _UA_ServerDiagnosticsSummaryDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_delete(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_delete(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_delete');
  late final _UA_ServerDiagnosticsSummaryDataType_delete =
      _UA_ServerDiagnosticsSummaryDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerStatusDataType_init(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_init(
      p,
    );
  }

  late final _UA_ServerStatusDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_init');
  late final _UA_ServerStatusDataType_init = _UA_ServerStatusDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  ffi.Pointer<UA_ServerStatusDataType> UA_ServerStatusDataType_new() {
    return _UA_ServerStatusDataType_new();
  }

  late final _UA_ServerStatusDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>>(
      'UA_ServerStatusDataType_new');
  late final _UA_ServerStatusDataType_new = _UA_ServerStatusDataType_newPtr
      .asFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>();

  int UA_ServerStatusDataType_copy(
    ffi.Pointer<UA_ServerStatusDataType> src,
    ffi.Pointer<UA_ServerStatusDataType> dst,
  ) {
    return _UA_ServerStatusDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerStatusDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ServerStatusDataType>,
                  ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_copy');
  late final _UA_ServerStatusDataType_copy =
      _UA_ServerStatusDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerStatusDataType>,
              ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_deleteMembers(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ServerStatusDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_deleteMembers');
  late final _UA_ServerStatusDataType_deleteMembers =
      _UA_ServerStatusDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_clear(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_clear(
      p,
    );
  }

  late final _UA_ServerStatusDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_clear');
  late final _UA_ServerStatusDataType_clear = _UA_ServerStatusDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_delete(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_delete(
      p,
    );
  }

  late final _UA_ServerStatusDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_delete');
  late final _UA_ServerStatusDataType_delete =
      _UA_ServerStatusDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_Range_init(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_init(
      p,
    );
  }

  late final _UA_Range_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_init');
  late final _UA_Range_init =
      _UA_Range_initPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  ffi.Pointer<UA_Range> UA_Range_new() {
    return _UA_Range_new();
  }

  late final _UA_Range_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Range> Function()>>(
          'UA_Range_new');
  late final _UA_Range_new =
      _UA_Range_newPtr.asFunction<ffi.Pointer<UA_Range> Function()>();

  int UA_Range_copy(
    ffi.Pointer<UA_Range> src,
    ffi.Pointer<UA_Range> dst,
  ) {
    return _UA_Range_copy(
      src,
      dst,
    );
  }

  late final _UA_Range_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>>('UA_Range_copy');
  late final _UA_Range_copy = _UA_Range_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>();

  void UA_Range_deleteMembers(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_deleteMembers(
      p,
    );
  }

  late final _UA_Range_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_deleteMembers');
  late final _UA_Range_deleteMembers = _UA_Range_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Range>)>();

  void UA_Range_clear(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_clear(
      p,
    );
  }

  late final _UA_Range_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_clear');
  late final _UA_Range_clear =
      _UA_Range_clearPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  void UA_Range_delete(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_delete(
      p,
    );
  }

  late final _UA_Range_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_delete');
  late final _UA_Range_delete =
      _UA_Range_deletePtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  void UA_EUInformation_init(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_init(
      p,
    );
  }

  late final _UA_EUInformation_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_init');
  late final _UA_EUInformation_init = _UA_EUInformation_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  ffi.Pointer<UA_EUInformation> UA_EUInformation_new() {
    return _UA_EUInformation_new();
  }

  late final _UA_EUInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EUInformation> Function()>>(
          'UA_EUInformation_new');
  late final _UA_EUInformation_new = _UA_EUInformation_newPtr.asFunction<
      ffi.Pointer<UA_EUInformation> Function()>();

  int UA_EUInformation_copy(
    ffi.Pointer<UA_EUInformation> src,
    ffi.Pointer<UA_EUInformation> dst,
  ) {
    return _UA_EUInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_EUInformation_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EUInformation>,
              ffi.Pointer<UA_EUInformation>)>>('UA_EUInformation_copy');
  late final _UA_EUInformation_copy = _UA_EUInformation_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_deleteMembers(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_deleteMembers(
      p,
    );
  }

  late final _UA_EUInformation_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_deleteMembers');
  late final _UA_EUInformation_deleteMembers =
      _UA_EUInformation_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_clear(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_clear(
      p,
    );
  }

  late final _UA_EUInformation_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_clear');
  late final _UA_EUInformation_clear = _UA_EUInformation_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_delete(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_delete(
      p,
    );
  }

  late final _UA_EUInformation_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_delete');
  late final _UA_EUInformation_delete = _UA_EUInformation_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_AxisScaleEnumeration_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_init(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_init');
  late final _UA_AxisScaleEnumeration_init = _UA_AxisScaleEnumeration_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_AxisScaleEnumeration_new() {
    return _UA_AxisScaleEnumeration_new();
  }

  late final _UA_AxisScaleEnumeration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_AxisScaleEnumeration_new');
  late final _UA_AxisScaleEnumeration_new = _UA_AxisScaleEnumeration_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_AxisScaleEnumeration_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_AxisScaleEnumeration_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisScaleEnumeration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_AxisScaleEnumeration_copy');
  late final _UA_AxisScaleEnumeration_copy =
      _UA_AxisScaleEnumeration_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_deleteMembers(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_deleteMembers');
  late final _UA_AxisScaleEnumeration_deleteMembers =
      _UA_AxisScaleEnumeration_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_clear(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_clear');
  late final _UA_AxisScaleEnumeration_clear = _UA_AxisScaleEnumeration_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_delete(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_delete');
  late final _UA_AxisScaleEnumeration_delete =
      _UA_AxisScaleEnumeration_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ComplexNumberType_init(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_init(
      p,
    );
  }

  late final _UA_ComplexNumberType_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_init');
  late final _UA_ComplexNumberType_init = _UA_ComplexNumberType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  ffi.Pointer<UA_ComplexNumberType> UA_ComplexNumberType_new() {
    return _UA_ComplexNumberType_new();
  }

  late final _UA_ComplexNumberType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ComplexNumberType> Function()>>(
          'UA_ComplexNumberType_new');
  late final _UA_ComplexNumberType_new = _UA_ComplexNumberType_newPtr
      .asFunction<ffi.Pointer<UA_ComplexNumberType> Function()>();

  int UA_ComplexNumberType_copy(
    ffi.Pointer<UA_ComplexNumberType> src,
    ffi.Pointer<UA_ComplexNumberType> dst,
  ) {
    return _UA_ComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_ComplexNumberType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ComplexNumberType>,
              ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_copy');
  late final _UA_ComplexNumberType_copy =
      _UA_ComplexNumberType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ComplexNumberType>,
              ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_deleteMembers(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_deleteMembers(
      p,
    );
  }

  late final _UA_ComplexNumberType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_deleteMembers');
  late final _UA_ComplexNumberType_deleteMembers =
      _UA_ComplexNumberType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_clear(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_clear(
      p,
    );
  }

  late final _UA_ComplexNumberType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_clear');
  late final _UA_ComplexNumberType_clear = _UA_ComplexNumberType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_delete(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_delete(
      p,
    );
  }

  late final _UA_ComplexNumberType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_delete');
  late final _UA_ComplexNumberType_delete = _UA_ComplexNumberType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_DoubleComplexNumberType_init(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_init(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_init');
  late final _UA_DoubleComplexNumberType_init =
      _UA_DoubleComplexNumberType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  ffi.Pointer<UA_DoubleComplexNumberType> UA_DoubleComplexNumberType_new() {
    return _UA_DoubleComplexNumberType_new();
  }

  late final _UA_DoubleComplexNumberType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DoubleComplexNumberType> Function()>>(
      'UA_DoubleComplexNumberType_new');
  late final _UA_DoubleComplexNumberType_new =
      _UA_DoubleComplexNumberType_newPtr.asFunction<
          ffi.Pointer<UA_DoubleComplexNumberType> Function()>();

  int UA_DoubleComplexNumberType_copy(
    ffi.Pointer<UA_DoubleComplexNumberType> src,
    ffi.Pointer<UA_DoubleComplexNumberType> dst,
  ) {
    return _UA_DoubleComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_DoubleComplexNumberType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DoubleComplexNumberType>,
                  ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_copy');
  late final _UA_DoubleComplexNumberType_copy =
      _UA_DoubleComplexNumberType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DoubleComplexNumberType>,
              ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_deleteMembers(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_deleteMembers(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_deleteMembers');
  late final _UA_DoubleComplexNumberType_deleteMembers =
      _UA_DoubleComplexNumberType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_clear(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_clear(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_clear');
  late final _UA_DoubleComplexNumberType_clear =
      _UA_DoubleComplexNumberType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_delete(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_delete(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_delete');
  late final _UA_DoubleComplexNumberType_delete =
      _UA_DoubleComplexNumberType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_AxisInformation_init(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_init(
      p,
    );
  }

  late final _UA_AxisInformation_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_init');
  late final _UA_AxisInformation_init = _UA_AxisInformation_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AxisInformation>)>();

  ffi.Pointer<UA_AxisInformation> UA_AxisInformation_new() {
    return _UA_AxisInformation_new();
  }

  late final _UA_AxisInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AxisInformation> Function()>>(
          'UA_AxisInformation_new');
  late final _UA_AxisInformation_new = _UA_AxisInformation_newPtr.asFunction<
      ffi.Pointer<UA_AxisInformation> Function()>();

  int UA_AxisInformation_copy(
    ffi.Pointer<UA_AxisInformation> src,
    ffi.Pointer<UA_AxisInformation> dst,
  ) {
    return _UA_AxisInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisInformation_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AxisInformation>,
              ffi.Pointer<UA_AxisInformation>)>>('UA_AxisInformation_copy');
  late final _UA_AxisInformation_copy = _UA_AxisInformation_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_deleteMembers(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_deleteMembers(
      p,
    );
  }

  late final _UA_AxisInformation_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_deleteMembers');
  late final _UA_AxisInformation_deleteMembers =
      _UA_AxisInformation_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_clear(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_clear(
      p,
    );
  }

  late final _UA_AxisInformation_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_clear');
  late final _UA_AxisInformation_clear = _UA_AxisInformation_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_delete(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_delete(
      p,
    );
  }

  late final _UA_AxisInformation_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_delete');
  late final _UA_AxisInformation_delete = _UA_AxisInformation_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_XVType_init(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_init(
      p,
    );
  }

  late final _UA_XVType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_init');
  late final _UA_XVType_init =
      _UA_XVType_initPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  ffi.Pointer<UA_XVType> UA_XVType_new() {
    return _UA_XVType_new();
  }

  late final _UA_XVType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_XVType> Function()>>(
          'UA_XVType_new');
  late final _UA_XVType_new =
      _UA_XVType_newPtr.asFunction<ffi.Pointer<UA_XVType> Function()>();

  int UA_XVType_copy(
    ffi.Pointer<UA_XVType> src,
    ffi.Pointer<UA_XVType> dst,
  ) {
    return _UA_XVType_copy(
      src,
      dst,
    );
  }

  late final _UA_XVType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_XVType>,
              ffi.Pointer<UA_XVType>)>>('UA_XVType_copy');
  late final _UA_XVType_copy = _UA_XVType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>();

  void UA_XVType_deleteMembers(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_deleteMembers(
      p,
    );
  }

  late final _UA_XVType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_deleteMembers');
  late final _UA_XVType_deleteMembers = _UA_XVType_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_XVType>)>();

  void UA_XVType_clear(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_clear(
      p,
    );
  }

  late final _UA_XVType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_clear');
  late final _UA_XVType_clear =
      _UA_XVType_clearPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  void UA_XVType_delete(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_delete(
      p,
    );
  }

  late final _UA_XVType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_delete');
  late final _UA_XVType_delete =
      _UA_XVType_deletePtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  void UA_StructureDescription_init(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_init(
      p,
    );
  }

  late final _UA_StructureDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_init');
  late final _UA_StructureDescription_init = _UA_StructureDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  ffi.Pointer<UA_StructureDescription> UA_StructureDescription_new() {
    return _UA_StructureDescription_new();
  }

  late final _UA_StructureDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_StructureDescription> Function()>>(
      'UA_StructureDescription_new');
  late final _UA_StructureDescription_new = _UA_StructureDescription_newPtr
      .asFunction<ffi.Pointer<UA_StructureDescription> Function()>();

  int UA_StructureDescription_copy(
    ffi.Pointer<UA_StructureDescription> src,
    ffi.Pointer<UA_StructureDescription> dst,
  ) {
    return _UA_StructureDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StructureDescription>,
                  ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_copy');
  late final _UA_StructureDescription_copy =
      _UA_StructureDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StructureDescription>,
              ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_deleteMembers(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_deleteMembers(
      p,
    );
  }

  late final _UA_StructureDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_deleteMembers');
  late final _UA_StructureDescription_deleteMembers =
      _UA_StructureDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_clear(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_clear(
      p,
    );
  }

  late final _UA_StructureDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_clear');
  late final _UA_StructureDescription_clear = _UA_StructureDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_delete(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_delete(
      p,
    );
  }

  late final _UA_StructureDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_delete');
  late final _UA_StructureDescription_delete =
      _UA_StructureDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_FieldMetaData_init(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_init(
      p,
    );
  }

  late final _UA_FieldMetaData_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_init');
  late final _UA_FieldMetaData_init = _UA_FieldMetaData_initPtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  ffi.Pointer<UA_FieldMetaData> UA_FieldMetaData_new() {
    return _UA_FieldMetaData_new();
  }

  late final _UA_FieldMetaData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FieldMetaData> Function()>>(
          'UA_FieldMetaData_new');
  late final _UA_FieldMetaData_new = _UA_FieldMetaData_newPtr.asFunction<
      ffi.Pointer<UA_FieldMetaData> Function()>();

  int UA_FieldMetaData_copy(
    ffi.Pointer<UA_FieldMetaData> src,
    ffi.Pointer<UA_FieldMetaData> dst,
  ) {
    return _UA_FieldMetaData_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldMetaData_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FieldMetaData>,
              ffi.Pointer<UA_FieldMetaData>)>>('UA_FieldMetaData_copy');
  late final _UA_FieldMetaData_copy = _UA_FieldMetaData_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_deleteMembers(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_deleteMembers(
      p,
    );
  }

  late final _UA_FieldMetaData_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_deleteMembers');
  late final _UA_FieldMetaData_deleteMembers =
      _UA_FieldMetaData_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_clear(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_clear(
      p,
    );
  }

  late final _UA_FieldMetaData_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_clear');
  late final _UA_FieldMetaData_clear = _UA_FieldMetaData_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_delete(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_delete(
      p,
    );
  }

  late final _UA_FieldMetaData_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_delete');
  late final _UA_FieldMetaData_delete = _UA_FieldMetaData_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_PublishedEventsDataType_init(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_init(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_init');
  late final _UA_PublishedEventsDataType_init =
      _UA_PublishedEventsDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  ffi.Pointer<UA_PublishedEventsDataType> UA_PublishedEventsDataType_new() {
    return _UA_PublishedEventsDataType_new();
  }

  late final _UA_PublishedEventsDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PublishedEventsDataType> Function()>>(
      'UA_PublishedEventsDataType_new');
  late final _UA_PublishedEventsDataType_new =
      _UA_PublishedEventsDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedEventsDataType> Function()>();

  int UA_PublishedEventsDataType_copy(
    ffi.Pointer<UA_PublishedEventsDataType> src,
    ffi.Pointer<UA_PublishedEventsDataType> dst,
  ) {
    return _UA_PublishedEventsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedEventsDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedEventsDataType>,
                  ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_copy');
  late final _UA_PublishedEventsDataType_copy =
      _UA_PublishedEventsDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedEventsDataType>,
              ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_deleteMembers(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_deleteMembers');
  late final _UA_PublishedEventsDataType_deleteMembers =
      _UA_PublishedEventsDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_clear(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_clear');
  late final _UA_PublishedEventsDataType_clear =
      _UA_PublishedEventsDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_delete(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_delete');
  late final _UA_PublishedEventsDataType_delete =
      _UA_PublishedEventsDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_WriterGroupDataType_init(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_init(
      p,
    );
  }

  late final _UA_WriterGroupDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_init');
  late final _UA_WriterGroupDataType_init = _UA_WriterGroupDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  ffi.Pointer<UA_WriterGroupDataType> UA_WriterGroupDataType_new() {
    return _UA_WriterGroupDataType_new();
  }

  late final _UA_WriterGroupDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>>(
      'UA_WriterGroupDataType_new');
  late final _UA_WriterGroupDataType_new = _UA_WriterGroupDataType_newPtr
      .asFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>();

  int UA_WriterGroupDataType_copy(
    ffi.Pointer<UA_WriterGroupDataType> src,
    ffi.Pointer<UA_WriterGroupDataType> dst,
  ) {
    return _UA_WriterGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_WriterGroupDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_WriterGroupDataType>,
                  ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_copy');
  late final _UA_WriterGroupDataType_copy =
      _UA_WriterGroupDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_WriterGroupDataType>,
              ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_deleteMembers(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_deleteMembers(
      p,
    );
  }

  late final _UA_WriterGroupDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_deleteMembers');
  late final _UA_WriterGroupDataType_deleteMembers =
      _UA_WriterGroupDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_clear(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_clear(
      p,
    );
  }

  late final _UA_WriterGroupDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_clear');
  late final _UA_WriterGroupDataType_clear = _UA_WriterGroupDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_delete(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_delete(
      p,
    );
  }

  late final _UA_WriterGroupDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_delete');
  late final _UA_WriterGroupDataType_delete = _UA_WriterGroupDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_FieldTargetDataType_init(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_init(
      p,
    );
  }

  late final _UA_FieldTargetDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_init');
  late final _UA_FieldTargetDataType_init = _UA_FieldTargetDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  ffi.Pointer<UA_FieldTargetDataType> UA_FieldTargetDataType_new() {
    return _UA_FieldTargetDataType_new();
  }

  late final _UA_FieldTargetDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>>(
      'UA_FieldTargetDataType_new');
  late final _UA_FieldTargetDataType_new = _UA_FieldTargetDataType_newPtr
      .asFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>();

  int UA_FieldTargetDataType_copy(
    ffi.Pointer<UA_FieldTargetDataType> src,
    ffi.Pointer<UA_FieldTargetDataType> dst,
  ) {
    return _UA_FieldTargetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldTargetDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FieldTargetDataType>,
                  ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_copy');
  late final _UA_FieldTargetDataType_copy =
      _UA_FieldTargetDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FieldTargetDataType>,
              ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_deleteMembers(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_deleteMembers(
      p,
    );
  }

  late final _UA_FieldTargetDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_deleteMembers');
  late final _UA_FieldTargetDataType_deleteMembers =
      _UA_FieldTargetDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_clear(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_clear(
      p,
    );
  }

  late final _UA_FieldTargetDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_clear');
  late final _UA_FieldTargetDataType_clear = _UA_FieldTargetDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_delete(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_delete(
      p,
    );
  }

  late final _UA_FieldTargetDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_delete');
  late final _UA_FieldTargetDataType_delete = _UA_FieldTargetDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_init(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_init(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_init');
  late final _UA_SubscribedDataSetMirrorDataType_init =
      _UA_SubscribedDataSetMirrorDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>
      UA_SubscribedDataSetMirrorDataType_new() {
    return _UA_SubscribedDataSetMirrorDataType_new();
  }

  late final _UA_SubscribedDataSetMirrorDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SubscribedDataSetMirrorDataType>
              Function()>>('UA_SubscribedDataSetMirrorDataType_new');
  late final _UA_SubscribedDataSetMirrorDataType_new =
      _UA_SubscribedDataSetMirrorDataType_newPtr.asFunction<
          ffi.Pointer<UA_SubscribedDataSetMirrorDataType> Function()>();

  int UA_SubscribedDataSetMirrorDataType_copy(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> src,
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> dst,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_copy');
  late final _UA_SubscribedDataSetMirrorDataType_copy =
      _UA_SubscribedDataSetMirrorDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
              ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_deleteMembers(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_deleteMembers(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_deleteMembers');
  late final _UA_SubscribedDataSetMirrorDataType_deleteMembers =
      _UA_SubscribedDataSetMirrorDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_clear(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_clear(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_clear');
  late final _UA_SubscribedDataSetMirrorDataType_clear =
      _UA_SubscribedDataSetMirrorDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_delete(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_delete(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_delete');
  late final _UA_SubscribedDataSetMirrorDataType_delete =
      _UA_SubscribedDataSetMirrorDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_EnumDefinition_init(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_init(
      p,
    );
  }

  late final _UA_EnumDefinition_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_init');
  late final _UA_EnumDefinition_init = _UA_EnumDefinition_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDefinition>)>();

  ffi.Pointer<UA_EnumDefinition> UA_EnumDefinition_new() {
    return _UA_EnumDefinition_new();
  }

  late final _UA_EnumDefinition_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDefinition> Function()>>(
          'UA_EnumDefinition_new');
  late final _UA_EnumDefinition_new = _UA_EnumDefinition_newPtr.asFunction<
      ffi.Pointer<UA_EnumDefinition> Function()>();

  int UA_EnumDefinition_copy(
    ffi.Pointer<UA_EnumDefinition> src,
    ffi.Pointer<UA_EnumDefinition> dst,
  ) {
    return _UA_EnumDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDefinition_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumDefinition>,
              ffi.Pointer<UA_EnumDefinition>)>>('UA_EnumDefinition_copy');
  late final _UA_EnumDefinition_copy = _UA_EnumDefinition_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_deleteMembers(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_deleteMembers(
      p,
    );
  }

  late final _UA_EnumDefinition_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_deleteMembers');
  late final _UA_EnumDefinition_deleteMembers =
      _UA_EnumDefinition_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_clear(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_clear(
      p,
    );
  }

  late final _UA_EnumDefinition_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_clear');
  late final _UA_EnumDefinition_clear = _UA_EnumDefinition_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_delete(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_delete(
      p,
    );
  }

  late final _UA_EnumDefinition_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_delete');
  late final _UA_EnumDefinition_delete = _UA_EnumDefinition_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_DataChangeNotification_init(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_init(
      p,
    );
  }

  late final _UA_DataChangeNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_init');
  late final _UA_DataChangeNotification_init =
      _UA_DataChangeNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  ffi.Pointer<UA_DataChangeNotification> UA_DataChangeNotification_new() {
    return _UA_DataChangeNotification_new();
  }

  late final _UA_DataChangeNotification_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DataChangeNotification> Function()>>(
      'UA_DataChangeNotification_new');
  late final _UA_DataChangeNotification_new = _UA_DataChangeNotification_newPtr
      .asFunction<ffi.Pointer<UA_DataChangeNotification> Function()>();

  int UA_DataChangeNotification_copy(
    ffi.Pointer<UA_DataChangeNotification> src,
    ffi.Pointer<UA_DataChangeNotification> dst,
  ) {
    return _UA_DataChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataChangeNotification>,
                  ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_copy');
  late final _UA_DataChangeNotification_copy =
      _UA_DataChangeNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataChangeNotification>,
              ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_deleteMembers(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_deleteMembers');
  late final _UA_DataChangeNotification_deleteMembers =
      _UA_DataChangeNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_clear(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_clear(
      p,
    );
  }

  late final _UA_DataChangeNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_clear');
  late final _UA_DataChangeNotification_clear =
      _UA_DataChangeNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_delete(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_delete(
      p,
    );
  }

  late final _UA_DataChangeNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_delete');
  late final _UA_DataChangeNotification_delete =
      _UA_DataChangeNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_EventNotificationList_init(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_init(
      p,
    );
  }

  late final _UA_EventNotificationList_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_init');
  late final _UA_EventNotificationList_init = _UA_EventNotificationList_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EventNotificationList>)>();

  ffi.Pointer<UA_EventNotificationList> UA_EventNotificationList_new() {
    return _UA_EventNotificationList_new();
  }

  late final _UA_EventNotificationList_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_EventNotificationList> Function()>>(
      'UA_EventNotificationList_new');
  late final _UA_EventNotificationList_new = _UA_EventNotificationList_newPtr
      .asFunction<ffi.Pointer<UA_EventNotificationList> Function()>();

  int UA_EventNotificationList_copy(
    ffi.Pointer<UA_EventNotificationList> src,
    ffi.Pointer<UA_EventNotificationList> dst,
  ) {
    return _UA_EventNotificationList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventNotificationList_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_EventNotificationList>,
                  ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_copy');
  late final _UA_EventNotificationList_copy =
      _UA_EventNotificationList_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EventNotificationList>,
              ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_deleteMembers(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_deleteMembers(
      p,
    );
  }

  late final _UA_EventNotificationList_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_deleteMembers');
  late final _UA_EventNotificationList_deleteMembers =
      _UA_EventNotificationList_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_clear(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_clear(
      p,
    );
  }

  late final _UA_EventNotificationList_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_clear');
  late final _UA_EventNotificationList_clear =
      _UA_EventNotificationList_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_delete(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_delete(
      p,
    );
  }

  late final _UA_EventNotificationList_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_delete');
  late final _UA_EventNotificationList_delete =
      _UA_EventNotificationList_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EnumDescription_init(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_init(
      p,
    );
  }

  late final _UA_EnumDescription_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_init');
  late final _UA_EnumDescription_init = _UA_EnumDescription_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDescription>)>();

  ffi.Pointer<UA_EnumDescription> UA_EnumDescription_new() {
    return _UA_EnumDescription_new();
  }

  late final _UA_EnumDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDescription> Function()>>(
          'UA_EnumDescription_new');
  late final _UA_EnumDescription_new = _UA_EnumDescription_newPtr.asFunction<
      ffi.Pointer<UA_EnumDescription> Function()>();

  int UA_EnumDescription_copy(
    ffi.Pointer<UA_EnumDescription> src,
    ffi.Pointer<UA_EnumDescription> dst,
  ) {
    return _UA_EnumDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumDescription>,
              ffi.Pointer<UA_EnumDescription>)>>('UA_EnumDescription_copy');
  late final _UA_EnumDescription_copy = _UA_EnumDescription_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_deleteMembers(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_deleteMembers(
      p,
    );
  }

  late final _UA_EnumDescription_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_deleteMembers');
  late final _UA_EnumDescription_deleteMembers =
      _UA_EnumDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_clear(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_clear(
      p,
    );
  }

  late final _UA_EnumDescription_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_clear');
  late final _UA_EnumDescription_clear = _UA_EnumDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_delete(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_delete(
      p,
    );
  }

  late final _UA_EnumDescription_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_delete');
  late final _UA_EnumDescription_delete = _UA_EnumDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_UABinaryFileDataType_init(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_init(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_init');
  late final _UA_UABinaryFileDataType_init = _UA_UABinaryFileDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  ffi.Pointer<UA_UABinaryFileDataType> UA_UABinaryFileDataType_new() {
    return _UA_UABinaryFileDataType_new();
  }

  late final _UA_UABinaryFileDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>>(
      'UA_UABinaryFileDataType_new');
  late final _UA_UABinaryFileDataType_new = _UA_UABinaryFileDataType_newPtr
      .asFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>();

  int UA_UABinaryFileDataType_copy(
    ffi.Pointer<UA_UABinaryFileDataType> src,
    ffi.Pointer<UA_UABinaryFileDataType> dst,
  ) {
    return _UA_UABinaryFileDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UABinaryFileDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UABinaryFileDataType>,
                  ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_copy');
  late final _UA_UABinaryFileDataType_copy =
      _UA_UABinaryFileDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UABinaryFileDataType>,
              ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_deleteMembers(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_deleteMembers');
  late final _UA_UABinaryFileDataType_deleteMembers =
      _UA_UABinaryFileDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_clear(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_clear(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_clear');
  late final _UA_UABinaryFileDataType_clear = _UA_UABinaryFileDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_delete(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_delete(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_delete');
  late final _UA_UABinaryFileDataType_delete =
      _UA_UABinaryFileDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_DataSetMetaDataType_init(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_init(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_init');
  late final _UA_DataSetMetaDataType_init = _UA_DataSetMetaDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  ffi.Pointer<UA_DataSetMetaDataType> UA_DataSetMetaDataType_new() {
    return _UA_DataSetMetaDataType_new();
  }

  late final _UA_DataSetMetaDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>>(
      'UA_DataSetMetaDataType_new');
  late final _UA_DataSetMetaDataType_new = _UA_DataSetMetaDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>();

  int UA_DataSetMetaDataType_copy(
    ffi.Pointer<UA_DataSetMetaDataType> src,
    ffi.Pointer<UA_DataSetMetaDataType> dst,
  ) {
    return _UA_DataSetMetaDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetMetaDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetMetaDataType>,
                  ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_copy');
  late final _UA_DataSetMetaDataType_copy =
      _UA_DataSetMetaDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMetaDataType>,
              ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_deleteMembers(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_deleteMembers');
  late final _UA_DataSetMetaDataType_deleteMembers =
      _UA_DataSetMetaDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_clear(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_clear(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_clear');
  late final _UA_DataSetMetaDataType_clear = _UA_DataSetMetaDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_delete(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_delete(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_delete');
  late final _UA_DataSetMetaDataType_delete = _UA_DataSetMetaDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_PublishedDataSetDataType_init(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_init');
  late final _UA_PublishedDataSetDataType_init =
      _UA_PublishedDataSetDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  ffi.Pointer<UA_PublishedDataSetDataType> UA_PublishedDataSetDataType_new() {
    return _UA_PublishedDataSetDataType_new();
  }

  late final _UA_PublishedDataSetDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PublishedDataSetDataType> Function()>>(
      'UA_PublishedDataSetDataType_new');
  late final _UA_PublishedDataSetDataType_new =
      _UA_PublishedDataSetDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedDataSetDataType> Function()>();

  int UA_PublishedDataSetDataType_copy(
    ffi.Pointer<UA_PublishedDataSetDataType> src,
    ffi.Pointer<UA_PublishedDataSetDataType> dst,
  ) {
    return _UA_PublishedDataSetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataSetDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedDataSetDataType>,
                  ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_copy');
  late final _UA_PublishedDataSetDataType_copy =
      _UA_PublishedDataSetDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataSetDataType>,
              ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_deleteMembers(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_deleteMembers');
  late final _UA_PublishedDataSetDataType_deleteMembers =
      _UA_PublishedDataSetDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_clear(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_clear');
  late final _UA_PublishedDataSetDataType_clear =
      _UA_PublishedDataSetDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_delete(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_delete');
  late final _UA_PublishedDataSetDataType_delete =
      _UA_PublishedDataSetDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_DataSetReaderDataType_init(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_init(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_init');
  late final _UA_DataSetReaderDataType_init = _UA_DataSetReaderDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  ffi.Pointer<UA_DataSetReaderDataType> UA_DataSetReaderDataType_new() {
    return _UA_DataSetReaderDataType_new();
  }

  late final _UA_DataSetReaderDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>>(
      'UA_DataSetReaderDataType_new');
  late final _UA_DataSetReaderDataType_new = _UA_DataSetReaderDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>();

  int UA_DataSetReaderDataType_copy(
    ffi.Pointer<UA_DataSetReaderDataType> src,
    ffi.Pointer<UA_DataSetReaderDataType> dst,
  ) {
    return _UA_DataSetReaderDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetReaderDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetReaderDataType>,
                  ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_copy');
  late final _UA_DataSetReaderDataType_copy =
      _UA_DataSetReaderDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetReaderDataType>,
              ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_deleteMembers(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_deleteMembers');
  late final _UA_DataSetReaderDataType_deleteMembers =
      _UA_DataSetReaderDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_clear(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_clear(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_clear');
  late final _UA_DataSetReaderDataType_clear =
      _UA_DataSetReaderDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_delete(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_delete(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_delete');
  late final _UA_DataSetReaderDataType_delete =
      _UA_DataSetReaderDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_TargetVariablesDataType_init(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_init(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_init');
  late final _UA_TargetVariablesDataType_init =
      _UA_TargetVariablesDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  ffi.Pointer<UA_TargetVariablesDataType> UA_TargetVariablesDataType_new() {
    return _UA_TargetVariablesDataType_new();
  }

  late final _UA_TargetVariablesDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_TargetVariablesDataType> Function()>>(
      'UA_TargetVariablesDataType_new');
  late final _UA_TargetVariablesDataType_new =
      _UA_TargetVariablesDataType_newPtr.asFunction<
          ffi.Pointer<UA_TargetVariablesDataType> Function()>();

  int UA_TargetVariablesDataType_copy(
    ffi.Pointer<UA_TargetVariablesDataType> src,
    ffi.Pointer<UA_TargetVariablesDataType> dst,
  ) {
    return _UA_TargetVariablesDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TargetVariablesDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_TargetVariablesDataType>,
                  ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_copy');
  late final _UA_TargetVariablesDataType_copy =
      _UA_TargetVariablesDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TargetVariablesDataType>,
              ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_deleteMembers(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_deleteMembers(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_deleteMembers');
  late final _UA_TargetVariablesDataType_deleteMembers =
      _UA_TargetVariablesDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_clear(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_clear(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_clear');
  late final _UA_TargetVariablesDataType_clear =
      _UA_TargetVariablesDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_delete(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_delete(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_delete');
  late final _UA_TargetVariablesDataType_delete =
      _UA_TargetVariablesDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_ReaderGroupDataType_init(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_init(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_init');
  late final _UA_ReaderGroupDataType_init = _UA_ReaderGroupDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  ffi.Pointer<UA_ReaderGroupDataType> UA_ReaderGroupDataType_new() {
    return _UA_ReaderGroupDataType_new();
  }

  late final _UA_ReaderGroupDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>>(
      'UA_ReaderGroupDataType_new');
  late final _UA_ReaderGroupDataType_new = _UA_ReaderGroupDataType_newPtr
      .asFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>();

  int UA_ReaderGroupDataType_copy(
    ffi.Pointer<UA_ReaderGroupDataType> src,
    ffi.Pointer<UA_ReaderGroupDataType> dst,
  ) {
    return _UA_ReaderGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ReaderGroupDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReaderGroupDataType>,
                  ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_copy');
  late final _UA_ReaderGroupDataType_copy =
      _UA_ReaderGroupDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReaderGroupDataType>,
              ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_deleteMembers(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_deleteMembers');
  late final _UA_ReaderGroupDataType_deleteMembers =
      _UA_ReaderGroupDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_clear(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_clear(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_clear');
  late final _UA_ReaderGroupDataType_clear = _UA_ReaderGroupDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_delete(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_delete(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_delete');
  late final _UA_ReaderGroupDataType_delete = _UA_ReaderGroupDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_PubSubConnectionDataType_init(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_init(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_init');
  late final _UA_PubSubConnectionDataType_init =
      _UA_PubSubConnectionDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  ffi.Pointer<UA_PubSubConnectionDataType> UA_PubSubConnectionDataType_new() {
    return _UA_PubSubConnectionDataType_new();
  }

  late final _UA_PubSubConnectionDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PubSubConnectionDataType> Function()>>(
      'UA_PubSubConnectionDataType_new');
  late final _UA_PubSubConnectionDataType_new =
      _UA_PubSubConnectionDataType_newPtr.asFunction<
          ffi.Pointer<UA_PubSubConnectionDataType> Function()>();

  int UA_PubSubConnectionDataType_copy(
    ffi.Pointer<UA_PubSubConnectionDataType> src,
    ffi.Pointer<UA_PubSubConnectionDataType> dst,
  ) {
    return _UA_PubSubConnectionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConnectionDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PubSubConnectionDataType>,
                  ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_copy');
  late final _UA_PubSubConnectionDataType_copy =
      _UA_PubSubConnectionDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubConnectionDataType>,
              ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_deleteMembers(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_deleteMembers');
  late final _UA_PubSubConnectionDataType_deleteMembers =
      _UA_PubSubConnectionDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_clear(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_clear');
  late final _UA_PubSubConnectionDataType_clear =
      _UA_PubSubConnectionDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_delete(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_delete');
  late final _UA_PubSubConnectionDataType_delete =
      _UA_PubSubConnectionDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConfigurationDataType_init(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_init');
  late final _UA_PubSubConfigurationDataType_init =
      _UA_PubSubConfigurationDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  ffi.Pointer<UA_PubSubConfigurationDataType>
      UA_PubSubConfigurationDataType_new() {
    return _UA_PubSubConfigurationDataType_new();
  }

  late final _UA_PubSubConfigurationDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PubSubConfigurationDataType>
              Function()>>('UA_PubSubConfigurationDataType_new');
  late final _UA_PubSubConfigurationDataType_new =
      _UA_PubSubConfigurationDataType_newPtr.asFunction<
          ffi.Pointer<UA_PubSubConfigurationDataType> Function()>();

  int UA_PubSubConfigurationDataType_copy(
    ffi.Pointer<UA_PubSubConfigurationDataType> src,
    ffi.Pointer<UA_PubSubConfigurationDataType> dst,
  ) {
    return _UA_PubSubConfigurationDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubConfigurationDataType>,
                  ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_copy');
  late final _UA_PubSubConfigurationDataType_copy =
      _UA_PubSubConfigurationDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubConfigurationDataType>,
              ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_deleteMembers(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_deleteMembers');
  late final _UA_PubSubConfigurationDataType_deleteMembers =
      _UA_PubSubConfigurationDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_clear(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_clear');
  late final _UA_PubSubConfigurationDataType_clear =
      _UA_PubSubConfigurationDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_delete(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_delete');
  late final _UA_PubSubConfigurationDataType_delete =
      _UA_PubSubConfigurationDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  /// Key Value Map
  /// -------------
  /// Helper functions to work with configuration parameters in an array of
  /// UA_KeyValuePair. Lookup is linear. So this is for small numbers of
  /// keys.
  int UA_KeyValueMap_setQualified(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<UA_QualifiedName> key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_KeyValueMap_setQualified(
      map,
      mapSize,
      key,
      value,
    );
  }

  late final _UA_KeyValueMap_setQualifiedPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_Variant>)>>('UA_KeyValueMap_setQualified');
  late final _UA_KeyValueMap_setQualified =
      _UA_KeyValueMap_setQualifiedPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_Variant>)>();

  int UA_KeyValueMap_set(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_KeyValueMap_set(
      map,
      mapSize,
      key,
      value,
    );
  }

  late final _UA_KeyValueMap_setPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_KeyValueMap_set');
  late final _UA_KeyValueMap_set = _UA_KeyValueMap_setPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<UA_Variant>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getQualified(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<UA_QualifiedName> key,
  ) {
    return _UA_KeyValueMap_getQualified(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_getQualifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<UA_QualifiedName>)>>('UA_KeyValueMap_getQualified');
  late final _UA_KeyValueMap_getQualified =
      _UA_KeyValueMap_getQualifiedPtr.asFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
              ffi.Pointer<UA_QualifiedName>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_get(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _UA_KeyValueMap_get(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>,
              ffi.Size, ffi.Pointer<ffi.Char>)>>('UA_KeyValueMap_get');
  late final _UA_KeyValueMap_get = _UA_KeyValueMap_getPtr.asFunction<
      ffi.Pointer<UA_Variant> Function(
          ffi.Pointer<UA_KeyValuePair>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getScalar(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_getScalar(
      map,
      mapSize,
      key,
      type,
    );
  }

  late final _UA_KeyValueMap_getScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_getScalar');
  late final _UA_KeyValueMap_getScalar =
      _UA_KeyValueMap_getScalarPtr.asFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_DataType>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getArray(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_getArray(
      map,
      mapSize,
      key,
      type,
    );
  }

  late final _UA_KeyValueMap_getArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_getArray');
  late final _UA_KeyValueMap_getArray = _UA_KeyValueMap_getArrayPtr.asFunction<
      ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<UA_DataType>)>();

  void UA_KeyValueMap_deleteQualified(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<UA_QualifiedName> key,
  ) {
    return _UA_KeyValueMap_deleteQualified(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_deleteQualifiedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_KeyValueMap_deleteQualified');
  late final _UA_KeyValueMap_deleteQualified =
      _UA_KeyValueMap_deleteQualifiedPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_KeyValueMap_delete(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _UA_KeyValueMap_delete(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>)>>('UA_KeyValueMap_delete');
  late final _UA_KeyValueMap_delete = _UA_KeyValueMap_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>();

  int UA_parseEndpointUrl(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> outHostname,
    ffi.Pointer<UA_UInt16> outPort,
    ffi.Pointer<UA_String> outPath,
  ) {
    return _UA_parseEndpointUrl(
      endpointUrl,
      outHostname,
      outPort,
      outPath,
    );
  }

  late final _UA_parseEndpointUrlPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_String>)>>('UA_parseEndpointUrl');
  late final _UA_parseEndpointUrl = _UA_parseEndpointUrlPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>,
          ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_String>)>();

  int UA_parseEndpointUrlEthernet(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> target,
    ffi.Pointer<UA_UInt16> vid,
    ffi.Pointer<UA_Byte> pcp,
  ) {
    return _UA_parseEndpointUrlEthernet(
      endpointUrl,
      target,
      vid,
      pcp,
    );
  }

  late final _UA_parseEndpointUrlEthernetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_Byte>)>>('UA_parseEndpointUrlEthernet');
  late final _UA_parseEndpointUrlEthernet =
      _UA_parseEndpointUrlEthernetPtr.asFunction<
          int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_Byte>)>();

  int UA_readNumber(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
  ) {
    return _UA_readNumber(
      buf,
      buflen,
      number,
    );
  }

  late final _UA_readNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size,
              ffi.Pointer<UA_UInt32>)>>('UA_readNumber');
  late final _UA_readNumber = _UA_readNumberPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>)>();

  int UA_readNumberWithBase(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
    int base,
  ) {
    return _UA_readNumberWithBase(
      buf,
      buflen,
      number,
      base,
    );
  }

  late final _UA_readNumberWithBasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size,
              ffi.Pointer<UA_UInt32>, UA_Byte)>>('UA_readNumberWithBase');
  late final _UA_readNumberWithBase = _UA_readNumberWithBasePtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>, int)>();

  int UA_RelativePath_parse(
    ffi.Pointer<UA_RelativePath> rp,
    UA_String str,
  ) {
    return _UA_RelativePath_parse(
      rp,
      str,
    );
  }

  late final _UA_RelativePath_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RelativePath>,
              UA_String)>>('UA_RelativePath_parse');
  late final _UA_RelativePath_parse = _UA_RelativePath_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_RelativePath>, UA_String)>();

  /// Helper functions for converting data types
  /// ------------------------------------------
  bool UA_constantTimeEqual(
    ffi.Pointer<ffi.Void> ptr1,
    ffi.Pointer<ffi.Void> ptr2,
    int length,
  ) {
    return _UA_constantTimeEqual(
      ptr1,
      ptr2,
      length,
    );
  }

  late final _UA_constantTimeEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('UA_constantTimeEqual');
  late final _UA_constantTimeEqual = _UA_constantTimeEqualPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void UA_LOG_TRACE(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_TRACE(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_TRACEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_TRACE');
  late final _UA_LOG_TRACE = _UA_LOG_TRACEPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_DEBUG(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_DEBUG(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_DEBUGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_DEBUG');
  late final _UA_LOG_DEBUG = _UA_LOG_DEBUGPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_INFO(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_INFO(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_INFO');
  late final _UA_LOG_INFO = _UA_LOG_INFOPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_WARNING(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_WARNING(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_WARNINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_WARNING');
  late final _UA_LOG_WARNING = _UA_LOG_WARNINGPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_ERROR(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_ERROR(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_ERRORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_ERROR');
  late final _UA_LOG_ERROR = _UA_LOG_ERRORPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_FATAL(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_FATAL(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_FATALPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_FATAL');
  late final _UA_LOG_FATAL = _UA_LOG_FATALPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  /// Server Network Layer
  /// --------------------
  /// The server exposes two functions to interact with remote clients:
  /// `processBinaryMessage` and `removeConnection`. These functions are called by
  /// the server network layer.
  ///
  /// It is the job of the server network layer to listen on a TCP socket, to
  /// accept new connections, to call the server with received messages and to
  /// signal closed connections to the server.
  ///
  /// The network layer is part of the server config. So users can provide a custom
  /// implementation if the provided example does not fit their architecture. The
  /// network layer is invoked only from the server's main loop. So the network
  /// layer does not need to be thread-safe. If the network layer receives a
  /// positive duration for blocking listening, the server's main loop will block
  /// until a message is received or the duration times out.
  void UA_Server_processBinaryMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Connection> connection,
    ffi.Pointer<UA_ByteString> message,
  ) {
    return _UA_Server_processBinaryMessage(
      server,
      connection,
      message,
    );
  }

  late final _UA_Server_processBinaryMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_processBinaryMessage');
  late final _UA_Server_processBinaryMessage =
      _UA_Server_processBinaryMessagePtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>,
              ffi.Pointer<UA_ByteString>)>();

  void UA_Server_removeConnection(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Connection> connection,
  ) {
    return _UA_Server_removeConnection(
      server,
      connection,
    );
  }

  late final _UA_Server_removeConnectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Connection>)>>('UA_Server_removeConnection');
  late final _UA_Server_removeConnection =
      _UA_Server_removeConnectionPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>)>();

  /// amalgamated original file "/include/open62541/plugin/securitypolicy.h"
  late final ffi.Pointer<UA_String> _UA_SECURITY_POLICY_NONE_URI =
      _lookup<UA_String>('UA_SECURITY_POLICY_NONE_URI');

  UA_String get UA_SECURITY_POLICY_NONE_URI => _UA_SECURITY_POLICY_NONE_URI.ref;

  void UA_ReferenceTypeSet_init(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
  ) {
    return _UA_ReferenceTypeSet_init(
      set1,
    );
  }

  late final _UA_ReferenceTypeSet_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_ReferenceTypeSet_init');
  late final _UA_ReferenceTypeSet_init = _UA_ReferenceTypeSet_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceTypeSet>)>();

  void UA_ReferenceTypeSet_any(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
  ) {
    return _UA_ReferenceTypeSet_any(
      set1,
    );
  }

  late final _UA_ReferenceTypeSet_anyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_ReferenceTypeSet_any');
  late final _UA_ReferenceTypeSet_any = _UA_ReferenceTypeSet_anyPtr.asFunction<
      void Function(ffi.Pointer<UA_ReferenceTypeSet>)>();

  UA_ReferenceTypeSet UA_REFTYPESET(
    int index,
  ) {
    return _UA_REFTYPESET(
      index,
    );
  }

  late final _UA_REFTYPESETPtr =
      _lookup<ffi.NativeFunction<UA_ReferenceTypeSet Function(UA_Byte)>>(
          'UA_REFTYPESET');
  late final _UA_REFTYPESET =
      _UA_REFTYPESETPtr.asFunction<UA_ReferenceTypeSet Function(int)>();

  UA_ReferenceTypeSet UA_ReferenceTypeSet_union(
    UA_ReferenceTypeSet setA,
    UA_ReferenceTypeSet setB,
  ) {
    return _UA_ReferenceTypeSet_union(
      setA,
      setB,
    );
  }

  late final _UA_ReferenceTypeSet_unionPtr = _lookup<
      ffi.NativeFunction<
          UA_ReferenceTypeSet Function(UA_ReferenceTypeSet,
              UA_ReferenceTypeSet)>>('UA_ReferenceTypeSet_union');
  late final _UA_ReferenceTypeSet_union =
      _UA_ReferenceTypeSet_unionPtr.asFunction<
          UA_ReferenceTypeSet Function(
              UA_ReferenceTypeSet, UA_ReferenceTypeSet)>();

  bool UA_ReferenceTypeSet_contains(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
    int index,
  ) {
    return _UA_ReferenceTypeSet_contains(
      set1,
      index,
    );
  }

  late final _UA_ReferenceTypeSet_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReferenceTypeSet>,
              UA_Byte)>>('UA_ReferenceTypeSet_contains');
  late final _UA_ReferenceTypeSet_contains = _UA_ReferenceTypeSet_containsPtr
      .asFunction<bool Function(ffi.Pointer<UA_ReferenceTypeSet>, int)>();

  void UA_NodePointer_init(
    ffi.Pointer<UA_NodePointer> np,
  ) {
    return _UA_NodePointer_init(
      np,
    );
  }

  late final _UA_NodePointer_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodePointer>)>>(
      'UA_NodePointer_init');
  late final _UA_NodePointer_init = _UA_NodePointer_initPtr.asFunction<
      void Function(ffi.Pointer<UA_NodePointer>)>();

  void UA_NodePointer_clear(
    ffi.Pointer<UA_NodePointer> np,
  ) {
    return _UA_NodePointer_clear(
      np,
    );
  }

  late final _UA_NodePointer_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodePointer>)>>(
      'UA_NodePointer_clear');
  late final _UA_NodePointer_clear = _UA_NodePointer_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_NodePointer>)>();

  int UA_NodePointer_copy(
    UA_NodePointer in1,
    ffi.Pointer<UA_NodePointer> out,
  ) {
    return _UA_NodePointer_copy(
      in1,
      out,
    );
  }

  late final _UA_NodePointer_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(UA_NodePointer,
              ffi.Pointer<UA_NodePointer>)>>('UA_NodePointer_copy');
  late final _UA_NodePointer_copy = _UA_NodePointer_copyPtr.asFunction<
      int Function(UA_NodePointer, ffi.Pointer<UA_NodePointer>)>();

  bool UA_NodePointer_isLocal(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_isLocal(
      np,
    );
  }

  late final _UA_NodePointer_isLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_NodePointer)>>(
          'UA_NodePointer_isLocal');
  late final _UA_NodePointer_isLocal =
      _UA_NodePointer_isLocalPtr.asFunction<bool Function(UA_NodePointer)>();

  int UA_NodePointer_order(
    UA_NodePointer p1,
    UA_NodePointer p2,
  ) {
    return _UA_NodePointer_order(
      p1,
      p2,
    );
  }

  late final _UA_NodePointer_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(UA_NodePointer, UA_NodePointer)>>(
      'UA_NodePointer_order');
  late final _UA_NodePointer_order = _UA_NodePointer_orderPtr.asFunction<
      int Function(UA_NodePointer, UA_NodePointer)>();

  bool UA_NodePointer_equal(
    UA_NodePointer p1,
    UA_NodePointer p2,
  ) {
    return _UA_NodePointer_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodePointer_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(UA_NodePointer, UA_NodePointer)>>(
      'UA_NodePointer_equal');
  late final _UA_NodePointer_equal = _UA_NodePointer_equalPtr.asFunction<
      bool Function(UA_NodePointer, UA_NodePointer)>();

  UA_NodePointer UA_NodePointer_fromNodeId(
    ffi.Pointer<UA_NodeId> id,
  ) {
    return _UA_NodePointer_fromNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromNodeIdPtr = _lookup<
          ffi.NativeFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>>(
      'UA_NodePointer_fromNodeId');
  late final _UA_NodePointer_fromNodeId = _UA_NodePointer_fromNodeIdPtr
      .asFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>();

  UA_NodePointer UA_NodePointer_fromExpandedNodeId(
    ffi.Pointer<UA_ExpandedNodeId> id,
  ) {
    return _UA_NodePointer_fromExpandedNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromExpandedNodeIdPtr = _lookup<
          ffi.NativeFunction<
              UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_NodePointer_fromExpandedNodeId');
  late final _UA_NodePointer_fromExpandedNodeId =
      _UA_NodePointer_fromExpandedNodeIdPtr.asFunction<
          UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  UA_ExpandedNodeId UA_NodePointer_toExpandedNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toExpandedNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toExpandedNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodePointer)>>(
          'UA_NodePointer_toExpandedNodeId');
  late final _UA_NodePointer_toExpandedNodeId =
      _UA_NodePointer_toExpandedNodeIdPtr.asFunction<
          UA_ExpandedNodeId Function(UA_NodePointer)>();

  UA_NodeId UA_NodePointer_toNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_NodePointer)>>(
          'UA_NodePointer_toNodeId');
  late final _UA_NodePointer_toNodeId = _UA_NodePointer_toNodeIdPtr.asFunction<
      UA_NodeId Function(UA_NodePointer)>();

  ffi.Pointer<UA_ReferenceTarget> UA_NodeReferenceKind_iterate(
    ffi.Pointer<UA_NodeReferenceKind> rk,
    ffi.Pointer<UA_ReferenceTarget> prev,
  ) {
    return _UA_NodeReferenceKind_iterate(
      rk,
      prev,
    );
  }

  late final _UA_NodeReferenceKind_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UA_ReferenceTarget> Function(
                  ffi.Pointer<UA_NodeReferenceKind>,
                  ffi.Pointer<UA_ReferenceTarget>)>>(
      'UA_NodeReferenceKind_iterate');
  late final _UA_NodeReferenceKind_iterate =
      _UA_NodeReferenceKind_iteratePtr.asFunction<
          ffi.Pointer<UA_ReferenceTarget> Function(
              ffi.Pointer<UA_NodeReferenceKind>,
              ffi.Pointer<UA_ReferenceTarget>)>();

  int UA_NodeReferenceKind_switch(
    ffi.Pointer<UA_NodeReferenceKind> rk,
  ) {
    return _UA_NodeReferenceKind_switch(
      rk,
    );
  }

  late final _UA_NodeReferenceKind_switchPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NodeReferenceKind>)>>(
      'UA_NodeReferenceKind_switch');
  late final _UA_NodeReferenceKind_switch = _UA_NodeReferenceKind_switchPtr
      .asFunction<int Function(ffi.Pointer<UA_NodeReferenceKind>)>();

  int UA_Node_setAttributes(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<ffi.Void> attributes,
    ffi.Pointer<UA_DataType> attributeType,
  ) {
    return _UA_Node_setAttributes(
      node,
      attributes,
      attributeType,
    );
  }

  late final _UA_Node_setAttributesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Node_setAttributes');
  late final _UA_Node_setAttributes = _UA_Node_setAttributesPtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  int UA_Node_copy(
    ffi.Pointer<UA_Node> src,
    ffi.Pointer<UA_Node> dst,
  ) {
    return _UA_Node_copy(
      src,
      dst,
    );
  }

  late final _UA_Node_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>>('UA_Node_copy');
  late final _UA_Node_copy = _UA_Node_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>();

  ffi.Pointer<UA_Node> UA_Node_copy_alloc(
    ffi.Pointer<UA_Node> src,
  ) {
    return _UA_Node_copy_alloc(
      src,
    );
  }

  late final _UA_Node_copy_allocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>>(
      'UA_Node_copy_alloc');
  late final _UA_Node_copy_alloc = _UA_Node_copy_allocPtr.asFunction<
      ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>();

  int UA_Node_addReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
    int targetBrowseNameHash,
  ) {
    return _UA_Node_addReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
      targetBrowseNameHash,
    );
  }

  late final _UA_Node_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>,
              UA_Byte,
              ffi.Bool,
              ffi.Pointer<UA_ExpandedNodeId>,
              UA_UInt32)>>('UA_Node_addReference');
  late final _UA_Node_addReference = _UA_Node_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, int, bool,
          ffi.Pointer<UA_ExpandedNodeId>, int)>();

  int UA_Node_deleteReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
  ) {
    return _UA_Node_deleteReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
    );
  }

  late final _UA_Node_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Node>, UA_Byte, ffi.Bool,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_Node_deleteReference');
  late final _UA_Node_deleteReference = _UA_Node_deleteReferencePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Node>, int, bool, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_Node_deleteReferencesSubset(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<UA_ReferenceTypeSet> keepSet,
  ) {
    return _UA_Node_deleteReferencesSubset(
      node,
      keepSet,
    );
  }

  late final _UA_Node_deleteReferencesSubsetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_Node_deleteReferencesSubset');
  late final _UA_Node_deleteReferencesSubset =
      _UA_Node_deleteReferencesSubsetPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>();

  void UA_Node_deleteReferences(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_deleteReferences(
      node,
    );
  }

  late final _UA_Node_deleteReferencesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>(
          'UA_Node_deleteReferences');
  late final _UA_Node_deleteReferences = _UA_Node_deleteReferencesPtr
      .asFunction<void Function(ffi.Pointer<UA_Node>)>();

  void UA_Node_clear(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_clear(
      node,
    );
  }

  late final _UA_Node_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>(
          'UA_Node_clear');
  late final _UA_Node_clear =
      _UA_Node_clearPtr.asFunction<void Function(ffi.Pointer<UA_Node>)>();

  /// The UA_ServerConfig_addPubSubTransportLayer is used to add a transport layer
  /// to the server configuration. The list memory is allocated and will be freed
  /// with UA_PubSubManager_delete.
  ///
  /// .. note:: If the UA_String transportProfileUri was dynamically allocated
  /// the memory has to be freed when no longer required.
  ///
  /// .. note:: This has to be done before the server is started with UA_Server_run.
  int UA_ServerConfig_addPubSubTransportLayer(
    ffi.Pointer<UA_ServerConfig> config,
    UA_PubSubTransportLayer pubsubTransportLayer,
  ) {
    return _UA_ServerConfig_addPubSubTransportLayer(
      config,
      pubsubTransportLayer,
    );
  }

  late final _UA_ServerConfig_addPubSubTransportLayerPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>, UA_PubSubTransportLayer)>>(
      'UA_ServerConfig_addPubSubTransportLayer');
  late final _UA_ServerConfig_addPubSubTransportLayer =
      _UA_ServerConfig_addPubSubTransportLayerPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, UA_PubSubTransportLayer)>();

  int UA_Server_addPubSubConnection(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig,
    ffi.Pointer<UA_NodeId> connectionIdentifier,
  ) {
    return _UA_Server_addPubSubConnection(
      server,
      connectionConfig,
      connectionIdentifier,
    );
  }

  late final _UA_Server_addPubSubConnectionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPubSubConnection');
  late final _UA_Server_addPubSubConnection =
      _UA_Server_addPubSubConnectionPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getPubSubConnectionConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
    ffi.Pointer<UA_PubSubConnectionConfig> config,
  ) {
    return _UA_Server_getPubSubConnectionConfig(
      server,
      connection,
      config,
    );
  }

  late final _UA_Server_getPubSubConnectionConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_PubSubConnectionConfig>)>>(
      'UA_Server_getPubSubConnectionConfig');
  late final _UA_Server_getPubSubConnectionConfig =
      _UA_Server_getPubSubConnectionConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubConnectionConfig>)>();

  int UA_Server_removePubSubConnection(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
  ) {
    return _UA_Server_removePubSubConnection(
      server,
      connection,
    );
  }

  late final _UA_Server_removePubSubConnectionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removePubSubConnection');
  late final _UA_Server_removePubSubConnection =
      _UA_Server_removePubSubConnectionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_PublishedDataSetConfig_clear(
    ffi.Pointer<UA_PublishedDataSetConfig> pdsConfig,
  ) {
    return _UA_PublishedDataSetConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_PublishedDataSetConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>>(
      'UA_PublishedDataSetConfig_clear');
  late final _UA_PublishedDataSetConfig_clear =
      _UA_PublishedDataSetConfig_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>();

  UA_AddPublishedDataSetResult UA_Server_addPublishedDataSet(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PublishedDataSetConfig> publishedDataSetConfig,
    ffi.Pointer<UA_NodeId> pdsIdentifier,
  ) {
    return _UA_Server_addPublishedDataSet(
      server,
      publishedDataSetConfig,
      pdsIdentifier,
    );
  }

  late final _UA_Server_addPublishedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_AddPublishedDataSetResult Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPublishedDataSet');
  late final _UA_Server_addPublishedDataSet =
      _UA_Server_addPublishedDataSetPtr.asFunction<
          UA_AddPublishedDataSetResult Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getPublishedDataSetConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
    ffi.Pointer<UA_PublishedDataSetConfig> config,
  ) {
    return _UA_Server_getPublishedDataSetConfig(
      server,
      pds,
      config,
    );
  }

  late final _UA_Server_getPublishedDataSetConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_PublishedDataSetConfig>)>>(
      'UA_Server_getPublishedDataSetConfig');
  late final _UA_Server_getPublishedDataSetConfig =
      _UA_Server_getPublishedDataSetConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PublishedDataSetConfig>)>();

  int UA_Server_getPublishedDataSetMetaData(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
    ffi.Pointer<UA_DataSetMetaDataType> metaData,
  ) {
    return _UA_Server_getPublishedDataSetMetaData(
      server,
      pds,
      metaData,
    );
  }

  late final _UA_Server_getPublishedDataSetMetaDataPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_Server_getPublishedDataSetMetaData');
  late final _UA_Server_getPublishedDataSetMetaData =
      _UA_Server_getPublishedDataSetMetaDataPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetMetaDataType>)>();

  int UA_Server_removePublishedDataSet(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
  ) {
    return _UA_Server_removePublishedDataSet(
      server,
      pds,
    );
  }

  late final _UA_Server_removePublishedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removePublishedDataSet');
  late final _UA_Server_removePublishedDataSet =
      _UA_Server_removePublishedDataSetPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetFieldConfig_clear(
    ffi.Pointer<UA_DataSetFieldConfig> dataSetFieldConfig,
  ) {
    return _UA_DataSetFieldConfig_clear(
      dataSetFieldConfig,
    );
  }

  late final _UA_DataSetFieldConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldConfig>)>>(
      'UA_DataSetFieldConfig_clear');
  late final _UA_DataSetFieldConfig_clear = _UA_DataSetFieldConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_addDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId publishedDataSet,
    ffi.Pointer<UA_DataSetFieldConfig> fieldConfig,
    ffi.Pointer<UA_NodeId> fieldIdentifier,
  ) {
    return _UA_Server_addDataSetField(
      server,
      publishedDataSet,
      fieldConfig,
      fieldIdentifier,
    );
  }

  late final _UA_Server_addDataSetFieldPtr = _lookup<
      ffi.NativeFunction<
          UA_DataSetFieldResult Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetField');
  late final _UA_Server_addDataSetField =
      _UA_Server_addDataSetFieldPtr.asFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetFieldConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsf,
    ffi.Pointer<UA_DataSetFieldConfig> config,
  ) {
    return _UA_Server_getDataSetFieldConfig(
      server,
      dsf,
      config,
    );
  }

  late final _UA_Server_getDataSetFieldConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetFieldConfig>)>>(
      'UA_Server_getDataSetFieldConfig');
  late final _UA_Server_getDataSetFieldConfig =
      _UA_Server_getDataSetFieldConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_removeDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsf,
  ) {
    return _UA_Server_removeDataSetField(
      server,
      dsf,
    );
  }

  late final _UA_Server_removeDataSetFieldPtr = _lookup<
      ffi.NativeFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetField');
  late final _UA_Server_removeDataSetField =
      _UA_Server_removeDataSetFieldPtr.asFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_WriterGroupConfig_clear(
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
  ) {
    return _UA_WriterGroupConfig_clear(
      writerGroupConfig,
    );
  }

  late final _UA_WriterGroupConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_WriterGroupConfig_clear');
  late final _UA_WriterGroupConfig_clear = _UA_WriterGroupConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_addWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
    ffi.Pointer<UA_NodeId> writerGroupIdentifier,
  ) {
    return _UA_Server_addWriterGroup(
      server,
      connection,
      writerGroupConfig,
      writerGroupIdentifier,
    );
  }

  late final _UA_Server_addWriterGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addWriterGroup');
  late final _UA_Server_addWriterGroup =
      _UA_Server_addWriterGroupPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_getWriterGroupConfig(
      server,
      writerGroup,
      config,
    );
  }

  late final _UA_Server_getWriterGroupConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_Server_getWriterGroupConfig');
  late final _UA_Server_getWriterGroupConfig =
      _UA_Server_getWriterGroupConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_updateWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroupIdentifier,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_updateWriterGroupConfig(
      server,
      writerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_updateWriterGroupConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_Server_updateWriterGroupConfig');
  late final _UA_Server_updateWriterGroupConfig =
      _UA_Server_updateWriterGroupConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_WriterGroup_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroupIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_WriterGroup_getState(
      server,
      writerGroupIdentifier,
      state,
    );
  }

  late final _UA_Server_WriterGroup_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_WriterGroup_getState');
  late final _UA_Server_WriterGroup_getState =
      _UA_Server_WriterGroup_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_removeWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_removeWriterGroup(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_removeWriterGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeWriterGroup');
  late final _UA_Server_removeWriterGroup = _UA_Server_removeWriterGroupPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_freezeWriterGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_freezeWriterGroupConfiguration(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_freezeWriterGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_freezeWriterGroupConfiguration');
  late final _UA_Server_freezeWriterGroupConfiguration =
      _UA_Server_freezeWriterGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_unfreezeWriterGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_unfreezeWriterGroupConfiguration(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_unfreezeWriterGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_unfreezeWriterGroupConfiguration');
  late final _UA_Server_unfreezeWriterGroupConfiguration =
      _UA_Server_unfreezeWriterGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setWriterGroupOperational(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_setWriterGroupOperational(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_setWriterGroupOperationalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setWriterGroupOperational');
  late final _UA_Server_setWriterGroupOperational =
      _UA_Server_setWriterGroupOperationalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setWriterGroupDisabled(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_setWriterGroupDisabled(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_setWriterGroupDisabledPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setWriterGroupDisabled');
  late final _UA_Server_setWriterGroupDisabled =
      _UA_Server_setWriterGroupDisabledPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetWriterConfig_clear(
    ffi.Pointer<UA_DataSetWriterConfig> pdsConfig,
  ) {
    return _UA_DataSetWriterConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_DataSetWriterConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterConfig>)>>(
      'UA_DataSetWriterConfig_clear');
  late final _UA_DataSetWriterConfig_clear = _UA_DataSetWriterConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_addDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
    UA_NodeId dataSet,
    ffi.Pointer<UA_DataSetWriterConfig> dataSetWriterConfig,
    ffi.Pointer<UA_NodeId> writerIdentifier,
  ) {
    return _UA_Server_addDataSetWriter(
      server,
      writerGroup,
      dataSet,
      dataSetWriterConfig,
      writerIdentifier,
    );
  }

  late final _UA_Server_addDataSetWriterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetWriter');
  late final _UA_Server_addDataSetWriter =
      _UA_Server_addDataSetWriterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetWriterConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsw,
    ffi.Pointer<UA_DataSetWriterConfig> config,
  ) {
    return _UA_Server_getDataSetWriterConfig(
      server,
      dsw,
      config,
    );
  }

  late final _UA_Server_getDataSetWriterConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetWriterConfig>)>>(
      'UA_Server_getDataSetWriterConfig');
  late final _UA_Server_getDataSetWriterConfig =
      _UA_Server_getDataSetWriterConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_DataSetWriter_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetWriterIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_DataSetWriter_getState(
      server,
      dataSetWriterIdentifier,
      state,
    );
  }

  late final _UA_Server_DataSetWriter_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_DataSetWriter_getState');
  late final _UA_Server_DataSetWriter_getState =
      _UA_Server_DataSetWriter_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_removeDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsw,
  ) {
    return _UA_Server_removeDataSetWriter(
      server,
      dsw,
    );
  }

  late final _UA_Server_removeDataSetWriterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetWriter');
  late final _UA_Server_removeDataSetWriter = _UA_Server_removeDataSetWriterPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_DataSetReader_createTargetVariables(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    int targetVariablesSize,
    ffi.Pointer<UA_FieldTargetVariable> targetVariables,
  ) {
    return _UA_Server_DataSetReader_createTargetVariables(
      server,
      dataSetReaderIdentifier,
      targetVariablesSize,
      targetVariables,
    );
  }

  late final _UA_Server_DataSetReader_createTargetVariablesPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_FieldTargetVariable>)>>(
      'UA_Server_DataSetReader_createTargetVariables');
  late final _UA_Server_DataSetReader_createTargetVariables =
      _UA_Server_DataSetReader_createTargetVariablesPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, int,
              ffi.Pointer<UA_FieldTargetVariable>)>();

  int UA_Server_DataSetReader_updateConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_DataSetReader_updateConfig(
      server,
      dataSetReaderIdentifier,
      readerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_DataSetReader_updateConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_Server_DataSetReader_updateConfig');
  late final _UA_Server_DataSetReader_updateConfig =
      _UA_Server_DataSetReader_updateConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_DataSetReader_getConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_DataSetReader_getConfig(
      server,
      dataSetReaderIdentifier,
      config,
    );
  }

  late final _UA_Server_DataSetReader_getConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_Server_DataSetReader_getConfig');
  late final _UA_Server_DataSetReader_getConfig =
      _UA_Server_DataSetReader_getConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_DataSetReader_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_DataSetReader_getState(
      server,
      dataSetReaderIdentifier,
      state,
    );
  }

  late final _UA_Server_DataSetReader_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_DataSetReader_getState');
  late final _UA_Server_DataSetReader_getState =
      _UA_Server_DataSetReader_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  void UA_ReaderGroupConfig_clear(
    ffi.Pointer<UA_ReaderGroupConfig> readerGroupConfig,
  ) {
    return _UA_ReaderGroupConfig_clear(
      readerGroupConfig,
    );
  }

  late final _UA_ReaderGroupConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupConfig>)>>(
      'UA_ReaderGroupConfig_clear');
  late final _UA_ReaderGroupConfig_clear = _UA_ReaderGroupConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_addDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> dataSetReaderConfig,
    ffi.Pointer<UA_NodeId> readerIdentifier,
  ) {
    return _UA_Server_addDataSetReader(
      server,
      readerGroupIdentifier,
      dataSetReaderConfig,
      readerIdentifier,
    );
  }

  late final _UA_Server_addDataSetReaderPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetReader');
  late final _UA_Server_addDataSetReader =
      _UA_Server_addDataSetReaderPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_removeDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerIdentifier,
  ) {
    return _UA_Server_removeDataSetReader(
      server,
      readerIdentifier,
    );
  }

  late final _UA_Server_removeDataSetReaderPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetReader');
  late final _UA_Server_removeDataSetReader = _UA_Server_removeDataSetReaderPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_ReaderGroup_getConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_ReaderGroupConfig> config,
  ) {
    return _UA_Server_ReaderGroup_getConfig(
      server,
      readerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_ReaderGroup_getConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_ReaderGroupConfig>)>>(
      'UA_Server_ReaderGroup_getConfig');
  late final _UA_Server_ReaderGroup_getConfig =
      _UA_Server_ReaderGroup_getConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_ReaderGroup_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_ReaderGroup_getState(
      server,
      readerGroupIdentifier,
      state,
    );
  }

  late final _UA_Server_ReaderGroup_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_ReaderGroup_getState');
  late final _UA_Server_ReaderGroup_getState =
      _UA_Server_ReaderGroup_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_addReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionIdentifier,
    ffi.Pointer<UA_ReaderGroupConfig> readerGroupConfig,
    ffi.Pointer<UA_NodeId> readerGroupIdentifier,
  ) {
    return _UA_Server_addReaderGroup(
      server,
      connectionIdentifier,
      readerGroupConfig,
      readerGroupIdentifier,
    );
  }

  late final _UA_Server_addReaderGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReaderGroup');
  late final _UA_Server_addReaderGroup =
      _UA_Server_addReaderGroupPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_removeReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId groupIdentifier,
  ) {
    return _UA_Server_removeReaderGroup(
      server,
      groupIdentifier,
    );
  }

  late final _UA_Server_removeReaderGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeReaderGroup');
  late final _UA_Server_removeReaderGroup = _UA_Server_removeReaderGroupPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_freezeReaderGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_freezeReaderGroupConfiguration(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_freezeReaderGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_freezeReaderGroupConfiguration');
  late final _UA_Server_freezeReaderGroupConfiguration =
      _UA_Server_freezeReaderGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_unfreezeReaderGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_unfreezeReaderGroupConfiguration(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_unfreezeReaderGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_unfreezeReaderGroupConfiguration');
  late final _UA_Server_unfreezeReaderGroupConfiguration =
      _UA_Server_unfreezeReaderGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setReaderGroupOperational(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_setReaderGroupOperational(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_setReaderGroupOperationalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setReaderGroupOperational');
  late final _UA_Server_setReaderGroupOperational =
      _UA_Server_setReaderGroupOperationalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setReaderGroupDisabled(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_setReaderGroupDisabled(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_setReaderGroupDisabledPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setReaderGroupDisabled');
  late final _UA_Server_setReaderGroupDisabled =
      _UA_Server_setReaderGroupDisabledPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_ServerConfig_clean(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_clean(
      config,
    );
  }

  late final _UA_ServerConfig_cleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerConfig>)>>(
      'UA_ServerConfig_clean');
  late final _UA_ServerConfig_clean = _UA_ServerConfig_cleanPtr.asFunction<
      void Function(ffi.Pointer<UA_ServerConfig>)>();

  ffi.Pointer<UA_Server> UA_Server_newWithConfig(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_Server_newWithConfig(
      config,
    );
  }

  late final _UA_Server_newWithConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Server> Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_Server_newWithConfig');
  late final _UA_Server_newWithConfig = _UA_Server_newWithConfigPtr.asFunction<
      ffi.Pointer<UA_Server> Function(ffi.Pointer<UA_ServerConfig>)>();

  void UA_Server_delete(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_delete(
      server,
    );
  }

  late final _UA_Server_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>)>>(
          'UA_Server_delete');
  late final _UA_Server_delete =
      _UA_Server_deletePtr.asFunction<void Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_ServerConfig> UA_Server_getConfig(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getConfig(
      server,
    );
  }

  late final _UA_Server_getConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ServerConfig> Function(
              ffi.Pointer<UA_Server>)>>('UA_Server_getConfig');
  late final _UA_Server_getConfig = _UA_Server_getConfigPtr.asFunction<
      ffi.Pointer<UA_ServerConfig> Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Bool> running,
  ) {
    return _UA_Server_run(
      server,
      running,
    );
  }

  late final _UA_Server_runPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>>('UA_Server_run');
  late final _UA_Server_run = _UA_Server_runPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_run_startup(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_startup(
      server,
    );
  }

  late final _UA_Server_run_startupPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_run_startup');
  late final _UA_Server_run_startup = _UA_Server_run_startupPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run_iterate(
    ffi.Pointer<UA_Server> server,
    bool waitInternal,
  ) {
    return _UA_Server_run_iterate(
      server,
      waitInternal,
    );
  }

  late final _UA_Server_run_iteratePtr = _lookup<
      ffi.NativeFunction<
          UA_UInt16 Function(
              ffi.Pointer<UA_Server>, ffi.Bool)>>('UA_Server_run_iterate');
  late final _UA_Server_run_iterate = _UA_Server_run_iteratePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, bool)>();

  int UA_Server_run_shutdown(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_shutdown(
      server,
    );
  }

  late final _UA_Server_run_shutdownPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_run_shutdown');
  late final _UA_Server_run_shutdown = _UA_Server_run_shutdownPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_addTimedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addTimedCallback(
      server,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Server_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addTimedCallback');
  late final _UA_Server_addTimedCallback =
      _UA_Server_addTimedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_ServerCallback,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_addRepeatedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addRepeatedCallback(
      server,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Server_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addRepeatedCallback');
  late final _UA_Server_addRepeatedCallback =
      _UA_Server_addRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_ServerCallback,
              ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Server> server,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Server_changeRepeatedCallbackInterval(
      server,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Server_changeRepeatedCallbackIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_UInt64,
              UA_Double)>>('UA_Server_changeRepeatedCallbackInterval');
  late final _UA_Server_changeRepeatedCallbackInterval =
      _UA_Server_changeRepeatedCallbackIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, int, double)>();

  void UA_Server_removeCallback(
    ffi.Pointer<UA_Server> server,
    int callbackId,
  ) {
    return _UA_Server_removeCallback(
      server,
      callbackId,
    );
  }

  late final _UA_Server_removeCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>, UA_UInt64)>>('UA_Server_removeCallback');
  late final _UA_Server_removeCallback = _UA_Server_removeCallbackPtr
      .asFunction<void Function(ffi.Pointer<UA_Server>, int)>();

  /// Session Handling
  /// ----------------
  /// A new session is announced via the AccessControl plugin. The session
  /// identifier is forwarded to the relevant callbacks back into userland. The
  /// following methods enable an interaction with a particular session.
  int UA_Server_closeSession(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
  ) {
    return _UA_Server_closeSession(
      server,
      sessionId,
    );
  }

  late final _UA_Server_closeSessionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_closeSession');
  late final _UA_Server_closeSession = _UA_Server_closeSessionPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_setSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_Variant> parameter,
  ) {
    return _UA_Server_setSessionParameter(
      server,
      sessionId,
      name,
      parameter,
    );
  }

  late final _UA_Server_setSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_setSessionParameter');
  late final _UA_Server_setSessionParameter =
      _UA_Server_setSessionParameterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_Variant>)>();

  void UA_Server_deleteSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_Server_deleteSessionParameter(
      server,
      sessionId,
      name,
    );
  }

  late final _UA_Server_deleteSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>)>>('UA_Server_deleteSessionParameter');
  late final _UA_Server_deleteSessionParameter =
      _UA_Server_deleteSessionParameterPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>)>();

  int UA_Server_getSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionParameter(
      server,
      sessionId,
      name,
      outParameter,
    );
  }

  late final _UA_Server_getSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionParameter');
  late final _UA_Server_getSessionParameter =
      _UA_Server_getSessionParameterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionScalarParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionScalarParameter(
      server,
      sessionId,
      name,
      type,
      outParameter,
    );
  }

  late final _UA_Server_getSessionScalarParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionScalarParameter');
  late final _UA_Server_getSessionScalarParameter =
      _UA_Server_getSessionScalarParameterPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionArrayParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionArrayParameter(
      server,
      sessionId,
      name,
      type,
      outParameter,
    );
  }

  late final _UA_Server_getSessionArrayParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionArrayParameter');
  late final _UA_Server_getSessionArrayParameter =
      _UA_Server_getSessionArrayParameterPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>();

  int UA_Server_readNodeId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_readNodeId(
      server,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Server_readNodeIdPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_readNodeId');
  late final _UA_Server_readNodeId = _UA_Server_readNodeIdPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readNodeClass(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
  ) {
    return _UA_Server_readNodeClass(
      server,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Server_readNodeClassPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_readNodeClass');
  late final _UA_Server_readNodeClass = _UA_Server_readNodeClassPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_readBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Server_readBrowseName(
      server,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Server_readBrowseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>>('UA_Server_readBrowseName');
  late final _UA_Server_readBrowseName =
      _UA_Server_readBrowseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_readDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Server_readDisplayName(
      server,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Server_readDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readDisplayName');
  late final _UA_Server_readDisplayName =
      _UA_Server_readDisplayNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Server_readDescription(
      server,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Server_readDescriptionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readDescription');
  late final _UA_Server_readDescription =
      _UA_Server_readDescriptionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Server_readWriteMask(
      server,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Server_readWriteMaskPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Server_readWriteMask');
  late final _UA_Server_readWriteMask = _UA_Server_readWriteMaskPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Server_readIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Server_readIsAbstract(
      server,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Server_readIsAbstractPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readIsAbstract');
  late final _UA_Server_readIsAbstract =
      _UA_Server_readIsAbstractPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readSymmetric(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Server_readSymmetric(
      server,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Server_readSymmetricPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readSymmetric');
  late final _UA_Server_readSymmetric = _UA_Server_readSymmetricPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Server_readInverseName(
      server,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Server_readInverseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readInverseName');
  late final _UA_Server_readInverseName =
      _UA_Server_readInverseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readContainsNoLoops(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Server_readContainsNoLoops(
      server,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Server_readContainsNoLoopsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readContainsNoLoops');
  late final _UA_Server_readContainsNoLoops =
      _UA_Server_readContainsNoLoopsPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Server_readEventNotifier(
      server,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Server_readEventNotifierPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Server_readEventNotifier');
  late final _UA_Server_readEventNotifier =
      _UA_Server_readEventNotifierPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Server_readValue(
      server,
      nodeId,
      outValue,
    );
  }

  late final _UA_Server_readValuePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readValue');
  late final _UA_Server_readValue = _UA_Server_readValuePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Server_readDataType(
      server,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Server_readDataTypePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_readDataType');
  late final _UA_Server_readDataType = _UA_Server_readDataTypePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Server_readValueRank(
      server,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Server_readValueRankPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Server_readValueRank');
  late final _UA_Server_readValueRank = _UA_Server_readValueRankPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Server_readArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outArrayDimensions,
  ) {
    return _UA_Server_readArrayDimensions(
      server,
      nodeId,
      outArrayDimensions,
    );
  }

  late final _UA_Server_readArrayDimensionsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readArrayDimensions');
  late final _UA_Server_readArrayDimensions =
      _UA_Server_readArrayDimensionsPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Server_readAccessLevel(
      server,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Server_readAccessLevelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Server_readAccessLevel');
  late final _UA_Server_readAccessLevel =
      _UA_Server_readAccessLevelPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinimumSamplingInterval,
  ) {
    return _UA_Server_readMinimumSamplingInterval(
      server,
      nodeId,
      outMinimumSamplingInterval,
    );
  }

  late final _UA_Server_readMinimumSamplingIntervalPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Server_readMinimumSamplingInterval');
  late final _UA_Server_readMinimumSamplingInterval =
      _UA_Server_readMinimumSamplingIntervalPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Server_readHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Server_readHistorizing(
      server,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Server_readHistorizingPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readHistorizing');
  late final _UA_Server_readHistorizing =
      _UA_Server_readHistorizingPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Server_readExecutable(
      server,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Server_readExecutablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readExecutable');
  late final _UA_Server_readExecutable =
      _UA_Server_readExecutablePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_write(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriteValue> value,
  ) {
    return _UA_Server_write(
      server,
      value,
    );
  }

  late final _UA_Server_writePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_WriteValue>)>>('UA_Server_write');
  late final _UA_Server_write = _UA_Server_writePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriteValue>)>();

  int UA_Server_writeBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_QualifiedName browseName,
  ) {
    return _UA_Server_writeBrowseName(
      server,
      nodeId,
      browseName,
    );
  }

  late final _UA_Server_writeBrowseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_QualifiedName)>>('UA_Server_writeBrowseName');
  late final _UA_Server_writeBrowseName =
      _UA_Server_writeBrowseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName)>();

  int UA_Server_writeDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText displayName,
  ) {
    return _UA_Server_writeDisplayName(
      server,
      nodeId,
      displayName,
    );
  }

  late final _UA_Server_writeDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeDisplayName');
  late final _UA_Server_writeDisplayName =
      _UA_Server_writeDisplayNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText description,
  ) {
    return _UA_Server_writeDescription(
      server,
      nodeId,
      description,
    );
  }

  late final _UA_Server_writeDescriptionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeDescription');
  late final _UA_Server_writeDescription =
      _UA_Server_writeDescriptionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int writeMask,
  ) {
    return _UA_Server_writeWriteMask(
      server,
      nodeId,
      writeMask,
    );
  }

  late final _UA_Server_writeWriteMaskPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_UInt32)>>('UA_Server_writeWriteMask');
  late final _UA_Server_writeWriteMask = _UA_Server_writeWriteMaskPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool isAbstract,
  ) {
    return _UA_Server_writeIsAbstract(
      server,
      nodeId,
      isAbstract,
    );
  }

  late final _UA_Server_writeIsAbstractPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeIsAbstract');
  late final _UA_Server_writeIsAbstract = _UA_Server_writeIsAbstractPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText inverseName,
  ) {
    return _UA_Server_writeInverseName(
      server,
      nodeId,
      inverseName,
    );
  }

  late final _UA_Server_writeInverseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeInverseName');
  late final _UA_Server_writeInverseName =
      _UA_Server_writeInverseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int eventNotifier,
  ) {
    return _UA_Server_writeEventNotifier(
      server,
      nodeId,
      eventNotifier,
    );
  }

  late final _UA_Server_writeEventNotifierPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Byte)>>('UA_Server_writeEventNotifier');
  late final _UA_Server_writeEventNotifier = _UA_Server_writeEventNotifierPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  /// Writes an UA_Variant to a variable/variableType node.
  /// StatusCode is set to ``UA_STATUSCODE_GOOD``, sourceTimestamp and
  /// serverTimestamp are set to UA_DateTime_now()
  int UA_Server_writeValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant value,
  ) {
    return _UA_Server_writeValue(
      server,
      nodeId,
      value,
    );
  }

  late final _UA_Server_writeValuePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Variant)>>('UA_Server_writeValue');
  late final _UA_Server_writeValue = _UA_Server_writeValuePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeId dataType,
  ) {
    return _UA_Server_writeDataType(
      server,
      nodeId,
      dataType,
    );
  }

  late final _UA_Server_writeDataTypePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeId)>>('UA_Server_writeDataType');
  late final _UA_Server_writeDataType = _UA_Server_writeDataTypePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId)>();

  int UA_Server_writeValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int valueRank,
  ) {
    return _UA_Server_writeValueRank(
      server,
      nodeId,
      valueRank,
    );
  }

  late final _UA_Server_writeValueRankPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Int32)>>('UA_Server_writeValueRank');
  late final _UA_Server_writeValueRank = _UA_Server_writeValueRankPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant arrayDimensions,
  ) {
    return _UA_Server_writeArrayDimensions(
      server,
      nodeId,
      arrayDimensions,
    );
  }

  late final _UA_Server_writeArrayDimensionsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Variant)>>('UA_Server_writeArrayDimensions');
  late final _UA_Server_writeArrayDimensions =
      _UA_Server_writeArrayDimensionsPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int accessLevel,
  ) {
    return _UA_Server_writeAccessLevel(
      server,
      nodeId,
      accessLevel,
    );
  }

  late final _UA_Server_writeAccessLevelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Byte)>>('UA_Server_writeAccessLevel');
  late final _UA_Server_writeAccessLevel = _UA_Server_writeAccessLevelPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    double miniumSamplingInterval,
  ) {
    return _UA_Server_writeMinimumSamplingInterval(
      server,
      nodeId,
      miniumSamplingInterval,
    );
  }

  late final _UA_Server_writeMinimumSamplingIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Double)>>('UA_Server_writeMinimumSamplingInterval');
  late final _UA_Server_writeMinimumSamplingInterval =
      _UA_Server_writeMinimumSamplingIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, double)>();

  int UA_Server_writeHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool historizing,
  ) {
    return _UA_Server_writeHistorizing(
      server,
      nodeId,
      historizing,
    );
  }

  late final _UA_Server_writeHistorizingPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeHistorizing');
  late final _UA_Server_writeHistorizing = _UA_Server_writeHistorizingPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool executable,
  ) {
    return _UA_Server_writeExecutable(
      server,
      nodeId,
      executable,
    );
  }

  late final _UA_Server_writeExecutablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeExecutable');
  late final _UA_Server_writeExecutable = _UA_Server_writeExecutablePtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  /// Browsing
  /// --------
  UA_BrowseResult UA_Server_browse(
    ffi.Pointer<UA_Server> server,
    int maxReferences,
    ffi.Pointer<UA_BrowseDescription> bd,
  ) {
    return _UA_Server_browse(
      server,
      maxReferences,
      bd,
    );
  }

  late final _UA_Server_browsePtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(ffi.Pointer<UA_Server>, UA_UInt32,
              ffi.Pointer<UA_BrowseDescription>)>>('UA_Server_browse');
  late final _UA_Server_browse = _UA_Server_browsePtr.asFunction<
      UA_BrowseResult Function(
          ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_BrowseDescription>)>();

  UA_BrowseResult UA_Server_browseNext(
    ffi.Pointer<UA_Server> server,
    bool releaseContinuationPoint,
    ffi.Pointer<UA_ByteString> continuationPoint,
  ) {
    return _UA_Server_browseNext(
      server,
      releaseContinuationPoint,
      continuationPoint,
    );
  }

  late final _UA_Server_browseNextPtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(ffi.Pointer<UA_Server>, ffi.Bool,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_browseNext');
  late final _UA_Server_browseNext = _UA_Server_browseNextPtr.asFunction<
      UA_BrowseResult Function(
          ffi.Pointer<UA_Server>, bool, ffi.Pointer<UA_ByteString>)>();

  int UA_Server_browseRecursive(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowseDescription> bd,
    ffi.Pointer<ffi.Size> resultsSize,
    ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>> results,
  ) {
    return _UA_Server_browseRecursive(
      server,
      bd,
      resultsSize,
      results,
    );
  }

  late final _UA_Server_browseRecursivePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_BrowseDescription>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>>(
      'UA_Server_browseRecursive');
  late final _UA_Server_browseRecursive =
      _UA_Server_browseRecursivePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>();

  UA_BrowsePathResult UA_Server_translateBrowsePathToNodeIds(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowsePath> browsePath,
  ) {
    return _UA_Server_translateBrowsePathToNodeIds(
      server,
      browsePath,
    );
  }

  late final _UA_Server_translateBrowsePathToNodeIdsPtr = _lookup<
          ffi.NativeFunction<
              UA_BrowsePathResult Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>>(
      'UA_Server_translateBrowsePathToNodeIds');
  late final _UA_Server_translateBrowsePathToNodeIds =
      _UA_Server_translateBrowsePathToNodeIdsPtr.asFunction<
          UA_BrowsePathResult Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>();

  UA_BrowsePathResult UA_Server_browseSimplifiedBrowsePath(
    ffi.Pointer<UA_Server> server,
    UA_NodeId origin,
    int browsePathSize,
    ffi.Pointer<UA_QualifiedName> browsePath,
  ) {
    return _UA_Server_browseSimplifiedBrowsePath(
      server,
      origin,
      browsePathSize,
      browsePath,
    );
  }

  late final _UA_Server_browseSimplifiedBrowsePathPtr = _lookup<
          ffi.NativeFunction<
              UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Server_browseSimplifiedBrowsePath');
  late final _UA_Server_browseSimplifiedBrowsePath =
      _UA_Server_browseSimplifiedBrowsePathPtr.asFunction<
          UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId, int,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_forEachChildNodeCall(
    ffi.Pointer<UA_Server> server,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Server_forEachChildNodeCall(
      server,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Server_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Server_forEachChildNodeCall');
  late final _UA_Server_forEachChildNodeCall =
      _UA_Server_forEachChildNodeCallPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  /// Information Model Callbacks
  /// ---------------------------
  ///
  /// There are three places where a callback from an information model to
  /// user-defined code can happen.
  ///
  /// - Custom node constructors and destructors
  /// - Linking VariableNodes with an external data source
  /// - MethodNode callbacks
  void UA_Server_setAdminSessionContext(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_Server_setAdminSessionContext(
      server,
      context,
    );
  }

  late final _UA_Server_setAdminSessionContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setAdminSessionContext');
  late final _UA_Server_setAdminSessionContext =
      _UA_Server_setAdminSessionContextPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Void>)>();

  int UA_Server_setNodeTypeLifecycle(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeTypeLifecycle lifecycle,
  ) {
    return _UA_Server_setNodeTypeLifecycle(
      server,
      nodeId,
      lifecycle,
    );
  }

  late final _UA_Server_setNodeTypeLifecyclePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeTypeLifecycle)>>('UA_Server_setNodeTypeLifecycle');
  late final _UA_Server_setNodeTypeLifecycle =
      _UA_Server_setNodeTypeLifecyclePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeTypeLifecycle)>();

  int UA_Server_getNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext,
  ) {
    return _UA_Server_getNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_getNodeContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('UA_Server_getNodeContext');
  late final _UA_Server_getNodeContext =
      _UA_Server_getNodeContextPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int UA_Server_setNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
  ) {
    return _UA_Server_setNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_setNodeContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setNodeContext');
  late final _UA_Server_setNodeContext =
      _UA_Server_setNodeContextPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Void>)>();

  /// .. _datasource:
  ///
  /// Data Source Callback
  /// ^^^^^^^^^^^^^^^^^^^^
  ///
  /// The server has a unique way of dealing with the content of variables. Instead
  /// of storing a variant attached to the variable node, the node can point to a
  /// function with a local data provider. Whenever the value attribute is read,
  /// the function will be called and asked to provide a UA_DataValue return value
  /// that contains the value content and additional timestamps.
  ///
  /// It is expected that the read callback is implemented. The write callback can
  /// be set to a null-pointer.
  int UA_Server_setVariableNode_dataSource(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_DataSource dataSource,
  ) {
    return _UA_Server_setVariableNode_dataSource(
      server,
      nodeId,
      dataSource,
    );
  }

  late final _UA_Server_setVariableNode_dataSourcePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_DataSource)>>('UA_Server_setVariableNode_dataSource');
  late final _UA_Server_setVariableNode_dataSource =
      _UA_Server_setVariableNode_dataSourcePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataSource)>();

  int UA_Server_setVariableNode_valueCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_ValueCallback callback,
  ) {
    return _UA_Server_setVariableNode_valueCallback(
      server,
      nodeId,
      callback,
    );
  }

  late final _UA_Server_setVariableNode_valueCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_ValueCallback)>>('UA_Server_setVariableNode_valueCallback');
  late final _UA_Server_setVariableNode_valueCallback =
      _UA_Server_setVariableNode_valueCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueCallback)>();

  UA_MonitoredItemCreateResult UA_Server_createDataChangeMonitoredItem(
    ffi.Pointer<UA_Server> server,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    UA_Server_DataChangeNotificationCallback callback,
  ) {
    return _UA_Server_createDataChangeMonitoredItem(
      server,
      timestampsToReturn,
      item,
      monitoredItemContext,
      callback,
    );
  }

  late final _UA_Server_createDataChangeMonitoredItemPtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Server_DataChangeNotificationCallback)>>(
      'UA_Server_createDataChangeMonitoredItem');
  late final _UA_Server_createDataChangeMonitoredItem =
      _UA_Server_createDataChangeMonitoredItemPtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Server>,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Server_DataChangeNotificationCallback)>();

  int UA_Server_deleteMonitoredItem(
    ffi.Pointer<UA_Server> server,
    int monitoredItemId,
  ) {
    return _UA_Server_deleteMonitoredItem(
      server,
      monitoredItemId,
    );
  }

  late final _UA_Server_deleteMonitoredItemPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_UInt32)>>('UA_Server_deleteMonitoredItem');
  late final _UA_Server_deleteMonitoredItem = _UA_Server_deleteMonitoredItemPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, int)>();

  int UA_Server_setMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    UA_MethodCallback methodCallback,
  ) {
    return _UA_Server_setMethodNodeCallback(
      server,
      methodNodeId,
      methodCallback,
    );
  }

  late final _UA_Server_setMethodNodeCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_MethodCallback)>>('UA_Server_setMethodNodeCallback');
  late final _UA_Server_setMethodNodeCallback =
      _UA_Server_setMethodNodeCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback)>();

  int UA_Server_getMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    ffi.Pointer<UA_MethodCallback> outMethodCallback,
  ) {
    return _UA_Server_getMethodNodeCallback(
      server,
      methodNodeId,
      outMethodCallback,
    );
  }

  late final _UA_Server_getMethodNodeCallbackPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_MethodCallback>)>>(
      'UA_Server_getMethodNodeCallback');
  late final _UA_Server_getMethodNodeCallback =
      _UA_Server_getMethodNodeCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_MethodCallback>)>();

  UA_CallMethodResult UA_Server_call(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_CallMethodRequest> request,
  ) {
    return _UA_Server_call(
      server,
      request,
    );
  }

  late final _UA_Server_callPtr = _lookup<
      ffi.NativeFunction<
          UA_CallMethodResult Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_Server_call');
  late final _UA_Server_call = _UA_Server_callPtr.asFunction<
      UA_CallMethodResult Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_CallMethodRequest>)>();

  int UA_Server_writeObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    UA_Variant value,
  ) {
    return _UA_Server_writeObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_writeObjectPropertyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_QualifiedName, UA_Variant)>>('UA_Server_writeObjectProperty');
  late final _UA_Server_writeObjectProperty =
      _UA_Server_writeObjectPropertyPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              UA_Variant)>();

  int UA_Server_writeObjectProperty_scalar(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Server_writeObjectProperty_scalar(
      server,
      objectId,
      propertyName,
      value,
      type,
    );
  }

  late final _UA_Server_writeObjectProperty_scalarPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  UA_NodeId,
                  UA_QualifiedName,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_DataType>)>>(
      'UA_Server_writeObjectProperty_scalar');
  late final _UA_Server_writeObjectProperty_scalar =
      _UA_Server_writeObjectProperty_scalarPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Server_readObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_Server_readObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_readObjectPropertyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readObjectProperty');
  late final _UA_Server_readObjectProperty =
      _UA_Server_readObjectPropertyPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>();

  late final ffi.Pointer<UA_VariableAttributes> _UA_VariableAttributes_default =
      _lookup<UA_VariableAttributes>('UA_VariableAttributes_default');

  UA_VariableAttributes get UA_VariableAttributes_default =>
      _UA_VariableAttributes_default.ref;

  late final ffi.Pointer<UA_VariableTypeAttributes>
      _UA_VariableTypeAttributes_default =
      _lookup<UA_VariableTypeAttributes>('UA_VariableTypeAttributes_default');

  UA_VariableTypeAttributes get UA_VariableTypeAttributes_default =>
      _UA_VariableTypeAttributes_default.ref;

  late final ffi.Pointer<UA_MethodAttributes> _UA_MethodAttributes_default =
      _lookup<UA_MethodAttributes>('UA_MethodAttributes_default');

  UA_MethodAttributes get UA_MethodAttributes_default =>
      _UA_MethodAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectAttributes> _UA_ObjectAttributes_default =
      _lookup<UA_ObjectAttributes>('UA_ObjectAttributes_default');

  UA_ObjectAttributes get UA_ObjectAttributes_default =>
      _UA_ObjectAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectTypeAttributes>
      _UA_ObjectTypeAttributes_default =
      _lookup<UA_ObjectTypeAttributes>('UA_ObjectTypeAttributes_default');

  UA_ObjectTypeAttributes get UA_ObjectTypeAttributes_default =>
      _UA_ObjectTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ReferenceTypeAttributes>
      _UA_ReferenceTypeAttributes_default =
      _lookup<UA_ReferenceTypeAttributes>('UA_ReferenceTypeAttributes_default');

  UA_ReferenceTypeAttributes get UA_ReferenceTypeAttributes_default =>
      _UA_ReferenceTypeAttributes_default.ref;

  late final ffi.Pointer<UA_DataTypeAttributes> _UA_DataTypeAttributes_default =
      _lookup<UA_DataTypeAttributes>('UA_DataTypeAttributes_default');

  UA_DataTypeAttributes get UA_DataTypeAttributes_default =>
      _UA_DataTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ViewAttributes> _UA_ViewAttributes_default =
      _lookup<UA_ViewAttributes>('UA_ViewAttributes_default');

  UA_ViewAttributes get UA_ViewAttributes_default =>
      _UA_ViewAttributes_default.ref;

  int UA_Server_addVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableNode');
  late final _UA_Server_addVariableNode =
      _UA_Server_addVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addVariableTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableTypeNode');
  late final _UA_Server_addVariableTypeNode =
      _UA_Server_addVariableTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectNode');
  late final _UA_Server_addObjectNode = _UA_Server_addObjectNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_ObjectAttributes,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectTypeNode');
  late final _UA_Server_addObjectTypeNode =
      _UA_Server_addObjectTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addViewNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addViewNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addViewNode');
  late final _UA_Server_addViewNode = _UA_Server_addViewNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_ViewAttributes,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addReferenceTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addReferenceTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReferenceTypeNode');
  late final _UA_Server_addReferenceTypeNode =
      _UA_Server_addReferenceTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataTypeNode');
  late final _UA_Server_addDataTypeNode =
      _UA_Server_addDataTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataSourceVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    UA_DataSource dataSource,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataSourceVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      dataSource,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataSourceVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              UA_DataSource,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSourceVariableNode');
  late final _UA_Server_addDataSourceVariableNode =
      _UA_Server_addDataSourceVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              UA_DataSource,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addMethodNodeEx(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    UA_NodeId inputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> inputArgumentsOutNewNodeId,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    UA_NodeId outputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> outputArgumentsOutNewNodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNodeEx(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      inputArgumentsRequestedNewNodeId,
      inputArgumentsOutNewNodeId,
      outputArgumentsSize,
      outputArguments,
      outputArgumentsRequestedNewNodeId,
      outputArgumentsOutNewNodeId,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodeExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNodeEx');
  late final _UA_Server_addMethodNodeEx =
      _UA_Server_addMethodNodeExPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addMethodNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNode');
  late final _UA_Server_addMethodNode = _UA_Server_addMethodNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_MethodAttributes,
          UA_MethodCallback,
          int,
          ffi.Pointer<UA_Argument>,
          int,
          ffi.Pointer<UA_Argument>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  /// The method pair UA_Server_addNode_begin and _finish splits the AddNodes
  /// service in two parts. This is useful if the node shall be modified before
  /// finish the instantiation. For example to add children with specific NodeIds.
  /// Otherwise, mandatory children (e.g. of an ObjectType) are added with
  /// pseudo-random unique NodeIds. Existing children are detected during the
  /// _finish part via their matching BrowseName.
  ///
  /// The _begin method:
  /// - prepares the node and adds it to the nodestore
  /// - copies some unassigned attributes from the TypeDefinition node internally
  /// - adds the references to the parent (and the TypeDefinition if applicable)
  /// - performs type-checking of variables.
  ///
  /// You can add an object node without a parent if you set the parentNodeId and
  /// referenceTypeId to UA_NODE_ID_NULL. Then you need to add the parent reference
  /// and hasTypeDef reference yourself before calling the _finish method.
  /// Not that this is only allowed for object nodes.
  ///
  /// The _finish method:
  /// - copies mandatory children
  /// - calls the node constructor(s) at the end
  /// - may remove the node if it encounters an error.
  ///
  /// The special UA_Server_addMethodNode_finish method needs to be used for method
  /// nodes, since there you need to explicitly specifiy the input and output
  /// arguments which are added in the finish step (if not yet already there)
  int UA_Server_addNode_begin(
    ffi.Pointer<UA_Server> server,
    int nodeClass,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    ffi.Pointer<ffi.Void> attr,
    ffi.Pointer<UA_DataType> attributeType,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addNode_begin(
      server,
      nodeClass,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      attributeType,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addNode_beginPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Int32,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addNode_begin');
  late final _UA_Server_addNode_begin = _UA_Server_addNode_beginPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          int,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
  ) {
    return _UA_Server_addNode_finish(
      server,
      nodeId,
    );
  }

  late final _UA_Server_addNode_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>>('UA_Server_addNode_finish');
  late final _UA_Server_addNode_finish = _UA_Server_addNode_finishPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_addMethodNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
  ) {
    return _UA_Server_addMethodNode_finish(
      server,
      nodeId,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
    );
  }

  late final _UA_Server_addMethodNode_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Size,
              ffi.Pointer<UA_Argument>)>>('UA_Server_addMethodNode_finish');
  late final _UA_Server_addMethodNode_finish =
      _UA_Server_addMethodNode_finishPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback,
              int, ffi.Pointer<UA_Argument>, int, ffi.Pointer<UA_Argument>)>();

  int UA_Server_deleteNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool deleteReferences,
  ) {
    return _UA_Server_deleteNode(
      server,
      nodeId,
      deleteReferences,
    );
  }

  late final _UA_Server_deleteNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_deleteNode');
  late final _UA_Server_deleteNode = _UA_Server_deleteNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  /// Reference Management
  /// --------------------
  int UA_Server_addReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceId,
    UA_NodeId refTypeId,
    UA_ExpandedNodeId targetId,
    bool isForward,
  ) {
    return _UA_Server_addReference(
      server,
      sourceId,
      refTypeId,
      targetId,
      isForward,
    );
  }

  late final _UA_Server_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              UA_ExpandedNodeId, ffi.Bool)>>('UA_Server_addReference');
  late final _UA_Server_addReference = _UA_Server_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
          UA_ExpandedNodeId, bool)>();

  int UA_Server_deleteReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Server_deleteReference(
      server,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Server_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Server_deleteReference');
  late final _UA_Server_deleteReference =
      _UA_Server_deleteReferencePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, bool,
              UA_ExpandedNodeId, bool)>();

  int UA_Server_createEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventType,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_createEvent(
      server,
      eventType,
      outNodeId,
    );
  }

  late final _UA_Server_createEventPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_createEvent');
  late final _UA_Server_createEvent = _UA_Server_createEventPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_triggerEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventNodeId,
    UA_NodeId originId,
    ffi.Pointer<UA_ByteString> outEventId,
    bool deleteEventNode,
  ) {
    return _UA_Server_triggerEvent(
      server,
      eventNodeId,
      originId,
      outEventId,
      deleteEventNode,
    );
  }

  late final _UA_Server_triggerEventPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_ByteString>, ffi.Bool)>>('UA_Server_triggerEvent');
  late final _UA_Server_triggerEvent = _UA_Server_triggerEventPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
          ffi.Pointer<UA_ByteString>, bool)>();

  /// Update the Server Certificate at Runtime
  /// ----------------------------------------
  int UA_Server_updateCertificate(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ByteString> oldCertificate,
    ffi.Pointer<UA_ByteString> newCertificate,
    ffi.Pointer<UA_ByteString> newPrivateKey,
    bool closeSessions,
    bool closeSecureChannels,
  ) {
    return _UA_Server_updateCertificate(
      server,
      oldCertificate,
      newCertificate,
      newPrivateKey,
      closeSessions,
      closeSecureChannels,
    );
  }

  late final _UA_Server_updateCertificatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Bool,
              ffi.Bool)>>('UA_Server_updateCertificate');
  late final _UA_Server_updateCertificate =
      _UA_Server_updateCertificatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              bool,
              bool)>();

  /// Utility Functions
  /// -----------------
  ffi.Pointer<UA_DataType> UA_Server_findDataType(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Server_findDataType(
      server,
      typeId,
    );
  }

  late final _UA_Server_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_findDataType');
  late final _UA_Server_findDataType = _UA_Server_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNamespace(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_Server_addNamespace(
      server,
      name,
    );
  }

  late final _UA_Server_addNamespacePtr = _lookup<
      ffi.NativeFunction<
          UA_UInt16 Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Char>)>>('UA_Server_addNamespace');
  late final _UA_Server_addNamespace = _UA_Server_addNamespacePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Char>)>();

  int UA_Server_getNamespaceByName(
    ffi.Pointer<UA_Server> server,
    UA_String namespaceUri,
    ffi.Pointer<ffi.Size> foundIndex,
  ) {
    return _UA_Server_getNamespaceByName(
      server,
      namespaceUri,
      foundIndex,
    );
  }

  late final _UA_Server_getNamespaceByNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_String,
              ffi.Pointer<ffi.Size>)>>('UA_Server_getNamespaceByName');
  late final _UA_Server_getNamespaceByName =
      _UA_Server_getNamespaceByNamePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_String, ffi.Pointer<ffi.Size>)>();

  int UA_Server_getNamespaceByIndex(
    ffi.Pointer<UA_Server> server,
    int namespaceIndex,
    ffi.Pointer<UA_String> foundUri,
  ) {
    return _UA_Server_getNamespaceByIndex(
      server,
      namespaceIndex,
      foundUri,
    );
  }

  late final _UA_Server_getNamespaceByIndexPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Size,
              ffi.Pointer<UA_String>)>>('UA_Server_getNamespaceByIndex');
  late final _UA_Server_getNamespaceByIndex =
      _UA_Server_getNamespaceByIndexPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_String>)>();

  UA_ServerStatistics UA_Server_getStatistics(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getStatistics(
      server,
    );
  }

  late final _UA_Server_getStatisticsPtr = _lookup<
      ffi.NativeFunction<
          UA_ServerStatistics Function(
              ffi.Pointer<UA_Server>)>>('UA_Server_getStatistics');
  late final _UA_Server_getStatistics = _UA_Server_getStatisticsPtr.asFunction<
      UA_ServerStatistics Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_Client> UA_Client_newWithConfig(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_Client_newWithConfig(
      config,
    );
  }

  late final _UA_Client_newWithConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Client> Function(
              ffi.Pointer<UA_ClientConfig>)>>('UA_Client_newWithConfig');
  late final _UA_Client_newWithConfig = _UA_Client_newWithConfigPtr.asFunction<
      ffi.Pointer<UA_Client> Function(ffi.Pointer<UA_ClientConfig>)>();

  void UA_Client_getState(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Int32> channelState,
    ffi.Pointer<ffi.Int32> sessionState,
    ffi.Pointer<UA_StatusCode> connectStatus,
  ) {
    return _UA_Client_getState(
      client,
      channelState,
      sessionState,
      connectStatus,
    );
  }

  late final _UA_Client_getStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<UA_StatusCode>)>>('UA_Client_getState');
  late final _UA_Client_getState = _UA_Client_getStatePtr.asFunction<
      void Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_ClientConfig> UA_Client_getConfig(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_getConfig(
      client,
    );
  }

  late final _UA_Client_getConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ClientConfig> Function(
              ffi.Pointer<UA_Client>)>>('UA_Client_getConfig');
  late final _UA_Client_getConfig = _UA_Client_getConfigPtr.asFunction<
      ffi.Pointer<UA_ClientConfig> Function(ffi.Pointer<UA_Client>)>();

  ffi.Pointer<ffi.Void> UA_Client_getContext(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_getContext(
      client,
    );
  }

  late final _UA_Client_getContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UA_Client>)>>('UA_Client_getContext');
  late final _UA_Client_getContext = _UA_Client_getContextPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_delete(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_delete(
      client,
    );
  }

  late final _UA_Client_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_delete');
  late final _UA_Client_delete =
      _UA_Client_deletePtr.asFunction<void Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_connect(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connect(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connect');
  late final _UA_Client_connect = _UA_Client_connectPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectAsyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectAsync');
  late final _UA_Client_connectAsync = _UA_Client_connectAsyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannel(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannel(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectSecureChannel');
  late final _UA_Client_connectSecureChannel =
      _UA_Client_connectSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannelAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannelAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelAsyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectSecureChannelAsync');
  late final _UA_Client_connectSecureChannelAsync =
      _UA_Client_connectSecureChannelAsyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectUsername(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _UA_Client_connectUsername(
      client,
      endpointUrl,
      username,
      password,
    );
  }

  late final _UA_Client_connectUsernamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectUsername');
  late final _UA_Client_connectUsername =
      _UA_Client_connectUsernamePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_disconnect(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnect(
      client,
    );
  }

  late final _UA_Client_disconnectPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnect');
  late final _UA_Client_disconnect = _UA_Client_disconnectPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectAsync(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectAsync(
      client,
    );
  }

  late final _UA_Client_disconnectAsyncPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnectAsync');
  late final _UA_Client_disconnectAsync = _UA_Client_disconnectAsyncPtr
      .asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectSecureChannel(
      client,
    );
  }

  late final _UA_Client_disconnectSecureChannelPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnectSecureChannel');
  late final _UA_Client_disconnectSecureChannel =
      _UA_Client_disconnectSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_getEndpoints(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    ffi.Pointer<ffi.Size> endpointDescriptionsSize,
    ffi.Pointer<ffi.Pointer<UA_EndpointDescription>> endpointDescriptions,
  ) {
    return _UA_Client_getEndpoints(
      client,
      serverUrl,
      endpointDescriptionsSize,
      endpointDescriptions,
    );
  }

  late final _UA_Client_getEndpointsPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>>(
      'UA_Client_getEndpoints');
  late final _UA_Client_getEndpoints = _UA_Client_getEndpointsPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>();

  int UA_Client_findServers(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    int serverUrisSize,
    ffi.Pointer<UA_String> serverUris,
    int localeIdsSize,
    ffi.Pointer<UA_String> localeIds,
    ffi.Pointer<ffi.Size> registeredServersSize,
    ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>> registeredServers,
  ) {
    return _UA_Client_findServers(
      client,
      serverUrl,
      serverUrisSize,
      serverUris,
      localeIdsSize,
      localeIds,
      registeredServersSize,
      registeredServers,
    );
  }

  late final _UA_Client_findServersPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<UA_String>,
                  ffi.Size,
                  ffi.Pointer<UA_String>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>>(
      'UA_Client_findServers');
  late final _UA_Client_findServers = _UA_Client_findServersPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<UA_String>,
          int,
          ffi.Pointer<UA_String>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>();

  int UA_Client_sendAsyncRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> request,
    ffi.Pointer<UA_DataType> requestType,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<UA_DataType> responseType,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_sendAsyncRequest(
      client,
      request,
      requestType,
      callback,
      responseType,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_sendAsyncRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncRequest');
  late final _UA_Client_sendAsyncRequest =
      _UA_Client_sendAsyncRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_modifyAsyncCallback(
    ffi.Pointer<UA_Client> client,
    int requestId,
    ffi.Pointer<ffi.Void> userdata,
    UA_ClientAsyncServiceCallback callback,
  ) {
    return _UA_Client_modifyAsyncCallback(
      client,
      requestId,
      userdata,
      callback,
    );
  }

  late final _UA_Client_modifyAsyncCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_UInt32,
              ffi.Pointer<ffi.Void>,
              UA_ClientAsyncServiceCallback)>>('UA_Client_modifyAsyncCallback');
  late final _UA_Client_modifyAsyncCallback =
      _UA_Client_modifyAsyncCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<ffi.Void>,
              UA_ClientAsyncServiceCallback)>();

  int UA_Client_run_iterate(
    ffi.Pointer<UA_Client> client,
    int timeout,
  ) {
    return _UA_Client_run_iterate(
      client,
      timeout,
    );
  }

  late final _UA_Client_run_iteratePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>, UA_UInt32)>>('UA_Client_run_iterate');
  late final _UA_Client_run_iterate = _UA_Client_run_iteratePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int)>();

  int UA_Client_renewSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_renewSecureChannel(
      client,
    );
  }

  late final _UA_Client_renewSecureChannelPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_renewSecureChannel');
  late final _UA_Client_renewSecureChannel = _UA_Client_renewSecureChannelPtr
      .asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_addTimedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addTimedCallback(
      client,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Client_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ClientCallback,
              ffi.Pointer<ffi.Void>,
              UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addTimedCallback');
  late final _UA_Client_addTimedCallback =
      _UA_Client_addTimedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_ClientCallback,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_addRepeatedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addRepeatedCallback(
      client,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Client_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ClientCallback,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addRepeatedCallback');
  late final _UA_Client_addRepeatedCallback =
      _UA_Client_addRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_ClientCallback,
              ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Client> client,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Client_changeRepeatedCallbackInterval(
      client,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Client_changeRepeatedCallbackIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt64,
              UA_Double)>>('UA_Client_changeRepeatedCallbackInterval');
  late final _UA_Client_changeRepeatedCallbackInterval =
      _UA_Client_changeRepeatedCallbackIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, double)>();

  void UA_Client_removeCallback(
    ffi.Pointer<UA_Client> client,
    int callbackId,
  ) {
    return _UA_Client_removeCallback(
      client,
      callbackId,
    );
  }

  late final _UA_Client_removeCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>, UA_UInt64)>>('UA_Client_removeCallback');
  late final _UA_Client_removeCallback = _UA_Client_removeCallbackPtr
      .asFunction<void Function(ffi.Pointer<UA_Client>, int)>();

  /// Client Utility Functions
  /// ------------------------
  ffi.Pointer<UA_DataType> UA_Client_findDataType(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Client_findDataType(
      client,
      typeId,
    );
  }

  late final _UA_Client_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_findDataType');
  late final _UA_Client_findDataType = _UA_Client_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(
          ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Client_readNodeIdAttribute(
      client,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Client_readNodeIdAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_readNodeIdAttribute');
  late final _UA_Client_readNodeIdAttribute =
      _UA_Client_readNodeIdAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
  ) {
    return _UA_Client_readNodeClassAttribute(
      client,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Client_readNodeClassAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Client_readNodeClassAttribute');
  late final _UA_Client_readNodeClassAttribute =
      _UA_Client_readNodeClassAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Client_readBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Client_readBrowseNameAttribute(
      client,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Client_readBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_readBrowseNameAttribute');
  late final _UA_Client_readBrowseNameAttribute =
      _UA_Client_readBrowseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_readDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Client_readDisplayNameAttribute(
      client,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Client_readDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDisplayNameAttribute');
  late final _UA_Client_readDisplayNameAttribute =
      _UA_Client_readDisplayNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Client_readDescriptionAttribute(
      client,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Client_readDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDescriptionAttribute');
  late final _UA_Client_readDescriptionAttribute =
      _UA_Client_readDescriptionAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Client_readWriteMaskAttribute(
      client,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Client_readWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readWriteMaskAttribute');
  late final _UA_Client_readWriteMaskAttribute =
      _UA_Client_readWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outUserWriteMask,
  ) {
    return _UA_Client_readUserWriteMaskAttribute(
      client,
      nodeId,
      outUserWriteMask,
    );
  }

  late final _UA_Client_readUserWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readUserWriteMaskAttribute');
  late final _UA_Client_readUserWriteMaskAttribute =
      _UA_Client_readUserWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Client_readIsAbstractAttribute(
      client,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Client_readIsAbstractAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readIsAbstractAttribute');
  late final _UA_Client_readIsAbstractAttribute =
      _UA_Client_readIsAbstractAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Client_readSymmetricAttribute(
      client,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Client_readSymmetricAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readSymmetricAttribute');
  late final _UA_Client_readSymmetricAttribute =
      _UA_Client_readSymmetricAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Client_readInverseNameAttribute(
      client,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Client_readInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readInverseNameAttribute');
  late final _UA_Client_readInverseNameAttribute =
      _UA_Client_readInverseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute(
      client,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_readContainsNoLoopsAttribute');
  late final _UA_Client_readContainsNoLoopsAttribute =
      _UA_Client_readContainsNoLoopsAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Client_readEventNotifierAttribute(
      client,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Client_readEventNotifierAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readEventNotifierAttribute');
  late final _UA_Client_readEventNotifierAttribute =
      _UA_Client_readEventNotifierAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Client_readValueAttribute(
      client,
      nodeId,
      outValue,
    );
  }

  late final _UA_Client_readValueAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Client_readValueAttribute');
  late final _UA_Client_readValueAttribute =
      _UA_Client_readValueAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_readDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Client_readDataTypeAttribute(
      client,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Client_readDataTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_readDataTypeAttribute');
  late final _UA_Client_readDataTypeAttribute =
      _UA_Client_readDataTypeAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Client_readValueRankAttribute(
      client,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Client_readValueRankAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Client_readValueRankAttribute');
  late final _UA_Client_readValueRankAttribute =
      _UA_Client_readValueRankAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_readArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Size> outArrayDimensionsSize,
    ffi.Pointer<ffi.Pointer<UA_UInt32>> outArrayDimensions,
  ) {
    return _UA_Client_readArrayDimensionsAttribute(
      client,
      nodeId,
      outArrayDimensionsSize,
      outArrayDimensions,
    );
  }

  late final _UA_Client_readArrayDimensionsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_UInt32>>)>>(
      'UA_Client_readArrayDimensionsAttribute');
  late final _UA_Client_readArrayDimensionsAttribute =
      _UA_Client_readArrayDimensionsAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_UInt32>>)>();

  int UA_Client_readAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Client_readAccessLevelAttribute(
      client,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Client_readAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readAccessLevelAttribute');
  late final _UA_Client_readAccessLevelAttribute =
      _UA_Client_readAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outUserAccessLevel,
  ) {
    return _UA_Client_readUserAccessLevelAttribute(
      client,
      nodeId,
      outUserAccessLevel,
    );
  }

  late final _UA_Client_readUserAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readUserAccessLevelAttribute');
  late final _UA_Client_readUserAccessLevelAttribute =
      _UA_Client_readUserAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinSamplingInterval,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      outMinSamplingInterval,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Client_readMinimumSamplingIntervalAttribute');
  late final _UA_Client_readMinimumSamplingIntervalAttribute =
      _UA_Client_readMinimumSamplingIntervalAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_readHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Client_readHistorizingAttribute(
      client,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Client_readHistorizingAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readHistorizingAttribute');
  late final _UA_Client_readHistorizingAttribute =
      _UA_Client_readHistorizingAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Client_readExecutableAttribute(
      client,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Client_readExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readExecutableAttribute');
  late final _UA_Client_readExecutableAttribute =
      _UA_Client_readExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outUserExecutable,
  ) {
    return _UA_Client_readUserExecutableAttribute(
      client,
      nodeId,
      outUserExecutable,
    );
  }

  late final _UA_Client_readUserExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readUserExecutableAttribute');
  late final _UA_Client_readUserExecutableAttribute =
      _UA_Client_readUserExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newNodeId,
  ) {
    return _UA_Client_writeNodeIdAttribute(
      client,
      nodeId,
      newNodeId,
    );
  }

  late final _UA_Client_writeNodeIdAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_writeNodeIdAttribute');
  late final _UA_Client_writeNodeIdAttribute =
      _UA_Client_writeNodeIdAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> newNodeClass,
  ) {
    return _UA_Client_writeNodeClassAttribute(
      client,
      nodeId,
      newNodeClass,
    );
  }

  late final _UA_Client_writeNodeClassAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Client_writeNodeClassAttribute');
  late final _UA_Client_writeNodeClassAttribute =
      _UA_Client_writeNodeClassAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Client_writeBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> newBrowseName,
  ) {
    return _UA_Client_writeBrowseNameAttribute(
      client,
      nodeId,
      newBrowseName,
    );
  }

  late final _UA_Client_writeBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_writeBrowseNameAttribute');
  late final _UA_Client_writeBrowseNameAttribute =
      _UA_Client_writeBrowseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_writeDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDisplayName,
  ) {
    return _UA_Client_writeDisplayNameAttribute(
      client,
      nodeId,
      newDisplayName,
    );
  }

  late final _UA_Client_writeDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDisplayNameAttribute');
  late final _UA_Client_writeDisplayNameAttribute =
      _UA_Client_writeDisplayNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDescription,
  ) {
    return _UA_Client_writeDescriptionAttribute(
      client,
      nodeId,
      newDescription,
    );
  }

  late final _UA_Client_writeDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDescriptionAttribute');
  late final _UA_Client_writeDescriptionAttribute =
      _UA_Client_writeDescriptionAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newWriteMask,
  ) {
    return _UA_Client_writeWriteMaskAttribute(
      client,
      nodeId,
      newWriteMask,
    );
  }

  late final _UA_Client_writeWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeWriteMaskAttribute');
  late final _UA_Client_writeWriteMaskAttribute =
      _UA_Client_writeWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newUserWriteMask,
  ) {
    return _UA_Client_writeUserWriteMaskAttribute(
      client,
      nodeId,
      newUserWriteMask,
    );
  }

  late final _UA_Client_writeUserWriteMaskAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserWriteMaskAttribute');
  late final _UA_Client_writeUserWriteMaskAttribute =
      _UA_Client_writeUserWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newIsAbstract,
  ) {
    return _UA_Client_writeIsAbstractAttribute(
      client,
      nodeId,
      newIsAbstract,
    );
  }

  late final _UA_Client_writeIsAbstractAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeIsAbstractAttribute');
  late final _UA_Client_writeIsAbstractAttribute =
      _UA_Client_writeIsAbstractAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newSymmetric,
  ) {
    return _UA_Client_writeSymmetricAttribute(
      client,
      nodeId,
      newSymmetric,
    );
  }

  late final _UA_Client_writeSymmetricAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeSymmetricAttribute');
  late final _UA_Client_writeSymmetricAttribute =
      _UA_Client_writeSymmetricAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newInverseName,
  ) {
    return _UA_Client_writeInverseNameAttribute(
      client,
      nodeId,
      newInverseName,
    );
  }

  late final _UA_Client_writeInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeInverseNameAttribute');
  late final _UA_Client_writeInverseNameAttribute =
      _UA_Client_writeInverseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newContainsNoLoops,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute(
      client,
      nodeId,
      newContainsNoLoops,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_writeContainsNoLoopsAttribute');
  late final _UA_Client_writeContainsNoLoopsAttribute =
      _UA_Client_writeContainsNoLoopsAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newEventNotifier,
  ) {
    return _UA_Client_writeEventNotifierAttribute(
      client,
      nodeId,
      newEventNotifier,
    );
  }

  late final _UA_Client_writeEventNotifierAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_writeEventNotifierAttribute');
  late final _UA_Client_writeEventNotifierAttribute =
      _UA_Client_writeEventNotifierAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> newValue,
  ) {
    return _UA_Client_writeValueAttribute(
      client,
      nodeId,
      newValue,
    );
  }

  late final _UA_Client_writeValueAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Client_writeValueAttribute');
  late final _UA_Client_writeValueAttribute =
      _UA_Client_writeValueAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_writeDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newDataType,
  ) {
    return _UA_Client_writeDataTypeAttribute(
      client,
      nodeId,
      newDataType,
    );
  }

  late final _UA_Client_writeDataTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_writeDataTypeAttribute');
  late final _UA_Client_writeDataTypeAttribute =
      _UA_Client_writeDataTypeAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> newValueRank,
  ) {
    return _UA_Client_writeValueRankAttribute(
      client,
      nodeId,
      newValueRank,
    );
  }

  late final _UA_Client_writeValueRankAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Client_writeValueRankAttribute');
  late final _UA_Client_writeValueRankAttribute =
      _UA_Client_writeValueRankAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_writeArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    int newArrayDimensionsSize,
    ffi.Pointer<UA_UInt32> newArrayDimensions,
  ) {
    return _UA_Client_writeArrayDimensionsAttribute(
      client,
      nodeId,
      newArrayDimensionsSize,
      newArrayDimensions,
    );
  }

  late final _UA_Client_writeArrayDimensionsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeArrayDimensionsAttribute');
  late final _UA_Client_writeArrayDimensionsAttribute =
      _UA_Client_writeArrayDimensionsAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, int,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newAccessLevel,
  ) {
    return _UA_Client_writeAccessLevelAttribute(
      client,
      nodeId,
      newAccessLevel,
    );
  }

  late final _UA_Client_writeAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_writeAccessLevelAttribute');
  late final _UA_Client_writeAccessLevelAttribute =
      _UA_Client_writeAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newUserAccessLevel,
  ) {
    return _UA_Client_writeUserAccessLevelAttribute(
      client,
      nodeId,
      newUserAccessLevel,
    );
  }

  late final _UA_Client_writeUserAccessLevelAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
      'UA_Client_writeUserAccessLevelAttribute');
  late final _UA_Client_writeUserAccessLevelAttribute =
      _UA_Client_writeUserAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> newMinInterval,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      newMinInterval,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Client_writeMinimumSamplingIntervalAttribute');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute =
      _UA_Client_writeMinimumSamplingIntervalAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_writeHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newHistorizing,
  ) {
    return _UA_Client_writeHistorizingAttribute(
      client,
      nodeId,
      newHistorizing,
    );
  }

  late final _UA_Client_writeHistorizingAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeHistorizingAttribute');
  late final _UA_Client_writeHistorizingAttribute =
      _UA_Client_writeHistorizingAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newExecutable,
  ) {
    return _UA_Client_writeExecutableAttribute(
      client,
      nodeId,
      newExecutable,
    );
  }

  late final _UA_Client_writeExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeExecutableAttribute');
  late final _UA_Client_writeExecutableAttribute =
      _UA_Client_writeExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newUserExecutable,
  ) {
    return _UA_Client_writeUserExecutableAttribute(
      client,
      nodeId,
      newUserExecutable,
    );
  }

  late final _UA_Client_writeUserExecutableAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_writeUserExecutableAttribute');
  late final _UA_Client_writeUserExecutableAttribute =
      _UA_Client_writeUserExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_call(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Pointer<ffi.Size> outputSize,
    ffi.Pointer<ffi.Pointer<UA_Variant>> output,
  ) {
    return _UA_Client_call(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      outputSize,
      output,
    );
  }

  late final _UA_Client_callPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Size,
              ffi.Pointer<UA_Variant>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_Variant>>)>>('UA_Client_call');
  late final _UA_Client_call = _UA_Client_callPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          int,
          ffi.Pointer<UA_Variant>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_Variant>>)>();

  /// Node Management
  /// ^^^^^^^^^^^^^^^
  /// See the section on :ref:`server-side node management <addnodes>`.
  int UA_Client_addReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_String targetServerUri,
    UA_ExpandedNodeId targetNodeId,
    int targetNodeClass,
  ) {
    return _UA_Client_addReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetServerUri,
      targetNodeId,
      targetNodeClass,
    );
  }

  late final _UA_Client_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_String,
              UA_ExpandedNodeId,
              ffi.Int32)>>('UA_Client_addReference');
  late final _UA_Client_addReference = _UA_Client_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool,
          UA_String, UA_ExpandedNodeId, int)>();

  int UA_Client_deleteReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Client_deleteReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Client_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Client_deleteReference');
  late final _UA_Client_deleteReference =
      _UA_Client_deleteReferencePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool,
              UA_ExpandedNodeId, bool)>();

  int UA_Client_deleteNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    bool deleteTargetReferences,
  ) {
    return _UA_Client_deleteNode(
      client,
      nodeId,
      deleteTargetReferences,
    );
  }

  late final _UA_Client_deleteNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Bool)>>('UA_Client_deleteNode');
  late final _UA_Client_deleteNode = _UA_Client_deleteNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, bool)>();

  int UA_Client_addVariableNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableNode');
  late final _UA_Client_addVariableNode =
      _UA_Client_addVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addVariableTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableTypeNode');
  late final _UA_Client_addVariableTypeNode =
      _UA_Client_addVariableTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectNode');
  late final _UA_Client_addObjectNode = _UA_Client_addObjectNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_ObjectAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectTypeNode');
  late final _UA_Client_addObjectTypeNode =
      _UA_Client_addObjectTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addViewNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addViewNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addViewNode');
  late final _UA_Client_addViewNode = _UA_Client_addViewNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId,
          UA_QualifiedName, UA_ViewAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addReferenceTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addReferenceTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addReferenceTypeNode');
  late final _UA_Client_addReferenceTypeNode =
      _UA_Client_addReferenceTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addDataTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addDataTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addDataTypeNode');
  late final _UA_Client_addDataTypeNode =
      _UA_Client_addDataTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addMethodNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addMethodNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addMethodNode');
  late final _UA_Client_addMethodNode = _UA_Client_addMethodNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId,
          UA_QualifiedName, UA_MethodAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_NamespaceGetIndex(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_String> namespaceUri,
    ffi.Pointer<UA_UInt16> namespaceIndex,
  ) {
    return _UA_Client_NamespaceGetIndex(
      client,
      namespaceUri,
      namespaceIndex,
    );
  }

  late final _UA_Client_NamespaceGetIndexPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>)>>('UA_Client_NamespaceGetIndex');
  late final _UA_Client_NamespaceGetIndex =
      _UA_Client_NamespaceGetIndexPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>)>();

  int UA_Client_forEachChildNodeCall(
    ffi.Pointer<UA_Client> client,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Client_forEachChildNodeCall(
      client,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Client_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Client_forEachChildNodeCall');
  late final _UA_Client_forEachChildNodeCall =
      _UA_Client_forEachChildNodeCallPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  UA_CreateSubscriptionRequest UA_CreateSubscriptionRequest_default() {
    return _UA_CreateSubscriptionRequest_default();
  }

  late final _UA_CreateSubscriptionRequest_defaultPtr =
      _lookup<ffi.NativeFunction<UA_CreateSubscriptionRequest Function()>>(
          'UA_CreateSubscriptionRequest_default');
  late final _UA_CreateSubscriptionRequest_default =
      _UA_CreateSubscriptionRequest_defaultPtr.asFunction<
          UA_CreateSubscriptionRequest Function()>();

  int UA_Client_Subscriptions_create_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateSubscriptionRequest request,
    ffi.Pointer<ffi.Void> subscriptionContext,
    UA_Client_StatusChangeNotificationCallback statusChangeCallback,
    UA_Client_DeleteSubscriptionCallback deleteCallback,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_create_async(
      client,
      request,
      subscriptionContext,
      statusChangeCallback,
      deleteCallback,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_create_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_create_async');
  late final _UA_Client_Subscriptions_create_async =
      _UA_Client_Subscriptions_create_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifySubscriptionRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_modify_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ModifySubscriptionRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_modify_async');
  late final _UA_Client_Subscriptions_modify_async =
      _UA_Client_Subscriptions_modify_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_ModifySubscriptionRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteSubscriptionsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_delete_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteSubscriptionsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_delete_async');
  late final _UA_Client_Subscriptions_delete_async =
      _UA_Client_Subscriptions_delete_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteSubscriptionsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
  ) {
    return _UA_Client_Subscriptions_deleteSingle(
      client,
      subscriptionId,
    );
  }

  late final _UA_Client_Subscriptions_deleteSinglePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              UA_UInt32)>>('UA_Client_Subscriptions_deleteSingle');
  late final _UA_Client_Subscriptions_deleteSingle =
      _UA_Client_Subscriptions_deleteSinglePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int)>();

  /// MonitoredItems
  /// --------------
  ///
  /// MonitoredItems for Events indicate the ``EventNotifier`` attribute. This
  /// indicates to the server not to monitor changes of the attribute, but to
  /// forward Event notifications from that node.
  ///
  /// During the creation of a MonitoredItem, the server may return changed
  /// adjusted parameters. Check the returned ``UA_CreateMonitoredItemsResponse``
  /// to get the current parameters.
  UA_MonitoredItemCreateRequest UA_MonitoredItemCreateRequest_default(
    UA_NodeId nodeId,
  ) {
    return _UA_MonitoredItemCreateRequest_default(
      nodeId,
    );
  }

  late final _UA_MonitoredItemCreateRequest_defaultPtr = _lookup<
          ffi
          .NativeFunction<UA_MonitoredItemCreateRequest Function(UA_NodeId)>>(
      'UA_MonitoredItemCreateRequest_default');
  late final _UA_MonitoredItemCreateRequest_default =
      _UA_MonitoredItemCreateRequest_defaultPtr.asFunction<
          UA_MonitoredItemCreateRequest Function(UA_NodeId)>();

  int UA_Client_MonitoredItems_createDataChanges_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_DataChangeNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncServiceCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createDataChanges_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChanges_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_CreateMonitoredItemsRequest,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
                  ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_createDataChanges_async');
  late final _UA_Client_MonitoredItems_createDataChanges_async =
      _UA_Client_MonitoredItems_createDataChanges_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createDataChange(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_DataChangeNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createDataChange(
      client,
      subscriptionId,
      timestampsToReturn,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChangePtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Client>,
                  UA_UInt32,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Client_DataChangeNotificationCallback,
                  UA_Client_DeleteMonitoredItemCallback)>>(
      'UA_Client_MonitoredItems_createDataChange');
  late final _UA_Client_MonitoredItems_createDataChange =
      _UA_Client_MonitoredItems_createDataChangePtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              int,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_DataChangeNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>();

  int UA_Client_MonitoredItems_createEvents_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_EventNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncServiceCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createEvents_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createEvents_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_CreateMonitoredItemsRequest,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<UA_Client_EventNotificationCallback>,
                  ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_createEvents_async');
  late final _UA_Client_MonitoredItems_createEvents_async =
      _UA_Client_MonitoredItems_createEvents_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_EventNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createEvent(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_EventNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createEvent(
      client,
      subscriptionId,
      timestampsToReturn,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createEventPtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Client>,
                  UA_UInt32,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Client_EventNotificationCallback,
                  UA_Client_DeleteMonitoredItemCallback)>>(
      'UA_Client_MonitoredItems_createEvent');
  late final _UA_Client_MonitoredItems_createEvent =
      _UA_Client_MonitoredItems_createEventPtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              int,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_EventNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>();

  int UA_Client_MonitoredItems_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteMonitoredItemsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_delete_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_DeleteMonitoredItemsRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_delete_async');
  late final _UA_Client_MonitoredItems_delete_async =
      _UA_Client_MonitoredItems_delete_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteMonitoredItemsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int monitoredItemId,
  ) {
    return _UA_Client_MonitoredItems_deleteSingle(
      client,
      subscriptionId,
      monitoredItemId,
    );
  }

  late final _UA_Client_MonitoredItems_deleteSinglePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32,
              UA_UInt32)>>('UA_Client_MonitoredItems_deleteSingle');
  late final _UA_Client_MonitoredItems_deleteSingle =
      _UA_Client_MonitoredItems_deleteSinglePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, int)>();

  int UA_Client_MonitoredItems_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifyMonitoredItemsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_modify_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_ModifyMonitoredItemsRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_modify_async');
  late final _UA_Client_MonitoredItems_modify_async =
      _UA_Client_MonitoredItems_modify_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_ModifyMonitoredItemsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_setMonitoringMode_async(
    ffi.Pointer<UA_Client> client,
    UA_SetMonitoringModeRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setMonitoringMode_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_SetMonitoringModeRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_setMonitoringMode_async');
  late final _UA_Client_MonitoredItems_setMonitoringMode_async =
      _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_SetMonitoringModeRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_setTriggering_async(
    ffi.Pointer<UA_Client> client,
    UA_SetTriggeringRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setTriggering_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setTriggering_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_SetTriggeringRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_setTriggering_async');
  late final _UA_Client_MonitoredItems_setTriggering_async =
      _UA_Client_MonitoredItems_setTriggering_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_SetTriggeringRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncReadRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadRequest> request,
    UA_ClientAsyncReadCallback readCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncReadRequest(
      client,
      request,
      readCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncReadRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadRequest>,
              UA_ClientAsyncReadCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncReadRequest');
  late final _UA_Client_sendAsyncReadRequest =
      _UA_Client_sendAsyncReadRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadRequest>,
              UA_ClientAsyncReadCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncWriteRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_WriteRequest> request,
    UA_ClientAsyncWriteCallback writeCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncWriteRequest(
      client,
      request,
      writeCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncWriteRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_WriteRequest>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncWriteRequest');
  late final _UA_Client_sendAsyncWriteRequest =
      _UA_Client_sendAsyncWriteRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_WriteRequest>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncBrowseRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_BrowseRequest> request,
    UA_ClientAsyncBrowseCallback browseCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncBrowseRequest(
      client,
      request,
      browseCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncBrowseRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_BrowseRequest>,
              UA_ClientAsyncBrowseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncBrowseRequest');
  late final _UA_Client_sendAsyncBrowseRequest =
      _UA_Client_sendAsyncBrowseRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_BrowseRequest>,
              UA_ClientAsyncBrowseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAttribute_async(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadValueId> rvi,
    int timestampsToReturn,
    UA_ClientAsyncReadAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAttribute_async(
      client,
      rvi,
      timestampsToReturn,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadValueId>,
              ffi.Int32,
              UA_ClientAsyncReadAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readAttribute_async');
  late final _UA_Client_readAttribute_async =
      _UA_Client_readAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadValueId>,
              int,
              UA_ClientAsyncReadAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readValueAttribute_async');
  late final _UA_Client_readValueAttribute_async =
      _UA_Client_readValueAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDataTypeAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDataTypeAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDataTypeAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDataTypeAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDataTypeAttribute_async');
  late final _UA_Client_readDataTypeAttribute_async =
      _UA_Client_readDataTypeAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDataTypeAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readArrayDimensionsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientReadArrayDimensionsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readArrayDimensionsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readArrayDimensionsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientReadArrayDimensionsAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readArrayDimensionsAttribute_async');
  late final _UA_Client_readArrayDimensionsAttribute_async =
      _UA_Client_readArrayDimensionsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientReadArrayDimensionsAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadNodeClassAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readNodeClassAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readNodeClassAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadNodeClassAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readNodeClassAttribute_async');
  late final _UA_Client_readNodeClassAttribute_async =
      _UA_Client_readNodeClassAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadNodeClassAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadBrowseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readBrowseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readBrowseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadBrowseNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readBrowseNameAttribute_async');
  late final _UA_Client_readBrowseNameAttribute_async =
      _UA_Client_readBrowseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadBrowseNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDisplayNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDisplayNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDisplayNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDisplayNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDisplayNameAttribute_async');
  late final _UA_Client_readDisplayNameAttribute_async =
      _UA_Client_readDisplayNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDisplayNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDescriptionAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDescriptionAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDescriptionAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDescriptionAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDescriptionAttribute_async');
  late final _UA_Client_readDescriptionAttribute_async =
      _UA_Client_readDescriptionAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDescriptionAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadWriteMaskAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readWriteMaskAttribute_async');
  late final _UA_Client_readWriteMaskAttribute_async =
      _UA_Client_readWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserWriteMaskAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserWriteMaskAttribute_async');
  late final _UA_Client_readUserWriteMaskAttribute_async =
      _UA_Client_readUserWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadIsAbstractAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readIsAbstractAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readIsAbstractAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadIsAbstractAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readIsAbstractAttribute_async');
  late final _UA_Client_readIsAbstractAttribute_async =
      _UA_Client_readIsAbstractAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadIsAbstractAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadSymmetricAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readSymmetricAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readSymmetricAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadSymmetricAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readSymmetricAttribute_async');
  late final _UA_Client_readSymmetricAttribute_async =
      _UA_Client_readSymmetricAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadSymmetricAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadInverseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readInverseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readInverseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadInverseNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readInverseNameAttribute_async');
  late final _UA_Client_readInverseNameAttribute_async =
      _UA_Client_readInverseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadInverseNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadContainsNoLoopsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readContainsNoLoopsAttribute_async');
  late final _UA_Client_readContainsNoLoopsAttribute_async =
      _UA_Client_readContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadEventNotifierAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readEventNotifierAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readEventNotifierAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadEventNotifierAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readEventNotifierAttribute_async');
  late final _UA_Client_readEventNotifierAttribute_async =
      _UA_Client_readEventNotifierAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadEventNotifierAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueRankAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueRankAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueRankAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadValueRankAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readValueRankAttribute_async');
  late final _UA_Client_readValueRankAttribute_async =
      _UA_Client_readValueRankAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueRankAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadAccessLevelAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readAccessLevelAttribute_async');
  late final _UA_Client_readAccessLevelAttribute_async =
      _UA_Client_readAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserAccessLevelAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserAccessLevelAttribute_async');
  late final _UA_Client_readUserAccessLevelAttribute_async =
      _UA_Client_readUserAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_readMinimumSamplingIntervalAttribute_async =
      _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadHistorizingAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readHistorizingAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readHistorizingAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadHistorizingAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readHistorizingAttribute_async');
  late final _UA_Client_readHistorizingAttribute_async =
      _UA_Client_readHistorizingAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadHistorizingAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadExecutableAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readExecutableAttribute_async');
  late final _UA_Client_readExecutableAttribute_async =
      _UA_Client_readExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserExecutableAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserExecutableAttribute_async');
  late final _UA_Client_readUserExecutableAttribute_async =
      _UA_Client_readUserExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> newValue,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueAttribute_async(
      client,
      nodeId,
      newValue,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeValueAttribute_async');
  late final _UA_Client_writeValueAttribute_async =
      _UA_Client_writeValueAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeIdAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeIdAttribute_async(
      client,
      nodeId,
      outNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeIdAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeNodeIdAttribute_async');
  late final _UA_Client_writeNodeIdAttribute_async =
      _UA_Client_writeNodeIdAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeClassAttribute_async(
      client,
      nodeId,
      outNodeClass,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeClassAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Int32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeNodeClassAttribute_async');
  late final _UA_Client_writeNodeClassAttribute_async =
      _UA_Client_writeNodeClassAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Int32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeBrowseNameAttribute_async(
      client,
      nodeId,
      outBrowseName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeBrowseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeBrowseNameAttribute_async');
  late final _UA_Client_writeBrowseNameAttribute_async =
      _UA_Client_writeBrowseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_QualifiedName>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDisplayNameAttribute_async(
      client,
      nodeId,
      outDisplayName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDisplayNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDisplayNameAttribute_async');
  late final _UA_Client_writeDisplayNameAttribute_async =
      _UA_Client_writeDisplayNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDescriptionAttribute_async(
      client,
      nodeId,
      outDescription,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDescriptionAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDescriptionAttribute_async');
  late final _UA_Client_writeDescriptionAttribute_async =
      _UA_Client_writeDescriptionAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeWriteMaskAttribute_async(
      client,
      nodeId,
      outWriteMask,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_UInt32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeWriteMaskAttribute_async');
  late final _UA_Client_writeWriteMaskAttribute_async =
      _UA_Client_writeWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_UInt32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outUserWriteMask,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserWriteMaskAttribute_async(
      client,
      nodeId,
      outUserWriteMask,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_UInt32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserWriteMaskAttribute_async');
  late final _UA_Client_writeUserWriteMaskAttribute_async =
      _UA_Client_writeUserWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_UInt32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeIsAbstractAttribute_async(
      client,
      nodeId,
      outIsAbstract,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeIsAbstractAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeIsAbstractAttribute_async');
  late final _UA_Client_writeIsAbstractAttribute_async =
      _UA_Client_writeIsAbstractAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeSymmetricAttribute_async(
      client,
      nodeId,
      outSymmetric,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeSymmetricAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeSymmetricAttribute_async');
  late final _UA_Client_writeSymmetricAttribute_async =
      _UA_Client_writeSymmetricAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeInverseNameAttribute_async(
      client,
      nodeId,
      outInverseName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeInverseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeInverseNameAttribute_async');
  late final _UA_Client_writeInverseNameAttribute_async =
      _UA_Client_writeInverseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute_async(
      client,
      nodeId,
      outContainsNoLoops,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeContainsNoLoopsAttribute_async');
  late final _UA_Client_writeContainsNoLoopsAttribute_async =
      _UA_Client_writeContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeEventNotifierAttribute_async(
      client,
      nodeId,
      outEventNotifier,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeEventNotifierAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeEventNotifierAttribute_async');
  late final _UA_Client_writeEventNotifierAttribute_async =
      _UA_Client_writeEventNotifierAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDataTypeAttribute_async(
      client,
      nodeId,
      outDataType,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDataTypeAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_NodeId>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDataTypeAttribute_async');
  late final _UA_Client_writeDataTypeAttribute_async =
      _UA_Client_writeDataTypeAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueRankAttribute_async(
      client,
      nodeId,
      outValueRank,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueRankAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Int32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeValueRankAttribute_async');
  late final _UA_Client_writeValueRankAttribute_async =
      _UA_Client_writeValueRankAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Int32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeAccessLevelAttribute_async(
      client,
      nodeId,
      outAccessLevel,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeAccessLevelAttribute_async');
  late final _UA_Client_writeAccessLevelAttribute_async =
      _UA_Client_writeAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outUserAccessLevel,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserAccessLevelAttribute_async(
      client,
      nodeId,
      outUserAccessLevel,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserAccessLevelAttribute_async');
  late final _UA_Client_writeUserAccessLevelAttribute_async =
      _UA_Client_writeUserAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinimumSamplingInterval,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      outMinimumSamplingInterval,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr =
      _lookup<
              ffi.NativeFunction<
                  UA_StatusCode Function(
                      ffi.Pointer<UA_Client>,
                      UA_NodeId,
                      ffi.Pointer<UA_Double>,
                      UA_ClientAsyncServiceCallback,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_writeMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute_async =
      _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Double>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeHistorizingAttribute_async(
      client,
      nodeId,
      outHistorizing,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeHistorizingAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeHistorizingAttribute_async');
  late final _UA_Client_writeHistorizingAttribute_async =
      _UA_Client_writeHistorizingAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeExecutableAttribute_async(
      client,
      nodeId,
      outExecutable,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeExecutableAttribute_async');
  late final _UA_Client_writeExecutableAttribute_async =
      _UA_Client_writeExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outUserExecutable,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserExecutableAttribute_async(
      client,
      nodeId,
      outUserExecutable,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserExecutableAttribute_async');
  late final _UA_Client_writeUserExecutableAttribute_async =
      _UA_Client_writeUserExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_call_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    UA_ClientAsyncCallCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_call_async(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_call_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Size,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncCallCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_call_async');
  late final _UA_Client_call_async = _UA_Client_call_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          int,
          ffi.Pointer<UA_Variant>,
          UA_ClientAsyncCallCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableNode_async');
  late final _UA_Client_addVariableNode_async =
      _UA_Client_addVariableNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableTypeNode_async');
  late final _UA_Client_addVariableTypeNode_async =
      _UA_Client_addVariableTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectNode_async');
  late final _UA_Client_addObjectNode_async =
      _UA_Client_addObjectNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectTypeNode_async');
  late final _UA_Client_addObjectTypeNode_async =
      _UA_Client_addObjectTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addViewNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addViewNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addViewNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addViewNode_async');
  late final _UA_Client_addViewNode_async =
      _UA_Client_addViewNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addReferenceTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addReferenceTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addReferenceTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addReferenceTypeNode_async');
  late final _UA_Client_addReferenceTypeNode_async =
      _UA_Client_addReferenceTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addDataTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addDataTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addDataTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addDataTypeNode_async');
  late final _UA_Client_addDataTypeNode_async =
      _UA_Client_addDataTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addMethodNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addMethodNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addMethodNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addMethodNode_async');
  late final _UA_Client_addMethodNode_async =
      _UA_Client_addMethodNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_AccessControl_default(
    ffi.Pointer<UA_ServerConfig> config,
    bool allowAnonymous,
    ffi.Pointer<UA_CertificateVerification> verifyX509,
    ffi.Pointer<UA_ByteString> userTokenPolicyUri,
    int usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
  ) {
    return _UA_AccessControl_default(
      config,
      allowAnonymous,
      verifyX509,
      userTokenPolicyUri,
      usernamePasswordLoginSize,
      usernamePasswordLogin,
    );
  }

  late final _UA_AccessControl_defaultPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>,
                  ffi.Bool,
                  ffi.Pointer<UA_CertificateVerification>,
                  ffi.Pointer<UA_ByteString>,
                  ffi.Size,
                  ffi.Pointer<UA_UsernamePasswordLogin>)>>(
      'UA_AccessControl_default');
  late final _UA_AccessControl_default =
      _UA_AccessControl_defaultPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>,
              bool,
              ffi.Pointer<UA_CertificateVerification>,
              ffi.Pointer<UA_ByteString>,
              int,
              ffi.Pointer<UA_UsernamePasswordLogin>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/pki_default.h"
  void UA_CertificateVerification_AcceptAll(
    ffi.Pointer<UA_CertificateVerification> cv,
  ) {
    return _UA_CertificateVerification_AcceptAll(
      cv,
    );
  }

  late final _UA_CertificateVerification_AcceptAllPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CertificateVerification>)>>(
      'UA_CertificateVerification_AcceptAll');
  late final _UA_CertificateVerification_AcceptAll =
      _UA_CertificateVerification_AcceptAllPtr.asFunction<
          void Function(ffi.Pointer<UA_CertificateVerification>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/log_stdout.h"
  late final ffi.Pointer<UA_Logger> _UA_Log_Stdout_ =
      _lookup<UA_Logger>('UA_Log_Stdout_');

  UA_Logger get UA_Log_Stdout_ => _UA_Log_Stdout_.ref;

  late final ffi.Pointer<ffi.Pointer<UA_Logger>> _UA_Log_Stdout =
      _lookup<ffi.Pointer<UA_Logger>>('UA_Log_Stdout');

  ffi.Pointer<UA_Logger> get UA_Log_Stdout => _UA_Log_Stdout.value;

  set UA_Log_Stdout(ffi.Pointer<UA_Logger> value) =>
      _UA_Log_Stdout.value = value;

  void UA_Log_Stdout_log(
    ffi.Pointer<ffi.Void> _,
    int level,
    int category,
    ffi.Pointer<ffi.Char> msg,
    va_list args,
  ) {
    return _UA_Log_Stdout_log(
      _,
      level,
      category,
      msg,
      args,
    );
  }

  late final _UA_Log_Stdout_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>, va_list)>>('UA_Log_Stdout_log');
  late final _UA_Log_Stdout_log = _UA_Log_Stdout_logPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>, va_list)>();

  void UA_Log_Stdout_clear(
    ffi.Pointer<ffi.Void> logContext,
  ) {
    return _UA_Log_Stdout_clear(
      logContext,
    );
  }

  late final _UA_Log_Stdout_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'UA_Log_Stdout_clear');
  late final _UA_Log_Stdout_clear = _UA_Log_Stdout_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  UA_Logger UA_Log_Stdout_withLevel(
    int minlevel,
  ) {
    return _UA_Log_Stdout_withLevel(
      minlevel,
    );
  }

  late final _UA_Log_Stdout_withLevelPtr =
      _lookup<ffi.NativeFunction<UA_Logger Function(ffi.Int32)>>(
          'UA_Log_Stdout_withLevel');
  late final _UA_Log_Stdout_withLevel =
      _UA_Log_Stdout_withLevelPtr.asFunction<UA_Logger Function(int)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/nodestore_default.h"
  int UA_Nodestore_HashMap(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_HashMap(
      ns,
    );
  }

  late final _UA_Nodestore_HashMapPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>(
      'UA_Nodestore_HashMap');
  late final _UA_Nodestore_HashMap = _UA_Nodestore_HashMapPtr.asFunction<
      int Function(ffi.Pointer<UA_Nodestore>)>();

  int UA_Nodestore_ZipTree(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_ZipTree(
      ns,
    );
  }

  late final _UA_Nodestore_ZipTreePtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>(
      'UA_Nodestore_ZipTree');
  late final _UA_Nodestore_ZipTree = _UA_Nodestore_ZipTreePtr.asFunction<
      int Function(ffi.Pointer<UA_Nodestore>)>();

  /// amalgamated original file "/plugins/include/open62541/server_config_default.h"
  ffi.Pointer<UA_Server> UA_Server_new() {
    return _UA_Server_new();
  }

  late final _UA_Server_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Server> Function()>>(
          'UA_Server_new');
  late final _UA_Server_new =
      _UA_Server_newPtr.asFunction<ffi.Pointer<UA_Server> Function()>();

  /// /
  late final ffi.Pointer<UA_ConnectionConfig> _UA_ConnectionConfig_default =
      _lookup<UA_ConnectionConfig>('UA_ConnectionConfig_default');

  UA_ConnectionConfig get UA_ConnectionConfig_default =>
      _UA_ConnectionConfig_default.ref;

  int UA_ServerConfig_setMinimalCustomBuffer(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
    int sendBufferSize,
    int recvBufferSize,
  ) {
    return _UA_ServerConfig_setMinimalCustomBuffer(
      config,
      portNumber,
      certificate,
      sendBufferSize,
      recvBufferSize,
    );
  }

  late final _UA_ServerConfig_setMinimalCustomBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>,
              UA_UInt16,
              ffi.Pointer<UA_ByteString>,
              UA_UInt32,
              UA_UInt32)>>('UA_ServerConfig_setMinimalCustomBuffer');
  late final _UA_ServerConfig_setMinimalCustomBuffer =
      _UA_ServerConfig_setMinimalCustomBufferPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int,
              ffi.Pointer<UA_ByteString>, int, int)>();

  int UA_ServerConfig_setMinimal(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_setMinimal(
      config,
      portNumber,
      certificate,
    );
  }

  late final _UA_ServerConfig_setMinimalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_setMinimal');
  late final _UA_ServerConfig_setMinimal =
      _UA_ServerConfig_setMinimalPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_setDefault(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_setDefault(
      config,
    );
  }

  late final _UA_ServerConfig_setDefaultPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setDefault');
  late final _UA_ServerConfig_setDefault = _UA_ServerConfig_setDefaultPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_setBasics(
    ffi.Pointer<UA_ServerConfig> conf,
  ) {
    return _UA_ServerConfig_setBasics(
      conf,
    );
  }

  late final _UA_ServerConfig_setBasicsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setBasics');
  late final _UA_ServerConfig_setBasics = _UA_ServerConfig_setBasicsPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_addNetworkLayerTCP(
    ffi.Pointer<UA_ServerConfig> conf,
    int portNumber,
    int sendBufferSize,
    int recvBufferSize,
  ) {
    return _UA_ServerConfig_addNetworkLayerTCP(
      conf,
      portNumber,
      sendBufferSize,
      recvBufferSize,
    );
  }

  late final _UA_ServerConfig_addNetworkLayerTCPPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16,
              UA_UInt32, UA_UInt32)>>('UA_ServerConfig_addNetworkLayerTCP');
  late final _UA_ServerConfig_addNetworkLayerTCP =
      _UA_ServerConfig_addNetworkLayerTCPPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int, int, int)>();

  int UA_ServerConfig_addSecurityPolicyNone(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_addSecurityPolicyNone(
      config,
      certificate,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyNonePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>>(
      'UA_ServerConfig_addSecurityPolicyNone');
  late final _UA_ServerConfig_addSecurityPolicyNone =
      _UA_ServerConfig_addSecurityPolicyNonePtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addEndpoint(
    ffi.Pointer<UA_ServerConfig> config,
    UA_String securityPolicyUri,
    int securityMode,
  ) {
    return _UA_ServerConfig_addEndpoint(
      config,
      securityPolicyUri,
      securityMode,
    );
  }

  late final _UA_ServerConfig_addEndpointPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_String,
              ffi.Int32)>>('UA_ServerConfig_addEndpoint');
  late final _UA_ServerConfig_addEndpoint = _UA_ServerConfig_addEndpointPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, UA_String, int)>();

  int UA_ServerConfig_addAllEndpoints(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_addAllEndpoints(
      config,
    );
  }

  late final _UA_ServerConfig_addAllEndpointsPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>(
      'UA_ServerConfig_addAllEndpoints');
  late final _UA_ServerConfig_addAllEndpoints =
      _UA_ServerConfig_addAllEndpointsPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>)>();

  /// amalgamated original file "/plugins/include/open62541/client_config_default.h"
  ffi.Pointer<UA_Client> UA_Client_new() {
    return _UA_Client_new();
  }

  late final _UA_Client_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Client> Function()>>(
          'UA_Client_new');
  late final _UA_Client_new =
      _UA_Client_newPtr.asFunction<ffi.Pointer<UA_Client> Function()>();

  int UA_ClientConfig_setDefault(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_setDefault(
      config,
    );
  }

  late final _UA_ClientConfig_setDefaultPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ClientConfig>)>>('UA_ClientConfig_setDefault');
  late final _UA_ClientConfig_setDefault = _UA_ClientConfig_setDefaultPtr
      .asFunction<int Function(ffi.Pointer<UA_ClientConfig>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/securitypolicy_default.h"
  int UA_SecurityPolicy_None(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_None(
      policy,
      localCertificate,
      logger,
    );
  }

  late final _UA_SecurityPolicy_NonePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_None');
  late final _UA_SecurityPolicy_None = _UA_SecurityPolicy_NonePtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString,
          ffi.Pointer<UA_Logger>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/pubsub_udp.h"
  UA_PubSubTransportLayer UA_PubSubTransportLayerUDPMP() {
    return _UA_PubSubTransportLayerUDPMP();
  }

  late final _UA_PubSubTransportLayerUDPMPPtr =
      _lookup<ffi.NativeFunction<UA_PubSubTransportLayer Function()>>(
          'UA_PubSubTransportLayerUDPMP');
  late final _UA_PubSubTransportLayerUDPMP = _UA_PubSubTransportLayerUDPMPPtr
      .asFunction<UA_PubSubTransportLayer Function()>();

  UA_ServerNetworkLayer UA_ServerNetworkLayerTCP(
    UA_ConnectionConfig config,
    int port,
    int maxConnections,
  ) {
    return _UA_ServerNetworkLayerTCP(
      config,
      port,
      maxConnections,
    );
  }

  late final _UA_ServerNetworkLayerTCPPtr = _lookup<
      ffi.NativeFunction<
          UA_ServerNetworkLayer Function(UA_ConnectionConfig, UA_UInt16,
              UA_UInt16)>>('UA_ServerNetworkLayerTCP');
  late final _UA_ServerNetworkLayerTCP =
      _UA_ServerNetworkLayerTCPPtr.asFunction<
          UA_ServerNetworkLayer Function(UA_ConnectionConfig, int, int)>();

  UA_Connection UA_ClientConnectionTCP_init(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    int timeout,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_ClientConnectionTCP_init(
      config,
      endpointUrl,
      timeout,
      logger,
    );
  }

  late final _UA_ClientConnectionTCP_initPtr = _lookup<
      ffi.NativeFunction<
          UA_Connection Function(UA_ConnectionConfig, UA_String, UA_UInt32,
              ffi.Pointer<UA_Logger>)>>('UA_ClientConnectionTCP_init');
  late final _UA_ClientConnectionTCP_init =
      _UA_ClientConnectionTCP_initPtr.asFunction<
          UA_Connection Function(
              UA_ConnectionConfig, UA_String, int, ffi.Pointer<UA_Logger>)>();

  int UA_ClientConnectionTCP_poll(
    ffi.Pointer<UA_Connection> connection,
    int timeout,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_ClientConnectionTCP_poll(
      connection,
      timeout,
      logger,
    );
  }

  late final _UA_ClientConnectionTCP_pollPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection>, UA_UInt32,
              ffi.Pointer<UA_Logger>)>>('UA_ClientConnectionTCP_poll');
  late final _UA_ClientConnectionTCP_poll =
      _UA_ClientConnectionTCP_pollPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Connection>, int, ffi.Pointer<UA_Logger>)>();

  int UA_socket_set_blocking(
    int sockfd,
  ) {
    return _UA_socket_set_blocking(
      sockfd,
    );
  }

  late final _UA_socket_set_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(SOCKET)>>(
          'UA_socket_set_blocking');
  late final _UA_socket_set_blocking =
      _UA_socket_set_blockingPtr.asFunction<int Function(int)>();

  int UA_socket_set_nonblocking(
    int sockfd,
  ) {
    return _UA_socket_set_nonblocking(
      sockfd,
    );
  }

  late final _UA_socket_set_nonblockingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(SOCKET)>>(
          'UA_socket_set_nonblocking');
  late final _UA_socket_set_nonblocking =
      _UA_socket_set_nonblockingPtr.asFunction<int Function(int)>();

  void UA_initialize_architecture_network() {
    return _UA_initialize_architecture_network();
  }

  late final _UA_initialize_architecture_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UA_initialize_architecture_network');
  late final _UA_initialize_architecture_network =
      _UA_initialize_architecture_networkPtr.asFunction<void Function()>();

  void UA_deinitialize_architecture_network() {
    return _UA_deinitialize_architecture_network();
  }

  late final _UA_deinitialize_architecture_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UA_deinitialize_architecture_network');
  late final _UA_deinitialize_architecture_network =
      _UA_deinitialize_architecture_networkPtr.asFunction<void Function()>();


  int UA_CLIENT_SETVALUE(ffi.Pointer<UA_Client> client, double value){
    return _UA_CLIENT_SETVALUE_D(client,value);
  }

  late final _UA_CLIENT_SETVALUE_C =
      _lookup<ffi.NativeFunction<ffi.Int Function( ffi.Pointer<UA_Client>,ffi.Double)>>(
          'UA_CLIENT_SETVALUE');

  late final _UA_CLIENT_SETVALUE_D =
      _UA_CLIENT_SETVALUE_C.asFunction<int Function(ffi.Pointer<UA_Client>,double)>();



  int UA_GET_TYPES( ffi.Pointer<UA_DataType> type) {

      for(int i = 0; i < 100; i++){
          if(_UA_GET_TYPES(i) == type){
              return i;
          }
          
        }
        return -1;
}
ffi.Pointer<UA_DataType> UA_GET_TYPES_( int i) {

     return _UA_GET_TYPES(i);
}

  late final _UA_GET_TYPESPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function( ffi.Int)>>(
          'UA_GET_TYPES');
  late final _UA_GET_TYPES =
      _UA_GET_TYPESPtr.asFunction<ffi.Pointer<UA_DataType> Function(int)>();

  ffi.Pointer<UA_DataType> UA_GET_TYPES_PTR(
    int typeNumber,
  ) {
    return _UA_GET_TYPES_PTR(
      typeNumber,
    );
  }

  late final _UA_GET_TYPES_PTRPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Int)>>(
          'UA_GET_TYPES_PTR');
  late final _UA_GET_TYPES_PTR =
      _UA_GET_TYPES_PTRPtr.asFunction<ffi.Pointer<UA_DataType> Function(int)>();

  int UA_FIND_TYPE(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
  ) {
    return _UA_FIND_TYPE(
      client,
      nodeId,
    );
  }

  late final _UA_FIND_TYPEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<UA_Client>, UA_NodeId)>>('UA_FIND_TYPE');
  late final _UA_FIND_TYPE = _UA_FIND_TYPEPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId)>();
}

final class _LARGE_INTEGER extends ffi.Union {
  external UnnamedStruct1 unnamed;

  external UnnamedStruct2 u;

  @LONGLONG()
  external int QuadPart;
}

final class UnnamedStruct1 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef DWORD = ffi.UnsignedLong;
typedef DartDWORD = int;
typedef LONG = ffi.Long;
typedef DartLONG = int;

final class UnnamedStruct2 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @LONG()
  external int HighPart;
}

typedef LONGLONG = ffi.LongLong;
typedef DartLONGLONG = int;

final class _ULARGE_INTEGER extends ffi.Union {
  external UnnamedStruct3 unnamed;

  external UnnamedStruct4 u;

  @ULONGLONG()
  external int QuadPart;
}

final class UnnamedStruct3 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @DWORD()
  external int HighPart;
}

final class UnnamedStruct4 extends ffi.Struct {
  @DWORD()
  external int LowPart;

  @DWORD()
  external int HighPart;
}

typedef ULONGLONG = ffi.UnsignedLongLong;
typedef DartULONGLONG = int;

final class _ARM64_NT_NEON128 extends ffi.Union {
  external UnnamedStruct5 unnamed;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> D;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> S;

  @ffi.Array.multi([8])
  external ffi.Array<WORD> H;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> B;
}

final class UnnamedStruct5 extends ffi.Struct {
  @ULONGLONG()
  external int Low;

  @LONGLONG()
  external int High;
}

typedef WORD = ffi.UnsignedShort;
typedef DartWORD = int;
typedef BYTE = ffi.UnsignedChar;
typedef DartBYTE = int;

final class _DISPATCHER_CONTEXT_NONVOLREG_ARM64 extends ffi.Union {
  @ffi.Array.multi([152])
  external ffi.Array<BYTE> Buffer;

  external UnnamedStruct6 unnamed;
}

final class UnnamedStruct6 extends ffi.Struct {
  @ffi.Array.multi([11])
  external ffi.Array<DWORD64> GpNvRegs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Double> FpNvRegs;
}

typedef DWORD64 = ffi.UnsignedLongLong;
typedef DartDWORD64 = int;

final class _SE_SID extends ffi.Union {
  external SID Sid;

  @ffi.Array.multi([68])
  external ffi.Array<BYTE> Buffer;
}

typedef SID = _SID;

final class _SID extends ffi.Struct {
  @BYTE()
  external int Revision;

  @BYTE()
  external int SubAuthorityCount;

  external SID_IDENTIFIER_AUTHORITY IdentifierAuthority;

  @ffi.Array.multi([1])
  external ffi.Array<DWORD> SubAuthority;
}

typedef SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;

final class _SID_IDENTIFIER_AUTHORITY extends ffi.Struct {
  @ffi.Array.multi([6])
  external ffi.Array<BYTE> Value;
}

final class _RATE_QUOTA_LIMIT extends ffi.Opaque {}

final class _FILE_SEGMENT_ELEMENT extends ffi.Union {
  external PVOID64 Buffer;

  @ULONGLONG()
  external int Alignment;
}

typedef PVOID64 = ffi.Pointer<ffi.Void>;
typedef GUID = _GUID;

final class _GUID extends ffi.Struct {
  @ffi.UnsignedLong()
  external int Data1;

  @ffi.UnsignedShort()
  external int Data2;

  @ffi.UnsignedShort()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> Data4;
}

final class _IMAGE_AUX_SYMBOL extends ffi.Union {
  external UnnamedStruct8 Sym;

  external UnnamedStruct12 File;

  external UnnamedStruct13 Section;

  external IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;

  external UnnamedStruct14 CRC;
}

@ffi.Packed(2)
final class UnnamedStruct8 extends ffi.Struct {
  @DWORD()
  external int TagIndex;

  external UnnamedUnion1 Misc;

  external UnnamedUnion2 FcnAry;

  @WORD()
  external int TvIndex;
}

final class UnnamedUnion1 extends ffi.Union {
  external UnnamedStruct9 LnSz;

  @DWORD()
  external int TotalSize;
}

final class UnnamedStruct9 extends ffi.Struct {
  @WORD()
  external int Linenumber;

  @WORD()
  external int Size;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct10 Function1;

  external UnnamedStruct11 Array;
}

@ffi.Packed(2)
final class UnnamedStruct10 extends ffi.Struct {
  @DWORD()
  external int PointerToLinenumber;

  @DWORD()
  external int PointerToNextFunction;
}

final class UnnamedStruct11 extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<WORD> Dimension;
}

final class UnnamedStruct12 extends ffi.Struct {
  @ffi.Array.multi([18])
  external ffi.Array<BYTE> Name;
}

@ffi.Packed(2)
final class UnnamedStruct13 extends ffi.Struct {
  @DWORD()
  external int Length;

  @WORD()
  external int NumberOfRelocations;

  @WORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int CheckSum;

  @SHORT()
  external int Number;

  @BYTE()
  external int Selection;

  @BYTE()
  external int bReserved;

  @SHORT()
  external int HighNumber;
}

typedef SHORT = ffi.Short;
typedef DartSHORT = int;

@ffi.Packed(2)
final class IMAGE_AUX_SYMBOL_TOKEN_DEF extends ffi.Struct {
  @BYTE()
  external int bAuxType;

  @BYTE()
  external int bReserved;

  @DWORD()
  external int SymbolTableIndex;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> rgbReserved;
}

@ffi.Packed(2)
final class UnnamedStruct14 extends ffi.Struct {
  @DWORD()
  external int crc;

  @ffi.Array.multi([14])
  external ffi.Array<BYTE> rgbReserved;
}

final class _IMAGE_AUX_SYMBOL_EX extends ffi.Union {
  external UnnamedStruct15 Sym;

  external UnnamedStruct16 File;

  external UnnamedStruct17 Section;

  external UnnamedStruct18 unnamed;

  external UnnamedStruct19 CRC;
}

@ffi.Packed(2)
final class UnnamedStruct15 extends ffi.Struct {
  @DWORD()
  external int WeakDefaultSymIndex;

  @DWORD()
  external int WeakSearchType;

  @ffi.Array.multi([12])
  external ffi.Array<BYTE> rgbReserved;
}

final class UnnamedStruct16 extends ffi.Struct {
  @ffi.Array.multi([20])
  external ffi.Array<BYTE> Name;
}

@ffi.Packed(2)
final class UnnamedStruct17 extends ffi.Struct {
  @DWORD()
  external int Length;

  @WORD()
  external int NumberOfRelocations;

  @WORD()
  external int NumberOfLinenumbers;

  @DWORD()
  external int CheckSum;

  @SHORT()
  external int Number;

  @BYTE()
  external int Selection;

  @BYTE()
  external int bReserved;

  @SHORT()
  external int HighNumber;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> rgbReserved;
}

final class UnnamedStruct18 extends ffi.Struct {
  external IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;

  @ffi.Array.multi([2])
  external ffi.Array<BYTE> rgbReserved;
}

@ffi.Packed(2)
final class UnnamedStruct19 extends ffi.Struct {
  @DWORD()
  external int crc;

  @ffi.Array.multi([16])
  external ffi.Array<BYTE> rgbReserved;
}

final class IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA extends ffi.Opaque {}

final class _SLIST_HEADER extends ffi.Opaque {}

final class _RTL_RUN_ONCE extends ffi.Union {
  external PVOID Ptr;
}

typedef PVOID = ffi.Pointer<ffi.Void>;

final class _RPC_ASYNC_NOTIFICATION_INFO extends ffi.Union {
  external UnnamedStruct23 APC;

  external UnnamedStruct24 IOC;

  external UnnamedStruct26 HWND;

  external HANDLE hEvent;

  external PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
}

final class UnnamedStruct23 extends ffi.Struct {
  external PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;

  external HANDLE hThread;
}

typedef PFN_RPCNOTIFICATION_ROUTINE = ffi.Pointer<RPCNOTIFICATION_ROUTINE>;
typedef RPCNOTIFICATION_ROUTINE = ffi.NativeFunction<
    ffi.Void Function(ffi.Pointer<_RPC_ASYNC_STATE> pAsync,
        ffi.Pointer<ffi.Void> Context, ffi.Int32 Event)>;

final class _RPC_ASYNC_STATE extends ffi.Struct {
  @ffi.UnsignedInt()
  external int Size;

  @ffi.UnsignedLong()
  external int Signature;

  @ffi.Long()
  external int Lock;

  @ffi.UnsignedLong()
  external int Flags;

  external ffi.Pointer<ffi.Void> StubInfo;

  external ffi.Pointer<ffi.Void> UserInfo;

  external ffi.Pointer<ffi.Void> RuntimeInfo;

  @ffi.Int32()
  external int Event;

  @ffi.Int32()
  external int NotificationType;

  external RPC_ASYNC_NOTIFICATION_INFO u;

  @ffi.Array.multi([4])
  external ffi.Array<LONG_PTR> Reserved;
}

abstract class _RPC_ASYNC_EVENT {
  static const int RpcCallComplete = 0;
  static const int RpcSendComplete = 1;
  static const int RpcReceiveComplete = 2;
  static const int RpcClientDisconnect = 3;
  static const int RpcClientCancel = 4;
}

abstract class _RPC_NOTIFICATION_TYPES {
  static const int RpcNotificationTypeNone = 0;
  static const int RpcNotificationTypeEvent = 1;
  static const int RpcNotificationTypeApc = 2;
  static const int RpcNotificationTypeIoc = 3;
  static const int RpcNotificationTypeHwnd = 4;
  static const int RpcNotificationTypeCallback = 5;
}

typedef RPC_ASYNC_NOTIFICATION_INFO = _RPC_ASYNC_NOTIFICATION_INFO;
typedef LONG_PTR = ffi.LongLong;
typedef DartLONG_PTR = int;
typedef HANDLE = ffi.Pointer<ffi.Void>;

final class UnnamedStruct24 extends ffi.Struct {
  external HANDLE hIOPort;

  @DWORD()
  external int dwNumberOfBytesTransferred;

  @DWORD_PTR()
  external int dwCompletionKey;

  external LPOVERLAPPED lpOverlapped;
}

typedef DWORD_PTR = ULONG_PTR;
typedef ULONG_PTR = ffi.UnsignedLongLong;
typedef DartULONG_PTR = int;
typedef LPOVERLAPPED = ffi.Pointer<_OVERLAPPED>;

final class _OVERLAPPED extends ffi.Struct {
  @ULONG_PTR()
  external int Internal;

  @ULONG_PTR()
  external int InternalHigh;

  external UnnamedUnion3 unnamed;

  external HANDLE hEvent;
}

final class UnnamedUnion3 extends ffi.Union {
  external UnnamedStruct25 unnamed;

  external PVOID Pointer;
}

final class UnnamedStruct25 extends ffi.Struct {
  @DWORD()
  external int Offset;

  @DWORD()
  external int OffsetHigh;
}

final class UnnamedStruct26 extends ffi.Struct {
  external HWND hWnd;

  @UINT()
  external int Msg;
}

typedef HWND = ffi.Pointer<HWND__>;

final class HWND__ extends ffi.Struct {
  @ffi.Int()
  external int unused;
}

typedef UINT = ffi.UnsignedInt;
typedef DartUINT = int;

final class _CLIENT_CALL_RETURN extends ffi.Union {
  external ffi.Pointer<ffi.Void> Pointer;

  @LONG_PTR()
  external int Simple;
}

typedef RPC_IF_HANDLE = ffi.Pointer<ffi.Void>;

final class tagCY extends ffi.Union {
  external UnnamedStruct27 unnamed;

  @LONGLONG()
  external int int64;
}

final class UnnamedStruct27 extends ffi.Struct {
  @ULONG()
  external int Lo;

  @LONG()
  external int Hi;
}

typedef ULONG = DWORD;

final class _STORAGE_PROTOCOL_DATA_SUBVALUE_GET_LOG_PAGE extends ffi.Opaque {}

final class _STORAGE_SPEC_VERSION extends ffi.Union {
  external UnnamedStruct29 unnamed;

  @DWORD()
  external int AsUlong;
}

final class UnnamedStruct29 extends ffi.Struct {
  external UnnamedUnion4 MinorVersion;

  @WORD()
  external int MajorVersion;
}

final class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct30 unnamed;

  @WORD()
  external int AsUshort;
}

final class UnnamedStruct30 extends ffi.Struct {
  @BYTE()
  external int SubMinor;

  @BYTE()
  external int Minor;
}

final class USN_RECORD_UNION extends ffi.Union {
  external USN_RECORD_COMMON_HEADER Header;

  external USN_RECORD_V2 V2;

  external USN_RECORD_V3 V3;

  external USN_RECORD_V4 V4;
}

final class USN_RECORD_COMMON_HEADER extends ffi.Struct {
  @DWORD()
  external int RecordLength;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;
}

final class USN_RECORD_V2 extends ffi.Struct {
  @DWORD()
  external int RecordLength;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  @DWORDLONG()
  external int FileReferenceNumber;

  @DWORDLONG()
  external int ParentFileReferenceNumber;

  @USN()
  external int Usn;

  external LARGE_INTEGER TimeStamp;

  @DWORD()
  external int Reason;

  @DWORD()
  external int SourceInfo;

  @DWORD()
  external int SecurityId;

  @DWORD()
  external int FileAttributes;

  @WORD()
  external int FileNameLength;

  @WORD()
  external int FileNameOffset;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

typedef DWORDLONG = ULONGLONG;
typedef USN = LONGLONG;
typedef LARGE_INTEGER = _LARGE_INTEGER;
typedef WCHAR = ffi.WChar;
typedef DartWCHAR = int;

final class USN_RECORD_V3 extends ffi.Struct {
  @DWORD()
  external int RecordLength;

  @WORD()
  external int MajorVersion;

  @WORD()
  external int MinorVersion;

  external FILE_ID_128 FileReferenceNumber;

  external FILE_ID_128 ParentFileReferenceNumber;

  @USN()
  external int Usn;

  external LARGE_INTEGER TimeStamp;

  @DWORD()
  external int Reason;

  @DWORD()
  external int SourceInfo;

  @DWORD()
  external int SecurityId;

  @DWORD()
  external int FileAttributes;

  @WORD()
  external int FileNameLength;

  @WORD()
  external int FileNameOffset;

  @ffi.Array.multi([1])
  external ffi.Array<WCHAR> FileName;
}

typedef FILE_ID_128 = _FILE_ID_128;

final class _FILE_ID_128 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<BYTE> Identifier;
}

final class USN_RECORD_V4 extends ffi.Struct {
  external USN_RECORD_COMMON_HEADER Header;

  external FILE_ID_128 FileReferenceNumber;

  external FILE_ID_128 ParentFileReferenceNumber;

  @USN()
  external int Usn;

  @DWORD()
  external int Reason;

  @DWORD()
  external int SourceInfo;

  @DWORD()
  external int RemainingExtents;

  @WORD()
  external int NumberOfExtents;

  @WORD()
  external int ExtentSize;

  @ffi.Array.multi([1])
  external ffi.Array<USN_RECORD_EXTENT> Extents;
}

final class USN_RECORD_EXTENT extends ffi.Struct {
  @LONGLONG()
  external int Offset;

  @LONGLONG()
  external int Length;
}

typedef SCARD_IO_REQUEST = _SCARD_IO_REQUEST;

final class _SCARD_IO_REQUEST extends ffi.Struct {
  @DWORD()
  external int dwProtocol;

  @DWORD()
  external int cbPciLength;
}

typedef IID = GUID;
typedef CLSID = GUID;
typedef FMTID = GUID;

final class tagBINDPTR extends ffi.Union {
  external ffi.Pointer<FUNCDESC> lpfuncdesc;

  external ffi.Pointer<VARDESC> lpvardesc;

  external ffi.Pointer<ITypeComp> lptcomp;
}

typedef FUNCDESC = tagFUNCDESC;

final class tagFUNCDESC extends ffi.Struct {
  @MEMBERID()
  external int memid;

  external ffi.Pointer<SCODE> lprgscode;

  external ffi.Pointer<ELEMDESC> lprgelemdescParam;

  @ffi.Int32()
  external int funckind;

  @ffi.Int32()
  external int invkind;

  @ffi.Int32()
  external int callconv;

  @SHORT()
  external int cParams;

  @SHORT()
  external int cParamsOpt;

  @SHORT()
  external int oVft;

  @SHORT()
  external int cScodes;

  external ELEMDESC elemdescFunc;

  @WORD()
  external int wFuncFlags;
}

typedef MEMBERID = DISPID;
typedef DISPID = LONG;
typedef SCODE = LONG;
typedef ELEMDESC = tagELEMDESC;

final class tagELEMDESC extends ffi.Struct {
  external TYPEDESC tdesc;

  external UnnamedUnion6 unnamed;
}

typedef TYPEDESC = tagTYPEDESC;

final class tagTYPEDESC extends ffi.Struct {
  external UnnamedUnion5 unnamed;

  @VARTYPE()
  external int vt;
}

final class UnnamedUnion5 extends ffi.Union {
  external ffi.Pointer<tagTYPEDESC> lptdesc;

  external ffi.Pointer<tagARRAYDESC> lpadesc;

  @HREFTYPE()
  external int hreftype;
}

final class tagARRAYDESC extends ffi.Struct {
  external TYPEDESC1 tdescElem;

  @USHORT()
  external int cDims;

  @ffi.Array.multi([1])
  external ffi.Array<SAFEARRAYBOUND> rgbounds;
}

typedef TYPEDESC1 = tagTYPEDESC;
typedef USHORT = ffi.UnsignedShort;
typedef DartUSHORT = int;
typedef SAFEARRAYBOUND = tagSAFEARRAYBOUND;

final class tagSAFEARRAYBOUND extends ffi.Struct {
  @ULONG()
  external int cElements;

  @LONG()
  external int lLbound;
}

typedef HREFTYPE = DWORD;
typedef VARTYPE = ffi.UnsignedShort;
typedef DartVARTYPE = int;

final class UnnamedUnion6 extends ffi.Union {
  external IDLDESC idldesc;

  external PARAMDESC paramdesc;
}

typedef IDLDESC = tagIDLDESC;

final class tagIDLDESC extends ffi.Struct {
  @ULONG_PTR()
  external int dwReserved;

  @USHORT()
  external int wIDLFlags;
}

typedef PARAMDESC = tagPARAMDESC;

final class tagPARAMDESC extends ffi.Struct {
  external LPPARAMDESCEX pparamdescex;

  @USHORT()
  external int wParamFlags;
}

typedef LPPARAMDESCEX = ffi.Pointer<tagPARAMDESCEX>;

final class tagPARAMDESCEX extends ffi.Struct {
  @ULONG()
  external int cBytes;

  external VARIANTARG varDefaultValue;
}

typedef VARIANTARG = VARIANT;
typedef VARIANT = tagVARIANT;

final class tagVARIANT extends ffi.Struct {
  external UnnamedUnion7 unnamed;
}

final class UnnamedUnion7 extends ffi.Union {
  external UnnamedStruct31 unnamed;

  external DECIMAL decVal;
}

final class UnnamedStruct31 extends ffi.Struct {
  @VARTYPE()
  external int vt;

  @WORD()
  external int wReserved1;

  @WORD()
  external int wReserved2;

  @WORD()
  external int wReserved3;

  external UnnamedUnion8 unnamed;
}

final class UnnamedUnion8 extends ffi.Union {
  @LONGLONG()
  external int llVal;

  @LONG()
  external int lVal;

  @BYTE()
  external int bVal;

  @SHORT()
  external int iVal;

  @FLOAT()
  external double fltVal;

  @DOUBLE()
  external double dblVal;

  @VARIANT_BOOL()
  external int boolVal;

  @VARIANT_BOOL()
  external int __OBSOLETE__VARIANT_BOOL;

  @SCODE()
  external int scode;

  external CY cyVal;

  @DATE()
  external double date;

  external BSTR bstrVal;

  external ffi.Pointer<IUnknown> punkVal;

  external ffi.Pointer<IDispatch> pdispVal;

  external ffi.Pointer<SAFEARRAY> parray;

  external ffi.Pointer<BYTE> pbVal;

  external ffi.Pointer<SHORT> piVal;

  external ffi.Pointer<LONG> plVal;

  external ffi.Pointer<LONGLONG> pllVal;

  external ffi.Pointer<FLOAT> pfltVal;

  external ffi.Pointer<DOUBLE> pdblVal;

  external ffi.Pointer<VARIANT_BOOL> pboolVal;

  external ffi.Pointer<VARIANT_BOOL> __OBSOLETE__VARIANT_PBOOL;

  external ffi.Pointer<SCODE> pscode;

  external ffi.Pointer<CY> pcyVal;

  external ffi.Pointer<DATE> pdate;

  external ffi.Pointer<BSTR> pbstrVal;

  external ffi.Pointer<ffi.Pointer<IUnknown>> ppunkVal;

  external ffi.Pointer<ffi.Pointer<IDispatch>> ppdispVal;

  external ffi.Pointer<ffi.Pointer<SAFEARRAY>> pparray;

  external ffi.Pointer<VARIANT1> pvarVal;

  external PVOID byref;

  @CHAR()
  external int cVal;

  @USHORT()
  external int uiVal;

  @ULONG()
  external int ulVal;

  @ULONGLONG()
  external int ullVal;

  @INT()
  external int intVal;

  @UINT()
  external int uintVal;

  external ffi.Pointer<DECIMAL> pdecVal;

  external ffi.Pointer<CHAR> pcVal;

  external ffi.Pointer<USHORT> puiVal;

  external ffi.Pointer<ULONG> pulVal;

  external ffi.Pointer<ULONGLONG> pullVal;

  external ffi.Pointer<INT> pintVal;

  external ffi.Pointer<UINT> puintVal;

  external UnnamedStruct34 unnamed;
}

typedef FLOAT = ffi.Float;
typedef DartFLOAT = double;
typedef DOUBLE = ffi.Double;
typedef DartDOUBLE = double;
typedef VARIANT_BOOL = ffi.Short;
typedef DartVARIANT_BOOL = int;
typedef CY = tagCY;
typedef DATE = ffi.Double;
typedef DartDATE = double;
typedef BSTR = ffi.Pointer<OLECHAR>;
typedef OLECHAR = WCHAR;

final class IUnknown extends ffi.Struct {
  external ffi.Pointer<IUnknownVtbl> lpVtbl;
}

final class IUnknownVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IUnknown> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IUnknown> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IUnknown> This)>>
      Release;
}

typedef HRESULT = ffi.Long;
typedef DartHRESULT = int;

final class IDispatch extends ffi.Struct {
  external ffi.Pointer<IDispatchVtbl> lpVtbl;
}

final class IDispatchVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IDispatch> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IDispatch> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<IDispatch> This)>>
      Release;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IDispatch> This, ffi.Pointer<UINT> pctinfo)>>
      GetTypeInfoCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IDispatch> This, UINT iTInfo, LCID lcid,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo)>> GetTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IDispatch> This,
              ffi.Pointer<IID> riid,
              ffi.Pointer<LPOLESTR> rgszNames,
              UINT cNames,
              LCID lcid,
              ffi.Pointer<DISPID> rgDispId)>> GetIDsOfNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IDispatch> This,
              DISPID dispIdMember,
              ffi.Pointer<IID> riid,
              LCID lcid,
              WORD wFlags,
              ffi.Pointer<DISPPARAMS> pDispParams,
              ffi.Pointer<VARIANT1> pVarResult,
              ffi.Pointer<EXCEPINFO> pExcepInfo,
              ffi.Pointer<UINT> puArgErr)>> Invoke;
}

typedef LCID = DWORD;

final class ITypeInfo extends ffi.Struct {
  external ffi.Pointer<ITypeInfoVtbl> lpVtbl;
}

final class ITypeInfoVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeInfo> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeInfo> This)>>
      Release;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<ffi.Pointer<TYPEATTR>> ppTypeAttr)>> GetTypeAttr;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<ffi.Pointer<ITypeComp>> ppTComp)>> GetTypeComp;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, UINT index,
              ffi.Pointer<ffi.Pointer<FUNCDESC1>> ppFuncDesc)>> GetFuncDesc;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, UINT index,
              ffi.Pointer<ffi.Pointer<VARDESC>> ppVarDesc)>> GetVarDesc;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              MEMBERID memid,
              ffi.Pointer<BSTR> rgBstrNames,
              UINT cMaxNames,
              ffi.Pointer<UINT> pcNames)>> GetNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, UINT index,
              ffi.Pointer<HREFTYPE> pRefType)>> GetRefTypeOfImplType;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, UINT index,
              ffi.Pointer<INT> pImplTypeFlags)>> GetImplTypeFlags;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<LPOLESTR> rgszNames,
              UINT cNames,
              ffi.Pointer<MEMBERID> pMemId)>> GetIDsOfNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              PVOID pvInstance,
              MEMBERID memid,
              WORD wFlags,
              ffi.Pointer<DISPPARAMS> pDispParams,
              ffi.Pointer<VARIANT1> pVarResult,
              ffi.Pointer<EXCEPINFO> pExcepInfo,
              ffi.Pointer<UINT> puArgErr)>> Invoke;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              MEMBERID memid,
              ffi.Pointer<BSTR> pBstrName,
              ffi.Pointer<BSTR> pBstrDocString,
              ffi.Pointer<DWORD> pdwHelpContext,
              ffi.Pointer<BSTR> pBstrHelpFile)>> GetDocumentation;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              MEMBERID memid,
              ffi.Int32 invKind,
              ffi.Pointer<BSTR> pBstrDllName,
              ffi.Pointer<BSTR> pBstrName,
              ffi.Pointer<WORD> pwOrdinal)>> GetDllEntry;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, HREFTYPE hRefType,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo)>> GetRefTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, MEMBERID memid,
              ffi.Int32 invKind, ffi.Pointer<PVOID> ppv)>> AddressOfMember;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<IUnknown> pUnkOuter,
              ffi.Pointer<IID> riid,
              ffi.Pointer<PVOID> ppvObj)>> CreateInstance;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeInfo> This, MEMBERID memid,
              ffi.Pointer<BSTR> pBstrMops)>> GetMops;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<ffi.Pointer<ITypeLib>> ppTLib,
              ffi.Pointer<UINT> pIndex)>> GetContainingTypeLib;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<TYPEATTR> pTypeAttr)>> ReleaseTypeAttr;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ITypeInfo> This,
              ffi.Pointer<FUNCDESC1> pFuncDesc)>> ReleaseFuncDesc;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ITypeInfo> This, ffi.Pointer<VARDESC> pVarDesc)>>
      ReleaseVarDesc;
}

typedef TYPEATTR = tagTYPEATTR;

final class tagTYPEATTR extends ffi.Struct {
  external GUID guid;

  @LCID()
  external int lcid;

  @DWORD()
  external int dwReserved;

  @MEMBERID()
  external int memidConstructor;

  @MEMBERID()
  external int memidDestructor;

  external LPOLESTR lpstrSchema;

  @ULONG()
  external int cbSizeInstance;

  @ffi.Int32()
  external int typekind;

  @WORD()
  external int cFuncs;

  @WORD()
  external int cVars;

  @WORD()
  external int cImplTypes;

  @WORD()
  external int cbSizeVft;

  @WORD()
  external int cbAlignment;

  @WORD()
  external int wTypeFlags;

  @WORD()
  external int wMajorVerNum;

  @WORD()
  external int wMinorVerNum;

  external TYPEDESC tdescAlias;

  external IDLDESC idldescType;
}

typedef LPOLESTR = ffi.Pointer<OLECHAR>;

abstract class tagTYPEKIND {
  static const int TKIND_ENUM = 0;
  static const int TKIND_RECORD = 1;
  static const int TKIND_MODULE = 2;
  static const int TKIND_INTERFACE = 3;
  static const int TKIND_DISPATCH = 4;
  static const int TKIND_COCLASS = 5;
  static const int TKIND_ALIAS = 6;
  static const int TKIND_UNION = 7;
  static const int TKIND_MAX = 8;
}

final class ITypeComp extends ffi.Struct {
  external ffi.Pointer<ITypeCompVtbl> lpVtbl;
}

final class ITypeCompVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeComp> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeComp> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeComp> This)>>
      Release;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeComp> This,
              LPOLESTR szName,
              ULONG lHashVal,
              WORD wFlags,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo,
              ffi.Pointer<ffi.Int32> pDescKind,
              ffi.Pointer<BINDPTR> pBindPtr)>> Bind;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeComp> This,
              LPOLESTR szName,
              ULONG lHashVal,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo,
              ffi.Pointer<ffi.Pointer<ITypeComp>> ppTComp)>> BindType;
}

abstract class tagDESCKIND {
  static const int DESCKIND_NONE = 0;
  static const int DESCKIND_FUNCDESC = 1;
  static const int DESCKIND_VARDESC = 2;
  static const int DESCKIND_TYPECOMP = 3;
  static const int DESCKIND_IMPLICITAPPOBJ = 4;
  static const int DESCKIND_MAX = 5;
}

typedef BINDPTR = tagBINDPTR;
typedef FUNCDESC1 = tagFUNCDESC;
typedef VARDESC = tagVARDESC;

final class tagVARDESC extends ffi.Struct {
  @MEMBERID()
  external int memid;

  external LPOLESTR lpstrSchema;

  external UnnamedUnion9 unnamed;

  external ELEMDESC1 elemdescVar;

  @WORD()
  external int wVarFlags;

  @ffi.Int32()
  external int varkind;
}

final class UnnamedUnion9 extends ffi.Union {
  @ULONG()
  external int oInst;

  external ffi.Pointer<VARIANT1> lpvarValue;
}

typedef VARIANT1 = tagVARIANT;
typedef ELEMDESC1 = tagELEMDESC;

abstract class tagVARKIND {
  static const int VAR_PERINSTANCE = 0;
  static const int VAR_STATIC = 1;
  static const int VAR_CONST = 2;
  static const int VAR_DISPATCH = 3;
}

typedef INT = ffi.Int;
typedef DartINT = int;
typedef DISPPARAMS = tagDISPPARAMS;

final class tagDISPPARAMS extends ffi.Struct {
  external ffi.Pointer<VARIANTARG1> rgvarg;

  external ffi.Pointer<DISPID> rgdispidNamedArgs;

  @UINT()
  external int cArgs;

  @UINT()
  external int cNamedArgs;
}

typedef VARIANTARG1 = VARIANT1;
typedef EXCEPINFO = tagEXCEPINFO;

final class tagEXCEPINFO extends ffi.Struct {
  @WORD()
  external int wCode;

  @WORD()
  external int wReserved;

  external BSTR bstrSource;

  external BSTR bstrDescription;

  external BSTR bstrHelpFile;

  @DWORD()
  external int dwHelpContext;

  external PVOID pvReserved;

  external ffi
      .Pointer<ffi.NativeFunction<HRESULT Function(ffi.Pointer<tagEXCEPINFO>)>>
      pfnDeferredFillIn;

  @SCODE()
  external int scode;
}

abstract class tagINVOKEKIND {
  static const int INVOKE_FUNC = 1;
  static const int INVOKE_PROPERTYGET = 2;
  static const int INVOKE_PROPERTYPUT = 4;
  static const int INVOKE_PROPERTYPUTREF = 8;
}

final class ITypeLib extends ffi.Struct {
  external ffi.Pointer<ITypeLibVtbl> lpVtbl;
}

final class ITypeLibVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeLib> This)>>
      AddRef;

  external ffi
      .Pointer<ffi.NativeFunction<ULONG Function(ffi.Pointer<ITypeLib> This)>>
      Release;

  external ffi
      .Pointer<ffi.NativeFunction<UINT Function(ffi.Pointer<ITypeLib> This)>>
      GetTypeInfoCount;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This, UINT index,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo)>> GetTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This, UINT index,
              ffi.Pointer<ffi.Int32> pTKind)>> GetTypeInfoType;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This, ffi.Pointer<GUID> guid,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTinfo)>> GetTypeInfoOfGuid;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This,
              ffi.Pointer<ffi.Pointer<TLIBATTR>> ppTLibAttr)>> GetLibAttr;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This,
              ffi.Pointer<ffi.Pointer<ITypeComp>> ppTComp)>> GetTypeComp;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeLib> This,
              INT index,
              ffi.Pointer<BSTR> pBstrName,
              ffi.Pointer<BSTR> pBstrDocString,
              ffi.Pointer<DWORD> pdwHelpContext,
              ffi.Pointer<BSTR> pBstrHelpFile)>> GetDocumentation;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<ITypeLib> This, LPOLESTR szNameBuf,
              ULONG lHashVal, ffi.Pointer<BOOL> pfName)>> IsName;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<ITypeLib> This,
              LPOLESTR szNameBuf,
              ULONG lHashVal,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTInfo,
              ffi.Pointer<MEMBERID> rgMemId,
              ffi.Pointer<USHORT> pcFound)>> FindName;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ITypeLib> This, ffi.Pointer<TLIBATTR> pTLibAttr)>>
      ReleaseTLibAttr;
}

typedef TLIBATTR = tagTLIBATTR;

final class tagTLIBATTR extends ffi.Struct {
  external GUID guid;

  @LCID()
  external int lcid;

  @ffi.Int32()
  external int syskind;

  @WORD()
  external int wMajorVerNum;

  @WORD()
  external int wMinorVerNum;

  @WORD()
  external int wLibFlags;
}

abstract class tagSYSKIND {
  static const int SYS_WIN16 = 0;
  static const int SYS_WIN32 = 1;
  static const int SYS_MAC = 2;
  static const int SYS_WIN64 = 3;
}

typedef BOOL = ffi.Int;
typedef DartBOOL = int;
typedef SAFEARRAY = tagSAFEARRAY;

final class tagSAFEARRAY extends ffi.Struct {
  @USHORT()
  external int cDims;

  @USHORT()
  external int fFeatures;

  @ULONG()
  external int cbElements;

  @ULONG()
  external int cLocks;

  external PVOID pvData;

  @ffi.Array.multi([1])
  external ffi.Array<SAFEARRAYBOUND> rgsabound;
}

typedef CHAR = ffi.Char;
typedef DartCHAR = int;
typedef DECIMAL = tagDEC;

final class tagDEC extends ffi.Struct {
  @USHORT()
  external int wReserved;

  external UnnamedUnion10 unnamed;

  @ULONG()
  external int Hi32;

  external UnnamedUnion11 unnamed1;
}

final class UnnamedUnion10 extends ffi.Union {
  external UnnamedStruct32 unnamed;

  @USHORT()
  external int signscale;
}

final class UnnamedStruct32 extends ffi.Struct {
  @BYTE()
  external int scale;

  @BYTE()
  external int sign;
}

final class UnnamedUnion11 extends ffi.Union {
  external UnnamedStruct33 unnamed;

  @ULONGLONG()
  external int Lo64;
}

final class UnnamedStruct33 extends ffi.Struct {
  @ULONG()
  external int Lo32;

  @ULONG()
  external int Mid32;
}

final class UnnamedStruct34 extends ffi.Struct {
  external PVOID pvRecord;

  external ffi.Pointer<IRecordInfo> pRecInfo;
}

final class IRecordInfo extends ffi.Struct {
  external ffi.Pointer<IRecordInfoVtbl> lpVtbl;
}

final class IRecordInfoVtbl extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IRecordInfo> This, ffi.Pointer<IID> riid,
              ffi.Pointer<ffi.Pointer<ffi.Void>> ppvObject)>> QueryInterface;

  external ffi.Pointer<
      ffi.NativeFunction<ULONG Function(ffi.Pointer<IRecordInfo> This)>> AddRef;

  external ffi.Pointer<
          ffi.NativeFunction<ULONG Function(ffi.Pointer<IRecordInfo> This)>>
      Release;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IRecordInfo> This, PVOID pvNew)>>
      RecordInit;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This, PVOID pvExisting)>> RecordClear;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IRecordInfo> This, PVOID pvExisting,
              PVOID pvNew)>> RecordCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This, ffi.Pointer<GUID> pguid)>> GetGuid;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IRecordInfo> This, ffi.Pointer<BSTR> pbstrName)>>
      GetName;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(
                  ffi.Pointer<IRecordInfo> This, ffi.Pointer<ULONG> pcbSize)>>
      GetSize;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IRecordInfo> This,
              ffi.Pointer<ffi.Pointer<ITypeInfo>> ppTypeInfo)>> GetTypeInfo;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This,
              PVOID pvData,
              LPCOLESTR szFieldName,
              ffi.Pointer<VARIANT1> pvarField)>> GetField;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This,
              PVOID pvData,
              LPCOLESTR szFieldName,
              ffi.Pointer<VARIANT1> pvarField,
              ffi.Pointer<PVOID> ppvDataCArray)>> GetFieldNoCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This,
              ULONG wFlags,
              PVOID pvData,
              LPCOLESTR szFieldName,
              ffi.Pointer<VARIANT1> pvarField)>> PutField;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This,
              ULONG wFlags,
              PVOID pvData,
              LPCOLESTR szFieldName,
              ffi.Pointer<VARIANT1> pvarField)>> PutFieldNoCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(
              ffi.Pointer<IRecordInfo> This,
              ffi.Pointer<ULONG> pcNames,
              ffi.Pointer<BSTR> rgBstrNames)>> GetFieldNames;

  external ffi.Pointer<
      ffi.NativeFunction<
          BOOL Function(ffi.Pointer<IRecordInfo> This,
              ffi.Pointer<IRecordInfo> pRecordInfo)>> IsMatchingType;

  external ffi.Pointer<
          ffi.NativeFunction<PVOID Function(ffi.Pointer<IRecordInfo> This)>>
      RecordCreate;

  external ffi.Pointer<
      ffi.NativeFunction<
          HRESULT Function(ffi.Pointer<IRecordInfo> This, PVOID pvSource,
              ffi.Pointer<PVOID> ppvDest)>> RecordCreateCopy;

  external ffi.Pointer<
          ffi.NativeFunction<
              HRESULT Function(ffi.Pointer<IRecordInfo> This, PVOID pvRecord)>>
      RecordDestroy;
}

typedef LPCOLESTR = ffi.Pointer<OLECHAR>;

abstract class tagFUNCKIND {
  static const int FUNC_VIRTUAL = 0;
  static const int FUNC_PUREVIRTUAL = 1;
  static const int FUNC_NONVIRTUAL = 2;
  static const int FUNC_STATIC = 3;
  static const int FUNC_DISPATCH = 4;
}

abstract class tagCALLCONV {
  static const int CC_FASTCALL = 0;
  static const int CC_CDECL = 1;
  static const int CC_MSCPASCAL = 2;
  static const int CC_PASCAL = 2;
  static const int CC_MACPASCAL = 3;
  static const int CC_STDCALL = 4;
  static const int CC_FPFASTCALL = 5;
  static const int CC_SYSCALL = 6;
  static const int CC_MPWCDECL = 7;
  static const int CC_MPWPASCAL = 8;
  static const int CC_MAX = 9;
}

final class sockaddr_gen extends ffi.Union {
  external sockaddr Address;

  external sockaddr_in AddressIn;

  external sockaddr_in6_old AddressIn6;
}

final class sockaddr extends ffi.Struct {
  @ADDRESS_FAMILY()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<CHAR> sa_data;
}

typedef ADDRESS_FAMILY = USHORT;

final class sockaddr_in extends ffi.Struct {
  @ADDRESS_FAMILY()
  external int sin_family;

  @USHORT()
  external int sin_port;

  external IN_ADDR sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<CHAR> sin_zero;
}

typedef IN_ADDR = in_addr;

final class in_addr extends ffi.Struct {
  external UnnamedUnion12 S_un;
}

final class UnnamedUnion12 extends ffi.Union {
  external UnnamedStruct35 S_un_b;

  external UnnamedStruct36 S_un_w;

  @ULONG()
  external int S_addr;
}

final class UnnamedStruct35 extends ffi.Struct {
  @UCHAR()
  external int s_b1;

  @UCHAR()
  external int s_b2;

  @UCHAR()
  external int s_b3;

  @UCHAR()
  external int s_b4;
}

typedef UCHAR = BYTE;

final class UnnamedStruct36 extends ffi.Struct {
  @USHORT()
  external int s_w1;

  @USHORT()
  external int s_w2;
}

final class sockaddr_in6_old extends ffi.Struct {
  @SHORT()
  external int sin6_family;

  @USHORT()
  external int sin6_port;

  @ULONG()
  external int sin6_flowinfo;

  external IN6_ADDR sin6_addr;
}

typedef IN6_ADDR = in6_addr;

final class in6_addr extends ffi.Struct {
  external UnnamedUnion13 u;
}

final class UnnamedUnion13 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<UCHAR> Byte;

  @ffi.Array.multi([8])
  external ffi.Array<USHORT> Word;
}

final class _SOCKADDR_INET extends ffi.Opaque {}

final class SCOPE_ID extends ffi.Opaque {}

final class _NET_LUID_LH extends ffi.Opaque {}

typedef DEVPROPKEY = _DEVPROPKEY;

final class _DEVPROPKEY extends ffi.Struct {
  external DEVPROPGUID fmtid;

  @DEVPROPID()
  external int pid;
}

typedef DEVPROPGUID = GUID;
typedef DEVPROPID = ULONG;

final class DOT11_BSS_ENTRY_PHY_SPECIFIC_INFO extends ffi.Union {
  @ULONG()
  external int uChCenterFrequency;

  external UnnamedStruct39 FHSS;
}

final class UnnamedStruct39 extends ffi.Struct {
  @ULONG()
  external int uHopPattern;

  @ULONG()
  external int uHopSet;

  @ULONG()
  external int uDwellTime;
}

final class _DNS_SERVER_PROPERTY_TYPES extends ffi.Union {
  external ffi.Pointer<DNS_DOH_SERVER_SETTINGS> DohSettings;
}

typedef DNS_DOH_SERVER_SETTINGS = _DNS_DOH_SERVER_SETTINGS;

final class _DNS_DOH_SERVER_SETTINGS extends ffi.Struct {
  external PWSTR Template;

  @ULONG64()
  external int Flags;
}

typedef PWSTR = ffi.Pointer<WCHAR>;
typedef ULONG64 = ffi.UnsignedLongLong;
typedef DartULONG64 = int;

/// Common Definitions
/// ==================
///
/// Common definitions for Client, Server and PubSub.
///
/// .. _attribute-id:
///
/// Attribute Id
/// ------------
/// Every node in an OPC UA information model contains attributes depending on
/// the node type. Possible attributes are as follows:
abstract class UA_AttributeId {
  static const int UA_ATTRIBUTEID_NODEID = 1;
  static const int UA_ATTRIBUTEID_NODECLASS = 2;
  static const int UA_ATTRIBUTEID_BROWSENAME = 3;
  static const int UA_ATTRIBUTEID_DISPLAYNAME = 4;
  static const int UA_ATTRIBUTEID_DESCRIPTION = 5;
  static const int UA_ATTRIBUTEID_WRITEMASK = 6;
  static const int UA_ATTRIBUTEID_USERWRITEMASK = 7;
  static const int UA_ATTRIBUTEID_ISABSTRACT = 8;
  static const int UA_ATTRIBUTEID_SYMMETRIC = 9;
  static const int UA_ATTRIBUTEID_INVERSENAME = 10;
  static const int UA_ATTRIBUTEID_CONTAINSNOLOOPS = 11;
  static const int UA_ATTRIBUTEID_EVENTNOTIFIER = 12;
  static const int UA_ATTRIBUTEID_VALUE = 13;
  static const int UA_ATTRIBUTEID_DATATYPE = 14;
  static const int UA_ATTRIBUTEID_VALUERANK = 15;
  static const int UA_ATTRIBUTEID_ARRAYDIMENSIONS = 16;
  static const int UA_ATTRIBUTEID_ACCESSLEVEL = 17;
  static const int UA_ATTRIBUTEID_USERACCESSLEVEL = 18;
  static const int UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL = 19;
  static const int UA_ATTRIBUTEID_HISTORIZING = 20;
  static const int UA_ATTRIBUTEID_EXECUTABLE = 21;
  static const int UA_ATTRIBUTEID_USEREXECUTABLE = 22;
  static const int UA_ATTRIBUTEID_DATATYPEDEFINITION = 23;
  static const int UA_ATTRIBUTEID_ROLEPERMISSIONS = 24;
  static const int UA_ATTRIBUTEID_USERROLEPERMISSIONS = 25;
  static const int UA_ATTRIBUTEID_ACCESSRESTRICTIONS = 26;
  static const int UA_ATTRIBUTEID_ACCESSLEVELEX = 27;
}

/// .. _rule-handling:
///
/// Rule Handling
/// -------------
///
/// The RuleHanding settings define how error cases that result from rules in the
/// OPC UA specification shall be handled. The rule handling can be softened,
/// e.g. to workaround misbehaving implementations or to mitigate the impact of
/// additional rules that are introduced in later versions of the OPC UA
/// specification.
abstract class UA_RuleHandling {
  static const int UA_RULEHANDLING_DEFAULT = 0;
  static const int UA_RULEHANDLING_ABORT = 1;
  static const int UA_RULEHANDLING_WARN = 2;
  static const int UA_RULEHANDLING_ACCEPT = 3;
}

/// Order
/// -----
///
/// The Order enum is used to establish an absolute ordering between elements.
abstract class UA_Order {
  static const int UA_ORDER_LESS = -1;
  static const int UA_ORDER_EQ = 0;
  static const int UA_ORDER_MORE = 1;
}

/// Connection State
/// ----------------
abstract class UA_SecureChannelState {
  static const int UA_SECURECHANNELSTATE_FRESH = 0;
  static const int UA_SECURECHANNELSTATE_HEL_SENT = 1;
  static const int UA_SECURECHANNELSTATE_HEL_RECEIVED = 2;
  static const int UA_SECURECHANNELSTATE_ACK_SENT = 3;
  static const int UA_SECURECHANNELSTATE_ACK_RECEIVED = 4;
  static const int UA_SECURECHANNELSTATE_OPN_SENT = 5;
  static const int UA_SECURECHANNELSTATE_OPEN = 6;
  static const int UA_SECURECHANNELSTATE_CLOSING = 7;
  static const int UA_SECURECHANNELSTATE_CLOSED = 8;
}

abstract class UA_SessionState {
  static const int UA_SESSIONSTATE_CLOSED = 0;
  static const int UA_SESSIONSTATE_CREATE_REQUESTED = 1;
  static const int UA_SESSIONSTATE_CREATED = 2;
  static const int UA_SESSIONSTATE_ACTIVATE_REQUESTED = 3;
  static const int UA_SESSIONSTATE_ACTIVATED = 4;
  static const int UA_SESSIONSTATE_CLOSING = 5;
}

/// Statistic counters
/// ------------------
///
/// The stack manages statistic counters for the following layers:
///
/// - Network
/// - Secure channel
/// - Session
///
/// The session layer counters are matching the counters of the
/// ServerDiagnosticsSummaryDataType that are defined in the OPC UA Part 5
/// specification. Counters of the other layers are not specified by OPC UA but
/// are harmonized with the session layer counters if possible.
final class UA_NetworkStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentConnectionCount;

  @ffi.Size()
  external int cumulatedConnectionCount;

  @ffi.Size()
  external int rejectedConnectionCount;

  @ffi.Size()
  external int connectionTimeoutCount;

  @ffi.Size()
  external int connectionAbortCount;
}

final class UA_SecureChannelStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentChannelCount;

  @ffi.Size()
  external int cumulatedChannelCount;

  @ffi.Size()
  external int rejectedChannelCount;

  @ffi.Size()
  external int channelTimeoutCount;

  @ffi.Size()
  external int channelAbortCount;

  @ffi.Size()
  external int channelPurgeCount;
}

final class UA_SessionStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentSessionCount;

  @ffi.Size()
  external int cumulatedSessionCount;

  @ffi.Size()
  external int securityRejectedSessionCount;

  @ffi.Size()
  external int rejectedSessionCount;

  @ffi.Size()
  external int sessionTimeoutCount;

  @ffi.Size()
  external int sessionAbortCount;
}

/// .. _statuscode:
///
/// StatusCode
/// ^^^^^^^^^^
/// A numeric identifier for an error or condition that is associated with a
/// value or an operation. See the section :ref:`statuscodes` for the meaning of
/// a specific code.
///
/// Each StatusCode has one of three "severity" bit-flags:
/// Good, Uncertain, Bad. An additional reason is indicated by the SubCode
/// bitfield.
///
/// - A StatusCode with severity Good means that the value is of good quality.
/// - A StatusCode with severity Uncertain means that the quality of the value is
/// uncertain for reasons indicated by the SubCode.
/// - A StatusCode with severity Bad means that the value is not usable for
/// reasons indicated by the SubCode.
typedef UA_StatusCode = ffi.Uint32;
typedef DartUA_StatusCode = int;

/// String
/// ^^^^^^
/// A sequence of Unicode characters. Strings are just an array of UA_Byte.
final class UA_String extends ffi.Struct {
  @ffi.Size()
  external int length;

  external ffi.Pointer<UA_Byte> data;
}

/// Byte
/// ^^^^
/// An integer value between 0 and 255.
typedef UA_Byte = ffi.Uint8;
typedef DartUA_Byte = int;

/// .. _datetime:
///
/// DateTime
/// ^^^^^^^^
/// An instance in time. A DateTime value is encoded as a 64-bit signed integer
/// which represents the number of 100 nanosecond intervals since January 1, 1601
/// (UTC).
///
/// The methods providing an interface to the system clock are architecture-
/// specific. Usually, they provide a UTC clock that includes leap seconds. The
/// OPC UA standard allows the use of International Atomic Time (TAI) for the
/// DateTime instead. But this is still unusual and not implemented for most
/// SDKs. Currently (2019), UTC and TAI are 37 seconds apart due to leap
/// seconds.
typedef UA_DateTime = ffi.Int64;
typedef DartUA_DateTime = int;

/// Int64
/// ^^^^^
/// An integer value between -9 223 372 036 854 775 808 and
/// 9 223 372 036 854 775 807.
typedef UA_Int64 = ffi.Int64;
typedef DartUA_Int64 = int;

final class UA_DateTimeStruct extends ffi.Struct {
  @UA_UInt16()
  external int nanoSec;

  @UA_UInt16()
  external int microSec;

  @UA_UInt16()
  external int milliSec;

  @UA_UInt16()
  external int sec;

  @UA_UInt16()
  external int min;

  @UA_UInt16()
  external int hour;

  @UA_UInt16()
  external int day;

  @UA_UInt16()
  external int month;

  @UA_Int16()
  external int year;
}

/// UInt16
/// ^^^^^^
/// An integer value between 0 and 65 535.
typedef UA_UInt16 = ffi.Uint16;
typedef DartUA_UInt16 = int;

/// Int16
/// ^^^^^
/// An integer value between -32 768 and 32 767.
typedef UA_Int16 = ffi.Int16;
typedef DartUA_Int16 = int;

/// Guid
/// ^^^^
/// A 16 byte value that can be used as a globally unique identifier.
final class UA_Guid extends ffi.Struct {
  @UA_UInt32()
  external int data1;

  @UA_UInt16()
  external int data2;

  @UA_UInt16()
  external int data3;

  @ffi.Array.multi([8])
  external ffi.Array<UA_Byte> data4;
}

/// UInt32
/// ^^^^^^
/// An integer value between 0 and 4 294 967 295.
typedef UA_UInt32 = ffi.Uint32;
typedef DartUA_UInt32 = int;

/// ByteString
/// ^^^^^^^^^^
/// A sequence of octets.
typedef UA_ByteString = UA_String;

/// .. _nodeid:
///
/// NodeId
/// ^^^^^^
/// An identifier for a node in the address space of an OPC UA Server.
abstract class UA_NodeIdType {
  static const int UA_NODEIDTYPE_NUMERIC = 0;
  static const int UA_NODEIDTYPE_STRING = 3;
  static const int UA_NODEIDTYPE_GUID = 4;
  static const int UA_NODEIDTYPE_BYTESTRING = 5;
}

final class UA_NodeId extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  @ffi.Int32()
  external int identifierType;

  external UnnamedUnion16 identifier;
}

final class UnnamedUnion16 extends ffi.Union {
  @UA_UInt32()
  external int numeric;

  external UA_String string;

  external UA_Guid guid;

  external UA_ByteString byteString;
}

/// ExpandedNodeId
/// ^^^^^^^^^^^^^^
/// A NodeId that allows the namespace URI to be specified instead of an index.
final class UA_ExpandedNodeId extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String namespaceUri;

  @UA_UInt32()
  external int serverIndex;
}

/// .. _qualifiedname:
///
/// QualifiedName
/// ^^^^^^^^^^^^^
/// A name qualified by a namespace.
final class UA_QualifiedName extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  external UA_String name;
}

/// LocalizedText
/// ^^^^^^^^^^^^^
/// Human readable text with an optional locale identifier.
final class UA_LocalizedText extends ffi.Struct {
  external UA_String locale;

  external UA_String text;
}

/// .. _numericrange:
///
/// NumericRange
/// ^^^^^^^^^^^^
///
/// NumericRanges are used to indicate subsets of a (multidimensional) array.
/// They no official data type in the OPC UA standard and are transmitted only
/// with a string encoding, such as "1:2,0:3,5". The colon separates min/max
/// index and the comma separates dimensions. A single value indicates a range
/// with a single element (min==max).
final class UA_NumericRangeDimension extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

final class UA_NumericRange extends ffi.Struct {
  @ffi.Size()
  external int dimensionsSize;

  external ffi.Pointer<UA_NumericRangeDimension> dimensions;
}

/// .. _variant:
///
/// Variant
/// ^^^^^^^
///
/// Variants may contain values of any type together with a description of the
/// content. See the section on :ref:`generic-types` on how types are described.
/// The standard mandates that variants contain built-in data types only. If the
/// value is not of a builtin type, it is wrapped into an :ref:`extensionobject`.
/// open62541 hides this wrapping transparently in the encoding layer. If the
/// data type is unknown to the receiver, the variant contains the original
/// ExtensionObject in binary or XML encoding.
///
/// Variants may contain a scalar value or an array. For details on the handling
/// of arrays, see the section on :ref:`array-handling`. Array variants can have
/// an additional dimensionality (matrix, 3-tensor, ...) defined in an array of
/// dimension lengths. The actual values are kept in an array of dimensions one.
/// For users who work with higher-dimensions arrays directly, keep in mind that
/// dimensions of higher rank are serialized first (the highest rank dimension
/// has stride 1 and elements follow each other directly). Usually it is simplest
/// to interact with higher-dimensional arrays via ``UA_NumericRange``
/// descriptions (see :ref:`array-handling`).
///
/// To differentiate between scalar / array variants, the following definition is
/// used. ``UA_Variant_isScalar`` provides simplified access to these checks.
///
/// - ``arrayLength == 0 && data == NULL``: undefined array of length -1
/// - ``arrayLength == 0 && data == UA_EMPTY_ARRAY_SENTINEL``: array of length 0
/// - ``arrayLength == 0 && data > UA_EMPTY_ARRAY_SENTINEL``: scalar value
/// - ``arrayLength > 0``: array of the given length
///
/// Variants can also be *empty*. Then, the pointer to the type description is
/// ``NULL``.
final class UA_DataType extends ffi.Opaque {}

abstract class UA_VariantStorageType {
  static const int UA_VARIANT_DATA = 0;
  static const int UA_VARIANT_DATA_NODELETE = 1;
}

final class UA_Variant extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  @ffi.Int32()
  external int storageType;

  @ffi.Size()
  external int arrayLength;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;
}

/// .. _extensionobject:
///
/// ExtensionObject
/// ^^^^^^^^^^^^^^^
///
/// ExtensionObjects may contain scalars of any data type. Even those that are
/// unknown to the receiver. See the section on :ref:`generic-types` on how types
/// are described. If the received data type is unknown, the encoded string and
/// target NodeId is stored instead of the decoded value.
abstract class UA_ExtensionObjectEncoding {
  static const int UA_EXTENSIONOBJECT_ENCODED_NOBODY = 0;
  static const int UA_EXTENSIONOBJECT_ENCODED_BYTESTRING = 1;
  static const int UA_EXTENSIONOBJECT_ENCODED_XML = 2;
  static const int UA_EXTENSIONOBJECT_DECODED = 3;
  static const int UA_EXTENSIONOBJECT_DECODED_NODELETE = 4;
}

final class UA_ExtensionObject extends ffi.Struct {
  @ffi.Int32()
  external int encoding;

  external UnnamedUnion17 content;
}

final class UnnamedUnion17 extends ffi.Union {
  external UnnamedStruct40 encoded;

  external UnnamedStruct41 decoded;
}

final class UnnamedStruct40 extends ffi.Struct {
  external UA_NodeId typeId;

  external UA_ByteString body;
}

final class UnnamedStruct41 extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  external ffi.Pointer<ffi.Void> data;
}

/// .. _datavalue:
///
/// DataValue
/// ^^^^^^^^^
/// A data value with an associated status code and timestamps.
final class UA_DataValue extends ffi.Opaque {}

/// DiagnosticInfo
/// ^^^^^^^^^^^^^^
/// A structure that contains detailed error and diagnostic information
/// associated with a StatusCode.
final class UA_DiagnosticInfo extends ffi.Opaque {}

/// .. _generic-types:
///
/// Generic Type Handling
/// ---------------------
///
/// All information about a (builtin/structured) data type is stored in a
/// ``UA_DataType``. The array ``UA_TYPES`` contains the description of all
/// standard-defined types. This type description is used for the following
/// generic operations that work on all types:
///
/// - ``void T_init(T *ptr)``: Initialize the data type. This is synonymous with
/// zeroing out the memory, i.e. ``memset(ptr, 0, sizeof(T))``.
/// - ``T* T_new()``: Allocate and return the memory for the data type. The
/// value is already initialized.
/// - ``UA_StatusCode T_copy(const T *src, T *dst)``: Copy the content of the
/// data type. Returns ``UA_STATUSCODE_GOOD`` or
/// ``UA_STATUSCODE_BADOUTOFMEMORY``.
/// - ``void T_clear(T *ptr)``: Delete the dynamically allocated content
/// of the data type and perform a ``T_init`` to reset the type.
/// - ``void T_delete(T *ptr)``: Delete the content of the data type and the
/// memory for the data type itself.
///
/// Specializations, such as ``UA_Int32_new()`` are derived from the generic
/// type operations as static inline functions.
final class UA_DataTypeMember extends ffi.Opaque {}

abstract class UA_DataTypeKind {
  static const int UA_DATATYPEKIND_BOOLEAN = 0;
  static const int UA_DATATYPEKIND_SBYTE = 1;
  static const int UA_DATATYPEKIND_BYTE = 2;
  static const int UA_DATATYPEKIND_INT16 = 3;
  static const int UA_DATATYPEKIND_UINT16 = 4;
  static const int UA_DATATYPEKIND_INT32 = 5;
  static const int UA_DATATYPEKIND_UINT32 = 6;
  static const int UA_DATATYPEKIND_INT64 = 7;
  static const int UA_DATATYPEKIND_UINT64 = 8;
  static const int UA_DATATYPEKIND_FLOAT = 9;
  static const int UA_DATATYPEKIND_DOUBLE = 10;
  static const int UA_DATATYPEKIND_STRING = 11;
  static const int UA_DATATYPEKIND_DATETIME = 12;
  static const int UA_DATATYPEKIND_GUID = 13;
  static const int UA_DATATYPEKIND_BYTESTRING = 14;
  static const int UA_DATATYPEKIND_XMLELEMENT = 15;
  static const int UA_DATATYPEKIND_NODEID = 16;
  static const int UA_DATATYPEKIND_EXPANDEDNODEID = 17;
  static const int UA_DATATYPEKIND_STATUSCODE = 18;
  static const int UA_DATATYPEKIND_QUALIFIEDNAME = 19;
  static const int UA_DATATYPEKIND_LOCALIZEDTEXT = 20;
  static const int UA_DATATYPEKIND_EXTENSIONOBJECT = 21;
  static const int UA_DATATYPEKIND_DATAVALUE = 22;
  static const int UA_DATATYPEKIND_VARIANT = 23;
  static const int UA_DATATYPEKIND_DIAGNOSTICINFO = 24;
  static const int UA_DATATYPEKIND_DECIMAL = 25;
  static const int UA_DATATYPEKIND_ENUM = 26;
  static const int UA_DATATYPEKIND_STRUCTURE = 27;
  static const int UA_DATATYPEKIND_OPTSTRUCT = 28;
  static const int UA_DATATYPEKIND_UNION = 29;
  static const int UA_DATATYPEKIND_BITFIELDCLUSTER = 30;
}

final class UA_DataTypeArray extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> next;

  @ffi.Size()
  external int typesSize;

  external ffi.Pointer<UA_DataType> types;
}

final class UA_DecodeBinaryOptions extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> customTypes;
}

/// UInt64
/// ^^^^^^
/// An integer value between 0 and 18 446 744 073 709 551 615.
typedef UA_UInt64 = ffi.Uint64;
typedef DartUA_UInt64 = int;

/// KeyValuePair
/// ^^^^^^^^^^^^
final class UA_KeyValuePair extends ffi.Struct {
  external UA_QualifiedName key;

  external UA_Variant value;
}

/// SimpleTypeDescription
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_SimpleTypeDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_NodeId baseDataType;

  @UA_Byte()
  external int builtInType;
}

/// PubSubState
/// ^^^^^^^^^^^
abstract class UA_PubSubState {
  static const int UA_PUBSUBSTATE_DISABLED = 0;
  static const int UA_PUBSUBSTATE_PAUSED = 1;
  static const int UA_PUBSUBSTATE_OPERATIONAL = 2;
  static const int UA_PUBSUBSTATE_ERROR = 3;
  static const int __UA_PUBSUBSTATE_FORCE32BIT = 2147483647;
}

/// ConfigurationVersionDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ConfigurationVersionDataType extends ffi.Struct {
  @UA_UInt32()
  external int majorVersion;

  @UA_UInt32()
  external int minorVersion;
}

/// PublishedVariableDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedVariableDataType extends ffi.Struct {
  external UA_NodeId publishedVariable;

  @UA_UInt32()
  external int attributeId;

  @UA_Double()
  external double samplingIntervalHint;

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;

  external UA_String indexRange;

  external UA_Variant substituteValue;

  @ffi.Size()
  external int metaDataPropertiesSize;

  external ffi.Pointer<UA_QualifiedName> metaDataProperties;
}

/// Double
/// ^^^^^^
/// An IEEE double precision (64 bit) floating point value.
typedef UA_Double = ffi.Double;
typedef DartUA_Double = double;

/// PublishedDataItemsDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedDataItemsDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSize;

  external ffi.Pointer<UA_PublishedVariableDataType> publishedData;
}

/// DataSetWriterDataType
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_DataSetWriterDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String dataSetName;

  @ffi.Size()
  external int dataSetWriterPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetWriterProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;
}

/// DataSetFieldContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_DataSetFieldContentMask = UA_UInt32;

/// NetworkAddressUrlDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_NetworkAddressUrlDataType extends ffi.Struct {
  external UA_String networkInterface;

  external UA_String url;
}

/// OverrideValueHandling
/// ^^^^^^^^^^^^^^^^^^^^^
abstract class UA_OverrideValueHandling {
  static const int UA_OVERRIDEVALUEHANDLING_DISABLED = 0;
  static const int UA_OVERRIDEVALUEHANDLING_LASTUSABLEVALUE = 1;
  static const int UA_OVERRIDEVALUEHANDLING_OVERRIDEVALUE = 2;
  static const int __UA_OVERRIDEVALUEHANDLING_FORCE32BIT = 2147483647;
}

/// DataSetOrderingType
/// ^^^^^^^^^^^^^^^^^^^
abstract class UA_DataSetOrderingType {
  static const int UA_DATASETORDERINGTYPE_UNDEFINED = 0;
  static const int UA_DATASETORDERINGTYPE_ASCENDINGWRITERID = 1;
  static const int UA_DATASETORDERINGTYPE_ASCENDINGWRITERIDSINGLE = 2;
  static const int __UA_DATASETORDERINGTYPE_FORCE32BIT = 2147483647;
}

/// UadpWriterGroupMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpWriterGroupMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @ffi.Int32()
  external int dataSetOrdering;

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_Double()
  external double samplingOffset;

  @ffi.Size()
  external int publishingOffsetSize;

  external ffi.Pointer<UA_Double> publishingOffset;
}

/// UadpNetworkMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_UadpNetworkMessageContentMask = UA_UInt32;

/// UadpDataSetWriterMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpDataSetWriterMessageDataType extends ffi.Struct {
  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_UInt16()
  external int configuredSize;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;
}

/// UadpDataSetMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_UadpDataSetMessageContentMask = UA_UInt32;

/// UadpDataSetReaderMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpDataSetReaderMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;

  external UA_Guid dataSetClassId;

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double receiveOffset;

  @UA_Double()
  external double processingOffset;
}

/// JsonWriterGroupMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonWriterGroupMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;
}

/// JsonNetworkMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_JsonNetworkMessageContentMask = UA_UInt32;

/// JsonDataSetWriterMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonDataSetWriterMessageDataType extends ffi.Struct {
  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

/// JsonDataSetMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_JsonDataSetMessageContentMask = UA_UInt32;

/// JsonDataSetReaderMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonDataSetReaderMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

/// DatagramConnectionTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DatagramConnectionTransportDataType extends ffi.Struct {
  external UA_ExtensionObject discoveryAddress;
}

/// DatagramWriterGroupTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DatagramWriterGroupTransportDataType extends ffi.Struct {
  @UA_Byte()
  external int messageRepeatCount;

  @UA_Double()
  external double messageRepeatDelay;
}

/// BrokerConnectionTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerConnectionTransportDataType extends ffi.Struct {
  external UA_String resourceUri;

  external UA_String authenticationProfileUri;
}

/// BrokerTransportQualityOfService
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
abstract class UA_BrokerTransportQualityOfService {
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_NOTSPECIFIED = 0;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_BESTEFFORT = 1;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_ATLEASTONCE = 2;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_ATMOSTONCE = 3;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_EXACTLYONCE = 4;
  static const int __UA_BROKERTRANSPORTQUALITYOFSERVICE_FORCE32BIT = 2147483647;
}

/// BrokerWriterGroupTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerWriterGroupTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;
}

/// BrokerDataSetWriterTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerDataSetWriterTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;

  external UA_String metaDataQueueName;

  @UA_Double()
  external double metaDataUpdateTime;
}

/// BrokerDataSetReaderTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerDataSetReaderTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;

  external UA_String metaDataQueueName;
}

/// NodeClass
/// ^^^^^^^^^
abstract class UA_NodeClass {
  static const int UA_NODECLASS_UNSPECIFIED = 0;
  static const int UA_NODECLASS_OBJECT = 1;
  static const int UA_NODECLASS_VARIABLE = 2;
  static const int UA_NODECLASS_METHOD = 4;
  static const int UA_NODECLASS_OBJECTTYPE = 8;
  static const int UA_NODECLASS_VARIABLETYPE = 16;
  static const int UA_NODECLASS_REFERENCETYPE = 32;
  static const int UA_NODECLASS_DATATYPE = 64;
  static const int UA_NODECLASS_VIEW = 128;
  static const int __UA_NODECLASS_FORCE32BIT = 2147483647;
}

/// RolePermissionType
/// ^^^^^^^^^^^^^^^^^^
final class UA_RolePermissionType extends ffi.Struct {
  external UA_NodeId roleId;

  @UA_PermissionType()
  external int permissions;
}

/// PermissionType
/// ^^^^^^^^^^^^^^
typedef UA_PermissionType = UA_UInt32;

/// StructureType
/// ^^^^^^^^^^^^^
abstract class UA_StructureType {
  static const int UA_STRUCTURETYPE_STRUCTURE = 0;
  static const int UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS = 1;
  static const int UA_STRUCTURETYPE_UNION = 2;
  static const int __UA_STRUCTURETYPE_FORCE32BIT = 2147483647;
}

/// StructureField
/// ^^^^^^^^^^^^^^
final class UA_StructureField extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  @ffi.Bool()
  external bool isOptional;
}

/// Int32
/// ^^^^^
/// An integer value between -2 147 483 648 and 2 147 483 647.
typedef UA_Int32 = ffi.Int32;
typedef DartUA_Int32 = int;

/// StructureDefinition
/// ^^^^^^^^^^^^^^^^^^^
final class UA_StructureDefinition extends ffi.Struct {
  external UA_NodeId defaultEncodingId;

  external UA_NodeId baseDataType;

  @ffi.Int32()
  external int structureType;

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_StructureField> fields;
}

/// Argument
/// ^^^^^^^^
final class UA_Argument extends ffi.Struct {
  external UA_String name;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  external UA_LocalizedText description;
}

/// EnumValueType
/// ^^^^^^^^^^^^^
final class UA_EnumValueType extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

/// EnumField
/// ^^^^^^^^^
final class UA_EnumField extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  external UA_String name;
}

/// TimeZoneDataType
/// ^^^^^^^^^^^^^^^^
final class UA_TimeZoneDataType extends ffi.Struct {
  @UA_Int16()
  external int offset;

  @ffi.Bool()
  external bool daylightSavingInOffset;
}

/// ApplicationType
/// ^^^^^^^^^^^^^^^
abstract class UA_ApplicationType {
  static const int UA_APPLICATIONTYPE_SERVER = 0;
  static const int UA_APPLICATIONTYPE_CLIENT = 1;
  static const int UA_APPLICATIONTYPE_CLIENTANDSERVER = 2;
  static const int UA_APPLICATIONTYPE_DISCOVERYSERVER = 3;
  static const int __UA_APPLICATIONTYPE_FORCE32BIT = 2147483647;
}

/// ApplicationDescription
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_ApplicationDescription extends ffi.Struct {
  external UA_String applicationUri;

  external UA_String productUri;

  external UA_LocalizedText applicationName;

  @ffi.Int32()
  external int applicationType;

  external UA_String gatewayServerUri;

  external UA_String discoveryProfileUri;

  @ffi.Size()
  external int discoveryUrlsSize;

  external ffi.Pointer<UA_String> discoveryUrls;
}

/// RequestHeader
/// ^^^^^^^^^^^^^
final class UA_RequestHeader extends ffi.Struct {
  external UA_NodeId authenticationToken;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int requestHandle;

  @UA_UInt32()
  external int returnDiagnostics;

  external UA_String auditEntryId;

  @UA_UInt32()
  external int timeoutHint;

  external UA_ExtensionObject additionalHeader;
}

/// ResponseHeader
/// ^^^^^^^^^^^^^^
final class UA_ResponseHeader extends ffi.Opaque {}

/// ServiceFault
/// ^^^^^^^^^^^^
final class UA_ServiceFault extends ffi.Opaque {}

/// FindServersRequest
/// ^^^^^^^^^^^^^^^^^^
final class UA_FindServersRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_String> serverUris;
}

/// FindServersResponse
/// ^^^^^^^^^^^^^^^^^^^
final class UA_FindServersResponse extends ffi.Opaque {}

/// MessageSecurityMode
/// ^^^^^^^^^^^^^^^^^^^
abstract class UA_MessageSecurityMode {
  static const int UA_MESSAGESECURITYMODE_INVALID = 0;
  static const int UA_MESSAGESECURITYMODE_NONE = 1;
  static const int UA_MESSAGESECURITYMODE_SIGN = 2;
  static const int UA_MESSAGESECURITYMODE_SIGNANDENCRYPT = 3;
  static const int __UA_MESSAGESECURITYMODE_FORCE32BIT = 2147483647;
}

/// UserTokenType
/// ^^^^^^^^^^^^^
abstract class UA_UserTokenType {
  static const int UA_USERTOKENTYPE_ANONYMOUS = 0;
  static const int UA_USERTOKENTYPE_USERNAME = 1;
  static const int UA_USERTOKENTYPE_CERTIFICATE = 2;
  static const int UA_USERTOKENTYPE_ISSUEDTOKEN = 3;
  static const int __UA_USERTOKENTYPE_FORCE32BIT = 2147483647;
}

/// UserTokenPolicy
/// ^^^^^^^^^^^^^^^
final class UA_UserTokenPolicy extends ffi.Struct {
  external UA_String policyId;

  @ffi.Int32()
  external int tokenType;

  external UA_String issuedTokenType;

  external UA_String issuerEndpointUrl;

  external UA_String securityPolicyUri;
}

/// EndpointDescription
/// ^^^^^^^^^^^^^^^^^^^
final class UA_EndpointDescription extends ffi.Struct {
  external UA_String endpointUrl;

  external UA_ApplicationDescription server;

  external UA_ByteString serverCertificate;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityPolicyUri;

  @ffi.Size()
  external int userIdentityTokensSize;

  external ffi.Pointer<UA_UserTokenPolicy> userIdentityTokens;

  external UA_String transportProfileUri;

  @UA_Byte()
  external int securityLevel;
}

/// GetEndpointsRequest
/// ^^^^^^^^^^^^^^^^^^^
final class UA_GetEndpointsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int profileUrisSize;

  external ffi.Pointer<UA_String> profileUris;
}

/// GetEndpointsResponse
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_GetEndpointsResponse extends ffi.Opaque {}

/// SecurityTokenRequestType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
abstract class UA_SecurityTokenRequestType {
  static const int UA_SECURITYTOKENREQUESTTYPE_ISSUE = 0;
  static const int UA_SECURITYTOKENREQUESTTYPE_RENEW = 1;
  static const int __UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT = 2147483647;
}

/// ChannelSecurityToken
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ChannelSecurityToken extends ffi.Struct {
  @UA_UInt32()
  external int channelId;

  @UA_UInt32()
  external int tokenId;

  @UA_DateTime()
  external int createdAt;

  @UA_UInt32()
  external int revisedLifetime;
}

/// OpenSecureChannelRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_OpenSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int clientProtocolVersion;

  @ffi.Int32()
  external int requestType;

  @ffi.Int32()
  external int securityMode;

  external UA_ByteString clientNonce;

  @UA_UInt32()
  external int requestedLifetime;
}

/// OpenSecureChannelResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_OpenSecureChannelResponse extends ffi.Opaque {}

/// CloseSecureChannelRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;
}

/// CloseSecureChannelResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSecureChannelResponse extends ffi.Opaque {}

/// SignedSoftwareCertificate
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SignedSoftwareCertificate extends ffi.Struct {
  external UA_ByteString certificateData;

  external UA_ByteString signature;
}

/// SignatureData
/// ^^^^^^^^^^^^^
final class UA_SignatureData extends ffi.Struct {
  external UA_String algorithm;

  external UA_ByteString signature;
}

/// CreateSessionRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ApplicationDescription clientDescription;

  external UA_String serverUri;

  external UA_String endpointUrl;

  external UA_String sessionName;

  external UA_ByteString clientNonce;

  external UA_ByteString clientCertificate;

  @UA_Double()
  external double requestedSessionTimeout;

  @UA_UInt32()
  external int maxResponseMessageSize;
}

/// CreateSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSessionResponse extends ffi.Opaque {}

/// UserIdentityToken
/// ^^^^^^^^^^^^^^^^^
final class UA_UserIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

/// AnonymousIdentityToken
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_AnonymousIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

/// UserNameIdentityToken
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_UserNameIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_String userName;

  external UA_ByteString password;

  external UA_String encryptionAlgorithm;
}

/// X509IdentityToken
/// ^^^^^^^^^^^^^^^^^
final class UA_X509IdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString certificateData;
}

/// IssuedIdentityToken
/// ^^^^^^^^^^^^^^^^^^^
final class UA_IssuedIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString tokenData;

  external UA_String encryptionAlgorithm;
}

/// ActivateSessionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_ActivateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_SignatureData clientSignature;

  @ffi.Size()
  external int clientSoftwareCertificatesSize;

  external ffi.Pointer<UA_SignedSoftwareCertificate> clientSoftwareCertificates;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_ExtensionObject userIdentityToken;

  external UA_SignatureData userTokenSignature;
}

/// ActivateSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ActivateSessionResponse extends ffi.Opaque {}

/// CloseSessionRequest
/// ^^^^^^^^^^^^^^^^^^^
final class UA_CloseSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool deleteSubscriptions;
}

/// CloseSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSessionResponse extends ffi.Opaque {}

/// NodeAttributesMask
/// ^^^^^^^^^^^^^^^^^^
abstract class UA_NodeAttributesMask {
  static const int UA_NODEATTRIBUTESMASK_NONE = 0;
  static const int UA_NODEATTRIBUTESMASK_ACCESSLEVEL = 1;
  static const int UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS = 2;
  static const int UA_NODEATTRIBUTESMASK_BROWSENAME = 4;
  static const int UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS = 8;
  static const int UA_NODEATTRIBUTESMASK_DATATYPE = 16;
  static const int UA_NODEATTRIBUTESMASK_DESCRIPTION = 32;
  static const int UA_NODEATTRIBUTESMASK_DISPLAYNAME = 64;
  static const int UA_NODEATTRIBUTESMASK_EVENTNOTIFIER = 128;
  static const int UA_NODEATTRIBUTESMASK_EXECUTABLE = 256;
  static const int UA_NODEATTRIBUTESMASK_HISTORIZING = 512;
  static const int UA_NODEATTRIBUTESMASK_INVERSENAME = 1024;
  static const int UA_NODEATTRIBUTESMASK_ISABSTRACT = 2048;
  static const int UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL = 4096;
  static const int UA_NODEATTRIBUTESMASK_NODECLASS = 8192;
  static const int UA_NODEATTRIBUTESMASK_NODEID = 16384;
  static const int UA_NODEATTRIBUTESMASK_SYMMETRIC = 32768;
  static const int UA_NODEATTRIBUTESMASK_USERACCESSLEVEL = 65536;
  static const int UA_NODEATTRIBUTESMASK_USEREXECUTABLE = 131072;
  static const int UA_NODEATTRIBUTESMASK_USERWRITEMASK = 262144;
  static const int UA_NODEATTRIBUTESMASK_VALUERANK = 524288;
  static const int UA_NODEATTRIBUTESMASK_WRITEMASK = 1048576;
  static const int UA_NODEATTRIBUTESMASK_VALUE = 2097152;
  static const int UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION = 4194304;
  static const int UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS = 8388608;
  static const int UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS = 16777216;
  static const int UA_NODEATTRIBUTESMASK_ALL = 33554431;
  static const int UA_NODEATTRIBUTESMASK_BASENODE = 26501220;
  static const int UA_NODEATTRIBUTESMASK_OBJECT = 26501348;
  static const int UA_NODEATTRIBUTESMASK_OBJECTTYPE = 26503268;
  static const int UA_NODEATTRIBUTESMASK_VARIABLE = 26571383;
  static const int UA_NODEATTRIBUTESMASK_VARIABLETYPE = 28600438;
  static const int UA_NODEATTRIBUTESMASK_METHOD = 26632548;
  static const int UA_NODEATTRIBUTESMASK_REFERENCETYPE = 26537060;
  static const int UA_NODEATTRIBUTESMASK_VIEW = 26501356;
  static const int __UA_NODEATTRIBUTESMASK_FORCE32BIT = 2147483647;
}

/// NodeAttributes
/// ^^^^^^^^^^^^^^
final class UA_NodeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;
}

/// ObjectAttributes
/// ^^^^^^^^^^^^^^^^
final class UA_ObjectAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @UA_Byte()
  external int eventNotifier;
}

/// VariableAttributes
/// ^^^^^^^^^^^^^^^^^^
final class UA_VariableAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_Byte()
  external int accessLevel;

  @UA_Byte()
  external int userAccessLevel;

  @UA_Double()
  external double minimumSamplingInterval;

  @ffi.Bool()
  external bool historizing;
}

/// MethodAttributes
/// ^^^^^^^^^^^^^^^^
final class UA_MethodAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool executable;

  @ffi.Bool()
  external bool userExecutable;
}

/// ObjectTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ObjectTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

/// VariableTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_VariableTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @ffi.Bool()
  external bool isAbstract;
}

/// ReferenceTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ReferenceTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;
}

/// DataTypeAttributes
/// ^^^^^^^^^^^^^^^^^^
final class UA_DataTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

/// ViewAttributes
/// ^^^^^^^^^^^^^^
final class UA_ViewAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool containsNoLoops;

  @UA_Byte()
  external int eventNotifier;
}

/// AddNodesItem
/// ^^^^^^^^^^^^
final class UA_AddNodesItem extends ffi.Struct {
  external UA_ExpandedNodeId parentNodeId;

  external UA_NodeId referenceTypeId;

  external UA_ExpandedNodeId requestedNewNodeId;

  external UA_QualifiedName browseName;

  @ffi.Int32()
  external int nodeClass;

  external UA_ExtensionObject nodeAttributes;

  external UA_ExpandedNodeId typeDefinition;
}

/// AddNodesResult
/// ^^^^^^^^^^^^^^
final class UA_AddNodesResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_NodeId addedNodeId;
}

/// AddNodesRequest
/// ^^^^^^^^^^^^^^^
final class UA_AddNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToAddSize;

  external ffi.Pointer<UA_AddNodesItem> nodesToAdd;
}

/// AddNodesResponse
/// ^^^^^^^^^^^^^^^^
final class UA_AddNodesResponse extends ffi.Opaque {}

/// AddReferencesItem
/// ^^^^^^^^^^^^^^^^^
final class UA_AddReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_String targetServerUri;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.Int32()
  external int targetNodeClass;
}

/// AddReferencesRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_AddReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToAddSize;

  external ffi.Pointer<UA_AddReferencesItem> referencesToAdd;
}

/// AddReferencesResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_AddReferencesResponse extends ffi.Opaque {}

/// DeleteNodesItem
/// ^^^^^^^^^^^^^^^
final class UA_DeleteNodesItem extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Bool()
  external bool deleteTargetReferences;
}

/// DeleteNodesRequest
/// ^^^^^^^^^^^^^^^^^^
final class UA_DeleteNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToDeleteSize;

  external ffi.Pointer<UA_DeleteNodesItem> nodesToDelete;
}

/// DeleteNodesResponse
/// ^^^^^^^^^^^^^^^^^^^
final class UA_DeleteNodesResponse extends ffi.Opaque {}

/// DeleteReferencesItem
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.Bool()
  external bool deleteBidirectional;
}

/// DeleteReferencesRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToDeleteSize;

  external ffi.Pointer<UA_DeleteReferencesItem> referencesToDelete;
}

/// DeleteReferencesResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesResponse extends ffi.Opaque {}

/// BrowseDirection
/// ^^^^^^^^^^^^^^^
abstract class UA_BrowseDirection {
  static const int UA_BROWSEDIRECTION_FORWARD = 0;
  static const int UA_BROWSEDIRECTION_INVERSE = 1;
  static const int UA_BROWSEDIRECTION_BOTH = 2;
  static const int UA_BROWSEDIRECTION_INVALID = 3;
  static const int __UA_BROWSEDIRECTION_FORCE32BIT = 2147483647;
}

/// ViewDescription
/// ^^^^^^^^^^^^^^^
final class UA_ViewDescription extends ffi.Struct {
  external UA_NodeId viewId;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int viewVersion;
}

/// BrowseDescription
/// ^^^^^^^^^^^^^^^^^
final class UA_BrowseDescription extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Int32()
  external int browseDirection;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool includeSubtypes;

  @UA_UInt32()
  external int nodeClassMask;

  @UA_UInt32()
  external int resultMask;
}

/// BrowseResultMask
/// ^^^^^^^^^^^^^^^^
abstract class UA_BrowseResultMask {
  static const int UA_BROWSERESULTMASK_NONE = 0;
  static const int UA_BROWSERESULTMASK_REFERENCETYPEID = 1;
  static const int UA_BROWSERESULTMASK_ISFORWARD = 2;
  static const int UA_BROWSERESULTMASK_NODECLASS = 4;
  static const int UA_BROWSERESULTMASK_BROWSENAME = 8;
  static const int UA_BROWSERESULTMASK_DISPLAYNAME = 16;
  static const int UA_BROWSERESULTMASK_TYPEDEFINITION = 32;
  static const int UA_BROWSERESULTMASK_ALL = 63;
  static const int UA_BROWSERESULTMASK_REFERENCETYPEINFO = 3;
  static const int UA_BROWSERESULTMASK_TARGETINFO = 60;
  static const int __UA_BROWSERESULTMASK_FORCE32BIT = 2147483647;
}

/// ReferenceDescription
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ReferenceDescription extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId nodeId;

  external UA_QualifiedName browseName;

  external UA_LocalizedText displayName;

  @ffi.Int32()
  external int nodeClass;

  external UA_ExpandedNodeId typeDefinition;
}

/// BrowseResult
/// ^^^^^^^^^^^^
final class UA_BrowseResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_ByteString continuationPoint;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_ReferenceDescription> references;
}

/// BrowseRequest
/// ^^^^^^^^^^^^^
final class UA_BrowseRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ViewDescription view;

  @UA_UInt32()
  external int requestedMaxReferencesPerNode;

  @ffi.Size()
  external int nodesToBrowseSize;

  external ffi.Pointer<UA_BrowseDescription> nodesToBrowse;
}

/// BrowseResponse
/// ^^^^^^^^^^^^^^
final class UA_BrowseResponse extends ffi.Opaque {}

/// BrowseNextRequest
/// ^^^^^^^^^^^^^^^^^
final class UA_BrowseNextRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool releaseContinuationPoints;

  @ffi.Size()
  external int continuationPointsSize;

  external ffi.Pointer<UA_ByteString> continuationPoints;
}

/// BrowseNextResponse
/// ^^^^^^^^^^^^^^^^^^
final class UA_BrowseNextResponse extends ffi.Opaque {}

/// RelativePathElement
/// ^^^^^^^^^^^^^^^^^^^
final class UA_RelativePathElement extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isInverse;

  @ffi.Bool()
  external bool includeSubtypes;

  external UA_QualifiedName targetName;
}

/// RelativePath
/// ^^^^^^^^^^^^
final class UA_RelativePath extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_RelativePathElement> elements;
}

/// BrowsePath
/// ^^^^^^^^^^
final class UA_BrowsePath extends ffi.Struct {
  external UA_NodeId startingNode;

  external UA_RelativePath relativePath;
}

/// BrowsePathTarget
/// ^^^^^^^^^^^^^^^^
final class UA_BrowsePathTarget extends ffi.Struct {
  external UA_ExpandedNodeId targetId;

  @UA_UInt32()
  external int remainingPathIndex;
}

/// BrowsePathResult
/// ^^^^^^^^^^^^^^^^
final class UA_BrowsePathResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int targetsSize;

  external ffi.Pointer<UA_BrowsePathTarget> targets;
}

/// TranslateBrowsePathsToNodeIdsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TranslateBrowsePathsToNodeIdsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int browsePathsSize;

  external ffi.Pointer<UA_BrowsePath> browsePaths;
}

/// TranslateBrowsePathsToNodeIdsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TranslateBrowsePathsToNodeIdsResponse extends ffi.Opaque {}

/// RegisterNodesRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_RegisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToRegisterSize;

  external ffi.Pointer<UA_NodeId> nodesToRegister;
}

/// RegisterNodesResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_RegisterNodesResponse extends ffi.Opaque {}

/// UnregisterNodesRequest
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_UnregisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToUnregisterSize;

  external ffi.Pointer<UA_NodeId> nodesToUnregister;
}

/// UnregisterNodesResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UnregisterNodesResponse extends ffi.Opaque {}

/// FilterOperator
/// ^^^^^^^^^^^^^^
abstract class UA_FilterOperator {
  static const int UA_FILTEROPERATOR_EQUALS = 0;
  static const int UA_FILTEROPERATOR_ISNULL = 1;
  static const int UA_FILTEROPERATOR_GREATERTHAN = 2;
  static const int UA_FILTEROPERATOR_LESSTHAN = 3;
  static const int UA_FILTEROPERATOR_GREATERTHANOREQUAL = 4;
  static const int UA_FILTEROPERATOR_LESSTHANOREQUAL = 5;
  static const int UA_FILTEROPERATOR_LIKE = 6;
  static const int UA_FILTEROPERATOR_NOT = 7;
  static const int UA_FILTEROPERATOR_BETWEEN = 8;
  static const int UA_FILTEROPERATOR_INLIST = 9;
  static const int UA_FILTEROPERATOR_AND = 10;
  static const int UA_FILTEROPERATOR_OR = 11;
  static const int UA_FILTEROPERATOR_CAST = 12;
  static const int UA_FILTEROPERATOR_INVIEW = 13;
  static const int UA_FILTEROPERATOR_OFTYPE = 14;
  static const int UA_FILTEROPERATOR_RELATEDTO = 15;
  static const int UA_FILTEROPERATOR_BITWISEAND = 16;
  static const int UA_FILTEROPERATOR_BITWISEOR = 17;
  static const int __UA_FILTEROPERATOR_FORCE32BIT = 2147483647;
}

/// ContentFilterElement
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterElement extends ffi.Struct {
  @ffi.Int32()
  external int filterOperator;

  @ffi.Size()
  external int filterOperandsSize;

  external ffi.Pointer<UA_ExtensionObject> filterOperands;
}

/// ContentFilter
/// ^^^^^^^^^^^^^
final class UA_ContentFilter extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_ContentFilterElement> elements;
}

/// ElementOperand
/// ^^^^^^^^^^^^^^
final class UA_ElementOperand extends ffi.Struct {
  @UA_UInt32()
  external int index;
}

/// LiteralOperand
/// ^^^^^^^^^^^^^^
final class UA_LiteralOperand extends ffi.Struct {
  external UA_Variant value;
}

/// AttributeOperand
/// ^^^^^^^^^^^^^^^^
final class UA_AttributeOperand extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String alias;

  external UA_RelativePath browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

/// SimpleAttributeOperand
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_SimpleAttributeOperand extends ffi.Struct {
  external UA_NodeId typeDefinitionId;

  @ffi.Size()
  external int browsePathSize;

  external ffi.Pointer<UA_QualifiedName> browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

/// ContentFilterElementResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterElementResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int operandStatusCodesSize;

  external ffi.Pointer<UA_StatusCode> operandStatusCodes;

  @ffi.Size()
  external int operandDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> operandDiagnosticInfos;
}

/// ContentFilterResult
/// ^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterResult extends ffi.Struct {
  @ffi.Size()
  external int elementResultsSize;

  external ffi.Pointer<UA_ContentFilterElementResult> elementResults;

  @ffi.Size()
  external int elementDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> elementDiagnosticInfos;
}

/// TimestampsToReturn
/// ^^^^^^^^^^^^^^^^^^
abstract class UA_TimestampsToReturn {
  static const int UA_TIMESTAMPSTORETURN_SOURCE = 0;
  static const int UA_TIMESTAMPSTORETURN_SERVER = 1;
  static const int UA_TIMESTAMPSTORETURN_BOTH = 2;
  static const int UA_TIMESTAMPSTORETURN_NEITHER = 3;
  static const int UA_TIMESTAMPSTORETURN_INVALID = 4;
  static const int __UA_TIMESTAMPSTORETURN_FORCE32BIT = 2147483647;
}

/// ReadValueId
/// ^^^^^^^^^^^
final class UA_ReadValueId extends ffi.Struct {
  external UA_NodeId nodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;

  external UA_QualifiedName dataEncoding;
}

/// ReadRequest
/// ^^^^^^^^^^^
final class UA_ReadRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double maxAge;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int nodesToReadSize;

  external ffi.Pointer<UA_ReadValueId> nodesToRead;
}

/// ReadResponse
/// ^^^^^^^^^^^^
final class UA_ReadResponse extends ffi.Opaque {}

/// WriteValue
/// ^^^^^^^^^^
final class UA_WriteValue extends ffi.Opaque {}

/// WriteRequest
/// ^^^^^^^^^^^^
final class UA_WriteRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToWriteSize;

  external ffi.Pointer<UA_WriteValue> nodesToWrite;
}

/// WriteResponse
/// ^^^^^^^^^^^^^
final class UA_WriteResponse extends ffi.Opaque {}

/// CallMethodRequest
/// ^^^^^^^^^^^^^^^^^
final class UA_CallMethodRequest extends ffi.Struct {
  external UA_NodeId objectId;

  external UA_NodeId methodId;

  @ffi.Size()
  external int inputArgumentsSize;

  external ffi.Pointer<UA_Variant> inputArguments;
}

/// CallMethodResult
/// ^^^^^^^^^^^^^^^^
final class UA_CallMethodResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int inputArgumentResultsSize;

  external ffi.Pointer<UA_StatusCode> inputArgumentResults;

  @ffi.Size()
  external int inputArgumentDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> inputArgumentDiagnosticInfos;

  @ffi.Size()
  external int outputArgumentsSize;

  external ffi.Pointer<UA_Variant> outputArguments;
}

/// CallRequest
/// ^^^^^^^^^^^
final class UA_CallRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int methodsToCallSize;

  external ffi.Pointer<UA_CallMethodRequest> methodsToCall;
}

/// CallResponse
/// ^^^^^^^^^^^^
final class UA_CallResponse extends ffi.Opaque {}

/// MonitoringMode
/// ^^^^^^^^^^^^^^
abstract class UA_MonitoringMode {
  static const int UA_MONITORINGMODE_DISABLED = 0;
  static const int UA_MONITORINGMODE_SAMPLING = 1;
  static const int UA_MONITORINGMODE_REPORTING = 2;
  static const int __UA_MONITORINGMODE_FORCE32BIT = 2147483647;
}

/// DataChangeTrigger
/// ^^^^^^^^^^^^^^^^^
abstract class UA_DataChangeTrigger {
  static const int UA_DATACHANGETRIGGER_STATUS = 0;
  static const int UA_DATACHANGETRIGGER_STATUSVALUE = 1;
  static const int UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP = 2;
  static const int __UA_DATACHANGETRIGGER_FORCE32BIT = 2147483647;
}

/// DeadbandType
/// ^^^^^^^^^^^^
abstract class UA_DeadbandType {
  static const int UA_DEADBANDTYPE_NONE = 0;
  static const int UA_DEADBANDTYPE_ABSOLUTE = 1;
  static const int UA_DEADBANDTYPE_PERCENT = 2;
  static const int __UA_DEADBANDTYPE_FORCE32BIT = 2147483647;
}

/// DataChangeFilter
/// ^^^^^^^^^^^^^^^^
final class UA_DataChangeFilter extends ffi.Struct {
  @ffi.Int32()
  external int trigger;

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;
}

/// EventFilter
/// ^^^^^^^^^^^
final class UA_EventFilter extends ffi.Struct {
  @ffi.Size()
  external int selectClausesSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectClauses;

  external UA_ContentFilter whereClause;
}

/// AggregateConfiguration
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_AggregateConfiguration extends ffi.Struct {
  @ffi.Bool()
  external bool useServerCapabilitiesDefaults;

  @ffi.Bool()
  external bool treatUncertainAsBad;

  @UA_Byte()
  external int percentDataBad;

  @UA_Byte()
  external int percentDataGood;

  @ffi.Bool()
  external bool useSlopedExtrapolation;
}

/// AggregateFilter
/// ^^^^^^^^^^^^^^^
final class UA_AggregateFilter extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  external UA_NodeId aggregateType;

  @UA_Double()
  external double processingInterval;

  external UA_AggregateConfiguration aggregateConfiguration;
}

/// EventFilterResult
/// ^^^^^^^^^^^^^^^^^
final class UA_EventFilterResult extends ffi.Struct {
  @ffi.Size()
  external int selectClauseResultsSize;

  external ffi.Pointer<UA_StatusCode> selectClauseResults;

  @ffi.Size()
  external int selectClauseDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> selectClauseDiagnosticInfos;

  external UA_ContentFilterResult whereClauseResult;
}

/// MonitoringParameters
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoringParameters extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @UA_Double()
  external double samplingInterval;

  external UA_ExtensionObject filter;

  @UA_UInt32()
  external int queueSize;

  @ffi.Bool()
  external bool discardOldest;
}

/// MonitoredItemCreateRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemCreateRequest extends ffi.Struct {
  external UA_ReadValueId itemToMonitor;

  @ffi.Int32()
  external int monitoringMode;

  external UA_MonitoringParameters requestedParameters;
}

/// MonitoredItemCreateResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemCreateResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_UInt32()
  external int monitoredItemId;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

/// CreateMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int itemsToCreateSize;

  external ffi.Pointer<UA_MonitoredItemCreateRequest> itemsToCreate;
}

/// CreateMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateMonitoredItemsResponse extends ffi.Opaque {}

/// MonitoredItemModifyRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemModifyRequest extends ffi.Struct {
  @UA_UInt32()
  external int monitoredItemId;

  external UA_MonitoringParameters requestedParameters;
}

/// MonitoredItemModifyResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemModifyResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

/// ModifyMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifyMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int itemsToModifySize;

  external ffi.Pointer<UA_MonitoredItemModifyRequest> itemsToModify;
}

/// ModifyMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifyMonitoredItemsResponse extends ffi.Opaque {}

/// SetMonitoringModeRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetMonitoringModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int monitoringMode;

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

/// SetMonitoringModeResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetMonitoringModeResponse extends ffi.Opaque {}

/// SetTriggeringRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_SetTriggeringRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int triggeringItemId;

  @ffi.Size()
  external int linksToAddSize;

  external ffi.Pointer<UA_UInt32> linksToAdd;

  @ffi.Size()
  external int linksToRemoveSize;

  external ffi.Pointer<UA_UInt32> linksToRemove;
}

/// SetTriggeringResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_SetTriggeringResponse extends ffi.Opaque {}

/// DeleteMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

/// DeleteMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteMonitoredItemsResponse extends ffi.Opaque {}

/// CreateSubscriptionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool publishingEnabled;

  @UA_Byte()
  external int priority;
}

/// CreateSubscriptionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSubscriptionResponse extends ffi.Opaque {}

/// ModifySubscriptionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifySubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @UA_Byte()
  external int priority;
}

/// ModifySubscriptionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifySubscriptionResponse extends ffi.Opaque {}

/// SetPublishingModeRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetPublishingModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool publishingEnabled;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

/// SetPublishingModeResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetPublishingModeResponse extends ffi.Opaque {}

/// NotificationMessage
/// ^^^^^^^^^^^^^^^^^^^
final class UA_NotificationMessage extends ffi.Struct {
  @UA_UInt32()
  external int sequenceNumber;

  @UA_DateTime()
  external int publishTime;

  @ffi.Size()
  external int notificationDataSize;

  external ffi.Pointer<UA_ExtensionObject> notificationData;
}

/// MonitoredItemNotification
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemNotification extends ffi.Opaque {}

/// EventFieldList
/// ^^^^^^^^^^^^^^
final class UA_EventFieldList extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @ffi.Size()
  external int eventFieldsSize;

  external ffi.Pointer<UA_Variant> eventFields;
}

/// StatusChangeNotification
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_StatusChangeNotification extends ffi.Opaque {}

/// SubscriptionAcknowledgement
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SubscriptionAcknowledgement extends ffi.Struct {
  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int sequenceNumber;
}

/// PublishRequest
/// ^^^^^^^^^^^^^^
final class UA_PublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionAcknowledgementsSize;

  external ffi.Pointer<UA_SubscriptionAcknowledgement>
      subscriptionAcknowledgements;
}

/// PublishResponse
/// ^^^^^^^^^^^^^^^
final class UA_PublishResponse extends ffi.Opaque {}

/// RepublishRequest
/// ^^^^^^^^^^^^^^^^
final class UA_RepublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int retransmitSequenceNumber;
}

/// RepublishResponse
/// ^^^^^^^^^^^^^^^^^
final class UA_RepublishResponse extends ffi.Opaque {}

/// TransferResult
/// ^^^^^^^^^^^^^^
final class UA_TransferResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int availableSequenceNumbersSize;

  external ffi.Pointer<UA_UInt32> availableSequenceNumbers;
}

/// TransferSubscriptionsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TransferSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;

  @ffi.Bool()
  external bool sendInitialValues;
}

/// TransferSubscriptionsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TransferSubscriptionsResponse extends ffi.Opaque {}

/// DeleteSubscriptionsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

/// DeleteSubscriptionsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteSubscriptionsResponse extends ffi.Opaque {}

/// BuildInfo
/// ^^^^^^^^^
final class UA_BuildInfo extends ffi.Struct {
  external UA_String productUri;

  external UA_String manufacturerName;

  external UA_String productName;

  external UA_String softwareVersion;

  external UA_String buildNumber;

  @UA_DateTime()
  external int buildDate;
}

/// RedundancySupport
/// ^^^^^^^^^^^^^^^^^
abstract class UA_RedundancySupport {
  static const int UA_REDUNDANCYSUPPORT_NONE = 0;
  static const int UA_REDUNDANCYSUPPORT_COLD = 1;
  static const int UA_REDUNDANCYSUPPORT_WARM = 2;
  static const int UA_REDUNDANCYSUPPORT_HOT = 3;
  static const int UA_REDUNDANCYSUPPORT_TRANSPARENT = 4;
  static const int UA_REDUNDANCYSUPPORT_HOTANDMIRRORED = 5;
  static const int __UA_REDUNDANCYSUPPORT_FORCE32BIT = 2147483647;
}

/// ServerState
/// ^^^^^^^^^^^
abstract class UA_ServerState {
  static const int UA_SERVERSTATE_RUNNING = 0;
  static const int UA_SERVERSTATE_FAILED = 1;
  static const int UA_SERVERSTATE_NOCONFIGURATION = 2;
  static const int UA_SERVERSTATE_SUSPENDED = 3;
  static const int UA_SERVERSTATE_SHUTDOWN = 4;
  static const int UA_SERVERSTATE_TEST = 5;
  static const int UA_SERVERSTATE_COMMUNICATIONFAULT = 6;
  static const int UA_SERVERSTATE_UNKNOWN = 7;
  static const int __UA_SERVERSTATE_FORCE32BIT = 2147483647;
}

/// ServerDiagnosticsSummaryDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ServerDiagnosticsSummaryDataType extends ffi.Struct {
  @UA_UInt32()
  external int serverViewCount;

  @UA_UInt32()
  external int currentSessionCount;

  @UA_UInt32()
  external int cumulatedSessionCount;

  @UA_UInt32()
  external int securityRejectedSessionCount;

  @UA_UInt32()
  external int rejectedSessionCount;

  @UA_UInt32()
  external int sessionTimeoutCount;

  @UA_UInt32()
  external int sessionAbortCount;

  @UA_UInt32()
  external int currentSubscriptionCount;

  @UA_UInt32()
  external int cumulatedSubscriptionCount;

  @UA_UInt32()
  external int publishingIntervalCount;

  @UA_UInt32()
  external int securityRejectedRequestsCount;

  @UA_UInt32()
  external int rejectedRequestsCount;
}

/// ServerStatusDataType
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ServerStatusDataType extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int currentTime;

  @ffi.Int32()
  external int state;

  external UA_BuildInfo buildInfo;

  @UA_UInt32()
  external int secondsTillShutdown;

  external UA_LocalizedText shutdownReason;
}

/// Range
/// ^^^^^
final class UA_Range extends ffi.Struct {
  @UA_Double()
  external double low;

  @UA_Double()
  external double high;
}

/// EUInformation
/// ^^^^^^^^^^^^^
final class UA_EUInformation extends ffi.Struct {
  external UA_String namespaceUri;

  @UA_Int32()
  external int unitId;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

/// AxisScaleEnumeration
/// ^^^^^^^^^^^^^^^^^^^^
abstract class UA_AxisScaleEnumeration {
  static const int UA_AXISSCALEENUMERATION_LINEAR = 0;
  static const int UA_AXISSCALEENUMERATION_LOG = 1;
  static const int UA_AXISSCALEENUMERATION_LN = 2;
  static const int __UA_AXISSCALEENUMERATION_FORCE32BIT = 2147483647;
}

/// ComplexNumberType
/// ^^^^^^^^^^^^^^^^^
final class UA_ComplexNumberType extends ffi.Struct {
  @UA_Float()
  external double real;

  @UA_Float()
  external double imaginary;
}

/// Float
/// ^^^^^
/// An IEEE single precision (32 bit) floating point value.
typedef UA_Float = ffi.Float;
typedef DartUA_Float = double;

/// DoubleComplexNumberType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DoubleComplexNumberType extends ffi.Struct {
  @UA_Double()
  external double real;

  @UA_Double()
  external double imaginary;
}

/// AxisInformation
/// ^^^^^^^^^^^^^^^
final class UA_AxisInformation extends ffi.Struct {
  external UA_EUInformation engineeringUnits;

  external UA_Range eURange;

  external UA_LocalizedText title;

  @ffi.Int32()
  external int axisScaleType;

  @ffi.Size()
  external int axisStepsSize;

  external ffi.Pointer<UA_Double> axisSteps;
}

/// XVType
/// ^^^^^^
final class UA_XVType extends ffi.Struct {
  @UA_Double()
  external double x;

  @UA_Float()
  external double value;
}

/// StructureDescription
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_StructureDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_StructureDefinition structureDefinition;
}

/// FieldMetaData
/// ^^^^^^^^^^^^^
final class UA_FieldMetaData extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  @UA_DataSetFieldFlags()
  external int fieldFlags;

  @UA_Byte()
  external int builtInType;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  external UA_Guid dataSetFieldId;

  @ffi.Size()
  external int propertiesSize;

  external ffi.Pointer<UA_KeyValuePair> properties;
}

/// DataSetFieldFlags
/// ^^^^^^^^^^^^^^^^^
typedef UA_DataSetFieldFlags = UA_UInt16;

/// PublishedEventsDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedEventsDataType extends ffi.Struct {
  external UA_NodeId eventNotifier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

/// WriterGroupDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_WriterGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_String headerLayoutUri;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetWritersSize;

  external ffi.Pointer<UA_DataSetWriterDataType> dataSetWriters;
}

/// FieldTargetDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_FieldTargetDataType extends ffi.Struct {
  external UA_Guid dataSetFieldId;

  external UA_String receiverIndexRange;

  external UA_NodeId targetNodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String writeIndexRange;

  @ffi.Int32()
  external int overrideValueHandling;

  external UA_Variant overrideValue;
}

/// SubscribedDataSetMirrorDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SubscribedDataSetMirrorDataType extends ffi.Struct {
  external UA_String parentNodeName;

  @ffi.Size()
  external int rolePermissionsSize;

  external ffi.Pointer<UA_RolePermissionType> rolePermissions;
}

/// EnumDefinition
/// ^^^^^^^^^^^^^^
final class UA_EnumDefinition extends ffi.Struct {
  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_EnumField> fields;
}

/// DataChangeNotification
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_DataChangeNotification extends ffi.Struct {
  @ffi.Size()
  external int monitoredItemsSize;

  external ffi.Pointer<UA_MonitoredItemNotification> monitoredItems;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

/// EventNotificationList
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_EventNotificationList extends ffi.Struct {
  @ffi.Size()
  external int eventsSize;

  external ffi.Pointer<UA_EventFieldList> events;
}

/// EnumDescription
/// ^^^^^^^^^^^^^^^
final class UA_EnumDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_EnumDefinition enumDefinition;

  @UA_Byte()
  external int builtInType;
}

/// UABinaryFileDataType
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_UABinaryFileDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String schemaLocation;

  @ffi.Size()
  external int fileHeaderSize;

  external ffi.Pointer<UA_KeyValuePair> fileHeader;

  external UA_Variant body;
}

/// DataSetMetaDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_DataSetMetaDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String name;

  external UA_LocalizedText description;

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_FieldMetaData> fields;

  external UA_Guid dataSetClassId;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// PublishedDataSetDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedDataSetDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Size()
  external int dataSetFolderSize;

  external ffi.Pointer<UA_String> dataSetFolder;

  external UA_DataSetMetaDataType dataSetMetaData;

  @ffi.Size()
  external int extensionFieldsSize;

  external ffi.Pointer<UA_KeyValuePair> extensionFields;

  external UA_ExtensionObject dataSetSource;
}

/// DataSetReaderDataType
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_DataSetReaderDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String headerLayoutUri;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @ffi.Size()
  external int dataSetReaderPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetReaderProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject subscribedDataSet;
}

/// TargetVariablesDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TargetVariablesDataType extends ffi.Struct {
  @ffi.Size()
  external int targetVariablesSize;

  external ffi.Pointer<UA_FieldTargetDataType> targetVariables;
}

/// ReaderGroupDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_ReaderGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetReadersSize;

  external ffi.Pointer<UA_DataSetReaderDataType> dataSetReaders;
}

/// PubSubConnectionDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PubSubConnectionDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  external UA_String transportProfileUri;

  external UA_ExtensionObject address;

  @ffi.Size()
  external int connectionPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> connectionProperties;

  external UA_ExtensionObject transportSettings;

  @ffi.Size()
  external int writerGroupsSize;

  external ffi.Pointer<UA_WriterGroupDataType> writerGroups;

  @ffi.Size()
  external int readerGroupsSize;

  external ffi.Pointer<UA_ReaderGroupDataType> readerGroups;
}

/// PubSubConfigurationDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PubSubConfigurationDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSetsSize;

  external ffi.Pointer<UA_PublishedDataSetDataType> publishedDataSets;

  @ffi.Size()
  external int connectionsSize;

  external ffi.Pointer<UA_PubSubConnectionDataType> connections;

  @ffi.Bool()
  external bool enabled;
}

/// SByte
/// ^^^^^
/// An integer value between -128 and 127.
typedef UA_SByte = ffi.Int8;
typedef DartUA_SByte = int;

/// XmlElement
/// ^^^^^^^^^^
/// An XML element.
typedef UA_XmlElement = UA_String;

/// Duration
/// ^^^^^^^^
typedef UA_Duration = UA_Double;

/// UtcTime
/// ^^^^^^^
typedef UA_UtcTime = UA_DateTime;

/// LocaleId
/// ^^^^^^^^
typedef UA_LocaleId = UA_String;

/// Forward Declarations
/// --------------------
/// Opaque pointers used by the plugins.
final class UA_Server extends ffi.Opaque {}

/// .. _server:
///
/// Server
/// ======
///
/// .. _server-configuration:
///
/// Server Configuration
/// --------------------
/// The configuration structure is passed to the server during initialization.
/// The server expects that the configuration is not modified during runtime.
/// Currently, only one server can use a configuration at a time. During
/// shutdown, the server will clean up the parts of the configuration that are
/// modified at runtime through the provided API.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a server configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. by adding a server certificate
/// 3. Instantiate a server with it
/// 4. After shutdown of the server, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ServerConfig extends ffi.Struct {
  external UA_Logger logger;

  external ffi.Pointer<ffi.Void> context;

  /// Server Description
  /// ^^^^^^^^^^^^^^^^^^
  /// The description must be internally consistent. The ApplicationUri set in
  /// the ApplicationDescription must match the URI set in the server
  /// certificate.
  external UA_BuildInfo buildInfo;

  external UA_ApplicationDescription applicationDescription;

  external UA_ByteString serverCertificate;

  /// Timeouts and Delays
  /// ^^^^^^^^^^^^^^^^^^^
  @UA_Double()
  external double shutdownDelay;

  /// Rule Handling
  /// ^^^^^^^^^^^^^
  /// Override the handling of standard-defined behavior. These settings are
  /// used to balance the following contradicting requirements:
  ///
  /// - Strict conformance with the standard (for certification).
  /// - Ensure interoperability with old/non-conforming implementations
  /// encountered in the wild.
  ///
  /// The defaults are set for compatibility with the largest number of OPC UA
  /// vendors (with log warnings activated). Cf. Postel's Law "be conservative
  /// in what you send, be liberal in what you accept".
  ///
  /// See the section :ref:`rule-handling` for the possible settings.
  @ffi.Int32()
  external int verifyRequestTimestamp;

  @ffi.Int32()
  external int allowEmptyVariables;

  /// Custom Data Types
  /// ^^^^^^^^^^^^^^^^^
  /// The following is a linked list of arrays with custom data types. All data
  /// types that are accessible from here are automatically considered for the
  /// decoding of received messages. Custom data types are not cleaned up
  /// together with the configuration. So it is possible to allocate them on
  /// ROM.
  ///
  /// See the section on :ref:`generic-types`. Examples for working with custom
  /// data types are provided in ``/examples/custom_datatype/``.
  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  /// Networking
  /// ^^^^^^^^^^
  @ffi.Size()
  external int networkLayersSize;

  external ffi.Pointer<UA_ServerNetworkLayer> networkLayers;

  external UA_String customHostname;

  /// Security and Encryption
  /// ^^^^^^^^^^^^^^^^^^^^^^^
  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  @ffi.Size()
  external int endpointsSize;

  external ffi.Pointer<UA_EndpointDescription> endpoints;

  @ffi.Bool()
  external bool securityPolicyNoneDiscoveryOnly;

  external UA_CertificateVerification certificateVerification;

  /// See the section for :ref:`access-control
  /// handling<access-control>`.
  external UA_AccessControl accessControl;

  /// Nodes and Node Lifecycle
  /// ^^^^^^^^^^^^^^^^^^^^^^^^
  /// See the section for :ref:`node lifecycle handling<node-lifecycle>`.
  external UA_Nodestore nodestore;

  external UA_GlobalNodeLifecycle nodeLifecycle;

  /// Copy the HasModellingRule reference in instances from the type
  /// definition in UA_Server_addObjectNode and UA_Server_addVariableNode.
  ///
  /// Part 3 - 6.4.4: [...] it is not required that newly created or referenced
  /// instances based on InstanceDeclarations have a ModellingRule, however, it
  /// is allowed that they have any ModellingRule independent of the
  /// ModellingRule of their InstanceDeclaration
  @ffi.Bool()
  external bool modellingRulesOnInstances;

  /// Limits
  /// ^^^^^^
  @UA_UInt16()
  external int maxSecureChannels;

  @UA_UInt32()
  external int maxSecurityTokenLifetime;

  @UA_UInt16()
  external int maxSessions;

  @UA_Double()
  external double maxSessionTimeout;

  @UA_UInt32()
  external int maxNodesPerRead;

  @UA_UInt32()
  external int maxNodesPerWrite;

  @UA_UInt32()
  external int maxNodesPerMethodCall;

  @UA_UInt32()
  external int maxNodesPerBrowse;

  @UA_UInt32()
  external int maxNodesPerRegisterNodes;

  @UA_UInt32()
  external int maxNodesPerTranslateBrowsePathsToNodeIds;

  @UA_UInt32()
  external int maxNodesPerNodeManagement;

  @UA_UInt32()
  external int maxMonitoredItemsPerCall;

  @UA_UInt32()
  external int maxReferencesPerNode;

  @UA_UInt32()
  external int maxSubscriptions;

  @UA_UInt32()
  external int maxSubscriptionsPerSession;

  external UA_DurationRange publishingIntervalLimits;

  external UA_UInt32Range lifeTimeCountLimits;

  external UA_UInt32Range keepAliveCountLimits;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool enableRetransmissionQueue;

  @UA_UInt32()
  external int maxRetransmissionQueueSize;

  @UA_UInt32()
  external int maxEventsPerNode;

  @UA_UInt32()
  external int maxMonitoredItems;

  @UA_UInt32()
  external int maxMonitoredItemsPerSubscription;

  external UA_DurationRange samplingIntervalLimits;

  external UA_UInt32Range queueSizeLimits;

  @UA_UInt32()
  external int maxPublishReqPerSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              UA_UInt32 attibuteId,
              ffi.Bool removed)>> monitoredItemRegisterCallback;

  external UA_PubSubConfiguration pubSubConfig;
}

final class UA_Logger extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> logContext,
              ffi.Int32 level,
              ffi.Int32 category,
              ffi.Pointer<ffi.Char> msg,
              va_list args)>> log;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> context)>>
      clear;
}

/// Logging Plugin API
/// ==================
///
/// Servers and clients define a logger in their configuration. The logger is a
/// plugin. A default plugin that logs to ``stdout`` is provided as an example.
/// The logger plugin is stateful and can point to custom data. So it is possible
/// to keep open file handlers in the logger context.
///
/// Every log message consists of a log level, a log category and a string
/// message content. The timestamp of the log message is created within the
/// logger.
abstract class UA_LogLevel {
  static const int UA_LOGLEVEL_TRACE = 0;
  static const int UA_LOGLEVEL_DEBUG = 1;
  static const int UA_LOGLEVEL_INFO = 2;
  static const int UA_LOGLEVEL_WARNING = 3;
  static const int UA_LOGLEVEL_ERROR = 4;
  static const int UA_LOGLEVEL_FATAL = 5;
}

abstract class UA_LogCategory {
  static const int UA_LOGCATEGORY_NETWORK = 0;
  static const int UA_LOGCATEGORY_SECURECHANNEL = 1;
  static const int UA_LOGCATEGORY_SESSION = 2;
  static const int UA_LOGCATEGORY_SERVER = 3;
  static const int UA_LOGCATEGORY_CLIENT = 4;
  static const int UA_LOGCATEGORY_USERLAND = 5;
  static const int UA_LOGCATEGORY_SECURITYPOLICY = 6;
}

typedef va_list = ffi.Pointer<ffi.Char>;

final class UA_ServerNetworkLayer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<UA_NetworkStatistics> statistics;

  external UA_String discoveryUrl;

  external UA_ConnectionConfig localConnectionConfig;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Logger> logger,
              ffi.Pointer<UA_String> customHostname)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Server> server, UA_UInt16 timeout)>> listen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Server> server)>> stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ServerNetworkLayer> nl)>> clear;
}

/// .. _networking:
///
/// Networking Plugin API
/// =====================
///
/// Connection
/// ----------
/// Client-server connections are represented by a `UA_Connection`. The
/// connection is stateful and stores partially received messages, and so on. In
/// addition, the connection contains function pointers to the underlying
/// networking implementation. An example for this is the `send` function. So the
/// connection encapsulates all the required networking functionality. This lets
/// users on embedded (or otherwise exotic) systems implement their own
/// networking plugins with a clear interface to the main open62541 library.
final class UA_ConnectionConfig extends ffi.Struct {
  @UA_UInt32()
  external int protocolVersion;

  @UA_UInt32()
  external int recvBufferSize;

  @UA_UInt32()
  external int sendBufferSize;

  @UA_UInt32()
  external int localMaxMessageSize;

  @UA_UInt32()
  external int remoteMaxMessageSize;

  @UA_UInt32()
  external int localMaxChunkCount;

  @UA_UInt32()
  external int remoteMaxChunkCount;
}

final class UA_SecurityPolicy extends ffi.Struct {
  external ffi.Pointer<ffi.Void> policyContext;

  external UA_String policyUri;

  external UA_ByteString localCertificate;

  external UA_SecurityPolicyAsymmetricModule asymmetricModule;

  external UA_SecurityPolicySymmetricModule symmetricModule;

  external UA_SecurityPolicySignatureAlgorithm certificateSigningAlgorithm;

  external UA_SecurityPolicyChannelModule channelModule;

  external ffi.Pointer<UA_Logger> logger;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> policy,
              UA_ByteString newCertificate,
              UA_ByteString newPrivateKey)>> updateCertificateAndPrivateKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_SecurityPolicy> policy)>> clear;
}

final class UA_SecurityPolicyAsymmetricModule extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> securityPolicy,
                  ffi.Pointer<UA_ByteString> certificate,
                  ffi.Pointer<UA_ByteString> thumbprint)>>
      makeCertificateThumbprint;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> securityPolicy,
                  ffi.Pointer<UA_ByteString> certificateThumbprint)>>
      compareCertificateThumbprint;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicyCryptoModule extends ffi.Struct {
  external UA_SecurityPolicySignatureAlgorithm signatureAlgorithm;

  external UA_SecurityPolicyEncryptionAlgorithm encryptionAlgorithm;
}

/// SecurityPolicy Interface Definition
/// -----------------------------------
final class UA_SecurityPolicySignatureAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> verify;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> sign;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalSignatureSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteSignatureSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteKeyLength;
}

final class UA_SecurityPolicyEncryptionAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> data)>> encrypt;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> data)>> decrypt;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteBlockSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemotePlainTextBlockSize;
}

final class UA_SecurityPolicySymmetricModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> policyContext,
              ffi.Pointer<UA_ByteString> secret,
              ffi.Pointer<UA_ByteString> seed,
              ffi.Pointer<UA_ByteString> out)>> generateKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> policyContext,
              ffi.Pointer<UA_ByteString> out)>> generateNonce;

  @ffi.Size()
  external int secureChannelNonceLength;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicyChannelModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> securityPolicy,
              ffi.Pointer<UA_ByteString> remoteCertificate,
              ffi.Pointer<ffi.Pointer<ffi.Void>> channelContext)>> newContext;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> channelContext)>>
      deleteContext;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setLocalSymEncryptingKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setLocalSymSigningKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> iv)>> setLocalSymIv;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setRemoteSymEncryptingKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setRemoteSymSigningKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> iv)>> setRemoteSymIv;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> certificate)>> compareCertificate;
}

/// Public Key Infrastructure Integration
/// =====================================
/// This file contains interface definitions for integration in a Public Key
/// Infrastructure (PKI). Currently only one plugin interface is defined.
///
/// Certificate Verification
/// ------------------------
/// This plugin verifies that the origin of the certificate is trusted. It does
/// not assign any access rights/roles to the holder of the certificate.
///
/// Usually, implementations of the certificate verification plugin provide an
/// initialization method that takes a trust-list and a revocation-list as input.
/// The lifecycle of the plugin is attached to a server or client config. The
/// ``clear`` method is called automatically when the config is destroyed.
final class UA_CertificateVerification extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> verificationContext,
              ffi.Pointer<UA_ByteString> certificate)>> verifyCertificate;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> verificationContext,
              ffi.Pointer<UA_ByteString> certificate,
              ffi.Pointer<UA_String> applicationURI)>> verifyApplicationURI;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_CertificateVerification> cv)>> clear;
}

/// .. _access-control:
///
/// Access Control Plugin API
/// =========================
/// The access control callback is used to authenticate sessions and grant access
/// rights accordingly.
///
/// The ``sessionId`` and ``sessionContext`` can be both NULL. This is the case
/// when, for example, a MonitoredItem (the underlying Subscription) is detached
/// from its Session but continues to run.
final class UA_AccessControl extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessControl> ac)>>
      clear;

  @ffi.Size()
  external int userTokenPoliciesSize;

  external ffi.Pointer<UA_UserTokenPolicy> userTokenPolicies;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_AccessControl> ac,
                  ffi.Pointer<UA_EndpointDescription> endpointDescription,
                  ffi.Pointer<UA_ByteString> secureChannelRemoteCertificate,
                  ffi.Pointer<UA_NodeId> sessionId,
                  ffi.Pointer<UA_ExtensionObject> userIdentityToken,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> sessionContext)>>
      activateSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext)>> closeSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_UInt32 Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserRightsMask;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_Byte Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserAccessLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext)>> getUserExecutable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext,
              ffi.Pointer<UA_NodeId> objectId,
              ffi.Pointer<ffi.Void> objectContext)>> getUserExecutableOnObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddNodesItem> item)>> allowAddNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddReferencesItem> item)>> allowAddReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteNodesItem> item)>> allowDeleteNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteReferencesItem> item)>> allowDeleteReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> allowBrowseNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_AccessControl> ac,
                  ffi.Pointer<UA_NodeId> oldSessionId,
                  ffi.Pointer<ffi.Void> oldSessionContext,
                  ffi.Pointer<UA_NodeId> newSessionId,
                  ffi.Pointer<ffi.Void> newSessionContext)>>
      allowTransferSubscription;
}

final class UA_Nodestore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> nsCtx)>> clear;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(
              ffi.Pointer<ffi.Void> nsCtx, ffi.Int32 nodeClass)>> newNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      deleteNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_Node> Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId)>>
      getNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      releaseNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> nsCtx,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<UA_Node>> outNode)>> getNodeCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> nsCtx,
              ffi.Pointer<UA_Node> node,
              ffi.Pointer<UA_NodeId> addedNodeId)>> insertNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      replaceNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId)>>
      removeNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_NodeId> Function(
                  ffi.Pointer<ffi.Void> nsCtx, UA_Byte refTypeIndex)>>
      getReferenceTypeId;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> nsCtx,
              UA_NodestoreVisitor visitor,
              ffi.Pointer<ffi.Void> visitorCtx)>> iterate;
}

/// Node Union
/// ----------
///
/// A union that represents any kind of node. The node head can always be used.
/// Check the NodeClass before accessing specific content.
final class UA_Node extends ffi.Opaque {}

/// Nodestore Plugin API
/// --------------------
///
/// The following definitions are used for implementing custom node storage
/// backends. **Most users will want to use the default nodestore and don't need
/// to work with the nodestore API**.
///
/// Outside of custom nodestore implementations, users should not manually edit
/// nodes. Please use the OPC UA services for that. Otherwise, all consistency
/// checks are omitted. This can crash the application eventually.
typedef UA_NodestoreVisitor
    = ffi.Pointer<ffi.NativeFunction<UA_NodestoreVisitorFunction>>;
typedef UA_NodestoreVisitorFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);
typedef DartUA_NodestoreVisitorFunction = void Function(
    ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);

/// .. _information-modelling:
///
/// Information Modelling
/// =====================
///
/// Information modelling in OPC UA combines concepts from object-orientation and
/// semantic modelling. At the core, an OPC UA information model is a graph made
/// up of
///
/// - Nodes: There are eight possible Node types (variable, object, method, ...)
/// - References: Typed and directed relations between two nodes
///
/// Every node is identified by a unique (within the server) :ref:`nodeid`.
/// Reference are triples of the form ``(source-nodeid, referencetype-nodeid,
/// target-nodeid)``. An example reference between nodes is a
/// ``hasTypeDefinition`` reference between a Variable and its VariableType. Some
/// ReferenceTypes are *hierarchic* and must not form *directed loops*. See the
/// section on :ref:`ReferenceTypes <referencetypenode>` for more details on
/// possible references and their semantics.
///
/// **Warning!!** The structures defined in this section are only relevant for
/// the developers of custom Nodestores. The interaction with the information
/// model is possible only via the OPC UA :ref:`services`. So the following
/// sections are purely informational so that users may have a clear mental
/// model of the underlying representation.
///
/// .. _node-lifecycle:
///
/// Node Lifecycle: Constructors, Destructors and Node Contexts
/// -----------------------------------------------------------
///
/// To finalize the instantiation of a node, a (user-defined) constructor
/// callback is executed. There can be both a global constructor for all nodes
/// and node-type constructor specific to the TypeDefinition of the new node
/// (attached to an ObjectTypeNode or VariableTypeNode).
///
/// In the hierarchy of ObjectTypes and VariableTypes, only the constructor of
/// the (lowest) type defined for the new node is executed. Note that every
/// Object and Variable can have only one ``isTypeOf`` reference. But type-nodes
/// can technically have several ``hasSubType`` references to implement multiple
/// inheritance. Issues of (multiple) inheritance in the constructor need to be
/// solved by the user.
///
/// When a node is destroyed, the node-type destructor is called before the
/// global destructor. So the overall node lifecycle is as follows:
///
/// 1. Global Constructor (set in the server config)
/// 2. Node-Type Constructor (for VariableType or ObjectTypes)
/// 3. (Usage-period of the Node)
/// 4. Node-Type Destructor
/// 5. Global Destructor
///
/// The constructor and destructor callbacks can be set to ``NULL`` and are not
/// used in that case. If the node-type constructor fails, the global destructor
/// will be called before removing the node. The destructors are assumed to never
/// fail.
///
/// Every node carries a user-context and a constructor-context pointer. The
/// user-context is used to attach custom data to a node. But the (user-defined)
/// constructors and destructors may replace the user-context pointer if they
/// wish to do so. The initial value for the constructor-context is ``NULL``.
/// When the ``AddNodes`` service is used over the network, the user-context
/// pointer of the new node is also initially set to ``NULL``.
///
/// Global Node Lifecycle
/// ~~~~~~~~~~~~~~~~~~~~~~
/// Global constructor and destructor callbacks used for every node type.
/// To be set in the server config.
final class UA_GlobalNodeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> destructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId)>> createOptionalChild;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId,
              ffi.Pointer<UA_NodeId> targetNodeId)>> generateChildNodeId;
}

final class UA_DurationRange extends ffi.Struct {
  @UA_Duration()
  external double min;

  @UA_Duration()
  external double max;
}

final class UA_UInt32Range extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

final class UA_PubSubConfiguration extends ffi.Struct {
  @ffi.Size()
  external int transportLayersSize;

  external ffi.Pointer<UA_PubSubTransportLayer> transportLayers;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_NodeId> Id, ffi.Int32 state,
              UA_StatusCode status)>> stateChangeCallback;
}

/// The UA_PubSubTransportLayer is used for the creation of new connections.
/// Whenever in runtime a new connection is requested, the internal PubSub
/// implementation calls the 'createPubSubChannel' function. The
/// 'transportProfileUri' contains the standard defined transport profile
/// information and is used to identify the type of connections which can be
/// created by the TransportLayer. The server config contains a list of
/// UA_PubSubTransportLayer. Take a look in the tutorial_pubsub_connection to get
/// information about the TransportLayer handling.
final class UA_PubSubTransportLayer extends ffi.Struct {
  external UA_String transportProfileUri;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_PubSubChannel> Function(
                  ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig)>>
      createPubSubChannel;
}

final class UA_PubSubChannel extends ffi.Struct {
  @UA_UInt32()
  external int publisherId;

  @ffi.Int32()
  external int state;

  external ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig;

  @SOCKET()
  external int sockfd;

  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              ffi.Pointer<UA_ByteString> buf)>> send;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<UA_ByteString> encodedBuffer,
                              ffi.Pointer<UA_ByteString> topic)>>
                  callback)>> regist;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings)>> unregist;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              UA_PubSubReceiveCallback receiveCallback,
              ffi.Pointer<ffi.Void> receiveCallbackContext,
              UA_UInt32 timeout)>> receive;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubChannel> channel)>> close;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubChannel> channel, UA_UInt16 timeout)>>
      yield1;
}

abstract class UA_PubSubChannelState {
  static const int UA_PUBSUB_CHANNEL_RDY = 0;
  static const int UA_PUBSUB_CHANNEL_PUB = 1;
  static const int UA_PUBSUB_CHANNEL_SUB = 2;
  static const int UA_PUBSUB_CHANNEL_PUB_SUB = 3;
  static const int UA_PUBSUB_CHANNEL_ERROR = 4;
  static const int UA_PUBSUB_CHANNEL_CLOSED = 5;
}

/// .. _pubsub_connection:
///
/// PubSub Connection Plugin API
/// ============================
///
/// The PubSub Connection API is the interface between concrete network
/// implementations and the internal pubsub code.
///
/// The PubSub specification enables the creation of new connections on runtime.
/// Wording: 'Connection' -> OPC UA standard 'highlevel' perspective, 'Channel'
/// -> open62541 implementation 'lowlevel' perspective. A channel can be assigned
/// with different network implementations like UDP, MQTT, AMQP. The channel
/// provides basis services like send, regist, unregist, receive, close.
final class UA_PubSubConnectionConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int publisherIdType;

  external UnnamedUnion22 publisherId;

  external UA_String transportProfileUri;

  external UA_Variant address;

  @ffi.Size()
  external int connectionPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> connectionProperties;

  external UA_Variant connectionTransportSettings;
}

abstract class UA_PublisherIdType {
  static const int UA_PUBSUB_PUBLISHERID_NUMERIC = 0;
  static const int UA_PUBSUB_PUBLISHERID_STRING = 1;
}

final class UnnamedUnion22 extends ffi.Union {
  @UA_UInt32()
  external int numeric;

  external UA_String string;
}

typedef SOCKET = UINT_PTR;
typedef UINT_PTR = ffi.UnsignedLongLong;
typedef DartUINT_PTR = int;
typedef UA_PubSubReceiveCallback
    = ffi.Pointer<ffi.NativeFunction<UA_PubSubReceiveCallbackFunction>>;
typedef UA_PubSubReceiveCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<ffi.Void> callbackContext,
    ffi.Pointer<UA_ByteString> buffer);
typedef DartUA_PubSubReceiveCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<ffi.Void> callbackContext,
    ffi.Pointer<UA_ByteString> buffer);

final class UA_Client extends ffi.Opaque {}

abstract class UA_TimerPolicy {
  static const int UA_TIMER_HANDLE_CYCLEMISS_WITH_CURRENTTIME = 0;
  static const int UA_TIMER_HANDLE_CYCLEMISS_WITH_BASETIME = 1;
}

/// amalgamated original file "/include/open62541/plugin/network.h"
final class UA_Connection extends ffi.Struct {
  @ffi.Int32()
  external int state;

  external ffi.Pointer<UA_SecureChannel> channel;

  @SOCKET()
  external int sockfd;

  @UA_DateTime()
  external int openingDate;

  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Size length, ffi.Pointer<UA_ByteString> buf)>> getSendBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> releaseSendBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> send;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> response, UA_UInt32 timeout)>> recv;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> releaseRecvBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection)>> close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection)>> free;
}

abstract class UA_ConnectionState {
  static const int UA_CONNECTIONSTATE_CLOSED = 0;
  static const int UA_CONNECTIONSTATE_OPENING = 1;
  static const int UA_CONNECTIONSTATE_ESTABLISHED = 2;
}

final class UA_SecureChannel extends ffi.Opaque {}

final class aa_entry extends ffi.Struct {
  external ffi.Pointer<aa_entry> left;

  external ffi.Pointer<aa_entry> right;

  @ffi.UnsignedInt()
  external int level;
}

final class UA_MonitoredItem extends ffi.Opaque {}

/// Node Type Lifecycle
/// ~~~~~~~~~~~~~~~~~~~
/// Constructor and destructors for specific object and variable types.
final class UA_NodeTypeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> destructor;
}

final class UA_ReferenceTypeSet extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<UA_UInt32> bits;
}

/// Node Pointer
/// ============
///
/// The "native" format for reference between nodes is the ExpandedNodeId. That
/// is, references can also point to external servers. In practice, most
/// references point to local nodes using numerical NodeIds from the
/// standard-defined namespace zero. In order to save space (and time),
/// pointer-tagging is used for compressed "NodePointer" representations.
/// Numerical NodeIds are immediately contained in the pointer. Full NodeIds and
/// ExpandedNodeIds are behind a pointer indirection. If the Nodestore supports
/// it, a NodePointer can also be an actual pointer to the target node.
///
/// Depending on the processor architecture, some numerical NodeIds don't fit
/// into an immediate encoding and are kept as pointers. ExpandedNodeIds may be
/// internally translated to "normal" NodeIds. Use the provided functions to
/// generate NodePointers that fit the assumptions for the local architecture.
final class UA_NodeHead extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Int32()
  external int nodeClass;

  external UA_QualifiedName browseName;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_NodeReferenceKind> references;

  external ffi.Pointer<ffi.Void> context;

  @ffi.Bool()
  external bool constructed;

  external ffi.Pointer<UA_MonitoredItem> monitoredItems;
}

final class UA_NodeReferenceKind extends ffi.Struct {
  external UnnamedUnion18 targets;

  @ffi.Size()
  external int targetsSize;

  @ffi.Bool()
  external bool hasRefTree;

  @UA_Byte()
  external int referenceTypeIndex;

  @ffi.Bool()
  external bool isInverse;
}

final class UnnamedUnion18 extends ffi.Union {
  external ffi.Pointer<UA_ReferenceTarget> array;

  external UnnamedStruct42 tree;
}

/// Base Node Attributes
/// --------------------
///
/// Nodes contain attributes according to their node type. The base node
/// attributes are common to all node types. In the OPC UA :ref:`services`,
/// attributes are referred to via the :ref:`nodeid` of the containing node and
/// an integer :ref:`attribute-id`.
///
/// Internally, open62541 uses ``UA_Node`` in places where the exact node type is
/// not known or not important. The ``nodeClass`` attribute is used to ensure the
/// correctness of casting from ``UA_Node`` to a specific node type.
final class UA_ReferenceTarget extends ffi.Struct {
  external UA_NodePointer targetId;

  @UA_UInt32()
  external int targetNameHash;
}

final class UA_NodePointer extends ffi.Union {
  @ffi.UintPtr()
  external int immediate;

  external ffi.Pointer<UA_NodeId> id;

  external ffi.Pointer<UA_ExpandedNodeId> expandedId;

  external ffi.Pointer<UA_NodeHead> node;
}

final class UnnamedStruct42 extends ffi.Struct {
  external ffi.Pointer<aa_entry> idTreeRoot;

  external ffi.Pointer<aa_entry> nameTreeRoot;
}

final class UA_ReferenceTargetTreeElem extends ffi.Struct {
  external UA_ReferenceTarget target;

  @UA_UInt32()
  external int targetIdHash;

  external aa_entry idTreeEntry;

  external aa_entry nameTreeEntry;
}

/// VariableNode
/// ------------
///
/// Variables store values in a :ref:`datavalue` together with
/// metadata for introspection. Most notably, the attributes data type, value
/// rank and array dimensions constrain the possible values the variable can take
/// on.
///
/// Variables come in two flavours: properties and datavariables. Properties are
/// related to a parent with a ``hasProperty`` reference and may not have child
/// nodes themselves. Datavariables may contain properties (``hasProperty``) and
/// also datavariables (``hasComponents``).
///
/// All variables are instances of some :ref:`variabletypenode` in return
/// constraining the possible data type, value rank and array dimensions
/// attributes.
///
/// Data Type
/// ~~~~~~~~~
///
/// The (scalar) data type of the variable is constrained to be of a specific
/// type or one of its children in the type hierarchy. The data type is given as
/// a NodeId pointing to a :ref:`datatypenode` in the type hierarchy. See the
/// Section :ref:`datatypenode` for more details.
///
/// If the data type attribute points to ``UInt32``, then the value attribute
/// must be of that exact type since ``UInt32`` does not have children in the
/// type hierarchy. If the data type attribute points ``Number``, then the type
/// of the value attribute may still be ``UInt32``, but also ``Float`` or
/// ``Byte``.
///
/// Consistency between the data type attribute in the variable and its
/// :ref:`VariableTypeNode` is ensured.
///
/// Value Rank
/// ~~~~~~~~~~
///
/// This attribute indicates whether the value attribute of the variable is an
/// array and how many dimensions the array has. It may have the following
/// values:
///
/// - ``n >= 1``: the value is an array with the specified number of dimensions
/// - ``n =  0``: the value is an array with one or more dimensions
/// - ``n = -1``: the value is a scalar
/// - ``n = -2``: the value can be a scalar or an array with any number of dimensions
/// - ``n = -3``: the value can be a scalar or a one dimensional array
///
/// Consistency between the value rank attribute in the variable and its
/// :ref:`variabletypenode` is ensured.
///
/// Array Dimensions
/// ~~~~~~~~~~~~~~~~
///
/// If the value rank permits the value to be a (multi-dimensional) array, the
/// exact length in each dimensions can be further constrained with this
/// attribute.
///
/// - For positive lengths, the variable value is guaranteed to be of the same
/// length in this dimension.
/// - The dimension length zero is a wildcard and the actual value may have any
/// length in this dimension.
///
/// Consistency between the array dimensions attribute in the variable and its
/// :ref:`variabletypenode` is ensured.
abstract class UA_ValueSource {
  static const int UA_VALUESOURCE_DATA = 0;
  static const int UA_VALUESOURCE_DATASOURCE = 1;
}

final class UA_ValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> onWrite;
}

final class UA_DataSource extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Bool includeSourceTimeStamp,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> write;
}

/// .. _value-callback:
///
/// Value Callback
/// ~~~~~~~~~~~~~~
/// Value Callbacks can be attached to variable and variable type nodes. If
/// not ``NULL``, they are called before reading and after writing respectively.
final class UA_ExternalValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range)>> notificationRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> userWrite;
}

abstract class UA_ValueBackendType {
  static const int UA_VALUEBACKENDTYPE_NONE = 0;
  static const int UA_VALUEBACKENDTYPE_INTERNAL = 1;
  static const int UA_VALUEBACKENDTYPE_DATA_SOURCE_CALLBACK = 2;
  static const int UA_VALUEBACKENDTYPE_EXTERNAL = 3;
}

final class UA_ValueBackend extends ffi.Opaque {}

final class UA_VariableNode extends ffi.Opaque {}

/// .. _variabletypenode:
///
/// VariableTypeNode
/// ----------------
///
/// VariableTypes are used to provide type definitions for variables.
/// VariableTypes constrain the data type, value rank and array dimensions
/// attributes of variable instances. Furthermore, instantiating from a specific
/// variable type may provide semantic information. For example, an instance from
/// ``MotorTemperatureVariableType`` is more meaningful than a float variable
/// instantiated from ``BaseDataVariable``.
final class UA_VariableTypeNode extends ffi.Opaque {}

final class UA_MethodNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool executable;

  external UA_MethodCallback method;
}

/// .. _methodnode:
///
/// MethodNode
/// ----------
///
/// Methods define callable functions and are invoked using the :ref:`Call
/// <method-services>` service. MethodNodes may have special properties (variable
/// children with a ``hasProperty`` reference) with the :ref:`qualifiedname` ``(0,
/// "InputArguments")`` and ``(0, "OutputArguments")``. The input and output
/// arguments are both described via an array of ``UA_Argument``. While the Call
/// service uses a generic array of :ref:`variant` for input and output, the
/// actual argument values are checked to match the signature of the MethodNode.
///
/// Note that the same MethodNode may be referenced from several objects (and
/// object types). For this, the NodeId of the method *and of the object
/// providing context* is part of a Call request message.
typedef UA_MethodCallback
    = ffi.Pointer<ffi.NativeFunction<UA_MethodCallbackFunction>>;
typedef UA_MethodCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    ffi.Size inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Size outputSize,
    ffi.Pointer<UA_Variant> output);
typedef DartUA_MethodCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    int outputSize,
    ffi.Pointer<UA_Variant> output);

/// ObjectNode
/// ----------
///
/// Objects are used to represent systems, system components, real-world objects
/// and software objects. Objects are instances of an :ref:`object
/// type<objecttypenode>` and may contain variables, methods and further
/// objects.
final class UA_ObjectNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;
}

/// .. _objecttypenode:
///
/// ObjectTypeNode
/// --------------
///
/// ObjectTypes provide definitions for Objects. Abstract objects cannot be
/// instantiated. See :ref:`node-lifecycle` for the use of constructor and
/// destructor callbacks.
final class UA_ObjectTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  external UA_NodeTypeLifecycle lifecycle;
}

/// .. _referencetypenode:
///
/// ReferenceTypeNode
/// -----------------
///
/// Each reference between two nodes is typed with a ReferenceType that gives
/// meaning to the relation. The OPC UA standard defines a set of ReferenceTypes
/// as a mandatory part of OPC UA information models.
///
/// - Abstract ReferenceTypes cannot be used in actual references and are only
/// used to structure the ReferenceTypes hierarchy
/// - Symmetric references have the same meaning from the perspective of the
/// source and target node
///
/// The figure below shows the hierarchy of the standard ReferenceTypes (arrows
/// indicate a ``hasSubType`` relation). Refer to Part 3 of the OPC UA
/// specification for the full semantics of each ReferenceType.
///
/// .. graphviz::
///
/// digraph tree {
///
/// node [height=0, shape=box, fillcolor="#E5E5E5", concentrate=true]
///
/// references [label="References\n(Abstract, Symmetric)"]
/// hierarchical_references [label="HierarchicalReferences\n(Abstract)"]
/// references -> hierarchical_references
///
/// nonhierarchical_references [label="NonHierarchicalReferences\n(Abstract, Symmetric)"]
/// references -> nonhierarchical_references
///
/// haschild [label="HasChild\n(Abstract)"]
/// hierarchical_references -> haschild
///
/// aggregates [label="Aggregates\n(Abstract)"]
/// haschild -> aggregates
///
/// organizes [label="Organizes"]
/// hierarchical_references -> organizes
///
/// hascomponent [label="HasComponent"]
/// aggregates -> hascomponent
///
/// hasorderedcomponent [label="HasOrderedComponent"]
/// hascomponent -> hasorderedcomponent
///
/// hasproperty [label="HasProperty"]
/// aggregates -> hasproperty
///
/// hassubtype [label="HasSubtype"]
/// haschild -> hassubtype
///
/// hasmodellingrule [label="HasModellingRule"]
/// nonhierarchical_references -> hasmodellingrule
///
/// hastypedefinition [label="HasTypeDefinition"]
/// nonhierarchical_references -> hastypedefinition
///
/// hasencoding [label="HasEncoding"]
/// nonhierarchical_references -> hasencoding
///
/// hasdescription [label="HasDescription"]
/// nonhierarchical_references -> hasdescription
///
/// haseventsource [label="HasEventSource"]
/// hierarchical_references -> haseventsource
///
/// hasnotifier [label="HasNotifier"]
/// hierarchical_references -> hasnotifier
///
/// generatesevent [label="GeneratesEvent"]
/// nonhierarchical_references -> generatesevent
///
/// alwaysgeneratesevent [label="AlwaysGeneratesEvent"]
/// generatesevent -> alwaysgeneratesevent
///
/// {rank=same hierarchical_references nonhierarchical_references}
/// {rank=same generatesevent haseventsource hasmodellingrule
/// hasencoding hassubtype}
/// {rank=same alwaysgeneratesevent hasproperty}
///
/// }
///
/// The ReferenceType hierarchy can be extended with user-defined ReferenceTypes.
/// Many Companion Specifications for OPC UA define new ReferenceTypes to be used
/// in their domain of interest.
///
/// For the following example of custom ReferenceTypes, we attempt to model the
/// structure of a technical system. For this, we introduce two custom
/// ReferenceTypes. First, the hierarchical ``contains`` ReferenceType indicates
/// that a system (represented by an OPC UA object) contains a component (or
/// subsystem). This gives rise to a tree-structure of containment relations. For
/// example, the motor (object) is contained in the car and the crankshaft is
/// contained in the motor. Second, the symmetric ``connectedTo`` ReferenceType
/// indicates that two components are connected. For example, the motor's
/// crankshaft is connected to the gear box. Connections are independent of the
/// containment hierarchy and can induce a general graph-structure. Further
/// subtypes of ``connectedTo`` could be used to differentiate between physical,
/// electrical and information related connections. A client can then learn the
/// layout of a (physical) system represented in an OPC UA information model
/// based on a common understanding of just two custom reference types.
final class UA_ReferenceTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;

  @UA_Byte()
  external int referenceTypeIndex;

  external UA_ReferenceTypeSet subTypes;
}

/// .. _datatypenode:
///
/// DataTypeNode
/// ------------
///
/// DataTypes represent simple and structured data types. DataTypes may contain
/// arrays. But they always describe the structure of a single instance. In
/// open62541, DataTypeNodes in the information model hierarchy are matched to
/// ``UA_DataType`` type descriptions for :ref:`generic-types` via their NodeId.
///
/// Abstract DataTypes (e.g. ``Number``) cannot be the type of actual values.
/// They are used to constrain values to possible child DataTypes (e.g.
/// ``UInt32``).
final class UA_DataTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;
}

/// ViewNode
/// --------
///
/// Each View defines a subset of the Nodes in the AddressSpace. Views can be
/// used when browsing an information model to focus on a subset of nodes and
/// references only. ViewNodes can be created and be interacted with. But their
/// use in the :ref:`Browse<view-services>` service is currently unsupported in
/// open62541.
final class UA_ViewNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;

  @ffi.Bool()
  external bool containsNoLoops;
}

/// .. _pubsub:
///
/// PubSub
/// ======
///
/// In PubSub the participating OPC UA Applications take their roles as
/// Publishers and Subscribers. Publishers are the sources of data, while
/// Subscribers consume that data. Communication in PubSub is message-based.
/// Publishers send messages to a Message Oriented Middleware, without knowledge
/// of what, if any, Subscribers there may be. Similarly, Subscribers express
/// interest in specific types of data, and process messages that contain this
/// data, without knowledge of what Publishers there are.
///
/// Message Oriented Middleware is software or hardware infrastructure that
/// supports sending and receiving messages between distributed systems. OPC UA
/// PubSub supports two different Message Oriented Middleware variants, namely
/// the broker-less form and broker-based form. A broker-less form is where the
/// Message Oriented Middleware is the network infrastructure that is able to
/// route datagram-based messages. Subscribers and Publishers use datagram
/// protocols like UDP. In a broker-based form, the core component of the Message
/// Oriented Middleware is a message Broker. Subscribers and Publishers use
/// standard messaging protocols like AMQP or MQTT to communicate with the
/// Broker.
///
/// This makes PubSub suitable for applications where location independence
/// and/or scalability are required.
///
/// The Publish/Subscribe (PubSub) extension for OPC UA enables fast and
/// efficient 1:m communication. The PubSub extension is protocol agnostic and
/// can be used with broker based protocols like MQTT and AMQP or brokerless
/// implementations like UDP-Multicasting.
///
/// The PubSub API uses the following scheme:
///
/// 1. Create a configuration for the needed PubSub element.
///
/// 2. Call the add[element] function and pass in the configuration.
///
/// 3. The add[element] function returns the unique nodeId of the internally created element.
///
/// Take a look on the PubSub Tutorials for more details about the API usage::
///
/// +-----------+
/// | UA_Server |
/// +-----------+
/// |    |
/// |    |
/// |    |
/// |    |  +----------------------+
/// |    +--> UA_PubSubConnection  |  UA_Server_addPubSubConnection
/// |       +----------------------+
/// |        |    |
/// |        |    |    +----------------+
/// |        |    +----> UA_WriterGroup |  UA_PubSubConnection_addWriterGroup
/// |        |         +----------------+
/// |        |              |
/// |        |              |    +------------------+
/// |        |              +----> UA_DataSetWriter |  UA_WriterGroup_addDataSetWriter     +-+
/// |        |                   +------------------+                                        |
/// |        |                                                                               |
/// |        |         +----------------+                                                    | r
/// |        +---------> UA_ReaderGroup |    UA_PubSubConnection_addReaderGroup              | e
/// |                  +----------------+                                                    | f
/// |                       |                                                                |
/// |                       |    +------------------+                                        |
/// |                       +----> UA_DataSetReader |  UA_ReaderGroup_addDataSetReader       |
/// |                            +------------------+                                        |
/// |                                 |                                                      |
/// |                                 |    +----------------------+                          |
/// |                                 +----> UA_SubscribedDataSet |                          |
/// |                                      +----------------------+                          |
/// |                                           |                                            |
/// |                                           |    +----------------------------+          |
/// |                                           +----> UA_TargetVariablesDataType |          |
/// |                                           |    +----------------------------+          |
/// |                                           |                                            |
/// |                                           |    +------------------------------------+  |
/// |                                           +----> UA_SubscribedDataSetMirrorDataType |  |
/// |                                                +------------------------------------+  |
/// |                                                                                        |
/// |       +---------------------------+                                                    |
/// +-------> UA_PubSubPublishedDataSet |  UA_Server_addPublishedDataSet                   <-+
/// +---------------------------+
/// |
/// |    +-----------------+
/// +----> UA_DataSetField |  UA_PublishedDataSet_addDataSetField
/// +-----------------+
///
/// PubSub Information Model Representation
/// ---------------------------------------
/// .. _pubsub_informationmodel:
///
/// The complete PubSub configuration is available inside the information model.
/// The entry point is the node 'PublishSubscribe', located under the Server
/// node.
/// The standard defines for PubSub no new Service set. The configuration can
/// optionally be done over methods inside the information model.
/// The information model representation of the current PubSub configuration is
/// generated automatically. This feature can be enabled/disabled by changing the
/// UA_ENABLE_PUBSUB_INFORMATIONMODEL option.
///
/// Connections
/// -----------
/// The PubSub connections are the abstraction between the concrete transport protocol
/// and the PubSub functionality. It is possible to create multiple connections with
/// different transport protocols at runtime.
///
/// Take a look on the PubSub Tutorials for mor details about the API usage.
abstract class UA_PubSubComponentEnumType {
  static const int UA_PUBSUB_COMPONENT_CONNECTION = 0;
  static const int UA_PUBSUB_COMPONENT_WRITERGROUP = 1;
  static const int UA_PUBSUB_COMPONENT_DATASETWRITER = 2;
  static const int UA_PUBSUB_COMPONENT_READERGROUP = 3;
  static const int UA_PUBSUB_COMPONENT_DATASETREADER = 4;
}

/// PublishedDataSets
/// -----------------
/// The PublishedDataSets (PDS) are containers for the published information. The
/// PDS contain the published variables and meta information. The metadata is
/// commonly autogenerated or given as constant argument as part of the template
/// functions. The template functions are standard defined and intended for
/// configuration tools. You should normally create an empty PDS and call the
/// functions to add new fields.
abstract class UA_PublishedDataSetType {
  static const int UA_PUBSUB_DATASET_PUBLISHEDITEMS = 0;
  static const int UA_PUBSUB_DATASET_PUBLISHEDEVENTS = 1;
  static const int UA_PUBSUB_DATASET_PUBLISHEDITEMS_TEMPLATE = 2;
  static const int UA_PUBSUB_DATASET_PUBLISHEDEVENTS_TEMPLATE = 3;
}

final class UA_PublishedDataItemsTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  @ffi.Size()
  external int variablesToAddSize;

  external ffi.Pointer<UA_PublishedVariableDataType> variablesToAdd;
}

final class UA_PublishedEventConfig extends ffi.Struct {
  external UA_NodeId eventNotfier;

  external UA_ContentFilter filter;
}

final class UA_PublishedEventTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  external UA_NodeId eventNotfier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

final class UA_PublishedDataSetConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Int32()
  external int publishedDataSetType;

  external UnnamedUnion23 config;
}

final class UnnamedUnion23 extends ffi.Union {
  external UA_PublishedDataItemsTemplateConfig itemsTemplate;

  external UA_PublishedEventConfig event;

  external UA_PublishedEventTemplateConfig eventTemplate;
}

final class UA_AddPublishedDataSetResult extends ffi.Struct {
  @UA_StatusCode()
  external int addResult;

  @ffi.Size()
  external int fieldAddResultsSize;

  external ffi.Pointer<UA_StatusCode> fieldAddResults;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// DataSetFields
/// -------------
/// The description of published variables is named DataSetField. Each
/// DataSetField contains the selection of one information model node. The
/// DataSetField has additional parameters for the publishing, sampling and error
/// handling process.
final class UA_DataSetVariableConfig extends ffi.Struct {
  external UA_ConfigurationVersionDataType configurationVersion;

  external UA_String fieldNameAlias;

  @ffi.Bool()
  external bool promotedField;

  external UA_PublishedVariableDataType publishParameters;

  external UnnamedStruct47 rtValueSource;
}

final class UnnamedStruct47 extends ffi.Struct {
  @ffi.Bool()
  external bool rtFieldSourceEnabled;

  @ffi.Bool()
  external bool rtInformationModelNode;

  external ffi.Pointer<ffi.Pointer<UA_DataValue>> staticValueSource;
}

abstract class UA_DataSetFieldType {
  static const int UA_PUBSUB_DATASETFIELD_VARIABLE = 0;
  static const int UA_PUBSUB_DATASETFIELD_EVENT = 1;
}

final class UA_DataSetFieldConfig extends ffi.Struct {
  @ffi.Int32()
  external int dataSetFieldType;

  external UnnamedUnion24 field;
}

final class UnnamedUnion24 extends ffi.Union {
  external UA_DataSetVariableConfig variable;
}

final class UA_DataSetFieldResult extends ffi.Struct {
  @UA_StatusCode()
  external int result;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// Custom Callback Implementation
/// ------------------------------
/// The user can use his own callback implementation for publishing
/// and subscribing. The user must take care of the callback to call for
/// every publishing or subscibing interval
final class UA_PubSub_CallbackLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId identifier,
              UA_ServerCallback callback,
              ffi.Pointer<ffi.Void> data,
              UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime,
              ffi.Int32 timerPolicy,
              ffi.Pointer<UA_UInt64> callbackId)>> addCustomCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId identifier,
              UA_UInt64 callbackId,
              UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime,
              ffi.Int32 timerPolicy)>> changeCustomCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server> server, UA_NodeId identifier,
              UA_UInt64 callbackId)>> removeCustomCallback;
}

typedef UA_ServerCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ServerCallbackFunction>>;
typedef UA_ServerCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);
typedef DartUA_ServerCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);

/// WriterGroup
/// -----------
/// All WriterGroups are created within a PubSubConnection and automatically
/// deleted if the connection is removed. The WriterGroup is primary used as
/// container for :ref:`dsw` and network message settings. The WriterGroup can be
/// imagined as producer of the network messages. The creation of network
/// messages is controlled by parameters like the publish interval, which is e.g.
/// contained in the WriterGroup.
abstract class UA_PubSubEncodingType {
  static const int UA_PUBSUB_ENCODING_BINARY = 0;
  static const int UA_PUBSUB_ENCODING_JSON = 1;
  static const int UA_PUBSUB_ENCODING_UADP = 2;
}

/// WriterGroup
/// -----------
/// The message publishing can be configured for realtime requirements. The RT-levels
/// go along with different requirements. The below listed levels can be configured:
///
/// UA_PUBSUB_RT_NONE -
/// ---> Description: Default "none-RT" Mode
/// ---> Requirements: -
/// ---> Restrictions: -
/// UA_PUBSUB_RT_DIRECT_VALUE_ACCESS (Preview - not implemented)
/// ---> Description: Normally, the latest value for each DataSetField is read out of the information model. Within this RT-mode, the
/// value source of each field configured as static pointer to an DataValue. The publish cycle won't use call the server read function.
/// ---> Requirements: All fields must be configured with a 'staticValueSource'.
/// ---> Restrictions: -
/// UA_PUBSUB_RT_FIXED_LENGTH (Preview - not implemented)
/// ---> Description: All DataSetFields have a known, non-changing length. The server will pre-generate some
/// buffers and use only memcopy operations to generate requested PubSub packages.
/// ---> Requirements: DataSetFields with variable size cannot be used within this mode.
/// ---> Restrictions: The configuration must be frozen and changes are not allowed while the WriterGroup is 'Operational'.
/// UA_PUBSUB_RT_DETERMINISTIC (Preview - not implemented)
/// ---> Description: -
/// ---> Requirements: -
/// ---> Restrictions: -
///
/// WARNING! For hard real time requirements the underlying system must be rt-capable.
abstract class UA_PubSubRTLevel {
  static const int UA_PUBSUB_RT_NONE = 0;
  static const int UA_PUBSUB_RT_DIRECT_VALUE_ACCESS = 1;
  static const int UA_PUBSUB_RT_FIXED_SIZE = 2;
  static const int UA_PUBSUB_RT_DETERMINISTIC = 4;
}

final class UA_WriterGroupConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Duration()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @ffi.Int32()
  external int encodingMimeType;

  external UA_PubSub_CallbackLifecycle pubsubManagerCallback;

  @UA_UInt16()
  external int maxEncapsulatedDataSetMessageCount;

  @ffi.Int32()
  external int rtLevel;

  @ffi.Int32()
  external int securityMode;
}

/// .. _dsw:
///
/// DataSetWriter
/// -------------
/// The DataSetWriters are the glue between the WriterGroups and the
/// PublishedDataSets. The DataSetWriter contain configuration parameters and
/// flags which influence the creation of DataSet messages. These messages are
/// encapsulated inside the network message. The DataSetWriter must be linked
/// with an existing PublishedDataSet and be contained within a WriterGroup.
final class UA_DataSetWriterConfig extends ffi.Struct {
  external UA_String name;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  external UA_String dataSetName;

  @ffi.Size()
  external int dataSetWriterPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetWriterProperties;
}

/// SubscribedDataSet
/// -----------------
/// SubscribedDataSet describes the processing of the received DataSet.
/// SubscribedDataSet defines which field in the DataSet is mapped to which
/// Variable in the OPC UA Application. SubscribedDataSet has two sub-types
/// called the TargetVariablesType and SubscribedDataSetMirrorType.
/// SubscribedDataSetMirrorType is currently not supported. SubscribedDataSet is
/// set to TargetVariablesType and then the list of target Variables are created
/// in the Subscriber AddressSpace. TargetVariables are a list of variables that
/// are to be added in the Subscriber AddressSpace. It defines a list of Variable
/// mappings between received DataSet fields and added Variables in the
/// Subscriber AddressSpace.
abstract class UA_SubscribedDataSetEnumType {
  static const int UA_PUBSUB_SDS_TARGET = 0;
  static const int UA_PUBSUB_SDS_MIRROR = 1;
}

final class UA_FieldTargetVariable extends ffi.Struct {
  external UA_FieldTargetDataType targetVariable;

  external ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue;

  external ffi.Pointer<ffi.Void> targetVariableContext;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_NodeId> readerIdentifier,
                  ffi.Pointer<UA_NodeId> readerGroupIdentifier,
                  ffi.Pointer<UA_NodeId> targetVariableIdentifier,
                  ffi.Pointer<ffi.Void> targetVariableContext,
                  ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue)>>
      beforeWrite;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_NodeId> readerIdentifier,
                  ffi.Pointer<UA_NodeId> readerGroupIdentifier,
                  ffi.Pointer<UA_NodeId> targetVariableIdentifier,
                  ffi.Pointer<ffi.Void> targetVariableContext,
                  ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue)>>
      afterWrite;
}

final class UA_TargetVariables extends ffi.Struct {
  @ffi.Size()
  external int targetVariablesSize;

  external ffi.Pointer<UA_FieldTargetVariable> targetVariables;
}

/// DataSetReader
/// -------------
/// DataSetReader can receive NetworkMessages with the DataSetMessage
/// of interest sent by the Publisher. DataSetReaders represent
/// the configuration necessary to receive and process DataSetMessages
/// on the Subscriber side. DataSetReader must be linked with a
/// SubscribedDataSet and be contained within a ReaderGroup.
final class UA_PubSubSecurityParameters extends ffi.Struct {
  @UA_Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int keyServersSize;

  external ffi.Pointer<UA_Int32> keyServers;
}

abstract class UA_PubSubRtEncoding {
  static const int UA_PUBSUB_RT_UNKNOWN = 0;
  static const int UA_PUBSUB_RT_VARIANT = 1;
  static const int UA_PUBSUB_RT_DATA_VALUE = 2;
  static const int UA_PUBSUB_RT_RAW = 4;
}

final class UA_DataSetReaderConfig extends ffi.Struct {
  external UA_String name;

  external UA_Variant publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  external UA_PubSubSecurityParameters securityParameters;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  @ffi.Int32()
  external int subscribedDataSetType;

  external UnnamedUnion25 subscribedDataSet;

  @ffi.Int32()
  external int expectedEncoding;
}

final class UnnamedUnion25 extends ffi.Union {
  external UA_TargetVariables subscribedDataSetTarget;
}

/// ReaderGroup
/// -----------
///
/// ReaderGroup is used to group a list of DataSetReaders. All ReaderGroups are
/// created within a PubSubConnection and automatically deleted if the connection
/// is removed. All network message related filters are only available in the
/// DataSetReader.
///
/// The RT-levels go along with different requirements. The below listed levels
/// can be configured for a ReaderGroup.
///
/// - UA_PUBSUB_RT_NONE: RT applied to this level
/// - PUBSUB_CONFIG_FASTPATH_FIXED_OFFSETS: Extends PubSub RT functionality and
/// implements fast path message decoding in the Subscriber. Uses a buffered
/// network message and only decodes the necessary offsets stored in an offset
/// buffer.
final class UA_ReaderGroupConfig extends ffi.Struct {
  external UA_String name;

  external UA_PubSubSecurityParameters securityParameters;

  external UA_PubSub_CallbackLifecycle pubsubManagerCallback;

  @UA_Duration()
  external double subscribingInterval;

  @ffi.Bool()
  external bool enableBlockingSocket;

  @UA_UInt32()
  external int timeout;

  @ffi.Int32()
  external int rtLevel;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @ffi.Int32()
  external int securityMode;
}

typedef UA_NodeIteratorCallback
    = ffi.Pointer<ffi.NativeFunction<UA_NodeIteratorCallbackFunction>>;
typedef UA_NodeIteratorCallbackFunction = UA_StatusCode Function(
    UA_NodeId childId,
    ffi.Bool isInverse,
    UA_NodeId referenceTypeId,
    ffi.Pointer<ffi.Void> handle);
typedef DartUA_NodeIteratorCallbackFunction = DartUA_StatusCode Function(
    UA_NodeId childId,
    bool isInverse,
    UA_NodeId referenceTypeId,
    ffi.Pointer<ffi.Void> handle);
typedef UA_Server_DataChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Server_DataChangeNotificationCallbackFunction>>;
typedef UA_Server_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server,
    UA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    UA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Server_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server,
    DartUA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    DartUA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);

/// Statistics
/// ----------
///
/// Statistic counters keeping track of the current state of the stack. Counters
/// are structured per OPC UA communication layer.
final class UA_ServerStatistics extends ffi.Struct {
  external UA_NetworkStatistics ns;

  external UA_SecureChannelStatistics scs;

  external UA_SessionStatistics ss;
}

/// .. _client:
///
/// Client
/// ======
///
/// The client implementation allows remote access to all OPC UA services. For
/// convenience, some functionality has been wrapped in :ref:`high-level
/// abstractions <client-highlevel>`.
///
/// **However**: At this time, the client does not yet contain its own thread or
/// event-driven main-loop, meaning that the client will not perform any actions
/// automatically in the background. This is especially relevant for
/// connection/session management and subscriptions. The user will have to
/// periodically call `UA_Client_run_iterate` to ensure that asynchronous events
/// are handled, including keeping a secure connection established.
/// See more about :ref:`asynchronicity<client-async-services>` and
/// :ref:`subscriptions<client-subscriptions>`.
///
/// .. _client-config:
///
/// Client Configuration
/// --------------------
///
/// The client configuration is used for setting connection parameters and
/// additional settings used by the client.
/// The configuration should not be modified after it is passed to a client.
/// Currently, only one client can use a configuration at a time.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a client configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. modifying the timeout
/// 3. Instantiate a client with it
/// 4. After shutdown of the client, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ClientConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Void> clientContext;

  external UA_Logger logger;

  @UA_UInt32()
  external int timeout;

  external UA_ApplicationDescription clientDescription;

  /// Connection configuration
  /// ~~~~~~~~~~~~~~~~~~~~~~~~
  ///
  /// The following configuration elements reduce the "degrees of freedom" the
  /// client has when connecting to a server. If no connection can be made
  /// under these restrictions, then the connection will abort with an error
  /// message.
  external UA_ExtensionObject userIdentityToken;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityPolicyUri;

  /// If either endpoint or userTokenPolicy has been set (at least one non-zero
  /// byte in either structure), then the selected Endpoint and UserTokenPolicy
  /// overwrite the settings in the basic connection configuration. The
  /// userTokenPolicy array in the EndpointDescription is ignored. The selected
  /// userTokenPolicy is set in the dedicated configuration field.
  ///
  /// If the advanced configuration is not set, the client will write to it the
  /// selected Endpoint and UserTokenPolicy during GetEndpoints.
  ///
  /// The information in the advanced configuration is used during reconnect
  /// when the SecureChannel was broken.
  external UA_EndpointDescription endpoint;

  external UA_UserTokenPolicy userTokenPolicy;

  /// If the EndpointDescription has not been defined, the ApplicationURI
  /// constrains the servers considered in the FindServers service and the
  /// Endpoints considered in the GetEndpoints service.
  ///
  /// If empty the applicationURI is not used to filter.
  external UA_String applicationUri;

  /// Custom Data Types
  /// ~~~~~~~~~~~~~~~~~
  /// The following is a linked list of arrays with custom data types. All data
  /// types that are accessible from here are automatically considered for the
  /// decoding of received messages. Custom data types are not cleaned up
  /// together with the configuration. So it is possible to allocate them on
  /// ROM.
  ///
  /// See the section on :ref:`generic-types`. Examples for working with custom
  /// data types are provided in ``/examples/custom_datatype/``.
  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  /// Advanced Client Configuration
  /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  @UA_UInt32()
  external int secureChannelLifeTime;

  @UA_UInt32()
  external int requestedSessionTimeout;

  external UA_ConnectionConfig localConnectionConfig;

  @UA_UInt32()
  external int connectivityCheckInterval;

  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  external UA_CertificateVerification certificateVerification;

  external UA_ConnectClientConnection initConnectionFunc;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Connection> connection,
              UA_UInt32 timeout,
              ffi.Pointer<UA_Logger> logger)>> pollConnectionFunc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client> client,
              ffi.Int32 channelState,
              ffi.Int32 sessionState,
              UA_StatusCode connectStatus)>> stateCallback;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client> client)>>
      inactivityCallback;

  @UA_UInt16()
  external int outStandingPublishRequests;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_Client> client,
                  UA_UInt32 subscriptionId, ffi.Pointer<ffi.Void> subContext)>>
      subscriptionInactivityCallback;

  external ffi.Pointer<UA_LocaleId> sessionLocaleIds;

  @ffi.Size()
  external int sessionLocaleIdsSize;
}

typedef UA_ConnectClientConnection
    = ffi.Pointer<ffi.NativeFunction<UA_ConnectClientConnectionFunction>>;
typedef UA_ConnectClientConnectionFunction = UA_Connection Function(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    UA_UInt32 timeout,
    ffi.Pointer<UA_Logger> logger);
typedef DartUA_ConnectClientConnectionFunction = UA_Connection Function(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    DartUA_UInt32 timeout,
    ffi.Pointer<UA_Logger> logger);

/// .. _client-async-services:
///
/// Asynchronous Services
/// ---------------------
/// All OPC UA services are asynchronous in nature. So several service calls can
/// be made without waiting for the individual responses. Depending on the
/// server's priorities responses may come in a different ordering than sent.
///
/// As noted in :ref:`the client overview<client>` currently no means
/// of handling asynchronous events automatically is provided. However, some
/// synchronous function calls will trigger handling, but to ensure this
/// happens a client should periodically call `UA_Client_run_iterate`
/// explicitly.
///
/// Connection and session management are also performed in
/// `UA_Client_run_iterate`, so to keep a connection healthy any client need to
/// consider how and when it is appropriate to do the call.
/// This is especially true for the periodic renewal of a SecureChannel's
/// SecurityToken which is designed to have a limited lifetime and will
/// invalidate the connection if not renewed.
typedef UA_ClientAsyncServiceCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncServiceCallbackFunction>>;
typedef UA_ClientAsyncServiceCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<ffi.Void> response);
typedef DartUA_ClientAsyncServiceCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<ffi.Void> response);

/// Timed Callbacks
/// ---------------
/// Repeated callbacks can be attached to a client and will be executed in the
/// defined interval.
typedef UA_ClientCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientCallbackFunction>>;
typedef UA_ClientCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);
typedef DartUA_ClientCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);
typedef UA_Client_StatusChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Client_StatusChangeNotificationCallbackFunction>>;
typedef UA_Client_StatusChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    ffi.Pointer<UA_StatusChangeNotification> notification);
typedef DartUA_Client_StatusChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    ffi.Pointer<UA_StatusChangeNotification> notification);

/// .. _client-subscriptions:
///
/// Subscriptions
/// -------------
///
/// Subscriptions in OPC UA are asynchronous. That is, the client sends several
/// PublishRequests to the server. The server returns PublishResponses with
/// notifications. But only when a notification has been generated. The client
/// does not wait for the responses and continues normal operations.
///
/// Note the difference between Subscriptions and MonitoredItems. Subscriptions
/// are used to report back notifications. MonitoredItems are used to generate
/// notifications. Every MonitoredItem is attached to exactly one Subscription.
/// And a Subscription can contain many MonitoredItems.
///
/// The client automatically processes PublishResponses (with a callback) in the
/// background and keeps enough PublishRequests in transit. The PublishResponses
/// may be recieved during a synchronous service call or in
/// ``UA_Client_run_iterate``. See more about
/// :ref:`asynchronicity<client-async-services>`.
typedef UA_Client_DeleteSubscriptionCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_DeleteSubscriptionCallbackFunction>>;
typedef UA_Client_DeleteSubscriptionCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext);
typedef DartUA_Client_DeleteSubscriptionCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext);
typedef UA_Client_DataChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Client_DataChangeNotificationCallbackFunction>>;
typedef UA_Client_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Client_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);

/// The clientHandle parameter cannot be set by the user, any value will be replaced
/// by the client before sending the request to the server.
typedef UA_Client_DeleteMonitoredItemCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_DeleteMonitoredItemCallbackFunction>>;
typedef UA_Client_DeleteMonitoredItemCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext);
typedef DartUA_Client_DeleteMonitoredItemCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext);
typedef UA_Client_EventNotificationCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_EventNotificationCallbackFunction>>;
typedef UA_Client_EventNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Size nEventFields,
    ffi.Pointer<UA_Variant> eventFields);
typedef DartUA_Client_EventNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    int nEventFields,
    ffi.Pointer<UA_Variant> eventFields);

/// Async Services
/// ^^^^^^^^^^^^^^
///
/// Call OPC UA Services asynchronously with a callback. The (optional) requestId
/// output can be used to cancel the service while it is still pending.
typedef UA_ClientAsyncReadCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadCallbackFunction>>;
typedef UA_ClientAsyncReadCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_ReadResponse> rr);
typedef DartUA_ClientAsyncReadCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_ReadResponse> rr);
typedef UA_ClientAsyncWriteCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncWriteCallbackFunction>>;
typedef UA_ClientAsyncWriteCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_WriteResponse> wr);
typedef DartUA_ClientAsyncWriteCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_WriteResponse> wr);
typedef UA_ClientAsyncBrowseCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncBrowseCallbackFunction>>;
typedef UA_ClientAsyncBrowseCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_BrowseResponse> wr);
typedef DartUA_ClientAsyncBrowseCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_BrowseResponse> wr);

/// Read Attribute
/// ^^^^^^^^^^^^^^
///
/// Asynchronously read a single attribute. The attribute is unpacked from the
/// response as the datatype of the attribute is known ahead of time. Value
/// attributes are variants.
///
/// Note that the last argument (value pointer) of the callbacks can be NULL if
/// the status of the operation is not good.
typedef UA_ClientAsyncReadAttributeCallback = ffi
    .Pointer<ffi.NativeFunction<UA_ClientAsyncReadAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_DataValue> attribute);
typedef DartUA_ClientAsyncReadAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_DataValue> attribute);
typedef UA_ClientAsyncReadValueAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadValueAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_ClientAsyncReadValueAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_DataValue> value);
typedef UA_ClientAsyncReadDataTypeAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDataTypeAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDataTypeAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_NodeId> dataType);
typedef DartUA_ClientAsyncReadDataTypeAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_NodeId> dataType);
typedef UA_ClientReadArrayDimensionsAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientReadArrayDimensionsAttributeCallbackFunction>>;
typedef UA_ClientReadArrayDimensionsAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Variant> arrayDimensions);
typedef DartUA_ClientReadArrayDimensionsAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Variant> arrayDimensions);
typedef UA_ClientAsyncReadNodeClassAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadNodeClassAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadNodeClassAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Int32> nodeClass);
typedef DartUA_ClientAsyncReadNodeClassAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Int32> nodeClass);
typedef UA_ClientAsyncReadBrowseNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadBrowseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadBrowseNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_QualifiedName> browseName);
typedef DartUA_ClientAsyncReadBrowseNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_QualifiedName> browseName);
typedef UA_ClientAsyncReadDisplayNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDisplayNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDisplayNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> displayName);
typedef DartUA_ClientAsyncReadDisplayNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> displayName);
typedef UA_ClientAsyncReadDescriptionAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDescriptionAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDescriptionAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> description);
typedef DartUA_ClientAsyncReadDescriptionAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> description);
typedef UA_ClientAsyncReadWriteMaskAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadWriteMaskAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadWriteMaskAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadIsAbstractAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadIsAbstractAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadIsAbstractAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> isAbstract);
typedef DartUA_ClientAsyncReadIsAbstractAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> isAbstract);
typedef UA_ClientAsyncReadSymmetricAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadSymmetricAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadSymmetricAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> symmetric);
typedef DartUA_ClientAsyncReadSymmetricAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> symmetric);
typedef UA_ClientAsyncReadInverseNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadInverseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadInverseNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> inverseName);
typedef DartUA_ClientAsyncReadInverseNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> inverseName);
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> containsNoLoops);
typedef DartUA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> containsNoLoops);
typedef UA_ClientAsyncReadEventNotifierAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadEventNotifierAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadEventNotifierAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> eventNotifier);
typedef DartUA_ClientAsyncReadEventNotifierAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> eventNotifier);
typedef UA_ClientAsyncReadValueRankAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadValueRankAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueRankAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Int32> valueRank);
typedef DartUA_ClientAsyncReadValueRankAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Int32> valueRank);
typedef UA_ClientAsyncReadAccessLevelAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAccessLevelAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> accessLevel);
typedef DartUA_ClientAsyncReadAccessLevelAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> accessLevel);
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> userAccessLevel);
typedef DartUA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> userAccessLevel);
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef DartUA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef UA_ClientAsyncReadHistorizingAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadHistorizingAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadHistorizingAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> historizing);
typedef DartUA_ClientAsyncReadHistorizingAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> historizing);
typedef UA_ClientAsyncReadExecutableAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadExecutableAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> executable);
typedef DartUA_ClientAsyncReadExecutableAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> executable);
typedef UA_ClientAsyncReadUserExecutableAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadUserExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserExecutableAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> userExecutable);
typedef DartUA_ClientAsyncReadUserExecutableAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> userExecutable);
typedef UA_ClientAsyncCallCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncCallCallbackFunction>>;
typedef UA_ClientAsyncCallCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_CallResponse> cr);
typedef DartUA_ClientAsyncCallCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_CallResponse> cr);

/// Node Management
/// ^^^^^^^^^^^^^^^
typedef UA_ClientAsyncAddNodesCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncAddNodesCallbackFunction>>;
typedef UA_ClientAsyncAddNodesCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_AddNodesResponse> ar);
typedef DartUA_ClientAsyncAddNodesCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_AddNodesResponse> ar);

/// amalgamated original file "/plugins/include/open62541/plugin/accesscontrol_default.h"
final class UA_UsernamePasswordLogin extends ffi.Struct {
  external UA_String username;

  external UA_String password;
}

const int MidlInterceptionInfoVersionOne = 1;

const int MidlWinrtTypeSerializationInfoVersionOne = 1;

const int UA_OPEN62541_VER_MAJOR = 1;

const int UA_OPEN62541_VER_MINOR = 3;

const int UA_OPEN62541_VER_PATCH = 6;

const String UA_OPEN62541_VER_LABEL = '';

const String UA_OPEN62541_VER_COMMIT = 'v1.3.6';

const String UA_OPEN62541_VERSION = 'v1.3.6';

const int UA_LOGLEVEL = 300;

const int UA_MULTITHREADING = 0;

const int UA_VALGRIND_INTERACTIVE_INTERVAL = 1000;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const int _NLSCMPERROR = 2147483647;

const int __bool_true_false_are_defined = 1;

const int false1 = 0;

const int true1 = 1;

const String PRId8 = 'hhd';

const String PRId16 = 'hd';

const String PRId32 = 'd';

const String PRId64 = 'lld';

const String PRIdLEAST8 = 'hhd';

const String PRIdLEAST16 = 'hd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'lld';

const String PRIdFAST8 = 'hhd';

const String PRIdFAST16 = 'd';

const String PRIdFAST32 = 'd';

const String PRIdFAST64 = 'lld';

const String PRIdMAX = 'lld';

const String PRIdPTR = 'lld';

const String PRIi8 = 'hhi';

const String PRIi16 = 'hi';

const String PRIi32 = 'i';

const String PRIi64 = 'lli';

const String PRIiLEAST8 = 'hhi';

const String PRIiLEAST16 = 'hi';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'lli';

const String PRIiFAST8 = 'hhi';

const String PRIiFAST16 = 'i';

const String PRIiFAST32 = 'i';

const String PRIiFAST64 = 'lli';

const String PRIiMAX = 'lli';

const String PRIiPTR = 'lli';

const String PRIo8 = 'hho';

const String PRIo16 = 'ho';

const String PRIo32 = 'o';

const String PRIo64 = 'llo';

const String PRIoLEAST8 = 'hho';

const String PRIoLEAST16 = 'ho';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'llo';

const String PRIoFAST8 = 'hho';

const String PRIoFAST16 = 'o';

const String PRIoFAST32 = 'o';

const String PRIoFAST64 = 'llo';

const String PRIoMAX = 'llo';

const String PRIoPTR = 'llo';

const String PRIu8 = 'hhu';

const String PRIu16 = 'hu';

const String PRIu32 = 'u';

const String PRIu64 = 'llu';

const String PRIuLEAST8 = 'hhu';

const String PRIuLEAST16 = 'hu';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'llu';

const String PRIuFAST8 = 'hhu';

const String PRIuFAST16 = 'u';

const String PRIuFAST32 = 'u';

const String PRIuFAST64 = 'llu';

const String PRIuMAX = 'llu';

const String PRIuPTR = 'llu';

const String PRIx8 = 'hhx';

const String PRIx16 = 'hx';

const String PRIx32 = 'x';

const String PRIx64 = 'llx';

const String PRIxLEAST8 = 'hhx';

const String PRIxLEAST16 = 'hx';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'llx';

const String PRIxFAST8 = 'hhx';

const String PRIxFAST16 = 'x';

const String PRIxFAST32 = 'x';

const String PRIxFAST64 = 'llx';

const String PRIxMAX = 'llx';

const String PRIxPTR = 'llx';

const String PRIX8 = 'hhX';

const String PRIX16 = 'hX';

const String PRIX32 = 'X';

const String PRIX64 = 'llX';

const String PRIXLEAST8 = 'hhX';

const String PRIXLEAST16 = 'hX';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'llX';

const String PRIXFAST8 = 'hhX';

const String PRIXFAST16 = 'X';

const String PRIXFAST32 = 'X';

const String PRIXFAST64 = 'llX';

const String PRIXMAX = 'llX';

const String PRIXPTR = 'llX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'lld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'lld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'd';

const String SCNdFAST32 = 'd';

const String SCNdFAST64 = 'lld';

const String SCNdMAX = 'lld';

const String SCNdPTR = 'lld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'lli';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'lli';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'i';

const String SCNiFAST32 = 'i';

const String SCNiFAST64 = 'lli';

const String SCNiMAX = 'lli';

const String SCNiPTR = 'lli';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'llo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'llo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'o';

const String SCNoFAST32 = 'o';

const String SCNoFAST64 = 'llo';

const String SCNoMAX = 'llo';

const String SCNoPTR = 'llo';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'llu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'llu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'u';

const String SCNuFAST32 = 'u';

const String SCNuFAST64 = 'llu';

const String SCNuMAX = 'llu';

const String SCNuPTR = 'llu';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'llx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'llx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'x';

const String SCNxFAST32 = 'x';

const String SCNxFAST64 = 'llx';

const String SCNxMAX = 'llx';

const String SCNxPTR = 'llx';

const int UA_LITTLE_ENDIAN = 1;

const int UA_BINARY_OVERLAYABLE_INTEGER = 1;

const int UA_FLOAT_IEEE754 = 1;

const int UA_FLOAT_LITTLE_ENDIAN = 1;

const int UA_BINARY_OVERLAYABLE_FLOAT = 1;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int WINAPI_PARTITION_SERVER = 0;

const int WINAPI_PARTITION_PKG_WINTRUST = 0;

const int WINAPI_PARTITION_PKG_WEBSERVICES = 0;

const int WINAPI_PARTITION_PKG_EVENTLOGSERVICE = 0;

const int WINAPI_PARTITION_PKG_VHD = 0;

const int WINAPI_PARTITION_PKG_PERFCOUNTER = 0;

const int WINAPI_PARTITION_PKG_SECURESTARTUP = 0;

const int WINAPI_PARTITION_PKG_REMOTEFS = 0;

const int WINAPI_PARTITION_PKG_BOOTABLESKU = 0;

const int WINAPI_PARTITION_PKG_CMDTOOLS = 0;

const int WINAPI_PARTITION_PKG_DISM = 0;

const int WINAPI_PARTITION_PKG_CORESETUP = 0;

const int WINAPI_PARTITION_PKG_APPRUNTIME = 0;

const int WINAPI_PARTITION_PKG_ESENT = 0;

const int WINAPI_PARTITION_PKG_WINMGMT = 0;

const int WINAPI_PARTITION_PKG_WNV = 0;

const int WINAPI_PARTITION_PKG_CLUSTER = 0;

const int WINAPI_PARTITION_PKG_VSS = 0;

const int WINAPI_PARTITION_PKG_TRAFFIC = 0;

const int WINAPI_PARTITION_PKG_ISCSI = 0;

const int WINAPI_PARTITION_PKG_STORAGE = 0;

const int WINAPI_PARTITION_PKG_MPSSVC = 0;

const int WINAPI_PARTITION_PKG_APPXDEPLOYMENT = 0;

const int WINAPI_PARTITION_PKG_WER = 0;

const int WINAPI_FAMILY_PC_APP = 2;

const int WINAPI_FAMILY_PHONE_APP = 3;

const int WINAPI_FAMILY_SYSTEM = 4;

const int WINAPI_FAMILY_SERVER = 5;

const int WINAPI_FAMILY_GAMES = 6;

const int WINAPI_FAMILY_DESKTOP_APP = 100;

const int WINAPI_FAMILY_APP = 2;

const int WINAPI_FAMILY = 100;

const int WINAPI_PARTITION_DESKTOP = 1;

const int WINAPI_PARTITION_APP = 1;

const int WINAPI_PARTITION_PC_APP = 1;

const int WINAPI_PARTITION_PHONE_APP = 0;

const int WINAPI_PARTITION_GAMES = 1;

const int WINAPI_PARTITION_SYSTEM = 0;

const int WINAPI_PARTITION_PHONE = 0;

const int INCL_WINSOCK_API_PROTOTYPES = 1;

const int INCL_WINSOCK_API_TYPEDEFS = 0;

const int _WIN32_WINNT_NT4 = 1024;

const int _WIN32_WINNT_WIN2K = 1280;

const int _WIN32_WINNT_WINXP = 1281;

const int _WIN32_WINNT_WS03 = 1282;

const int _WIN32_WINNT_WIN6 = 1536;

const int _WIN32_WINNT_VISTA = 1536;

const int _WIN32_WINNT_WS08 = 1536;

const int _WIN32_WINNT_LONGHORN = 1536;

const int _WIN32_WINNT_WIN7 = 1537;

const int _WIN32_WINNT_WIN8 = 1538;

const int _WIN32_WINNT_WINBLUE = 1539;

const int _WIN32_WINNT_WINTHRESHOLD = 2560;

const int _WIN32_WINNT_WIN10 = 2560;

const int _WIN32_IE_IE20 = 512;

const int _WIN32_IE_IE30 = 768;

const int _WIN32_IE_IE302 = 770;

const int _WIN32_IE_IE40 = 1024;

const int _WIN32_IE_IE401 = 1025;

const int _WIN32_IE_IE50 = 1280;

const int _WIN32_IE_IE501 = 1281;

const int _WIN32_IE_IE55 = 1360;

const int _WIN32_IE_IE60 = 1536;

const int _WIN32_IE_IE60SP1 = 1537;

const int _WIN32_IE_IE60SP2 = 1539;

const int _WIN32_IE_IE70 = 1792;

const int _WIN32_IE_IE80 = 2048;

const int _WIN32_IE_IE90 = 2304;

const int _WIN32_IE_IE100 = 2560;

const int _WIN32_IE_IE110 = 2560;

const int _WIN32_IE_NT4 = 512;

const int _WIN32_IE_NT4SP1 = 512;

const int _WIN32_IE_NT4SP2 = 512;

const int _WIN32_IE_NT4SP3 = 770;

const int _WIN32_IE_NT4SP4 = 1025;

const int _WIN32_IE_NT4SP5 = 1025;

const int _WIN32_IE_NT4SP6 = 1280;

const int _WIN32_IE_WIN98 = 1025;

const int _WIN32_IE_WIN98SE = 1280;

const int _WIN32_IE_WINME = 1360;

const int _WIN32_IE_WIN2K = 1281;

const int _WIN32_IE_WIN2KSP1 = 1281;

const int _WIN32_IE_WIN2KSP2 = 1281;

const int _WIN32_IE_WIN2KSP3 = 1281;

const int _WIN32_IE_WIN2KSP4 = 1281;

const int _WIN32_IE_XP = 1536;

const int _WIN32_IE_XPSP1 = 1537;

const int _WIN32_IE_XPSP2 = 1539;

const int _WIN32_IE_WS03 = 1538;

const int _WIN32_IE_WS03SP1 = 1539;

const int _WIN32_IE_WIN6 = 1792;

const int _WIN32_IE_LONGHORN = 1792;

const int _WIN32_IE_WIN7 = 2048;

const int _WIN32_IE_WIN8 = 2560;

const int _WIN32_IE_WINBLUE = 2560;

const int _WIN32_IE_WINTHRESHOLD = 2560;

const int _WIN32_IE_WIN10 = 2560;

const int NTDDI_WIN4 = 67108864;

const int NTDDI_WIN2K = 83886080;

const int NTDDI_WIN2KSP1 = 83886336;

const int NTDDI_WIN2KSP2 = 83886592;

const int NTDDI_WIN2KSP3 = 83886848;

const int NTDDI_WIN2KSP4 = 83887104;

const int NTDDI_WINXP = 83951616;

const int NTDDI_WINXPSP1 = 83951872;

const int NTDDI_WINXPSP2 = 83952128;

const int NTDDI_WINXPSP3 = 83952384;

const int NTDDI_WINXPSP4 = 83952640;

const int NTDDI_WS03 = 84017152;

const int NTDDI_WS03SP1 = 84017408;

const int NTDDI_WS03SP2 = 84017664;

const int NTDDI_WS03SP3 = 84017920;

const int NTDDI_WS03SP4 = 84018176;

const int NTDDI_WIN6 = 100663296;

const int NTDDI_WIN6SP1 = 100663552;

const int NTDDI_WIN6SP2 = 100663808;

const int NTDDI_WIN6SP3 = 100664064;

const int NTDDI_WIN6SP4 = 100664320;

const int NTDDI_VISTA = 100663296;

const int NTDDI_VISTASP1 = 100663552;

const int NTDDI_VISTASP2 = 100663808;

const int NTDDI_VISTASP3 = 100664064;

const int NTDDI_VISTASP4 = 100664320;

const int NTDDI_LONGHORN = 100663296;

const int NTDDI_WS08 = 100663552;

const int NTDDI_WS08SP2 = 100663808;

const int NTDDI_WS08SP3 = 100664064;

const int NTDDI_WS08SP4 = 100664320;

const int NTDDI_WIN7 = 100728832;

const int NTDDI_WIN8 = 100794368;

const int NTDDI_WINBLUE = 100859904;

const int NTDDI_WINTHRESHOLD = 167772160;

const int NTDDI_WIN10 = 167772160;

const int NTDDI_WIN10_TH2 = 167772161;

const int NTDDI_WIN10_RS1 = 167772162;

const int NTDDI_WIN10_RS2 = 167772163;

const int NTDDI_WIN10_RS3 = 167772164;

const int NTDDI_WIN10_RS4 = 167772165;

const int NTDDI_WIN10_RS5 = 167772166;

const int NTDDI_WIN10_19H1 = 167772167;

const int NTDDI_WIN10_VB = 167772168;

const int NTDDI_WIN10_MN = 167772169;

const int NTDDI_WIN10_FE = 167772170;

const int NTDDI_WIN10_CO = 167772171;

const int NTDDI_WIN10_NI = 167772172;

const int WDK_NTDDI_VERSION = 167772172;

const int OSVERSION_MASK = 4294901760;

const int SPVERSION_MASK = 65280;

const int SUBVERSION_MASK = 255;

const int _WIN32_WINNT = 2560;

const int NTDDI_VERSION = 167772172;

const int WINVER = 2560;

const int _WIN32_IE = 2560;

const int EXCEPTION_EXECUTE_HANDLER = 1;

const int EXCEPTION_CONTINUE_SEARCH = 0;

const int EXCEPTION_CONTINUE_EXECUTION = -1;

const int __SAL_H_FULL_VER = 140050727;

const int __SPECSTRINGS_STRICT_LEVEL = 1;

const int __drv_typeConst = 0;

const int __drv_typeCond = 1;

const int __drv_typeBitset = 2;

const int __drv_typeExpr = 3;

const int STRICT = 1;

const int MAX_PATH = 260;

const int FALSE = 0;

const int TRUE = 1;

const int _UPPER = 1;

const int _LOWER = 2;

const int _DIGIT = 4;

const int _SPACE = 8;

const int _PUNCT = 16;

const int _CONTROL = 32;

const int _BLANK = 64;

const int _HEX = 128;

const int _LEADBYTE = 32768;

const int _ALPHA = 259;

const int ANYSIZE_ARRAY = 1;

const int DISPATCH_LEVEL = 2;

const int APC_LEVEL = 1;

const int PASSIVE_LEVEL = 0;

const int HIGH_LEVEL = 15;

const int MAX_NATURAL_ALIGNMENT = 8;

const int MEMORY_ALLOCATION_ALIGNMENT = 16;

const int ADDRESS_TAG_BIT = 4398046511104;

const int MAXUINT_PTR = -1;

const int MAXINT_PTR = 9223372036854775807;

const int MININT_PTR = -9223372036854775808;

const int MAXULONG_PTR = -1;

const int MAXLONG_PTR = 9223372036854775807;

const int MINLONG_PTR = -9223372036854775808;

const int MAXUHALF_PTR = 4294967295;

const int MAXHALF_PTR = 2147483647;

const int MINHALF_PTR = -2147483648;

const int MAXUINT8 = 255;

const int MAXINT8 = 127;

const int MININT8 = -128;

const int MAXUINT16 = 65535;

const int MAXINT16 = 32767;

const int MININT16 = -32768;

const int MAXUINT32 = 4294967295;

const int MAXINT32 = 2147483647;

const int MININT32 = -2147483648;

const int MAXUINT64 = -1;

const int MAXINT64 = 9223372036854775807;

const int MININT64 = -9223372036854775808;

const int MAXULONG32 = 4294967295;

const int MAXLONG32 = 2147483647;

const int MINLONG32 = -2147483648;

const int MAXULONG64 = -1;

const int MAXLONG64 = 9223372036854775807;

const int MINLONG64 = -9223372036854775808;

const int MAXULONGLONG = -1;

const int MINLONGLONG = -9223372036854775808;

const int MAXSIZE_T = -1;

const int MAXSSIZE_T = 9223372036854775807;

const int MINSSIZE_T = -9223372036854775808;

const int MAXUINT = 4294967295;

const int MAXINT = 2147483647;

const int MININT = -2147483648;

const int MAXDWORD32 = 4294967295;

const int MAXDWORD64 = -1;

const int X86_CACHE_ALIGNMENT_SIZE = 64;

const int ARM_CACHE_ALIGNMENT_SIZE = 128;

const int SYSTEM_CACHE_ALIGNMENT_SIZE = 64;

const int PRAGMA_DEPRECATED_DDK = 0;

const int UCSCHAR_INVALID_CHARACTER = 4294967295;

const int MIN_UCSCHAR = 0;

const int MAX_UCSCHAR = 1114111;

const int ALL_PROCESSOR_GROUPS = 65535;

const int MAXIMUM_PROC_PER_GROUP = 64;

const int MAXIMUM_PROCESSORS = 64;

const int APPLICATION_ERROR_MASK = 536870912;

const int ERROR_SEVERITY_SUCCESS = 0;

const int ERROR_SEVERITY_INFORMATIONAL = 1073741824;

const int ERROR_SEVERITY_WARNING = 2147483648;

const int ERROR_SEVERITY_ERROR = 3221225472;

const int MAXLONGLONG = 9223372036854775807;

const int ANSI_NULL = 0;

const int UNICODE_NULL = 0;

const int UNICODE_STRING_MAX_BYTES = 65534;

const int UNICODE_STRING_MAX_CHARS = 32767;

const int MINCHAR = 128;

const int MAXCHAR = 127;

const int MINSHORT = 32768;

const int MAXSHORT = 32767;

const int MINLONG = 2147483648;

const int MAXLONG = 2147483647;

const int MAXBYTE = 255;

const int MAXWORD = 65535;

const int MAXDWORD = 4294967295;

const int ENCLAVE_SHORT_ID_LENGTH = 16;

const int ENCLAVE_LONG_ID_LENGTH = 32;

const int VER_SERVER_NT = 2147483648;

const int VER_WORKSTATION_NT = 1073741824;

const int VER_SUITE_SMALLBUSINESS = 1;

const int VER_SUITE_ENTERPRISE = 2;

const int VER_SUITE_BACKOFFICE = 4;

const int VER_SUITE_COMMUNICATIONS = 8;

const int VER_SUITE_TERMINAL = 16;

const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;

const int VER_SUITE_EMBEDDEDNT = 64;

const int VER_SUITE_DATACENTER = 128;

const int VER_SUITE_SINGLEUSERTS = 256;

const int VER_SUITE_PERSONAL = 512;

const int VER_SUITE_BLADE = 1024;

const int VER_SUITE_EMBEDDED_RESTRICTED = 2048;

const int VER_SUITE_SECURITY_APPLIANCE = 4096;

const int VER_SUITE_STORAGE_SERVER = 8192;

const int VER_SUITE_COMPUTE_SERVER = 16384;

const int VER_SUITE_WH_SERVER = 32768;

const int VER_SUITE_MULTIUSERTS = 131072;

const int PRODUCT_UNDEFINED = 0;

const int PRODUCT_ULTIMATE = 1;

const int PRODUCT_HOME_BASIC = 2;

const int PRODUCT_HOME_PREMIUM = 3;

const int PRODUCT_ENTERPRISE = 4;

const int PRODUCT_HOME_BASIC_N = 5;

const int PRODUCT_BUSINESS = 6;

const int PRODUCT_STANDARD_SERVER = 7;

const int PRODUCT_DATACENTER_SERVER = 8;

const int PRODUCT_SMALLBUSINESS_SERVER = 9;

const int PRODUCT_ENTERPRISE_SERVER = 10;

const int PRODUCT_STARTER = 11;

const int PRODUCT_DATACENTER_SERVER_CORE = 12;

const int PRODUCT_STANDARD_SERVER_CORE = 13;

const int PRODUCT_ENTERPRISE_SERVER_CORE = 14;

const int PRODUCT_ENTERPRISE_SERVER_IA64 = 15;

const int PRODUCT_BUSINESS_N = 16;

const int PRODUCT_WEB_SERVER = 17;

const int PRODUCT_CLUSTER_SERVER = 18;

const int PRODUCT_HOME_SERVER = 19;

const int PRODUCT_STORAGE_EXPRESS_SERVER = 20;

const int PRODUCT_STORAGE_STANDARD_SERVER = 21;

const int PRODUCT_STORAGE_WORKGROUP_SERVER = 22;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER = 23;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS = 24;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 25;

const int PRODUCT_HOME_PREMIUM_N = 26;

const int PRODUCT_ENTERPRISE_N = 27;

const int PRODUCT_ULTIMATE_N = 28;

const int PRODUCT_WEB_SERVER_CORE = 29;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 30;

const int PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 31;

const int PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 32;

const int PRODUCT_SERVER_FOUNDATION = 33;

const int PRODUCT_HOME_PREMIUM_SERVER = 34;

const int PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 35;

const int PRODUCT_STANDARD_SERVER_V = 36;

const int PRODUCT_DATACENTER_SERVER_V = 37;

const int PRODUCT_ENTERPRISE_SERVER_V = 38;

const int PRODUCT_DATACENTER_SERVER_CORE_V = 39;

const int PRODUCT_STANDARD_SERVER_CORE_V = 40;

const int PRODUCT_ENTERPRISE_SERVER_CORE_V = 41;

const int PRODUCT_HYPERV = 42;

const int PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 43;

const int PRODUCT_STORAGE_STANDARD_SERVER_CORE = 44;

const int PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 45;

const int PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 46;

const int PRODUCT_STARTER_N = 47;

const int PRODUCT_PROFESSIONAL = 48;

const int PRODUCT_PROFESSIONAL_N = 49;

const int PRODUCT_SB_SOLUTION_SERVER = 50;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS = 51;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS = 52;

const int PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 53;

const int PRODUCT_SB_SOLUTION_SERVER_EM = 54;

const int PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 55;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER = 56;

const int PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 57;

const int PRODUCT_PROFESSIONAL_EMBEDDED = 58;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 59;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 60;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 61;

const int PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 62;

const int PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 63;

const int PRODUCT_CLUSTER_SERVER_V = 64;

const int PRODUCT_EMBEDDED = 65;

const int PRODUCT_STARTER_E = 66;

const int PRODUCT_HOME_BASIC_E = 67;

const int PRODUCT_HOME_PREMIUM_E = 68;

const int PRODUCT_PROFESSIONAL_E = 69;

const int PRODUCT_ENTERPRISE_E = 70;

const int PRODUCT_ULTIMATE_E = 71;

const int PRODUCT_ENTERPRISE_EVALUATION = 72;

const int PRODUCT_MULTIPOINT_STANDARD_SERVER = 76;

const int PRODUCT_MULTIPOINT_PREMIUM_SERVER = 77;

const int PRODUCT_STANDARD_EVALUATION_SERVER = 79;

const int PRODUCT_DATACENTER_EVALUATION_SERVER = 80;

const int PRODUCT_ENTERPRISE_N_EVALUATION = 84;

const int PRODUCT_EMBEDDED_AUTOMOTIVE = 85;

const int PRODUCT_EMBEDDED_INDUSTRY_A = 86;

const int PRODUCT_THINPC = 87;

const int PRODUCT_EMBEDDED_A = 88;

const int PRODUCT_EMBEDDED_INDUSTRY = 89;

const int PRODUCT_EMBEDDED_E = 90;

const int PRODUCT_EMBEDDED_INDUSTRY_E = 91;

const int PRODUCT_EMBEDDED_INDUSTRY_A_E = 92;

const int PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 95;

const int PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 96;

const int PRODUCT_CORE_ARM = 97;

const int PRODUCT_CORE_N = 98;

const int PRODUCT_CORE_COUNTRYSPECIFIC = 99;

const int PRODUCT_CORE_SINGLELANGUAGE = 100;

const int PRODUCT_CORE = 101;

const int PRODUCT_PROFESSIONAL_WMC = 103;

const int PRODUCT_EMBEDDED_INDUSTRY_EVAL = 105;

const int PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 106;

const int PRODUCT_EMBEDDED_EVAL = 107;

const int PRODUCT_EMBEDDED_E_EVAL = 108;

const int PRODUCT_NANO_SERVER = 109;

const int PRODUCT_CLOUD_STORAGE_SERVER = 110;

const int PRODUCT_CORE_CONNECTED = 111;

const int PRODUCT_PROFESSIONAL_STUDENT = 112;

const int PRODUCT_CORE_CONNECTED_N = 113;

const int PRODUCT_PROFESSIONAL_STUDENT_N = 114;

const int PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 115;

const int PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 116;

const int PRODUCT_CONNECTED_CAR = 117;

const int PRODUCT_INDUSTRY_HANDHELD = 118;

const int PRODUCT_PPI_PRO = 119;

const int PRODUCT_ARM64_SERVER = 120;

const int PRODUCT_EDUCATION = 121;

const int PRODUCT_EDUCATION_N = 122;

const int PRODUCT_IOTUAP = 123;

const int PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 124;

const int PRODUCT_ENTERPRISE_S = 125;

const int PRODUCT_ENTERPRISE_S_N = 126;

const int PRODUCT_PROFESSIONAL_S = 127;

const int PRODUCT_PROFESSIONAL_S_N = 128;

const int PRODUCT_ENTERPRISE_S_EVALUATION = 129;

const int PRODUCT_ENTERPRISE_S_N_EVALUATION = 130;

const int PRODUCT_HOLOGRAPHIC = 135;

const int PRODUCT_HOLOGRAPHIC_BUSINESS = 136;

const int PRODUCT_PRO_SINGLE_LANGUAGE = 138;

const int PRODUCT_PRO_CHINA = 139;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION = 140;

const int PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 141;

const int PRODUCT_DATACENTER_NANO_SERVER = 143;

const int PRODUCT_STANDARD_NANO_SERVER = 144;

const int PRODUCT_DATACENTER_A_SERVER_CORE = 145;

const int PRODUCT_STANDARD_A_SERVER_CORE = 146;

const int PRODUCT_DATACENTER_WS_SERVER_CORE = 147;

const int PRODUCT_STANDARD_WS_SERVER_CORE = 148;

const int PRODUCT_UTILITY_VM = 149;

const int PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 159;

const int PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 160;

const int PRODUCT_PRO_WORKSTATION = 161;

const int PRODUCT_PRO_WORKSTATION_N = 162;

const int PRODUCT_PRO_FOR_EDUCATION = 164;

const int PRODUCT_PRO_FOR_EDUCATION_N = 165;

const int PRODUCT_AZURE_SERVER_CORE = 168;

const int PRODUCT_AZURE_NANO_SERVER = 169;

const int PRODUCT_ENTERPRISEG = 171;

const int PRODUCT_ENTERPRISEGN = 172;

const int PRODUCT_SERVERRDSH = 175;

const int PRODUCT_CLOUD = 178;

const int PRODUCT_CLOUDN = 179;

const int PRODUCT_HUBOS = 180;

const int PRODUCT_ONECOREUPDATEOS = 182;

const int PRODUCT_CLOUDE = 183;

const int PRODUCT_IOTOS = 185;

const int PRODUCT_CLOUDEN = 186;

const int PRODUCT_IOTEDGEOS = 187;

const int PRODUCT_IOTENTERPRISE = 188;

const int PRODUCT_LITE = 189;

const int PRODUCT_IOTENTERPRISES = 191;

const int PRODUCT_XBOX_SYSTEMOS = 192;

const int PRODUCT_XBOX_GAMEOS = 194;

const int PRODUCT_XBOX_ERAOS = 195;

const int PRODUCT_XBOX_DURANGOHOSTOS = 196;

const int PRODUCT_XBOX_SCARLETTHOSTOS = 197;

const int PRODUCT_XBOX_KEYSTONE = 198;

const int PRODUCT_AZURE_SERVER_CLOUDHOST = 199;

const int PRODUCT_AZURE_SERVER_CLOUDMOS = 200;

const int PRODUCT_CLOUDEDITIONN = 202;

const int PRODUCT_CLOUDEDITION = 203;

const int PRODUCT_AZURESTACKHCI_SERVER_CORE = 406;

const int PRODUCT_DATACENTER_SERVER_AZURE_EDITION = 407;

const int PRODUCT_DATACENTER_SERVER_CORE_AZURE_EDITION = 408;

const int PRODUCT_UNLICENSED = 2882382797;

const int LANG_NEUTRAL = 0;

const int LANG_INVARIANT = 127;

const int LANG_AFRIKAANS = 54;

const int LANG_ALBANIAN = 28;

const int LANG_ALSATIAN = 132;

const int LANG_AMHARIC = 94;

const int LANG_ARABIC = 1;

const int LANG_ARMENIAN = 43;

const int LANG_ASSAMESE = 77;

const int LANG_AZERI = 44;

const int LANG_AZERBAIJANI = 44;

const int LANG_BANGLA = 69;

const int LANG_BASHKIR = 109;

const int LANG_BASQUE = 45;

const int LANG_BELARUSIAN = 35;

const int LANG_BENGALI = 69;

const int LANG_BRETON = 126;

const int LANG_BOSNIAN = 26;

const int LANG_BOSNIAN_NEUTRAL = 30746;

const int LANG_BULGARIAN = 2;

const int LANG_CATALAN = 3;

const int LANG_CENTRAL_KURDISH = 146;

const int LANG_CHEROKEE = 92;

const int LANG_CHINESE = 4;

const int LANG_CHINESE_SIMPLIFIED = 4;

const int LANG_CHINESE_TRADITIONAL = 31748;

const int LANG_CORSICAN = 131;

const int LANG_CROATIAN = 26;

const int LANG_CZECH = 5;

const int LANG_DANISH = 6;

const int LANG_DARI = 140;

const int LANG_DIVEHI = 101;

const int LANG_DUTCH = 19;

const int LANG_ENGLISH = 9;

const int LANG_ESTONIAN = 37;

const int LANG_FAEROESE = 56;

const int LANG_FARSI = 41;

const int LANG_FILIPINO = 100;

const int LANG_FINNISH = 11;

const int LANG_FRENCH = 12;

const int LANG_FRISIAN = 98;

const int LANG_FULAH = 103;

const int LANG_GALICIAN = 86;

const int LANG_GEORGIAN = 55;

const int LANG_GERMAN = 7;

const int LANG_GREEK = 8;

const int LANG_GREENLANDIC = 111;

const int LANG_GUJARATI = 71;

const int LANG_HAUSA = 104;

const int LANG_HAWAIIAN = 117;

const int LANG_HEBREW = 13;

const int LANG_HINDI = 57;

const int LANG_HUNGARIAN = 14;

const int LANG_ICELANDIC = 15;

const int LANG_IGBO = 112;

const int LANG_INDONESIAN = 33;

const int LANG_INUKTITUT = 93;

const int LANG_IRISH = 60;

const int LANG_ITALIAN = 16;

const int LANG_JAPANESE = 17;

const int LANG_KANNADA = 75;

const int LANG_KASHMIRI = 96;

const int LANG_KAZAK = 63;

const int LANG_KHMER = 83;

const int LANG_KICHE = 134;

const int LANG_KINYARWANDA = 135;

const int LANG_KONKANI = 87;

const int LANG_KOREAN = 18;

const int LANG_KYRGYZ = 64;

const int LANG_LAO = 84;

const int LANG_LATVIAN = 38;

const int LANG_LITHUANIAN = 39;

const int LANG_LOWER_SORBIAN = 46;

const int LANG_LUXEMBOURGISH = 110;

const int LANG_MACEDONIAN = 47;

const int LANG_MALAY = 62;

const int LANG_MALAYALAM = 76;

const int LANG_MALTESE = 58;

const int LANG_MANIPURI = 88;

const int LANG_MAORI = 129;

const int LANG_MAPUDUNGUN = 122;

const int LANG_MARATHI = 78;

const int LANG_MOHAWK = 124;

const int LANG_MONGOLIAN = 80;

const int LANG_NEPALI = 97;

const int LANG_NORWEGIAN = 20;

const int LANG_OCCITAN = 130;

const int LANG_ODIA = 72;

const int LANG_ORIYA = 72;

const int LANG_PASHTO = 99;

const int LANG_PERSIAN = 41;

const int LANG_POLISH = 21;

const int LANG_PORTUGUESE = 22;

const int LANG_PULAR = 103;

const int LANG_PUNJABI = 70;

const int LANG_QUECHUA = 107;

const int LANG_ROMANIAN = 24;

const int LANG_ROMANSH = 23;

const int LANG_RUSSIAN = 25;

const int LANG_SAKHA = 133;

const int LANG_SAMI = 59;

const int LANG_SANSKRIT = 79;

const int LANG_SCOTTISH_GAELIC = 145;

const int LANG_SERBIAN = 26;

const int LANG_SERBIAN_NEUTRAL = 31770;

const int LANG_SINDHI = 89;

const int LANG_SINHALESE = 91;

const int LANG_SLOVAK = 27;

const int LANG_SLOVENIAN = 36;

const int LANG_SOTHO = 108;

const int LANG_SPANISH = 10;

const int LANG_SWAHILI = 65;

const int LANG_SWEDISH = 29;

const int LANG_SYRIAC = 90;

const int LANG_TAJIK = 40;

const int LANG_TAMAZIGHT = 95;

const int LANG_TAMIL = 73;

const int LANG_TATAR = 68;

const int LANG_TELUGU = 74;

const int LANG_THAI = 30;

const int LANG_TIBETAN = 81;

const int LANG_TIGRIGNA = 115;

const int LANG_TIGRINYA = 115;

const int LANG_TSWANA = 50;

const int LANG_TURKISH = 31;

const int LANG_TURKMEN = 66;

const int LANG_UIGHUR = 128;

const int LANG_UKRAINIAN = 34;

const int LANG_UPPER_SORBIAN = 46;

const int LANG_URDU = 32;

const int LANG_UZBEK = 67;

const int LANG_VALENCIAN = 3;

const int LANG_VIETNAMESE = 42;

const int LANG_WELSH = 82;

const int LANG_WOLOF = 136;

const int LANG_XHOSA = 52;

const int LANG_YAKUT = 133;

const int LANG_YI = 120;

const int LANG_YORUBA = 106;

const int LANG_ZULU = 53;

const int SUBLANG_NEUTRAL = 0;

const int SUBLANG_DEFAULT = 1;

const int SUBLANG_SYS_DEFAULT = 2;

const int SUBLANG_CUSTOM_DEFAULT = 3;

const int SUBLANG_CUSTOM_UNSPECIFIED = 4;

const int SUBLANG_UI_CUSTOM_DEFAULT = 5;

const int SUBLANG_AFRIKAANS_SOUTH_AFRICA = 1;

const int SUBLANG_ALBANIAN_ALBANIA = 1;

const int SUBLANG_ALSATIAN_FRANCE = 1;

const int SUBLANG_AMHARIC_ETHIOPIA = 1;

const int SUBLANG_ARABIC_SAUDI_ARABIA = 1;

const int SUBLANG_ARABIC_IRAQ = 2;

const int SUBLANG_ARABIC_EGYPT = 3;

const int SUBLANG_ARABIC_LIBYA = 4;

const int SUBLANG_ARABIC_ALGERIA = 5;

const int SUBLANG_ARABIC_MOROCCO = 6;

const int SUBLANG_ARABIC_TUNISIA = 7;

const int SUBLANG_ARABIC_OMAN = 8;

const int SUBLANG_ARABIC_YEMEN = 9;

const int SUBLANG_ARABIC_SYRIA = 10;

const int SUBLANG_ARABIC_JORDAN = 11;

const int SUBLANG_ARABIC_LEBANON = 12;

const int SUBLANG_ARABIC_KUWAIT = 13;

const int SUBLANG_ARABIC_UAE = 14;

const int SUBLANG_ARABIC_BAHRAIN = 15;

const int SUBLANG_ARABIC_QATAR = 16;

const int SUBLANG_ARMENIAN_ARMENIA = 1;

const int SUBLANG_ASSAMESE_INDIA = 1;

const int SUBLANG_AZERI_LATIN = 1;

const int SUBLANG_AZERI_CYRILLIC = 2;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 1;

const int SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 2;

const int SUBLANG_BANGLA_INDIA = 1;

const int SUBLANG_BANGLA_BANGLADESH = 2;

const int SUBLANG_BASHKIR_RUSSIA = 1;

const int SUBLANG_BASQUE_BASQUE = 1;

const int SUBLANG_BELARUSIAN_BELARUS = 1;

const int SUBLANG_BENGALI_INDIA = 1;

const int SUBLANG_BENGALI_BANGLADESH = 2;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 5;

const int SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 8;

const int SUBLANG_BRETON_FRANCE = 1;

const int SUBLANG_BULGARIAN_BULGARIA = 1;

const int SUBLANG_CATALAN_CATALAN = 1;

const int SUBLANG_CENTRAL_KURDISH_IRAQ = 1;

const int SUBLANG_CHEROKEE_CHEROKEE = 1;

const int SUBLANG_CHINESE_TRADITIONAL = 1;

const int SUBLANG_CHINESE_SIMPLIFIED = 2;

const int SUBLANG_CHINESE_HONGKONG = 3;

const int SUBLANG_CHINESE_SINGAPORE = 4;

const int SUBLANG_CHINESE_MACAU = 5;

const int SUBLANG_CORSICAN_FRANCE = 1;

const int SUBLANG_CZECH_CZECH_REPUBLIC = 1;

const int SUBLANG_CROATIAN_CROATIA = 1;

const int SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 4;

const int SUBLANG_DANISH_DENMARK = 1;

const int SUBLANG_DARI_AFGHANISTAN = 1;

const int SUBLANG_DIVEHI_MALDIVES = 1;

const int SUBLANG_DUTCH = 1;

const int SUBLANG_DUTCH_BELGIAN = 2;

const int SUBLANG_ENGLISH_US = 1;

const int SUBLANG_ENGLISH_UK = 2;

const int SUBLANG_ENGLISH_AUS = 3;

const int SUBLANG_ENGLISH_CAN = 4;

const int SUBLANG_ENGLISH_NZ = 5;

const int SUBLANG_ENGLISH_EIRE = 6;

const int SUBLANG_ENGLISH_SOUTH_AFRICA = 7;

const int SUBLANG_ENGLISH_JAMAICA = 8;

const int SUBLANG_ENGLISH_CARIBBEAN = 9;

const int SUBLANG_ENGLISH_BELIZE = 10;

const int SUBLANG_ENGLISH_TRINIDAD = 11;

const int SUBLANG_ENGLISH_ZIMBABWE = 12;

const int SUBLANG_ENGLISH_PHILIPPINES = 13;

const int SUBLANG_ENGLISH_INDIA = 16;

const int SUBLANG_ENGLISH_MALAYSIA = 17;

const int SUBLANG_ENGLISH_SINGAPORE = 18;

const int SUBLANG_ESTONIAN_ESTONIA = 1;

const int SUBLANG_FAEROESE_FAROE_ISLANDS = 1;

const int SUBLANG_FILIPINO_PHILIPPINES = 1;

const int SUBLANG_FINNISH_FINLAND = 1;

const int SUBLANG_FRENCH = 1;

const int SUBLANG_FRENCH_BELGIAN = 2;

const int SUBLANG_FRENCH_CANADIAN = 3;

const int SUBLANG_FRENCH_SWISS = 4;

const int SUBLANG_FRENCH_LUXEMBOURG = 5;

const int SUBLANG_FRENCH_MONACO = 6;

const int SUBLANG_FRISIAN_NETHERLANDS = 1;

const int SUBLANG_FULAH_SENEGAL = 2;

const int SUBLANG_GALICIAN_GALICIAN = 1;

const int SUBLANG_GEORGIAN_GEORGIA = 1;

const int SUBLANG_GERMAN = 1;

const int SUBLANG_GERMAN_SWISS = 2;

const int SUBLANG_GERMAN_AUSTRIAN = 3;

const int SUBLANG_GERMAN_LUXEMBOURG = 4;

const int SUBLANG_GERMAN_LIECHTENSTEIN = 5;

const int SUBLANG_GREEK_GREECE = 1;

const int SUBLANG_GREENLANDIC_GREENLAND = 1;

const int SUBLANG_GUJARATI_INDIA = 1;

const int SUBLANG_HAUSA_NIGERIA_LATIN = 1;

const int SUBLANG_HAWAIIAN_US = 1;

const int SUBLANG_HEBREW_ISRAEL = 1;

const int SUBLANG_HINDI_INDIA = 1;

const int SUBLANG_HUNGARIAN_HUNGARY = 1;

const int SUBLANG_ICELANDIC_ICELAND = 1;

const int SUBLANG_IGBO_NIGERIA = 1;

const int SUBLANG_INDONESIAN_INDONESIA = 1;

const int SUBLANG_INUKTITUT_CANADA = 1;

const int SUBLANG_INUKTITUT_CANADA_LATIN = 2;

const int SUBLANG_IRISH_IRELAND = 2;

const int SUBLANG_ITALIAN = 1;

const int SUBLANG_ITALIAN_SWISS = 2;

const int SUBLANG_JAPANESE_JAPAN = 1;

const int SUBLANG_KANNADA_INDIA = 1;

const int SUBLANG_KASHMIRI_SASIA = 2;

const int SUBLANG_KASHMIRI_INDIA = 2;

const int SUBLANG_KAZAK_KAZAKHSTAN = 1;

const int SUBLANG_KHMER_CAMBODIA = 1;

const int SUBLANG_KICHE_GUATEMALA = 1;

const int SUBLANG_KINYARWANDA_RWANDA = 1;

const int SUBLANG_KONKANI_INDIA = 1;

const int SUBLANG_KOREAN = 1;

const int SUBLANG_KYRGYZ_KYRGYZSTAN = 1;

const int SUBLANG_LAO_LAO = 1;

const int SUBLANG_LATVIAN_LATVIA = 1;

const int SUBLANG_LITHUANIAN = 1;

const int SUBLANG_LOWER_SORBIAN_GERMANY = 2;

const int SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 1;

const int SUBLANG_MACEDONIAN_MACEDONIA = 1;

const int SUBLANG_MALAY_MALAYSIA = 1;

const int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 2;

const int SUBLANG_MALAYALAM_INDIA = 1;

const int SUBLANG_MALTESE_MALTA = 1;

const int SUBLANG_MAORI_NEW_ZEALAND = 1;

const int SUBLANG_MAPUDUNGUN_CHILE = 1;

const int SUBLANG_MARATHI_INDIA = 1;

const int SUBLANG_MOHAWK_MOHAWK = 1;

const int SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 1;

const int SUBLANG_MONGOLIAN_PRC = 2;

const int SUBLANG_NEPALI_INDIA = 2;

const int SUBLANG_NEPALI_NEPAL = 1;

const int SUBLANG_NORWEGIAN_BOKMAL = 1;

const int SUBLANG_NORWEGIAN_NYNORSK = 2;

const int SUBLANG_OCCITAN_FRANCE = 1;

const int SUBLANG_ODIA_INDIA = 1;

const int SUBLANG_ORIYA_INDIA = 1;

const int SUBLANG_PASHTO_AFGHANISTAN = 1;

const int SUBLANG_PERSIAN_IRAN = 1;

const int SUBLANG_POLISH_POLAND = 1;

const int SUBLANG_PORTUGUESE = 2;

const int SUBLANG_PORTUGUESE_BRAZILIAN = 1;

const int SUBLANG_PULAR_SENEGAL = 2;

const int SUBLANG_PUNJABI_INDIA = 1;

const int SUBLANG_PUNJABI_PAKISTAN = 2;

const int SUBLANG_QUECHUA_BOLIVIA = 1;

const int SUBLANG_QUECHUA_ECUADOR = 2;

const int SUBLANG_QUECHUA_PERU = 3;

const int SUBLANG_ROMANIAN_ROMANIA = 1;

const int SUBLANG_ROMANSH_SWITZERLAND = 1;

const int SUBLANG_RUSSIAN_RUSSIA = 1;

const int SUBLANG_SAKHA_RUSSIA = 1;

const int SUBLANG_SAMI_NORTHERN_NORWAY = 1;

const int SUBLANG_SAMI_NORTHERN_SWEDEN = 2;

const int SUBLANG_SAMI_NORTHERN_FINLAND = 3;

const int SUBLANG_SAMI_LULE_NORWAY = 4;

const int SUBLANG_SAMI_LULE_SWEDEN = 5;

const int SUBLANG_SAMI_SOUTHERN_NORWAY = 6;

const int SUBLANG_SAMI_SOUTHERN_SWEDEN = 7;

const int SUBLANG_SAMI_SKOLT_FINLAND = 8;

const int SUBLANG_SAMI_INARI_FINLAND = 9;

const int SUBLANG_SANSKRIT_INDIA = 1;

const int SUBLANG_SCOTTISH_GAELIC = 1;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 6;

const int SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 7;

const int SUBLANG_SERBIAN_MONTENEGRO_LATIN = 11;

const int SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 12;

const int SUBLANG_SERBIAN_SERBIA_LATIN = 9;

const int SUBLANG_SERBIAN_SERBIA_CYRILLIC = 10;

const int SUBLANG_SERBIAN_CROATIA = 1;

const int SUBLANG_SERBIAN_LATIN = 2;

const int SUBLANG_SERBIAN_CYRILLIC = 3;

const int SUBLANG_SINDHI_INDIA = 1;

const int SUBLANG_SINDHI_PAKISTAN = 2;

const int SUBLANG_SINDHI_AFGHANISTAN = 2;

const int SUBLANG_SINHALESE_SRI_LANKA = 1;

const int SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 1;

const int SUBLANG_SLOVAK_SLOVAKIA = 1;

const int SUBLANG_SLOVENIAN_SLOVENIA = 1;

const int SUBLANG_SPANISH = 1;

const int SUBLANG_SPANISH_MEXICAN = 2;

const int SUBLANG_SPANISH_MODERN = 3;

const int SUBLANG_SPANISH_GUATEMALA = 4;

const int SUBLANG_SPANISH_COSTA_RICA = 5;

const int SUBLANG_SPANISH_PANAMA = 6;

const int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 7;

const int SUBLANG_SPANISH_VENEZUELA = 8;

const int SUBLANG_SPANISH_COLOMBIA = 9;

const int SUBLANG_SPANISH_PERU = 10;

const int SUBLANG_SPANISH_ARGENTINA = 11;

const int SUBLANG_SPANISH_ECUADOR = 12;

const int SUBLANG_SPANISH_CHILE = 13;

const int SUBLANG_SPANISH_URUGUAY = 14;

const int SUBLANG_SPANISH_PARAGUAY = 15;

const int SUBLANG_SPANISH_BOLIVIA = 16;

const int SUBLANG_SPANISH_EL_SALVADOR = 17;

const int SUBLANG_SPANISH_HONDURAS = 18;

const int SUBLANG_SPANISH_NICARAGUA = 19;

const int SUBLANG_SPANISH_PUERTO_RICO = 20;

const int SUBLANG_SPANISH_US = 21;

const int SUBLANG_SWAHILI_KENYA = 1;

const int SUBLANG_SWEDISH = 1;

const int SUBLANG_SWEDISH_FINLAND = 2;

const int SUBLANG_SYRIAC_SYRIA = 1;

const int SUBLANG_TAJIK_TAJIKISTAN = 1;

const int SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 2;

const int SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 4;

const int SUBLANG_TAMIL_INDIA = 1;

const int SUBLANG_TAMIL_SRI_LANKA = 2;

const int SUBLANG_TATAR_RUSSIA = 1;

const int SUBLANG_TELUGU_INDIA = 1;

const int SUBLANG_THAI_THAILAND = 1;

const int SUBLANG_TIBETAN_PRC = 1;

const int SUBLANG_TIGRIGNA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ERITREA = 2;

const int SUBLANG_TIGRINYA_ETHIOPIA = 1;

const int SUBLANG_TSWANA_BOTSWANA = 2;

const int SUBLANG_TSWANA_SOUTH_AFRICA = 1;

const int SUBLANG_TURKISH_TURKEY = 1;

const int SUBLANG_TURKMEN_TURKMENISTAN = 1;

const int SUBLANG_UIGHUR_PRC = 1;

const int SUBLANG_UKRAINIAN_UKRAINE = 1;

const int SUBLANG_UPPER_SORBIAN_GERMANY = 1;

const int SUBLANG_URDU_PAKISTAN = 1;

const int SUBLANG_URDU_INDIA = 2;

const int SUBLANG_UZBEK_LATIN = 1;

const int SUBLANG_UZBEK_CYRILLIC = 2;

const int SUBLANG_VALENCIAN_VALENCIA = 2;

const int SUBLANG_VIETNAMESE_VIETNAM = 1;

const int SUBLANG_WELSH_UNITED_KINGDOM = 1;

const int SUBLANG_WOLOF_SENEGAL = 1;

const int SUBLANG_XHOSA_SOUTH_AFRICA = 1;

const int SUBLANG_YAKUT_RUSSIA = 1;

const int SUBLANG_YI_PRC = 1;

const int SUBLANG_YORUBA_NIGERIA = 1;

const int SUBLANG_ZULU_SOUTH_AFRICA = 1;

const int SORT_DEFAULT = 0;

const int SORT_INVARIANT_MATH = 1;

const int SORT_JAPANESE_XJIS = 0;

const int SORT_JAPANESE_UNICODE = 1;

const int SORT_JAPANESE_RADICALSTROKE = 4;

const int SORT_CHINESE_BIG5 = 0;

const int SORT_CHINESE_PRCP = 0;

const int SORT_CHINESE_UNICODE = 1;

const int SORT_CHINESE_PRC = 2;

const int SORT_CHINESE_BOPOMOFO = 3;

const int SORT_CHINESE_RADICALSTROKE = 4;

const int SORT_KOREAN_KSC = 0;

const int SORT_KOREAN_UNICODE = 1;

const int SORT_GERMAN_PHONE_BOOK = 1;

const int SORT_HUNGARIAN_DEFAULT = 0;

const int SORT_HUNGARIAN_TECHNICAL = 1;

const int SORT_GEORGIAN_TRADITIONAL = 0;

const int SORT_GEORGIAN_MODERN = 1;

const int NLS_VALID_LOCALE_MASK = 1048575;

const int LOCALE_NAME_MAX_LENGTH = 85;

const int LANG_SYSTEM_DEFAULT = 2048;

const int LANG_USER_DEFAULT = 1024;

const int LOCALE_SYSTEM_DEFAULT = 2048;

const int LOCALE_USER_DEFAULT = 1024;

const int LOCALE_CUSTOM_DEFAULT = 3072;

const int LOCALE_CUSTOM_UNSPECIFIED = 4096;

const int LOCALE_CUSTOM_UI_DEFAULT = 5120;

const int LOCALE_NEUTRAL = 0;

const int LOCALE_INVARIANT = 127;

const int LOCALE_TRANSIENT_KEYBOARD1 = 8192;

const int LOCALE_TRANSIENT_KEYBOARD2 = 9216;

const int LOCALE_TRANSIENT_KEYBOARD3 = 10240;

const int LOCALE_TRANSIENT_KEYBOARD4 = 11264;

const int LOCALE_UNASSIGNED_LCID = 4096;

const int STATUS_WAIT_0 = 0;

const int STATUS_ABANDONED_WAIT_0 = 128;

const int STATUS_USER_APC = 192;

const int STATUS_TIMEOUT = 258;

const int STATUS_PENDING = 259;

const int DBG_EXCEPTION_HANDLED = 65537;

const int DBG_CONTINUE = 65538;

const int STATUS_SEGMENT_NOTIFICATION = 1073741829;

const int STATUS_FATAL_APP_EXIT = 1073741845;

const int DBG_REPLY_LATER = 1073807361;

const int DBG_TERMINATE_THREAD = 1073807363;

const int DBG_TERMINATE_PROCESS = 1073807364;

const int DBG_CONTROL_C = 1073807365;

const int DBG_PRINTEXCEPTION_C = 1073807366;

const int DBG_RIPEXCEPTION = 1073807367;

const int DBG_CONTROL_BREAK = 1073807368;

const int DBG_COMMAND_EXCEPTION = 1073807369;

const int DBG_PRINTEXCEPTION_WIDE_C = 1073807370;

const int STATUS_GUARD_PAGE_VIOLATION = 2147483649;

const int STATUS_DATATYPE_MISALIGNMENT = 2147483650;

const int STATUS_BREAKPOINT = 2147483651;

const int STATUS_SINGLE_STEP = 2147483652;

const int STATUS_LONGJUMP = 2147483686;

const int STATUS_UNWIND_CONSOLIDATE = 2147483689;

const int DBG_EXCEPTION_NOT_HANDLED = 2147549185;

const int STATUS_ACCESS_VIOLATION = 3221225477;

const int STATUS_IN_PAGE_ERROR = 3221225478;

const int STATUS_INVALID_HANDLE = 3221225480;

const int STATUS_INVALID_PARAMETER = 3221225485;

const int STATUS_NO_MEMORY = 3221225495;

const int STATUS_ILLEGAL_INSTRUCTION = 3221225501;

const int STATUS_NONCONTINUABLE_EXCEPTION = 3221225509;

const int STATUS_INVALID_DISPOSITION = 3221225510;

const int STATUS_ARRAY_BOUNDS_EXCEEDED = 3221225612;

const int STATUS_FLOAT_DENORMAL_OPERAND = 3221225613;

const int STATUS_FLOAT_DIVIDE_BY_ZERO = 3221225614;

const int STATUS_FLOAT_INEXACT_RESULT = 3221225615;

const int STATUS_FLOAT_INVALID_OPERATION = 3221225616;

const int STATUS_FLOAT_OVERFLOW = 3221225617;

const int STATUS_FLOAT_STACK_CHECK = 3221225618;

const int STATUS_FLOAT_UNDERFLOW = 3221225619;

const int STATUS_INTEGER_DIVIDE_BY_ZERO = 3221225620;

const int STATUS_INTEGER_OVERFLOW = 3221225621;

const int STATUS_PRIVILEGED_INSTRUCTION = 3221225622;

const int STATUS_STACK_OVERFLOW = 3221225725;

const int STATUS_DLL_NOT_FOUND = 3221225781;

const int STATUS_ORDINAL_NOT_FOUND = 3221225784;

const int STATUS_ENTRYPOINT_NOT_FOUND = 3221225785;

const int STATUS_CONTROL_C_EXIT = 3221225786;

const int STATUS_DLL_INIT_FAILED = 3221225794;

const int STATUS_CONTROL_STACK_VIOLATION = 3221225906;

const int STATUS_FLOAT_MULTIPLE_FAULTS = 3221226164;

const int STATUS_FLOAT_MULTIPLE_TRAPS = 3221226165;

const int STATUS_REG_NAT_CONSUMPTION = 3221226185;

const int STATUS_HEAP_CORRUPTION = 3221226356;

const int STATUS_STACK_BUFFER_OVERRUN = 3221226505;

const int STATUS_INVALID_CRUNTIME_PARAMETER = 3221226519;

const int STATUS_ASSERTION_FAILURE = 3221226528;

const int STATUS_ENCLAVE_VIOLATION = 3221226658;

const int STATUS_INTERRUPTED = 3221226773;

const int STATUS_THREAD_NOT_RUNNING = 3221226774;

const int STATUS_ALREADY_REGISTERED = 3221227288;

const int STATUS_SXS_EARLY_DEACTIVATION = 3222601743;

const int STATUS_SXS_INVALID_DEACTIVATION = 3222601744;

const int MAXIMUM_WAIT_OBJECTS = 64;

const int MAXIMUM_SUSPEND_COUNT = 127;

const int _MM_HINT_T0 = 1;

const int _MM_HINT_T1 = 2;

const int _MM_HINT_T2 = 3;

const int _MM_HINT_NTA = 0;

const int PF_TEMPORAL_LEVEL_1 = 1;

const int PF_TEMPORAL_LEVEL_2 = 2;

const int PF_TEMPORAL_LEVEL_3 = 3;

const int PF_NON_TEMPORAL_LEVEL_ALL = 0;

const int EXCEPTION_READ_FAULT = 0;

const int EXCEPTION_WRITE_FAULT = 1;

const int EXCEPTION_EXECUTE_FAULT = 8;

const int CONTEXT_AMD64 = 1048576;

const int CONTEXT_CONTROL = 1048577;

const int CONTEXT_INTEGER = 1048578;

const int CONTEXT_SEGMENTS = 1048580;

const int CONTEXT_FLOATING_POINT = 1048584;

const int CONTEXT_DEBUG_REGISTERS = 1048592;

const int CONTEXT_FULL = 1048587;

const int CONTEXT_ALL = 1048607;

const int CONTEXT_XSTATE = 1048640;

const int CONTEXT_KERNEL_CET = 1048704;

const int CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int CONTEXT_SERVICE_ACTIVE = 268435456;

const int CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int CONTEXT_UNWOUND_TO_CALL = 536870912;

const int INITIAL_MXCSR = 8064;

const int INITIAL_FPCSR = 639;

const int RUNTIME_FUNCTION_INDIRECT = 1;

const int UNW_FLAG_NHANDLER = 0;

const int UNW_FLAG_EHANDLER = 1;

const int UNW_FLAG_UHANDLER = 2;

const int UNW_FLAG_CHAININFO = 4;

const int UNW_FLAG_NO_EPILOGUE = 2147483648;

const int UNWIND_CHAIN_LIMIT = 32;

const String OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME =
    'OutOfProcessFunctionTableCallback';

const int CONTEXT_ARM64 = 4194304;

const int CONTEXT_ARM64_CONTROL = 4194305;

const int CONTEXT_ARM64_INTEGER = 4194306;

const int CONTEXT_ARM64_FLOATING_POINT = 4194308;

const int CONTEXT_ARM64_DEBUG_REGISTERS = 4194312;

const int CONTEXT_ARM64_X18 = 4194320;

const int CONTEXT_ARM64_FULL = 4194311;

const int CONTEXT_ARM64_ALL = 4194335;

const int CONTEXT_ARM64_UNWOUND_TO_CALL = 536870912;

const int CONTEXT_ARM64_RET_TO_GUEST = 67108864;

const int ARM64_MAX_BREAKPOINTS = 8;

const int ARM64_MAX_WATCHPOINTS = 2;

const int NONVOL_INT_NUMREG_ARM64 = 11;

const int NONVOL_FP_NUMREG_ARM64 = 8;

const int NONVOL_INT_SIZE_ARM64 = 88;

const int NONVOL_FP_SIZE_ARM64 = 64;

const int WOW64_CONTEXT_i386 = 65536;

const int WOW64_CONTEXT_i486 = 65536;

const int WOW64_CONTEXT_CONTROL = 65537;

const int WOW64_CONTEXT_INTEGER = 65538;

const int WOW64_CONTEXT_SEGMENTS = 65540;

const int WOW64_CONTEXT_FLOATING_POINT = 65544;

const int WOW64_CONTEXT_DEBUG_REGISTERS = 65552;

const int WOW64_CONTEXT_EXTENDED_REGISTERS = 65568;

const int WOW64_CONTEXT_FULL = 65543;

const int WOW64_CONTEXT_ALL = 65599;

const int WOW64_CONTEXT_XSTATE = 65600;

const int WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728;

const int WOW64_CONTEXT_SERVICE_ACTIVE = 268435456;

const int WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824;

const int WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648;

const int WOW64_SIZE_OF_80387_REGISTERS = 80;

const int WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;

const int EXCEPTION_NONCONTINUABLE = 1;

const int EXCEPTION_UNWINDING = 2;

const int EXCEPTION_EXIT_UNWIND = 4;

const int EXCEPTION_STACK_INVALID = 8;

const int EXCEPTION_NESTED_CALL = 16;

const int EXCEPTION_TARGET_UNWIND = 32;

const int EXCEPTION_COLLIDED_UNWIND = 64;

const int EXCEPTION_SOFTWARE_ORIGINATE = 128;

const int EXCEPTION_UNWIND = 102;

const int EXCEPTION_MAXIMUM_PARAMETERS = 15;

const int DELETE = 65536;

const int READ_CONTROL = 131072;

const int WRITE_DAC = 262144;

const int WRITE_OWNER = 524288;

const int SYNCHRONIZE = 1048576;

const int STANDARD_RIGHTS_REQUIRED = 983040;

const int STANDARD_RIGHTS_READ = 131072;

const int STANDARD_RIGHTS_WRITE = 131072;

const int STANDARD_RIGHTS_EXECUTE = 131072;

const int STANDARD_RIGHTS_ALL = 2031616;

const int SPECIFIC_RIGHTS_ALL = 65535;

const int ACCESS_SYSTEM_SECURITY = 16777216;

const int MAXIMUM_ALLOWED = 33554432;

const int GENERIC_READ = 2147483648;

const int GENERIC_WRITE = 1073741824;

const int GENERIC_EXECUTE = 536870912;

const int GENERIC_ALL = 268435456;

const int SID_REVISION = 1;

const int SID_MAX_SUB_AUTHORITIES = 15;

const int SID_RECOMMENDED_SUB_AUTHORITIES = 1;

const int SECURITY_MAX_SID_SIZE = 68;

const int SECURITY_MAX_SID_STRING_CHARACTERS = 187;

const int SID_HASH_SIZE = 32;

const int SECURITY_NULL_RID = 0;

const int SECURITY_WORLD_RID = 0;

const int SECURITY_LOCAL_RID = 0;

const int SECURITY_LOCAL_LOGON_RID = 1;

const int SECURITY_CREATOR_OWNER_RID = 0;

const int SECURITY_CREATOR_GROUP_RID = 1;

const int SECURITY_CREATOR_OWNER_SERVER_RID = 2;

const int SECURITY_CREATOR_GROUP_SERVER_RID = 3;

const int SECURITY_CREATOR_OWNER_RIGHTS_RID = 4;

const int SECURITY_DIALUP_RID = 1;

const int SECURITY_NETWORK_RID = 2;

const int SECURITY_BATCH_RID = 3;

const int SECURITY_INTERACTIVE_RID = 4;

const int SECURITY_LOGON_IDS_RID = 5;

const int SECURITY_LOGON_IDS_RID_COUNT = 3;

const int SECURITY_SERVICE_RID = 6;

const int SECURITY_ANONYMOUS_LOGON_RID = 7;

const int SECURITY_PROXY_RID = 8;

const int SECURITY_ENTERPRISE_CONTROLLERS_RID = 9;

const int SECURITY_SERVER_LOGON_RID = 9;

const int SECURITY_PRINCIPAL_SELF_RID = 10;

const int SECURITY_AUTHENTICATED_USER_RID = 11;

const int SECURITY_RESTRICTED_CODE_RID = 12;

const int SECURITY_TERMINAL_SERVER_RID = 13;

const int SECURITY_REMOTE_LOGON_RID = 14;

const int SECURITY_THIS_ORGANIZATION_RID = 15;

const int SECURITY_IUSER_RID = 17;

const int SECURITY_LOCAL_SYSTEM_RID = 18;

const int SECURITY_LOCAL_SERVICE_RID = 19;

const int SECURITY_NETWORK_SERVICE_RID = 20;

const int SECURITY_NT_NON_UNIQUE = 21;

const int SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = 3;

const int SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = 22;

const int SECURITY_BUILTIN_DOMAIN_RID = 32;

const int SECURITY_WRITE_RESTRICTED_CODE_RID = 33;

const int SECURITY_PACKAGE_BASE_RID = 64;

const int SECURITY_PACKAGE_RID_COUNT = 2;

const int SECURITY_PACKAGE_NTLM_RID = 10;

const int SECURITY_PACKAGE_SCHANNEL_RID = 14;

const int SECURITY_PACKAGE_DIGEST_RID = 21;

const int SECURITY_CRED_TYPE_BASE_RID = 65;

const int SECURITY_CRED_TYPE_RID_COUNT = 2;

const int SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = 1;

const int SECURITY_MIN_BASE_RID = 80;

const int SECURITY_SERVICE_ID_BASE_RID = 80;

const int SECURITY_SERVICE_ID_RID_COUNT = 6;

const int SECURITY_RESERVED_ID_BASE_RID = 81;

const int SECURITY_APPPOOL_ID_BASE_RID = 82;

const int SECURITY_APPPOOL_ID_RID_COUNT = 6;

const int SECURITY_VIRTUALSERVER_ID_BASE_RID = 83;

const int SECURITY_VIRTUALSERVER_ID_RID_COUNT = 6;

const int SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = 84;

const int SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = 6;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = 85;

const int SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = 6;

const int SECURITY_WMIHOST_ID_BASE_RID = 86;

const int SECURITY_WMIHOST_ID_RID_COUNT = 6;

const int SECURITY_TASK_ID_BASE_RID = 87;

const int SECURITY_NFS_ID_BASE_RID = 88;

const int SECURITY_COM_ID_BASE_RID = 89;

const int SECURITY_WINDOW_MANAGER_BASE_RID = 90;

const int SECURITY_RDV_GFX_BASE_RID = 91;

const int SECURITY_DASHOST_ID_BASE_RID = 92;

const int SECURITY_DASHOST_ID_RID_COUNT = 6;

const int SECURITY_USERMANAGER_ID_BASE_RID = 93;

const int SECURITY_USERMANAGER_ID_RID_COUNT = 6;

const int SECURITY_WINRM_ID_BASE_RID = 94;

const int SECURITY_WINRM_ID_RID_COUNT = 6;

const int SECURITY_CCG_ID_BASE_RID = 95;

const int SECURITY_UMFD_BASE_RID = 96;

const int SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = 6;

const int SECURITY_MAX_BASE_RID = 111;

const int SECURITY_MAX_ALWAYS_FILTERED = 999;

const int SECURITY_MIN_NEVER_FILTERED = 1000;

const int SECURITY_OTHER_ORGANIZATION_RID = 1000;

const int SECURITY_WINDOWSMOBILE_ID_BASE_RID = 112;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 32;

const int SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9;

const int SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10;

const int SECURITY_LOCAL_ACCOUNT_RID = 113;

const int SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = 114;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = 496;

const int DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = 497;

const int DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = 498;

const int FOREST_USER_RID_MAX = 499;

const int DOMAIN_USER_RID_ADMIN = 500;

const int DOMAIN_USER_RID_GUEST = 501;

const int DOMAIN_USER_RID_KRBTGT = 502;

const int DOMAIN_USER_RID_DEFAULT_ACCOUNT = 503;

const int DOMAIN_USER_RID_WDAG_ACCOUNT = 504;

const int DOMAIN_USER_RID_MAX = 999;

const int DOMAIN_GROUP_RID_ADMINS = 512;

const int DOMAIN_GROUP_RID_USERS = 513;

const int DOMAIN_GROUP_RID_GUESTS = 514;

const int DOMAIN_GROUP_RID_COMPUTERS = 515;

const int DOMAIN_GROUP_RID_CONTROLLERS = 516;

const int DOMAIN_GROUP_RID_CERT_ADMINS = 517;

const int DOMAIN_GROUP_RID_SCHEMA_ADMINS = 518;

const int DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 519;

const int DOMAIN_GROUP_RID_POLICY_ADMINS = 520;

const int DOMAIN_GROUP_RID_READONLY_CONTROLLERS = 521;

const int DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = 522;

const int DOMAIN_GROUP_RID_CDC_RESERVED = 524;

const int DOMAIN_GROUP_RID_PROTECTED_USERS = 525;

const int DOMAIN_GROUP_RID_KEY_ADMINS = 526;

const int DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = 527;

const int DOMAIN_ALIAS_RID_ADMINS = 544;

const int DOMAIN_ALIAS_RID_USERS = 545;

const int DOMAIN_ALIAS_RID_GUESTS = 546;

const int DOMAIN_ALIAS_RID_POWER_USERS = 547;

const int DOMAIN_ALIAS_RID_ACCOUNT_OPS = 548;

const int DOMAIN_ALIAS_RID_SYSTEM_OPS = 549;

const int DOMAIN_ALIAS_RID_PRINT_OPS = 550;

const int DOMAIN_ALIAS_RID_BACKUP_OPS = 551;

const int DOMAIN_ALIAS_RID_REPLICATOR = 552;

const int DOMAIN_ALIAS_RID_RAS_SERVERS = 553;

const int DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 554;

const int DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = 555;

const int DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = 556;

const int DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = 557;

const int DOMAIN_ALIAS_RID_MONITORING_USERS = 558;

const int DOMAIN_ALIAS_RID_LOGGING_USERS = 559;

const int DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = 560;

const int DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = 561;

const int DOMAIN_ALIAS_RID_DCOM_USERS = 562;

const int DOMAIN_ALIAS_RID_IUSERS = 568;

const int DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = 569;

const int DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = 571;

const int DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = 572;

const int DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = 573;

const int DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = 574;

const int DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = 575;

const int DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = 576;

const int DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = 577;

const int DOMAIN_ALIAS_RID_HYPER_V_ADMINS = 578;

const int DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = 579;

const int DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = 580;

const int DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = 581;

const int DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = 582;

const int DOMAIN_ALIAS_RID_DEVICE_OWNERS = 583;

const int SECURITY_APP_PACKAGE_BASE_RID = 2;

const int SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = 2;

const int SECURITY_APP_PACKAGE_RID_COUNT = 8;

const int SECURITY_CAPABILITY_BASE_RID = 3;

const int SECURITY_CAPABILITY_APP_RID = 1024;

const int SECURITY_CAPABILITY_APP_SILO_RID = 65536;

const int SECURITY_BUILTIN_CAPABILITY_RID_COUNT = 2;

const int SECURITY_CAPABILITY_RID_COUNT = 5;

const int SECURITY_PARENT_PACKAGE_RID_COUNT = 8;

const int SECURITY_CHILD_PACKAGE_RID_COUNT = 12;

const int SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = 1;

const int SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = 2;

const int SECURITY_CAPABILITY_INTERNET_CLIENT = 1;

const int SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = 2;

const int SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = 3;

const int SECURITY_CAPABILITY_PICTURES_LIBRARY = 4;

const int SECURITY_CAPABILITY_VIDEOS_LIBRARY = 5;

const int SECURITY_CAPABILITY_MUSIC_LIBRARY = 6;

const int SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = 7;

const int SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = 8;

const int SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = 9;

const int SECURITY_CAPABILITY_REMOVABLE_STORAGE = 10;

const int SECURITY_CAPABILITY_APPOINTMENTS = 11;

const int SECURITY_CAPABILITY_CONTACTS = 12;

const int SECURITY_CAPABILITY_INTERNET_EXPLORER = 4096;

const int SECURITY_MANDATORY_UNTRUSTED_RID = 0;

const int SECURITY_MANDATORY_LOW_RID = 4096;

const int SECURITY_MANDATORY_MEDIUM_RID = 8192;

const int SECURITY_MANDATORY_MEDIUM_PLUS_RID = 8448;

const int SECURITY_MANDATORY_HIGH_RID = 12288;

const int SECURITY_MANDATORY_SYSTEM_RID = 16384;

const int SECURITY_MANDATORY_PROTECTED_PROCESS_RID = 20480;

const int SECURITY_MANDATORY_MAXIMUM_USER_RID = 16384;

const int SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = 1;

const int SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = 1;

const int SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = 2;

const int SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = 3;

const int SECURITY_AUTHENTICATION_KEY_TRUST_RID = 4;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = 5;

const int SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = 6;

const int SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = 2;

const int SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = 512;

const int SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = 0;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = 8192;

const int SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = 4096;

const int SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = 2048;

const int SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = 1536;

const int SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = 1024;

const int SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = 0;

const int SECURITY_TRUSTED_INSTALLER_RID1 = 956008885;

const int SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649;

const int SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044;

const int SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631;

const int SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464;

const int SE_GROUP_MANDATORY = 1;

const int SE_GROUP_ENABLED_BY_DEFAULT = 2;

const int SE_GROUP_ENABLED = 4;

const int SE_GROUP_OWNER = 8;

const int SE_GROUP_USE_FOR_DENY_ONLY = 16;

const int SE_GROUP_INTEGRITY = 32;

const int SE_GROUP_INTEGRITY_ENABLED = 64;

const int SE_GROUP_LOGON_ID = 3221225472;

const int SE_GROUP_RESOURCE = 536870912;

const int SE_GROUP_VALID_ATTRIBUTES = 3758096511;

const int ACL_REVISION = 2;

const int ACL_REVISION_DS = 4;

const int ACL_REVISION1 = 1;

const int MIN_ACL_REVISION = 2;

const int ACL_REVISION2 = 2;

const int ACL_REVISION3 = 3;

const int ACL_REVISION4 = 4;

const int MAX_ACL_REVISION = 4;

const int ACCESS_MIN_MS_ACE_TYPE = 0;

const int ACCESS_ALLOWED_ACE_TYPE = 0;

const int ACCESS_DENIED_ACE_TYPE = 1;

const int SYSTEM_AUDIT_ACE_TYPE = 2;

const int SYSTEM_ALARM_ACE_TYPE = 3;

const int ACCESS_MAX_MS_V2_ACE_TYPE = 3;

const int ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4;

const int ACCESS_MAX_MS_V3_ACE_TYPE = 4;

const int ACCESS_MIN_MS_OBJECT_ACE_TYPE = 5;

const int ACCESS_ALLOWED_OBJECT_ACE_TYPE = 5;

const int ACCESS_DENIED_OBJECT_ACE_TYPE = 6;

const int SYSTEM_AUDIT_OBJECT_ACE_TYPE = 7;

const int SYSTEM_ALARM_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_OBJECT_ACE_TYPE = 8;

const int ACCESS_MAX_MS_V4_ACE_TYPE = 8;

const int ACCESS_MAX_MS_ACE_TYPE = 8;

const int ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 9;

const int ACCESS_DENIED_CALLBACK_ACE_TYPE = 10;

const int ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 11;

const int ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 12;

const int SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 13;

const int SYSTEM_ALARM_CALLBACK_ACE_TYPE = 14;

const int SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 15;

const int SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 16;

const int SYSTEM_MANDATORY_LABEL_ACE_TYPE = 17;

const int SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = 18;

const int SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = 19;

const int SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = 20;

const int SYSTEM_ACCESS_FILTER_ACE_TYPE = 21;

const int ACCESS_MAX_MS_V5_ACE_TYPE = 21;

const int OBJECT_INHERIT_ACE = 1;

const int CONTAINER_INHERIT_ACE = 2;

const int NO_PROPAGATE_INHERIT_ACE = 4;

const int INHERIT_ONLY_ACE = 8;

const int INHERITED_ACE = 16;

const int VALID_INHERIT_FLAGS = 31;

const int CRITICAL_ACE_FLAG = 32;

const int SUCCESSFUL_ACCESS_ACE_FLAG = 64;

const int FAILED_ACCESS_ACE_FLAG = 128;

const int TRUST_PROTECTED_FILTER_ACE_FLAG = 64;

const int SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 1;

const int SYSTEM_MANDATORY_LABEL_NO_READ_UP = 2;

const int SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 4;

const int SYSTEM_MANDATORY_LABEL_VALID_MASK = 7;

const int SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK = 16777215;

const int SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = 4294967295;

const int SYSTEM_ACCESS_FILTER_VALID_MASK = 16777215;

const int SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = 4294967295;

const int ACE_OBJECT_TYPE_PRESENT = 1;

const int ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;

const int SECURITY_DESCRIPTOR_REVISION = 1;

const int SECURITY_DESCRIPTOR_REVISION1 = 1;

const int SECURITY_DESCRIPTOR_MIN_LENGTH = 40;

const int SE_OWNER_DEFAULTED = 1;

const int SE_GROUP_DEFAULTED = 2;

const int SE_DACL_PRESENT = 4;

const int SE_DACL_DEFAULTED = 8;

const int SE_SACL_PRESENT = 16;

const int SE_SACL_DEFAULTED = 32;

const int SE_DACL_AUTO_INHERIT_REQ = 256;

const int SE_SACL_AUTO_INHERIT_REQ = 512;

const int SE_DACL_AUTO_INHERITED = 1024;

const int SE_SACL_AUTO_INHERITED = 2048;

const int SE_DACL_PROTECTED = 4096;

const int SE_SACL_PROTECTED = 8192;

const int SE_RM_CONTROL_VALID = 16384;

const int SE_SELF_RELATIVE = 32768;

const int ACCESS_OBJECT_GUID = 0;

const int ACCESS_PROPERTY_SET_GUID = 1;

const int ACCESS_PROPERTY_GUID = 2;

const int ACCESS_MAX_LEVEL = 4;

const int AUDIT_ALLOW_NO_PRIVILEGE = 1;

const String ACCESS_DS_SOURCE_A = 'DS';

const String ACCESS_DS_SOURCE_W = 'D';

const String ACCESS_DS_OBJECT_TYPE_NAME_A = 'Directory Service Object';

const String ACCESS_DS_OBJECT_TYPE_NAME_W = 'D';

const int SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;

const int SE_PRIVILEGE_ENABLED = 2;

const int SE_PRIVILEGE_REMOVED = 4;

const int SE_PRIVILEGE_USED_FOR_ACCESS = 2147483648;

const int SE_PRIVILEGE_VALID_ATTRIBUTES = 2147483655;

const int PRIVILEGE_SET_ALL_NECESSARY = 1;

const int ACCESS_REASON_TYPE_MASK = 16711680;

const int ACCESS_REASON_DATA_MASK = 65535;

const int ACCESS_REASON_STAGING_MASK = 2147483648;

const int ACCESS_REASON_EXDATA_MASK = 2130706432;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 1;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 2;

const int SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE = 4;

const int SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 7;

const int SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING = 8;

const int SE_ACCESS_CHECK_VALID_FLAGS = 8;

const String SE_CREATE_TOKEN_NAME = 'SeCreateTokenPrivilege';

const String SE_ASSIGNPRIMARYTOKEN_NAME = 'SeAssignPrimaryTokenPrivilege';

const String SE_LOCK_MEMORY_NAME = 'SeLockMemoryPrivilege';

const String SE_INCREASE_QUOTA_NAME = 'SeIncreaseQuotaPrivilege';

const String SE_UNSOLICITED_INPUT_NAME = 'SeUnsolicitedInputPrivilege';

const String SE_MACHINE_ACCOUNT_NAME = 'SeMachineAccountPrivilege';

const String SE_TCB_NAME = 'SeTcbPrivilege';

const String SE_SECURITY_NAME = 'SeSecurityPrivilege';

const String SE_TAKE_OWNERSHIP_NAME = 'SeTakeOwnershipPrivilege';

const String SE_LOAD_DRIVER_NAME = 'SeLoadDriverPrivilege';

const String SE_SYSTEM_PROFILE_NAME = 'SeSystemProfilePrivilege';

const String SE_SYSTEMTIME_NAME = 'SeSystemtimePrivilege';

const String SE_PROF_SINGLE_PROCESS_NAME = 'SeProfileSingleProcessPrivilege';

const String SE_INC_BASE_PRIORITY_NAME = 'SeIncreaseBasePriorityPrivilege';

const String SE_CREATE_PAGEFILE_NAME = 'SeCreatePagefilePrivilege';

const String SE_CREATE_PERMANENT_NAME = 'SeCreatePermanentPrivilege';

const String SE_BACKUP_NAME = 'SeBackupPrivilege';

const String SE_RESTORE_NAME = 'SeRestorePrivilege';

const String SE_SHUTDOWN_NAME = 'SeShutdownPrivilege';

const String SE_DEBUG_NAME = 'SeDebugPrivilege';

const String SE_AUDIT_NAME = 'SeAuditPrivilege';

const String SE_SYSTEM_ENVIRONMENT_NAME = 'SeSystemEnvironmentPrivilege';

const String SE_CHANGE_NOTIFY_NAME = 'SeChangeNotifyPrivilege';

const String SE_REMOTE_SHUTDOWN_NAME = 'SeRemoteShutdownPrivilege';

const String SE_UNDOCK_NAME = 'SeUndockPrivilege';

const String SE_SYNC_AGENT_NAME = 'SeSyncAgentPrivilege';

const String SE_ENABLE_DELEGATION_NAME = 'SeEnableDelegationPrivilege';

const String SE_MANAGE_VOLUME_NAME = 'SeManageVolumePrivilege';

const String SE_IMPERSONATE_NAME = 'SeImpersonatePrivilege';

const String SE_CREATE_GLOBAL_NAME = 'SeCreateGlobalPrivilege';

const String SE_TRUSTED_CREDMAN_ACCESS_NAME = 'SeTrustedCredManAccessPrivilege';

const String SE_RELABEL_NAME = 'SeRelabelPrivilege';

const String SE_INC_WORKING_SET_NAME = 'SeIncreaseWorkingSetPrivilege';

const String SE_TIME_ZONE_NAME = 'SeTimeZonePrivilege';

const String SE_CREATE_SYMBOLIC_LINK_NAME = 'SeCreateSymbolicLinkPrivilege';

const String SE_DELEGATE_SESSION_USER_IMPERSONATE_NAME =
    'SeDelegateSessionUserImpersonatePrivilege';

const String SE_ACTIVATE_AS_USER_CAPABILITY = 'a';

const String SE_CONSTRAINED_IMPERSONATION_CAPABILITY = 'c';

const String SE_SESSION_IMPERSONATION_CAPABILITY = 's';

const String SE_MUMA_CAPABILITY = 'm';

const String SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY = 'd';

const String SE_LEARNING_MODE_LOGGING_CAPABILITY = 'l';

const String SE_PERMISSIVE_LEARNING_MODE_CAPABILITY = 'p';

const String SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY = 'i';

const String SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY = 'i';

const String SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY = 'i';

const String SE_APP_SILO_PRINT_CAPABILITY = 'i';

const int SECURITY_MAX_IMPERSONATION_LEVEL = 3;

const int SECURITY_MIN_IMPERSONATION_LEVEL = 0;

const int DEFAULT_IMPERSONATION_LEVEL = 2;

const int TOKEN_ASSIGN_PRIMARY = 1;

const int TOKEN_DUPLICATE = 2;

const int TOKEN_IMPERSONATE = 4;

const int TOKEN_QUERY = 8;

const int TOKEN_QUERY_SOURCE = 16;

const int TOKEN_ADJUST_PRIVILEGES = 32;

const int TOKEN_ADJUST_GROUPS = 64;

const int TOKEN_ADJUST_DEFAULT = 128;

const int TOKEN_ADJUST_SESSIONID = 256;

const int TOKEN_ALL_ACCESS_P = 983295;

const int TOKEN_ALL_ACCESS = 983551;

const int TOKEN_READ = 131080;

const int TOKEN_WRITE = 131296;

const int TOKEN_EXECUTE = 131072;

const int TOKEN_TRUST_CONSTRAINT_MASK = 131096;

const int TOKEN_TRUST_ALLOWED_MASK = 131102;

const int TOKEN_ACCESS_PSEUDO_HANDLE_WIN8 = 24;

const int TOKEN_ACCESS_PSEUDO_HANDLE = 24;

const int TOKEN_USER_MAX_SIZE = 84;

const int TOKEN_OWNER_MAX_SIZE = 76;

const int TOKEN_MANDATORY_POLICY_OFF = 0;

const int TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 1;

const int TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 2;

const int TOKEN_MANDATORY_POLICY_VALID_MASK = 3;

const int TOKEN_INTEGRITY_LEVEL_MAX_SIZE = 84;

const int POLICY_AUDIT_SUBCATEGORY_COUNT = 59;

const int TOKEN_SOURCE_LENGTH = 8;

const int TOKEN_APPCONTAINER_SID_MAX_SIZE = 76;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 3;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 5;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;

const int CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;

const int CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;

const int CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;

const int CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 4;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 8;

const int CLAIM_SECURITY_ATTRIBUTE_DISABLED = 16;

const int CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 32;

const int CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS = 63;

const int CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = 4294901760;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;

const int CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION = 1;

const int SECURITY_DYNAMIC_TRACKING = 1;

const int SECURITY_STATIC_TRACKING = 0;

const int DISABLE_MAX_PRIVILEGE = 1;

const int SANDBOX_INERT = 2;

const int LUA_TOKEN = 4;

const int WRITE_RESTRICTED = 8;

const int OWNER_SECURITY_INFORMATION = 1;

const int GROUP_SECURITY_INFORMATION = 2;

const int DACL_SECURITY_INFORMATION = 4;

const int SACL_SECURITY_INFORMATION = 8;

const int LABEL_SECURITY_INFORMATION = 16;

const int ATTRIBUTE_SECURITY_INFORMATION = 32;

const int SCOPE_SECURITY_INFORMATION = 64;

const int PROCESS_TRUST_LABEL_SECURITY_INFORMATION = 128;

const int ACCESS_FILTER_SECURITY_INFORMATION = 256;

const int BACKUP_SECURITY_INFORMATION = 65536;

const int PROTECTED_DACL_SECURITY_INFORMATION = 2147483648;

const int PROTECTED_SACL_SECURITY_INFORMATION = 1073741824;

const int UNPROTECTED_DACL_SECURITY_INFORMATION = 536870912;

const int UNPROTECTED_SACL_SECURITY_INFORMATION = 268435456;

const int SE_SIGNING_LEVEL_UNCHECKED = 0;

const int SE_SIGNING_LEVEL_UNSIGNED = 1;

const int SE_SIGNING_LEVEL_ENTERPRISE = 2;

const int SE_SIGNING_LEVEL_CUSTOM_1 = 3;

const int SE_SIGNING_LEVEL_DEVELOPER = 3;

const int SE_SIGNING_LEVEL_AUTHENTICODE = 4;

const int SE_SIGNING_LEVEL_CUSTOM_2 = 5;

const int SE_SIGNING_LEVEL_STORE = 6;

const int SE_SIGNING_LEVEL_CUSTOM_3 = 7;

const int SE_SIGNING_LEVEL_ANTIMALWARE = 7;

const int SE_SIGNING_LEVEL_MICROSOFT = 8;

const int SE_SIGNING_LEVEL_CUSTOM_4 = 9;

const int SE_SIGNING_LEVEL_CUSTOM_5 = 10;

const int SE_SIGNING_LEVEL_DYNAMIC_CODEGEN = 11;

const int SE_SIGNING_LEVEL_WINDOWS = 12;

const int SE_SIGNING_LEVEL_CUSTOM_7 = 13;

const int SE_SIGNING_LEVEL_WINDOWS_TCB = 14;

const int SE_SIGNING_LEVEL_CUSTOM_6 = 15;

const int PROCESS_TERMINATE = 1;

const int PROCESS_CREATE_THREAD = 2;

const int PROCESS_SET_SESSIONID = 4;

const int PROCESS_VM_OPERATION = 8;

const int PROCESS_VM_READ = 16;

const int PROCESS_VM_WRITE = 32;

const int PROCESS_DUP_HANDLE = 64;

const int PROCESS_CREATE_PROCESS = 128;

const int PROCESS_SET_QUOTA = 256;

const int PROCESS_SET_INFORMATION = 512;

const int PROCESS_QUERY_INFORMATION = 1024;

const int PROCESS_SUSPEND_RESUME = 2048;

const int PROCESS_QUERY_LIMITED_INFORMATION = 4096;

const int PROCESS_SET_LIMITED_INFORMATION = 8192;

const int PROCESS_ALL_ACCESS = 2097151;

const int THREAD_TERMINATE = 1;

const int THREAD_SUSPEND_RESUME = 2;

const int THREAD_GET_CONTEXT = 8;

const int THREAD_SET_CONTEXT = 16;

const int THREAD_QUERY_INFORMATION = 64;

const int THREAD_SET_INFORMATION = 32;

const int THREAD_SET_THREAD_TOKEN = 128;

const int THREAD_IMPERSONATE = 256;

const int THREAD_DIRECT_IMPERSONATION = 512;

const int THREAD_SET_LIMITED_INFORMATION = 1024;

const int THREAD_QUERY_LIMITED_INFORMATION = 2048;

const int THREAD_RESUME = 4096;

const int THREAD_ALL_ACCESS = 2097151;

const int JOB_OBJECT_ASSIGN_PROCESS = 1;

const int JOB_OBJECT_SET_ATTRIBUTES = 2;

const int JOB_OBJECT_QUERY = 4;

const int JOB_OBJECT_TERMINATE = 8;

const int JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 16;

const int JOB_OBJECT_IMPERSONATE = 32;

const int JOB_OBJECT_ALL_ACCESS = 2031679;

const int FLS_MAXIMUM_AVAILABLE = 4080;

const int TLS_MINIMUM_AVAILABLE = 64;

const int THREAD_DYNAMIC_CODE_ALLOW = 1;

const int THREAD_BASE_PRIORITY_LOWRT = 15;

const int THREAD_BASE_PRIORITY_MAX = 2;

const int THREAD_BASE_PRIORITY_MIN = -2;

const int THREAD_BASE_PRIORITY_IDLE = -15;

const int COMPONENT_KTM = 1;

const int COMPONENT_VALID_FLAGS = 1;

const int MEMORY_PRIORITY_LOWEST = 0;

const int MEMORY_PRIORITY_VERY_LOW = 1;

const int MEMORY_PRIORITY_LOW = 2;

const int MEMORY_PRIORITY_MEDIUM = 3;

const int MEMORY_PRIORITY_BELOW_NORMAL = 4;

const int MEMORY_PRIORITY_NORMAL = 5;

const int DYNAMIC_EH_CONTINUATION_TARGET_ADD = 1;

const int DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED = 2;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD = 1;

const int DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED = 2;

const int QUOTA_LIMITS_HARDWS_MIN_ENABLE = 1;

const int QUOTA_LIMITS_HARDWS_MIN_DISABLE = 2;

const int QUOTA_LIMITS_HARDWS_MAX_ENABLE = 4;

const int QUOTA_LIMITS_HARDWS_MAX_DISABLE = 8;

const int QUOTA_LIMITS_USE_DEFAULT_LIMITS = 16;

const int MAX_HW_COUNTERS = 16;

const int THREAD_PROFILING_FLAG_DISPATCH = 1;

const int JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG = 64;

const int JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;

const int JOB_OBJECT_POST_AT_END_OF_JOB = 1;

const int JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;

const int JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;

const int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;

const int JOB_OBJECT_MSG_NEW_PROCESS = 6;

const int JOB_OBJECT_MSG_EXIT_PROCESS = 7;

const int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;

const int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;

const int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;

const int JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11;

const int JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12;

const int JOB_OBJECT_MSG_SILO_TERMINATED = 13;

const int JOB_OBJECT_MSG_MINIMUM = 1;

const int JOB_OBJECT_MSG_MAXIMUM = 13;

const int JOB_OBJECT_VALID_COMPLETION_FILTER = 16382;

const int JOB_OBJECT_LIMIT_WORKINGSET = 1;

const int JOB_OBJECT_LIMIT_PROCESS_TIME = 2;

const int JOB_OBJECT_LIMIT_JOB_TIME = 4;

const int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8;

const int JOB_OBJECT_LIMIT_AFFINITY = 16;

const int JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32;

const int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64;

const int JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128;

const int JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256;

const int JOB_OBJECT_LIMIT_JOB_MEMORY = 512;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = 512;

const int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024;

const int JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048;

const int JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096;

const int JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192;

const int JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 16384;

const int JOB_OBJECT_LIMIT_JOB_MEMORY_LOW = 32768;

const int JOB_OBJECT_LIMIT_JOB_READ_BYTES = 65536;

const int JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = 131072;

const int JOB_OBJECT_LIMIT_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = 262144;

const int JOB_OBJECT_LIMIT_IO_RATE_CONTROL = 524288;

const int JOB_OBJECT_LIMIT_NET_RATE_CONTROL = 1048576;

const int JOB_OBJECT_LIMIT_VALID_FLAGS = 524287;

const int JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255;

const int JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 32767;

const int JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS = 2064900;

const int JOB_OBJECT_UILIMIT_NONE = 0;

const int JOB_OBJECT_UILIMIT_HANDLES = 1;

const int JOB_OBJECT_UILIMIT_READCLIPBOARD = 2;

const int JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4;

const int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8;

const int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16;

const int JOB_OBJECT_UILIMIT_GLOBALATOMS = 32;

const int JOB_OBJECT_UILIMIT_DESKTOP = 64;

const int JOB_OBJECT_UILIMIT_EXITWINDOWS = 128;

const int JOB_OBJECT_UILIMIT_IME = 256;

const int JOB_OBJECT_UILIMIT_ALL = 511;

const int JOB_OBJECT_UI_VALID_FLAGS = 511;

const int JOB_OBJECT_SECURITY_NO_ADMIN = 1;

const int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2;

const int JOB_OBJECT_SECURITY_ONLY_TOKEN = 4;

const int JOB_OBJECT_SECURITY_FILTER_TOKENS = 8;

const int JOB_OBJECT_SECURITY_VALID_FLAGS = 15;

const int JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 1;

const int JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 2;

const int JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 4;

const int JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 8;

const int JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE = 16;

const int JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = 31;

const int MEMORY_PARTITION_QUERY_ACCESS = 1;

const int MEMORY_PARTITION_MODIFY_ACCESS = 2;

const int MEMORY_PARTITION_ALL_ACCESS = 2031619;

const int EVENT_MODIFY_STATE = 2;

const int EVENT_ALL_ACCESS = 2031619;

const int MUTANT_QUERY_STATE = 1;

const int MUTANT_ALL_ACCESS = 2031617;

const int SEMAPHORE_MODIFY_STATE = 2;

const int SEMAPHORE_ALL_ACCESS = 2031619;

const int TIMER_QUERY_STATE = 1;

const int TIMER_MODIFY_STATE = 2;

const int TIMER_ALL_ACCESS = 2031619;

const int TIME_ZONE_ID_UNKNOWN = 0;

const int TIME_ZONE_ID_STANDARD = 1;

const int TIME_ZONE_ID_DAYLIGHT = 2;

const int LTP_PC_SMT = 1;

const int CACHE_FULLY_ASSOCIATIVE = 255;

const int SYSTEM_CPU_SET_INFORMATION_PARKED = 1;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED = 2;

const int SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS = 4;

const int SYSTEM_CPU_SET_INFORMATION_REALTIME = 8;

const int PROCESSOR_INTEL_386 = 386;

const int PROCESSOR_INTEL_486 = 486;

const int PROCESSOR_INTEL_PENTIUM = 586;

const int PROCESSOR_INTEL_IA64 = 2200;

const int PROCESSOR_AMD_X8664 = 8664;

const int PROCESSOR_MIPS_R4000 = 4000;

const int PROCESSOR_ALPHA_21064 = 21064;

const int PROCESSOR_PPC_601 = 601;

const int PROCESSOR_PPC_603 = 603;

const int PROCESSOR_PPC_604 = 604;

const int PROCESSOR_PPC_620 = 620;

const int PROCESSOR_HITACHI_SH3 = 10003;

const int PROCESSOR_HITACHI_SH3E = 10004;

const int PROCESSOR_HITACHI_SH4 = 10005;

const int PROCESSOR_MOTOROLA_821 = 821;

const int PROCESSOR_SHx_SH3 = 103;

const int PROCESSOR_SHx_SH4 = 104;

const int PROCESSOR_STRONGARM = 2577;

const int PROCESSOR_ARM720 = 1824;

const int PROCESSOR_ARM820 = 2080;

const int PROCESSOR_ARM920 = 2336;

const int PROCESSOR_ARM_7TDMI = 70001;

const int PROCESSOR_OPTIL = 18767;

const int PROCESSOR_ARCHITECTURE_INTEL = 0;

const int PROCESSOR_ARCHITECTURE_MIPS = 1;

const int PROCESSOR_ARCHITECTURE_ALPHA = 2;

const int PROCESSOR_ARCHITECTURE_PPC = 3;

const int PROCESSOR_ARCHITECTURE_SHX = 4;

const int PROCESSOR_ARCHITECTURE_ARM = 5;

const int PROCESSOR_ARCHITECTURE_IA64 = 6;

const int PROCESSOR_ARCHITECTURE_ALPHA64 = 7;

const int PROCESSOR_ARCHITECTURE_MSIL = 8;

const int PROCESSOR_ARCHITECTURE_AMD64 = 9;

const int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;

const int PROCESSOR_ARCHITECTURE_NEUTRAL = 11;

const int PROCESSOR_ARCHITECTURE_ARM64 = 12;

const int PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 = 13;

const int PROCESSOR_ARCHITECTURE_IA32_ON_ARM64 = 14;

const int PROCESSOR_ARCHITECTURE_UNKNOWN = 65535;

const int PF_FLOATING_POINT_PRECISION_ERRATA = 0;

const int PF_FLOATING_POINT_EMULATED = 1;

const int PF_COMPARE_EXCHANGE_DOUBLE = 2;

const int PF_MMX_INSTRUCTIONS_AVAILABLE = 3;

const int PF_PPC_MOVEMEM_64BIT_OK = 4;

const int PF_ALPHA_BYTE_INSTRUCTIONS = 5;

const int PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;

const int PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;

const int PF_RDTSC_INSTRUCTION_AVAILABLE = 8;

const int PF_PAE_ENABLED = 9;

const int PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;

const int PF_SSE_DAZ_MODE_AVAILABLE = 11;

const int PF_NX_ENABLED = 12;

const int PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;

const int PF_COMPARE_EXCHANGE128 = 14;

const int PF_COMPARE64_EXCHANGE128 = 15;

const int PF_CHANNELS_ENABLED = 16;

const int PF_XSAVE_ENABLED = 17;

const int PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;

const int PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19;

const int PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;

const int PF_VIRT_FIRMWARE_ENABLED = 21;

const int PF_RDWRFSGSBASE_AVAILABLE = 22;

const int PF_FASTFAIL_AVAILABLE = 23;

const int PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;

const int PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;

const int PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;

const int PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;

const int PF_RDRAND_INSTRUCTION_AVAILABLE = 28;

const int PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;

const int PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;

const int PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;

const int PF_RDTSCP_INSTRUCTION_AVAILABLE = 32;

const int PF_RDPID_INSTRUCTION_AVAILABLE = 33;

const int PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;

const int PF_MONITORX_INSTRUCTION_AVAILABLE = 35;

const int PF_SSSE3_INSTRUCTIONS_AVAILABLE = 36;

const int PF_SSE4_1_INSTRUCTIONS_AVAILABLE = 37;

const int PF_SSE4_2_INSTRUCTIONS_AVAILABLE = 38;

const int PF_AVX_INSTRUCTIONS_AVAILABLE = 39;

const int PF_AVX2_INSTRUCTIONS_AVAILABLE = 40;

const int PF_AVX512F_INSTRUCTIONS_AVAILABLE = 41;

const int PF_ERMS_AVAILABLE = 42;

const int PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE = 43;

const int PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE = 44;

const int PF_ARM_V83_LRCPC_INSTRUCTIONS_AVAILABLE = 45;

const int XSTATE_LEGACY_FLOATING_POINT = 0;

const int XSTATE_LEGACY_SSE = 1;

const int XSTATE_GSSE = 2;

const int XSTATE_AVX = 2;

const int XSTATE_MPX_BNDREGS = 3;

const int XSTATE_MPX_BNDCSR = 4;

const int XSTATE_AVX512_KMASK = 5;

const int XSTATE_AVX512_ZMM_H = 6;

const int XSTATE_AVX512_ZMM = 7;

const int XSTATE_IPT = 8;

const int XSTATE_PASID = 10;

const int XSTATE_CET_U = 11;

const int XSTATE_CET_S = 12;

const int XSTATE_AMX_TILE_CONFIG = 17;

const int XSTATE_AMX_TILE_DATA = 18;

const int XSTATE_LWP = 62;

const int MAXIMUM_XSTATE_FEATURES = 64;

const int XSTATE_MASK_LEGACY_FLOATING_POINT = 1;

const int XSTATE_MASK_LEGACY_SSE = 2;

const int XSTATE_MASK_LEGACY = 3;

const int XSTATE_MASK_GSSE = 4;

const int XSTATE_MASK_AVX = 4;

const int XSTATE_MASK_MPX = 24;

const int XSTATE_MASK_AVX512 = 224;

const int XSTATE_MASK_IPT = 256;

const int XSTATE_MASK_PASID = 1024;

const int XSTATE_MASK_CET_U = 2048;

const int XSTATE_MASK_CET_S = 4096;

const int XSTATE_MASK_AMX_TILE_CONFIG = 131072;

const int XSTATE_MASK_AMX_TILE_DATA = 262144;

const int XSTATE_MASK_LWP = 4611686018427387904;

const int XSTATE_MASK_ALLOWED = 4611686018427784703;

const int XSTATE_MASK_PERSISTENT = 4611686018427387920;

const int XSTATE_MASK_USER_VISIBLE_SUPERVISOR = 2048;

const int XSTATE_MASK_LARGE_FEATURES = 262144;

const int XSTATE_COMPACTION_ENABLE = 63;

const int XSTATE_COMPACTION_ENABLE_MASK = -9223372036854775808;

const int XSTATE_ALIGN_BIT = 1;

const int XSTATE_ALIGN_MASK = 2;

const int XSTATE_XFD_BIT = 2;

const int XSTATE_XFD_MASK = 4;

const int XSTATE_CONTROLFLAG_XSAVEOPT_MASK = 1;

const int XSTATE_CONTROLFLAG_XSAVEC_MASK = 2;

const int XSTATE_CONTROLFLAG_XFD_MASK = 4;

const int XSTATE_CONTROLFLAG_VALID_MASK = 7;

const int CFG_CALL_TARGET_VALID = 1;

const int CFG_CALL_TARGET_PROCESSED = 2;

const int CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = 4;

const int CFG_CALL_TARGET_VALID_XFG = 8;

const int CFG_CALL_TARGET_CONVERT_XFG_TO_CFG = 16;

const int SECTION_QUERY = 1;

const int SECTION_MAP_WRITE = 2;

const int SECTION_MAP_READ = 4;

const int SECTION_MAP_EXECUTE = 8;

const int SECTION_EXTEND_SIZE = 16;

const int SECTION_MAP_EXECUTE_EXPLICIT = 32;

const int SECTION_ALL_ACCESS = 983071;

const int SESSION_QUERY_ACCESS = 1;

const int SESSION_MODIFY_ACCESS = 2;

const int SESSION_ALL_ACCESS = 983043;

const int PAGE_NOACCESS = 1;

const int PAGE_READONLY = 2;

const int PAGE_READWRITE = 4;

const int PAGE_WRITECOPY = 8;

const int PAGE_EXECUTE = 16;

const int PAGE_EXECUTE_READ = 32;

const int PAGE_EXECUTE_READWRITE = 64;

const int PAGE_EXECUTE_WRITECOPY = 128;

const int PAGE_GUARD = 256;

const int PAGE_NOCACHE = 512;

const int PAGE_WRITECOMBINE = 1024;

const int PAGE_GRAPHICS_NOACCESS = 2048;

const int PAGE_GRAPHICS_READONLY = 4096;

const int PAGE_GRAPHICS_READWRITE = 8192;

const int PAGE_GRAPHICS_EXECUTE = 16384;

const int PAGE_GRAPHICS_EXECUTE_READ = 32768;

const int PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;

const int PAGE_GRAPHICS_COHERENT = 131072;

const int PAGE_GRAPHICS_NOCACHE = 262144;

const int PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;

const int PAGE_REVERT_TO_FILE_MAP = 2147483648;

const int PAGE_TARGETS_NO_UPDATE = 1073741824;

const int PAGE_TARGETS_INVALID = 1073741824;

const int PAGE_ENCLAVE_UNVALIDATED = 536870912;

const int PAGE_ENCLAVE_MASK = 268435456;

const int PAGE_ENCLAVE_DECOMMIT = 268435456;

const int PAGE_ENCLAVE_SS_FIRST = 268435457;

const int PAGE_ENCLAVE_SS_REST = 268435458;

const int MEM_COMMIT = 4096;

const int MEM_RESERVE = 8192;

const int MEM_REPLACE_PLACEHOLDER = 16384;

const int MEM_RESERVE_PLACEHOLDER = 262144;

const int MEM_RESET = 524288;

const int MEM_TOP_DOWN = 1048576;

const int MEM_WRITE_WATCH = 2097152;

const int MEM_PHYSICAL = 4194304;

const int MEM_ROTATE = 8388608;

const int MEM_DIFFERENT_IMAGE_BASE_OK = 8388608;

const int MEM_RESET_UNDO = 16777216;

const int MEM_LARGE_PAGES = 536870912;

const int MEM_4MB_PAGES = 2147483648;

const int MEM_64K_PAGES = 541065216;

const int MEM_UNMAP_WITH_TRANSIENT_BOOST = 1;

const int MEM_COALESCE_PLACEHOLDERS = 1;

const int MEM_PRESERVE_PLACEHOLDER = 2;

const int MEM_DECOMMIT = 16384;

const int MEM_RELEASE = 32768;

const int MEM_FREE = 65536;

const int MEM_EXTENDED_PARAMETER_GRAPHICS = 1;

const int MEM_EXTENDED_PARAMETER_NONPAGED = 2;

const int MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL = 4;

const int MEM_EXTENDED_PARAMETER_NONPAGED_LARGE = 8;

const int MEM_EXTENDED_PARAMETER_NONPAGED_HUGE = 16;

const int MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES = 32;

const int MEM_EXTENDED_PARAMETER_EC_CODE = 64;

const int MEM_EXTENDED_PARAMETER_IMAGE_NO_HPAT = 128;

const int MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY = -9223372036854775808;

const int MEM_EXTENDED_PARAMETER_TYPE_BITS = 8;

const int MEM_DEDICATED_ATTRIBUTE_NOT_SPECIFIED = -1;

const int SEC_HUGE_PAGES = 131072;

const int SEC_PARTITION_OWNER_HANDLE = 262144;

const int SEC_64K_PAGES = 524288;

const int SEC_FILE = 8388608;

const int SEC_IMAGE = 16777216;

const int SEC_PROTECTED_IMAGE = 33554432;

const int SEC_RESERVE = 67108864;

const int SEC_COMMIT = 134217728;

const int SEC_NOCACHE = 268435456;

const int SEC_WRITECOMBINE = 1073741824;

const int SEC_LARGE_PAGES = 2147483648;

const int SEC_IMAGE_NO_EXECUTE = 285212672;

const int MEM_PRIVATE = 131072;

const int MEM_MAPPED = 262144;

const int MEM_IMAGE = 16777216;

const int WRITE_WATCH_FLAG_RESET = 1;

const int ENCLAVE_TYPE_SGX = 1;

const int ENCLAVE_TYPE_SGX2 = 2;

const int ENCLAVE_TYPE_VBS = 16;

const int ENCLAVE_VBS_FLAG_DEBUG = 1;

const int ENCLAVE_TYPE_VBS_BASIC = 17;

const int VBS_BASIC_PAGE_MEASURED_DATA = 1;

const int VBS_BASIC_PAGE_UNMEASURED_DATA = 2;

const int VBS_BASIC_PAGE_ZERO_FILL = 3;

const int VBS_BASIC_PAGE_THREAD_DESCRIPTOR = 4;

const int VBS_BASIC_PAGE_SYSTEM_CALL = 5;

const int DEDICATED_MEMORY_CACHE_ELIGIBLE = 1;

const int FILE_READ_DATA = 1;

const int FILE_LIST_DIRECTORY = 1;

const int FILE_WRITE_DATA = 2;

const int FILE_ADD_FILE = 2;

const int FILE_APPEND_DATA = 4;

const int FILE_ADD_SUBDIRECTORY = 4;

const int FILE_CREATE_PIPE_INSTANCE = 4;

const int FILE_READ_EA = 8;

const int FILE_WRITE_EA = 16;

const int FILE_EXECUTE = 32;

const int FILE_TRAVERSE = 32;

const int FILE_DELETE_CHILD = 64;

const int FILE_READ_ATTRIBUTES = 128;

const int FILE_WRITE_ATTRIBUTES = 256;

const int FILE_ALL_ACCESS = 2032127;

const int FILE_GENERIC_READ = 1179785;

const int FILE_GENERIC_WRITE = 1179926;

const int FILE_GENERIC_EXECUTE = 1179808;

const int FILE_SHARE_READ = 1;

const int FILE_SHARE_WRITE = 2;

const int FILE_SHARE_DELETE = 4;

const int FILE_ATTRIBUTE_READONLY = 1;

const int FILE_ATTRIBUTE_HIDDEN = 2;

const int FILE_ATTRIBUTE_SYSTEM = 4;

const int FILE_ATTRIBUTE_DIRECTORY = 16;

const int FILE_ATTRIBUTE_ARCHIVE = 32;

const int FILE_ATTRIBUTE_DEVICE = 64;

const int FILE_ATTRIBUTE_NORMAL = 128;

const int FILE_ATTRIBUTE_TEMPORARY = 256;

const int FILE_ATTRIBUTE_SPARSE_FILE = 512;

const int FILE_ATTRIBUTE_REPARSE_POINT = 1024;

const int FILE_ATTRIBUTE_COMPRESSED = 2048;

const int FILE_ATTRIBUTE_OFFLINE = 4096;

const int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;

const int FILE_ATTRIBUTE_ENCRYPTED = 16384;

const int FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;

const int FILE_ATTRIBUTE_VIRTUAL = 65536;

const int FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;

const int FILE_ATTRIBUTE_EA = 262144;

const int FILE_ATTRIBUTE_PINNED = 524288;

const int FILE_ATTRIBUTE_UNPINNED = 1048576;

const int FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;

const int FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;

const int TREE_CONNECT_ATTRIBUTE_PRIVACY = 16384;

const int TREE_CONNECT_ATTRIBUTE_INTEGRITY = 32768;

const int TREE_CONNECT_ATTRIBUTE_GLOBAL = 4;

const int TREE_CONNECT_ATTRIBUTE_PINNED = 2;

const int FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = 536870912;

const int FILE_NOTIFY_CHANGE_FILE_NAME = 1;

const int FILE_NOTIFY_CHANGE_DIR_NAME = 2;

const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 4;

const int FILE_NOTIFY_CHANGE_SIZE = 8;

const int FILE_NOTIFY_CHANGE_LAST_WRITE = 16;

const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 32;

const int FILE_NOTIFY_CHANGE_CREATION = 64;

const int FILE_NOTIFY_CHANGE_SECURITY = 256;

const int FILE_ACTION_ADDED = 1;

const int FILE_ACTION_REMOVED = 2;

const int FILE_ACTION_MODIFIED = 3;

const int FILE_ACTION_RENAMED_OLD_NAME = 4;

const int FILE_ACTION_RENAMED_NEW_NAME = 5;

const int MAILSLOT_NO_MESSAGE = 4294967295;

const int MAILSLOT_WAIT_FOREVER = 4294967295;

const int FILE_CASE_SENSITIVE_SEARCH = 1;

const int FILE_CASE_PRESERVED_NAMES = 2;

const int FILE_UNICODE_ON_DISK = 4;

const int FILE_PERSISTENT_ACLS = 8;

const int FILE_FILE_COMPRESSION = 16;

const int FILE_VOLUME_QUOTAS = 32;

const int FILE_SUPPORTS_SPARSE_FILES = 64;

const int FILE_SUPPORTS_REPARSE_POINTS = 128;

const int FILE_SUPPORTS_REMOTE_STORAGE = 256;

const int FILE_RETURNS_CLEANUP_RESULT_INFO = 512;

const int FILE_SUPPORTS_POSIX_UNLINK_RENAME = 1024;

const int FILE_SUPPORTS_BYPASS_IO = 2048;

const int FILE_SUPPORTS_STREAM_SNAPSHOTS = 4096;

const int FILE_SUPPORTS_CASE_SENSITIVE_DIRS = 8192;

const int FILE_VOLUME_IS_COMPRESSED = 32768;

const int FILE_SUPPORTS_OBJECT_IDS = 65536;

const int FILE_SUPPORTS_ENCRYPTION = 131072;

const int FILE_NAMED_STREAMS = 262144;

const int FILE_READ_ONLY_VOLUME = 524288;

const int FILE_SEQUENTIAL_WRITE_ONCE = 1048576;

const int FILE_SUPPORTS_TRANSACTIONS = 2097152;

const int FILE_SUPPORTS_HARD_LINKS = 4194304;

const int FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 8388608;

const int FILE_SUPPORTS_OPEN_BY_FILE_ID = 16777216;

const int FILE_SUPPORTS_USN_JOURNAL = 33554432;

const int FILE_SUPPORTS_INTEGRITY_STREAMS = 67108864;

const int FILE_SUPPORTS_BLOCK_REFCOUNTING = 134217728;

const int FILE_SUPPORTS_SPARSE_VDL = 268435456;

const int FILE_DAX_VOLUME = 536870912;

const int FILE_SUPPORTS_GHOSTING = 1073741824;

const int FILE_INVALID_FILE_ID = -1;

const int FILE_NAME_FLAG_HARDLINK = 0;

const int FILE_NAME_FLAG_NTFS = 1;

const int FILE_NAME_FLAG_DOS = 2;

const int FILE_NAME_FLAG_BOTH = 3;

const int FILE_NAME_FLAGS_UNSPECIFIED = 128;

const int FILE_CS_FLAG_CASE_SENSITIVE_DIR = 1;

const int FLUSH_FLAGS_FILE_DATA_ONLY = 1;

const int FLUSH_FLAGS_NO_SYNC = 2;

const int FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 4;

const int REPARSE_GUID_DATA_BUFFER_HEADER_SIZE = 24;

const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384;

const int IO_REPARSE_TAG_RESERVED_ZERO = 0;

const int IO_REPARSE_TAG_RESERVED_ONE = 1;

const int IO_REPARSE_TAG_RESERVED_TWO = 2;

const int IO_REPARSE_TAG_RESERVED_RANGE = 2;

const int IO_REPARSE_TAG_RESERVED_INVALID = 3221258240;

const int IO_REPARSE_TAG_MOUNT_POINT = 2684354563;

const int IO_REPARSE_TAG_HSM = 3221225476;

const int IO_REPARSE_TAG_HSM2 = 2147483654;

const int IO_REPARSE_TAG_SIS = 2147483655;

const int IO_REPARSE_TAG_WIM = 2147483656;

const int IO_REPARSE_TAG_CSV = 2147483657;

const int IO_REPARSE_TAG_DFS = 2147483658;

const int IO_REPARSE_TAG_SYMLINK = 2684354572;

const int IO_REPARSE_TAG_DFSR = 2147483666;

const int IO_REPARSE_TAG_DEDUP = 2147483667;

const int IO_REPARSE_TAG_NFS = 2147483668;

const int IO_REPARSE_TAG_FILE_PLACEHOLDER = 2147483669;

const int IO_REPARSE_TAG_WOF = 2147483671;

const int IO_REPARSE_TAG_WCI = 2147483672;

const int IO_REPARSE_TAG_WCI_1 = 2415923224;

const int IO_REPARSE_TAG_GLOBAL_REPARSE = 2684354585;

const int IO_REPARSE_TAG_CLOUD = 2415919130;

const int IO_REPARSE_TAG_CLOUD_1 = 2415923226;

const int IO_REPARSE_TAG_CLOUD_2 = 2415927322;

const int IO_REPARSE_TAG_CLOUD_3 = 2415931418;

const int IO_REPARSE_TAG_CLOUD_4 = 2415935514;

const int IO_REPARSE_TAG_CLOUD_5 = 2415939610;

const int IO_REPARSE_TAG_CLOUD_6 = 2415943706;

const int IO_REPARSE_TAG_CLOUD_7 = 2415947802;

const int IO_REPARSE_TAG_CLOUD_8 = 2415951898;

const int IO_REPARSE_TAG_CLOUD_9 = 2415955994;

const int IO_REPARSE_TAG_CLOUD_A = 2415960090;

const int IO_REPARSE_TAG_CLOUD_B = 2415964186;

const int IO_REPARSE_TAG_CLOUD_C = 2415968282;

const int IO_REPARSE_TAG_CLOUD_D = 2415972378;

const int IO_REPARSE_TAG_CLOUD_E = 2415976474;

const int IO_REPARSE_TAG_CLOUD_F = 2415980570;

const int IO_REPARSE_TAG_CLOUD_MASK = 61440;

const int IO_REPARSE_TAG_APPEXECLINK = 2147483675;

const int IO_REPARSE_TAG_PROJFS = 2415919132;

const int IO_REPARSE_TAG_STORAGE_SYNC = 2147483678;

const int IO_REPARSE_TAG_WCI_TOMBSTONE = 2684354591;

const int IO_REPARSE_TAG_UNHANDLED = 2147483680;

const int IO_REPARSE_TAG_ONEDRIVE = 2147483681;

const int IO_REPARSE_TAG_PROJFS_TOMBSTONE = 2684354594;

const int IO_REPARSE_TAG_AF_UNIX = 2147483683;

const int IO_REPARSE_TAG_WCI_LINK = 2684354599;

const int IO_REPARSE_TAG_WCI_LINK_1 = 2684358695;

const int IO_REPARSE_TAG_DATALESS_CIM = 2684354600;

const int SCRUB_DATA_INPUT_FLAG_RESUME = 1;

const int SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC = 2;

const int SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA = 4;

const int SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY = 8;

const int SCRUB_DATA_INPUT_FLAG_SKIP_DATA = 16;

const int SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID = 32;

const int SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED = 64;

const int SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE = 1;

const int SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE = 65536;

const int SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED = 131072;

const int SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED = 262144;

const int SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = 1;

const int IO_COMPLETION_MODIFY_STATE = 2;

const int IO_COMPLETION_ALL_ACCESS = 2031619;

const int IO_QOS_MAX_RESERVATION = 1000000000;

const String SMB_CCF_APP_INSTANCE_EA_NAME = 'ClusteredApplicationInstance';

const int NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;

const int DUPLICATE_CLOSE_SOURCE = 1;

const int DUPLICATE_SAME_ACCESS = 2;

const int POWERBUTTON_ACTION_INDEX_NOTHING = 0;

const int POWERBUTTON_ACTION_INDEX_SLEEP = 1;

const int POWERBUTTON_ACTION_INDEX_HIBERNATE = 2;

const int POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3;

const int POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY = 4;

const int POWERBUTTON_ACTION_VALUE_NOTHING = 0;

const int POWERBUTTON_ACTION_VALUE_SLEEP = 2;

const int POWERBUTTON_ACTION_VALUE_HIBERNATE = 3;

const int POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6;

const int POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY = 8;

const int PERFSTATE_POLICY_CHANGE_IDEAL = 0;

const int PERFSTATE_POLICY_CHANGE_SINGLE = 1;

const int PERFSTATE_POLICY_CHANGE_ROCKET = 2;

const int PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE = 3;

const int PERFSTATE_POLICY_CHANGE_DECREASE_MAX = 2;

const int PERFSTATE_POLICY_CHANGE_INCREASE_MAX = 3;

const int PROCESSOR_THROTTLE_DISABLED = 0;

const int PROCESSOR_THROTTLE_ENABLED = 1;

const int PROCESSOR_THROTTLE_AUTOMATIC = 2;

const int PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_POLICY_MAX = 100;

const int PROCESSOR_PERF_BOOST_MODE_DISABLED = 0;

const int PROCESSOR_PERF_BOOST_MODE_ENABLED = 1;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4;

const int PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED = 5;

const int PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED = 6;

const int PROCESSOR_PERF_BOOST_MODE_MAX = 6;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED = 0;

const int PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED = 1;

const int PROCESSOR_PERF_PERFORMANCE_PREFERENCE = 255;

const int PROCESSOR_PERF_ENERGY_PREFERENCE = 0;

const int PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW = 0;

const int PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW = 1270000000;

const int PROCESSOR_DUTY_CYCLING_DISABLED = 0;

const int PROCESSOR_DUTY_CYCLING_ENABLED = 1;

const int CORE_PARKING_POLICY_CHANGE_IDEAL = 0;

const int CORE_PARKING_POLICY_CHANGE_SINGLE = 1;

const int CORE_PARKING_POLICY_CHANGE_ROCKET = 2;

const int CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3;

const int CORE_PARKING_POLICY_CHANGE_MAX = 3;

const int PARKING_TOPOLOGY_POLICY_DISABLED = 0;

const int PARKING_TOPOLOGY_POLICY_ROUNDROBIN = 1;

const int PARKING_TOPOLOGY_POLICY_SEQUENTIAL = 2;

const int SMT_UNPARKING_POLICY_CORE = 0;

const int SMT_UNPARKING_POLICY_CORE_PER_THREAD = 1;

const int SMT_UNPARKING_POLICY_LP_ROUNDROBIN = 2;

const int SMT_UNPARKING_POLICY_LP_SEQUENTIAL = 3;

const int POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;

const int POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_DISABLED = 0;

const int POWER_CONNECTIVITY_IN_STANDBY_ENABLED = 1;

const int POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED = 2;

const int POWER_DISCONNECTED_STANDBY_MODE_NORMAL = 0;

const int POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE = 1;

const int POWER_SYSTEM_MAXIMUM = 7;

const int ES_SYSTEM_REQUIRED = 1;

const int ES_DISPLAY_REQUIRED = 2;

const int ES_USER_PRESENT = 4;

const int ES_AWAYMODE_REQUIRED = 64;

const int ES_CONTINUOUS = 2147483648;

const int DIAGNOSTIC_REASON_VERSION = 0;

const int DIAGNOSTIC_REASON_SIMPLE_STRING = 1;

const int DIAGNOSTIC_REASON_DETAILED_STRING = 2;

const int DIAGNOSTIC_REASON_NOT_SPECIFIED = 2147483648;

const int DIAGNOSTIC_REASON_INVALID_FLAGS = 2147483640;

const int POWER_REQUEST_CONTEXT_VERSION = 0;

const int POWER_REQUEST_CONTEXT_SIMPLE_STRING = 1;

const int POWER_REQUEST_CONTEXT_DETAILED_STRING = 2;

const int PDCAP_D0_SUPPORTED = 1;

const int PDCAP_D1_SUPPORTED = 2;

const int PDCAP_D2_SUPPORTED = 4;

const int PDCAP_D3_SUPPORTED = 8;

const int PDCAP_WAKE_FROM_D0_SUPPORTED = 16;

const int PDCAP_WAKE_FROM_D1_SUPPORTED = 32;

const int PDCAP_WAKE_FROM_D2_SUPPORTED = 64;

const int PDCAP_WAKE_FROM_D3_SUPPORTED = 128;

const int PDCAP_WARM_EJECT_SUPPORTED = 256;

const int POWER_SETTING_VALUE_VERSION = 1;

const int POWER_PLATFORM_ROLE_V1 = 1;

const int POWER_PLATFORM_ROLE_V1_MAX = 8;

const int POWER_PLATFORM_ROLE_V2 = 2;

const int POWER_PLATFORM_ROLE_V2_MAX = 9;

const int POWER_PLATFORM_ROLE_VERSION = 2;

const int POWER_PLATFORM_ROLE_VERSION_MAX = 9;

const int PROC_IDLE_BUCKET_COUNT = 6;

const int PROC_IDLE_BUCKET_COUNT_EX = 16;

const int ACPI_PPM_SOFTWARE_ALL = 252;

const int ACPI_PPM_SOFTWARE_ANY = 253;

const int ACPI_PPM_HARDWARE_ALL = 254;

const int MS_PPM_SOFTWARE_ALL = 1;

const int PPM_FIRMWARE_ACPI1C2 = 1;

const int PPM_FIRMWARE_ACPI1C3 = 2;

const int PPM_FIRMWARE_ACPI1TSTATES = 4;

const int PPM_FIRMWARE_CST = 8;

const int PPM_FIRMWARE_CSD = 16;

const int PPM_FIRMWARE_PCT = 32;

const int PPM_FIRMWARE_PSS = 64;

const int PPM_FIRMWARE_XPSS = 128;

const int PPM_FIRMWARE_PPC = 256;

const int PPM_FIRMWARE_PSD = 512;

const int PPM_FIRMWARE_PTC = 1024;

const int PPM_FIRMWARE_TSS = 2048;

const int PPM_FIRMWARE_TPC = 4096;

const int PPM_FIRMWARE_TSD = 8192;

const int PPM_FIRMWARE_PCCH = 16384;

const int PPM_FIRMWARE_PCCP = 32768;

const int PPM_FIRMWARE_OSC = 65536;

const int PPM_FIRMWARE_PDC = 131072;

const int PPM_FIRMWARE_CPC = 262144;

const int PPM_FIRMWARE_LPI = 524288;

const int PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0;

const int PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1;

const int PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2;

const int PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3;

const int PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4;

const int PPM_IDLE_IMPLEMENTATION_NONE = 0;

const int PPM_IDLE_IMPLEMENTATION_CSTATES = 1;

const int PPM_IDLE_IMPLEMENTATION_PEP = 2;

const int PPM_IDLE_IMPLEMENTATION_MICROPEP = 3;

const int PPM_IDLE_IMPLEMENTATION_LPISTATES = 4;

const int POWER_ACTION_QUERY_ALLOWED = 1;

const int POWER_ACTION_UI_ALLOWED = 2;

const int POWER_ACTION_OVERRIDE_APPS = 4;

const int POWER_ACTION_HIBERBOOT = 8;

const int POWER_ACTION_USER_NOTIFY = 16;

const int POWER_ACTION_DOZE_TO_HIBERNATE = 32;

const int POWER_ACTION_ACPI_CRITICAL = 16777216;

const int POWER_ACTION_ACPI_USER_NOTIFY = 33554432;

const int POWER_ACTION_DIRECTED_DRIPS = 67108864;

const int POWER_ACTION_PSEUDO_TRANSITION = 134217728;

const int POWER_ACTION_LIGHTEST_FIRST = 268435456;

const int POWER_ACTION_LOCK_CONSOLE = 536870912;

const int POWER_ACTION_DISABLE_WAKES = 1073741824;

const int POWER_ACTION_CRITICAL = 2147483648;

const int POWER_LEVEL_USER_NOTIFY_TEXT = 1;

const int POWER_LEVEL_USER_NOTIFY_SOUND = 2;

const int POWER_LEVEL_USER_NOTIFY_EXEC = 4;

const int POWER_USER_NOTIFY_BUTTON = 8;

const int POWER_USER_NOTIFY_SHUTDOWN = 16;

const int POWER_USER_NOTIFY_FORCED_SHUTDOWN = 32;

const int POWER_FORCE_TRIGGER_RESET = 2147483648;

const int BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 7;

const int BATTERY_DISCHARGE_FLAGS_ENABLE = 2147483648;

const int NUM_DISCHARGE_POLICIES = 4;

const int DISCHARGE_POLICY_CRITICAL = 0;

const int DISCHARGE_POLICY_LOW = 1;

const int PROCESSOR_IDLESTATE_POLICY_COUNT = 3;

const int PO_THROTTLE_NONE = 0;

const int PO_THROTTLE_CONSTANT = 1;

const int PO_THROTTLE_DEGRADE = 2;

const int PO_THROTTLE_ADAPTIVE = 3;

const int PO_THROTTLE_MAXIMUM = 4;

const int HIBERFILE_TYPE_NONE = 0;

const int HIBERFILE_TYPE_REDUCED = 1;

const int HIBERFILE_TYPE_FULL = 2;

const int HIBERFILE_TYPE_MAX = 3;

const int IMAGE_DOS_SIGNATURE = 23117;

const int IMAGE_OS2_SIGNATURE = 17742;

const int IMAGE_OS2_SIGNATURE_LE = 17740;

const int IMAGE_VXD_SIGNATURE = 17740;

const int IMAGE_NT_SIGNATURE = 17744;

const int IMAGE_SIZEOF_FILE_HEADER = 20;

const int IMAGE_FILE_RELOCS_STRIPPED = 1;

const int IMAGE_FILE_EXECUTABLE_IMAGE = 2;

const int IMAGE_FILE_LINE_NUMS_STRIPPED = 4;

const int IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;

const int IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;

const int IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;

const int IMAGE_FILE_BYTES_REVERSED_LO = 128;

const int IMAGE_FILE_32BIT_MACHINE = 256;

const int IMAGE_FILE_DEBUG_STRIPPED = 512;

const int IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;

const int IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;

const int IMAGE_FILE_SYSTEM = 4096;

const int IMAGE_FILE_DLL = 8192;

const int IMAGE_FILE_UP_SYSTEM_ONLY = 16384;

const int IMAGE_FILE_BYTES_REVERSED_HI = 32768;

const int IMAGE_FILE_MACHINE_UNKNOWN = 0;

const int IMAGE_FILE_MACHINE_TARGET_HOST = 1;

const int IMAGE_FILE_MACHINE_I386 = 332;

const int IMAGE_FILE_MACHINE_R3000 = 354;

const int IMAGE_FILE_MACHINE_R4000 = 358;

const int IMAGE_FILE_MACHINE_R10000 = 360;

const int IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;

const int IMAGE_FILE_MACHINE_ALPHA = 388;

const int IMAGE_FILE_MACHINE_SH3 = 418;

const int IMAGE_FILE_MACHINE_SH3DSP = 419;

const int IMAGE_FILE_MACHINE_SH3E = 420;

const int IMAGE_FILE_MACHINE_SH4 = 422;

const int IMAGE_FILE_MACHINE_SH5 = 424;

const int IMAGE_FILE_MACHINE_ARM = 448;

const int IMAGE_FILE_MACHINE_THUMB = 450;

const int IMAGE_FILE_MACHINE_ARMNT = 452;

const int IMAGE_FILE_MACHINE_AM33 = 467;

const int IMAGE_FILE_MACHINE_POWERPC = 496;

const int IMAGE_FILE_MACHINE_POWERPCFP = 497;

const int IMAGE_FILE_MACHINE_IA64 = 512;

const int IMAGE_FILE_MACHINE_MIPS16 = 614;

const int IMAGE_FILE_MACHINE_ALPHA64 = 644;

const int IMAGE_FILE_MACHINE_MIPSFPU = 870;

const int IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;

const int IMAGE_FILE_MACHINE_AXP64 = 644;

const int IMAGE_FILE_MACHINE_TRICORE = 1312;

const int IMAGE_FILE_MACHINE_CEF = 3311;

const int IMAGE_FILE_MACHINE_EBC = 3772;

const int IMAGE_FILE_MACHINE_AMD64 = 34404;

const int IMAGE_FILE_MACHINE_M32R = 36929;

const int IMAGE_FILE_MACHINE_ARM64 = 43620;

const int IMAGE_FILE_MACHINE_CEE = 49390;

const int IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;

const int IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267;

const int IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523;

const int IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263;

const int IMAGE_NT_OPTIONAL_HDR_MAGIC = 523;

const int IMAGE_SUBSYSTEM_UNKNOWN = 0;

const int IMAGE_SUBSYSTEM_NATIVE = 1;

const int IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;

const int IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;

const int IMAGE_SUBSYSTEM_OS2_CUI = 5;

const int IMAGE_SUBSYSTEM_POSIX_CUI = 7;

const int IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;

const int IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;

const int IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;

const int IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;

const int IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;

const int IMAGE_SUBSYSTEM_EFI_ROM = 13;

const int IMAGE_SUBSYSTEM_XBOX = 14;

const int IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;

const int IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17;

const int IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32;

const int IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64;

const int IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128;

const int IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256;

const int IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512;

const int IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024;

const int IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048;

const int IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096;

const int IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192;

const int IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384;

const int IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768;

const int IMAGE_DIRECTORY_ENTRY_EXPORT = 0;

const int IMAGE_DIRECTORY_ENTRY_IMPORT = 1;

const int IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;

const int IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;

const int IMAGE_DIRECTORY_ENTRY_SECURITY = 4;

const int IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;

const int IMAGE_DIRECTORY_ENTRY_DEBUG = 6;

const int IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;

const int IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;

const int IMAGE_DIRECTORY_ENTRY_TLS = 9;

const int IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;

const int IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;

const int IMAGE_DIRECTORY_ENTRY_IAT = 12;

const int IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;

const int IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;

const int IMAGE_SIZEOF_SHORT_NAME = 8;

const int IMAGE_SIZEOF_SECTION_HEADER = 40;

const int IMAGE_SCN_TYPE_NO_PAD = 8;

const int IMAGE_SCN_CNT_CODE = 32;

const int IMAGE_SCN_CNT_INITIALIZED_DATA = 64;

const int IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;

const int IMAGE_SCN_LNK_OTHER = 256;

const int IMAGE_SCN_LNK_INFO = 512;

const int IMAGE_SCN_LNK_REMOVE = 2048;

const int IMAGE_SCN_LNK_COMDAT = 4096;

const int IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384;

const int IMAGE_SCN_GPREL = 32768;

const int IMAGE_SCN_MEM_FARDATA = 32768;

const int IMAGE_SCN_MEM_PURGEABLE = 131072;

const int IMAGE_SCN_MEM_16BIT = 131072;

const int IMAGE_SCN_MEM_LOCKED = 262144;

const int IMAGE_SCN_MEM_PRELOAD = 524288;

const int IMAGE_SCN_ALIGN_1BYTES = 1048576;

const int IMAGE_SCN_ALIGN_2BYTES = 2097152;

const int IMAGE_SCN_ALIGN_4BYTES = 3145728;

const int IMAGE_SCN_ALIGN_8BYTES = 4194304;

const int IMAGE_SCN_ALIGN_16BYTES = 5242880;

const int IMAGE_SCN_ALIGN_32BYTES = 6291456;

const int IMAGE_SCN_ALIGN_64BYTES = 7340032;

const int IMAGE_SCN_ALIGN_128BYTES = 8388608;

const int IMAGE_SCN_ALIGN_256BYTES = 9437184;

const int IMAGE_SCN_ALIGN_512BYTES = 10485760;

const int IMAGE_SCN_ALIGN_1024BYTES = 11534336;

const int IMAGE_SCN_ALIGN_2048BYTES = 12582912;

const int IMAGE_SCN_ALIGN_4096BYTES = 13631488;

const int IMAGE_SCN_ALIGN_8192BYTES = 14680064;

const int IMAGE_SCN_ALIGN_MASK = 15728640;

const int IMAGE_SCN_LNK_NRELOC_OVFL = 16777216;

const int IMAGE_SCN_MEM_DISCARDABLE = 33554432;

const int IMAGE_SCN_MEM_NOT_CACHED = 67108864;

const int IMAGE_SCN_MEM_NOT_PAGED = 134217728;

const int IMAGE_SCN_MEM_SHARED = 268435456;

const int IMAGE_SCN_MEM_EXECUTE = 536870912;

const int IMAGE_SCN_MEM_READ = 1073741824;

const int IMAGE_SCN_MEM_WRITE = 2147483648;

const int IMAGE_SCN_SCALE_INDEX = 1;

const int IMAGE_SIZEOF_SYMBOL = 18;

const int IMAGE_SYM_UNDEFINED = 0;

const int IMAGE_SYM_ABSOLUTE = -1;

const int IMAGE_SYM_DEBUG = -2;

const int IMAGE_SYM_SECTION_MAX = 65279;

const int IMAGE_SYM_SECTION_MAX_EX = 2147483647;

const int IMAGE_SYM_TYPE_NULL = 0;

const int IMAGE_SYM_TYPE_VOID = 1;

const int IMAGE_SYM_TYPE_CHAR = 2;

const int IMAGE_SYM_TYPE_SHORT = 3;

const int IMAGE_SYM_TYPE_INT = 4;

const int IMAGE_SYM_TYPE_LONG = 5;

const int IMAGE_SYM_TYPE_FLOAT = 6;

const int IMAGE_SYM_TYPE_DOUBLE = 7;

const int IMAGE_SYM_TYPE_STRUCT = 8;

const int IMAGE_SYM_TYPE_UNION = 9;

const int IMAGE_SYM_TYPE_ENUM = 10;

const int IMAGE_SYM_TYPE_MOE = 11;

const int IMAGE_SYM_TYPE_BYTE = 12;

const int IMAGE_SYM_TYPE_WORD = 13;

const int IMAGE_SYM_TYPE_UINT = 14;

const int IMAGE_SYM_TYPE_DWORD = 15;

const int IMAGE_SYM_TYPE_PCODE = 32768;

const int IMAGE_SYM_DTYPE_NULL = 0;

const int IMAGE_SYM_DTYPE_POINTER = 1;

const int IMAGE_SYM_DTYPE_FUNCTION = 2;

const int IMAGE_SYM_DTYPE_ARRAY = 3;

const int IMAGE_SYM_CLASS_END_OF_FUNCTION = 255;

const int IMAGE_SYM_CLASS_NULL = 0;

const int IMAGE_SYM_CLASS_AUTOMATIC = 1;

const int IMAGE_SYM_CLASS_EXTERNAL = 2;

const int IMAGE_SYM_CLASS_STATIC = 3;

const int IMAGE_SYM_CLASS_REGISTER = 4;

const int IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;

const int IMAGE_SYM_CLASS_LABEL = 6;

const int IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;

const int IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;

const int IMAGE_SYM_CLASS_ARGUMENT = 9;

const int IMAGE_SYM_CLASS_STRUCT_TAG = 10;

const int IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;

const int IMAGE_SYM_CLASS_UNION_TAG = 12;

const int IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;

const int IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;

const int IMAGE_SYM_CLASS_ENUM_TAG = 15;

const int IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;

const int IMAGE_SYM_CLASS_REGISTER_PARAM = 17;

const int IMAGE_SYM_CLASS_BIT_FIELD = 18;

const int IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;

const int IMAGE_SYM_CLASS_BLOCK = 100;

const int IMAGE_SYM_CLASS_FUNCTION = 101;

const int IMAGE_SYM_CLASS_END_OF_STRUCT = 102;

const int IMAGE_SYM_CLASS_FILE = 103;

const int IMAGE_SYM_CLASS_SECTION = 104;

const int IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;

const int IMAGE_SYM_CLASS_CLR_TOKEN = 107;

const int N_BTMASK = 15;

const int N_TMASK = 48;

const int N_TMASK1 = 192;

const int N_TMASK2 = 240;

const int N_BTSHFT = 4;

const int N_TSHIFT = 2;

const int IMAGE_COMDAT_SELECT_NODUPLICATES = 1;

const int IMAGE_COMDAT_SELECT_ANY = 2;

const int IMAGE_COMDAT_SELECT_SAME_SIZE = 3;

const int IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;

const int IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;

const int IMAGE_COMDAT_SELECT_LARGEST = 6;

const int IMAGE_COMDAT_SELECT_NEWEST = 7;

const int IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;

const int IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;

const int IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;

const int IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY = 4;

const int IMAGE_REL_I386_ABSOLUTE = 0;

const int IMAGE_REL_I386_DIR16 = 1;

const int IMAGE_REL_I386_REL16 = 2;

const int IMAGE_REL_I386_DIR32 = 6;

const int IMAGE_REL_I386_DIR32NB = 7;

const int IMAGE_REL_I386_SEG12 = 9;

const int IMAGE_REL_I386_SECTION = 10;

const int IMAGE_REL_I386_SECREL = 11;

const int IMAGE_REL_I386_TOKEN = 12;

const int IMAGE_REL_I386_SECREL7 = 13;

const int IMAGE_REL_I386_REL32 = 20;

const int IMAGE_REL_MIPS_ABSOLUTE = 0;

const int IMAGE_REL_MIPS_REFHALF = 1;

const int IMAGE_REL_MIPS_REFWORD = 2;

const int IMAGE_REL_MIPS_JMPADDR = 3;

const int IMAGE_REL_MIPS_REFHI = 4;

const int IMAGE_REL_MIPS_REFLO = 5;

const int IMAGE_REL_MIPS_GPREL = 6;

const int IMAGE_REL_MIPS_LITERAL = 7;

const int IMAGE_REL_MIPS_SECTION = 10;

const int IMAGE_REL_MIPS_SECREL = 11;

const int IMAGE_REL_MIPS_SECRELLO = 12;

const int IMAGE_REL_MIPS_SECRELHI = 13;

const int IMAGE_REL_MIPS_TOKEN = 14;

const int IMAGE_REL_MIPS_JMPADDR16 = 16;

const int IMAGE_REL_MIPS_REFWORDNB = 34;

const int IMAGE_REL_MIPS_PAIR = 37;

const int IMAGE_REL_ALPHA_ABSOLUTE = 0;

const int IMAGE_REL_ALPHA_REFLONG = 1;

const int IMAGE_REL_ALPHA_REFQUAD = 2;

const int IMAGE_REL_ALPHA_GPREL32 = 3;

const int IMAGE_REL_ALPHA_LITERAL = 4;

const int IMAGE_REL_ALPHA_LITUSE = 5;

const int IMAGE_REL_ALPHA_GPDISP = 6;

const int IMAGE_REL_ALPHA_BRADDR = 7;

const int IMAGE_REL_ALPHA_HINT = 8;

const int IMAGE_REL_ALPHA_INLINE_REFLONG = 9;

const int IMAGE_REL_ALPHA_REFHI = 10;

const int IMAGE_REL_ALPHA_REFLO = 11;

const int IMAGE_REL_ALPHA_PAIR = 12;

const int IMAGE_REL_ALPHA_MATCH = 13;

const int IMAGE_REL_ALPHA_SECTION = 14;

const int IMAGE_REL_ALPHA_SECREL = 15;

const int IMAGE_REL_ALPHA_REFLONGNB = 16;

const int IMAGE_REL_ALPHA_SECRELLO = 17;

const int IMAGE_REL_ALPHA_SECRELHI = 18;

const int IMAGE_REL_ALPHA_REFQ3 = 19;

const int IMAGE_REL_ALPHA_REFQ2 = 20;

const int IMAGE_REL_ALPHA_REFQ1 = 21;

const int IMAGE_REL_ALPHA_GPRELLO = 22;

const int IMAGE_REL_ALPHA_GPRELHI = 23;

const int IMAGE_REL_PPC_ABSOLUTE = 0;

const int IMAGE_REL_PPC_ADDR64 = 1;

const int IMAGE_REL_PPC_ADDR32 = 2;

const int IMAGE_REL_PPC_ADDR24 = 3;

const int IMAGE_REL_PPC_ADDR16 = 4;

const int IMAGE_REL_PPC_ADDR14 = 5;

const int IMAGE_REL_PPC_REL24 = 6;

const int IMAGE_REL_PPC_REL14 = 7;

const int IMAGE_REL_PPC_TOCREL16 = 8;

const int IMAGE_REL_PPC_TOCREL14 = 9;

const int IMAGE_REL_PPC_ADDR32NB = 10;

const int IMAGE_REL_PPC_SECREL = 11;

const int IMAGE_REL_PPC_SECTION = 12;

const int IMAGE_REL_PPC_IFGLUE = 13;

const int IMAGE_REL_PPC_IMGLUE = 14;

const int IMAGE_REL_PPC_SECREL16 = 15;

const int IMAGE_REL_PPC_REFHI = 16;

const int IMAGE_REL_PPC_REFLO = 17;

const int IMAGE_REL_PPC_PAIR = 18;

const int IMAGE_REL_PPC_SECRELLO = 19;

const int IMAGE_REL_PPC_SECRELHI = 20;

const int IMAGE_REL_PPC_GPREL = 21;

const int IMAGE_REL_PPC_TOKEN = 22;

const int IMAGE_REL_PPC_TYPEMASK = 255;

const int IMAGE_REL_PPC_NEG = 256;

const int IMAGE_REL_PPC_BRTAKEN = 512;

const int IMAGE_REL_PPC_BRNTAKEN = 1024;

const int IMAGE_REL_PPC_TOCDEFN = 2048;

const int IMAGE_REL_SH3_ABSOLUTE = 0;

const int IMAGE_REL_SH3_DIRECT16 = 1;

const int IMAGE_REL_SH3_DIRECT32 = 2;

const int IMAGE_REL_SH3_DIRECT8 = 3;

const int IMAGE_REL_SH3_DIRECT8_WORD = 4;

const int IMAGE_REL_SH3_DIRECT8_LONG = 5;

const int IMAGE_REL_SH3_DIRECT4 = 6;

const int IMAGE_REL_SH3_DIRECT4_WORD = 7;

const int IMAGE_REL_SH3_DIRECT4_LONG = 8;

const int IMAGE_REL_SH3_PCREL8_WORD = 9;

const int IMAGE_REL_SH3_PCREL8_LONG = 10;

const int IMAGE_REL_SH3_PCREL12_WORD = 11;

const int IMAGE_REL_SH3_STARTOF_SECTION = 12;

const int IMAGE_REL_SH3_SIZEOF_SECTION = 13;

const int IMAGE_REL_SH3_SECTION = 14;

const int IMAGE_REL_SH3_SECREL = 15;

const int IMAGE_REL_SH3_DIRECT32_NB = 16;

const int IMAGE_REL_SH3_GPREL4_LONG = 17;

const int IMAGE_REL_SH3_TOKEN = 18;

const int IMAGE_REL_SHM_PCRELPT = 19;

const int IMAGE_REL_SHM_REFLO = 20;

const int IMAGE_REL_SHM_REFHALF = 21;

const int IMAGE_REL_SHM_RELLO = 22;

const int IMAGE_REL_SHM_RELHALF = 23;

const int IMAGE_REL_SHM_PAIR = 24;

const int IMAGE_REL_SH_NOMODE = 32768;

const int IMAGE_REL_ARM_ABSOLUTE = 0;

const int IMAGE_REL_ARM_ADDR32 = 1;

const int IMAGE_REL_ARM_ADDR32NB = 2;

const int IMAGE_REL_ARM_BRANCH24 = 3;

const int IMAGE_REL_ARM_BRANCH11 = 4;

const int IMAGE_REL_ARM_TOKEN = 5;

const int IMAGE_REL_ARM_GPREL12 = 6;

const int IMAGE_REL_ARM_GPREL7 = 7;

const int IMAGE_REL_ARM_BLX24 = 8;

const int IMAGE_REL_ARM_BLX11 = 9;

const int IMAGE_REL_ARM_SECTION = 14;

const int IMAGE_REL_ARM_SECREL = 15;

const int IMAGE_REL_ARM_MOV32A = 16;

const int IMAGE_REL_ARM_MOV32 = 16;

const int IMAGE_REL_ARM_MOV32T = 17;

const int IMAGE_REL_THUMB_MOV32 = 17;

const int IMAGE_REL_ARM_BRANCH20T = 18;

const int IMAGE_REL_THUMB_BRANCH20 = 18;

const int IMAGE_REL_ARM_BRANCH24T = 20;

const int IMAGE_REL_THUMB_BRANCH24 = 20;

const int IMAGE_REL_ARM_BLX23T = 21;

const int IMAGE_REL_THUMB_BLX23 = 21;

const int IMAGE_REL_AM_ABSOLUTE = 0;

const int IMAGE_REL_AM_ADDR32 = 1;

const int IMAGE_REL_AM_ADDR32NB = 2;

const int IMAGE_REL_AM_CALL32 = 3;

const int IMAGE_REL_AM_FUNCINFO = 4;

const int IMAGE_REL_AM_REL32_1 = 5;

const int IMAGE_REL_AM_REL32_2 = 6;

const int IMAGE_REL_AM_SECREL = 7;

const int IMAGE_REL_AM_SECTION = 8;

const int IMAGE_REL_AM_TOKEN = 9;

const int IMAGE_REL_ARM64_ABSOLUTE = 0;

const int IMAGE_REL_ARM64_ADDR32 = 1;

const int IMAGE_REL_ARM64_ADDR32NB = 2;

const int IMAGE_REL_ARM64_BRANCH26 = 3;

const int IMAGE_REL_ARM64_PAGEBASE_REL21 = 4;

const int IMAGE_REL_ARM64_REL21 = 5;

const int IMAGE_REL_ARM64_PAGEOFFSET_12A = 6;

const int IMAGE_REL_ARM64_PAGEOFFSET_12L = 7;

const int IMAGE_REL_ARM64_SECREL = 8;

const int IMAGE_REL_ARM64_SECREL_LOW12A = 9;

const int IMAGE_REL_ARM64_SECREL_HIGH12A = 10;

const int IMAGE_REL_ARM64_SECREL_LOW12L = 11;

const int IMAGE_REL_ARM64_TOKEN = 12;

const int IMAGE_REL_ARM64_SECTION = 13;

const int IMAGE_REL_ARM64_ADDR64 = 14;

const int IMAGE_REL_ARM64_BRANCH19 = 15;

const int IMAGE_REL_AMD64_ABSOLUTE = 0;

const int IMAGE_REL_AMD64_ADDR64 = 1;

const int IMAGE_REL_AMD64_ADDR32 = 2;

const int IMAGE_REL_AMD64_ADDR32NB = 3;

const int IMAGE_REL_AMD64_REL32 = 4;

const int IMAGE_REL_AMD64_REL32_1 = 5;

const int IMAGE_REL_AMD64_REL32_2 = 6;

const int IMAGE_REL_AMD64_REL32_3 = 7;

const int IMAGE_REL_AMD64_REL32_4 = 8;

const int IMAGE_REL_AMD64_REL32_5 = 9;

const int IMAGE_REL_AMD64_SECTION = 10;

const int IMAGE_REL_AMD64_SECREL = 11;

const int IMAGE_REL_AMD64_SECREL7 = 12;

const int IMAGE_REL_AMD64_TOKEN = 13;

const int IMAGE_REL_AMD64_SREL32 = 14;

const int IMAGE_REL_AMD64_PAIR = 15;

const int IMAGE_REL_AMD64_SSPAN32 = 16;

const int IMAGE_REL_AMD64_EHANDLER = 17;

const int IMAGE_REL_AMD64_IMPORT_BR = 18;

const int IMAGE_REL_AMD64_IMPORT_CALL = 19;

const int IMAGE_REL_AMD64_CFG_BR = 20;

const int IMAGE_REL_AMD64_CFG_BR_REX = 21;

const int IMAGE_REL_AMD64_CFG_CALL = 22;

const int IMAGE_REL_AMD64_INDIR_BR = 23;

const int IMAGE_REL_AMD64_INDIR_BR_REX = 24;

const int IMAGE_REL_AMD64_INDIR_CALL = 25;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST = 32;

const int IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST = 47;

const int IMAGE_REL_IA64_ABSOLUTE = 0;

const int IMAGE_REL_IA64_IMM14 = 1;

const int IMAGE_REL_IA64_IMM22 = 2;

const int IMAGE_REL_IA64_IMM64 = 3;

const int IMAGE_REL_IA64_DIR32 = 4;

const int IMAGE_REL_IA64_DIR64 = 5;

const int IMAGE_REL_IA64_PCREL21B = 6;

const int IMAGE_REL_IA64_PCREL21M = 7;

const int IMAGE_REL_IA64_PCREL21F = 8;

const int IMAGE_REL_IA64_GPREL22 = 9;

const int IMAGE_REL_IA64_LTOFF22 = 10;

const int IMAGE_REL_IA64_SECTION = 11;

const int IMAGE_REL_IA64_SECREL22 = 12;

const int IMAGE_REL_IA64_SECREL64I = 13;

const int IMAGE_REL_IA64_SECREL32 = 14;

const int IMAGE_REL_IA64_DIR32NB = 16;

const int IMAGE_REL_IA64_SREL14 = 17;

const int IMAGE_REL_IA64_SREL22 = 18;

const int IMAGE_REL_IA64_SREL32 = 19;

const int IMAGE_REL_IA64_UREL32 = 20;

const int IMAGE_REL_IA64_PCREL60X = 21;

const int IMAGE_REL_IA64_PCREL60B = 22;

const int IMAGE_REL_IA64_PCREL60F = 23;

const int IMAGE_REL_IA64_PCREL60I = 24;

const int IMAGE_REL_IA64_PCREL60M = 25;

const int IMAGE_REL_IA64_IMMGPREL64 = 26;

const int IMAGE_REL_IA64_TOKEN = 27;

const int IMAGE_REL_IA64_GPREL32 = 28;

const int IMAGE_REL_IA64_ADDEND = 31;

const int IMAGE_REL_CEF_ABSOLUTE = 0;

const int IMAGE_REL_CEF_ADDR32 = 1;

const int IMAGE_REL_CEF_ADDR64 = 2;

const int IMAGE_REL_CEF_ADDR32NB = 3;

const int IMAGE_REL_CEF_SECTION = 4;

const int IMAGE_REL_CEF_SECREL = 5;

const int IMAGE_REL_CEF_TOKEN = 6;

const int IMAGE_REL_CEE_ABSOLUTE = 0;

const int IMAGE_REL_CEE_ADDR32 = 1;

const int IMAGE_REL_CEE_ADDR64 = 2;

const int IMAGE_REL_CEE_ADDR32NB = 3;

const int IMAGE_REL_CEE_SECTION = 4;

const int IMAGE_REL_CEE_SECREL = 5;

const int IMAGE_REL_CEE_TOKEN = 6;

const int IMAGE_REL_M32R_ABSOLUTE = 0;

const int IMAGE_REL_M32R_ADDR32 = 1;

const int IMAGE_REL_M32R_ADDR32NB = 2;

const int IMAGE_REL_M32R_ADDR24 = 3;

const int IMAGE_REL_M32R_GPREL16 = 4;

const int IMAGE_REL_M32R_PCREL24 = 5;

const int IMAGE_REL_M32R_PCREL16 = 6;

const int IMAGE_REL_M32R_PCREL8 = 7;

const int IMAGE_REL_M32R_REFHALF = 8;

const int IMAGE_REL_M32R_REFHI = 9;

const int IMAGE_REL_M32R_REFLO = 10;

const int IMAGE_REL_M32R_PAIR = 11;

const int IMAGE_REL_M32R_SECTION = 12;

const int IMAGE_REL_M32R_SECREL32 = 13;

const int IMAGE_REL_M32R_TOKEN = 14;

const int IMAGE_REL_EBC_ABSOLUTE = 0;

const int IMAGE_REL_EBC_ADDR32NB = 1;

const int IMAGE_REL_EBC_REL32 = 2;

const int IMAGE_REL_EBC_SECTION = 3;

const int IMAGE_REL_EBC_SECREL = 4;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM7B_SIZE_X = 7;

const int EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;

const int EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM9D_SIZE_X = 9;

const int EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;

const int EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IMM5C_SIZE_X = 5;

const int EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;

const int EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;

const int EMARCH_ENC_I17_IC_INST_WORD_X = 3;

const int EMARCH_ENC_I17_IC_SIZE_X = 1;

const int EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;

const int EMARCH_ENC_I17_IC_VAL_POS_X = 21;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41a_SIZE_X = 10;

const int EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;

const int EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;

const int EMARCH_ENC_I17_IMM41b_SIZE_X = 8;

const int EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;

const int EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;

const int EMARCH_ENC_I17_IMM41c_SIZE_X = 23;

const int EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;

const int EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;

const int EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;

const int EMARCH_ENC_I17_SIGN_SIZE_X = 1;

const int EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;

const int EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;

const int X3_OPCODE_INST_WORD_X = 3;

const int X3_OPCODE_SIZE_X = 4;

const int X3_OPCODE_INST_WORD_POS_X = 28;

const int X3_OPCODE_SIGN_VAL_POS_X = 0;

const int X3_I_INST_WORD_X = 3;

const int X3_I_SIZE_X = 1;

const int X3_I_INST_WORD_POS_X = 27;

const int X3_I_SIGN_VAL_POS_X = 59;

const int X3_D_WH_INST_WORD_X = 3;

const int X3_D_WH_SIZE_X = 3;

const int X3_D_WH_INST_WORD_POS_X = 24;

const int X3_D_WH_SIGN_VAL_POS_X = 0;

const int X3_IMM20_INST_WORD_X = 3;

const int X3_IMM20_SIZE_X = 20;

const int X3_IMM20_INST_WORD_POS_X = 4;

const int X3_IMM20_SIGN_VAL_POS_X = 0;

const int X3_IMM39_1_INST_WORD_X = 2;

const int X3_IMM39_1_SIZE_X = 23;

const int X3_IMM39_1_INST_WORD_POS_X = 0;

const int X3_IMM39_1_SIGN_VAL_POS_X = 36;

const int X3_IMM39_2_INST_WORD_X = 1;

const int X3_IMM39_2_SIZE_X = 16;

const int X3_IMM39_2_INST_WORD_POS_X = 16;

const int X3_IMM39_2_SIGN_VAL_POS_X = 20;

const int X3_P_INST_WORD_X = 3;

const int X3_P_SIZE_X = 4;

const int X3_P_INST_WORD_POS_X = 0;

const int X3_P_SIGN_VAL_POS_X = 0;

const int X3_TMPLT_INST_WORD_X = 0;

const int X3_TMPLT_SIZE_X = 4;

const int X3_TMPLT_INST_WORD_POS_X = 0;

const int X3_TMPLT_SIGN_VAL_POS_X = 0;

const int X3_BTYPE_QP_INST_WORD_X = 2;

const int X3_BTYPE_QP_SIZE_X = 9;

const int X3_BTYPE_QP_INST_WORD_POS_X = 23;

const int X3_BTYPE_QP_INST_VAL_POS_X = 0;

const int X3_EMPTY_INST_WORD_X = 1;

const int X3_EMPTY_SIZE_X = 2;

const int X3_EMPTY_INST_WORD_POS_X = 14;

const int X3_EMPTY_INST_VAL_POS_X = 0;

const int IMAGE_REL_BASED_ABSOLUTE = 0;

const int IMAGE_REL_BASED_HIGH = 1;

const int IMAGE_REL_BASED_LOW = 2;

const int IMAGE_REL_BASED_HIGHLOW = 3;

const int IMAGE_REL_BASED_HIGHADJ = 4;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_5 = 5;

const int IMAGE_REL_BASED_RESERVED = 6;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_7 = 7;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_8 = 8;

const int IMAGE_REL_BASED_MACHINE_SPECIFIC_9 = 9;

const int IMAGE_REL_BASED_DIR64 = 10;

const int IMAGE_REL_BASED_IA64_IMM64 = 9;

const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;

const int IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;

const int IMAGE_REL_BASED_ARM_MOV32 = 5;

const int IMAGE_REL_BASED_THUMB_MOV32 = 7;

const int IMAGE_ARCHIVE_START_SIZE = 8;

const String IMAGE_ARCHIVE_START = '!<arch>\n';

const String IMAGE_ARCHIVE_END = '`\n';

const String IMAGE_ARCHIVE_PAD = '\n';

const String IMAGE_ARCHIVE_LINKER_MEMBER = '/               ';

const String IMAGE_ARCHIVE_LONGNAMES_MEMBER = '//              ';

const String IMAGE_ARCHIVE_HYBRIDMAP_MEMBER = '/<HYBRIDMAP>/   ';

const int IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;

const int IMAGE_ORDINAL_FLAG64 = -9223372036854775808;

const int IMAGE_ORDINAL_FLAG32 = 2147483648;

const int IMAGE_ORDINAL_FLAG = -9223372036854775808;

const int IMAGE_RESOURCE_NAME_IS_STRING = 2147483648;

const int IMAGE_RESOURCE_DATA_IS_DIRECTORY = 2147483648;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE = 1;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE = 2;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER = 3;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER = 4;

const int IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH = 5;

const int IMAGE_DYNAMIC_RELOCATION_FUNCTION_OVERRIDE = 7;

const int IMAGE_FUNCTION_OVERRIDE_INVALID = 0;

const int IMAGE_FUNCTION_OVERRIDE_X64_REL32 = 1;

const int IMAGE_FUNCTION_OVERRIDE_ARM64_BRANCH26 = 2;

const int IMAGE_FUNCTION_OVERRIDE_ARM64_THUNK = 3;

const int IMAGE_HOT_PATCH_BASE_OBLIGATORY = 1;

const int IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK = 2;

const int IMAGE_HOT_PATCH_CHUNK_INVERSE = 2147483648;

const int IMAGE_HOT_PATCH_CHUNK_OBLIGATORY = 1073741824;

const int IMAGE_HOT_PATCH_CHUNK_RESERVED = 1072705536;

const int IMAGE_HOT_PATCH_CHUNK_TYPE = 1032192;

const int IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA = 32768;

const int IMAGE_HOT_PATCH_CHUNK_TARGET_RVA = 16384;

const int IMAGE_HOT_PATCH_CHUNK_SIZE = 4095;

const int IMAGE_HOT_PATCH_NONE = 0;

const int IMAGE_HOT_PATCH_FUNCTION = 114688;

const int IMAGE_HOT_PATCH_ABSOLUTE = 180224;

const int IMAGE_HOT_PATCH_REL32 = 245760;

const int IMAGE_HOT_PATCH_CALL_TARGET = 278528;

const int IMAGE_HOT_PATCH_INDIRECT = 376832;

const int IMAGE_HOT_PATCH_NO_CALL_TARGET = 409600;

const int IMAGE_HOT_PATCH_DYNAMIC_VALUE = 491520;

const int IMAGE_GUARD_CF_INSTRUMENTED = 256;

const int IMAGE_GUARD_CFW_INSTRUMENTED = 512;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT = 1024;

const int IMAGE_GUARD_SECURITY_COOKIE_UNUSED = 2048;

const int IMAGE_GUARD_PROTECT_DELAYLOAD_IAT = 4096;

const int IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION = 8192;

const int IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT = 16384;

const int IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION = 32768;

const int IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT = 65536;

const int IMAGE_GUARD_RF_INSTRUMENTED = 131072;

const int IMAGE_GUARD_RF_ENABLE = 262144;

const int IMAGE_GUARD_RF_STRICT = 524288;

const int IMAGE_GUARD_RETPOLINE_PRESENT = 1048576;

const int IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT = 4194304;

const int IMAGE_GUARD_XFG_ENABLED = 8388608;

const int IMAGE_GUARD_CASTGUARD_PRESENT = 16777216;

const int IMAGE_GUARD_MEMCPY_PRESENT = 33554432;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = 4026531840;

const int IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT = 28;

const int IMAGE_GUARD_FLAG_FID_SUPPRESSED = 1;

const int IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED = 2;

const int IMAGE_GUARD_FLAG_FID_LANGEXCPTHANDLER = 4;

const int IMAGE_GUARD_FLAG_FID_XFG = 8;

const int IMAGE_ENCLAVE_LONG_ID_LENGTH = 32;

const int IMAGE_ENCLAVE_SHORT_ID_LENGTH = 16;

const int IMAGE_ENCLAVE_MINIMUM_CONFIG_SIZE = 76;

const int IMAGE_ENCLAVE_POLICY_DEBUGGABLE = 1;

const int IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_NONE = 0;

const int IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID = 1;

const int IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID = 2;

const int IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID = 3;

const int IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID = 4;

const int IMAGE_DEBUG_TYPE_UNKNOWN = 0;

const int IMAGE_DEBUG_TYPE_COFF = 1;

const int IMAGE_DEBUG_TYPE_CODEVIEW = 2;

const int IMAGE_DEBUG_TYPE_FPO = 3;

const int IMAGE_DEBUG_TYPE_MISC = 4;

const int IMAGE_DEBUG_TYPE_EXCEPTION = 5;

const int IMAGE_DEBUG_TYPE_FIXUP = 6;

const int IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;

const int IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;

const int IMAGE_DEBUG_TYPE_BORLAND = 9;

const int IMAGE_DEBUG_TYPE_RESERVED10 = 10;

const int IMAGE_DEBUG_TYPE_BBT = 10;

const int IMAGE_DEBUG_TYPE_CLSID = 11;

const int IMAGE_DEBUG_TYPE_VC_FEATURE = 12;

const int IMAGE_DEBUG_TYPE_POGO = 13;

const int IMAGE_DEBUG_TYPE_ILTCG = 14;

const int IMAGE_DEBUG_TYPE_MPX = 15;

const int IMAGE_DEBUG_TYPE_REPRO = 16;

const int IMAGE_DEBUG_TYPE_SPGO = 18;

const int IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS = 20;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT = 1;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE = 2;

const int
    IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE = 4;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC = 8;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1 = 16;

const int IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2 = 32;

const int FRAME_FPO = 0;

const int FRAME_TRAP = 1;

const int FRAME_TSS = 2;

const int FRAME_NONFPO = 3;

const int SIZEOF_RFPO_DATA = 16;

const int IMAGE_DEBUG_MISC_EXENAME = 1;

const int IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756;

const int NON_PAGED_DEBUG_SIGNATURE = 18766;

const int IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768;

const int IMAGE_SEPARATE_DEBUG_MISMATCH = 32768;

const int IMPORT_OBJECT_HDR_SIG2 = 65535;

const int UNWIND_HISTORY_TABLE_SIZE = 12;

const int RTL_RUN_ONCE_CHECK_ONLY = 1;

const int RTL_RUN_ONCE_ASYNC = 2;

const int RTL_RUN_ONCE_INIT_FAILED = 4;

const int RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;

const int FAST_FAIL_LEGACY_GS_VIOLATION = 0;

const int FAST_FAIL_VTGUARD_CHECK_FAILURE = 1;

const int FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2;

const int FAST_FAIL_CORRUPT_LIST_ENTRY = 3;

const int FAST_FAIL_INCORRECT_STACK = 4;

const int FAST_FAIL_INVALID_ARG = 5;

const int FAST_FAIL_GS_COOKIE_INIT = 6;

const int FAST_FAIL_FATAL_APP_EXIT = 7;

const int FAST_FAIL_RANGE_CHECK_FAILURE = 8;

const int FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9;

const int FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10;

const int FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11;

const int FAST_FAIL_INVALID_FIBER_SWITCH = 12;

const int FAST_FAIL_INVALID_SET_OF_CONTEXT = 13;

const int FAST_FAIL_INVALID_REFERENCE_COUNT = 14;

const int FAST_FAIL_INVALID_JUMP_BUFFER = 18;

const int FAST_FAIL_MRDATA_MODIFIED = 19;

const int FAST_FAIL_CERTIFICATION_FAILURE = 20;

const int FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21;

const int FAST_FAIL_CRYPTO_LIBRARY = 22;

const int FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23;

const int FAST_FAIL_INVALID_IMAGE_BASE = 24;

const int FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25;

const int FAST_FAIL_UNSAFE_EXTENSION_CALL = 26;

const int FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27;

const int FAST_FAIL_INVALID_BUFFER_ACCESS = 28;

const int FAST_FAIL_INVALID_BALANCED_TREE = 29;

const int FAST_FAIL_INVALID_NEXT_THREAD = 30;

const int FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31;

const int FAST_FAIL_APCS_DISABLED = 32;

const int FAST_FAIL_INVALID_IDLE_STATE = 33;

const int FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34;

const int FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35;

const int FAST_FAIL_INVALID_LOCK_STATE = 36;

const int FAST_FAIL_GUARD_JUMPTABLE = 37;

const int FAST_FAIL_INVALID_LONGJUMP_TARGET = 38;

const int FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39;

const int FAST_FAIL_INVALID_THREAD = 40;

const int FAST_FAIL_INVALID_SYSCALL_NUMBER = 41;

const int FAST_FAIL_INVALID_FILE_OPERATION = 42;

const int FAST_FAIL_LPAC_ACCESS_DENIED = 43;

const int FAST_FAIL_GUARD_SS_FAILURE = 44;

const int FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45;

const int FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46;

const int FAST_FAIL_INVALID_CONTROL_STACK = 47;

const int FAST_FAIL_SET_CONTEXT_DENIED = 48;

const int FAST_FAIL_INVALID_IAT = 49;

const int FAST_FAIL_HEAP_METADATA_CORRUPTION = 50;

const int FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51;

const int FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52;

const int FAST_FAIL_ENCLAVE_CALL_FAILURE = 53;

const int FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54;

const int FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55;

const int FAST_FAIL_UNEXPECTED_CALL = 56;

const int FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57;

const int FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58;

const int FAST_FAIL_FLAGS_CORRUPTION = 59;

const int FAST_FAIL_VEH_CORRUPTION = 60;

const int FAST_FAIL_ETW_CORRUPTION = 61;

const int FAST_FAIL_RIO_ABORT = 62;

const int FAST_FAIL_INVALID_PFN = 63;

const int FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG = 64;

const int FAST_FAIL_CAST_GUARD = 65;

const int FAST_FAIL_HOST_VISIBILITY_CHANGE = 66;

const int FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST = 67;

const int FAST_FAIL_PATCH_CALLBACK_FAILED = 68;

const int FAST_FAIL_NTDLL_PATCH_FAILED = 69;

const int FAST_FAIL_INVALID_FLS_DATA = 70;

const int FAST_FAIL_INVALID_FAST_FAIL_CODE = 4294967295;

const int HEAP_NO_SERIALIZE = 1;

const int HEAP_GROWABLE = 2;

const int HEAP_GENERATE_EXCEPTIONS = 4;

const int HEAP_ZERO_MEMORY = 8;

const int HEAP_REALLOC_IN_PLACE_ONLY = 16;

const int HEAP_TAIL_CHECKING_ENABLED = 32;

const int HEAP_FREE_CHECKING_ENABLED = 64;

const int HEAP_DISABLE_COALESCE_ON_FREE = 128;

const int HEAP_CREATE_ALIGN_16 = 65536;

const int HEAP_CREATE_ENABLE_TRACING = 131072;

const int HEAP_CREATE_ENABLE_EXECUTE = 262144;

const int HEAP_MAXIMUM_TAG = 4095;

const int HEAP_PSEUDO_TAG_FLAG = 32768;

const int HEAP_TAG_SHIFT = 18;

const int HEAP_CREATE_SEGMENT_HEAP = 256;

const int HEAP_CREATE_HARDENED = 512;

const int IS_TEXT_UNICODE_ASCII16 = 1;

const int IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;

const int IS_TEXT_UNICODE_STATISTICS = 2;

const int IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;

const int IS_TEXT_UNICODE_CONTROLS = 4;

const int IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;

const int IS_TEXT_UNICODE_SIGNATURE = 8;

const int IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;

const int IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;

const int IS_TEXT_UNICODE_ODD_LENGTH = 512;

const int IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024;

const int IS_TEXT_UNICODE_UTF8 = 2048;

const int IS_TEXT_UNICODE_NULL_BYTES = 4096;

const int IS_TEXT_UNICODE_UNICODE_MASK = 15;

const int IS_TEXT_UNICODE_REVERSE_MASK = 240;

const int IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;

const int IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;

const int COMPRESSION_FORMAT_NONE = 0;

const int COMPRESSION_FORMAT_DEFAULT = 1;

const int COMPRESSION_FORMAT_LZNT1 = 2;

const int COMPRESSION_FORMAT_XPRESS = 3;

const int COMPRESSION_FORMAT_XPRESS_HUFF = 4;

const int COMPRESSION_FORMAT_XP10 = 5;

const int COMPRESSION_ENGINE_STANDARD = 0;

const int COMPRESSION_ENGINE_MAXIMUM = 256;

const int COMPRESSION_ENGINE_HIBER = 512;

const int SEF_DACL_AUTO_INHERIT = 1;

const int SEF_SACL_AUTO_INHERIT = 2;

const int SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 4;

const int SEF_AVOID_PRIVILEGE_CHECK = 8;

const int SEF_AVOID_OWNER_CHECK = 16;

const int SEF_DEFAULT_OWNER_FROM_PARENT = 32;

const int SEF_DEFAULT_GROUP_FROM_PARENT = 64;

const int SEF_MACL_NO_WRITE_UP = 256;

const int SEF_MACL_NO_READ_UP = 512;

const int SEF_MACL_NO_EXECUTE_UP = 1024;

const int SEF_AI_USE_EXTRA_PARAMS = 2048;

const int SEF_AVOID_OWNER_RESTRICTION = 4096;

const int SEF_FORCE_USER_MODE = 8192;

const int SEF_NORMALIZE_OUTPUT_DESCRIPTOR = 16384;

const int SEF_MACL_VALID_FLAGS = 1792;

const int MESSAGE_RESOURCE_UNICODE = 1;

const int MESSAGE_RESOURCE_UTF8 = 2;

const int VER_EQUAL = 1;

const int VER_GREATER = 2;

const int VER_GREATER_EQUAL = 3;

const int VER_LESS = 4;

const int VER_LESS_EQUAL = 5;

const int VER_AND = 6;

const int VER_OR = 7;

const int VER_CONDITION_MASK = 7;

const int VER_NUM_BITS_PER_CONDITION_MASK = 3;

const int VER_MINORVERSION = 1;

const int VER_MAJORVERSION = 2;

const int VER_BUILDNUMBER = 4;

const int VER_PLATFORMID = 8;

const int VER_SERVICEPACKMINOR = 16;

const int VER_SERVICEPACKMAJOR = 32;

const int VER_SUITENAME = 64;

const int VER_PRODUCT_TYPE = 128;

const int VER_NT_WORKSTATION = 1;

const int VER_NT_DOMAIN_CONTROLLER = 2;

const int VER_NT_SERVER = 3;

const int VER_PLATFORM_WIN32s = 0;

const int VER_PLATFORM_WIN32_WINDOWS = 1;

const int VER_PLATFORM_WIN32_NT = 2;

const int RTL_UMS_VERSION = 256;

const int VRL_PREDEFINED_CLASS_BEGIN = 1;

const int VRL_CUSTOM_CLASS_BEGIN = 256;

const int VRL_CLASS_CONSISTENCY = 1;

const int VRL_ENABLE_KERNEL_BREAKS = -2147483648;

const int CTMF_INCLUDE_APPCONTAINER = 1;

const int CTMF_INCLUDE_LPAC = 2;

const int CTMF_VALID_FLAGS = 3;

const int FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN = 1;

const int FLUSH_NV_MEMORY_DEFAULT_TOKEN = -1;

const int WRITE_NV_MEMORY_FLAG_FLUSH = 1;

const int WRITE_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int WRITE_NV_MEMORY_FLAG_PERSIST = 3;

const int WRITE_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int FILL_NV_MEMORY_FLAG_FLUSH = 1;

const int FILL_NV_MEMORY_FLAG_NON_TEMPORAL = 2;

const int FILL_NV_MEMORY_FLAG_PERSIST = 3;

const int FILL_NV_MEMORY_FLAG_NO_DRAIN = 256;

const int RTL_CORRELATION_VECTOR_STRING_LENGTH = 129;

const int RTL_CORRELATION_VECTOR_VERSION_1 = 1;

const int RTL_CORRELATION_VECTOR_VERSION_2 = 2;

const int RTL_CORRELATION_VECTOR_VERSION_CURRENT = 2;

const int RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = 16;

const int RTL_CORRELATION_VECTOR_V1_LENGTH = 64;

const int RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = 22;

const int RTL_CORRELATION_VECTOR_V2_LENGTH = 128;

const int IMAGE_POLICY_METADATA_VERSION = 1;

const String IMAGE_POLICY_SECTION_NAME = '.tPolicy';

const int RTL_VIRTUAL_UNWIND2_VALIDATE_PAC = 1;

const int RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 16777216;

const int RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 33554432;

const int RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 67108864;

const int RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = 134217728;

const int RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = 268435456;

const int RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 4278190080;

const int RTL_CRITICAL_SECTION_FLAG_RESERVED = 3758096384;

const int RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 1;

const int RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION = 1;

const int WT_EXECUTEDEFAULT = 0;

const int WT_EXECUTEINIOTHREAD = 1;

const int WT_EXECUTEINUITHREAD = 2;

const int WT_EXECUTEINWAITTHREAD = 4;

const int WT_EXECUTEONLYONCE = 8;

const int WT_EXECUTEINTIMERTHREAD = 32;

const int WT_EXECUTELONGFUNCTION = 16;

const int WT_EXECUTEINPERSISTENTIOTHREAD = 64;

const int WT_EXECUTEINPERSISTENTTHREAD = 128;

const int WT_TRANSFER_IMPERSONATION = 256;

const int WT_EXECUTEINLONGTHREAD = 16;

const int WT_EXECUTEDELETEWAIT = 8;

const int ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1;

const int ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2;

const int ACTIVATION_CONTEXT_PATH_TYPE_URL = 3;

const int ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4;

const int CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = 1;

const int PERFORMANCE_DATA_VERSION = 1;

const int READ_THREAD_PROFILING_FLAG_DISPATCHING = 1;

const int READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 2;

const String UNIFIEDBUILDREVISION_KEY = '\\';

const String UNIFIEDBUILDREVISION_VALUE = 'U';

const int UNIFIEDBUILDREVISION_MIN = 0;

const String DEVICEFAMILYDEVICEFORM_KEY = '\\';

const String DEVICEFAMILYDEVICEFORM_VALUE = 'D';

const int DEVICEFAMILYINFOENUM_UAP = 0;

const int DEVICEFAMILYINFOENUM_WINDOWS_8X = 1;

const int DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X = 2;

const int DEVICEFAMILYINFOENUM_DESKTOP = 3;

const int DEVICEFAMILYINFOENUM_MOBILE = 4;

const int DEVICEFAMILYINFOENUM_XBOX = 5;

const int DEVICEFAMILYINFOENUM_TEAM = 6;

const int DEVICEFAMILYINFOENUM_IOT = 7;

const int DEVICEFAMILYINFOENUM_IOT_HEADLESS = 8;

const int DEVICEFAMILYINFOENUM_SERVER = 9;

const int DEVICEFAMILYINFOENUM_HOLOGRAPHIC = 10;

const int DEVICEFAMILYINFOENUM_XBOXSRA = 11;

const int DEVICEFAMILYINFOENUM_XBOXERA = 12;

const int DEVICEFAMILYINFOENUM_SERVER_NANO = 13;

const int DEVICEFAMILYINFOENUM_8828080 = 14;

const int DEVICEFAMILYINFOENUM_7067329 = 15;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE = 16;

const int DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS = 17;

const int DEVICEFAMILYINFOENUM_MAX = 17;

const int DEVICEFAMILYDEVICEFORM_UNKNOWN = 0;

const int DEVICEFAMILYDEVICEFORM_PHONE = 1;

const int DEVICEFAMILYDEVICEFORM_TABLET = 2;

const int DEVICEFAMILYDEVICEFORM_DESKTOP = 3;

const int DEVICEFAMILYDEVICEFORM_NOTEBOOK = 4;

const int DEVICEFAMILYDEVICEFORM_CONVERTIBLE = 5;

const int DEVICEFAMILYDEVICEFORM_DETACHABLE = 6;

const int DEVICEFAMILYDEVICEFORM_ALLINONE = 7;

const int DEVICEFAMILYDEVICEFORM_STICKPC = 8;

const int DEVICEFAMILYDEVICEFORM_PUCK = 9;

const int DEVICEFAMILYDEVICEFORM_LARGESCREEN = 10;

const int DEVICEFAMILYDEVICEFORM_HMD = 11;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD = 12;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET = 13;

const int DEVICEFAMILYDEVICEFORM_BANKING = 14;

const int DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION = 15;

const int DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE = 16;

const int DEVICEFAMILYDEVICEFORM_GAMING = 17;

const int DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION = 18;

const int DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION = 19;

const int DEVICEFAMILYDEVICEFORM_KIOSK = 20;

const int DEVICEFAMILYDEVICEFORM_MAKER_BOARD = 21;

const int DEVICEFAMILYDEVICEFORM_MEDICAL = 22;

const int DEVICEFAMILYDEVICEFORM_NETWORKING = 23;

const int DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE = 24;

const int DEVICEFAMILYDEVICEFORM_PRINTING = 25;

const int DEVICEFAMILYDEVICEFORM_THIN_CLIENT = 26;

const int DEVICEFAMILYDEVICEFORM_TOY = 27;

const int DEVICEFAMILYDEVICEFORM_VENDING = 28;

const int DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER = 29;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE = 30;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_S = 31;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X = 32;

const int DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT = 33;

const int DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X = 34;

const int DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X_DEVKIT = 35;

const int DEVICEFAMILYDEVICEFORM_XBOX_SERIES_S = 36;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_01 = 37;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_02 = 38;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_03 = 39;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_04 = 40;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_05 = 41;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_06 = 42;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_07 = 43;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_08 = 44;

const int DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_09 = 45;

const int DEVICEFAMILYDEVICEFORM_MAX = 45;

const int DLL_PROCESS_ATTACH = 1;

const int DLL_THREAD_ATTACH = 2;

const int DLL_THREAD_DETACH = 3;

const int DLL_PROCESS_DETACH = 0;

const int EVENTLOG_SEQUENTIAL_READ = 1;

const int EVENTLOG_SEEK_READ = 2;

const int EVENTLOG_FORWARDS_READ = 4;

const int EVENTLOG_BACKWARDS_READ = 8;

const int EVENTLOG_SUCCESS = 0;

const int EVENTLOG_ERROR_TYPE = 1;

const int EVENTLOG_WARNING_TYPE = 2;

const int EVENTLOG_INFORMATION_TYPE = 4;

const int EVENTLOG_AUDIT_SUCCESS = 8;

const int EVENTLOG_AUDIT_FAILURE = 16;

const int EVENTLOG_START_PAIRED_EVENT = 1;

const int EVENTLOG_END_PAIRED_EVENT = 2;

const int EVENTLOG_END_ALL_PAIRED_EVENTS = 4;

const int EVENTLOG_PAIRED_EVENT_ACTIVE = 8;

const int EVENTLOG_PAIRED_EVENT_INACTIVE = 16;

const int MAXLOGICALLOGNAMESIZE = 256;

const int KEY_QUERY_VALUE = 1;

const int KEY_SET_VALUE = 2;

const int KEY_CREATE_SUB_KEY = 4;

const int KEY_ENUMERATE_SUB_KEYS = 8;

const int KEY_NOTIFY = 16;

const int KEY_CREATE_LINK = 32;

const int KEY_WOW64_32KEY = 512;

const int KEY_WOW64_64KEY = 256;

const int KEY_WOW64_RES = 768;

const int KEY_READ = 131097;

const int KEY_WRITE = 131078;

const int KEY_EXECUTE = 131097;

const int KEY_ALL_ACCESS = 983103;

const int REG_OPTION_RESERVED = 0;

const int REG_OPTION_NON_VOLATILE = 0;

const int REG_OPTION_VOLATILE = 1;

const int REG_OPTION_CREATE_LINK = 2;

const int REG_OPTION_BACKUP_RESTORE = 4;

const int REG_OPTION_OPEN_LINK = 8;

const int REG_OPTION_DONT_VIRTUALIZE = 16;

const int REG_LEGAL_OPTION = 31;

const int REG_OPEN_LEGAL_OPTION = 28;

const int REG_CREATED_NEW_KEY = 1;

const int REG_OPENED_EXISTING_KEY = 2;

const int REG_STANDARD_FORMAT = 1;

const int REG_LATEST_FORMAT = 2;

const int REG_NO_COMPRESSION = 4;

const int REG_WHOLE_HIVE_VOLATILE = 1;

const int REG_REFRESH_HIVE = 2;

const int REG_NO_LAZY_FLUSH = 4;

const int REG_FORCE_RESTORE = 8;

const int REG_APP_HIVE = 16;

const int REG_PROCESS_PRIVATE = 32;

const int REG_START_JOURNAL = 64;

const int REG_HIVE_EXACT_FILE_GROWTH = 128;

const int REG_HIVE_NO_RM = 256;

const int REG_HIVE_SINGLE_LOG = 512;

const int REG_BOOT_HIVE = 1024;

const int REG_LOAD_HIVE_OPEN_HANDLE = 2048;

const int REG_FLUSH_HIVE_FILE_GROWTH = 4096;

const int REG_OPEN_READ_ONLY = 8192;

const int REG_IMMUTABLE = 16384;

const int REG_NO_IMPERSONATION_FALLBACK = 32768;

const int REG_APP_HIVE_OPEN_READ_ONLY = 8192;

const int REG_FORCE_UNLOAD = 1;

const int REG_UNLOAD_LEGAL_FLAGS = 1;

const int REG_NOTIFY_CHANGE_NAME = 1;

const int REG_NOTIFY_CHANGE_ATTRIBUTES = 2;

const int REG_NOTIFY_CHANGE_LAST_SET = 4;

const int REG_NOTIFY_CHANGE_SECURITY = 8;

const int REG_NOTIFY_THREAD_AGNOSTIC = 268435456;

const int REG_LEGAL_CHANGE_FILTER = 268435471;

const int REG_NONE = 0;

const int REG_SZ = 1;

const int REG_EXPAND_SZ = 2;

const int REG_BINARY = 3;

const int REG_DWORD = 4;

const int REG_DWORD_LITTLE_ENDIAN = 4;

const int REG_DWORD_BIG_ENDIAN = 5;

const int REG_LINK = 6;

const int REG_MULTI_SZ = 7;

const int REG_RESOURCE_LIST = 8;

const int REG_FULL_RESOURCE_DESCRIPTOR = 9;

const int REG_RESOURCE_REQUIREMENTS_LIST = 10;

const int REG_QWORD = 11;

const int REG_QWORD_LITTLE_ENDIAN = 11;

const int SERVICE_KERNEL_DRIVER = 1;

const int SERVICE_FILE_SYSTEM_DRIVER = 2;

const int SERVICE_ADAPTER = 4;

const int SERVICE_RECOGNIZER_DRIVER = 8;

const int SERVICE_DRIVER = 11;

const int SERVICE_WIN32_OWN_PROCESS = 16;

const int SERVICE_WIN32_SHARE_PROCESS = 32;

const int SERVICE_WIN32 = 48;

const int SERVICE_USER_SERVICE = 64;

const int SERVICE_USERSERVICE_INSTANCE = 128;

const int SERVICE_USER_SHARE_PROCESS = 96;

const int SERVICE_USER_OWN_PROCESS = 80;

const int SERVICE_INTERACTIVE_PROCESS = 256;

const int SERVICE_PKG_SERVICE = 512;

const int SERVICE_TYPE_ALL = 1023;

const int SERVICE_BOOT_START = 0;

const int SERVICE_SYSTEM_START = 1;

const int SERVICE_AUTO_START = 2;

const int SERVICE_DEMAND_START = 3;

const int SERVICE_DISABLED = 4;

const int SERVICE_ERROR_IGNORE = 0;

const int SERVICE_ERROR_NORMAL = 1;

const int SERVICE_ERROR_SEVERE = 2;

const int SERVICE_ERROR_CRITICAL = 3;

const int CM_SERVICE_NETWORK_BOOT_LOAD = 1;

const int CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 2;

const int CM_SERVICE_USB_DISK_BOOT_LOAD = 4;

const int CM_SERVICE_SD_DISK_BOOT_LOAD = 8;

const int CM_SERVICE_USB3_DISK_BOOT_LOAD = 16;

const int CM_SERVICE_MEASURED_BOOT_LOAD = 32;

const int CM_SERVICE_VERIFIER_BOOT_LOAD = 64;

const int CM_SERVICE_WINPE_BOOT_LOAD = 128;

const int CM_SERVICE_RAM_DISK_BOOT_LOAD = 256;

const int CM_SERVICE_VALID_PROMOTION_MASK = 511;

const int TAPE_ERASE_SHORT = 0;

const int TAPE_ERASE_LONG = 1;

const int TAPE_LOAD = 0;

const int TAPE_UNLOAD = 1;

const int TAPE_TENSION = 2;

const int TAPE_LOCK = 3;

const int TAPE_UNLOCK = 4;

const int TAPE_FORMAT = 5;

const int TAPE_SETMARKS = 0;

const int TAPE_FILEMARKS = 1;

const int TAPE_SHORT_FILEMARKS = 2;

const int TAPE_LONG_FILEMARKS = 3;

const int TAPE_ABSOLUTE_POSITION = 0;

const int TAPE_LOGICAL_POSITION = 1;

const int TAPE_PSEUDO_LOGICAL_POSITION = 2;

const int TAPE_REWIND = 0;

const int TAPE_ABSOLUTE_BLOCK = 1;

const int TAPE_LOGICAL_BLOCK = 2;

const int TAPE_PSEUDO_LOGICAL_BLOCK = 3;

const int TAPE_SPACE_END_OF_DATA = 4;

const int TAPE_SPACE_RELATIVE_BLOCKS = 5;

const int TAPE_SPACE_FILEMARKS = 6;

const int TAPE_SPACE_SEQUENTIAL_FMKS = 7;

const int TAPE_SPACE_SETMARKS = 8;

const int TAPE_SPACE_SEQUENTIAL_SMKS = 9;

const int TAPE_DRIVE_FIXED = 1;

const int TAPE_DRIVE_SELECT = 2;

const int TAPE_DRIVE_INITIATOR = 4;

const int TAPE_DRIVE_ERASE_SHORT = 16;

const int TAPE_DRIVE_ERASE_LONG = 32;

const int TAPE_DRIVE_ERASE_BOP_ONLY = 64;

const int TAPE_DRIVE_ERASE_IMMEDIATE = 128;

const int TAPE_DRIVE_TAPE_CAPACITY = 256;

const int TAPE_DRIVE_TAPE_REMAINING = 512;

const int TAPE_DRIVE_FIXED_BLOCK = 1024;

const int TAPE_DRIVE_VARIABLE_BLOCK = 2048;

const int TAPE_DRIVE_WRITE_PROTECT = 4096;

const int TAPE_DRIVE_EOT_WZ_SIZE = 8192;

const int TAPE_DRIVE_ECC = 65536;

const int TAPE_DRIVE_COMPRESSION = 131072;

const int TAPE_DRIVE_PADDING = 262144;

const int TAPE_DRIVE_REPORT_SMKS = 524288;

const int TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576;

const int TAPE_DRIVE_GET_LOGICAL_BLK = 2097152;

const int TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304;

const int TAPE_DRIVE_EJECT_MEDIA = 16777216;

const int TAPE_DRIVE_CLEAN_REQUESTS = 33554432;

const int TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864;

const int TAPE_DRIVE_RESERVED_BIT = 2147483648;

const int TAPE_DRIVE_LOAD_UNLOAD = 2147483649;

const int TAPE_DRIVE_TENSION = 2147483650;

const int TAPE_DRIVE_LOCK_UNLOCK = 2147483652;

const int TAPE_DRIVE_REWIND_IMMEDIATE = 2147483656;

const int TAPE_DRIVE_SET_BLOCK_SIZE = 2147483664;

const int TAPE_DRIVE_LOAD_UNLD_IMMED = 2147483680;

const int TAPE_DRIVE_TENSION_IMMED = 2147483712;

const int TAPE_DRIVE_LOCK_UNLK_IMMED = 2147483776;

const int TAPE_DRIVE_SET_ECC = 2147483904;

const int TAPE_DRIVE_SET_COMPRESSION = 2147484160;

const int TAPE_DRIVE_SET_PADDING = 2147484672;

const int TAPE_DRIVE_SET_REPORT_SMKS = 2147485696;

const int TAPE_DRIVE_ABSOLUTE_BLK = 2147487744;

const int TAPE_DRIVE_ABS_BLK_IMMED = 2147491840;

const int TAPE_DRIVE_LOGICAL_BLK = 2147500032;

const int TAPE_DRIVE_LOG_BLK_IMMED = 2147516416;

const int TAPE_DRIVE_END_OF_DATA = 2147549184;

const int TAPE_DRIVE_RELATIVE_BLKS = 2147614720;

const int TAPE_DRIVE_FILEMARKS = 2147745792;

const int TAPE_DRIVE_SEQUENTIAL_FMKS = 2148007936;

const int TAPE_DRIVE_SETMARKS = 2148532224;

const int TAPE_DRIVE_SEQUENTIAL_SMKS = 2149580800;

const int TAPE_DRIVE_REVERSE_POSITION = 2151677952;

const int TAPE_DRIVE_SPACE_IMMEDIATE = 2155872256;

const int TAPE_DRIVE_WRITE_SETMARKS = 2164260864;

const int TAPE_DRIVE_WRITE_FILEMARKS = 2181038080;

const int TAPE_DRIVE_WRITE_SHORT_FMKS = 2214592512;

const int TAPE_DRIVE_WRITE_LONG_FMKS = 2281701376;

const int TAPE_DRIVE_WRITE_MARK_IMMED = 2415919104;

const int TAPE_DRIVE_FORMAT = 2684354560;

const int TAPE_DRIVE_FORMAT_IMMEDIATE = 3221225472;

const int TAPE_DRIVE_HIGH_FEATURES = 2147483648;

const int TAPE_FIXED_PARTITIONS = 0;

const int TAPE_SELECT_PARTITIONS = 1;

const int TAPE_INITIATOR_PARTITIONS = 2;

const int TAPE_QUERY_DRIVE_PARAMETERS = 0;

const int TAPE_QUERY_MEDIA_CAPACITY = 1;

const int TAPE_CHECK_FOR_DRIVE_PROBLEM = 2;

const int TAPE_QUERY_IO_ERROR_DATA = 3;

const int TAPE_QUERY_DEVICE_ERROR_DATA = 4;

const int TRANSACTION_MANAGER_VOLATILE = 1;

const int TRANSACTION_MANAGER_COMMIT_DEFAULT = 0;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2;

const int TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4;

const int TRANSACTION_MANAGER_COMMIT_LOWEST = 8;

const int TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16;

const int TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32;

const int TRANSACTION_MANAGER_MAXIMUM_OPTION = 63;

const int TRANSACTION_DO_NOT_PROMOTE = 1;

const int TRANSACTION_MAXIMUM_OPTION = 1;

const int RESOURCE_MANAGER_VOLATILE = 1;

const int RESOURCE_MANAGER_COMMUNICATION = 2;

const int RESOURCE_MANAGER_MAXIMUM_OPTION = 3;

const int CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1;

const int CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2;

const int CRM_PROTOCOL_MAXIMUM_OPTION = 3;

const int ENLISTMENT_SUPERIOR = 1;

const int ENLISTMENT_MAXIMUM_OPTION = 1;

const int TRANSACTION_NOTIFY_MASK = 1073741823;

const int TRANSACTION_NOTIFY_PREPREPARE = 1;

const int TRANSACTION_NOTIFY_PREPARE = 2;

const int TRANSACTION_NOTIFY_COMMIT = 4;

const int TRANSACTION_NOTIFY_ROLLBACK = 8;

const int TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16;

const int TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32;

const int TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64;

const int TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128;

const int TRANSACTION_NOTIFY_RECOVER = 256;

const int TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512;

const int TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024;

const int TRANSACTION_NOTIFY_RECOVER_QUERY = 2048;

const int TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096;

const int TRANSACTION_NOTIFY_LAST_RECOVER = 8192;

const int TRANSACTION_NOTIFY_INDOUBT = 16384;

const int TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768;

const int TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536;

const int TRANSACTION_NOTIFY_MARSHAL = 131072;

const int TRANSACTION_NOTIFY_ENLIST_MASK = 262144;

const int TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216;

const int TRANSACTION_NOTIFY_TM_ONLINE = 33554432;

const int TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864;

const int TRANSACTION_NOTIFY_PROMOTE = 134217728;

const int TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456;

const int TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912;

const int TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824;

const String TRANSACTIONMANAGER_OBJECT_PATH = '\\';

const String TRANSACTION_OBJECT_PATH = '\\';

const String ENLISTMENT_OBJECT_PATH = '\\';

const String RESOURCE_MANAGER_OBJECT_PATH = '\\';

const int TRANSACTIONMANAGER_OBJECT_NAME_LENGTH_IN_BYTES = 118;

const int TRANSACTION_OBJECT_NAME_LENGTH_IN_BYTES = 104;

const int ENLISTMENT_OBJECT_NAME_LENGTH_IN_BYTES = 102;

const int RESOURCE_MANAGER_OBJECT_NAME_LENGTH_IN_BYTES = 112;

const int TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1;

const int KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;

const int KTM_MARSHAL_BLOB_VERSION_MINOR = 1;

const int MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;

const int MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;

const int TRANSACTIONMANAGER_QUERY_INFORMATION = 1;

const int TRANSACTIONMANAGER_SET_INFORMATION = 2;

const int TRANSACTIONMANAGER_RECOVER = 4;

const int TRANSACTIONMANAGER_RENAME = 8;

const int TRANSACTIONMANAGER_CREATE_RM = 16;

const int TRANSACTIONMANAGER_BIND_TRANSACTION = 32;

const int TRANSACTIONMANAGER_GENERIC_READ = 131073;

const int TRANSACTIONMANAGER_GENERIC_WRITE = 131102;

const int TRANSACTIONMANAGER_GENERIC_EXECUTE = 131072;

const int TRANSACTIONMANAGER_ALL_ACCESS = 983103;

const int TRANSACTION_QUERY_INFORMATION = 1;

const int TRANSACTION_SET_INFORMATION = 2;

const int TRANSACTION_ENLIST = 4;

const int TRANSACTION_COMMIT = 8;

const int TRANSACTION_ROLLBACK = 16;

const int TRANSACTION_PROPAGATE = 32;

const int TRANSACTION_RIGHT_RESERVED1 = 64;

const int TRANSACTION_GENERIC_READ = 1179649;

const int TRANSACTION_GENERIC_WRITE = 1179710;

const int TRANSACTION_GENERIC_EXECUTE = 1179672;

const int TRANSACTION_ALL_ACCESS = 2031679;

const int TRANSACTION_RESOURCE_MANAGER_RIGHTS = 1179703;

const int RESOURCEMANAGER_QUERY_INFORMATION = 1;

const int RESOURCEMANAGER_SET_INFORMATION = 2;

const int RESOURCEMANAGER_RECOVER = 4;

const int RESOURCEMANAGER_ENLIST = 8;

const int RESOURCEMANAGER_GET_NOTIFICATION = 16;

const int RESOURCEMANAGER_REGISTER_PROTOCOL = 32;

const int RESOURCEMANAGER_COMPLETE_PROPAGATION = 64;

const int RESOURCEMANAGER_GENERIC_READ = 1179649;

const int RESOURCEMANAGER_GENERIC_WRITE = 1179774;

const int RESOURCEMANAGER_GENERIC_EXECUTE = 1179740;

const int RESOURCEMANAGER_ALL_ACCESS = 2031743;

const int ENLISTMENT_QUERY_INFORMATION = 1;

const int ENLISTMENT_SET_INFORMATION = 2;

const int ENLISTMENT_RECOVER = 4;

const int ENLISTMENT_SUBORDINATE_RIGHTS = 8;

const int ENLISTMENT_SUPERIOR_RIGHTS = 16;

const int ENLISTMENT_GENERIC_READ = 131073;

const int ENLISTMENT_GENERIC_WRITE = 131102;

const int ENLISTMENT_GENERIC_EXECUTE = 131100;

const int ENLISTMENT_ALL_ACCESS = 983071;

const int ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1;

const int ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2;

const int ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3;

const int ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4;

const int ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5;

const int ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6;

const int ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7;

const int ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8;

const int ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9;

const int ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10;

const int ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11;

const int ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES = 12;

const int HFILE_ERROR = -1;

const int APP_LOCAL_DEVICE_ID_SIZE = 32;

const int DM_UPDATE = 1;

const int DM_COPY = 2;

const int DM_PROMPT = 4;

const int DM_MODIFY = 8;

const int DM_IN_BUFFER = 8;

const int DM_IN_PROMPT = 4;

const int DM_OUT_BUFFER = 2;

const int DM_OUT_DEFAULT = 1;

const int DC_FIELDS = 1;

const int DC_PAPERS = 2;

const int DC_PAPERSIZE = 3;

const int DC_MINEXTENT = 4;

const int DC_MAXEXTENT = 5;

const int DC_BINS = 6;

const int DC_DUPLEX = 7;

const int DC_SIZE = 8;

const int DC_EXTRA = 9;

const int DC_VERSION = 10;

const int DC_DRIVER = 11;

const int DC_BINNAMES = 12;

const int DC_ENUMRESOLUTIONS = 13;

const int DC_FILEDEPENDENCIES = 14;

const int DC_TRUETYPE = 15;

const int DC_PAPERNAMES = 16;

const int DC_ORIENTATION = 17;

const int DC_COPIES = 18;

const int FIND_FIRST_EX_CASE_SENSITIVE = 1;

const int FIND_FIRST_EX_LARGE_FETCH = 2;

const int FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4;

const int LOCKFILE_FAIL_IMMEDIATELY = 1;

const int LOCKFILE_EXCLUSIVE_LOCK = 2;

const int PROCESS_HEAP_REGION = 1;

const int PROCESS_HEAP_UNCOMMITTED_RANGE = 2;

const int PROCESS_HEAP_ENTRY_BUSY = 4;

const int PROCESS_HEAP_SEG_ALLOC = 8;

const int PROCESS_HEAP_ENTRY_MOVEABLE = 16;

const int PROCESS_HEAP_ENTRY_DDESHARE = 32;

const int EXCEPTION_DEBUG_EVENT = 1;

const int CREATE_THREAD_DEBUG_EVENT = 2;

const int CREATE_PROCESS_DEBUG_EVENT = 3;

const int EXIT_THREAD_DEBUG_EVENT = 4;

const int EXIT_PROCESS_DEBUG_EVENT = 5;

const int LOAD_DLL_DEBUG_EVENT = 6;

const int UNLOAD_DLL_DEBUG_EVENT = 7;

const int OUTPUT_DEBUG_STRING_EVENT = 8;

const int RIP_EVENT = 9;

const int STILL_ACTIVE = 259;

const int EXCEPTION_ACCESS_VIOLATION = 3221225477;

const int EXCEPTION_DATATYPE_MISALIGNMENT = 2147483650;

const int EXCEPTION_BREAKPOINT = 2147483651;

const int EXCEPTION_SINGLE_STEP = 2147483652;

const int EXCEPTION_ARRAY_BOUNDS_EXCEEDED = 3221225612;

const int EXCEPTION_FLT_DENORMAL_OPERAND = 3221225613;

const int EXCEPTION_FLT_DIVIDE_BY_ZERO = 3221225614;

const int EXCEPTION_FLT_INEXACT_RESULT = 3221225615;

const int EXCEPTION_FLT_INVALID_OPERATION = 3221225616;

const int EXCEPTION_FLT_OVERFLOW = 3221225617;

const int EXCEPTION_FLT_STACK_CHECK = 3221225618;

const int EXCEPTION_FLT_UNDERFLOW = 3221225619;

const int EXCEPTION_INT_DIVIDE_BY_ZERO = 3221225620;

const int EXCEPTION_INT_OVERFLOW = 3221225621;

const int EXCEPTION_PRIV_INSTRUCTION = 3221225622;

const int EXCEPTION_IN_PAGE_ERROR = 3221225478;

const int EXCEPTION_ILLEGAL_INSTRUCTION = 3221225501;

const int EXCEPTION_NONCONTINUABLE_EXCEPTION = 3221225509;

const int EXCEPTION_STACK_OVERFLOW = 3221225725;

const int EXCEPTION_INVALID_DISPOSITION = 3221225510;

const int EXCEPTION_GUARD_PAGE = 2147483649;

const int EXCEPTION_INVALID_HANDLE = 3221225480;

const int CONTROL_C_EXIT = 3221225786;

const int LMEM_FIXED = 0;

const int LMEM_MOVEABLE = 2;

const int LMEM_NOCOMPACT = 16;

const int LMEM_NODISCARD = 32;

const int LMEM_ZEROINIT = 64;

const int LMEM_MODIFY = 128;

const int LMEM_DISCARDABLE = 3840;

const int LMEM_VALID_FLAGS = 3954;

const int LMEM_INVALID_HANDLE = 32768;

const int LHND = 66;

const int LPTR = 64;

const int NONZEROLHND = 2;

const int NONZEROLPTR = 0;

const int LMEM_DISCARDED = 16384;

const int LMEM_LOCKCOUNT = 255;

const int NUMA_NO_PREFERRED_NODE = 4294967295;

const int CREATE_NEW = 1;

const int CREATE_ALWAYS = 2;

const int OPEN_EXISTING = 3;

const int OPEN_ALWAYS = 4;

const int TRUNCATE_EXISTING = 5;

const int INVALID_FILE_SIZE = 4294967295;

const int INVALID_SET_FILE_POINTER = 4294967295;

const int INVALID_FILE_ATTRIBUTES = 4294967295;

const int FLS_OUT_OF_INDEXES = 4294967295;

const int INIT_ONCE_CHECK_ONLY = 1;

const int INIT_ONCE_ASYNC = 2;

const int INIT_ONCE_INIT_FAILED = 4;

const int INIT_ONCE_CTX_RESERVED_BITS = 2;

const int CONDITION_VARIABLE_LOCKMODE_SHARED = 1;

const int MUTEX_MODIFY_STATE = 1;

const int MUTEX_ALL_ACCESS = 2031617;

const int CREATE_MUTEX_INITIAL_OWNER = 1;

const int CREATE_EVENT_MANUAL_RESET = 1;

const int CREATE_EVENT_INITIAL_SET = 2;

const int CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;

const int CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;

const int SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;

const int SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;

const int TLS_OUT_OF_INDEXES = 4294967295;

const int PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;

const int PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = 1;

const int THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;

const int THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int THREAD_POWER_THROTTLING_VALID_FLAGS = 1;

const int PME_CURRENT_VERSION = 1;

const int PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;

const int PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;

const int PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;

const int PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;

const int PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION = 4;

const int PROCESS_POWER_THROTTLING_VALID_FLAGS = 5;

const int PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;

const int PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = 1;

const int USER_CET_ENVIRONMENT_WIN32_PROCESS = 0;

const int USER_CET_ENVIRONMENT_SGX2_ENCLAVE = 2;

const int USER_CET_ENVIRONMENT_VBS_ENCLAVE = 16;

const int USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE = 17;

const int SCEX2_ALT_NETBIOS_NAME = 1;

const int FILE_MAP_WRITE = 2;

const int FILE_MAP_READ = 4;

const int FILE_MAP_ALL_ACCESS = 983071;

const int FILE_MAP_EXECUTE = 32;

const int FILE_MAP_COPY = 1;

const int FILE_MAP_RESERVE = 2147483648;

const int FILE_MAP_TARGETS_INVALID = 1073741824;

const int FILE_MAP_LARGE_PAGES = 536870912;

const int FILE_CACHE_MAX_HARD_ENABLE = 1;

const int FILE_CACHE_MAX_HARD_DISABLE = 2;

const int FILE_CACHE_MIN_HARD_ENABLE = 4;

const int FILE_CACHE_MIN_HARD_DISABLE = 8;

const int MEHC_PATROL_SCRUBBER_PRESENT = 1;

const int FIND_RESOURCE_DIRECTORY_TYPES = 256;

const int FIND_RESOURCE_DIRECTORY_NAMES = 512;

const int FIND_RESOURCE_DIRECTORY_LANGUAGES = 1024;

const int RESOURCE_ENUM_LN = 1;

const int RESOURCE_ENUM_MUI = 2;

const int RESOURCE_ENUM_MUI_SYSTEM = 4;

const int RESOURCE_ENUM_VALIDATE = 8;

const int RESOURCE_ENUM_MODULE_EXACT = 16;

const int SUPPORT_LANG_NUMBER = 32;

const int GET_MODULE_HANDLE_EX_FLAG_PIN = 1;

const int GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2;

const int GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 4;

const int CURRENT_IMPORT_REDIRECTION_VERSION = 1;

const int DONT_RESOLVE_DLL_REFERENCES = 1;

const int LOAD_LIBRARY_AS_DATAFILE = 2;

const int LOAD_WITH_ALTERED_SEARCH_PATH = 8;

const int LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;

const int LOAD_LIBRARY_AS_IMAGE_RESOURCE = 32;

const int LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 64;

const int LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 128;

const int LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 256;

const int LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 512;

const int LOAD_LIBRARY_SEARCH_USER_DIRS = 1024;

const int LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;

const int LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 4096;

const int LOAD_LIBRARY_SAFE_CURRENT_DIRS = 8192;

const int LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 16384;

const int LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY = 32768;

const int SIGNING_LEVEL_FILE_CACHE_FLAG_NOT_VALIDATED = 1;

const int SIGNING_LEVEL_FILE_CACHE_FLAG_VALIDATE_ONLY = 4;

const int SIGNING_LEVEL_MICROSOFT = 8;

const int PRIVATE_NAMESPACE_FLAG_DESTROY = 1;

const int FILE_BEGIN = 0;

const int FILE_CURRENT = 1;

const int FILE_END = 2;

const int WAIT_FAILED = 4294967295;

const int WAIT_OBJECT_0 = 0;

const int WAIT_ABANDONED = 128;

const int WAIT_ABANDONED_0 = 128;

const int WAIT_IO_COMPLETION = 192;

const int FILE_FLAG_WRITE_THROUGH = 2147483648;

const int FILE_FLAG_OVERLAPPED = 1073741824;

const int FILE_FLAG_NO_BUFFERING = 536870912;

const int FILE_FLAG_RANDOM_ACCESS = 268435456;

const int FILE_FLAG_SEQUENTIAL_SCAN = 134217728;

const int FILE_FLAG_DELETE_ON_CLOSE = 67108864;

const int FILE_FLAG_BACKUP_SEMANTICS = 33554432;

const int FILE_FLAG_POSIX_SEMANTICS = 16777216;

const int FILE_FLAG_SESSION_AWARE = 8388608;

const int FILE_FLAG_OPEN_REPARSE_POINT = 2097152;

const int FILE_FLAG_OPEN_NO_RECALL = 1048576;

const int FILE_FLAG_FIRST_PIPE_INSTANCE = 524288;

const int FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;

const int FILE_FLAG_IGNORE_IMPERSONATED_DEVICEMAP = 131072;

const int PROGRESS_CONTINUE = 0;

const int PROGRESS_CANCEL = 1;

const int PROGRESS_STOP = 2;

const int PROGRESS_QUIET = 3;

const int CALLBACK_CHUNK_FINISHED = 0;

const int CALLBACK_STREAM_SWITCH = 1;

const int COPY_FILE_FAIL_IF_EXISTS = 1;

const int COPY_FILE_RESTARTABLE = 2;

const int COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;

const int COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;

const int COPY_FILE_COPY_SYMLINK = 2048;

const int COPY_FILE_NO_BUFFERING = 4096;

const int COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;

const int COPY_FILE_RESUME_FROM_PAUSE = 16384;

const int COPY_FILE_NO_OFFLOAD = 262144;

const int COPY_FILE_IGNORE_EDP_BLOCK = 4194304;

const int COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;

const int COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;

const int COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 268435456;

const int COPY_FILE_OPEN_AND_COPY_REPARSE_POINT = 2097152;

const int COPY_FILE_DIRECTORY = 128;

const int COPY_FILE_SKIP_ALTERNATE_STREAMS = 32768;

const int COPY_FILE_DISABLE_PRE_ALLOCATION = 67108864;

const int COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE = 134217728;

const int COPY_FILE_ENABLE_SPARSE_COPY = 536870912;

const int REPLACEFILE_WRITE_THROUGH = 1;

const int REPLACEFILE_IGNORE_MERGE_ERRORS = 2;

const int REPLACEFILE_IGNORE_ACL_ERRORS = 4;

const int PIPE_ACCESS_INBOUND = 1;

const int PIPE_ACCESS_OUTBOUND = 2;

const int PIPE_ACCESS_DUPLEX = 3;

const int PIPE_CLIENT_END = 0;

const int PIPE_SERVER_END = 1;

const int PIPE_WAIT = 0;

const int PIPE_NOWAIT = 1;

const int PIPE_READMODE_BYTE = 0;

const int PIPE_READMODE_MESSAGE = 2;

const int PIPE_TYPE_BYTE = 0;

const int PIPE_TYPE_MESSAGE = 4;

const int PIPE_ACCEPT_REMOTE_CLIENTS = 0;

const int PIPE_REJECT_REMOTE_CLIENTS = 8;

const int PIPE_UNLIMITED_INSTANCES = 255;

const int SECURITY_ANONYMOUS = 0;

const int SECURITY_IDENTIFICATION = 65536;

const int SECURITY_IMPERSONATION = 131072;

const int SECURITY_DELEGATION = 196608;

const int SECURITY_CONTEXT_TRACKING = 262144;

const int SECURITY_EFFECTIVE_ONLY = 524288;

const int SECURITY_SQOS_PRESENT = 1048576;

const int SECURITY_VALID_SQOS_FLAGS = 2031616;

const int FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;

const int FAIL_FAST_NO_HARD_ERROR_DLG = 2;

const int SP_SERIALCOMM = 1;

const int PST_UNSPECIFIED = 0;

const int PST_RS232 = 1;

const int PST_PARALLELPORT = 2;

const int PST_RS422 = 3;

const int PST_RS423 = 4;

const int PST_RS449 = 5;

const int PST_MODEM = 6;

const int PST_FAX = 33;

const int PST_SCANNER = 34;

const int PST_NETWORK_BRIDGE = 256;

const int PST_LAT = 257;

const int PST_TCPIP_TELNET = 258;

const int PST_X25 = 259;

const int PCF_DTRDSR = 1;

const int PCF_RTSCTS = 2;

const int PCF_RLSD = 4;

const int PCF_PARITY_CHECK = 8;

const int PCF_XONXOFF = 16;

const int PCF_SETXCHAR = 32;

const int PCF_TOTALTIMEOUTS = 64;

const int PCF_INTTIMEOUTS = 128;

const int PCF_SPECIALCHARS = 256;

const int PCF_16BITMODE = 512;

const int SP_PARITY = 1;

const int SP_BAUD = 2;

const int SP_DATABITS = 4;

const int SP_STOPBITS = 8;

const int SP_HANDSHAKING = 16;

const int SP_PARITY_CHECK = 32;

const int SP_RLSD = 64;

const int BAUD_075 = 1;

const int BAUD_110 = 2;

const int BAUD_134_5 = 4;

const int BAUD_150 = 8;

const int BAUD_300 = 16;

const int BAUD_600 = 32;

const int BAUD_1200 = 64;

const int BAUD_1800 = 128;

const int BAUD_2400 = 256;

const int BAUD_4800 = 512;

const int BAUD_7200 = 1024;

const int BAUD_9600 = 2048;

const int BAUD_14400 = 4096;

const int BAUD_19200 = 8192;

const int BAUD_38400 = 16384;

const int BAUD_56K = 32768;

const int BAUD_128K = 65536;

const int BAUD_115200 = 131072;

const int BAUD_57600 = 262144;

const int BAUD_USER = 268435456;

const int DATABITS_5 = 1;

const int DATABITS_6 = 2;

const int DATABITS_7 = 4;

const int DATABITS_8 = 8;

const int DATABITS_16 = 16;

const int DATABITS_16X = 32;

const int STOPBITS_10 = 1;

const int STOPBITS_15 = 2;

const int STOPBITS_20 = 4;

const int PARITY_NONE = 256;

const int PARITY_ODD = 512;

const int PARITY_EVEN = 1024;

const int PARITY_MARK = 2048;

const int PARITY_SPACE = 4096;

const int COMMPROP_INITIALIZED = 3879531822;

const int DTR_CONTROL_DISABLE = 0;

const int DTR_CONTROL_ENABLE = 1;

const int DTR_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_DISABLE = 0;

const int RTS_CONTROL_ENABLE = 1;

const int RTS_CONTROL_HANDSHAKE = 2;

const int RTS_CONTROL_TOGGLE = 3;

const int GMEM_FIXED = 0;

const int GMEM_MOVEABLE = 2;

const int GMEM_NOCOMPACT = 16;

const int GMEM_NODISCARD = 32;

const int GMEM_ZEROINIT = 64;

const int GMEM_MODIFY = 128;

const int GMEM_DISCARDABLE = 256;

const int GMEM_NOT_BANKED = 4096;

const int GMEM_SHARE = 8192;

const int GMEM_DDESHARE = 8192;

const int GMEM_NOTIFY = 16384;

const int GMEM_LOWER = 4096;

const int GMEM_VALID_FLAGS = 32626;

const int GMEM_INVALID_HANDLE = 32768;

const int GHND = 66;

const int GPTR = 64;

const int GMEM_DISCARDED = 16384;

const int GMEM_LOCKCOUNT = 255;

const int DEBUG_PROCESS = 1;

const int DEBUG_ONLY_THIS_PROCESS = 2;

const int CREATE_SUSPENDED = 4;

const int DETACHED_PROCESS = 8;

const int CREATE_NEW_CONSOLE = 16;

const int NORMAL_PRIORITY_CLASS = 32;

const int IDLE_PRIORITY_CLASS = 64;

const int HIGH_PRIORITY_CLASS = 128;

const int REALTIME_PRIORITY_CLASS = 256;

const int CREATE_NEW_PROCESS_GROUP = 512;

const int CREATE_UNICODE_ENVIRONMENT = 1024;

const int CREATE_SEPARATE_WOW_VDM = 2048;

const int CREATE_SHARED_WOW_VDM = 4096;

const int CREATE_FORCEDOS = 8192;

const int BELOW_NORMAL_PRIORITY_CLASS = 16384;

const int ABOVE_NORMAL_PRIORITY_CLASS = 32768;

const int INHERIT_PARENT_AFFINITY = 65536;

const int INHERIT_CALLER_PRIORITY = 131072;

const int CREATE_PROTECTED_PROCESS = 262144;

const int EXTENDED_STARTUPINFO_PRESENT = 524288;

const int PROCESS_MODE_BACKGROUND_BEGIN = 1048576;

const int PROCESS_MODE_BACKGROUND_END = 2097152;

const int CREATE_SECURE_PROCESS = 4194304;

const int CREATE_BREAKAWAY_FROM_JOB = 16777216;

const int CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;

const int CREATE_DEFAULT_ERROR_MODE = 67108864;

const int CREATE_NO_WINDOW = 134217728;

const int PROFILE_USER = 268435456;

const int PROFILE_KERNEL = 536870912;

const int PROFILE_SERVER = 1073741824;

const int CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;

const int STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;

const int THREAD_PRIORITY_LOWEST = -2;

const int THREAD_PRIORITY_BELOW_NORMAL = -1;

const int THREAD_PRIORITY_NORMAL = 0;

const int THREAD_PRIORITY_HIGHEST = 2;

const int THREAD_PRIORITY_ABOVE_NORMAL = 1;

const int THREAD_PRIORITY_ERROR_RETURN = 2147483647;

const int THREAD_PRIORITY_TIME_CRITICAL = 15;

const int THREAD_PRIORITY_IDLE = -15;

const int THREAD_MODE_BACKGROUND_BEGIN = 65536;

const int THREAD_MODE_BACKGROUND_END = 131072;

const int VOLUME_NAME_DOS = 0;

const int VOLUME_NAME_GUID = 1;

const int VOLUME_NAME_NT = 2;

const int VOLUME_NAME_NONE = 4;

const int FILE_NAME_NORMALIZED = 0;

const int FILE_NAME_OPENED = 8;

const int DRIVE_UNKNOWN = 0;

const int DRIVE_NO_ROOT_DIR = 1;

const int DRIVE_REMOVABLE = 2;

const int DRIVE_FIXED = 3;

const int DRIVE_REMOTE = 4;

const int DRIVE_CDROM = 5;

const int DRIVE_RAMDISK = 6;

const int FILE_TYPE_UNKNOWN = 0;

const int FILE_TYPE_DISK = 1;

const int FILE_TYPE_CHAR = 2;

const int FILE_TYPE_PIPE = 3;

const int FILE_TYPE_REMOTE = 32768;

const int STD_INPUT_HANDLE = 4294967286;

const int STD_OUTPUT_HANDLE = 4294967285;

const int STD_ERROR_HANDLE = 4294967284;

const int NOPARITY = 0;

const int ODDPARITY = 1;

const int EVENPARITY = 2;

const int MARKPARITY = 3;

const int SPACEPARITY = 4;

const int ONESTOPBIT = 0;

const int ONE5STOPBITS = 1;

const int TWOSTOPBITS = 2;

const int IGNORE = 0;

const int INFINITE = 4294967295;

const int CBR_110 = 110;

const int CBR_300 = 300;

const int CBR_600 = 600;

const int CBR_1200 = 1200;

const int CBR_2400 = 2400;

const int CBR_4800 = 4800;

const int CBR_9600 = 9600;

const int CBR_14400 = 14400;

const int CBR_19200 = 19200;

const int CBR_38400 = 38400;

const int CBR_56000 = 56000;

const int CBR_57600 = 57600;

const int CBR_115200 = 115200;

const int CBR_128000 = 128000;

const int CBR_256000 = 256000;

const int CE_RXOVER = 1;

const int CE_OVERRUN = 2;

const int CE_RXPARITY = 4;

const int CE_FRAME = 8;

const int CE_BREAK = 16;

const int CE_TXFULL = 256;

const int CE_PTO = 512;

const int CE_IOE = 1024;

const int CE_DNS = 2048;

const int CE_OOP = 4096;

const int CE_MODE = 32768;

const int IE_BADID = -1;

const int IE_OPEN = -2;

const int IE_NOPEN = -3;

const int IE_MEMORY = -4;

const int IE_DEFAULT = -5;

const int IE_HARDWARE = -10;

const int IE_BYTESIZE = -11;

const int IE_BAUDRATE = -12;

const int EV_RXCHAR = 1;

const int EV_RXFLAG = 2;

const int EV_TXEMPTY = 4;

const int EV_CTS = 8;

const int EV_DSR = 16;

const int EV_RLSD = 32;

const int EV_BREAK = 64;

const int EV_ERR = 128;

const int EV_RING = 256;

const int EV_PERR = 512;

const int EV_RX80FULL = 1024;

const int EV_EVENT1 = 2048;

const int EV_EVENT2 = 4096;

const int SETXOFF = 1;

const int SETXON = 2;

const int SETRTS = 3;

const int CLRRTS = 4;

const int SETDTR = 5;

const int CLRDTR = 6;

const int RESETDEV = 7;

const int SETBREAK = 8;

const int CLRBREAK = 9;

const int PURGE_TXABORT = 1;

const int PURGE_RXABORT = 2;

const int PURGE_TXCLEAR = 4;

const int PURGE_RXCLEAR = 8;

const int LPTx = 128;

const int MS_CTS_ON = 16;

const int MS_DSR_ON = 32;

const int MS_RING_ON = 64;

const int MS_RLSD_ON = 128;

const int S_QUEUEEMPTY = 0;

const int S_THRESHOLD = 1;

const int S_ALLTHRESHOLD = 2;

const int S_NORMAL = 0;

const int S_LEGATO = 1;

const int S_STACCATO = 2;

const int S_PERIOD512 = 0;

const int S_PERIOD1024 = 1;

const int S_PERIOD2048 = 2;

const int S_PERIODVOICE = 3;

const int S_WHITE512 = 4;

const int S_WHITE1024 = 5;

const int S_WHITE2048 = 6;

const int S_WHITEVOICE = 7;

const int S_SERDVNA = -1;

const int S_SEROFM = -2;

const int S_SERMACT = -3;

const int S_SERQFUL = -4;

const int S_SERBDNT = -5;

const int S_SERDLN = -6;

const int S_SERDCC = -7;

const int S_SERDTP = -8;

const int S_SERDVL = -9;

const int S_SERDMD = -10;

const int S_SERDSH = -11;

const int S_SERDPT = -12;

const int S_SERDFQ = -13;

const int S_SERDDR = -14;

const int S_SERDSR = -15;

const int S_SERDST = -16;

const int NMPWAIT_WAIT_FOREVER = 4294967295;

const int NMPWAIT_NOWAIT = 1;

const int NMPWAIT_USE_DEFAULT_WAIT = 0;

const int FS_CASE_IS_PRESERVED = 2;

const int FS_CASE_SENSITIVE = 1;

const int FS_UNICODE_STORED_ON_DISK = 4;

const int FS_PERSISTENT_ACLS = 8;

const int FS_VOL_IS_COMPRESSED = 32768;

const int FS_FILE_COMPRESSION = 16;

const int FS_FILE_ENCRYPTION = 131072;

const int OF_READ = 0;

const int OF_WRITE = 1;

const int OF_READWRITE = 2;

const int OF_SHARE_COMPAT = 0;

const int OF_SHARE_EXCLUSIVE = 16;

const int OF_SHARE_DENY_WRITE = 32;

const int OF_SHARE_DENY_READ = 48;

const int OF_SHARE_DENY_NONE = 64;

const int OF_PARSE = 256;

const int OF_DELETE = 512;

const int OF_VERIFY = 1024;

const int OF_CANCEL = 2048;

const int OF_CREATE = 4096;

const int OF_PROMPT = 8192;

const int OF_EXIST = 16384;

const int OF_REOPEN = 32768;

const int OFS_MAXPATHNAME = 128;

const int MAXINTATOM = 49152;

const int INVALID_ATOM = 0;

const int SCS_32BIT_BINARY = 0;

const int SCS_DOS_BINARY = 1;

const int SCS_WOW_BINARY = 2;

const int SCS_PIF_BINARY = 3;

const int SCS_POSIX_BINARY = 4;

const int SCS_OS216_BINARY = 5;

const int SCS_64BIT_BINARY = 6;

const int SCS_THIS_PLATFORM_BINARY = 6;

const int FIBER_FLAG_FLOAT_SWITCH = 1;

const int UMS_VERSION = 256;

const int PROCESS_DEP_ENABLE = 1;

const int PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;

const int FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;

const int FILE_SKIP_SET_EVENT_ON_HANDLE = 2;

const int SEM_FAILCRITICALERRORS = 1;

const int SEM_NOGPFAULTERRORBOX = 2;

const int SEM_NOALIGNMENTFAULTEXCEPT = 4;

const int SEM_NOOPENFILEERRORBOX = 32768;

const int CRITICAL_SECTION_NO_DEBUG_INFO = 16777216;

const int HANDLE_FLAG_INHERIT = 1;

const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 2;

const int HINSTANCE_ERROR = 32;

const int GET_TAPE_MEDIA_INFORMATION = 0;

const int GET_TAPE_DRIVE_INFORMATION = 1;

const int SET_TAPE_MEDIA_INFORMATION = 0;

const int SET_TAPE_DRIVE_INFORMATION = 1;

const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;

const int FORMAT_MESSAGE_IGNORE_INSERTS = 512;

const int FORMAT_MESSAGE_FROM_STRING = 1024;

const int FORMAT_MESSAGE_FROM_HMODULE = 2048;

const int FORMAT_MESSAGE_FROM_SYSTEM = 4096;

const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;

const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;

const int FILE_ENCRYPTABLE = 0;

const int FILE_IS_ENCRYPTED = 1;

const int FILE_SYSTEM_ATTR = 2;

const int FILE_ROOT_DIR = 3;

const int FILE_SYSTEM_DIR = 4;

const int FILE_UNKNOWN = 5;

const int FILE_SYSTEM_NOT_SUPPORT = 6;

const int FILE_USER_DISALLOWED = 7;

const int FILE_READ_ONLY = 8;

const int FILE_DIR_DISALLOWED = 9;

const int EFS_USE_RECOVERY_KEYS = 1;

const int CREATE_FOR_IMPORT = 1;

const int CREATE_FOR_DIR = 2;

const int OVERWRITE_HIDDEN = 4;

const int EFSRPC_SECURE_ONLY = 8;

const int EFS_DROP_ALTERNATE_STREAMS = 16;

const int BACKUP_INVALID = 0;

const int BACKUP_DATA = 1;

const int BACKUP_EA_DATA = 2;

const int BACKUP_SECURITY_DATA = 3;

const int BACKUP_ALTERNATE_DATA = 4;

const int BACKUP_LINK = 5;

const int BACKUP_PROPERTY_DATA = 6;

const int BACKUP_OBJECT_ID = 7;

const int BACKUP_REPARSE_DATA = 8;

const int BACKUP_SPARSE_BLOCK = 9;

const int BACKUP_TXFS_DATA = 10;

const int BACKUP_GHOSTED_FILE_EXTENTS = 11;

const int STREAM_NORMAL_ATTRIBUTE = 0;

const int STREAM_MODIFIED_WHEN_READ = 1;

const int STREAM_CONTAINS_SECURITY = 2;

const int STREAM_CONTAINS_PROPERTIES = 4;

const int STREAM_SPARSE_ATTRIBUTE = 8;

const int STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;

const int STARTF_USESHOWWINDOW = 1;

const int STARTF_USESIZE = 2;

const int STARTF_USEPOSITION = 4;

const int STARTF_USECOUNTCHARS = 8;

const int STARTF_USEFILLATTRIBUTE = 16;

const int STARTF_RUNFULLSCREEN = 32;

const int STARTF_FORCEONFEEDBACK = 64;

const int STARTF_FORCEOFFFEEDBACK = 128;

const int STARTF_USESTDHANDLES = 256;

const int STARTF_USEHOTKEY = 512;

const int STARTF_TITLEISLINKNAME = 2048;

const int STARTF_TITLEISAPPID = 4096;

const int STARTF_PREVENTPINNING = 8192;

const int STARTF_UNTRUSTEDSOURCE = 32768;

const int STARTF_HOLOGRAPHIC = 262144;

const int SHUTDOWN_NORETRY = 1;

const int PROTECTION_LEVEL_WINTCB_LIGHT = 0;

const int PROTECTION_LEVEL_WINDOWS = 1;

const int PROTECTION_LEVEL_WINDOWS_LIGHT = 2;

const int PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;

const int PROTECTION_LEVEL_LSA_LIGHT = 4;

const int PROTECTION_LEVEL_WINTCB = 5;

const int PROTECTION_LEVEL_CODEGEN_LIGHT = 6;

const int PROTECTION_LEVEL_AUTHENTICODE = 7;

const int PROTECTION_LEVEL_PPL_APP = 8;

const int PROTECTION_LEVEL_SAME = 4294967295;

const int PROTECTION_LEVEL_NONE = 4294967294;

const int PROCESS_NAME_NATIVE = 1;

const int PROC_THREAD_ATTRIBUTE_NUMBER = 65535;

const int PROC_THREAD_ATTRIBUTE_THREAD = 65536;

const int PROC_THREAD_ATTRIBUTE_INPUT = 131072;

const int PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;

const int PROC_THREAD_ATTRIBUTE_PARENT_PROCESS = 131072;

const int PROC_THREAD_ATTRIBUTE_HANDLE_LIST = 131074;

const int PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY = 196611;

const int PROC_THREAD_ATTRIBUTE_PREFERRED_NODE = 131076;

const int PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR = 196613;

const int PROC_THREAD_ATTRIBUTE_UMS_THREAD = 196614;

const int PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY = 131079;

const int PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES = 131081;

const int PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL = 131083;

const int PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE = 131094;

const int PROC_THREAD_ATTRIBUTE_MACHINE_TYPE = 131097;

const int PROC_THREAD_ATTRIBUTE_ENABLE_OPTIONAL_XSTATE_FEATURES = 196635;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;

const int PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;

const int PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK = 768;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON =
    256;

const int PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON = 4096;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF = 8192;

const int PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED = 12288;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON = 65536;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF = 131072;

const int PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED = 196608;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK = 3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON =
    1048576;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF =
    2097152;

const int PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED =
    3145728;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON =
    16777216;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF =
    33554432;

const int PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF =
    8589934592;

const int PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON =
    68719476736;

const int PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK =
    52776558133248;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON =
    17592186044416;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF =
    35184372088832;

const int
    PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE =
    52776558133248;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON =
    281474976710656;

const int PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF =
    562949953421312;

const int PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON =
    4503599627370496;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF =
    9007199254740992;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON =
    72057594037927936;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF =
    144115188075855872;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON =
    1152921504606846976;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF =
    2305843009213693952;

const int
    PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED =
    3458764513820540928;

const int PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK =
    48;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON =
    16;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF =
    32;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT = 48;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON =
    256;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    512;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED =
    768;

const int PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON =
    4096;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF =
    8192;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT =
    12288;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON =
    65536;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF =
    131072;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED =
    196608;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON =
    1048576;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF =
    2097152;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED =
    3145728;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK =
    50331648;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON =
    16777216;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF =
    33554432;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED =
    50331648;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_STRICT_MODE =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE =
    12884901888;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_NON_EHCONT =
    206158430208;

const int PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_XTENDED_CONTROL_FLOW_GUARD_RESERVED =
    3298534883328;

const int PROCESS_CREATION_MITIGATION_POLICY2_POINTER_AUTH_USER_IP_MASK =
    52776558133248;

const int PROCESS_CREATION_MITIGATION_POLICY2_POINTER_AUTH_USER_IP_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_POINTER_AUTH_USER_IP_ALWAYS_ON =
    17592186044416;

const int PROCESS_CREATION_MITIGATION_POLICY2_POINTER_AUTH_USER_IP_ALWAYS_OFF =
    35184372088832;

const int PROCESS_CREATION_MITIGATION_POLICY2_POINTER_AUTH_USER_IP_RESERVED =
    52776558133248;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_MASK =
    844424930131968;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_ON =
    281474976710656;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_OFF =
    562949953421312;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_RESERVED =
    844424930131968;

const int PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_CORE_SHARING_MASK =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_CORE_SHARING_DEFER = 0;

const int PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_CORE_SHARING_ALWAYS_ON =
    4503599627370496;

const int PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_CORE_SHARING_ALWAYS_OFF =
    9007199254740992;

const int PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_CORE_SHARING_RESERVED =
    13510798882111488;

const int PROCESS_CREATION_MITIGATION_POLICY2_FSCTL_SYSTEM_CALL_DISABLE_MASK =
    216172782113783808;

const int PROCESS_CREATION_MITIGATION_POLICY2_FSCTL_SYSTEM_CALL_DISABLE_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_FSCTL_SYSTEM_CALL_DISABLE_ALWAYS_ON =
    72057594037927936;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_FSCTL_SYSTEM_CALL_DISABLE_ALWAYS_OFF =
    144115188075855872;

const int
    PROCESS_CREATION_MITIGATION_POLICY2_FSCTL_SYSTEM_CALL_DISABLE_RESERVED =
    216172782113783808;

const int PROC_THREAD_ATTRIBUTE_JOB_LIST = 131085;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;

const int PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;

const int PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;

const int PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY = 131086;

const int PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;

const int PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY = 131087;

const int PROC_THREAD_ATTRIBUTE_WIN32K_FILTER = 131088;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;

const int PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;

const int PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY = 131090;

const int PROC_THREAD_ATTRIBUTE_MITIGATION_AUDIT_POLICY = 131096;

const int PROC_THREAD_ATTRIBUTE_COMPONENT_FILTER = 131098;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_MASK =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON =
    268435456;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF =
    536870912;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_RESERVED =
    805306368;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON =
    4294967296;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF =
    8589934592;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RESERVED =
    12884901888;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_MASK =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_DEFER = 0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON =
    68719476736;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF =
    137438953472;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_RESERVED =
    206158430208;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_MASK =
    3298534883328;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_DEFER =
    0;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_ON =
    1099511627776;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_ALWAYS_OFF =
    2199023255552;

const int
    PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_XTENDED_CONTROL_FLOW_GUARD_RESERVED =
    3298534883328;

const int PROC_THREAD_ATTRIBUTE_TRUSTED_APP = 131101;

const int ATOM_FLAG_GLOBAL = 2;

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T = 'GetSystemWow64DirectoryW';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = 'GetSystemWow64DirectoryA';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = 'G';

const String GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = 'GetSystemWow64DirectoryA';

const int BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;

const int BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;

const int BASE_SEARCH_PATH_PERMANENT = 32768;

const int BASE_SEARCH_PATH_INVALID_FLAGS = -98306;

const int DDD_RAW_TARGET_PATH = 1;

const int DDD_REMOVE_DEFINITION = 2;

const int DDD_EXACT_MATCH_ON_REMOVE = 4;

const int DDD_NO_BROADCAST_SYSTEM = 8;

const int DDD_LUID_BROADCAST_DRIVE = 16;

const int COPYFILE2_MESSAGE_COPY_OFFLOAD = 1;

const int COPYFILE2_IO_CYCLE_SIZE_MIN = 4096;

const int COPYFILE2_IO_CYCLE_SIZE_MAX = 1073741824;

const int COPYFILE2_IO_RATE_MIN = 512;

const int COPY_FILE2_V2_DONT_COPY_JUNCTIONS = 1;

const int COPY_FILE2_V2_VALID_FLAGS = 1;

const int MOVEFILE_REPLACE_EXISTING = 1;

const int MOVEFILE_COPY_ALLOWED = 2;

const int MOVEFILE_DELAY_UNTIL_REBOOT = 4;

const int MOVEFILE_WRITE_THROUGH = 8;

const int MOVEFILE_CREATE_HARDLINK = 16;

const int MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32;

const int EVENTLOG_FULL_INFO = 0;

const int OPERATION_API_VERSION = 1;

const int OPERATION_START_TRACE_CURRENT_THREAD = 1;

const int OPERATION_END_DISCARD = 1;

const int MAX_COMPUTERNAME_LENGTH = 15;

const int LOGON32_LOGON_INTERACTIVE = 2;

const int LOGON32_LOGON_NETWORK = 3;

const int LOGON32_LOGON_BATCH = 4;

const int LOGON32_LOGON_SERVICE = 5;

const int LOGON32_LOGON_UNLOCK = 7;

const int LOGON32_LOGON_NETWORK_CLEARTEXT = 8;

const int LOGON32_LOGON_NEW_CREDENTIALS = 9;

const int LOGON32_PROVIDER_DEFAULT = 0;

const int LOGON32_PROVIDER_WINNT35 = 1;

const int LOGON32_PROVIDER_WINNT40 = 2;

const int LOGON32_PROVIDER_WINNT50 = 3;

const int LOGON32_PROVIDER_VIRTUAL = 4;

const int LOGON_WITH_PROFILE = 1;

const int LOGON_NETCREDENTIALS_ONLY = 2;

const int LOGON_ZERO_PASSWORD_BUFFER = 2147483648;

const int HW_PROFILE_GUIDLEN = 39;

const int MAX_PROFILE_LEN = 80;

const int DOCKINFO_UNDOCKED = 1;

const int DOCKINFO_DOCKED = 2;

const int DOCKINFO_USER_SUPPLIED = 4;

const int DOCKINFO_USER_UNDOCKED = 5;

const int DOCKINFO_USER_DOCKED = 6;

const int FACILITY_NULL = 0;

const int FACILITY_RPC = 1;

const int FACILITY_DISPATCH = 2;

const int FACILITY_STORAGE = 3;

const int FACILITY_ITF = 4;

const int FACILITY_WIN32 = 7;

const int FACILITY_WINDOWS = 8;

const int FACILITY_SSPI = 9;

const int FACILITY_SECURITY = 9;

const int FACILITY_CONTROL = 10;

const int FACILITY_CERT = 11;

const int FACILITY_INTERNET = 12;

const int FACILITY_MEDIASERVER = 13;

const int FACILITY_MSMQ = 14;

const int FACILITY_SETUPAPI = 15;

const int FACILITY_SCARD = 16;

const int FACILITY_COMPLUS = 17;

const int FACILITY_AAF = 18;

const int FACILITY_URT = 19;

const int FACILITY_ACS = 20;

const int FACILITY_DPLAY = 21;

const int FACILITY_UMI = 22;

const int FACILITY_SXS = 23;

const int FACILITY_WINDOWS_CE = 24;

const int FACILITY_HTTP = 25;

const int FACILITY_USERMODE_COMMONLOG = 26;

const int FACILITY_WER = 27;

const int FACILITY_USERMODE_FILTER_MANAGER = 31;

const int FACILITY_BACKGROUNDCOPY = 32;

const int FACILITY_CONFIGURATION = 33;

const int FACILITY_WIA = 33;

const int FACILITY_STATE_MANAGEMENT = 34;

const int FACILITY_METADIRECTORY = 35;

const int FACILITY_WINDOWSUPDATE = 36;

const int FACILITY_DIRECTORYSERVICE = 37;

const int FACILITY_GRAPHICS = 38;

const int FACILITY_SHELL = 39;

const int FACILITY_NAP = 39;

const int FACILITY_TPM_SERVICES = 40;

const int FACILITY_TPM_SOFTWARE = 41;

const int FACILITY_UI = 42;

const int FACILITY_XAML = 43;

const int FACILITY_ACTION_QUEUE = 44;

const int FACILITY_PLA = 48;

const int FACILITY_WINDOWS_SETUP = 48;

const int FACILITY_FVE = 49;

const int FACILITY_FWP = 50;

const int FACILITY_WINRM = 51;

const int FACILITY_NDIS = 52;

const int FACILITY_USERMODE_HYPERVISOR = 53;

const int FACILITY_CMI = 54;

const int FACILITY_USERMODE_VIRTUALIZATION = 55;

const int FACILITY_USERMODE_VOLMGR = 56;

const int FACILITY_BCD = 57;

const int FACILITY_USERMODE_VHD = 58;

const int FACILITY_USERMODE_HNS = 59;

const int FACILITY_SDIAG = 60;

const int FACILITY_WEBSERVICES = 61;

const int FACILITY_WINPE = 61;

const int FACILITY_WPN = 62;

const int FACILITY_WINDOWS_STORE = 63;

const int FACILITY_INPUT = 64;

const int FACILITY_QUIC = 65;

const int FACILITY_EAP = 66;

const int FACILITY_IORING = 70;

const int FACILITY_WINDOWS_DEFENDER = 80;

const int FACILITY_OPC = 81;

const int FACILITY_XPS = 82;

const int FACILITY_MBN = 84;

const int FACILITY_POWERSHELL = 84;

const int FACILITY_RAS = 83;

const int FACILITY_P2P_INT = 98;

const int FACILITY_P2P = 99;

const int FACILITY_DAF = 100;

const int FACILITY_BLUETOOTH_ATT = 101;

const int FACILITY_AUDIO = 102;

const int FACILITY_STATEREPOSITORY = 103;

const int FACILITY_VISUALCPP = 109;

const int FACILITY_SCRIPT = 112;

const int FACILITY_PARSE = 113;

const int FACILITY_BLB = 120;

const int FACILITY_BLB_CLI = 121;

const int FACILITY_WSBAPP = 122;

const int FACILITY_BLBUI = 128;

const int FACILITY_USN = 129;

const int FACILITY_USERMODE_VOLSNAP = 130;

const int FACILITY_TIERING = 131;

const int FACILITY_WSB_ONLINE = 133;

const int FACILITY_ONLINE_ID = 134;

const int FACILITY_DEVICE_UPDATE_AGENT = 135;

const int FACILITY_DRVSERVICING = 136;

const int FACILITY_DLS = 153;

const int FACILITY_DELIVERY_OPTIMIZATION = 208;

const int FACILITY_USERMODE_SPACES = 231;

const int FACILITY_USER_MODE_SECURITY_CORE = 232;

const int FACILITY_USERMODE_LICENSING = 234;

const int FACILITY_SOS = 160;

const int FACILITY_OCP_UPDATE_AGENT = 173;

const int FACILITY_DEBUGGERS = 176;

const int FACILITY_SPP = 256;

const int FACILITY_RESTORE = 256;

const int FACILITY_DMSERVER = 256;

const int FACILITY_DEPLOYMENT_SERVICES_SERVER = 257;

const int FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258;

const int FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259;

const int FACILITY_DEPLOYMENT_SERVICES_UTIL = 260;

const int FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261;

const int FACILITY_DEPLOYMENT_SERVICES_PXE = 263;

const int FACILITY_DEPLOYMENT_SERVICES_TFTP = 264;

const int FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272;

const int FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289;

const int FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290;

const int FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293;

const int FACILITY_HSP_SERVICES = 296;

const int FACILITY_HSP_SOFTWARE = 297;

const int FACILITY_LINGUISTIC_SERVICES = 305;

const int FACILITY_AUDIOSTREAMING = 1094;

const int FACILITY_TTD = 1490;

const int FACILITY_ACCELERATOR = 1536;

const int FACILITY_WMAAECMA = 1996;

const int FACILITY_DIRECTMUSIC = 2168;

const int FACILITY_DIRECT3D10 = 2169;

const int FACILITY_DXGI = 2170;

const int FACILITY_DXGI_DDI = 2171;

const int FACILITY_DIRECT3D11 = 2172;

const int FACILITY_DIRECT3D11_DEBUG = 2173;

const int FACILITY_DIRECT3D12 = 2174;

const int FACILITY_DIRECT3D12_DEBUG = 2175;

const int FACILITY_DXCORE = 2176;

const int FACILITY_PRESENTATION = 2177;

const int FACILITY_LEAP = 2184;

const int FACILITY_AUDCLNT = 2185;

const int FACILITY_WINCODEC_DWRITE_DWM = 2200;

const int FACILITY_WINML = 2192;

const int FACILITY_DIRECT2D = 2201;

const int FACILITY_DEFRAG = 2304;

const int FACILITY_USERMODE_SDBUS = 2305;

const int FACILITY_JSCRIPT = 2306;

const int FACILITY_PIDGENX = 2561;

const int FACILITY_EAS = 85;

const int FACILITY_WEB = 885;

const int FACILITY_WEB_SOCKET = 886;

const int FACILITY_MOBILE = 1793;

const int FACILITY_SQLITE = 1967;

const int FACILITY_SERVICE_FABRIC = 1968;

const int FACILITY_UTC = 1989;

const int FACILITY_WEP = 2049;

const int FACILITY_SYNCENGINE = 2050;

const int FACILITY_XBOX = 2339;

const int FACILITY_GAME = 2340;

const int FACILITY_PIX = 2748;

const int ERROR_SUCCESS = 0;

const int NO_ERROR = 0;

const int SEC_E_OK = 0;

const int ERROR_INVALID_FUNCTION = 1;

const int ERROR_FILE_NOT_FOUND = 2;

const int ERROR_PATH_NOT_FOUND = 3;

const int ERROR_TOO_MANY_OPEN_FILES = 4;

const int ERROR_ACCESS_DENIED = 5;

const int ERROR_INVALID_HANDLE = 6;

const int ERROR_ARENA_TRASHED = 7;

const int ERROR_NOT_ENOUGH_MEMORY = 8;

const int ERROR_INVALID_BLOCK = 9;

const int ERROR_BAD_ENVIRONMENT = 10;

const int ERROR_BAD_FORMAT = 11;

const int ERROR_INVALID_ACCESS = 12;

const int ERROR_INVALID_DATA = 13;

const int ERROR_OUTOFMEMORY = 14;

const int ERROR_INVALID_DRIVE = 15;

const int ERROR_CURRENT_DIRECTORY = 16;

const int ERROR_NOT_SAME_DEVICE = 17;

const int ERROR_NO_MORE_FILES = 18;

const int ERROR_WRITE_PROTECT = 19;

const int ERROR_BAD_UNIT = 20;

const int ERROR_NOT_READY = 21;

const int ERROR_BAD_COMMAND = 22;

const int ERROR_CRC = 23;

const int ERROR_BAD_LENGTH = 24;

const int ERROR_SEEK = 25;

const int ERROR_NOT_DOS_DISK = 26;

const int ERROR_SECTOR_NOT_FOUND = 27;

const int ERROR_OUT_OF_PAPER = 28;

const int ERROR_WRITE_FAULT = 29;

const int ERROR_READ_FAULT = 30;

const int ERROR_GEN_FAILURE = 31;

const int ERROR_SHARING_VIOLATION = 32;

const int ERROR_LOCK_VIOLATION = 33;

const int ERROR_WRONG_DISK = 34;

const int ERROR_SHARING_BUFFER_EXCEEDED = 36;

const int ERROR_HANDLE_EOF = 38;

const int ERROR_HANDLE_DISK_FULL = 39;

const int ERROR_NOT_SUPPORTED = 50;

const int ERROR_REM_NOT_LIST = 51;

const int ERROR_DUP_NAME = 52;

const int ERROR_BAD_NETPATH = 53;

const int ERROR_NETWORK_BUSY = 54;

const int ERROR_DEV_NOT_EXIST = 55;

const int ERROR_TOO_MANY_CMDS = 56;

const int ERROR_ADAP_HDW_ERR = 57;

const int ERROR_BAD_NET_RESP = 58;

const int ERROR_UNEXP_NET_ERR = 59;

const int ERROR_BAD_REM_ADAP = 60;

const int ERROR_PRINTQ_FULL = 61;

const int ERROR_NO_SPOOL_SPACE = 62;

const int ERROR_PRINT_CANCELLED = 63;

const int ERROR_NETNAME_DELETED = 64;

const int ERROR_NETWORK_ACCESS_DENIED = 65;

const int ERROR_BAD_DEV_TYPE = 66;

const int ERROR_BAD_NET_NAME = 67;

const int ERROR_TOO_MANY_NAMES = 68;

const int ERROR_TOO_MANY_SESS = 69;

const int ERROR_SHARING_PAUSED = 70;

const int ERROR_REQ_NOT_ACCEP = 71;

const int ERROR_REDIR_PAUSED = 72;

const int ERROR_FILE_EXISTS = 80;

const int ERROR_CANNOT_MAKE = 82;

const int ERROR_FAIL_I24 = 83;

const int ERROR_OUT_OF_STRUCTURES = 84;

const int ERROR_ALREADY_ASSIGNED = 85;

const int ERROR_INVALID_PASSWORD = 86;

const int ERROR_INVALID_PARAMETER = 87;

const int ERROR_NET_WRITE_FAULT = 88;

const int ERROR_NO_PROC_SLOTS = 89;

const int ERROR_TOO_MANY_SEMAPHORES = 100;

const int ERROR_EXCL_SEM_ALREADY_OWNED = 101;

const int ERROR_SEM_IS_SET = 102;

const int ERROR_TOO_MANY_SEM_REQUESTS = 103;

const int ERROR_INVALID_AT_INTERRUPT_TIME = 104;

const int ERROR_SEM_OWNER_DIED = 105;

const int ERROR_SEM_USER_LIMIT = 106;

const int ERROR_DISK_CHANGE = 107;

const int ERROR_DRIVE_LOCKED = 108;

const int ERROR_BROKEN_PIPE = 109;

const int ERROR_OPEN_FAILED = 110;

const int ERROR_BUFFER_OVERFLOW = 111;

const int ERROR_DISK_FULL = 112;

const int ERROR_NO_MORE_SEARCH_HANDLES = 113;

const int ERROR_INVALID_TARGET_HANDLE = 114;

const int ERROR_INVALID_CATEGORY = 117;

const int ERROR_INVALID_VERIFY_SWITCH = 118;

const int ERROR_BAD_DRIVER_LEVEL = 119;

const int ERROR_CALL_NOT_IMPLEMENTED = 120;

const int ERROR_SEM_TIMEOUT = 121;

const int ERROR_INSUFFICIENT_BUFFER = 122;

const int ERROR_INVALID_NAME = 123;

const int ERROR_INVALID_LEVEL = 124;

const int ERROR_NO_VOLUME_LABEL = 125;

const int ERROR_MOD_NOT_FOUND = 126;

const int ERROR_PROC_NOT_FOUND = 127;

const int ERROR_WAIT_NO_CHILDREN = 128;

const int ERROR_CHILD_NOT_COMPLETE = 129;

const int ERROR_DIRECT_ACCESS_HANDLE = 130;

const int ERROR_NEGATIVE_SEEK = 131;

const int ERROR_SEEK_ON_DEVICE = 132;

const int ERROR_IS_JOIN_TARGET = 133;

const int ERROR_IS_JOINED = 134;

const int ERROR_IS_SUBSTED = 135;

const int ERROR_NOT_JOINED = 136;

const int ERROR_NOT_SUBSTED = 137;

const int ERROR_JOIN_TO_JOIN = 138;

const int ERROR_SUBST_TO_SUBST = 139;

const int ERROR_JOIN_TO_SUBST = 140;

const int ERROR_SUBST_TO_JOIN = 141;

const int ERROR_BUSY_DRIVE = 142;

const int ERROR_SAME_DRIVE = 143;

const int ERROR_DIR_NOT_ROOT = 144;

const int ERROR_DIR_NOT_EMPTY = 145;

const int ERROR_IS_SUBST_PATH = 146;

const int ERROR_IS_JOIN_PATH = 147;

const int ERROR_PATH_BUSY = 148;

const int ERROR_IS_SUBST_TARGET = 149;

const int ERROR_SYSTEM_TRACE = 150;

const int ERROR_INVALID_EVENT_COUNT = 151;

const int ERROR_TOO_MANY_MUXWAITERS = 152;

const int ERROR_INVALID_LIST_FORMAT = 153;

const int ERROR_LABEL_TOO_LONG = 154;

const int ERROR_TOO_MANY_TCBS = 155;

const int ERROR_SIGNAL_REFUSED = 156;

const int ERROR_DISCARDED = 157;

const int ERROR_NOT_LOCKED = 158;

const int ERROR_BAD_THREADID_ADDR = 159;

const int ERROR_BAD_ARGUMENTS = 160;

const int ERROR_BAD_PATHNAME = 161;

const int ERROR_SIGNAL_PENDING = 162;

const int ERROR_MAX_THRDS_REACHED = 164;

const int ERROR_LOCK_FAILED = 167;

const int ERROR_BUSY = 170;

const int ERROR_DEVICE_SUPPORT_IN_PROGRESS = 171;

const int ERROR_CANCEL_VIOLATION = 173;

const int ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 174;

const int ERROR_INVALID_SEGMENT_NUMBER = 180;

const int ERROR_INVALID_ORDINAL = 182;

const int ERROR_ALREADY_EXISTS = 183;

const int ERROR_INVALID_FLAG_NUMBER = 186;

const int ERROR_SEM_NOT_FOUND = 187;

const int ERROR_INVALID_STARTING_CODESEG = 188;

const int ERROR_INVALID_STACKSEG = 189;

const int ERROR_INVALID_MODULETYPE = 190;

const int ERROR_INVALID_EXE_SIGNATURE = 191;

const int ERROR_EXE_MARKED_INVALID = 192;

const int ERROR_BAD_EXE_FORMAT = 193;

const int ERROR_ITERATED_DATA_EXCEEDS_64k = 194;

const int ERROR_INVALID_MINALLOCSIZE = 195;

const int ERROR_DYNLINK_FROM_INVALID_RING = 196;

const int ERROR_IOPL_NOT_ENABLED = 197;

const int ERROR_INVALID_SEGDPL = 198;

const int ERROR_AUTODATASEG_EXCEEDS_64k = 199;

const int ERROR_RING2SEG_MUST_BE_MOVABLE = 200;

const int ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 201;

const int ERROR_INFLOOP_IN_RELOC_CHAIN = 202;

const int ERROR_ENVVAR_NOT_FOUND = 203;

const int ERROR_NO_SIGNAL_SENT = 205;

const int ERROR_FILENAME_EXCED_RANGE = 206;

const int ERROR_RING2_STACK_IN_USE = 207;

const int ERROR_META_EXPANSION_TOO_LONG = 208;

const int ERROR_INVALID_SIGNAL_NUMBER = 209;

const int ERROR_THREAD_1_INACTIVE = 210;

const int ERROR_LOCKED = 212;

const int ERROR_TOO_MANY_MODULES = 214;

const int ERROR_NESTING_NOT_ALLOWED = 215;

const int ERROR_EXE_MACHINE_TYPE_MISMATCH = 216;

const int ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = 217;

const int ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = 218;

const int ERROR_FILE_CHECKED_OUT = 220;

const int ERROR_CHECKOUT_REQUIRED = 221;

const int ERROR_BAD_FILE_TYPE = 222;

const int ERROR_FILE_TOO_LARGE = 223;

const int ERROR_FORMS_AUTH_REQUIRED = 224;

const int ERROR_VIRUS_INFECTED = 225;

const int ERROR_VIRUS_DELETED = 226;

const int ERROR_PIPE_LOCAL = 229;

const int ERROR_BAD_PIPE = 230;

const int ERROR_PIPE_BUSY = 231;

const int ERROR_NO_DATA = 232;

const int ERROR_PIPE_NOT_CONNECTED = 233;

const int ERROR_MORE_DATA = 234;

const int ERROR_NO_WORK_DONE = 235;

const int ERROR_VC_DISCONNECTED = 240;

const int ERROR_INVALID_EA_NAME = 254;

const int ERROR_EA_LIST_INCONSISTENT = 255;

const int WAIT_TIMEOUT = 258;

const int ERROR_NO_MORE_ITEMS = 259;

const int ERROR_CANNOT_COPY = 266;

const int ERROR_DIRECTORY = 267;

const int ERROR_EAS_DIDNT_FIT = 275;

const int ERROR_EA_FILE_CORRUPT = 276;

const int ERROR_EA_TABLE_FULL = 277;

const int ERROR_INVALID_EA_HANDLE = 278;

const int ERROR_EAS_NOT_SUPPORTED = 282;

const int ERROR_NOT_OWNER = 288;

const int ERROR_TOO_MANY_POSTS = 298;

const int ERROR_PARTIAL_COPY = 299;

const int ERROR_OPLOCK_NOT_GRANTED = 300;

const int ERROR_INVALID_OPLOCK_PROTOCOL = 301;

const int ERROR_DISK_TOO_FRAGMENTED = 302;

const int ERROR_DELETE_PENDING = 303;

const int ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = 304;

const int ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = 305;

const int ERROR_SECURITY_STREAM_IS_INCONSISTENT = 306;

const int ERROR_INVALID_LOCK_RANGE = 307;

const int ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = 308;

const int ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = 309;

const int ERROR_INVALID_EXCEPTION_HANDLER = 310;

const int ERROR_DUPLICATE_PRIVILEGES = 311;

const int ERROR_NO_RANGES_PROCESSED = 312;

const int ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = 313;

const int ERROR_DISK_RESOURCES_EXHAUSTED = 314;

const int ERROR_INVALID_TOKEN = 315;

const int ERROR_DEVICE_FEATURE_NOT_SUPPORTED = 316;

const int ERROR_MR_MID_NOT_FOUND = 317;

const int ERROR_SCOPE_NOT_FOUND = 318;

const int ERROR_UNDEFINED_SCOPE = 319;

const int ERROR_INVALID_CAP = 320;

const int ERROR_DEVICE_UNREACHABLE = 321;

const int ERROR_DEVICE_NO_RESOURCES = 322;

const int ERROR_DATA_CHECKSUM_ERROR = 323;

const int ERROR_INTERMIXED_KERNEL_EA_OPERATION = 324;

const int ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = 326;

const int ERROR_OFFSET_ALIGNMENT_VIOLATION = 327;

const int ERROR_INVALID_FIELD_IN_PARAMETER_LIST = 328;

const int ERROR_OPERATION_IN_PROGRESS = 329;

const int ERROR_BAD_DEVICE_PATH = 330;

const int ERROR_TOO_MANY_DESCRIPTORS = 331;

const int ERROR_SCRUB_DATA_DISABLED = 332;

const int ERROR_NOT_REDUNDANT_STORAGE = 333;

const int ERROR_RESIDENT_FILE_NOT_SUPPORTED = 334;

const int ERROR_COMPRESSED_FILE_NOT_SUPPORTED = 335;

const int ERROR_DIRECTORY_NOT_SUPPORTED = 336;

const int ERROR_NOT_READ_FROM_COPY = 337;

const int ERROR_FT_WRITE_FAILURE = 338;

const int ERROR_FT_DI_SCAN_REQUIRED = 339;

const int ERROR_INVALID_KERNEL_INFO_VERSION = 340;

const int ERROR_INVALID_PEP_INFO_VERSION = 341;

const int ERROR_OBJECT_NOT_EXTERNALLY_BACKED = 342;

const int ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = 343;

const int ERROR_COMPRESSION_NOT_BENEFICIAL = 344;

const int ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = 345;

const int ERROR_BLOCKED_BY_PARENTAL_CONTROLS = 346;

const int ERROR_BLOCK_TOO_MANY_REFERENCES = 347;

const int ERROR_MARKED_TO_DISALLOW_WRITES = 348;

const int ERROR_ENCLAVE_FAILURE = 349;

const int ERROR_FAIL_NOACTION_REBOOT = 350;

const int ERROR_FAIL_SHUTDOWN = 351;

const int ERROR_FAIL_RESTART = 352;

const int ERROR_MAX_SESSIONS_REACHED = 353;

const int ERROR_NETWORK_ACCESS_DENIED_EDP = 354;

const int ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = 355;

const int ERROR_EDP_POLICY_DENIES_OPERATION = 356;

const int ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = 357;

const int ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = 358;

const int ERROR_DEVICE_IN_MAINTENANCE = 359;

const int ERROR_NOT_SUPPORTED_ON_DAX = 360;

const int ERROR_DAX_MAPPING_EXISTS = 361;

const int ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = 362;

const int ERROR_CLOUD_FILE_METADATA_CORRUPT = 363;

const int ERROR_CLOUD_FILE_METADATA_TOO_LARGE = 364;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = 365;

const int ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = 366;

const int ERROR_CHILD_PROCESS_BLOCKED = 367;

const int ERROR_STORAGE_LOST_DATA_PERSISTENCE = 368;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = 369;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = 370;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = 371;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = 372;

const int ERROR_GDI_HANDLE_LEAK = 373;

const int ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = 374;

const int ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = 375;

const int ERROR_NOT_A_CLOUD_FILE = 376;

const int ERROR_CLOUD_FILE_NOT_IN_SYNC = 377;

const int ERROR_CLOUD_FILE_ALREADY_CONNECTED = 378;

const int ERROR_CLOUD_FILE_NOT_SUPPORTED = 379;

const int ERROR_CLOUD_FILE_INVALID_REQUEST = 380;

const int ERROR_CLOUD_FILE_READ_ONLY_VOLUME = 381;

const int ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = 382;

const int ERROR_CLOUD_FILE_VALIDATION_FAILED = 383;

const int ERROR_SMB1_NOT_AVAILABLE = 384;

const int ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = 385;

const int ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = 386;

const int ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = 387;

const int ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = 388;

const int ERROR_CLOUD_FILE_UNSUCCESSFUL = 389;

const int ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = 390;

const int ERROR_CLOUD_FILE_IN_USE = 391;

const int ERROR_CLOUD_FILE_PINNED = 392;

const int ERROR_CLOUD_FILE_REQUEST_ABORTED = 393;

const int ERROR_CLOUD_FILE_PROPERTY_CORRUPT = 394;

const int ERROR_CLOUD_FILE_ACCESS_DENIED = 395;

const int ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = 396;

const int ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = 397;

const int ERROR_CLOUD_FILE_REQUEST_CANCELED = 398;

const int ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = 399;

const int ERROR_THREAD_MODE_ALREADY_BACKGROUND = 400;

const int ERROR_THREAD_MODE_NOT_BACKGROUND = 401;

const int ERROR_PROCESS_MODE_ALREADY_BACKGROUND = 402;

const int ERROR_PROCESS_MODE_NOT_BACKGROUND = 403;

const int ERROR_CLOUD_FILE_PROVIDER_TERMINATED = 404;

const int ERROR_NOT_A_CLOUD_SYNC_ROOT = 405;

const int ERROR_FILE_PROTECTED_UNDER_DPL = 406;

const int ERROR_VOLUME_NOT_CLUSTER_ALIGNED = 407;

const int ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = 408;

const int ERROR_APPX_FILE_NOT_ENCRYPTED = 409;

const int ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = 410;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = 411;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = 412;

const int ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = 413;

const int ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = 414;

const int ERROR_FT_READ_FAILURE = 415;

const int ERROR_STORAGE_RESERVE_ID_INVALID = 416;

const int ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = 417;

const int ERROR_STORAGE_RESERVE_ALREADY_EXISTS = 418;

const int ERROR_STORAGE_RESERVE_NOT_EMPTY = 419;

const int ERROR_NOT_A_DAX_VOLUME = 420;

const int ERROR_NOT_DAX_MAPPABLE = 421;

const int ERROR_TIME_SENSITIVE_THREAD = 422;

const int ERROR_DPL_NOT_SUPPORTED_FOR_USER = 423;

const int ERROR_CASE_DIFFERING_NAMES_IN_DIR = 424;

const int ERROR_FILE_NOT_SUPPORTED = 425;

const int ERROR_CLOUD_FILE_REQUEST_TIMEOUT = 426;

const int ERROR_NO_TASK_QUEUE = 427;

const int ERROR_SRC_SRV_DLL_LOAD_FAILED = 428;

const int ERROR_NOT_SUPPORTED_WITH_BTT = 429;

const int ERROR_ENCRYPTION_DISABLED = 430;

const int ERROR_ENCRYPTING_METADATA_DISALLOWED = 431;

const int ERROR_CANT_CLEAR_ENCRYPTION_FLAG = 432;

const int ERROR_NO_SUCH_DEVICE = 433;

const int ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED = 434;

const int ERROR_FILE_SNAP_IN_PROGRESS = 435;

const int ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED = 436;

const int ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED = 437;

const int ERROR_FILE_SNAP_IO_NOT_COORDINATED = 438;

const int ERROR_FILE_SNAP_UNEXPECTED_ERROR = 439;

const int ERROR_FILE_SNAP_INVALID_PARAMETER = 440;

const int ERROR_UNSATISFIED_DEPENDENCIES = 441;

const int ERROR_CASE_SENSITIVE_PATH = 442;

const int ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR = 443;

const int ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED = 444;

const int ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION = 445;

const int ERROR_DLP_POLICY_DENIES_OPERATION = 446;

const int ERROR_SECURITY_DENIES_OPERATION = 447;

const int ERROR_UNTRUSTED_MOUNT_POINT = 448;

const int ERROR_DLP_POLICY_SILENTLY_FAIL = 449;

const int ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = 450;

const int ERROR_CAPAUTHZ_CHANGE_TYPE = 451;

const int ERROR_CAPAUTHZ_NOT_PROVISIONED = 452;

const int ERROR_CAPAUTHZ_NOT_AUTHORIZED = 453;

const int ERROR_CAPAUTHZ_NO_POLICY = 454;

const int ERROR_CAPAUTHZ_DB_CORRUPTED = 455;

const int ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = 456;

const int ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = 457;

const int ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = 458;

const int ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = 459;

const int ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = 460;

const int ERROR_CIMFS_IMAGE_CORRUPT = 470;

const int ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED = 471;

const int ERROR_STORAGE_STACK_ACCESS_DENIED = 472;

const int ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES = 473;

const int ERROR_INDEX_OUT_OF_BOUNDS = 474;

const int ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT = 475;

const int ERROR_NOT_A_DEV_VOLUME = 476;

const int ERROR_FS_GUID_MISMATCH = 477;

const int ERROR_CANT_ATTACH_TO_DEV_VOLUME = 478;

const int ERROR_INVALID_CONFIG_VALUE = 479;

const int ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = 480;

const int ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = 481;

const int ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = 482;

const int ERROR_DEVICE_HARDWARE_ERROR = 483;

const int ERROR_INVALID_ADDRESS = 487;

const int ERROR_HAS_SYSTEM_CRITICAL_FILES = 488;

const int ERROR_ENCRYPTED_FILE_NOT_SUPPORTED = 489;

const int ERROR_SPARSE_FILE_NOT_SUPPORTED = 490;

const int ERROR_PAGEFILE_NOT_SUPPORTED = 491;

const int ERROR_VOLUME_NOT_SUPPORTED = 492;

const int ERROR_NOT_SUPPORTED_WITH_BYPASSIO = 493;

const int ERROR_NO_BYPASSIO_DRIVER_SUPPORT = 494;

const int ERROR_NOT_SUPPORTED_WITH_ENCRYPTION = 495;

const int ERROR_NOT_SUPPORTED_WITH_COMPRESSION = 496;

const int ERROR_NOT_SUPPORTED_WITH_REPLICATION = 497;

const int ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION = 498;

const int ERROR_NOT_SUPPORTED_WITH_AUDITING = 499;

const int ERROR_USER_PROFILE_LOAD = 500;

const int ERROR_SESSION_KEY_TOO_SHORT = 501;

const int ERROR_ACCESS_DENIED_APPDATA = 502;

const int ERROR_NOT_SUPPORTED_WITH_MONITORING = 503;

const int ERROR_NOT_SUPPORTED_WITH_SNAPSHOT = 504;

const int ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION = 505;

const int ERROR_BYPASSIO_FLT_NOT_SUPPORTED = 506;

const int ERROR_DEVICE_RESET_REQUIRED = 507;

const int ERROR_VOLUME_WRITE_ACCESS_DENIED = 508;

const int ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE = 509;

const int ERROR_FS_METADATA_INCONSISTENT = 510;

const int ERROR_BLOCK_WEAK_REFERENCE_INVALID = 511;

const int ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID = 512;

const int ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID = 513;

const int ERROR_BLOCK_SHARED = 514;

const int ERROR_VOLUME_UPGRADE_NOT_NEEDED = 515;

const int ERROR_VOLUME_UPGRADE_PENDING = 516;

const int ERROR_VOLUME_UPGRADE_DISABLED = 517;

const int ERROR_VOLUME_UPGRADE_DISABLED_TILL_OS_DOWNGRADE_EXPIRED = 518;

const int ERROR_ARITHMETIC_OVERFLOW = 534;

const int ERROR_PIPE_CONNECTED = 535;

const int ERROR_PIPE_LISTENING = 536;

const int ERROR_VERIFIER_STOP = 537;

const int ERROR_ABIOS_ERROR = 538;

const int ERROR_WX86_WARNING = 539;

const int ERROR_WX86_ERROR = 540;

const int ERROR_TIMER_NOT_CANCELED = 541;

const int ERROR_UNWIND = 542;

const int ERROR_BAD_STACK = 543;

const int ERROR_INVALID_UNWIND_TARGET = 544;

const int ERROR_INVALID_PORT_ATTRIBUTES = 545;

const int ERROR_PORT_MESSAGE_TOO_LONG = 546;

const int ERROR_INVALID_QUOTA_LOWER = 547;

const int ERROR_DEVICE_ALREADY_ATTACHED = 548;

const int ERROR_INSTRUCTION_MISALIGNMENT = 549;

const int ERROR_PROFILING_NOT_STARTED = 550;

const int ERROR_PROFILING_NOT_STOPPED = 551;

const int ERROR_COULD_NOT_INTERPRET = 552;

const int ERROR_PROFILING_AT_LIMIT = 553;

const int ERROR_CANT_WAIT = 554;

const int ERROR_CANT_TERMINATE_SELF = 555;

const int ERROR_UNEXPECTED_MM_CREATE_ERR = 556;

const int ERROR_UNEXPECTED_MM_MAP_ERROR = 557;

const int ERROR_UNEXPECTED_MM_EXTEND_ERR = 558;

const int ERROR_BAD_FUNCTION_TABLE = 559;

const int ERROR_NO_GUID_TRANSLATION = 560;

const int ERROR_INVALID_LDT_SIZE = 561;

const int ERROR_INVALID_LDT_OFFSET = 563;

const int ERROR_INVALID_LDT_DESCRIPTOR = 564;

const int ERROR_TOO_MANY_THREADS = 565;

const int ERROR_THREAD_NOT_IN_PROCESS = 566;

const int ERROR_PAGEFILE_QUOTA_EXCEEDED = 567;

const int ERROR_LOGON_SERVER_CONFLICT = 568;

const int ERROR_SYNCHRONIZATION_REQUIRED = 569;

const int ERROR_NET_OPEN_FAILED = 570;

const int ERROR_IO_PRIVILEGE_FAILED = 571;

const int ERROR_CONTROL_C_EXIT = 572;

const int ERROR_MISSING_SYSTEMFILE = 573;

const int ERROR_UNHANDLED_EXCEPTION = 574;

const int ERROR_APP_INIT_FAILURE = 575;

const int ERROR_PAGEFILE_CREATE_FAILED = 576;

const int ERROR_INVALID_IMAGE_HASH = 577;

const int ERROR_NO_PAGEFILE = 578;

const int ERROR_ILLEGAL_FLOAT_CONTEXT = 579;

const int ERROR_NO_EVENT_PAIR = 580;

const int ERROR_DOMAIN_CTRLR_CONFIG_ERROR = 581;

const int ERROR_ILLEGAL_CHARACTER = 582;

const int ERROR_UNDEFINED_CHARACTER = 583;

const int ERROR_FLOPPY_VOLUME = 584;

const int ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = 585;

const int ERROR_BACKUP_CONTROLLER = 586;

const int ERROR_MUTANT_LIMIT_EXCEEDED = 587;

const int ERROR_FS_DRIVER_REQUIRED = 588;

const int ERROR_CANNOT_LOAD_REGISTRY_FILE = 589;

const int ERROR_DEBUG_ATTACH_FAILED = 590;

const int ERROR_SYSTEM_PROCESS_TERMINATED = 591;

const int ERROR_DATA_NOT_ACCEPTED = 592;

const int ERROR_VDM_HARD_ERROR = 593;

const int ERROR_DRIVER_CANCEL_TIMEOUT = 594;

const int ERROR_REPLY_MESSAGE_MISMATCH = 595;

const int ERROR_LOST_WRITEBEHIND_DATA = 596;

const int ERROR_CLIENT_SERVER_PARAMETERS_INVALID = 597;

const int ERROR_NOT_TINY_STREAM = 598;

const int ERROR_STACK_OVERFLOW_READ = 599;

const int ERROR_CONVERT_TO_LARGE = 600;

const int ERROR_FOUND_OUT_OF_SCOPE = 601;

const int ERROR_ALLOCATE_BUCKET = 602;

const int ERROR_MARSHALL_OVERFLOW = 603;

const int ERROR_INVALID_VARIANT = 604;

const int ERROR_BAD_COMPRESSION_BUFFER = 605;

const int ERROR_AUDIT_FAILED = 606;

const int ERROR_TIMER_RESOLUTION_NOT_SET = 607;

const int ERROR_INSUFFICIENT_LOGON_INFO = 608;

const int ERROR_BAD_DLL_ENTRYPOINT = 609;

const int ERROR_BAD_SERVICE_ENTRYPOINT = 610;

const int ERROR_IP_ADDRESS_CONFLICT1 = 611;

const int ERROR_IP_ADDRESS_CONFLICT2 = 612;

const int ERROR_REGISTRY_QUOTA_LIMIT = 613;

const int ERROR_NO_CALLBACK_ACTIVE = 614;

const int ERROR_PWD_TOO_SHORT = 615;

const int ERROR_PWD_TOO_RECENT = 616;

const int ERROR_PWD_HISTORY_CONFLICT = 617;

const int ERROR_UNSUPPORTED_COMPRESSION = 618;

const int ERROR_INVALID_HW_PROFILE = 619;

const int ERROR_INVALID_PLUGPLAY_DEVICE_PATH = 620;

const int ERROR_QUOTA_LIST_INCONSISTENT = 621;

const int ERROR_EVALUATION_EXPIRATION = 622;

const int ERROR_ILLEGAL_DLL_RELOCATION = 623;

const int ERROR_DLL_INIT_FAILED_LOGOFF = 624;

const int ERROR_VALIDATE_CONTINUE = 625;

const int ERROR_NO_MORE_MATCHES = 626;

const int ERROR_RANGE_LIST_CONFLICT = 627;

const int ERROR_SERVER_SID_MISMATCH = 628;

const int ERROR_CANT_ENABLE_DENY_ONLY = 629;

const int ERROR_FLOAT_MULTIPLE_FAULTS = 630;

const int ERROR_FLOAT_MULTIPLE_TRAPS = 631;

const int ERROR_NOINTERFACE = 632;

const int ERROR_DRIVER_FAILED_SLEEP = 633;

const int ERROR_CORRUPT_SYSTEM_FILE = 634;

const int ERROR_COMMITMENT_MINIMUM = 635;

const int ERROR_PNP_RESTART_ENUMERATION = 636;

const int ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = 637;

const int ERROR_PNP_REBOOT_REQUIRED = 638;

const int ERROR_INSUFFICIENT_POWER = 639;

const int ERROR_MULTIPLE_FAULT_VIOLATION = 640;

const int ERROR_SYSTEM_SHUTDOWN = 641;

const int ERROR_PORT_NOT_SET = 642;

const int ERROR_DS_VERSION_CHECK_FAILURE = 643;

const int ERROR_RANGE_NOT_FOUND = 644;

const int ERROR_NOT_SAFE_MODE_DRIVER = 646;

const int ERROR_FAILED_DRIVER_ENTRY = 647;

const int ERROR_DEVICE_ENUMERATION_ERROR = 648;

const int ERROR_MOUNT_POINT_NOT_RESOLVED = 649;

const int ERROR_INVALID_DEVICE_OBJECT_PARAMETER = 650;

const int ERROR_MCA_OCCURED = 651;

const int ERROR_DRIVER_DATABASE_ERROR = 652;

const int ERROR_SYSTEM_HIVE_TOO_LARGE = 653;

const int ERROR_DRIVER_FAILED_PRIOR_UNLOAD = 654;

const int ERROR_VOLSNAP_PREPARE_HIBERNATE = 655;

const int ERROR_HIBERNATION_FAILURE = 656;

const int ERROR_PWD_TOO_LONG = 657;

const int ERROR_FILE_SYSTEM_LIMITATION = 665;

const int ERROR_ASSERTION_FAILURE = 668;

const int ERROR_ACPI_ERROR = 669;

const int ERROR_WOW_ASSERTION = 670;

const int ERROR_PNP_BAD_MPS_TABLE = 671;

const int ERROR_PNP_TRANSLATION_FAILED = 672;

const int ERROR_PNP_IRQ_TRANSLATION_FAILED = 673;

const int ERROR_PNP_INVALID_ID = 674;

const int ERROR_WAKE_SYSTEM_DEBUGGER = 675;

const int ERROR_HANDLES_CLOSED = 676;

const int ERROR_EXTRANEOUS_INFORMATION = 677;

const int ERROR_RXACT_COMMIT_NECESSARY = 678;

const int ERROR_MEDIA_CHECK = 679;

const int ERROR_GUID_SUBSTITUTION_MADE = 680;

const int ERROR_STOPPED_ON_SYMLINK = 681;

const int ERROR_LONGJUMP = 682;

const int ERROR_PLUGPLAY_QUERY_VETOED = 683;

const int ERROR_UNWIND_CONSOLIDATE = 684;

const int ERROR_REGISTRY_HIVE_RECOVERED = 685;

const int ERROR_DLL_MIGHT_BE_INSECURE = 686;

const int ERROR_DLL_MIGHT_BE_INCOMPATIBLE = 687;

const int ERROR_DBG_EXCEPTION_NOT_HANDLED = 688;

const int ERROR_DBG_REPLY_LATER = 689;

const int ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = 690;

const int ERROR_DBG_TERMINATE_THREAD = 691;

const int ERROR_DBG_TERMINATE_PROCESS = 692;

const int ERROR_DBG_CONTROL_C = 693;

const int ERROR_DBG_PRINTEXCEPTION_C = 694;

const int ERROR_DBG_RIPEXCEPTION = 695;

const int ERROR_DBG_CONTROL_BREAK = 696;

const int ERROR_DBG_COMMAND_EXCEPTION = 697;

const int ERROR_OBJECT_NAME_EXISTS = 698;

const int ERROR_THREAD_WAS_SUSPENDED = 699;

const int ERROR_IMAGE_NOT_AT_BASE = 700;

const int ERROR_RXACT_STATE_CREATED = 701;

const int ERROR_SEGMENT_NOTIFICATION = 702;

const int ERROR_BAD_CURRENT_DIRECTORY = 703;

const int ERROR_FT_READ_RECOVERY_FROM_BACKUP = 704;

const int ERROR_FT_WRITE_RECOVERY = 705;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH = 706;

const int ERROR_RECEIVE_PARTIAL = 707;

const int ERROR_RECEIVE_EXPEDITED = 708;

const int ERROR_RECEIVE_PARTIAL_EXPEDITED = 709;

const int ERROR_EVENT_DONE = 710;

const int ERROR_EVENT_PENDING = 711;

const int ERROR_CHECKING_FILE_SYSTEM = 712;

const int ERROR_FATAL_APP_EXIT = 713;

const int ERROR_PREDEFINED_HANDLE = 714;

const int ERROR_WAS_UNLOCKED = 715;

const int ERROR_SERVICE_NOTIFICATION = 716;

const int ERROR_WAS_LOCKED = 717;

const int ERROR_LOG_HARD_ERROR = 718;

const int ERROR_ALREADY_WIN32 = 719;

const int ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = 720;

const int ERROR_NO_YIELD_PERFORMED = 721;

const int ERROR_TIMER_RESUME_IGNORED = 722;

const int ERROR_ARBITRATION_UNHANDLED = 723;

const int ERROR_CARDBUS_NOT_SUPPORTED = 724;

const int ERROR_MP_PROCESSOR_MISMATCH = 725;

const int ERROR_HIBERNATED = 726;

const int ERROR_RESUME_HIBERNATION = 727;

const int ERROR_FIRMWARE_UPDATED = 728;

const int ERROR_DRIVERS_LEAKING_LOCKED_PAGES = 729;

const int ERROR_WAKE_SYSTEM = 730;

const int ERROR_WAIT_1 = 731;

const int ERROR_WAIT_2 = 732;

const int ERROR_WAIT_3 = 733;

const int ERROR_WAIT_63 = 734;

const int ERROR_ABANDONED_WAIT_0 = 735;

const int ERROR_ABANDONED_WAIT_63 = 736;

const int ERROR_USER_APC = 737;

const int ERROR_KERNEL_APC = 738;

const int ERROR_ALERTED = 739;

const int ERROR_ELEVATION_REQUIRED = 740;

const int ERROR_REPARSE = 741;

const int ERROR_OPLOCK_BREAK_IN_PROGRESS = 742;

const int ERROR_VOLUME_MOUNTED = 743;

const int ERROR_RXACT_COMMITTED = 744;

const int ERROR_NOTIFY_CLEANUP = 745;

const int ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = 746;

const int ERROR_PAGE_FAULT_TRANSITION = 747;

const int ERROR_PAGE_FAULT_DEMAND_ZERO = 748;

const int ERROR_PAGE_FAULT_COPY_ON_WRITE = 749;

const int ERROR_PAGE_FAULT_GUARD_PAGE = 750;

const int ERROR_PAGE_FAULT_PAGING_FILE = 751;

const int ERROR_CACHE_PAGE_LOCKED = 752;

const int ERROR_CRASH_DUMP = 753;

const int ERROR_BUFFER_ALL_ZEROS = 754;

const int ERROR_REPARSE_OBJECT = 755;

const int ERROR_RESOURCE_REQUIREMENTS_CHANGED = 756;

const int ERROR_TRANSLATION_COMPLETE = 757;

const int ERROR_NOTHING_TO_TERMINATE = 758;

const int ERROR_PROCESS_NOT_IN_JOB = 759;

const int ERROR_PROCESS_IN_JOB = 760;

const int ERROR_VOLSNAP_HIBERNATE_READY = 761;

const int ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = 762;

const int ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = 763;

const int ERROR_INTERRUPT_STILL_CONNECTED = 764;

const int ERROR_WAIT_FOR_OPLOCK = 765;

const int ERROR_DBG_EXCEPTION_HANDLED = 766;

const int ERROR_DBG_CONTINUE = 767;

const int ERROR_CALLBACK_POP_STACK = 768;

const int ERROR_COMPRESSION_DISABLED = 769;

const int ERROR_CANTFETCHBACKWARDS = 770;

const int ERROR_CANTSCROLLBACKWARDS = 771;

const int ERROR_ROWSNOTRELEASED = 772;

const int ERROR_BAD_ACCESSOR_FLAGS = 773;

const int ERROR_ERRORS_ENCOUNTERED = 774;

const int ERROR_NOT_CAPABLE = 775;

const int ERROR_REQUEST_OUT_OF_SEQUENCE = 776;

const int ERROR_VERSION_PARSE_ERROR = 777;

const int ERROR_BADSTARTPOSITION = 778;

const int ERROR_MEMORY_HARDWARE = 779;

const int ERROR_DISK_REPAIR_DISABLED = 780;

const int ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = 781;

const int ERROR_SYSTEM_POWERSTATE_TRANSITION = 782;

const int ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = 783;

const int ERROR_MCA_EXCEPTION = 784;

const int ERROR_ACCESS_AUDIT_BY_POLICY = 785;

const int ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = 786;

const int ERROR_ABANDON_HIBERFILE = 787;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = 788;

const int ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = 789;

const int ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = 790;

const int ERROR_BAD_MCFG_TABLE = 791;

const int ERROR_DISK_REPAIR_REDIRECTED = 792;

const int ERROR_DISK_REPAIR_UNSUCCESSFUL = 793;

const int ERROR_CORRUPT_LOG_OVERFULL = 794;

const int ERROR_CORRUPT_LOG_CORRUPTED = 795;

const int ERROR_CORRUPT_LOG_UNAVAILABLE = 796;

const int ERROR_CORRUPT_LOG_DELETED_FULL = 797;

const int ERROR_CORRUPT_LOG_CLEARED = 798;

const int ERROR_ORPHAN_NAME_EXHAUSTED = 799;

const int ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = 800;

const int ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = 801;

const int ERROR_CANNOT_BREAK_OPLOCK = 802;

const int ERROR_OPLOCK_HANDLE_CLOSED = 803;

const int ERROR_NO_ACE_CONDITION = 804;

const int ERROR_INVALID_ACE_CONDITION = 805;

const int ERROR_FILE_HANDLE_REVOKED = 806;

const int ERROR_IMAGE_AT_DIFFERENT_BASE = 807;

const int ERROR_ENCRYPTED_IO_NOT_POSSIBLE = 808;

const int ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = 809;

const int ERROR_QUOTA_ACTIVITY = 810;

const int ERROR_HANDLE_REVOKED = 811;

const int ERROR_CALLBACK_INVOKE_INLINE = 812;

const int ERROR_CPU_SET_INVALID = 813;

const int ERROR_ENCLAVE_NOT_TERMINATED = 814;

const int ERROR_ENCLAVE_VIOLATION = 815;

const int ERROR_SERVER_TRANSPORT_CONFLICT = 816;

const int ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT = 817;

const int ERROR_FT_READ_FROM_COPY_FAILURE = 818;

const int ERROR_SECTION_DIRECT_MAP_ONLY = 819;

const int ERROR_EA_ACCESS_DENIED = 994;

const int ERROR_OPERATION_ABORTED = 995;

const int ERROR_IO_INCOMPLETE = 996;

const int ERROR_IO_PENDING = 997;

const int ERROR_NOACCESS = 998;

const int ERROR_SWAPERROR = 999;

const int ERROR_STACK_OVERFLOW = 1001;

const int ERROR_INVALID_MESSAGE = 1002;

const int ERROR_CAN_NOT_COMPLETE = 1003;

const int ERROR_INVALID_FLAGS = 1004;

const int ERROR_UNRECOGNIZED_VOLUME = 1005;

const int ERROR_FILE_INVALID = 1006;

const int ERROR_FULLSCREEN_MODE = 1007;

const int ERROR_NO_TOKEN = 1008;

const int ERROR_BADDB = 1009;

const int ERROR_BADKEY = 1010;

const int ERROR_CANTOPEN = 1011;

const int ERROR_CANTREAD = 1012;

const int ERROR_CANTWRITE = 1013;

const int ERROR_REGISTRY_RECOVERED = 1014;

const int ERROR_REGISTRY_CORRUPT = 1015;

const int ERROR_REGISTRY_IO_FAILED = 1016;

const int ERROR_NOT_REGISTRY_FILE = 1017;

const int ERROR_KEY_DELETED = 1018;

const int ERROR_NO_LOG_SPACE = 1019;

const int ERROR_KEY_HAS_CHILDREN = 1020;

const int ERROR_CHILD_MUST_BE_VOLATILE = 1021;

const int ERROR_NOTIFY_ENUM_DIR = 1022;

const int ERROR_DEPENDENT_SERVICES_RUNNING = 1051;

const int ERROR_INVALID_SERVICE_CONTROL = 1052;

const int ERROR_SERVICE_REQUEST_TIMEOUT = 1053;

const int ERROR_SERVICE_NO_THREAD = 1054;

const int ERROR_SERVICE_DATABASE_LOCKED = 1055;

const int ERROR_SERVICE_ALREADY_RUNNING = 1056;

const int ERROR_INVALID_SERVICE_ACCOUNT = 1057;

const int ERROR_SERVICE_DISABLED = 1058;

const int ERROR_CIRCULAR_DEPENDENCY = 1059;

const int ERROR_SERVICE_DOES_NOT_EXIST = 1060;

const int ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 1061;

const int ERROR_SERVICE_NOT_ACTIVE = 1062;

const int ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 1063;

const int ERROR_EXCEPTION_IN_SERVICE = 1064;

const int ERROR_DATABASE_DOES_NOT_EXIST = 1065;

const int ERROR_SERVICE_SPECIFIC_ERROR = 1066;

const int ERROR_PROCESS_ABORTED = 1067;

const int ERROR_SERVICE_DEPENDENCY_FAIL = 1068;

const int ERROR_SERVICE_LOGON_FAILED = 1069;

const int ERROR_SERVICE_START_HANG = 1070;

const int ERROR_INVALID_SERVICE_LOCK = 1071;

const int ERROR_SERVICE_MARKED_FOR_DELETE = 1072;

const int ERROR_SERVICE_EXISTS = 1073;

const int ERROR_ALREADY_RUNNING_LKG = 1074;

const int ERROR_SERVICE_DEPENDENCY_DELETED = 1075;

const int ERROR_BOOT_ALREADY_ACCEPTED = 1076;

const int ERROR_SERVICE_NEVER_STARTED = 1077;

const int ERROR_DUPLICATE_SERVICE_NAME = 1078;

const int ERROR_DIFFERENT_SERVICE_ACCOUNT = 1079;

const int ERROR_CANNOT_DETECT_DRIVER_FAILURE = 1080;

const int ERROR_CANNOT_DETECT_PROCESS_ABORT = 1081;

const int ERROR_NO_RECOVERY_PROGRAM = 1082;

const int ERROR_SERVICE_NOT_IN_EXE = 1083;

const int ERROR_NOT_SAFEBOOT_SERVICE = 1084;

const int ERROR_END_OF_MEDIA = 1100;

const int ERROR_FILEMARK_DETECTED = 1101;

const int ERROR_BEGINNING_OF_MEDIA = 1102;

const int ERROR_SETMARK_DETECTED = 1103;

const int ERROR_NO_DATA_DETECTED = 1104;

const int ERROR_PARTITION_FAILURE = 1105;

const int ERROR_INVALID_BLOCK_LENGTH = 1106;

const int ERROR_DEVICE_NOT_PARTITIONED = 1107;

const int ERROR_UNABLE_TO_LOCK_MEDIA = 1108;

const int ERROR_UNABLE_TO_UNLOAD_MEDIA = 1109;

const int ERROR_MEDIA_CHANGED = 1110;

const int ERROR_BUS_RESET = 1111;

const int ERROR_NO_MEDIA_IN_DRIVE = 1112;

const int ERROR_NO_UNICODE_TRANSLATION = 1113;

const int ERROR_DLL_INIT_FAILED = 1114;

const int ERROR_SHUTDOWN_IN_PROGRESS = 1115;

const int ERROR_NO_SHUTDOWN_IN_PROGRESS = 1116;

const int ERROR_IO_DEVICE = 1117;

const int ERROR_SERIAL_NO_DEVICE = 1118;

const int ERROR_IRQ_BUSY = 1119;

const int ERROR_MORE_WRITES = 1120;

const int ERROR_COUNTER_TIMEOUT = 1121;

const int ERROR_FLOPPY_ID_MARK_NOT_FOUND = 1122;

const int ERROR_FLOPPY_WRONG_CYLINDER = 1123;

const int ERROR_FLOPPY_UNKNOWN_ERROR = 1124;

const int ERROR_FLOPPY_BAD_REGISTERS = 1125;

const int ERROR_DISK_RECALIBRATE_FAILED = 1126;

const int ERROR_DISK_OPERATION_FAILED = 1127;

const int ERROR_DISK_RESET_FAILED = 1128;

const int ERROR_EOM_OVERFLOW = 1129;

const int ERROR_NOT_ENOUGH_SERVER_MEMORY = 1130;

const int ERROR_POSSIBLE_DEADLOCK = 1131;

const int ERROR_MAPPED_ALIGNMENT = 1132;

const int ERROR_SET_POWER_STATE_VETOED = 1140;

const int ERROR_SET_POWER_STATE_FAILED = 1141;

const int ERROR_TOO_MANY_LINKS = 1142;

const int ERROR_OLD_WIN_VERSION = 1150;

const int ERROR_APP_WRONG_OS = 1151;

const int ERROR_SINGLE_INSTANCE_APP = 1152;

const int ERROR_RMODE_APP = 1153;

const int ERROR_INVALID_DLL = 1154;

const int ERROR_NO_ASSOCIATION = 1155;

const int ERROR_DDE_FAIL = 1156;

const int ERROR_DLL_NOT_FOUND = 1157;

const int ERROR_NO_MORE_USER_HANDLES = 1158;

const int ERROR_MESSAGE_SYNC_ONLY = 1159;

const int ERROR_SOURCE_ELEMENT_EMPTY = 1160;

const int ERROR_DESTINATION_ELEMENT_FULL = 1161;

const int ERROR_ILLEGAL_ELEMENT_ADDRESS = 1162;

const int ERROR_MAGAZINE_NOT_PRESENT = 1163;

const int ERROR_DEVICE_REINITIALIZATION_NEEDED = 1164;

const int ERROR_DEVICE_REQUIRES_CLEANING = 1165;

const int ERROR_DEVICE_DOOR_OPEN = 1166;

const int ERROR_DEVICE_NOT_CONNECTED = 1167;

const int ERROR_NOT_FOUND = 1168;

const int ERROR_NO_MATCH = 1169;

const int ERROR_SET_NOT_FOUND = 1170;

const int ERROR_POINT_NOT_FOUND = 1171;

const int ERROR_NO_TRACKING_SERVICE = 1172;

const int ERROR_NO_VOLUME_ID = 1173;

const int ERROR_UNABLE_TO_REMOVE_REPLACED = 1175;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT = 1176;

const int ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 1177;

const int ERROR_JOURNAL_DELETE_IN_PROGRESS = 1178;

const int ERROR_JOURNAL_NOT_ACTIVE = 1179;

const int ERROR_POTENTIAL_FILE_FOUND = 1180;

const int ERROR_JOURNAL_ENTRY_DELETED = 1181;

const int ERROR_PARTITION_TERMINATING = 1184;

const int ERROR_SHUTDOWN_IS_SCHEDULED = 1190;

const int ERROR_SHUTDOWN_USERS_LOGGED_ON = 1191;

const int ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE = 1192;

const int ERROR_BAD_DEVICE = 1200;

const int ERROR_CONNECTION_UNAVAIL = 1201;

const int ERROR_DEVICE_ALREADY_REMEMBERED = 1202;

const int ERROR_NO_NET_OR_BAD_PATH = 1203;

const int ERROR_BAD_PROVIDER = 1204;

const int ERROR_CANNOT_OPEN_PROFILE = 1205;

const int ERROR_BAD_PROFILE = 1206;

const int ERROR_NOT_CONTAINER = 1207;

const int ERROR_EXTENDED_ERROR = 1208;

const int ERROR_INVALID_GROUPNAME = 1209;

const int ERROR_INVALID_COMPUTERNAME = 1210;

const int ERROR_INVALID_EVENTNAME = 1211;

const int ERROR_INVALID_DOMAINNAME = 1212;

const int ERROR_INVALID_SERVICENAME = 1213;

const int ERROR_INVALID_NETNAME = 1214;

const int ERROR_INVALID_SHARENAME = 1215;

const int ERROR_INVALID_PASSWORDNAME = 1216;

const int ERROR_INVALID_MESSAGENAME = 1217;

const int ERROR_INVALID_MESSAGEDEST = 1218;

const int ERROR_SESSION_CREDENTIAL_CONFLICT = 1219;

const int ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 1220;

const int ERROR_DUP_DOMAINNAME = 1221;

const int ERROR_NO_NETWORK = 1222;

const int ERROR_CANCELLED = 1223;

const int ERROR_USER_MAPPED_FILE = 1224;

const int ERROR_CONNECTION_REFUSED = 1225;

const int ERROR_GRACEFUL_DISCONNECT = 1226;

const int ERROR_ADDRESS_ALREADY_ASSOCIATED = 1227;

const int ERROR_ADDRESS_NOT_ASSOCIATED = 1228;

const int ERROR_CONNECTION_INVALID = 1229;

const int ERROR_CONNECTION_ACTIVE = 1230;

const int ERROR_NETWORK_UNREACHABLE = 1231;

const int ERROR_HOST_UNREACHABLE = 1232;

const int ERROR_PROTOCOL_UNREACHABLE = 1233;

const int ERROR_PORT_UNREACHABLE = 1234;

const int ERROR_REQUEST_ABORTED = 1235;

const int ERROR_CONNECTION_ABORTED = 1236;

const int ERROR_RETRY = 1237;

const int ERROR_CONNECTION_COUNT_LIMIT = 1238;

const int ERROR_LOGIN_TIME_RESTRICTION = 1239;

const int ERROR_LOGIN_WKSTA_RESTRICTION = 1240;

const int ERROR_INCORRECT_ADDRESS = 1241;

const int ERROR_ALREADY_REGISTERED = 1242;

const int ERROR_SERVICE_NOT_FOUND = 1243;

const int ERROR_NOT_AUTHENTICATED = 1244;

const int ERROR_NOT_LOGGED_ON = 1245;

const int ERROR_CONTINUE = 1246;

const int ERROR_ALREADY_INITIALIZED = 1247;

const int ERROR_NO_MORE_DEVICES = 1248;

const int ERROR_NO_SUCH_SITE = 1249;

const int ERROR_DOMAIN_CONTROLLER_EXISTS = 1250;

const int ERROR_ONLY_IF_CONNECTED = 1251;

const int ERROR_OVERRIDE_NOCHANGES = 1252;

const int ERROR_BAD_USER_PROFILE = 1253;

const int ERROR_NOT_SUPPORTED_ON_SBS = 1254;

const int ERROR_SERVER_SHUTDOWN_IN_PROGRESS = 1255;

const int ERROR_HOST_DOWN = 1256;

const int ERROR_NON_ACCOUNT_SID = 1257;

const int ERROR_NON_DOMAIN_SID = 1258;

const int ERROR_APPHELP_BLOCK = 1259;

const int ERROR_ACCESS_DISABLED_BY_POLICY = 1260;

const int ERROR_REG_NAT_CONSUMPTION = 1261;

const int ERROR_CSCSHARE_OFFLINE = 1262;

const int ERROR_PKINIT_FAILURE = 1263;

const int ERROR_SMARTCARD_SUBSYSTEM_FAILURE = 1264;

const int ERROR_DOWNGRADE_DETECTED = 1265;

const int ERROR_MACHINE_LOCKED = 1271;

const int ERROR_SMB_GUEST_LOGON_BLOCKED = 1272;

const int ERROR_CALLBACK_SUPPLIED_INVALID_DATA = 1273;

const int ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = 1274;

const int ERROR_DRIVER_BLOCKED = 1275;

const int ERROR_INVALID_IMPORT_OF_NON_DLL = 1276;

const int ERROR_ACCESS_DISABLED_WEBBLADE = 1277;

const int ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = 1278;

const int ERROR_RECOVERY_FAILURE = 1279;

const int ERROR_ALREADY_FIBER = 1280;

const int ERROR_ALREADY_THREAD = 1281;

const int ERROR_STACK_BUFFER_OVERRUN = 1282;

const int ERROR_PARAMETER_QUOTA_EXCEEDED = 1283;

const int ERROR_DEBUGGER_INACTIVE = 1284;

const int ERROR_DELAY_LOAD_FAILED = 1285;

const int ERROR_VDM_DISALLOWED = 1286;

const int ERROR_UNIDENTIFIED_ERROR = 1287;

const int ERROR_INVALID_CRUNTIME_PARAMETER = 1288;

const int ERROR_BEYOND_VDL = 1289;

const int ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = 1290;

const int ERROR_DRIVER_PROCESS_TERMINATED = 1291;

const int ERROR_IMPLEMENTATION_LIMIT = 1292;

const int ERROR_PROCESS_IS_PROTECTED = 1293;

const int ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = 1294;

const int ERROR_DISK_QUOTA_EXCEEDED = 1295;

const int ERROR_CONTENT_BLOCKED = 1296;

const int ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = 1297;

const int ERROR_APP_HANG = 1298;

const int ERROR_INVALID_LABEL = 1299;

const int ERROR_NOT_ALL_ASSIGNED = 1300;

const int ERROR_SOME_NOT_MAPPED = 1301;

const int ERROR_NO_QUOTAS_FOR_ACCOUNT = 1302;

const int ERROR_LOCAL_USER_SESSION_KEY = 1303;

const int ERROR_NULL_LM_PASSWORD = 1304;

const int ERROR_UNKNOWN_REVISION = 1305;

const int ERROR_REVISION_MISMATCH = 1306;

const int ERROR_INVALID_OWNER = 1307;

const int ERROR_INVALID_PRIMARY_GROUP = 1308;

const int ERROR_NO_IMPERSONATION_TOKEN = 1309;

const int ERROR_CANT_DISABLE_MANDATORY = 1310;

const int ERROR_NO_LOGON_SERVERS = 1311;

const int ERROR_NO_SUCH_LOGON_SESSION = 1312;

const int ERROR_NO_SUCH_PRIVILEGE = 1313;

const int ERROR_PRIVILEGE_NOT_HELD = 1314;

const int ERROR_INVALID_ACCOUNT_NAME = 1315;

const int ERROR_USER_EXISTS = 1316;

const int ERROR_NO_SUCH_USER = 1317;

const int ERROR_GROUP_EXISTS = 1318;

const int ERROR_NO_SUCH_GROUP = 1319;

const int ERROR_MEMBER_IN_GROUP = 1320;

const int ERROR_MEMBER_NOT_IN_GROUP = 1321;

const int ERROR_LAST_ADMIN = 1322;

const int ERROR_WRONG_PASSWORD = 1323;

const int ERROR_ILL_FORMED_PASSWORD = 1324;

const int ERROR_PASSWORD_RESTRICTION = 1325;

const int ERROR_LOGON_FAILURE = 1326;

const int ERROR_ACCOUNT_RESTRICTION = 1327;

const int ERROR_INVALID_LOGON_HOURS = 1328;

const int ERROR_INVALID_WORKSTATION = 1329;

const int ERROR_PASSWORD_EXPIRED = 1330;

const int ERROR_ACCOUNT_DISABLED = 1331;

const int ERROR_NONE_MAPPED = 1332;

const int ERROR_TOO_MANY_LUIDS_REQUESTED = 1333;

const int ERROR_LUIDS_EXHAUSTED = 1334;

const int ERROR_INVALID_SUB_AUTHORITY = 1335;

const int ERROR_INVALID_ACL = 1336;

const int ERROR_INVALID_SID = 1337;

const int ERROR_INVALID_SECURITY_DESCR = 1338;

const int ERROR_BAD_INHERITANCE_ACL = 1340;

const int ERROR_SERVER_DISABLED = 1341;

const int ERROR_SERVER_NOT_DISABLED = 1342;

const int ERROR_INVALID_ID_AUTHORITY = 1343;

const int ERROR_ALLOTTED_SPACE_EXCEEDED = 1344;

const int ERROR_INVALID_GROUP_ATTRIBUTES = 1345;

const int ERROR_BAD_IMPERSONATION_LEVEL = 1346;

const int ERROR_CANT_OPEN_ANONYMOUS = 1347;

const int ERROR_BAD_VALIDATION_CLASS = 1348;

const int ERROR_BAD_TOKEN_TYPE = 1349;

const int ERROR_NO_SECURITY_ON_OBJECT = 1350;

const int ERROR_CANT_ACCESS_DOMAIN_INFO = 1351;

const int ERROR_INVALID_SERVER_STATE = 1352;

const int ERROR_INVALID_DOMAIN_STATE = 1353;

const int ERROR_INVALID_DOMAIN_ROLE = 1354;

const int ERROR_NO_SUCH_DOMAIN = 1355;

const int ERROR_DOMAIN_EXISTS = 1356;

const int ERROR_DOMAIN_LIMIT_EXCEEDED = 1357;

const int ERROR_INTERNAL_DB_CORRUPTION = 1358;

const int ERROR_INTERNAL_ERROR = 1359;

const int ERROR_GENERIC_NOT_MAPPED = 1360;

const int ERROR_BAD_DESCRIPTOR_FORMAT = 1361;

const int ERROR_NOT_LOGON_PROCESS = 1362;

const int ERROR_LOGON_SESSION_EXISTS = 1363;

const int ERROR_NO_SUCH_PACKAGE = 1364;

const int ERROR_BAD_LOGON_SESSION_STATE = 1365;

const int ERROR_LOGON_SESSION_COLLISION = 1366;

const int ERROR_INVALID_LOGON_TYPE = 1367;

const int ERROR_CANNOT_IMPERSONATE = 1368;

const int ERROR_RXACT_INVALID_STATE = 1369;

const int ERROR_RXACT_COMMIT_FAILURE = 1370;

const int ERROR_SPECIAL_ACCOUNT = 1371;

const int ERROR_SPECIAL_GROUP = 1372;

const int ERROR_SPECIAL_USER = 1373;

const int ERROR_MEMBERS_PRIMARY_GROUP = 1374;

const int ERROR_TOKEN_ALREADY_IN_USE = 1375;

const int ERROR_NO_SUCH_ALIAS = 1376;

const int ERROR_MEMBER_NOT_IN_ALIAS = 1377;

const int ERROR_MEMBER_IN_ALIAS = 1378;

const int ERROR_ALIAS_EXISTS = 1379;

const int ERROR_LOGON_NOT_GRANTED = 1380;

const int ERROR_TOO_MANY_SECRETS = 1381;

const int ERROR_SECRET_TOO_LONG = 1382;

const int ERROR_INTERNAL_DB_ERROR = 1383;

const int ERROR_TOO_MANY_CONTEXT_IDS = 1384;

const int ERROR_LOGON_TYPE_NOT_GRANTED = 1385;

const int ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 1386;

const int ERROR_NO_SUCH_MEMBER = 1387;

const int ERROR_INVALID_MEMBER = 1388;

const int ERROR_TOO_MANY_SIDS = 1389;

const int ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 1390;

const int ERROR_NO_INHERITANCE = 1391;

const int ERROR_FILE_CORRUPT = 1392;

const int ERROR_DISK_CORRUPT = 1393;

const int ERROR_NO_USER_SESSION_KEY = 1394;

const int ERROR_LICENSE_QUOTA_EXCEEDED = 1395;

const int ERROR_WRONG_TARGET_NAME = 1396;

const int ERROR_MUTUAL_AUTH_FAILED = 1397;

const int ERROR_TIME_SKEW = 1398;

const int ERROR_CURRENT_DOMAIN_NOT_ALLOWED = 1399;

const int ERROR_INVALID_WINDOW_HANDLE = 1400;

const int ERROR_INVALID_MENU_HANDLE = 1401;

const int ERROR_INVALID_CURSOR_HANDLE = 1402;

const int ERROR_INVALID_ACCEL_HANDLE = 1403;

const int ERROR_INVALID_HOOK_HANDLE = 1404;

const int ERROR_INVALID_DWP_HANDLE = 1405;

const int ERROR_TLW_WITH_WSCHILD = 1406;

const int ERROR_CANNOT_FIND_WND_CLASS = 1407;

const int ERROR_WINDOW_OF_OTHER_THREAD = 1408;

const int ERROR_HOTKEY_ALREADY_REGISTERED = 1409;

const int ERROR_CLASS_ALREADY_EXISTS = 1410;

const int ERROR_CLASS_DOES_NOT_EXIST = 1411;

const int ERROR_CLASS_HAS_WINDOWS = 1412;

const int ERROR_INVALID_INDEX = 1413;

const int ERROR_INVALID_ICON_HANDLE = 1414;

const int ERROR_PRIVATE_DIALOG_INDEX = 1415;

const int ERROR_LISTBOX_ID_NOT_FOUND = 1416;

const int ERROR_NO_WILDCARD_CHARACTERS = 1417;

const int ERROR_CLIPBOARD_NOT_OPEN = 1418;

const int ERROR_HOTKEY_NOT_REGISTERED = 1419;

const int ERROR_WINDOW_NOT_DIALOG = 1420;

const int ERROR_CONTROL_ID_NOT_FOUND = 1421;

const int ERROR_INVALID_COMBOBOX_MESSAGE = 1422;

const int ERROR_WINDOW_NOT_COMBOBOX = 1423;

const int ERROR_INVALID_EDIT_HEIGHT = 1424;

const int ERROR_DC_NOT_FOUND = 1425;

const int ERROR_INVALID_HOOK_FILTER = 1426;

const int ERROR_INVALID_FILTER_PROC = 1427;

const int ERROR_HOOK_NEEDS_HMOD = 1428;

const int ERROR_GLOBAL_ONLY_HOOK = 1429;

const int ERROR_JOURNAL_HOOK_SET = 1430;

const int ERROR_HOOK_NOT_INSTALLED = 1431;

const int ERROR_INVALID_LB_MESSAGE = 1432;

const int ERROR_SETCOUNT_ON_BAD_LB = 1433;

const int ERROR_LB_WITHOUT_TABSTOPS = 1434;

const int ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 1435;

const int ERROR_CHILD_WINDOW_MENU = 1436;

const int ERROR_NO_SYSTEM_MENU = 1437;

const int ERROR_INVALID_MSGBOX_STYLE = 1438;

const int ERROR_INVALID_SPI_VALUE = 1439;

const int ERROR_SCREEN_ALREADY_LOCKED = 1440;

const int ERROR_HWNDS_HAVE_DIFF_PARENT = 1441;

const int ERROR_NOT_CHILD_WINDOW = 1442;

const int ERROR_INVALID_GW_COMMAND = 1443;

const int ERROR_INVALID_THREAD_ID = 1444;

const int ERROR_NON_MDICHILD_WINDOW = 1445;

const int ERROR_POPUP_ALREADY_ACTIVE = 1446;

const int ERROR_NO_SCROLLBARS = 1447;

const int ERROR_INVALID_SCROLLBAR_RANGE = 1448;

const int ERROR_INVALID_SHOWWIN_COMMAND = 1449;

const int ERROR_NO_SYSTEM_RESOURCES = 1450;

const int ERROR_NONPAGED_SYSTEM_RESOURCES = 1451;

const int ERROR_PAGED_SYSTEM_RESOURCES = 1452;

const int ERROR_WORKING_SET_QUOTA = 1453;

const int ERROR_PAGEFILE_QUOTA = 1454;

const int ERROR_COMMITMENT_LIMIT = 1455;

const int ERROR_MENU_ITEM_NOT_FOUND = 1456;

const int ERROR_INVALID_KEYBOARD_HANDLE = 1457;

const int ERROR_HOOK_TYPE_NOT_ALLOWED = 1458;

const int ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 1459;

const int ERROR_TIMEOUT = 1460;

const int ERROR_INVALID_MONITOR_HANDLE = 1461;

const int ERROR_INCORRECT_SIZE = 1462;

const int ERROR_SYMLINK_CLASS_DISABLED = 1463;

const int ERROR_SYMLINK_NOT_SUPPORTED = 1464;

const int ERROR_XML_PARSE_ERROR = 1465;

const int ERROR_XMLDSIG_ERROR = 1466;

const int ERROR_RESTART_APPLICATION = 1467;

const int ERROR_WRONG_COMPARTMENT = 1468;

const int ERROR_AUTHIP_FAILURE = 1469;

const int ERROR_NO_NVRAM_RESOURCES = 1470;

const int ERROR_NOT_GUI_PROCESS = 1471;

const int ERROR_EVENTLOG_FILE_CORRUPT = 1500;

const int ERROR_EVENTLOG_CANT_START = 1501;

const int ERROR_LOG_FILE_FULL = 1502;

const int ERROR_EVENTLOG_FILE_CHANGED = 1503;

const int ERROR_CONTAINER_ASSIGNED = 1504;

const int ERROR_JOB_NO_CONTAINER = 1505;

const int ERROR_INVALID_TASK_NAME = 1550;

const int ERROR_INVALID_TASK_INDEX = 1551;

const int ERROR_THREAD_ALREADY_IN_TASK = 1552;

const int ERROR_INSTALL_SERVICE_FAILURE = 1601;

const int ERROR_INSTALL_USEREXIT = 1602;

const int ERROR_INSTALL_FAILURE = 1603;

const int ERROR_INSTALL_SUSPEND = 1604;

const int ERROR_UNKNOWN_PRODUCT = 1605;

const int ERROR_UNKNOWN_FEATURE = 1606;

const int ERROR_UNKNOWN_COMPONENT = 1607;

const int ERROR_UNKNOWN_PROPERTY = 1608;

const int ERROR_INVALID_HANDLE_STATE = 1609;

const int ERROR_BAD_CONFIGURATION = 1610;

const int ERROR_INDEX_ABSENT = 1611;

const int ERROR_INSTALL_SOURCE_ABSENT = 1612;

const int ERROR_INSTALL_PACKAGE_VERSION = 1613;

const int ERROR_PRODUCT_UNINSTALLED = 1614;

const int ERROR_BAD_QUERY_SYNTAX = 1615;

const int ERROR_INVALID_FIELD = 1616;

const int ERROR_DEVICE_REMOVED = 1617;

const int ERROR_INSTALL_ALREADY_RUNNING = 1618;

const int ERROR_INSTALL_PACKAGE_OPEN_FAILED = 1619;

const int ERROR_INSTALL_PACKAGE_INVALID = 1620;

const int ERROR_INSTALL_UI_FAILURE = 1621;

const int ERROR_INSTALL_LOG_FAILURE = 1622;

const int ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 1623;

const int ERROR_INSTALL_TRANSFORM_FAILURE = 1624;

const int ERROR_INSTALL_PACKAGE_REJECTED = 1625;

const int ERROR_FUNCTION_NOT_CALLED = 1626;

const int ERROR_FUNCTION_FAILED = 1627;

const int ERROR_INVALID_TABLE = 1628;

const int ERROR_DATATYPE_MISMATCH = 1629;

const int ERROR_UNSUPPORTED_TYPE = 1630;

const int ERROR_CREATE_FAILED = 1631;

const int ERROR_INSTALL_TEMP_UNWRITABLE = 1632;

const int ERROR_INSTALL_PLATFORM_UNSUPPORTED = 1633;

const int ERROR_INSTALL_NOTUSED = 1634;

const int ERROR_PATCH_PACKAGE_OPEN_FAILED = 1635;

const int ERROR_PATCH_PACKAGE_INVALID = 1636;

const int ERROR_PATCH_PACKAGE_UNSUPPORTED = 1637;

const int ERROR_PRODUCT_VERSION = 1638;

const int ERROR_INVALID_COMMAND_LINE = 1639;

const int ERROR_INSTALL_REMOTE_DISALLOWED = 1640;

const int ERROR_SUCCESS_REBOOT_INITIATED = 1641;

const int ERROR_PATCH_TARGET_NOT_FOUND = 1642;

const int ERROR_PATCH_PACKAGE_REJECTED = 1643;

const int ERROR_INSTALL_TRANSFORM_REJECTED = 1644;

const int ERROR_INSTALL_REMOTE_PROHIBITED = 1645;

const int ERROR_PATCH_REMOVAL_UNSUPPORTED = 1646;

const int ERROR_UNKNOWN_PATCH = 1647;

const int ERROR_PATCH_NO_SEQUENCE = 1648;

const int ERROR_PATCH_REMOVAL_DISALLOWED = 1649;

const int ERROR_INVALID_PATCH_XML = 1650;

const int ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = 1651;

const int ERROR_INSTALL_SERVICE_SAFEBOOT = 1652;

const int ERROR_FAIL_FAST_EXCEPTION = 1653;

const int ERROR_INSTALL_REJECTED = 1654;

const int ERROR_DYNAMIC_CODE_BLOCKED = 1655;

const int ERROR_NOT_SAME_OBJECT = 1656;

const int ERROR_STRICT_CFG_VIOLATION = 1657;

const int ERROR_SET_CONTEXT_DENIED = 1660;

const int ERROR_CROSS_PARTITION_VIOLATION = 1661;

const int ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT = 1662;

const int RPC_S_INVALID_STRING_BINDING = 1700;

const int RPC_S_WRONG_KIND_OF_BINDING = 1701;

const int RPC_S_INVALID_BINDING = 1702;

const int RPC_S_PROTSEQ_NOT_SUPPORTED = 1703;

const int RPC_S_INVALID_RPC_PROTSEQ = 1704;

const int RPC_S_INVALID_STRING_UUID = 1705;

const int RPC_S_INVALID_ENDPOINT_FORMAT = 1706;

const int RPC_S_INVALID_NET_ADDR = 1707;

const int RPC_S_NO_ENDPOINT_FOUND = 1708;

const int RPC_S_INVALID_TIMEOUT = 1709;

const int RPC_S_OBJECT_NOT_FOUND = 1710;

const int RPC_S_ALREADY_REGISTERED = 1711;

const int RPC_S_TYPE_ALREADY_REGISTERED = 1712;

const int RPC_S_ALREADY_LISTENING = 1713;

const int RPC_S_NO_PROTSEQS_REGISTERED = 1714;

const int RPC_S_NOT_LISTENING = 1715;

const int RPC_S_UNKNOWN_MGR_TYPE = 1716;

const int RPC_S_UNKNOWN_IF = 1717;

const int RPC_S_NO_BINDINGS = 1718;

const int RPC_S_NO_PROTSEQS = 1719;

const int RPC_S_CANT_CREATE_ENDPOINT = 1720;

const int RPC_S_OUT_OF_RESOURCES = 1721;

const int RPC_S_SERVER_UNAVAILABLE = 1722;

const int RPC_S_SERVER_TOO_BUSY = 1723;

const int RPC_S_INVALID_NETWORK_OPTIONS = 1724;

const int RPC_S_NO_CALL_ACTIVE = 1725;

const int RPC_S_CALL_FAILED = 1726;

const int RPC_S_CALL_FAILED_DNE = 1727;

const int RPC_S_PROTOCOL_ERROR = 1728;

const int RPC_S_PROXY_ACCESS_DENIED = 1729;

const int RPC_S_UNSUPPORTED_TRANS_SYN = 1730;

const int RPC_S_UNSUPPORTED_TYPE = 1732;

const int RPC_S_INVALID_TAG = 1733;

const int RPC_S_INVALID_BOUND = 1734;

const int RPC_S_NO_ENTRY_NAME = 1735;

const int RPC_S_INVALID_NAME_SYNTAX = 1736;

const int RPC_S_UNSUPPORTED_NAME_SYNTAX = 1737;

const int RPC_S_UUID_NO_ADDRESS = 1739;

const int RPC_S_DUPLICATE_ENDPOINT = 1740;

const int RPC_S_UNKNOWN_AUTHN_TYPE = 1741;

const int RPC_S_MAX_CALLS_TOO_SMALL = 1742;

const int RPC_S_STRING_TOO_LONG = 1743;

const int RPC_S_PROTSEQ_NOT_FOUND = 1744;

const int RPC_S_PROCNUM_OUT_OF_RANGE = 1745;

const int RPC_S_BINDING_HAS_NO_AUTH = 1746;

const int RPC_S_UNKNOWN_AUTHN_SERVICE = 1747;

const int RPC_S_UNKNOWN_AUTHN_LEVEL = 1748;

const int RPC_S_INVALID_AUTH_IDENTITY = 1749;

const int RPC_S_UNKNOWN_AUTHZ_SERVICE = 1750;

const int EPT_S_INVALID_ENTRY = 1751;

const int EPT_S_CANT_PERFORM_OP = 1752;

const int EPT_S_NOT_REGISTERED = 1753;

const int RPC_S_NOTHING_TO_EXPORT = 1754;

const int RPC_S_INCOMPLETE_NAME = 1755;

const int RPC_S_INVALID_VERS_OPTION = 1756;

const int RPC_S_NO_MORE_MEMBERS = 1757;

const int RPC_S_NOT_ALL_OBJS_UNEXPORTED = 1758;

const int RPC_S_INTERFACE_NOT_FOUND = 1759;

const int RPC_S_ENTRY_ALREADY_EXISTS = 1760;

const int RPC_S_ENTRY_NOT_FOUND = 1761;

const int RPC_S_NAME_SERVICE_UNAVAILABLE = 1762;

const int RPC_S_INVALID_NAF_ID = 1763;

const int RPC_S_CANNOT_SUPPORT = 1764;

const int RPC_S_NO_CONTEXT_AVAILABLE = 1765;

const int RPC_S_INTERNAL_ERROR = 1766;

const int RPC_S_ZERO_DIVIDE = 1767;

const int RPC_S_ADDRESS_ERROR = 1768;

const int RPC_S_FP_DIV_ZERO = 1769;

const int RPC_S_FP_UNDERFLOW = 1770;

const int RPC_S_FP_OVERFLOW = 1771;

const int RPC_X_NO_MORE_ENTRIES = 1772;

const int RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 1773;

const int RPC_X_SS_CHAR_TRANS_SHORT_FILE = 1774;

const int RPC_X_SS_IN_NULL_CONTEXT = 1775;

const int RPC_X_SS_CONTEXT_DAMAGED = 1777;

const int RPC_X_SS_HANDLES_MISMATCH = 1778;

const int RPC_X_SS_CANNOT_GET_CALL_HANDLE = 1779;

const int RPC_X_NULL_REF_POINTER = 1780;

const int RPC_X_ENUM_VALUE_OUT_OF_RANGE = 1781;

const int RPC_X_BYTE_COUNT_TOO_SMALL = 1782;

const int RPC_X_BAD_STUB_DATA = 1783;

const int ERROR_INVALID_USER_BUFFER = 1784;

const int ERROR_UNRECOGNIZED_MEDIA = 1785;

const int ERROR_NO_TRUST_LSA_SECRET = 1786;

const int ERROR_NO_TRUST_SAM_ACCOUNT = 1787;

const int ERROR_TRUSTED_DOMAIN_FAILURE = 1788;

const int ERROR_TRUSTED_RELATIONSHIP_FAILURE = 1789;

const int ERROR_TRUST_FAILURE = 1790;

const int RPC_S_CALL_IN_PROGRESS = 1791;

const int ERROR_NETLOGON_NOT_STARTED = 1792;

const int ERROR_ACCOUNT_EXPIRED = 1793;

const int ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 1794;

const int ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 1795;

const int ERROR_UNKNOWN_PORT = 1796;

const int ERROR_UNKNOWN_PRINTER_DRIVER = 1797;

const int ERROR_UNKNOWN_PRINTPROCESSOR = 1798;

const int ERROR_INVALID_SEPARATOR_FILE = 1799;

const int ERROR_INVALID_PRIORITY = 1800;

const int ERROR_INVALID_PRINTER_NAME = 1801;

const int ERROR_PRINTER_ALREADY_EXISTS = 1802;

const int ERROR_INVALID_PRINTER_COMMAND = 1803;

const int ERROR_INVALID_DATATYPE = 1804;

const int ERROR_INVALID_ENVIRONMENT = 1805;

const int RPC_S_NO_MORE_BINDINGS = 1806;

const int ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 1807;

const int ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 1808;

const int ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 1809;

const int ERROR_DOMAIN_TRUST_INCONSISTENT = 1810;

const int ERROR_SERVER_HAS_OPEN_HANDLES = 1811;

const int ERROR_RESOURCE_DATA_NOT_FOUND = 1812;

const int ERROR_RESOURCE_TYPE_NOT_FOUND = 1813;

const int ERROR_RESOURCE_NAME_NOT_FOUND = 1814;

const int ERROR_RESOURCE_LANG_NOT_FOUND = 1815;

const int ERROR_NOT_ENOUGH_QUOTA = 1816;

const int RPC_S_NO_INTERFACES = 1817;

const int RPC_S_CALL_CANCELLED = 1818;

const int RPC_S_BINDING_INCOMPLETE = 1819;

const int RPC_S_COMM_FAILURE = 1820;

const int RPC_S_UNSUPPORTED_AUTHN_LEVEL = 1821;

const int RPC_S_NO_PRINC_NAME = 1822;

const int RPC_S_NOT_RPC_ERROR = 1823;

const int RPC_S_UUID_LOCAL_ONLY = 1824;

const int RPC_S_SEC_PKG_ERROR = 1825;

const int RPC_S_NOT_CANCELLED = 1826;

const int RPC_X_INVALID_ES_ACTION = 1827;

const int RPC_X_WRONG_ES_VERSION = 1828;

const int RPC_X_WRONG_STUB_VERSION = 1829;

const int RPC_X_INVALID_PIPE_OBJECT = 1830;

const int RPC_X_WRONG_PIPE_ORDER = 1831;

const int RPC_X_WRONG_PIPE_VERSION = 1832;

const int RPC_S_COOKIE_AUTH_FAILED = 1833;

const int RPC_S_DO_NOT_DISTURB = 1834;

const int RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = 1835;

const int RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = 1836;

const int RPC_S_GROUP_MEMBER_NOT_FOUND = 1898;

const int EPT_S_CANT_CREATE = 1899;

const int RPC_S_INVALID_OBJECT = 1900;

const int ERROR_INVALID_TIME = 1901;

const int ERROR_INVALID_FORM_NAME = 1902;

const int ERROR_INVALID_FORM_SIZE = 1903;

const int ERROR_ALREADY_WAITING = 1904;

const int ERROR_PRINTER_DELETED = 1905;

const int ERROR_INVALID_PRINTER_STATE = 1906;

const int ERROR_PASSWORD_MUST_CHANGE = 1907;

const int ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 1908;

const int ERROR_ACCOUNT_LOCKED_OUT = 1909;

const int OR_INVALID_OXID = 1910;

const int OR_INVALID_OID = 1911;

const int OR_INVALID_SET = 1912;

const int RPC_S_SEND_INCOMPLETE = 1913;

const int RPC_S_INVALID_ASYNC_HANDLE = 1914;

const int RPC_S_INVALID_ASYNC_CALL = 1915;

const int RPC_X_PIPE_CLOSED = 1916;

const int RPC_X_PIPE_DISCIPLINE_ERROR = 1917;

const int RPC_X_PIPE_EMPTY = 1918;

const int ERROR_NO_SITENAME = 1919;

const int ERROR_CANT_ACCESS_FILE = 1920;

const int ERROR_CANT_RESOLVE_FILENAME = 1921;

const int RPC_S_ENTRY_TYPE_MISMATCH = 1922;

const int RPC_S_NOT_ALL_OBJS_EXPORTED = 1923;

const int RPC_S_INTERFACE_NOT_EXPORTED = 1924;

const int RPC_S_PROFILE_NOT_ADDED = 1925;

const int RPC_S_PRF_ELT_NOT_ADDED = 1926;

const int RPC_S_PRF_ELT_NOT_REMOVED = 1927;

const int RPC_S_GRP_ELT_NOT_ADDED = 1928;

const int RPC_S_GRP_ELT_NOT_REMOVED = 1929;

const int ERROR_KM_DRIVER_BLOCKED = 1930;

const int ERROR_CONTEXT_EXPIRED = 1931;

const int ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = 1932;

const int ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = 1933;

const int ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = 1934;

const int ERROR_AUTHENTICATION_FIREWALL_FAILED = 1935;

const int ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = 1936;

const int ERROR_NTLM_BLOCKED = 1937;

const int ERROR_PASSWORD_CHANGE_REQUIRED = 1938;

const int ERROR_LOST_MODE_LOGON_RESTRICTION = 1939;

const int ERROR_INVALID_PIXEL_FORMAT = 2000;

const int ERROR_BAD_DRIVER = 2001;

const int ERROR_INVALID_WINDOW_STYLE = 2002;

const int ERROR_METAFILE_NOT_SUPPORTED = 2003;

const int ERROR_TRANSFORM_NOT_SUPPORTED = 2004;

const int ERROR_CLIPPING_NOT_SUPPORTED = 2005;

const int ERROR_INVALID_CMM = 2010;

const int ERROR_INVALID_PROFILE = 2011;

const int ERROR_TAG_NOT_FOUND = 2012;

const int ERROR_TAG_NOT_PRESENT = 2013;

const int ERROR_DUPLICATE_TAG = 2014;

const int ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 2015;

const int ERROR_PROFILE_NOT_FOUND = 2016;

const int ERROR_INVALID_COLORSPACE = 2017;

const int ERROR_ICM_NOT_ENABLED = 2018;

const int ERROR_DELETING_ICM_XFORM = 2019;

const int ERROR_INVALID_TRANSFORM = 2020;

const int ERROR_COLORSPACE_MISMATCH = 2021;

const int ERROR_INVALID_COLORINDEX = 2022;

const int ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = 2023;

const int ERROR_CONNECTED_OTHER_PASSWORD = 2108;

const int ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int ERROR_BAD_USERNAME = 2202;

const int ERROR_NOT_CONNECTED = 2250;

const int ERROR_OPEN_FILES = 2401;

const int ERROR_ACTIVE_CONNECTIONS = 2402;

const int ERROR_DEVICE_IN_USE = 2404;

const int ERROR_UNKNOWN_PRINT_MONITOR = 3000;

const int ERROR_PRINTER_DRIVER_IN_USE = 3001;

const int ERROR_SPOOL_FILE_NOT_FOUND = 3002;

const int ERROR_SPL_NO_STARTDOC = 3003;

const int ERROR_SPL_NO_ADDJOB = 3004;

const int ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 3005;

const int ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 3006;

const int ERROR_INVALID_PRINT_MONITOR = 3007;

const int ERROR_PRINT_MONITOR_IN_USE = 3008;

const int ERROR_PRINTER_HAS_JOBS_QUEUED = 3009;

const int ERROR_SUCCESS_REBOOT_REQUIRED = 3010;

const int ERROR_SUCCESS_RESTART_REQUIRED = 3011;

const int ERROR_PRINTER_NOT_FOUND = 3012;

const int ERROR_PRINTER_DRIVER_WARNED = 3013;

const int ERROR_PRINTER_DRIVER_BLOCKED = 3014;

const int ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = 3015;

const int ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = 3016;

const int ERROR_FAIL_REBOOT_REQUIRED = 3017;

const int ERROR_FAIL_REBOOT_INITIATED = 3018;

const int ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = 3019;

const int ERROR_PRINT_JOB_RESTART_REQUIRED = 3020;

const int ERROR_INVALID_PRINTER_DRIVER_MANIFEST = 3021;

const int ERROR_PRINTER_NOT_SHAREABLE = 3022;

const int ERROR_SERVER_SERVICE_CALL_REQUIRES_SMB1 = 3023;

const int ERROR_NETWORK_AUTHENTICATION_PROMPT_CANCELED = 3024;

const int ERROR_REQUEST_PAUSED = 3050;

const int ERROR_APPEXEC_CONDITION_NOT_SATISFIED = 3060;

const int ERROR_APPEXEC_HANDLE_INVALIDATED = 3061;

const int ERROR_APPEXEC_INVALID_HOST_GENERATION = 3062;

const int ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = 3063;

const int ERROR_APPEXEC_INVALID_HOST_STATE = 3064;

const int ERROR_APPEXEC_NO_DONOR = 3065;

const int ERROR_APPEXEC_HOST_ID_MISMATCH = 3066;

const int ERROR_APPEXEC_UNKNOWN_USER = 3067;

const int ERROR_APPEXEC_APP_COMPAT_BLOCK = 3068;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT = 3069;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION = 3070;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING = 3071;

const int ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES = 3072;

const int ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED = 3080;

const int ERROR_VRF_VOLATILE_NOT_STOPPABLE = 3081;

const int ERROR_VRF_VOLATILE_SAFE_MODE = 3082;

const int ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM = 3083;

const int ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS = 3084;

const int ERROR_VRF_VOLATILE_PROTECTED_DRIVER = 3085;

const int ERROR_VRF_VOLATILE_NMI_REGISTERED = 3086;

const int ERROR_VRF_VOLATILE_SETTINGS_CONFLICT = 3087;

const int ERROR_DIF_IOCALLBACK_NOT_REPLACED = 3190;

const int ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED = 3191;

const int ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED = 3192;

const int ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED = 3193;

const int ERROR_DIF_VOLATILE_INVALID_INFO = 3194;

const int ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING = 3195;

const int ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING = 3196;

const int ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED = 3197;

const int ERROR_DIF_VOLATILE_NOT_ALLOWED = 3198;

const int ERROR_DIF_BINDING_API_NOT_FOUND = 3199;

const int ERROR_IO_REISSUE_AS_CACHED = 3950;

const int ERROR_WINS_INTERNAL = 4000;

const int ERROR_CAN_NOT_DEL_LOCAL_WINS = 4001;

const int ERROR_STATIC_INIT = 4002;

const int ERROR_INC_BACKUP = 4003;

const int ERROR_FULL_BACKUP = 4004;

const int ERROR_REC_NON_EXISTENT = 4005;

const int ERROR_RPL_NOT_ALLOWED = 4006;

const int PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = 4050;

const int PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = 4051;

const int PEERDIST_ERROR_MISSING_DATA = 4052;

const int PEERDIST_ERROR_NO_MORE = 4053;

const int PEERDIST_ERROR_NOT_INITIALIZED = 4054;

const int PEERDIST_ERROR_ALREADY_INITIALIZED = 4055;

const int PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = 4056;

const int PEERDIST_ERROR_INVALIDATED = 4057;

const int PEERDIST_ERROR_ALREADY_EXISTS = 4058;

const int PEERDIST_ERROR_OPERATION_NOTFOUND = 4059;

const int PEERDIST_ERROR_ALREADY_COMPLETED = 4060;

const int PEERDIST_ERROR_OUT_OF_BOUNDS = 4061;

const int PEERDIST_ERROR_VERSION_UNSUPPORTED = 4062;

const int PEERDIST_ERROR_INVALID_CONFIGURATION = 4063;

const int PEERDIST_ERROR_NOT_LICENSED = 4064;

const int PEERDIST_ERROR_SERVICE_UNAVAILABLE = 4065;

const int PEERDIST_ERROR_TRUST_FAILURE = 4066;

const int ERROR_DHCP_ADDRESS_CONFLICT = 4100;

const int ERROR_WMI_GUID_NOT_FOUND = 4200;

const int ERROR_WMI_INSTANCE_NOT_FOUND = 4201;

const int ERROR_WMI_ITEMID_NOT_FOUND = 4202;

const int ERROR_WMI_TRY_AGAIN = 4203;

const int ERROR_WMI_DP_NOT_FOUND = 4204;

const int ERROR_WMI_UNRESOLVED_INSTANCE_REF = 4205;

const int ERROR_WMI_ALREADY_ENABLED = 4206;

const int ERROR_WMI_GUID_DISCONNECTED = 4207;

const int ERROR_WMI_SERVER_UNAVAILABLE = 4208;

const int ERROR_WMI_DP_FAILED = 4209;

const int ERROR_WMI_INVALID_MOF = 4210;

const int ERROR_WMI_INVALID_REGINFO = 4211;

const int ERROR_WMI_ALREADY_DISABLED = 4212;

const int ERROR_WMI_READ_ONLY = 4213;

const int ERROR_WMI_SET_FAILURE = 4214;

const int ERROR_NOT_APPCONTAINER = 4250;

const int ERROR_APPCONTAINER_REQUIRED = 4251;

const int ERROR_NOT_SUPPORTED_IN_APPCONTAINER = 4252;

const int ERROR_INVALID_PACKAGE_SID_LENGTH = 4253;

const int ERROR_INVALID_MEDIA = 4300;

const int ERROR_INVALID_LIBRARY = 4301;

const int ERROR_INVALID_MEDIA_POOL = 4302;

const int ERROR_DRIVE_MEDIA_MISMATCH = 4303;

const int ERROR_MEDIA_OFFLINE = 4304;

const int ERROR_LIBRARY_OFFLINE = 4305;

const int ERROR_EMPTY = 4306;

const int ERROR_NOT_EMPTY = 4307;

const int ERROR_MEDIA_UNAVAILABLE = 4308;

const int ERROR_RESOURCE_DISABLED = 4309;

const int ERROR_INVALID_CLEANER = 4310;

const int ERROR_UNABLE_TO_CLEAN = 4311;

const int ERROR_OBJECT_NOT_FOUND = 4312;

const int ERROR_DATABASE_FAILURE = 4313;

const int ERROR_DATABASE_FULL = 4314;

const int ERROR_MEDIA_INCOMPATIBLE = 4315;

const int ERROR_RESOURCE_NOT_PRESENT = 4316;

const int ERROR_INVALID_OPERATION = 4317;

const int ERROR_MEDIA_NOT_AVAILABLE = 4318;

const int ERROR_DEVICE_NOT_AVAILABLE = 4319;

const int ERROR_REQUEST_REFUSED = 4320;

const int ERROR_INVALID_DRIVE_OBJECT = 4321;

const int ERROR_LIBRARY_FULL = 4322;

const int ERROR_MEDIUM_NOT_ACCESSIBLE = 4323;

const int ERROR_UNABLE_TO_LOAD_MEDIUM = 4324;

const int ERROR_UNABLE_TO_INVENTORY_DRIVE = 4325;

const int ERROR_UNABLE_TO_INVENTORY_SLOT = 4326;

const int ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 4327;

const int ERROR_TRANSPORT_FULL = 4328;

const int ERROR_CONTROLLING_IEPORT = 4329;

const int ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 4330;

const int ERROR_CLEANER_SLOT_SET = 4331;

const int ERROR_CLEANER_SLOT_NOT_SET = 4332;

const int ERROR_CLEANER_CARTRIDGE_SPENT = 4333;

const int ERROR_UNEXPECTED_OMID = 4334;

const int ERROR_CANT_DELETE_LAST_ITEM = 4335;

const int ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 4336;

const int ERROR_VOLUME_CONTAINS_SYS_FILES = 4337;

const int ERROR_INDIGENOUS_TYPE = 4338;

const int ERROR_NO_SUPPORTING_DRIVES = 4339;

const int ERROR_CLEANER_CARTRIDGE_INSTALLED = 4340;

const int ERROR_IEPORT_FULL = 4341;

const int ERROR_FILE_OFFLINE = 4350;

const int ERROR_REMOTE_STORAGE_NOT_ACTIVE = 4351;

const int ERROR_REMOTE_STORAGE_MEDIA_ERROR = 4352;

const int ERROR_NOT_A_REPARSE_POINT = 4390;

const int ERROR_REPARSE_ATTRIBUTE_CONFLICT = 4391;

const int ERROR_INVALID_REPARSE_DATA = 4392;

const int ERROR_REPARSE_TAG_INVALID = 4393;

const int ERROR_REPARSE_TAG_MISMATCH = 4394;

const int ERROR_REPARSE_POINT_ENCOUNTERED = 4395;

const int ERROR_APP_DATA_NOT_FOUND = 4400;

const int ERROR_APP_DATA_EXPIRED = 4401;

const int ERROR_APP_DATA_CORRUPT = 4402;

const int ERROR_APP_DATA_LIMIT_EXCEEDED = 4403;

const int ERROR_APP_DATA_REBOOT_REQUIRED = 4404;

const int ERROR_SECUREBOOT_ROLLBACK_DETECTED = 4420;

const int ERROR_SECUREBOOT_POLICY_VIOLATION = 4421;

const int ERROR_SECUREBOOT_INVALID_POLICY = 4422;

const int ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = 4423;

const int ERROR_SECUREBOOT_POLICY_NOT_SIGNED = 4424;

const int ERROR_SECUREBOOT_NOT_ENABLED = 4425;

const int ERROR_SECUREBOOT_FILE_REPLACED = 4426;

const int ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = 4427;

const int ERROR_SECUREBOOT_POLICY_UNKNOWN = 4428;

const int ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = 4429;

const int ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = 4430;

const int ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = 4431;

const int ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = 4432;

const int ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = 4433;

const int ERROR_SECUREBOOT_NOT_BASE_POLICY = 4434;

const int ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = 4435;

const int ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = 4440;

const int ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = 4441;

const int ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = 4442;

const int ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = 4443;

const int ERROR_ALREADY_HAS_STREAM_ID = 4444;

const int ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = 4445;

const int ERROR_WOF_WIM_HEADER_CORRUPT = 4446;

const int ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = 4447;

const int ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = 4448;

const int ERROR_OBJECT_IS_IMMUTABLE = 4449;

const int ERROR_VOLUME_NOT_SIS_ENABLED = 4500;

const int ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = 4550;

const int ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = 4551;

const int ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = 4552;

const int ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = 4553;

const int ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = 4554;

const int ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = 4555;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS = 4556;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA = 4557;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT = 4558;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE = 4559;

const int ERROR_VSM_NOT_INITIALIZED = 4560;

const int ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = 4561;

const int ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = 4570;

const int ERROR_PLATFORM_MANIFEST_INVALID = 4571;

const int ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = 4572;

const int ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = 4573;

const int ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = 4574;

const int ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = 4575;

const int ERROR_PLATFORM_MANIFEST_NOT_SIGNED = 4576;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_UNFRIENDLY_FILE = 4580;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_UNATTAINABLE = 4581;

const int ERROR_SYSTEM_INTEGRITY_REPUTATION_EXPLICIT_DENY_FILE = 4582;

const int ERROR_DEPENDENT_RESOURCE_EXISTS = 5001;

const int ERROR_DEPENDENCY_NOT_FOUND = 5002;

const int ERROR_DEPENDENCY_ALREADY_EXISTS = 5003;

const int ERROR_RESOURCE_NOT_ONLINE = 5004;

const int ERROR_HOST_NODE_NOT_AVAILABLE = 5005;

const int ERROR_RESOURCE_NOT_AVAILABLE = 5006;

const int ERROR_RESOURCE_NOT_FOUND = 5007;

const int ERROR_SHUTDOWN_CLUSTER = 5008;

const int ERROR_CANT_EVICT_ACTIVE_NODE = 5009;

const int ERROR_OBJECT_ALREADY_EXISTS = 5010;

const int ERROR_OBJECT_IN_LIST = 5011;

const int ERROR_GROUP_NOT_AVAILABLE = 5012;

const int ERROR_GROUP_NOT_FOUND = 5013;

const int ERROR_GROUP_NOT_ONLINE = 5014;

const int ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 5015;

const int ERROR_HOST_NODE_NOT_GROUP_OWNER = 5016;

const int ERROR_RESMON_CREATE_FAILED = 5017;

const int ERROR_RESMON_ONLINE_FAILED = 5018;

const int ERROR_RESOURCE_ONLINE = 5019;

const int ERROR_QUORUM_RESOURCE = 5020;

const int ERROR_NOT_QUORUM_CAPABLE = 5021;

const int ERROR_CLUSTER_SHUTTING_DOWN = 5022;

const int ERROR_INVALID_STATE = 5023;

const int ERROR_RESOURCE_PROPERTIES_STORED = 5024;

const int ERROR_NOT_QUORUM_CLASS = 5025;

const int ERROR_CORE_RESOURCE = 5026;

const int ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 5027;

const int ERROR_QUORUMLOG_OPEN_FAILED = 5028;

const int ERROR_CLUSTERLOG_CORRUPT = 5029;

const int ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 5030;

const int ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 5031;

const int ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 5032;

const int ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 5033;

const int ERROR_QUORUM_OWNER_ALIVE = 5034;

const int ERROR_NETWORK_NOT_AVAILABLE = 5035;

const int ERROR_NODE_NOT_AVAILABLE = 5036;

const int ERROR_ALL_NODES_NOT_AVAILABLE = 5037;

const int ERROR_RESOURCE_FAILED = 5038;

const int ERROR_CLUSTER_INVALID_NODE = 5039;

const int ERROR_CLUSTER_NODE_EXISTS = 5040;

const int ERROR_CLUSTER_JOIN_IN_PROGRESS = 5041;

const int ERROR_CLUSTER_NODE_NOT_FOUND = 5042;

const int ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 5043;

const int ERROR_CLUSTER_NETWORK_EXISTS = 5044;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND = 5045;

const int ERROR_CLUSTER_NETINTERFACE_EXISTS = 5046;

const int ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 5047;

const int ERROR_CLUSTER_INVALID_REQUEST = 5048;

const int ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 5049;

const int ERROR_CLUSTER_NODE_DOWN = 5050;

const int ERROR_CLUSTER_NODE_UNREACHABLE = 5051;

const int ERROR_CLUSTER_NODE_NOT_MEMBER = 5052;

const int ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 5053;

const int ERROR_CLUSTER_INVALID_NETWORK = 5054;

const int ERROR_CLUSTER_NODE_UP = 5056;

const int ERROR_CLUSTER_IPADDR_IN_USE = 5057;

const int ERROR_CLUSTER_NODE_NOT_PAUSED = 5058;

const int ERROR_CLUSTER_NO_SECURITY_CONTEXT = 5059;

const int ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 5060;

const int ERROR_CLUSTER_NODE_ALREADY_UP = 5061;

const int ERROR_CLUSTER_NODE_ALREADY_DOWN = 5062;

const int ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 5063;

const int ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 5064;

const int ERROR_CLUSTER_NODE_ALREADY_MEMBER = 5065;

const int ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 5066;

const int ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 5067;

const int ERROR_INVALID_OPERATION_ON_QUORUM = 5068;

const int ERROR_DEPENDENCY_NOT_ALLOWED = 5069;

const int ERROR_CLUSTER_NODE_PAUSED = 5070;

const int ERROR_NODE_CANT_HOST_RESOURCE = 5071;

const int ERROR_CLUSTER_NODE_NOT_READY = 5072;

const int ERROR_CLUSTER_NODE_SHUTTING_DOWN = 5073;

const int ERROR_CLUSTER_JOIN_ABORTED = 5074;

const int ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 5075;

const int ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 5076;

const int ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 5077;

const int ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 5078;

const int ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 5079;

const int ERROR_CLUSTER_RESNAME_NOT_FOUND = 5080;

const int ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 5081;

const int ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 5082;

const int ERROR_CLUSTER_DATABASE_SEQMISMATCH = 5083;

const int ERROR_RESMON_INVALID_STATE = 5084;

const int ERROR_CLUSTER_GUM_NOT_LOCKER = 5085;

const int ERROR_QUORUM_DISK_NOT_FOUND = 5086;

const int ERROR_DATABASE_BACKUP_CORRUPT = 5087;

const int ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 5088;

const int ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 5089;

const int ERROR_NO_ADMIN_ACCESS_POINT = 5090;

const int ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = 5890;

const int ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = 5891;

const int ERROR_CLUSTER_MEMBERSHIP_HALT = 5892;

const int ERROR_CLUSTER_INSTANCE_ID_MISMATCH = 5893;

const int ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = 5894;

const int ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = 5895;

const int ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = 5896;

const int ERROR_CLUSTER_PARAMETER_MISMATCH = 5897;

const int ERROR_NODE_CANNOT_BE_CLUSTERED = 5898;

const int ERROR_CLUSTER_WRONG_OS_VERSION = 5899;

const int ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = 5900;

const int ERROR_CLUSCFG_ALREADY_COMMITTED = 5901;

const int ERROR_CLUSCFG_ROLLBACK_FAILED = 5902;

const int ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = 5903;

const int ERROR_CLUSTER_OLD_VERSION = 5904;

const int ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = 5905;

const int ERROR_CLUSTER_NO_NET_ADAPTERS = 5906;

const int ERROR_CLUSTER_POISONED = 5907;

const int ERROR_CLUSTER_GROUP_MOVING = 5908;

const int ERROR_CLUSTER_RESOURCE_TYPE_BUSY = 5909;

const int ERROR_RESOURCE_CALL_TIMED_OUT = 5910;

const int ERROR_INVALID_CLUSTER_IPV6_ADDRESS = 5911;

const int ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = 5912;

const int ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = 5913;

const int ERROR_CLUSTER_PARTIAL_SEND = 5914;

const int ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = 5915;

const int ERROR_CLUSTER_INVALID_STRING_TERMINATION = 5916;

const int ERROR_CLUSTER_INVALID_STRING_FORMAT = 5917;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = 5918;

const int ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = 5919;

const int ERROR_CLUSTER_NULL_DATA = 5920;

const int ERROR_CLUSTER_PARTIAL_READ = 5921;

const int ERROR_CLUSTER_PARTIAL_WRITE = 5922;

const int ERROR_CLUSTER_CANT_DESERIALIZE_DATA = 5923;

const int ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = 5924;

const int ERROR_CLUSTER_NO_QUORUM = 5925;

const int ERROR_CLUSTER_INVALID_IPV6_NETWORK = 5926;

const int ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = 5927;

const int ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = 5928;

const int ERROR_DEPENDENCY_TREE_TOO_COMPLEX = 5929;

const int ERROR_EXCEPTION_IN_RESOURCE_CALL = 5930;

const int ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = 5931;

const int ERROR_CLUSTER_NOT_INSTALLED = 5932;

const int ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = 5933;

const int ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = 5934;

const int ERROR_CLUSTER_TOO_MANY_NODES = 5935;

const int ERROR_CLUSTER_OBJECT_ALREADY_USED = 5936;

const int ERROR_NONCORE_GROUPS_FOUND = 5937;

const int ERROR_FILE_SHARE_RESOURCE_CONFLICT = 5938;

const int ERROR_CLUSTER_EVICT_INVALID_REQUEST = 5939;

const int ERROR_CLUSTER_SINGLETON_RESOURCE = 5940;

const int ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = 5941;

const int ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = 5942;

const int ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = 5943;

const int ERROR_CLUSTER_GROUP_BUSY = 5944;

const int ERROR_CLUSTER_NOT_SHARED_VOLUME = 5945;

const int ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = 5946;

const int ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = 5947;

const int ERROR_CLUSTER_USE_SHARED_VOLUMES_API = 5948;

const int ERROR_CLUSTER_BACKUP_IN_PROGRESS = 5949;

const int ERROR_NON_CSV_PATH = 5950;

const int ERROR_CSV_VOLUME_NOT_LOCAL = 5951;

const int ERROR_CLUSTER_WATCHDOG_TERMINATING = 5952;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = 5953;

const int ERROR_CLUSTER_INVALID_NODE_WEIGHT = 5954;

const int ERROR_CLUSTER_RESOURCE_VETOED_CALL = 5955;

const int ERROR_RESMON_SYSTEM_RESOURCES_LACKING = 5956;

const int
    ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION =
    5957;

const int ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE =
    5958;

const int ERROR_CLUSTER_GROUP_QUEUED = 5959;

const int ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = 5960;

const int ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = 5961;

const int ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = 5962;

const int ERROR_CLUSTER_DISK_NOT_CONNECTED = 5963;

const int ERROR_DISK_NOT_CSV_CAPABLE = 5964;

const int ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = 5965;

const int ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = 5966;

const int ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = 5967;

const int ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = 5968;

const int
    ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES =
    5969;

const int ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = 5970;

const int ERROR_CLUSTER_AFFINITY_CONFLICT = 5971;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = 5972;

const int ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = 5973;

const int ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = 5974;

const int ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = 5975;

const int ERROR_CLUSTER_UPGRADE_IN_PROGRESS = 5976;

const int ERROR_CLUSTER_UPGRADE_INCOMPLETE = 5977;

const int ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = 5978;

const int ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = 5979;

const int ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = 5980;

const int ERROR_CLUSTER_RESOURCE_NOT_MONITORED = 5981;

const int ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = 5982;

const int ERROR_CLUSTER_RESOURCE_IS_REPLICATED = 5983;

const int ERROR_CLUSTER_NODE_ISOLATED = 5984;

const int ERROR_CLUSTER_NODE_QUARANTINED = 5985;

const int ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = 5986;

const int ERROR_CLUSTER_SPACE_DEGRADED = 5987;

const int ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = 5988;

const int ERROR_CLUSTER_CSV_INVALID_HANDLE = 5989;

const int ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = 5990;

const int ERROR_GROUPSET_NOT_AVAILABLE = 5991;

const int ERROR_GROUPSET_NOT_FOUND = 5992;

const int ERROR_GROUPSET_CANT_PROVIDE = 5993;

const int ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = 5994;

const int ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = 5995;

const int ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = 5996;

const int ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = 5997;

const int ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = 5998;

const int ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = 5999;

const int ERROR_ENCRYPTION_FAILED = 6000;

const int ERROR_DECRYPTION_FAILED = 6001;

const int ERROR_FILE_ENCRYPTED = 6002;

const int ERROR_NO_RECOVERY_POLICY = 6003;

const int ERROR_NO_EFS = 6004;

const int ERROR_WRONG_EFS = 6005;

const int ERROR_NO_USER_KEYS = 6006;

const int ERROR_FILE_NOT_ENCRYPTED = 6007;

const int ERROR_NOT_EXPORT_FORMAT = 6008;

const int ERROR_FILE_READ_ONLY = 6009;

const int ERROR_DIR_EFS_DISALLOWED = 6010;

const int ERROR_EFS_SERVER_NOT_TRUSTED = 6011;

const int ERROR_BAD_RECOVERY_POLICY = 6012;

const int ERROR_EFS_ALG_BLOB_TOO_BIG = 6013;

const int ERROR_VOLUME_NOT_SUPPORT_EFS = 6014;

const int ERROR_EFS_DISABLED = 6015;

const int ERROR_EFS_VERSION_NOT_SUPPORT = 6016;

const int ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = 6017;

const int ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = 6018;

const int ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = 6019;

const int ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = 6020;

const int ERROR_CS_ENCRYPTION_FILE_NOT_CSE = 6021;

const int ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = 6022;

const int ERROR_WIP_ENCRYPTION_FAILED = 6023;

const int ERROR_NO_BROWSER_SERVERS_FOUND = 6118;

const int SCHED_E_SERVICE_NOT_LOCALSYSTEM = 6200;

const int ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM = 6250;

const int ERROR_LOG_SECTOR_INVALID = 6600;

const int ERROR_LOG_SECTOR_PARITY_INVALID = 6601;

const int ERROR_LOG_SECTOR_REMAPPED = 6602;

const int ERROR_LOG_BLOCK_INCOMPLETE = 6603;

const int ERROR_LOG_INVALID_RANGE = 6604;

const int ERROR_LOG_BLOCKS_EXHAUSTED = 6605;

const int ERROR_LOG_READ_CONTEXT_INVALID = 6606;

const int ERROR_LOG_RESTART_INVALID = 6607;

const int ERROR_LOG_BLOCK_VERSION = 6608;

const int ERROR_LOG_BLOCK_INVALID = 6609;

const int ERROR_LOG_READ_MODE_INVALID = 6610;

const int ERROR_LOG_NO_RESTART = 6611;

const int ERROR_LOG_METADATA_CORRUPT = 6612;

const int ERROR_LOG_METADATA_INVALID = 6613;

const int ERROR_LOG_METADATA_INCONSISTENT = 6614;

const int ERROR_LOG_RESERVATION_INVALID = 6615;

const int ERROR_LOG_CANT_DELETE = 6616;

const int ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = 6617;

const int ERROR_LOG_START_OF_LOG = 6618;

const int ERROR_LOG_POLICY_ALREADY_INSTALLED = 6619;

const int ERROR_LOG_POLICY_NOT_INSTALLED = 6620;

const int ERROR_LOG_POLICY_INVALID = 6621;

const int ERROR_LOG_POLICY_CONFLICT = 6622;

const int ERROR_LOG_PINNED_ARCHIVE_TAIL = 6623;

const int ERROR_LOG_RECORD_NONEXISTENT = 6624;

const int ERROR_LOG_RECORDS_RESERVED_INVALID = 6625;

const int ERROR_LOG_SPACE_RESERVED_INVALID = 6626;

const int ERROR_LOG_TAIL_INVALID = 6627;

const int ERROR_LOG_FULL = 6628;

const int ERROR_COULD_NOT_RESIZE_LOG = 6629;

const int ERROR_LOG_MULTIPLEXED = 6630;

const int ERROR_LOG_DEDICATED = 6631;

const int ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = 6632;

const int ERROR_LOG_ARCHIVE_IN_PROGRESS = 6633;

const int ERROR_LOG_EPHEMERAL = 6634;

const int ERROR_LOG_NOT_ENOUGH_CONTAINERS = 6635;

const int ERROR_LOG_CLIENT_ALREADY_REGISTERED = 6636;

const int ERROR_LOG_CLIENT_NOT_REGISTERED = 6637;

const int ERROR_LOG_FULL_HANDLER_IN_PROGRESS = 6638;

const int ERROR_LOG_CONTAINER_READ_FAILED = 6639;

const int ERROR_LOG_CONTAINER_WRITE_FAILED = 6640;

const int ERROR_LOG_CONTAINER_OPEN_FAILED = 6641;

const int ERROR_LOG_CONTAINER_STATE_INVALID = 6642;

const int ERROR_LOG_STATE_INVALID = 6643;

const int ERROR_LOG_PINNED = 6644;

const int ERROR_LOG_METADATA_FLUSH_FAILED = 6645;

const int ERROR_LOG_INCONSISTENT_SECURITY = 6646;

const int ERROR_LOG_APPENDED_FLUSH_FAILED = 6647;

const int ERROR_LOG_PINNED_RESERVATION = 6648;

const int ERROR_INVALID_TRANSACTION = 6700;

const int ERROR_TRANSACTION_NOT_ACTIVE = 6701;

const int ERROR_TRANSACTION_REQUEST_NOT_VALID = 6702;

const int ERROR_TRANSACTION_NOT_REQUESTED = 6703;

const int ERROR_TRANSACTION_ALREADY_ABORTED = 6704;

const int ERROR_TRANSACTION_ALREADY_COMMITTED = 6705;

const int ERROR_TM_INITIALIZATION_FAILED = 6706;

const int ERROR_RESOURCEMANAGER_READ_ONLY = 6707;

const int ERROR_TRANSACTION_NOT_JOINED = 6708;

const int ERROR_TRANSACTION_SUPERIOR_EXISTS = 6709;

const int ERROR_CRM_PROTOCOL_ALREADY_EXISTS = 6710;

const int ERROR_TRANSACTION_PROPAGATION_FAILED = 6711;

const int ERROR_CRM_PROTOCOL_NOT_FOUND = 6712;

const int ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = 6713;

const int ERROR_CURRENT_TRANSACTION_NOT_VALID = 6714;

const int ERROR_TRANSACTION_NOT_FOUND = 6715;

const int ERROR_RESOURCEMANAGER_NOT_FOUND = 6716;

const int ERROR_ENLISTMENT_NOT_FOUND = 6717;

const int ERROR_TRANSACTIONMANAGER_NOT_FOUND = 6718;

const int ERROR_TRANSACTIONMANAGER_NOT_ONLINE = 6719;

const int ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = 6720;

const int ERROR_TRANSACTION_NOT_ROOT = 6721;

const int ERROR_TRANSACTION_OBJECT_EXPIRED = 6722;

const int ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = 6723;

const int ERROR_TRANSACTION_RECORD_TOO_LONG = 6724;

const int ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = 6725;

const int ERROR_TRANSACTION_INTEGRITY_VIOLATED = 6726;

const int ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = 6727;

const int ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = 6728;

const int ERROR_TRANSACTION_MUST_WRITETHROUGH = 6729;

const int ERROR_TRANSACTION_NO_SUPERIOR = 6730;

const int ERROR_HEURISTIC_DAMAGE_POSSIBLE = 6731;

const int ERROR_TRANSACTIONAL_CONFLICT = 6800;

const int ERROR_RM_NOT_ACTIVE = 6801;

const int ERROR_RM_METADATA_CORRUPT = 6802;

const int ERROR_DIRECTORY_NOT_RM = 6803;

const int ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = 6805;

const int ERROR_LOG_RESIZE_INVALID_SIZE = 6806;

const int ERROR_OBJECT_NO_LONGER_EXISTS = 6807;

const int ERROR_STREAM_MINIVERSION_NOT_FOUND = 6808;

const int ERROR_STREAM_MINIVERSION_NOT_VALID = 6809;

const int ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = 6810;

const int ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = 6811;

const int ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = 6812;

const int ERROR_REMOTE_FILE_VERSION_MISMATCH = 6814;

const int ERROR_HANDLE_NO_LONGER_VALID = 6815;

const int ERROR_NO_TXF_METADATA = 6816;

const int ERROR_LOG_CORRUPTION_DETECTED = 6817;

const int ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = 6818;

const int ERROR_RM_DISCONNECTED = 6819;

const int ERROR_ENLISTMENT_NOT_SUPERIOR = 6820;

const int ERROR_RECOVERY_NOT_NEEDED = 6821;

const int ERROR_RM_ALREADY_STARTED = 6822;

const int ERROR_FILE_IDENTITY_NOT_PERSISTENT = 6823;

const int ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = 6824;

const int ERROR_CANT_CROSS_RM_BOUNDARY = 6825;

const int ERROR_TXF_DIR_NOT_EMPTY = 6826;

const int ERROR_INDOUBT_TRANSACTIONS_EXIST = 6827;

const int ERROR_TM_VOLATILE = 6828;

const int ERROR_ROLLBACK_TIMER_EXPIRED = 6829;

const int ERROR_TXF_ATTRIBUTE_CORRUPT = 6830;

const int ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = 6831;

const int ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = 6832;

const int ERROR_LOG_GROWTH_FAILED = 6833;

const int ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = 6834;

const int ERROR_TXF_METADATA_ALREADY_PRESENT = 6835;

const int ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = 6836;

const int ERROR_TRANSACTION_REQUIRED_PROMOTION = 6837;

const int ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = 6838;

const int ERROR_TRANSACTIONS_NOT_FROZEN = 6839;

const int ERROR_TRANSACTION_FREEZE_IN_PROGRESS = 6840;

const int ERROR_NOT_SNAPSHOT_VOLUME = 6841;

const int ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = 6842;

const int ERROR_DATA_LOST_REPAIR = 6843;

const int ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = 6844;

const int ERROR_TM_IDENTITY_MISMATCH = 6845;

const int ERROR_FLOATED_SECTION = 6846;

const int ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = 6847;

const int ERROR_CANNOT_ABORT_TRANSACTIONS = 6848;

const int ERROR_BAD_CLUSTERS = 6849;

const int ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = 6850;

const int ERROR_VOLUME_DIRTY = 6851;

const int ERROR_NO_LINK_TRACKING_IN_TRANSACTION = 6852;

const int ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = 6853;

const int ERROR_EXPIRED_HANDLE = 6854;

const int ERROR_TRANSACTION_NOT_ENLISTED = 6855;

const int ERROR_CTX_WINSTATION_NAME_INVALID = 7001;

const int ERROR_CTX_INVALID_PD = 7002;

const int ERROR_CTX_PD_NOT_FOUND = 7003;

const int ERROR_CTX_WD_NOT_FOUND = 7004;

const int ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 7005;

const int ERROR_CTX_SERVICE_NAME_COLLISION = 7006;

const int ERROR_CTX_CLOSE_PENDING = 7007;

const int ERROR_CTX_NO_OUTBUF = 7008;

const int ERROR_CTX_MODEM_INF_NOT_FOUND = 7009;

const int ERROR_CTX_INVALID_MODEMNAME = 7010;

const int ERROR_CTX_MODEM_RESPONSE_ERROR = 7011;

const int ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 7012;

const int ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 7013;

const int ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 7014;

const int ERROR_CTX_MODEM_RESPONSE_BUSY = 7015;

const int ERROR_CTX_MODEM_RESPONSE_VOICE = 7016;

const int ERROR_CTX_TD_ERROR = 7017;

const int ERROR_CTX_WINSTATION_NOT_FOUND = 7022;

const int ERROR_CTX_WINSTATION_ALREADY_EXISTS = 7023;

const int ERROR_CTX_WINSTATION_BUSY = 7024;

const int ERROR_CTX_BAD_VIDEO_MODE = 7025;

const int ERROR_CTX_GRAPHICS_INVALID = 7035;

const int ERROR_CTX_LOGON_DISABLED = 7037;

const int ERROR_CTX_NOT_CONSOLE = 7038;

const int ERROR_CTX_CLIENT_QUERY_TIMEOUT = 7040;

const int ERROR_CTX_CONSOLE_DISCONNECT = 7041;

const int ERROR_CTX_CONSOLE_CONNECT = 7042;

const int ERROR_CTX_SHADOW_DENIED = 7044;

const int ERROR_CTX_WINSTATION_ACCESS_DENIED = 7045;

const int ERROR_CTX_INVALID_WD = 7049;

const int ERROR_CTX_SHADOW_INVALID = 7050;

const int ERROR_CTX_SHADOW_DISABLED = 7051;

const int ERROR_CTX_CLIENT_LICENSE_IN_USE = 7052;

const int ERROR_CTX_CLIENT_LICENSE_NOT_SET = 7053;

const int ERROR_CTX_LICENSE_NOT_AVAILABLE = 7054;

const int ERROR_CTX_LICENSE_CLIENT_INVALID = 7055;

const int ERROR_CTX_LICENSE_EXPIRED = 7056;

const int ERROR_CTX_SHADOW_NOT_RUNNING = 7057;

const int ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = 7058;

const int ERROR_ACTIVATION_COUNT_EXCEEDED = 7059;

const int ERROR_CTX_WINSTATIONS_DISABLED = 7060;

const int ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = 7061;

const int ERROR_CTX_SESSION_IN_USE = 7062;

const int ERROR_CTX_NO_FORCE_LOGOFF = 7063;

const int ERROR_CTX_ACCOUNT_RESTRICTION = 7064;

const int ERROR_RDP_PROTOCOL_ERROR = 7065;

const int ERROR_CTX_CDM_CONNECT = 7066;

const int ERROR_CTX_CDM_DISCONNECT = 7067;

const int ERROR_CTX_SECURITY_LAYER_ERROR = 7068;

const int ERROR_TS_INCOMPATIBLE_SESSIONS = 7069;

const int ERROR_TS_VIDEO_SUBSYSTEM_ERROR = 7070;

const int FRS_ERR_INVALID_API_SEQUENCE = 8001;

const int FRS_ERR_STARTING_SERVICE = 8002;

const int FRS_ERR_STOPPING_SERVICE = 8003;

const int FRS_ERR_INTERNAL_API = 8004;

const int FRS_ERR_INTERNAL = 8005;

const int FRS_ERR_SERVICE_COMM = 8006;

const int FRS_ERR_INSUFFICIENT_PRIV = 8007;

const int FRS_ERR_AUTHENTICATION = 8008;

const int FRS_ERR_PARENT_INSUFFICIENT_PRIV = 8009;

const int FRS_ERR_PARENT_AUTHENTICATION = 8010;

const int FRS_ERR_CHILD_TO_PARENT_COMM = 8011;

const int FRS_ERR_PARENT_TO_CHILD_COMM = 8012;

const int FRS_ERR_SYSVOL_POPULATE = 8013;

const int FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 8014;

const int FRS_ERR_SYSVOL_IS_BUSY = 8015;

const int FRS_ERR_SYSVOL_DEMOTE = 8016;

const int FRS_ERR_INVALID_SERVICE_PARAMETER = 8017;

const int DS_S_SUCCESS = 0;

const int ERROR_DS_NOT_INSTALLED = 8200;

const int ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 8201;

const int ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 8202;

const int ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 8203;

const int ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 8204;

const int ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 8205;

const int ERROR_DS_BUSY = 8206;

const int ERROR_DS_UNAVAILABLE = 8207;

const int ERROR_DS_NO_RIDS_ALLOCATED = 8208;

const int ERROR_DS_NO_MORE_RIDS = 8209;

const int ERROR_DS_INCORRECT_ROLE_OWNER = 8210;

const int ERROR_DS_RIDMGR_INIT_ERROR = 8211;

const int ERROR_DS_OBJ_CLASS_VIOLATION = 8212;

const int ERROR_DS_CANT_ON_NON_LEAF = 8213;

const int ERROR_DS_CANT_ON_RDN = 8214;

const int ERROR_DS_CANT_MOD_OBJ_CLASS = 8215;

const int ERROR_DS_CROSS_DOM_MOVE_ERROR = 8216;

const int ERROR_DS_GC_NOT_AVAILABLE = 8217;

const int ERROR_SHARED_POLICY = 8218;

const int ERROR_POLICY_OBJECT_NOT_FOUND = 8219;

const int ERROR_POLICY_ONLY_IN_DS = 8220;

const int ERROR_PROMOTION_ACTIVE = 8221;

const int ERROR_NO_PROMOTION_ACTIVE = 8222;

const int ERROR_DS_OPERATIONS_ERROR = 8224;

const int ERROR_DS_PROTOCOL_ERROR = 8225;

const int ERROR_DS_TIMELIMIT_EXCEEDED = 8226;

const int ERROR_DS_SIZELIMIT_EXCEEDED = 8227;

const int ERROR_DS_ADMIN_LIMIT_EXCEEDED = 8228;

const int ERROR_DS_COMPARE_FALSE = 8229;

const int ERROR_DS_COMPARE_TRUE = 8230;

const int ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 8231;

const int ERROR_DS_STRONG_AUTH_REQUIRED = 8232;

const int ERROR_DS_INAPPROPRIATE_AUTH = 8233;

const int ERROR_DS_AUTH_UNKNOWN = 8234;

const int ERROR_DS_REFERRAL = 8235;

const int ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 8236;

const int ERROR_DS_CONFIDENTIALITY_REQUIRED = 8237;

const int ERROR_DS_INAPPROPRIATE_MATCHING = 8238;

const int ERROR_DS_CONSTRAINT_VIOLATION = 8239;

const int ERROR_DS_NO_SUCH_OBJECT = 8240;

const int ERROR_DS_ALIAS_PROBLEM = 8241;

const int ERROR_DS_INVALID_DN_SYNTAX = 8242;

const int ERROR_DS_IS_LEAF = 8243;

const int ERROR_DS_ALIAS_DEREF_PROBLEM = 8244;

const int ERROR_DS_UNWILLING_TO_PERFORM = 8245;

const int ERROR_DS_LOOP_DETECT = 8246;

const int ERROR_DS_NAMING_VIOLATION = 8247;

const int ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 8248;

const int ERROR_DS_AFFECTS_MULTIPLE_DSAS = 8249;

const int ERROR_DS_SERVER_DOWN = 8250;

const int ERROR_DS_LOCAL_ERROR = 8251;

const int ERROR_DS_ENCODING_ERROR = 8252;

const int ERROR_DS_DECODING_ERROR = 8253;

const int ERROR_DS_FILTER_UNKNOWN = 8254;

const int ERROR_DS_PARAM_ERROR = 8255;

const int ERROR_DS_NOT_SUPPORTED = 8256;

const int ERROR_DS_NO_RESULTS_RETURNED = 8257;

const int ERROR_DS_CONTROL_NOT_FOUND = 8258;

const int ERROR_DS_CLIENT_LOOP = 8259;

const int ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 8260;

const int ERROR_DS_SORT_CONTROL_MISSING = 8261;

const int ERROR_DS_OFFSET_RANGE_ERROR = 8262;

const int ERROR_DS_RIDMGR_DISABLED = 8263;

const int ERROR_DS_ROOT_MUST_BE_NC = 8301;

const int ERROR_DS_ADD_REPLICA_INHIBITED = 8302;

const int ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 8303;

const int ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 8304;

const int ERROR_DS_OBJ_STRING_NAME_EXISTS = 8305;

const int ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 8306;

const int ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 8307;

const int ERROR_DS_NO_REQUESTED_ATTS_FOUND = 8308;

const int ERROR_DS_USER_BUFFER_TO_SMALL = 8309;

const int ERROR_DS_ATT_IS_NOT_ON_OBJ = 8310;

const int ERROR_DS_ILLEGAL_MOD_OPERATION = 8311;

const int ERROR_DS_OBJ_TOO_LARGE = 8312;

const int ERROR_DS_BAD_INSTANCE_TYPE = 8313;

const int ERROR_DS_MASTERDSA_REQUIRED = 8314;

const int ERROR_DS_OBJECT_CLASS_REQUIRED = 8315;

const int ERROR_DS_MISSING_REQUIRED_ATT = 8316;

const int ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 8317;

const int ERROR_DS_ATT_ALREADY_EXISTS = 8318;

const int ERROR_DS_CANT_ADD_ATT_VALUES = 8320;

const int ERROR_DS_SINGLE_VALUE_CONSTRAINT = 8321;

const int ERROR_DS_RANGE_CONSTRAINT = 8322;

const int ERROR_DS_ATT_VAL_ALREADY_EXISTS = 8323;

const int ERROR_DS_CANT_REM_MISSING_ATT = 8324;

const int ERROR_DS_CANT_REM_MISSING_ATT_VAL = 8325;

const int ERROR_DS_ROOT_CANT_BE_SUBREF = 8326;

const int ERROR_DS_NO_CHAINING = 8327;

const int ERROR_DS_NO_CHAINED_EVAL = 8328;

const int ERROR_DS_NO_PARENT_OBJECT = 8329;

const int ERROR_DS_PARENT_IS_AN_ALIAS = 8330;

const int ERROR_DS_CANT_MIX_MASTER_AND_REPS = 8331;

const int ERROR_DS_CHILDREN_EXIST = 8332;

const int ERROR_DS_OBJ_NOT_FOUND = 8333;

const int ERROR_DS_ALIASED_OBJ_MISSING = 8334;

const int ERROR_DS_BAD_NAME_SYNTAX = 8335;

const int ERROR_DS_ALIAS_POINTS_TO_ALIAS = 8336;

const int ERROR_DS_CANT_DEREF_ALIAS = 8337;

const int ERROR_DS_OUT_OF_SCOPE = 8338;

const int ERROR_DS_OBJECT_BEING_REMOVED = 8339;

const int ERROR_DS_CANT_DELETE_DSA_OBJ = 8340;

const int ERROR_DS_GENERIC_ERROR = 8341;

const int ERROR_DS_DSA_MUST_BE_INT_MASTER = 8342;

const int ERROR_DS_CLASS_NOT_DSA = 8343;

const int ERROR_DS_INSUFF_ACCESS_RIGHTS = 8344;

const int ERROR_DS_ILLEGAL_SUPERIOR = 8345;

const int ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 8346;

const int ERROR_DS_NAME_TOO_MANY_PARTS = 8347;

const int ERROR_DS_NAME_TOO_LONG = 8348;

const int ERROR_DS_NAME_VALUE_TOO_LONG = 8349;

const int ERROR_DS_NAME_UNPARSEABLE = 8350;

const int ERROR_DS_NAME_TYPE_UNKNOWN = 8351;

const int ERROR_DS_NOT_AN_OBJECT = 8352;

const int ERROR_DS_SEC_DESC_TOO_SHORT = 8353;

const int ERROR_DS_SEC_DESC_INVALID = 8354;

const int ERROR_DS_NO_DELETED_NAME = 8355;

const int ERROR_DS_SUBREF_MUST_HAVE_PARENT = 8356;

const int ERROR_DS_NCNAME_MUST_BE_NC = 8357;

const int ERROR_DS_CANT_ADD_SYSTEM_ONLY = 8358;

const int ERROR_DS_CLASS_MUST_BE_CONCRETE = 8359;

const int ERROR_DS_INVALID_DMD = 8360;

const int ERROR_DS_OBJ_GUID_EXISTS = 8361;

const int ERROR_DS_NOT_ON_BACKLINK = 8362;

const int ERROR_DS_NO_CROSSREF_FOR_NC = 8363;

const int ERROR_DS_SHUTTING_DOWN = 8364;

const int ERROR_DS_UNKNOWN_OPERATION = 8365;

const int ERROR_DS_INVALID_ROLE_OWNER = 8366;

const int ERROR_DS_COULDNT_CONTACT_FSMO = 8367;

const int ERROR_DS_CROSS_NC_DN_RENAME = 8368;

const int ERROR_DS_CANT_MOD_SYSTEM_ONLY = 8369;

const int ERROR_DS_REPLICATOR_ONLY = 8370;

const int ERROR_DS_OBJ_CLASS_NOT_DEFINED = 8371;

const int ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 8372;

const int ERROR_DS_NAME_REFERENCE_INVALID = 8373;

const int ERROR_DS_CROSS_REF_EXISTS = 8374;

const int ERROR_DS_CANT_DEL_MASTER_CROSSREF = 8375;

const int ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 8376;

const int ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 8377;

const int ERROR_DS_DUP_RDN = 8378;

const int ERROR_DS_DUP_OID = 8379;

const int ERROR_DS_DUP_MAPI_ID = 8380;

const int ERROR_DS_DUP_SCHEMA_ID_GUID = 8381;

const int ERROR_DS_DUP_LDAP_DISPLAY_NAME = 8382;

const int ERROR_DS_SEMANTIC_ATT_TEST = 8383;

const int ERROR_DS_SYNTAX_MISMATCH = 8384;

const int ERROR_DS_EXISTS_IN_MUST_HAVE = 8385;

const int ERROR_DS_EXISTS_IN_MAY_HAVE = 8386;

const int ERROR_DS_NONEXISTENT_MAY_HAVE = 8387;

const int ERROR_DS_NONEXISTENT_MUST_HAVE = 8388;

const int ERROR_DS_AUX_CLS_TEST_FAIL = 8389;

const int ERROR_DS_NONEXISTENT_POSS_SUP = 8390;

const int ERROR_DS_SUB_CLS_TEST_FAIL = 8391;

const int ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 8392;

const int ERROR_DS_EXISTS_IN_AUX_CLS = 8393;

const int ERROR_DS_EXISTS_IN_SUB_CLS = 8394;

const int ERROR_DS_EXISTS_IN_POSS_SUP = 8395;

const int ERROR_DS_RECALCSCHEMA_FAILED = 8396;

const int ERROR_DS_TREE_DELETE_NOT_FINISHED = 8397;

const int ERROR_DS_CANT_DELETE = 8398;

const int ERROR_DS_ATT_SCHEMA_REQ_ID = 8399;

const int ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 8400;

const int ERROR_DS_CANT_CACHE_ATT = 8401;

const int ERROR_DS_CANT_CACHE_CLASS = 8402;

const int ERROR_DS_CANT_REMOVE_ATT_CACHE = 8403;

const int ERROR_DS_CANT_REMOVE_CLASS_CACHE = 8404;

const int ERROR_DS_CANT_RETRIEVE_DN = 8405;

const int ERROR_DS_MISSING_SUPREF = 8406;

const int ERROR_DS_CANT_RETRIEVE_INSTANCE = 8407;

const int ERROR_DS_CODE_INCONSISTENCY = 8408;

const int ERROR_DS_DATABASE_ERROR = 8409;

const int ERROR_DS_GOVERNSID_MISSING = 8410;

const int ERROR_DS_MISSING_EXPECTED_ATT = 8411;

const int ERROR_DS_NCNAME_MISSING_CR_REF = 8412;

const int ERROR_DS_SECURITY_CHECKING_ERROR = 8413;

const int ERROR_DS_SCHEMA_NOT_LOADED = 8414;

const int ERROR_DS_SCHEMA_ALLOC_FAILED = 8415;

const int ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 8416;

const int ERROR_DS_GCVERIFY_ERROR = 8417;

const int ERROR_DS_DRA_SCHEMA_MISMATCH = 8418;

const int ERROR_DS_CANT_FIND_DSA_OBJ = 8419;

const int ERROR_DS_CANT_FIND_EXPECTED_NC = 8420;

const int ERROR_DS_CANT_FIND_NC_IN_CACHE = 8421;

const int ERROR_DS_CANT_RETRIEVE_CHILD = 8422;

const int ERROR_DS_SECURITY_ILLEGAL_MODIFY = 8423;

const int ERROR_DS_CANT_REPLACE_HIDDEN_REC = 8424;

const int ERROR_DS_BAD_HIERARCHY_FILE = 8425;

const int ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 8426;

const int ERROR_DS_CONFIG_PARAM_MISSING = 8427;

const int ERROR_DS_COUNTING_AB_INDICES_FAILED = 8428;

const int ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 8429;

const int ERROR_DS_INTERNAL_FAILURE = 8430;

const int ERROR_DS_UNKNOWN_ERROR = 8431;

const int ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 8432;

const int ERROR_DS_REFUSING_FSMO_ROLES = 8433;

const int ERROR_DS_MISSING_FSMO_SETTINGS = 8434;

const int ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 8435;

const int ERROR_DS_DRA_GENERIC = 8436;

const int ERROR_DS_DRA_INVALID_PARAMETER = 8437;

const int ERROR_DS_DRA_BUSY = 8438;

const int ERROR_DS_DRA_BAD_DN = 8439;

const int ERROR_DS_DRA_BAD_NC = 8440;

const int ERROR_DS_DRA_DN_EXISTS = 8441;

const int ERROR_DS_DRA_INTERNAL_ERROR = 8442;

const int ERROR_DS_DRA_INCONSISTENT_DIT = 8443;

const int ERROR_DS_DRA_CONNECTION_FAILED = 8444;

const int ERROR_DS_DRA_BAD_INSTANCE_TYPE = 8445;

const int ERROR_DS_DRA_OUT_OF_MEM = 8446;

const int ERROR_DS_DRA_MAIL_PROBLEM = 8447;

const int ERROR_DS_DRA_REF_ALREADY_EXISTS = 8448;

const int ERROR_DS_DRA_REF_NOT_FOUND = 8449;

const int ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 8450;

const int ERROR_DS_DRA_DB_ERROR = 8451;

const int ERROR_DS_DRA_NO_REPLICA = 8452;

const int ERROR_DS_DRA_ACCESS_DENIED = 8453;

const int ERROR_DS_DRA_NOT_SUPPORTED = 8454;

const int ERROR_DS_DRA_RPC_CANCELLED = 8455;

const int ERROR_DS_DRA_SOURCE_DISABLED = 8456;

const int ERROR_DS_DRA_SINK_DISABLED = 8457;

const int ERROR_DS_DRA_NAME_COLLISION = 8458;

const int ERROR_DS_DRA_SOURCE_REINSTALLED = 8459;

const int ERROR_DS_DRA_MISSING_PARENT = 8460;

const int ERROR_DS_DRA_PREEMPTED = 8461;

const int ERROR_DS_DRA_ABANDON_SYNC = 8462;

const int ERROR_DS_DRA_SHUTDOWN = 8463;

const int ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 8464;

const int ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 8465;

const int ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 8466;

const int ERROR_DS_INSTALL_SCHEMA_MISMATCH = 8467;

const int ERROR_DS_DUP_LINK_ID = 8468;

const int ERROR_DS_NAME_ERROR_RESOLVING = 8469;

const int ERROR_DS_NAME_ERROR_NOT_FOUND = 8470;

const int ERROR_DS_NAME_ERROR_NOT_UNIQUE = 8471;

const int ERROR_DS_NAME_ERROR_NO_MAPPING = 8472;

const int ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 8473;

const int ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 8474;

const int ERROR_DS_CONSTRUCTED_ATT_MOD = 8475;

const int ERROR_DS_WRONG_OM_OBJ_CLASS = 8476;

const int ERROR_DS_DRA_REPL_PENDING = 8477;

const int ERROR_DS_DS_REQUIRED = 8478;

const int ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 8479;

const int ERROR_DS_NON_BASE_SEARCH = 8480;

const int ERROR_DS_CANT_RETRIEVE_ATTS = 8481;

const int ERROR_DS_BACKLINK_WITHOUT_LINK = 8482;

const int ERROR_DS_EPOCH_MISMATCH = 8483;

const int ERROR_DS_SRC_NAME_MISMATCH = 8484;

const int ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 8485;

const int ERROR_DS_DST_NC_MISMATCH = 8486;

const int ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 8487;

const int ERROR_DS_SRC_GUID_MISMATCH = 8488;

const int ERROR_DS_CANT_MOVE_DELETED_OBJECT = 8489;

const int ERROR_DS_PDC_OPERATION_IN_PROGRESS = 8490;

const int ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 8491;

const int ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 8492;

const int ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 8493;

const int ERROR_DS_NC_MUST_HAVE_NC_PARENT = 8494;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 8495;

const int ERROR_DS_DST_DOMAIN_NOT_NATIVE = 8496;

const int ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 8497;

const int ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 8498;

const int ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 8499;

const int ERROR_DS_INVALID_SEARCH_FLAG = 8500;

const int ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 8501;

const int ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 8502;

const int ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 8503;

const int ERROR_DS_SAM_INIT_FAILURE = 8504;

const int ERROR_DS_SENSITIVE_GROUP_VIOLATION = 8505;

const int ERROR_DS_CANT_MOD_PRIMARYGROUPID = 8506;

const int ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 8507;

const int ERROR_DS_NONSAFE_SCHEMA_CHANGE = 8508;

const int ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 8509;

const int ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 8510;

const int ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 8511;

const int ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 8512;

const int ERROR_DS_INVALID_GROUP_TYPE = 8513;

const int ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 8514;

const int ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 8515;

const int ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 8516;

const int ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 8517;

const int ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 8518;

const int ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 8519;

const int ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 8520;

const int ERROR_DS_HAVE_PRIMARY_MEMBERS = 8521;

const int ERROR_DS_STRING_SD_CONVERSION_FAILED = 8522;

const int ERROR_DS_NAMING_MASTER_GC = 8523;

const int ERROR_DS_DNS_LOOKUP_FAILURE = 8524;

const int ERROR_DS_COULDNT_UPDATE_SPNS = 8525;

const int ERROR_DS_CANT_RETRIEVE_SD = 8526;

const int ERROR_DS_KEY_NOT_UNIQUE = 8527;

const int ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 8528;

const int ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 8529;

const int ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 8530;

const int ERROR_DS_CANT_START = 8531;

const int ERROR_DS_INIT_FAILURE = 8532;

const int ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 8533;

const int ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 8534;

const int ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 8535;

const int ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 8536;

const int ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 8537;

const int ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 8538;

const int ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 8539;

const int ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 8540;

const int ERROR_SAM_INIT_FAILURE = 8541;

const int ERROR_DS_DRA_SCHEMA_INFO_SHIP = 8542;

const int ERROR_DS_DRA_SCHEMA_CONFLICT = 8543;

const int ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 8544;

const int ERROR_DS_DRA_OBJ_NC_MISMATCH = 8545;

const int ERROR_DS_NC_STILL_HAS_DSAS = 8546;

const int ERROR_DS_GC_REQUIRED = 8547;

const int ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 8548;

const int ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 8549;

const int ERROR_DS_CANT_ADD_TO_GC = 8550;

const int ERROR_DS_NO_CHECKPOINT_WITH_PDC = 8551;

const int ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 8552;

const int ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 8553;

const int ERROR_DS_INVALID_NAME_FOR_SPN = 8554;

const int ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 8555;

const int ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 8556;

const int ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 8557;

const int ERROR_DS_MUST_BE_RUN_ON_DST_DC = 8558;

const int ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 8559;

const int ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 8560;

const int ERROR_DS_INIT_FAILURE_CONSOLE = 8561;

const int ERROR_DS_SAM_INIT_FAILURE_CONSOLE = 8562;

const int ERROR_DS_FOREST_VERSION_TOO_HIGH = 8563;

const int ERROR_DS_DOMAIN_VERSION_TOO_HIGH = 8564;

const int ERROR_DS_FOREST_VERSION_TOO_LOW = 8565;

const int ERROR_DS_DOMAIN_VERSION_TOO_LOW = 8566;

const int ERROR_DS_INCOMPATIBLE_VERSION = 8567;

const int ERROR_DS_LOW_DSA_VERSION = 8568;

const int ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = 8569;

const int ERROR_DS_NOT_SUPPORTED_SORT_ORDER = 8570;

const int ERROR_DS_NAME_NOT_UNIQUE = 8571;

const int ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = 8572;

const int ERROR_DS_OUT_OF_VERSION_STORE = 8573;

const int ERROR_DS_INCOMPATIBLE_CONTROLS_USED = 8574;

const int ERROR_DS_NO_REF_DOMAIN = 8575;

const int ERROR_DS_RESERVED_LINK_ID = 8576;

const int ERROR_DS_LINK_ID_NOT_AVAILABLE = 8577;

const int ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = 8578;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = 8579;

const int ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = 8580;

const int ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = 8581;

const int ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = 8582;

const int ERROR_DS_NAME_ERROR_TRUST_REFERRAL = 8583;

const int ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = 8584;

const int ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = 8585;

const int ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = 8586;

const int ERROR_DS_THREAD_LIMIT_EXCEEDED = 8587;

const int ERROR_DS_NOT_CLOSEST = 8588;

const int ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = 8589;

const int ERROR_DS_SINGLE_USER_MODE_FAILED = 8590;

const int ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = 8591;

const int ERROR_DS_NTDSCRIPT_PROCESS_ERROR = 8592;

const int ERROR_DS_DIFFERENT_REPL_EPOCHS = 8593;

const int ERROR_DS_DRS_EXTENSIONS_CHANGED = 8594;

const int ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = 8595;

const int ERROR_DS_NO_MSDS_INTID = 8596;

const int ERROR_DS_DUP_MSDS_INTID = 8597;

const int ERROR_DS_EXISTS_IN_RDNATTID = 8598;

const int ERROR_DS_AUTHORIZATION_FAILED = 8599;

const int ERROR_DS_INVALID_SCRIPT = 8600;

const int ERROR_DS_REMOTE_CROSSREF_OP_FAILED = 8601;

const int ERROR_DS_CROSS_REF_BUSY = 8602;

const int ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = 8603;

const int ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = 8604;

const int ERROR_DS_DUPLICATE_ID_FOUND = 8605;

const int ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = 8606;

const int ERROR_DS_GROUP_CONVERSION_ERROR = 8607;

const int ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = 8608;

const int ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = 8609;

const int ERROR_DS_ROLE_NOT_VERIFIED = 8610;

const int ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = 8611;

const int ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = 8612;

const int ERROR_DS_EXISTING_AD_CHILD_NC = 8613;

const int ERROR_DS_REPL_LIFETIME_EXCEEDED = 8614;

const int ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = 8615;

const int ERROR_DS_LDAP_SEND_QUEUE_FULL = 8616;

const int ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = 8617;

const int ERROR_DS_POLICY_NOT_KNOWN = 8618;

const int ERROR_NO_SITE_SETTINGS_OBJECT = 8619;

const int ERROR_NO_SECRETS = 8620;

const int ERROR_NO_WRITABLE_DC_FOUND = 8621;

const int ERROR_DS_NO_SERVER_OBJECT = 8622;

const int ERROR_DS_NO_NTDSA_OBJECT = 8623;

const int ERROR_DS_NON_ASQ_SEARCH = 8624;

const int ERROR_DS_AUDIT_FAILURE = 8625;

const int ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = 8626;

const int ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = 8627;

const int ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = 8628;

const int ERROR_DS_DRA_CORRUPT_UTD_VECTOR = 8629;

const int ERROR_DS_DRA_SECRETS_DENIED = 8630;

const int ERROR_DS_RESERVED_MAPI_ID = 8631;

const int ERROR_DS_MAPI_ID_NOT_AVAILABLE = 8632;

const int ERROR_DS_DRA_MISSING_KRBTGT_SECRET = 8633;

const int ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = 8634;

const int ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = 8635;

const int ERROR_INVALID_USER_PRINCIPAL_NAME = 8636;

const int ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = 8637;

const int ERROR_DS_OID_NOT_FOUND = 8638;

const int ERROR_DS_DRA_RECYCLED_TARGET = 8639;

const int ERROR_DS_DISALLOWED_NC_REDIRECT = 8640;

const int ERROR_DS_HIGH_ADLDS_FFL = 8641;

const int ERROR_DS_HIGH_DSA_VERSION = 8642;

const int ERROR_DS_LOW_ADLDS_FFL = 8643;

const int ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = 8644;

const int ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = 8645;

const int ERROR_INCORRECT_ACCOUNT_TYPE = 8646;

const int ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = 8647;

const int ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = 8648;

const int ERROR_DS_MISSING_FOREST_TRUST = 8649;

const int ERROR_DS_VALUE_KEY_NOT_UNIQUE = 8650;

const int ERROR_WEAK_WHFBKEY_BLOCKED = 8651;

const int ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD = 8652;

const int ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED = 8653;

const int ERROR_POLICY_CONTROLLED_ACCOUNT = 8654;

const int ERROR_LAPS_LEGACY_SCHEMA_MISSING = 8655;

const int ERROR_LAPS_SCHEMA_MISSING = 8656;

const int ERROR_LAPS_ENCRYPTION_REQUIRES_2016_DFL = 8657;

const int DNS_ERROR_RESPONSE_CODES_BASE = 9000;

const int DNS_ERROR_RCODE_NO_ERROR = 0;

const int DNS_ERROR_MASK = 9000;

const int DNS_ERROR_RCODE_FORMAT_ERROR = 9001;

const int DNS_ERROR_RCODE_SERVER_FAILURE = 9002;

const int DNS_ERROR_RCODE_NAME_ERROR = 9003;

const int DNS_ERROR_RCODE_NOT_IMPLEMENTED = 9004;

const int DNS_ERROR_RCODE_REFUSED = 9005;

const int DNS_ERROR_RCODE_YXDOMAIN = 9006;

const int DNS_ERROR_RCODE_YXRRSET = 9007;

const int DNS_ERROR_RCODE_NXRRSET = 9008;

const int DNS_ERROR_RCODE_NOTAUTH = 9009;

const int DNS_ERROR_RCODE_NOTZONE = 9010;

const int DNS_ERROR_RCODE_BADSIG = 9016;

const int DNS_ERROR_RCODE_BADKEY = 9017;

const int DNS_ERROR_RCODE_BADTIME = 9018;

const int DNS_ERROR_RCODE_LAST = 9018;

const int DNS_ERROR_DNSSEC_BASE = 9100;

const int DNS_ERROR_KEYMASTER_REQUIRED = 9101;

const int DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = 9102;

const int DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = 9103;

const int DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = 9104;

const int DNS_ERROR_UNSUPPORTED_ALGORITHM = 9105;

const int DNS_ERROR_INVALID_KEY_SIZE = 9106;

const int DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = 9107;

const int DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = 9108;

const int DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = 9109;

const int DNS_ERROR_UNEXPECTED_CNG_ERROR = 9110;

const int DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = 9111;

const int DNS_ERROR_KSP_NOT_ACCESSIBLE = 9112;

const int DNS_ERROR_TOO_MANY_SKDS = 9113;

const int DNS_ERROR_INVALID_ROLLOVER_PERIOD = 9114;

const int DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = 9115;

const int DNS_ERROR_ROLLOVER_IN_PROGRESS = 9116;

const int DNS_ERROR_STANDBY_KEY_NOT_PRESENT = 9117;

const int DNS_ERROR_NOT_ALLOWED_ON_ZSK = 9118;

const int DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = 9119;

const int DNS_ERROR_ROLLOVER_ALREADY_QUEUED = 9120;

const int DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = 9121;

const int DNS_ERROR_BAD_KEYMASTER = 9122;

const int DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = 9123;

const int DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = 9124;

const int DNS_ERROR_DNSSEC_IS_DISABLED = 9125;

const int DNS_ERROR_INVALID_XML = 9126;

const int DNS_ERROR_NO_VALID_TRUST_ANCHORS = 9127;

const int DNS_ERROR_ROLLOVER_NOT_POKEABLE = 9128;

const int DNS_ERROR_NSEC3_NAME_COLLISION = 9129;

const int DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = 9130;

const int DNS_ERROR_PACKET_FMT_BASE = 9500;

const int DNS_INFO_NO_RECORDS = 9501;

const int DNS_ERROR_BAD_PACKET = 9502;

const int DNS_ERROR_NO_PACKET = 9503;

const int DNS_ERROR_RCODE = 9504;

const int DNS_ERROR_UNSECURE_PACKET = 9505;

const int DNS_STATUS_PACKET_UNSECURE = 9505;

const int DNS_REQUEST_PENDING = 9506;

const int DNS_ERROR_NO_MEMORY = 14;

const int DNS_ERROR_INVALID_NAME = 123;

const int DNS_ERROR_INVALID_DATA = 13;

const int DNS_ERROR_GENERAL_API_BASE = 9550;

const int DNS_ERROR_INVALID_TYPE = 9551;

const int DNS_ERROR_INVALID_IP_ADDRESS = 9552;

const int DNS_ERROR_INVALID_PROPERTY = 9553;

const int DNS_ERROR_TRY_AGAIN_LATER = 9554;

const int DNS_ERROR_NOT_UNIQUE = 9555;

const int DNS_ERROR_NON_RFC_NAME = 9556;

const int DNS_STATUS_FQDN = 9557;

const int DNS_STATUS_DOTTED_NAME = 9558;

const int DNS_STATUS_SINGLE_PART_NAME = 9559;

const int DNS_ERROR_INVALID_NAME_CHAR = 9560;

const int DNS_ERROR_NUMERIC_NAME = 9561;

const int DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = 9562;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = 9563;

const int DNS_ERROR_CANNOT_FIND_ROOT_HINTS = 9564;

const int DNS_ERROR_INCONSISTENT_ROOT_HINTS = 9565;

const int DNS_ERROR_DWORD_VALUE_TOO_SMALL = 9566;

const int DNS_ERROR_DWORD_VALUE_TOO_LARGE = 9567;

const int DNS_ERROR_BACKGROUND_LOADING = 9568;

const int DNS_ERROR_NOT_ALLOWED_ON_RODC = 9569;

const int DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = 9570;

const int DNS_ERROR_DELEGATION_REQUIRED = 9571;

const int DNS_ERROR_INVALID_POLICY_TABLE = 9572;

const int DNS_ERROR_ADDRESS_REQUIRED = 9573;

const int DNS_ERROR_ZONE_BASE = 9600;

const int DNS_ERROR_ZONE_DOES_NOT_EXIST = 9601;

const int DNS_ERROR_NO_ZONE_INFO = 9602;

const int DNS_ERROR_INVALID_ZONE_OPERATION = 9603;

const int DNS_ERROR_ZONE_CONFIGURATION_ERROR = 9604;

const int DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 9605;

const int DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 9606;

const int DNS_ERROR_ZONE_LOCKED = 9607;

const int DNS_ERROR_ZONE_CREATION_FAILED = 9608;

const int DNS_ERROR_ZONE_ALREADY_EXISTS = 9609;

const int DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 9610;

const int DNS_ERROR_INVALID_ZONE_TYPE = 9611;

const int DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 9612;

const int DNS_ERROR_ZONE_NOT_SECONDARY = 9613;

const int DNS_ERROR_NEED_SECONDARY_ADDRESSES = 9614;

const int DNS_ERROR_WINS_INIT_FAILED = 9615;

const int DNS_ERROR_NEED_WINS_SERVERS = 9616;

const int DNS_ERROR_NBSTAT_INIT_FAILED = 9617;

const int DNS_ERROR_SOA_DELETE_INVALID = 9618;

const int DNS_ERROR_FORWARDER_ALREADY_EXISTS = 9619;

const int DNS_ERROR_ZONE_REQUIRES_MASTER_IP = 9620;

const int DNS_ERROR_ZONE_IS_SHUTDOWN = 9621;

const int DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = 9622;

const int DNS_ERROR_DATAFILE_BASE = 9650;

const int DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 9651;

const int DNS_ERROR_INVALID_DATAFILE_NAME = 9652;

const int DNS_ERROR_DATAFILE_OPEN_FAILURE = 9653;

const int DNS_ERROR_FILE_WRITEBACK_FAILED = 9654;

const int DNS_ERROR_DATAFILE_PARSING = 9655;

const int DNS_ERROR_DATABASE_BASE = 9700;

const int DNS_ERROR_RECORD_DOES_NOT_EXIST = 9701;

const int DNS_ERROR_RECORD_FORMAT = 9702;

const int DNS_ERROR_NODE_CREATION_FAILED = 9703;

const int DNS_ERROR_UNKNOWN_RECORD_TYPE = 9704;

const int DNS_ERROR_RECORD_TIMED_OUT = 9705;

const int DNS_ERROR_NAME_NOT_IN_ZONE = 9706;

const int DNS_ERROR_CNAME_LOOP = 9707;

const int DNS_ERROR_NODE_IS_CNAME = 9708;

const int DNS_ERROR_CNAME_COLLISION = 9709;

const int DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 9710;

const int DNS_ERROR_RECORD_ALREADY_EXISTS = 9711;

const int DNS_ERROR_SECONDARY_DATA = 9712;

const int DNS_ERROR_NO_CREATE_CACHE_DATA = 9713;

const int DNS_ERROR_NAME_DOES_NOT_EXIST = 9714;

const int DNS_WARNING_PTR_CREATE_FAILED = 9715;

const int DNS_WARNING_DOMAIN_UNDELETED = 9716;

const int DNS_ERROR_DS_UNAVAILABLE = 9717;

const int DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 9718;

const int DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 9719;

const int DNS_ERROR_NODE_IS_DNAME = 9720;

const int DNS_ERROR_DNAME_COLLISION = 9721;

const int DNS_ERROR_ALIAS_LOOP = 9722;

const int DNS_ERROR_OPERATION_BASE = 9750;

const int DNS_INFO_AXFR_COMPLETE = 9751;

const int DNS_ERROR_AXFR = 9752;

const int DNS_INFO_ADDED_LOCAL_WINS = 9753;

const int DNS_ERROR_SECURE_BASE = 9800;

const int DNS_STATUS_CONTINUE_NEEDED = 9801;

const int DNS_ERROR_SETUP_BASE = 9850;

const int DNS_ERROR_NO_TCPIP = 9851;

const int DNS_ERROR_NO_DNS_SERVERS = 9852;

const int DNS_ERROR_DP_BASE = 9900;

const int DNS_ERROR_DP_DOES_NOT_EXIST = 9901;

const int DNS_ERROR_DP_ALREADY_EXISTS = 9902;

const int DNS_ERROR_DP_NOT_ENLISTED = 9903;

const int DNS_ERROR_DP_ALREADY_ENLISTED = 9904;

const int DNS_ERROR_DP_NOT_AVAILABLE = 9905;

const int DNS_ERROR_DP_FSMO_ERROR = 9906;

const int DNS_ERROR_RRL_NOT_ENABLED = 9911;

const int DNS_ERROR_RRL_INVALID_WINDOW_SIZE = 9912;

const int DNS_ERROR_RRL_INVALID_IPV4_PREFIX = 9913;

const int DNS_ERROR_RRL_INVALID_IPV6_PREFIX = 9914;

const int DNS_ERROR_RRL_INVALID_TC_RATE = 9915;

const int DNS_ERROR_RRL_INVALID_LEAK_RATE = 9916;

const int DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = 9917;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = 9921;

const int DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = 9922;

const int DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = 9923;

const int DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = 9924;

const int DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = 9925;

const int DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = 9951;

const int DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = 9952;

const int DNS_ERROR_DEFAULT_ZONESCOPE = 9953;

const int DNS_ERROR_INVALID_ZONESCOPE_NAME = 9954;

const int DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = 9955;

const int DNS_ERROR_LOAD_ZONESCOPE_FAILED = 9956;

const int DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = 9957;

const int DNS_ERROR_INVALID_SCOPE_NAME = 9958;

const int DNS_ERROR_SCOPE_DOES_NOT_EXIST = 9959;

const int DNS_ERROR_DEFAULT_SCOPE = 9960;

const int DNS_ERROR_INVALID_SCOPE_OPERATION = 9961;

const int DNS_ERROR_SCOPE_LOCKED = 9962;

const int DNS_ERROR_SCOPE_ALREADY_EXISTS = 9963;

const int DNS_ERROR_POLICY_ALREADY_EXISTS = 9971;

const int DNS_ERROR_POLICY_DOES_NOT_EXIST = 9972;

const int DNS_ERROR_POLICY_INVALID_CRITERIA = 9973;

const int DNS_ERROR_POLICY_INVALID_SETTINGS = 9974;

const int DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = 9975;

const int DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = 9976;

const int DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = 9977;

const int DNS_ERROR_SUBNET_DOES_NOT_EXIST = 9978;

const int DNS_ERROR_SUBNET_ALREADY_EXISTS = 9979;

const int DNS_ERROR_POLICY_LOCKED = 9980;

const int DNS_ERROR_POLICY_INVALID_WEIGHT = 9981;

const int DNS_ERROR_POLICY_INVALID_NAME = 9982;

const int DNS_ERROR_POLICY_MISSING_CRITERIA = 9983;

const int DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = 9984;

const int DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = 9985;

const int DNS_ERROR_POLICY_SCOPE_MISSING = 9986;

const int DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = 9987;

const int DNS_ERROR_SERVERSCOPE_IS_REFERENCED = 9988;

const int DNS_ERROR_ZONESCOPE_IS_REFERENCED = 9989;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = 9990;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = 9991;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = 9992;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = 9993;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = 9994;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = 9995;

const int DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = 9996;

const int WSABASEERR = 10000;

const int WSAEINTR = 10004;

const int WSAEBADF = 10009;

const int WSAEACCES = 10013;

const int WSAEFAULT = 10014;

const int WSAEINVAL = 10022;

const int WSAEMFILE = 10024;

const int WSAEWOULDBLOCK = 10035;

const int WSAEINPROGRESS = 10036;

const int WSAEALREADY = 10037;

const int WSAENOTSOCK = 10038;

const int WSAEDESTADDRREQ = 10039;

const int WSAEMSGSIZE = 10040;

const int WSAEPROTOTYPE = 10041;

const int WSAENOPROTOOPT = 10042;

const int WSAEPROTONOSUPPORT = 10043;

const int WSAESOCKTNOSUPPORT = 10044;

const int WSAEOPNOTSUPP = 10045;

const int WSAEPFNOSUPPORT = 10046;

const int WSAEAFNOSUPPORT = 10047;

const int WSAEADDRINUSE = 10048;

const int WSAEADDRNOTAVAIL = 10049;

const int WSAENETDOWN = 10050;

const int WSAENETUNREACH = 10051;

const int WSAENETRESET = 10052;

const int WSAECONNABORTED = 10053;

const int WSAECONNRESET = 10054;

const int WSAENOBUFS = 10055;

const int WSAEISCONN = 10056;

const int WSAENOTCONN = 10057;

const int WSAESHUTDOWN = 10058;

const int WSAETOOMANYREFS = 10059;

const int WSAETIMEDOUT = 10060;

const int WSAECONNREFUSED = 10061;

const int WSAELOOP = 10062;

const int WSAENAMETOOLONG = 10063;

const int WSAEHOSTDOWN = 10064;

const int WSAEHOSTUNREACH = 10065;

const int WSAENOTEMPTY = 10066;

const int WSAEPROCLIM = 10067;

const int WSAEUSERS = 10068;

const int WSAEDQUOT = 10069;

const int WSAESTALE = 10070;

const int WSAEREMOTE = 10071;

const int WSASYSNOTREADY = 10091;

const int WSAVERNOTSUPPORTED = 10092;

const int WSANOTINITIALISED = 10093;

const int WSAEDISCON = 10101;

const int WSAENOMORE = 10102;

const int WSAECANCELLED = 10103;

const int WSAEINVALIDPROCTABLE = 10104;

const int WSAEINVALIDPROVIDER = 10105;

const int WSAEPROVIDERFAILEDINIT = 10106;

const int WSASYSCALLFAILURE = 10107;

const int WSASERVICE_NOT_FOUND = 10108;

const int WSATYPE_NOT_FOUND = 10109;

const int WSA_E_NO_MORE = 10110;

const int WSA_E_CANCELLED = 10111;

const int WSAEREFUSED = 10112;

const int WSAHOST_NOT_FOUND = 11001;

const int WSATRY_AGAIN = 11002;

const int WSANO_RECOVERY = 11003;

const int WSANO_DATA = 11004;

const int WSA_QOS_RECEIVERS = 11005;

const int WSA_QOS_SENDERS = 11006;

const int WSA_QOS_NO_SENDERS = 11007;

const int WSA_QOS_NO_RECEIVERS = 11008;

const int WSA_QOS_REQUEST_CONFIRMED = 11009;

const int WSA_QOS_ADMISSION_FAILURE = 11010;

const int WSA_QOS_POLICY_FAILURE = 11011;

const int WSA_QOS_BAD_STYLE = 11012;

const int WSA_QOS_BAD_OBJECT = 11013;

const int WSA_QOS_TRAFFIC_CTRL_ERROR = 11014;

const int WSA_QOS_GENERIC_ERROR = 11015;

const int WSA_QOS_ESERVICETYPE = 11016;

const int WSA_QOS_EFLOWSPEC = 11017;

const int WSA_QOS_EPROVSPECBUF = 11018;

const int WSA_QOS_EFILTERSTYLE = 11019;

const int WSA_QOS_EFILTERTYPE = 11020;

const int WSA_QOS_EFILTERCOUNT = 11021;

const int WSA_QOS_EOBJLENGTH = 11022;

const int WSA_QOS_EFLOWCOUNT = 11023;

const int WSA_QOS_EUNKOWNPSOBJ = 11024;

const int WSA_QOS_EPOLICYOBJ = 11025;

const int WSA_QOS_EFLOWDESC = 11026;

const int WSA_QOS_EPSFLOWSPEC = 11027;

const int WSA_QOS_EPSFILTERSPEC = 11028;

const int WSA_QOS_ESDMODEOBJ = 11029;

const int WSA_QOS_ESHAPERATEOBJ = 11030;

const int WSA_QOS_RESERVED_PETYPE = 11031;

const int WSA_SECURE_HOST_NOT_FOUND = 11032;

const int WSA_IPSEC_NAME_POLICY_ERROR = 11033;

const int ERROR_IPSEC_QM_POLICY_EXISTS = 13000;

const int ERROR_IPSEC_QM_POLICY_NOT_FOUND = 13001;

const int ERROR_IPSEC_QM_POLICY_IN_USE = 13002;

const int ERROR_IPSEC_MM_POLICY_EXISTS = 13003;

const int ERROR_IPSEC_MM_POLICY_NOT_FOUND = 13004;

const int ERROR_IPSEC_MM_POLICY_IN_USE = 13005;

const int ERROR_IPSEC_MM_FILTER_EXISTS = 13006;

const int ERROR_IPSEC_MM_FILTER_NOT_FOUND = 13007;

const int ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = 13008;

const int ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = 13009;

const int ERROR_IPSEC_MM_AUTH_EXISTS = 13010;

const int ERROR_IPSEC_MM_AUTH_NOT_FOUND = 13011;

const int ERROR_IPSEC_MM_AUTH_IN_USE = 13012;

const int ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = 13013;

const int ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = 13014;

const int ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = 13015;

const int ERROR_IPSEC_TUNNEL_FILTER_EXISTS = 13016;

const int ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = 13017;

const int ERROR_IPSEC_MM_FILTER_PENDING_DELETION = 13018;

const int ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = 13019;

const int ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = 13020;

const int ERROR_IPSEC_MM_POLICY_PENDING_DELETION = 13021;

const int ERROR_IPSEC_MM_AUTH_PENDING_DELETION = 13022;

const int ERROR_IPSEC_QM_POLICY_PENDING_DELETION = 13023;

const int WARNING_IPSEC_MM_POLICY_PRUNED = 13024;

const int WARNING_IPSEC_QM_POLICY_PRUNED = 13025;

const int ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = 13800;

const int ERROR_IPSEC_IKE_AUTH_FAIL = 13801;

const int ERROR_IPSEC_IKE_ATTRIB_FAIL = 13802;

const int ERROR_IPSEC_IKE_NEGOTIATION_PENDING = 13803;

const int ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = 13804;

const int ERROR_IPSEC_IKE_TIMED_OUT = 13805;

const int ERROR_IPSEC_IKE_NO_CERT = 13806;

const int ERROR_IPSEC_IKE_SA_DELETED = 13807;

const int ERROR_IPSEC_IKE_SA_REAPED = 13808;

const int ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = 13809;

const int ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = 13810;

const int ERROR_IPSEC_IKE_QUEUE_DROP_MM = 13811;

const int ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = 13812;

const int ERROR_IPSEC_IKE_DROP_NO_RESPONSE = 13813;

const int ERROR_IPSEC_IKE_MM_DELAY_DROP = 13814;

const int ERROR_IPSEC_IKE_QM_DELAY_DROP = 13815;

const int ERROR_IPSEC_IKE_ERROR = 13816;

const int ERROR_IPSEC_IKE_CRL_FAILED = 13817;

const int ERROR_IPSEC_IKE_INVALID_KEY_USAGE = 13818;

const int ERROR_IPSEC_IKE_INVALID_CERT_TYPE = 13819;

const int ERROR_IPSEC_IKE_NO_PRIVATE_KEY = 13820;

const int ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = 13821;

const int ERROR_IPSEC_IKE_DH_FAIL = 13822;

const int ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = 13823;

const int ERROR_IPSEC_IKE_INVALID_HEADER = 13824;

const int ERROR_IPSEC_IKE_NO_POLICY = 13825;

const int ERROR_IPSEC_IKE_INVALID_SIGNATURE = 13826;

const int ERROR_IPSEC_IKE_KERBEROS_ERROR = 13827;

const int ERROR_IPSEC_IKE_NO_PUBLIC_KEY = 13828;

const int ERROR_IPSEC_IKE_PROCESS_ERR = 13829;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SA = 13830;

const int ERROR_IPSEC_IKE_PROCESS_ERR_PROP = 13831;

const int ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = 13832;

const int ERROR_IPSEC_IKE_PROCESS_ERR_KE = 13833;

const int ERROR_IPSEC_IKE_PROCESS_ERR_ID = 13834;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT = 13835;

const int ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = 13836;

const int ERROR_IPSEC_IKE_PROCESS_ERR_HASH = 13837;

const int ERROR_IPSEC_IKE_PROCESS_ERR_SIG = 13838;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = 13839;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = 13840;

const int ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = 13841;

const int ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = 13842;

const int ERROR_IPSEC_IKE_INVALID_PAYLOAD = 13843;

const int ERROR_IPSEC_IKE_LOAD_SOFT_SA = 13844;

const int ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = 13845;

const int ERROR_IPSEC_IKE_INVALID_COOKIE = 13846;

const int ERROR_IPSEC_IKE_NO_PEER_CERT = 13847;

const int ERROR_IPSEC_IKE_PEER_CRL_FAILED = 13848;

const int ERROR_IPSEC_IKE_POLICY_CHANGE = 13849;

const int ERROR_IPSEC_IKE_NO_MM_POLICY = 13850;

const int ERROR_IPSEC_IKE_NOTCBPRIV = 13851;

const int ERROR_IPSEC_IKE_SECLOADFAIL = 13852;

const int ERROR_IPSEC_IKE_FAILSSPINIT = 13853;

const int ERROR_IPSEC_IKE_FAILQUERYSSP = 13854;

const int ERROR_IPSEC_IKE_SRVACQFAIL = 13855;

const int ERROR_IPSEC_IKE_SRVQUERYCRED = 13856;

const int ERROR_IPSEC_IKE_GETSPIFAIL = 13857;

const int ERROR_IPSEC_IKE_INVALID_FILTER = 13858;

const int ERROR_IPSEC_IKE_OUT_OF_MEMORY = 13859;

const int ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = 13860;

const int ERROR_IPSEC_IKE_INVALID_POLICY = 13861;

const int ERROR_IPSEC_IKE_UNKNOWN_DOI = 13862;

const int ERROR_IPSEC_IKE_INVALID_SITUATION = 13863;

const int ERROR_IPSEC_IKE_DH_FAILURE = 13864;

const int ERROR_IPSEC_IKE_INVALID_GROUP = 13865;

const int ERROR_IPSEC_IKE_ENCRYPT = 13866;

const int ERROR_IPSEC_IKE_DECRYPT = 13867;

const int ERROR_IPSEC_IKE_POLICY_MATCH = 13868;

const int ERROR_IPSEC_IKE_UNSUPPORTED_ID = 13869;

const int ERROR_IPSEC_IKE_INVALID_HASH = 13870;

const int ERROR_IPSEC_IKE_INVALID_HASH_ALG = 13871;

const int ERROR_IPSEC_IKE_INVALID_HASH_SIZE = 13872;

const int ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = 13873;

const int ERROR_IPSEC_IKE_INVALID_AUTH_ALG = 13874;

const int ERROR_IPSEC_IKE_INVALID_SIG = 13875;

const int ERROR_IPSEC_IKE_LOAD_FAILED = 13876;

const int ERROR_IPSEC_IKE_RPC_DELETE = 13877;

const int ERROR_IPSEC_IKE_BENIGN_REINIT = 13878;

const int ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = 13879;

const int ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = 13880;

const int ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = 13881;

const int ERROR_IPSEC_IKE_MM_LIMIT = 13882;

const int ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = 13883;

const int ERROR_IPSEC_IKE_QM_LIMIT = 13884;

const int ERROR_IPSEC_IKE_MM_EXPIRED = 13885;

const int ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = 13886;

const int ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = 13887;

const int ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = 13888;

const int ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = 13889;

const int ERROR_IPSEC_IKE_DOS_COOKIE_SENT = 13890;

const int ERROR_IPSEC_IKE_SHUTTING_DOWN = 13891;

const int ERROR_IPSEC_IKE_CGA_AUTH_FAILED = 13892;

const int ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = 13893;

const int ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = 13894;

const int ERROR_IPSEC_IKE_QM_EXPIRED = 13895;

const int ERROR_IPSEC_IKE_TOO_MANY_FILTERS = 13896;

const int ERROR_IPSEC_IKE_NEG_STATUS_END = 13897;

const int ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = 13898;

const int ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = 13899;

const int ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = 13900;

const int ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = 13901;

const int ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = 13902;

const int ERROR_IPSEC_IKE_RATELIMIT_DROP = 13903;

const int ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = 13904;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = 13905;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = 13906;

const int ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = 13907;

const int ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = 13908;

const int ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = 13909;

const int ERROR_IPSEC_BAD_SPI = 13910;

const int ERROR_IPSEC_SA_LIFETIME_EXPIRED = 13911;

const int ERROR_IPSEC_WRONG_SA = 13912;

const int ERROR_IPSEC_REPLAY_CHECK_FAILED = 13913;

const int ERROR_IPSEC_INVALID_PACKET = 13914;

const int ERROR_IPSEC_INTEGRITY_CHECK_FAILED = 13915;

const int ERROR_IPSEC_CLEAR_TEXT_DROP = 13916;

const int ERROR_IPSEC_AUTH_FIREWALL_DROP = 13917;

const int ERROR_IPSEC_THROTTLE_DROP = 13918;

const int ERROR_IPSEC_DOSP_BLOCK = 13925;

const int ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = 13926;

const int ERROR_IPSEC_DOSP_INVALID_PACKET = 13927;

const int ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = 13928;

const int ERROR_IPSEC_DOSP_MAX_ENTRIES = 13929;

const int ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = 13930;

const int ERROR_IPSEC_DOSP_NOT_INSTALLED = 13931;

const int ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = 13932;

const int ERROR_SXS_SECTION_NOT_FOUND = 14000;

const int ERROR_SXS_CANT_GEN_ACTCTX = 14001;

const int ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = 14002;

const int ERROR_SXS_ASSEMBLY_NOT_FOUND = 14003;

const int ERROR_SXS_MANIFEST_FORMAT_ERROR = 14004;

const int ERROR_SXS_MANIFEST_PARSE_ERROR = 14005;

const int ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = 14006;

const int ERROR_SXS_KEY_NOT_FOUND = 14007;

const int ERROR_SXS_VERSION_CONFLICT = 14008;

const int ERROR_SXS_WRONG_SECTION_TYPE = 14009;

const int ERROR_SXS_THREAD_QUERIES_DISABLED = 14010;

const int ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = 14011;

const int ERROR_SXS_UNKNOWN_ENCODING_GROUP = 14012;

const int ERROR_SXS_UNKNOWN_ENCODING = 14013;

const int ERROR_SXS_INVALID_XML_NAMESPACE_URI = 14014;

const int ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14015;

const int ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = 14016;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = 14017;

const int ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = 14018;

const int ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = 14019;

const int ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = 14020;

const int ERROR_SXS_DUPLICATE_DLL_NAME = 14021;

const int ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = 14022;

const int ERROR_SXS_DUPLICATE_CLSID = 14023;

const int ERROR_SXS_DUPLICATE_IID = 14024;

const int ERROR_SXS_DUPLICATE_TLBID = 14025;

const int ERROR_SXS_DUPLICATE_PROGID = 14026;

const int ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = 14027;

const int ERROR_SXS_FILE_HASH_MISMATCH = 14028;

const int ERROR_SXS_POLICY_PARSE_ERROR = 14029;

const int ERROR_SXS_XML_E_MISSINGQUOTE = 14030;

const int ERROR_SXS_XML_E_COMMENTSYNTAX = 14031;

const int ERROR_SXS_XML_E_BADSTARTNAMECHAR = 14032;

const int ERROR_SXS_XML_E_BADNAMECHAR = 14033;

const int ERROR_SXS_XML_E_BADCHARINSTRING = 14034;

const int ERROR_SXS_XML_E_XMLDECLSYNTAX = 14035;

const int ERROR_SXS_XML_E_BADCHARDATA = 14036;

const int ERROR_SXS_XML_E_MISSINGWHITESPACE = 14037;

const int ERROR_SXS_XML_E_EXPECTINGTAGEND = 14038;

const int ERROR_SXS_XML_E_MISSINGSEMICOLON = 14039;

const int ERROR_SXS_XML_E_UNBALANCEDPAREN = 14040;

const int ERROR_SXS_XML_E_INTERNALERROR = 14041;

const int ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = 14042;

const int ERROR_SXS_XML_E_INCOMPLETE_ENCODING = 14043;

const int ERROR_SXS_XML_E_MISSING_PAREN = 14044;

const int ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = 14045;

const int ERROR_SXS_XML_E_MULTIPLE_COLONS = 14046;

const int ERROR_SXS_XML_E_INVALID_DECIMAL = 14047;

const int ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = 14048;

const int ERROR_SXS_XML_E_INVALID_UNICODE = 14049;

const int ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = 14050;

const int ERROR_SXS_XML_E_UNEXPECTEDENDTAG = 14051;

const int ERROR_SXS_XML_E_UNCLOSEDTAG = 14052;

const int ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = 14053;

const int ERROR_SXS_XML_E_MULTIPLEROOTS = 14054;

const int ERROR_SXS_XML_E_INVALIDATROOTLEVEL = 14055;

const int ERROR_SXS_XML_E_BADXMLDECL = 14056;

const int ERROR_SXS_XML_E_MISSINGROOT = 14057;

const int ERROR_SXS_XML_E_UNEXPECTEDEOF = 14058;

const int ERROR_SXS_XML_E_BADPEREFINSUBSET = 14059;

const int ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = 14060;

const int ERROR_SXS_XML_E_UNCLOSEDENDTAG = 14061;

const int ERROR_SXS_XML_E_UNCLOSEDSTRING = 14062;

const int ERROR_SXS_XML_E_UNCLOSEDCOMMENT = 14063;

const int ERROR_SXS_XML_E_UNCLOSEDDECL = 14064;

const int ERROR_SXS_XML_E_UNCLOSEDCDATA = 14065;

const int ERROR_SXS_XML_E_RESERVEDNAMESPACE = 14066;

const int ERROR_SXS_XML_E_INVALIDENCODING = 14067;

const int ERROR_SXS_XML_E_INVALIDSWITCH = 14068;

const int ERROR_SXS_XML_E_BADXMLCASE = 14069;

const int ERROR_SXS_XML_E_INVALID_STANDALONE = 14070;

const int ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = 14071;

const int ERROR_SXS_XML_E_INVALID_VERSION = 14072;

const int ERROR_SXS_XML_E_MISSINGEQUALS = 14073;

const int ERROR_SXS_PROTECTION_RECOVERY_FAILED = 14074;

const int ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = 14075;

const int ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = 14076;

const int ERROR_SXS_UNTRANSLATABLE_HRESULT = 14077;

const int ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = 14078;

const int ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = 14079;

const int ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = 14080;

const int ERROR_SXS_ASSEMBLY_MISSING = 14081;

const int ERROR_SXS_CORRUPT_ACTIVATION_STACK = 14082;

const int ERROR_SXS_CORRUPTION = 14083;

const int ERROR_SXS_EARLY_DEACTIVATION = 14084;

const int ERROR_SXS_INVALID_DEACTIVATION = 14085;

const int ERROR_SXS_MULTIPLE_DEACTIVATION = 14086;

const int ERROR_SXS_PROCESS_TERMINATION_REQUESTED = 14087;

const int ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = 14088;

const int ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = 14089;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = 14090;

const int ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = 14091;

const int ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = 14092;

const int ERROR_SXS_IDENTITY_PARSE_ERROR = 14093;

const int ERROR_MALFORMED_SUBSTITUTION_STRING = 14094;

const int ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = 14095;

const int ERROR_UNMAPPED_SUBSTITUTION_STRING = 14096;

const int ERROR_SXS_ASSEMBLY_NOT_LOCKED = 14097;

const int ERROR_SXS_COMPONENT_STORE_CORRUPT = 14098;

const int ERROR_ADVANCED_INSTALLER_FAILED = 14099;

const int ERROR_XML_ENCODING_MISMATCH = 14100;

const int ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = 14101;

const int ERROR_SXS_IDENTITIES_DIFFERENT = 14102;

const int ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = 14103;

const int ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = 14104;

const int ERROR_SXS_MANIFEST_TOO_BIG = 14105;

const int ERROR_SXS_SETTING_NOT_REGISTERED = 14106;

const int ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = 14107;

const int ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = 14108;

const int ERROR_GENERIC_COMMAND_FAILED = 14109;

const int ERROR_SXS_FILE_HASH_MISSING = 14110;

const int ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = 14111;

const int ERROR_EVT_INVALID_CHANNEL_PATH = 15000;

const int ERROR_EVT_INVALID_QUERY = 15001;

const int ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = 15002;

const int ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = 15003;

const int ERROR_EVT_INVALID_PUBLISHER_NAME = 15004;

const int ERROR_EVT_INVALID_EVENT_DATA = 15005;

const int ERROR_EVT_CHANNEL_NOT_FOUND = 15007;

const int ERROR_EVT_MALFORMED_XML_TEXT = 15008;

const int ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = 15009;

const int ERROR_EVT_CONFIGURATION_ERROR = 15010;

const int ERROR_EVT_QUERY_RESULT_STALE = 15011;

const int ERROR_EVT_QUERY_RESULT_INVALID_POSITION = 15012;

const int ERROR_EVT_NON_VALIDATING_MSXML = 15013;

const int ERROR_EVT_FILTER_ALREADYSCOPED = 15014;

const int ERROR_EVT_FILTER_NOTELTSET = 15015;

const int ERROR_EVT_FILTER_INVARG = 15016;

const int ERROR_EVT_FILTER_INVTEST = 15017;

const int ERROR_EVT_FILTER_INVTYPE = 15018;

const int ERROR_EVT_FILTER_PARSEERR = 15019;

const int ERROR_EVT_FILTER_UNSUPPORTEDOP = 15020;

const int ERROR_EVT_FILTER_UNEXPECTEDTOKEN = 15021;

const int ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = 15022;

const int ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = 15023;

const int ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = 15024;

const int ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = 15025;

const int ERROR_EVT_FILTER_TOO_COMPLEX = 15026;

const int ERROR_EVT_MESSAGE_NOT_FOUND = 15027;

const int ERROR_EVT_MESSAGE_ID_NOT_FOUND = 15028;

const int ERROR_EVT_UNRESOLVED_VALUE_INSERT = 15029;

const int ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = 15030;

const int ERROR_EVT_MAX_INSERTS_REACHED = 15031;

const int ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = 15032;

const int ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = 15033;

const int ERROR_EVT_VERSION_TOO_OLD = 15034;

const int ERROR_EVT_VERSION_TOO_NEW = 15035;

const int ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = 15036;

const int ERROR_EVT_PUBLISHER_DISABLED = 15037;

const int ERROR_EVT_FILTER_OUT_OF_RANGE = 15038;

const int ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = 15080;

const int ERROR_EC_LOG_DISABLED = 15081;

const int ERROR_EC_CIRCULAR_FORWARDING = 15082;

const int ERROR_EC_CREDSTORE_FULL = 15083;

const int ERROR_EC_CRED_NOT_FOUND = 15084;

const int ERROR_EC_NO_ACTIVE_CHANNEL = 15085;

const int ERROR_MUI_FILE_NOT_FOUND = 15100;

const int ERROR_MUI_INVALID_FILE = 15101;

const int ERROR_MUI_INVALID_RC_CONFIG = 15102;

const int ERROR_MUI_INVALID_LOCALE_NAME = 15103;

const int ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = 15104;

const int ERROR_MUI_FILE_NOT_LOADED = 15105;

const int ERROR_RESOURCE_ENUM_USER_STOP = 15106;

const int ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = 15107;

const int ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = 15108;

const int ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = 15110;

const int ERROR_MRM_INVALID_PRICONFIG = 15111;

const int ERROR_MRM_INVALID_FILE_TYPE = 15112;

const int ERROR_MRM_UNKNOWN_QUALIFIER = 15113;

const int ERROR_MRM_INVALID_QUALIFIER_VALUE = 15114;

const int ERROR_MRM_NO_CANDIDATE = 15115;

const int ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = 15116;

const int ERROR_MRM_RESOURCE_TYPE_MISMATCH = 15117;

const int ERROR_MRM_DUPLICATE_MAP_NAME = 15118;

const int ERROR_MRM_DUPLICATE_ENTRY = 15119;

const int ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = 15120;

const int ERROR_MRM_FILEPATH_TOO_LONG = 15121;

const int ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = 15122;

const int ERROR_MRM_INVALID_PRI_FILE = 15126;

const int ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = 15127;

const int ERROR_MRM_MAP_NOT_FOUND = 15135;

const int ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = 15136;

const int ERROR_MRM_INVALID_QUALIFIER_OPERATOR = 15137;

const int ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = 15138;

const int ERROR_MRM_AUTOMERGE_ENABLED = 15139;

const int ERROR_MRM_TOO_MANY_RESOURCES = 15140;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = 15141;

const int ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = 15142;

const int ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = 15143;

const int ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = 15144;

const int ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = 15145;

const int ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = 15146;

const int ERROR_MRM_GENERATION_COUNT_MISMATCH = 15147;

const int ERROR_PRI_MERGE_VERSION_MISMATCH = 15148;

const int ERROR_PRI_MERGE_MISSING_SCHEMA = 15149;

const int ERROR_PRI_MERGE_LOAD_FILE_FAILED = 15150;

const int ERROR_PRI_MERGE_ADD_FILE_FAILED = 15151;

const int ERROR_PRI_MERGE_WRITE_FILE_FAILED = 15152;

const int ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = 15153;

const int ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = 15154;

const int ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = 15155;

const int ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = 15156;

const int ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = 15157;

const int ERROR_PRI_MERGE_INVALID_FILE_NAME = 15158;

const int ERROR_MRM_PACKAGE_NOT_FOUND = 15159;

const int ERROR_MRM_MISSING_DEFAULT_LANGUAGE = 15160;

const int ERROR_MRM_SCOPE_ITEM_CONFLICT = 15161;

const int ERROR_MCA_INVALID_CAPABILITIES_STRING = 15200;

const int ERROR_MCA_INVALID_VCP_VERSION = 15201;

const int ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = 15202;

const int ERROR_MCA_MCCS_VERSION_MISMATCH = 15203;

const int ERROR_MCA_UNSUPPORTED_MCCS_VERSION = 15204;

const int ERROR_MCA_INTERNAL_ERROR = 15205;

const int ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = 15206;

const int ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = 15207;

const int ERROR_AMBIGUOUS_SYSTEM_DEVICE = 15250;

const int ERROR_SYSTEM_DEVICE_NOT_FOUND = 15299;

const int ERROR_HASH_NOT_SUPPORTED = 15300;

const int ERROR_HASH_NOT_PRESENT = 15301;

const int ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = 15321;

const int ERROR_GPIO_CLIENT_INFORMATION_INVALID = 15322;

const int ERROR_GPIO_VERSION_NOT_SUPPORTED = 15323;

const int ERROR_GPIO_INVALID_REGISTRATION_PACKET = 15324;

const int ERROR_GPIO_OPERATION_DENIED = 15325;

const int ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = 15326;

const int ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = 15327;

const int ERROR_CANNOT_SWITCH_RUNLEVEL = 15400;

const int ERROR_INVALID_RUNLEVEL_SETTING = 15401;

const int ERROR_RUNLEVEL_SWITCH_TIMEOUT = 15402;

const int ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = 15403;

const int ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = 15404;

const int ERROR_SERVICES_FAILED_AUTOSTART = 15405;

const int ERROR_COM_TASK_STOP_PENDING = 15501;

const int ERROR_INSTALL_OPEN_PACKAGE_FAILED = 15600;

const int ERROR_INSTALL_PACKAGE_NOT_FOUND = 15601;

const int ERROR_INSTALL_INVALID_PACKAGE = 15602;

const int ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = 15603;

const int ERROR_INSTALL_OUT_OF_DISK_SPACE = 15604;

const int ERROR_INSTALL_NETWORK_FAILURE = 15605;

const int ERROR_INSTALL_REGISTRATION_FAILURE = 15606;

const int ERROR_INSTALL_DEREGISTRATION_FAILURE = 15607;

const int ERROR_INSTALL_CANCEL = 15608;

const int ERROR_INSTALL_FAILED = 15609;

const int ERROR_REMOVE_FAILED = 15610;

const int ERROR_PACKAGE_ALREADY_EXISTS = 15611;

const int ERROR_NEEDS_REMEDIATION = 15612;

const int ERROR_INSTALL_PREREQUISITE_FAILED = 15613;

const int ERROR_PACKAGE_REPOSITORY_CORRUPTED = 15614;

const int ERROR_INSTALL_POLICY_FAILURE = 15615;

const int ERROR_PACKAGE_UPDATING = 15616;

const int ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = 15617;

const int ERROR_PACKAGES_IN_USE = 15618;

const int ERROR_RECOVERY_FILE_CORRUPT = 15619;

const int ERROR_INVALID_STAGED_SIGNATURE = 15620;

const int ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = 15621;

const int ERROR_INSTALL_PACKAGE_DOWNGRADE = 15622;

const int ERROR_SYSTEM_NEEDS_REMEDIATION = 15623;

const int ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = 15624;

const int ERROR_RESILIENCY_FILE_CORRUPT = 15625;

const int ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = 15626;

const int ERROR_PACKAGE_MOVE_FAILED = 15627;

const int ERROR_INSTALL_VOLUME_NOT_EMPTY = 15628;

const int ERROR_INSTALL_VOLUME_OFFLINE = 15629;

const int ERROR_INSTALL_VOLUME_CORRUPT = 15630;

const int ERROR_NEEDS_REGISTRATION = 15631;

const int ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = 15632;

const int ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = 15633;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = 15634;

const int ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = 15635;

const int ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = 15636;

const int ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = 15637;

const int ERROR_PACKAGE_STAGING_ONHOLD = 15638;

const int ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = 15639;

const int
    ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15640;

const int ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = 15641;

const int ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED =
    15642;

const int ERROR_PACKAGES_REPUTATION_CHECK_FAILED = 15643;

const int ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = 15644;

const int ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = 15645;

const int ERROR_APPINSTALLER_ACTIVATION_BLOCKED = 15646;

const int ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = 15647;

const int ERROR_APPX_RAW_DATA_WRITE_FAILED = 15648;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = 15649;

const int ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = 15650;

const int ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = 15651;

const int ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = 15652;

const int ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = 15653;

const int ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = 15654;

const int ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = 15655;

const int ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = 15656;

const int ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED = 15657;

const int ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST = 15658;

const int ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT = 15659;

const int ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15660;

const int ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE = 15661;

const int ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED = 15662;

const int
    ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY =
    15663;

const int ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS = 15664;

const int ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED = 15665;

const int ERROR_MACHINE_SCOPE_NOT_ALLOWED = 15666;

const int ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED = 15667;

const int ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE = 15668;

const int ERROR_PACKAGE_NOT_REGISTERED_FOR_USER = 15669;

const int ERROR_PACKAGE_NAME_MISMATCH = 15670;

const int ERROR_APPINSTALLER_URI_IN_USE = 15671;

const int ERROR_APPINSTALLER_IS_MANAGED_BY_SYSTEM = 15672;

const int APPMODEL_ERROR_NO_PACKAGE = 15700;

const int APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = 15701;

const int APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = 15702;

const int APPMODEL_ERROR_NO_APPLICATION = 15703;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = 15704;

const int APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = 15705;

const int APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = 15706;

const int APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = 15707;

const int ERROR_STATE_LOAD_STORE_FAILED = 15800;

const int ERROR_STATE_GET_VERSION_FAILED = 15801;

const int ERROR_STATE_SET_VERSION_FAILED = 15802;

const int ERROR_STATE_STRUCTURED_RESET_FAILED = 15803;

const int ERROR_STATE_OPEN_CONTAINER_FAILED = 15804;

const int ERROR_STATE_CREATE_CONTAINER_FAILED = 15805;

const int ERROR_STATE_DELETE_CONTAINER_FAILED = 15806;

const int ERROR_STATE_READ_SETTING_FAILED = 15807;

const int ERROR_STATE_WRITE_SETTING_FAILED = 15808;

const int ERROR_STATE_DELETE_SETTING_FAILED = 15809;

const int ERROR_STATE_QUERY_SETTING_FAILED = 15810;

const int ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = 15811;

const int ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = 15812;

const int ERROR_STATE_ENUMERATE_CONTAINER_FAILED = 15813;

const int ERROR_STATE_ENUMERATE_SETTINGS_FAILED = 15814;

const int ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15815;

const int ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = 15816;

const int ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = 15817;

const int ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = 15818;

const int ERROR_API_UNAVAILABLE = 15841;

const int STORE_ERROR_UNLICENSED = 15861;

const int STORE_ERROR_UNLICENSED_USER = 15862;

const int STORE_ERROR_PENDING_COM_TRANSACTION = 15863;

const int STORE_ERROR_LICENSE_REVOKED = 15864;

const int SEVERITY_SUCCESS = 0;

const int SEVERITY_ERROR = 1;

const int FACILITY_NT_BIT = 268435456;

const int E_NOT_SET = -2147023728;

const int E_NOT_VALID_STATE = -2147019873;

const int E_NOT_SUFFICIENT_BUFFER = -2147024774;

const int E_TIME_SENSITIVE_THREAD = -2147024474;

const int E_NO_TASK_QUEUE = -2147024469;

const int NOERROR = 0;

const int E_UNEXPECTED = -2147418113;

const int E_NOTIMPL = -2147467263;

const int E_OUTOFMEMORY = -2147024882;

const int E_INVALIDARG = -2147024809;

const int E_NOINTERFACE = -2147467262;

const int E_POINTER = -2147467261;

const int E_HANDLE = -2147024890;

const int E_ABORT = -2147467260;

const int E_FAIL = -2147467259;

const int E_ACCESSDENIED = -2147024891;

const int E_PENDING = -2147483638;

const int E_BOUNDS = -2147483637;

const int E_CHANGED_STATE = -2147483636;

const int E_ILLEGAL_STATE_CHANGE = -2147483635;

const int E_ILLEGAL_METHOD_CALL = -2147483634;

const int RO_E_METADATA_NAME_NOT_FOUND = -2147483633;

const int RO_E_METADATA_NAME_IS_NAMESPACE = -2147483632;

const int RO_E_METADATA_INVALID_TYPE_FORMAT = -2147483631;

const int RO_E_INVALID_METADATA_FILE = -2147483630;

const int RO_E_CLOSED = -2147483629;

const int RO_E_EXCLUSIVE_WRITE = -2147483628;

const int RO_E_CHANGE_NOTIFICATION_IN_PROGRESS = -2147483627;

const int RO_E_ERROR_STRING_NOT_FOUND = -2147483626;

const int E_STRING_NOT_NULL_TERMINATED = -2147483625;

const int E_ILLEGAL_DELEGATE_ASSIGNMENT = -2147483624;

const int E_ASYNC_OPERATION_NOT_STARTED = -2147483623;

const int E_APPLICATION_EXITING = -2147483622;

const int E_APPLICATION_VIEW_EXITING = -2147483621;

const int RO_E_MUST_BE_AGILE = -2147483620;

const int RO_E_UNSUPPORTED_FROM_MTA = -2147483619;

const int RO_E_COMMITTED = -2147483618;

const int RO_E_BLOCKED_CROSS_ASTA_CALL = -2147483617;

const int RO_E_CANNOT_ACTIVATE_FULL_TRUST_SERVER = -2147483616;

const int RO_E_CANNOT_ACTIVATE_UNIVERSAL_APPLICATION_SERVER = -2147483615;

const int CO_E_INIT_TLS = -2147467258;

const int CO_E_INIT_SHARED_ALLOCATOR = -2147467257;

const int CO_E_INIT_MEMORY_ALLOCATOR = -2147467256;

const int CO_E_INIT_CLASS_CACHE = -2147467255;

const int CO_E_INIT_RPC_CHANNEL = -2147467254;

const int CO_E_INIT_TLS_SET_CHANNEL_CONTROL = -2147467253;

const int CO_E_INIT_TLS_CHANNEL_CONTROL = -2147467252;

const int CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = -2147467251;

const int CO_E_INIT_SCM_MUTEX_EXISTS = -2147467250;

const int CO_E_INIT_SCM_FILE_MAPPING_EXISTS = -2147467249;

const int CO_E_INIT_SCM_MAP_VIEW_OF_FILE = -2147467248;

const int CO_E_INIT_SCM_EXEC_FAILURE = -2147467247;

const int CO_E_INIT_ONLY_SINGLE_THREADED = -2147467246;

const int CO_E_CANT_REMOTE = -2147467245;

const int CO_E_BAD_SERVER_NAME = -2147467244;

const int CO_E_WRONG_SERVER_IDENTITY = -2147467243;

const int CO_E_OLE1DDE_DISABLED = -2147467242;

const int CO_E_RUNAS_SYNTAX = -2147467241;

const int CO_E_CREATEPROCESS_FAILURE = -2147467240;

const int CO_E_RUNAS_CREATEPROCESS_FAILURE = -2147467239;

const int CO_E_RUNAS_LOGON_FAILURE = -2147467238;

const int CO_E_LAUNCH_PERMSSION_DENIED = -2147467237;

const int CO_E_START_SERVICE_FAILURE = -2147467236;

const int CO_E_REMOTE_COMMUNICATION_FAILURE = -2147467235;

const int CO_E_SERVER_START_TIMEOUT = -2147467234;

const int CO_E_CLSREG_INCONSISTENT = -2147467233;

const int CO_E_IIDREG_INCONSISTENT = -2147467232;

const int CO_E_NOT_SUPPORTED = -2147467231;

const int CO_E_RELOAD_DLL = -2147467230;

const int CO_E_MSI_ERROR = -2147467229;

const int CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = -2147467228;

const int CO_E_SERVER_PAUSED = -2147467227;

const int CO_E_SERVER_NOT_PAUSED = -2147467226;

const int CO_E_CLASS_DISABLED = -2147467225;

const int CO_E_CLRNOTAVAILABLE = -2147467224;

const int CO_E_ASYNC_WORK_REJECTED = -2147467223;

const int CO_E_SERVER_INIT_TIMEOUT = -2147467222;

const int CO_E_NO_SECCTX_IN_ACTIVATE = -2147467221;

const int CO_E_TRACKER_CONFIG = -2147467216;

const int CO_E_THREADPOOL_CONFIG = -2147467215;

const int CO_E_SXS_CONFIG = -2147467214;

const int CO_E_MALFORMED_SPN = -2147467213;

const int CO_E_UNREVOKED_REGISTRATION_ON_APARTMENT_SHUTDOWN = -2147467212;

const int CO_E_PREMATURE_STUB_RUNDOWN = -2147467211;

const int S_OK = 0;

const int S_FALSE = 1;

const int OLE_E_FIRST = -2147221504;

const int OLE_E_LAST = -2147221249;

const int OLE_S_FIRST = 262144;

const int OLE_S_LAST = 262399;

const int OLE_E_OLEVERB = -2147221504;

const int OLE_E_ADVF = -2147221503;

const int OLE_E_ENUM_NOMORE = -2147221502;

const int OLE_E_ADVISENOTSUPPORTED = -2147221501;

const int OLE_E_NOCONNECTION = -2147221500;

const int OLE_E_NOTRUNNING = -2147221499;

const int OLE_E_NOCACHE = -2147221498;

const int OLE_E_BLANK = -2147221497;

const int OLE_E_CLASSDIFF = -2147221496;

const int OLE_E_CANT_GETMONIKER = -2147221495;

const int OLE_E_CANT_BINDTOSOURCE = -2147221494;

const int OLE_E_STATIC = -2147221493;

const int OLE_E_PROMPTSAVECANCELLED = -2147221492;

const int OLE_E_INVALIDRECT = -2147221491;

const int OLE_E_WRONGCOMPOBJ = -2147221490;

const int OLE_E_INVALIDHWND = -2147221489;

const int OLE_E_NOT_INPLACEACTIVE = -2147221488;

const int OLE_E_CANTCONVERT = -2147221487;

const int OLE_E_NOSTORAGE = -2147221486;

const int DV_E_FORMATETC = -2147221404;

const int DV_E_DVTARGETDEVICE = -2147221403;

const int DV_E_STGMEDIUM = -2147221402;

const int DV_E_STATDATA = -2147221401;

const int DV_E_LINDEX = -2147221400;

const int DV_E_TYMED = -2147221399;

const int DV_E_CLIPFORMAT = -2147221398;

const int DV_E_DVASPECT = -2147221397;

const int DV_E_DVTARGETDEVICE_SIZE = -2147221396;

const int DV_E_NOIVIEWOBJECT = -2147221395;

const int DRAGDROP_E_FIRST = 2147746048;

const int DRAGDROP_E_LAST = 2147746063;

const int DRAGDROP_S_FIRST = 262400;

const int DRAGDROP_S_LAST = 262415;

const int DRAGDROP_E_NOTREGISTERED = -2147221248;

const int DRAGDROP_E_ALREADYREGISTERED = -2147221247;

const int DRAGDROP_E_INVALIDHWND = -2147221246;

const int DRAGDROP_E_CONCURRENT_DRAG_ATTEMPTED = -2147221245;

const int CLASSFACTORY_E_FIRST = 2147746064;

const int CLASSFACTORY_E_LAST = 2147746079;

const int CLASSFACTORY_S_FIRST = 262416;

const int CLASSFACTORY_S_LAST = 262431;

const int CLASS_E_NOAGGREGATION = -2147221232;

const int CLASS_E_CLASSNOTAVAILABLE = -2147221231;

const int CLASS_E_NOTLICENSED = -2147221230;

const int MARSHAL_E_FIRST = 2147746080;

const int MARSHAL_E_LAST = 2147746095;

const int MARSHAL_S_FIRST = 262432;

const int MARSHAL_S_LAST = 262447;

const int DATA_E_FIRST = 2147746096;

const int DATA_E_LAST = 2147746111;

const int DATA_S_FIRST = 262448;

const int DATA_S_LAST = 262463;

const int VIEW_E_FIRST = 2147746112;

const int VIEW_E_LAST = 2147746127;

const int VIEW_S_FIRST = 262464;

const int VIEW_S_LAST = 262479;

const int VIEW_E_DRAW = -2147221184;

const int REGDB_E_FIRST = 2147746128;

const int REGDB_E_LAST = 2147746143;

const int REGDB_S_FIRST = 262480;

const int REGDB_S_LAST = 262495;

const int REGDB_E_READREGDB = -2147221168;

const int REGDB_E_WRITEREGDB = -2147221167;

const int REGDB_E_KEYMISSING = -2147221166;

const int REGDB_E_INVALIDVALUE = -2147221165;

const int REGDB_E_CLASSNOTREG = -2147221164;

const int REGDB_E_IIDNOTREG = -2147221163;

const int REGDB_E_BADTHREADINGMODEL = -2147221162;

const int REGDB_E_PACKAGEPOLICYVIOLATION = -2147221161;

const int CAT_E_FIRST = 2147746144;

const int CAT_E_LAST = 2147746145;

const int CAT_E_CATIDNOEXIST = -2147221152;

const int CAT_E_NODESCRIPTION = -2147221151;

const int CS_E_FIRST = 2147746148;

const int CS_E_LAST = 2147746159;

const int CS_E_PACKAGE_NOTFOUND = -2147221148;

const int CS_E_NOT_DELETABLE = -2147221147;

const int CS_E_CLASS_NOTFOUND = -2147221146;

const int CS_E_INVALID_VERSION = -2147221145;

const int CS_E_NO_CLASSSTORE = -2147221144;

const int CS_E_OBJECT_NOTFOUND = -2147221143;

const int CS_E_OBJECT_ALREADY_EXISTS = -2147221142;

const int CS_E_INVALID_PATH = -2147221141;

const int CS_E_NETWORK_ERROR = -2147221140;

const int CS_E_ADMIN_LIMIT_EXCEEDED = -2147221139;

const int CS_E_SCHEMA_MISMATCH = -2147221138;

const int CS_E_INTERNAL_ERROR = -2147221137;

const int CACHE_E_FIRST = 2147746160;

const int CACHE_E_LAST = 2147746175;

const int CACHE_S_FIRST = 262512;

const int CACHE_S_LAST = 262527;

const int CACHE_E_NOCACHE_UPDATED = -2147221136;

const int OLEOBJ_E_FIRST = 2147746176;

const int OLEOBJ_E_LAST = 2147746191;

const int OLEOBJ_S_FIRST = 262528;

const int OLEOBJ_S_LAST = 262543;

const int OLEOBJ_E_NOVERBS = -2147221120;

const int OLEOBJ_E_INVALIDVERB = -2147221119;

const int CLIENTSITE_E_FIRST = 2147746192;

const int CLIENTSITE_E_LAST = 2147746207;

const int CLIENTSITE_S_FIRST = 262544;

const int CLIENTSITE_S_LAST = 262559;

const int INPLACE_E_NOTUNDOABLE = -2147221088;

const int INPLACE_E_NOTOOLSPACE = -2147221087;

const int INPLACE_E_FIRST = 2147746208;

const int INPLACE_E_LAST = 2147746223;

const int INPLACE_S_FIRST = 262560;

const int INPLACE_S_LAST = 262575;

const int ENUM_E_FIRST = 2147746224;

const int ENUM_E_LAST = 2147746239;

const int ENUM_S_FIRST = 262576;

const int ENUM_S_LAST = 262591;

const int CONVERT10_E_FIRST = 2147746240;

const int CONVERT10_E_LAST = 2147746255;

const int CONVERT10_S_FIRST = 262592;

const int CONVERT10_S_LAST = 262607;

const int CONVERT10_E_OLESTREAM_GET = -2147221056;

const int CONVERT10_E_OLESTREAM_PUT = -2147221055;

const int CONVERT10_E_OLESTREAM_FMT = -2147221054;

const int CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = -2147221053;

const int CONVERT10_E_STG_FMT = -2147221052;

const int CONVERT10_E_STG_NO_STD_STREAM = -2147221051;

const int CONVERT10_E_STG_DIB_TO_BITMAP = -2147221050;

const int CONVERT10_E_OLELINK_DISABLED = -2147221049;

const int CLIPBRD_E_FIRST = 2147746256;

const int CLIPBRD_E_LAST = 2147746271;

const int CLIPBRD_S_FIRST = 262608;

const int CLIPBRD_S_LAST = 262623;

const int CLIPBRD_E_CANT_OPEN = -2147221040;

const int CLIPBRD_E_CANT_EMPTY = -2147221039;

const int CLIPBRD_E_CANT_SET = -2147221038;

const int CLIPBRD_E_BAD_DATA = -2147221037;

const int CLIPBRD_E_CANT_CLOSE = -2147221036;

const int MK_E_FIRST = 2147746272;

const int MK_E_LAST = 2147746287;

const int MK_S_FIRST = 262624;

const int MK_S_LAST = 262639;

const int MK_E_CONNECTMANUALLY = -2147221024;

const int MK_E_EXCEEDEDDEADLINE = -2147221023;

const int MK_E_NEEDGENERIC = -2147221022;

const int MK_E_UNAVAILABLE = -2147221021;

const int MK_E_SYNTAX = -2147221020;

const int MK_E_NOOBJECT = -2147221019;

const int MK_E_INVALIDEXTENSION = -2147221018;

const int MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = -2147221017;

const int MK_E_NOTBINDABLE = -2147221016;

const int MK_E_NOTBOUND = -2147221015;

const int MK_E_CANTOPENFILE = -2147221014;

const int MK_E_MUSTBOTHERUSER = -2147221013;

const int MK_E_NOINVERSE = -2147221012;

const int MK_E_NOSTORAGE = -2147221011;

const int MK_E_NOPREFIX = -2147221010;

const int MK_E_ENUMERATION_FAILED = -2147221009;

const int CO_E_FIRST = 2147746288;

const int CO_E_LAST = 2147746303;

const int CO_S_FIRST = 262640;

const int CO_S_LAST = 262655;

const int CO_E_NOTINITIALIZED = -2147221008;

const int CO_E_ALREADYINITIALIZED = -2147221007;

const int CO_E_CANTDETERMINECLASS = -2147221006;

const int CO_E_CLASSSTRING = -2147221005;

const int CO_E_IIDSTRING = -2147221004;

const int CO_E_APPNOTFOUND = -2147221003;

const int CO_E_APPSINGLEUSE = -2147221002;

const int CO_E_ERRORINAPP = -2147221001;

const int CO_E_DLLNOTFOUND = -2147221000;

const int CO_E_ERRORINDLL = -2147220999;

const int CO_E_WRONGOSFORAPP = -2147220998;

const int CO_E_OBJNOTREG = -2147220997;

const int CO_E_OBJISREG = -2147220996;

const int CO_E_OBJNOTCONNECTED = -2147220995;

const int CO_E_APPDIDNTREG = -2147220994;

const int CO_E_RELEASED = -2147220993;

const int EVENT_E_FIRST = 2147746304;

const int EVENT_E_LAST = 2147746335;

const int EVENT_S_FIRST = 262656;

const int EVENT_S_LAST = 262687;

const int EVENT_S_SOME_SUBSCRIBERS_FAILED = 262656;

const int EVENT_E_ALL_SUBSCRIBERS_FAILED = -2147220991;

const int EVENT_S_NOSUBSCRIBERS = 262658;

const int EVENT_E_QUERYSYNTAX = -2147220989;

const int EVENT_E_QUERYFIELD = -2147220988;

const int EVENT_E_INTERNALEXCEPTION = -2147220987;

const int EVENT_E_INTERNALERROR = -2147220986;

const int EVENT_E_INVALID_PER_USER_SID = -2147220985;

const int EVENT_E_USER_EXCEPTION = -2147220984;

const int EVENT_E_TOO_MANY_METHODS = -2147220983;

const int EVENT_E_MISSING_EVENTCLASS = -2147220982;

const int EVENT_E_NOT_ALL_REMOVED = -2147220981;

const int EVENT_E_COMPLUS_NOT_INSTALLED = -2147220980;

const int EVENT_E_CANT_MODIFY_OR_DELETE_UNCONFIGURED_OBJECT = -2147220979;

const int EVENT_E_CANT_MODIFY_OR_DELETE_CONFIGURED_OBJECT = -2147220978;

const int EVENT_E_INVALID_EVENT_CLASS_PARTITION = -2147220977;

const int EVENT_E_PER_USER_SID_NOT_LOGGED_ON = -2147220976;

const int TPC_E_INVALID_PROPERTY = -2147220927;

const int TPC_E_NO_DEFAULT_TABLET = -2147220974;

const int TPC_E_UNKNOWN_PROPERTY = -2147220965;

const int TPC_E_INVALID_INPUT_RECT = -2147220967;

const int TPC_E_INVALID_STROKE = -2147220958;

const int TPC_E_INITIALIZE_FAIL = -2147220957;

const int TPC_E_NOT_RELEVANT = -2147220942;

const int TPC_E_INVALID_PACKET_DESCRIPTION = -2147220941;

const int TPC_E_RECOGNIZER_NOT_REGISTERED = -2147220939;

const int TPC_E_INVALID_RIGHTS = -2147220938;

const int TPC_E_OUT_OF_ORDER_CALL = -2147220937;

const int TPC_E_QUEUE_FULL = -2147220936;

const int TPC_E_INVALID_CONFIGURATION = -2147220935;

const int TPC_E_INVALID_DATA_FROM_RECOGNIZER = -2147220934;

const int TPC_S_TRUNCATED = 262738;

const int TPC_S_INTERRUPTED = 262739;

const int TPC_S_NO_DATA_TO_PROCESS = 262740;

const int XACT_E_FIRST = 2147799040;

const int XACT_E_LAST = 2147799083;

const int XACT_S_FIRST = 315392;

const int XACT_S_LAST = 315408;

const int XACT_E_ALREADYOTHERSINGLEPHASE = -2147168256;

const int XACT_E_CANTRETAIN = -2147168255;

const int XACT_E_COMMITFAILED = -2147168254;

const int XACT_E_COMMITPREVENTED = -2147168253;

const int XACT_E_HEURISTICABORT = -2147168252;

const int XACT_E_HEURISTICCOMMIT = -2147168251;

const int XACT_E_HEURISTICDAMAGE = -2147168250;

const int XACT_E_HEURISTICDANGER = -2147168249;

const int XACT_E_ISOLATIONLEVEL = -2147168248;

const int XACT_E_NOASYNC = -2147168247;

const int XACT_E_NOENLIST = -2147168246;

const int XACT_E_NOISORETAIN = -2147168245;

const int XACT_E_NORESOURCE = -2147168244;

const int XACT_E_NOTCURRENT = -2147168243;

const int XACT_E_NOTRANSACTION = -2147168242;

const int XACT_E_NOTSUPPORTED = -2147168241;

const int XACT_E_UNKNOWNRMGRID = -2147168240;

const int XACT_E_WRONGSTATE = -2147168239;

const int XACT_E_WRONGUOW = -2147168238;

const int XACT_E_XTIONEXISTS = -2147168237;

const int XACT_E_NOIMPORTOBJECT = -2147168236;

const int XACT_E_INVALIDCOOKIE = -2147168235;

const int XACT_E_INDOUBT = -2147168234;

const int XACT_E_NOTIMEOUT = -2147168233;

const int XACT_E_ALREADYINPROGRESS = -2147168232;

const int XACT_E_ABORTED = -2147168231;

const int XACT_E_LOGFULL = -2147168230;

const int XACT_E_TMNOTAVAILABLE = -2147168229;

const int XACT_E_CONNECTION_DOWN = -2147168228;

const int XACT_E_CONNECTION_DENIED = -2147168227;

const int XACT_E_REENLISTTIMEOUT = -2147168226;

const int XACT_E_TIP_CONNECT_FAILED = -2147168225;

const int XACT_E_TIP_PROTOCOL_ERROR = -2147168224;

const int XACT_E_TIP_PULL_FAILED = -2147168223;

const int XACT_E_DEST_TMNOTAVAILABLE = -2147168222;

const int XACT_E_TIP_DISABLED = -2147168221;

const int XACT_E_NETWORK_TX_DISABLED = -2147168220;

const int XACT_E_PARTNER_NETWORK_TX_DISABLED = -2147168219;

const int XACT_E_XA_TX_DISABLED = -2147168218;

const int XACT_E_UNABLE_TO_READ_DTC_CONFIG = -2147168217;

const int XACT_E_UNABLE_TO_LOAD_DTC_PROXY = -2147168216;

const int XACT_E_ABORTING = -2147168215;

const int XACT_E_PUSH_COMM_FAILURE = -2147168214;

const int XACT_E_PULL_COMM_FAILURE = -2147168213;

const int XACT_E_LU_TX_DISABLED = -2147168212;

const int XACT_E_CLERKNOTFOUND = -2147168128;

const int XACT_E_CLERKEXISTS = -2147168127;

const int XACT_E_RECOVERYINPROGRESS = -2147168126;

const int XACT_E_TRANSACTIONCLOSED = -2147168125;

const int XACT_E_INVALIDLSN = -2147168124;

const int XACT_E_REPLAYREQUEST = -2147168123;

const int XACT_S_ASYNC = 315392;

const int XACT_S_DEFECT = 315393;

const int XACT_S_READONLY = 315394;

const int XACT_S_SOMENORETAIN = 315395;

const int XACT_S_OKINFORM = 315396;

const int XACT_S_MADECHANGESCONTENT = 315397;

const int XACT_S_MADECHANGESINFORM = 315398;

const int XACT_S_ALLNORETAIN = 315399;

const int XACT_S_ABORTING = 315400;

const int XACT_S_SINGLEPHASE = 315401;

const int XACT_S_LOCALLY_OK = 315402;

const int XACT_S_LASTRESOURCEMANAGER = 315408;

const int CONTEXT_E_FIRST = 2147803136;

const int CONTEXT_E_LAST = 2147803183;

const int CONTEXT_S_FIRST = 319488;

const int CONTEXT_S_LAST = 319535;

const int CONTEXT_E_ABORTED = -2147164158;

const int CONTEXT_E_ABORTING = -2147164157;

const int CONTEXT_E_NOCONTEXT = -2147164156;

const int CONTEXT_E_WOULD_DEADLOCK = -2147164155;

const int CONTEXT_E_SYNCH_TIMEOUT = -2147164154;

const int CONTEXT_E_OLDREF = -2147164153;

const int CONTEXT_E_ROLENOTFOUND = -2147164148;

const int CONTEXT_E_TMNOTAVAILABLE = -2147164145;

const int CO_E_ACTIVATIONFAILED = -2147164127;

const int CO_E_ACTIVATIONFAILED_EVENTLOGGED = -2147164126;

const int CO_E_ACTIVATIONFAILED_CATALOGERROR = -2147164125;

const int CO_E_ACTIVATIONFAILED_TIMEOUT = -2147164124;

const int CO_E_INITIALIZATIONFAILED = -2147164123;

const int CONTEXT_E_NOJIT = -2147164122;

const int CONTEXT_E_NOTRANSACTION = -2147164121;

const int CO_E_THREADINGMODEL_CHANGED = -2147164120;

const int CO_E_NOIISINTRINSICS = -2147164119;

const int CO_E_NOCOOKIES = -2147164118;

const int CO_E_DBERROR = -2147164117;

const int CO_E_NOTPOOLED = -2147164116;

const int CO_E_NOTCONSTRUCTED = -2147164115;

const int CO_E_NOSYNCHRONIZATION = -2147164114;

const int CO_E_ISOLEVELMISMATCH = -2147164113;

const int CO_E_CALL_OUT_OF_TX_SCOPE_NOT_ALLOWED = -2147164112;

const int CO_E_EXIT_TRANSACTION_SCOPE_NOT_CALLED = -2147164111;

const int OLE_S_USEREG = 262144;

const int OLE_S_STATIC = 262145;

const int OLE_S_MAC_CLIPFORMAT = 262146;

const int DRAGDROP_S_DROP = 262400;

const int DRAGDROP_S_CANCEL = 262401;

const int DRAGDROP_S_USEDEFAULTCURSORS = 262402;

const int DATA_S_SAMEFORMATETC = 262448;

const int VIEW_S_ALREADY_FROZEN = 262464;

const int CACHE_S_FORMATETC_NOTSUPPORTED = 262512;

const int CACHE_S_SAMECACHE = 262513;

const int CACHE_S_SOMECACHES_NOTUPDATED = 262514;

const int OLEOBJ_S_INVALIDVERB = 262528;

const int OLEOBJ_S_CANNOT_DOVERB_NOW = 262529;

const int OLEOBJ_S_INVALIDHWND = 262530;

const int INPLACE_S_TRUNCATED = 262560;

const int CONVERT10_S_NO_PRESENTATION = 262592;

const int MK_S_REDUCED_TO_SELF = 262626;

const int MK_S_ME = 262628;

const int MK_S_HIM = 262629;

const int MK_S_US = 262630;

const int MK_S_MONIKERALREADYREGISTERED = 262631;

const int SCHED_S_TASK_READY = 267008;

const int SCHED_S_TASK_RUNNING = 267009;

const int SCHED_S_TASK_DISABLED = 267010;

const int SCHED_S_TASK_HAS_NOT_RUN = 267011;

const int SCHED_S_TASK_NO_MORE_RUNS = 267012;

const int SCHED_S_TASK_NOT_SCHEDULED = 267013;

const int SCHED_S_TASK_TERMINATED = 267014;

const int SCHED_S_TASK_NO_VALID_TRIGGERS = 267015;

const int SCHED_S_EVENT_TRIGGER = 267016;

const int SCHED_E_TRIGGER_NOT_FOUND = -2147216631;

const int SCHED_E_TASK_NOT_READY = -2147216630;

const int SCHED_E_TASK_NOT_RUNNING = -2147216629;

const int SCHED_E_SERVICE_NOT_INSTALLED = -2147216628;

const int SCHED_E_CANNOT_OPEN_TASK = -2147216627;

const int SCHED_E_INVALID_TASK = -2147216626;

const int SCHED_E_ACCOUNT_INFORMATION_NOT_SET = -2147216625;

const int SCHED_E_ACCOUNT_NAME_NOT_FOUND = -2147216624;

const int SCHED_E_ACCOUNT_DBASE_CORRUPT = -2147216623;

const int SCHED_E_NO_SECURITY_SERVICES = -2147216622;

const int SCHED_E_UNKNOWN_OBJECT_VERSION = -2147216621;

const int SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = -2147216620;

const int SCHED_E_SERVICE_NOT_RUNNING = -2147216619;

const int SCHED_E_UNEXPECTEDNODE = -2147216618;

const int SCHED_E_NAMESPACE = -2147216617;

const int SCHED_E_INVALIDVALUE = -2147216616;

const int SCHED_E_MISSINGNODE = -2147216615;

const int SCHED_E_MALFORMEDXML = -2147216614;

const int SCHED_S_SOME_TRIGGERS_FAILED = 267035;

const int SCHED_S_BATCH_LOGON_PROBLEM = 267036;

const int SCHED_E_TOO_MANY_NODES = -2147216611;

const int SCHED_E_PAST_END_BOUNDARY = -2147216610;

const int SCHED_E_ALREADY_RUNNING = -2147216609;

const int SCHED_E_USER_NOT_LOGGED_ON = -2147216608;

const int SCHED_E_INVALID_TASK_HASH = -2147216607;

const int SCHED_E_SERVICE_NOT_AVAILABLE = -2147216606;

const int SCHED_E_SERVICE_TOO_BUSY = -2147216605;

const int SCHED_E_TASK_ATTEMPTED = -2147216604;

const int SCHED_S_TASK_QUEUED = 267045;

const int SCHED_E_TASK_DISABLED = -2147216602;

const int SCHED_E_TASK_NOT_V1_COMPAT = -2147216601;

const int SCHED_E_START_ON_DEMAND = -2147216600;

const int SCHED_E_TASK_NOT_UBPM_COMPAT = -2147216599;

const int SCHED_E_DEPRECATED_FEATURE_USED = -2147216592;

const int CO_E_CLASS_CREATE_FAILED = -2146959359;

const int CO_E_SCM_ERROR = -2146959358;

const int CO_E_SCM_RPC_FAILURE = -2146959357;

const int CO_E_BAD_PATH = -2146959356;

const int CO_E_SERVER_EXEC_FAILURE = -2146959355;

const int CO_E_OBJSRV_RPC_FAILURE = -2146959354;

const int MK_E_NO_NORMALIZED = -2146959353;

const int CO_E_SERVER_STOPPING = -2146959352;

const int MEM_E_INVALID_ROOT = -2146959351;

const int MEM_E_INVALID_LINK = -2146959344;

const int MEM_E_INVALID_SIZE = -2146959343;

const int CO_S_NOTALLINTERFACES = 524306;

const int CO_S_MACHINENAMENOTFOUND = 524307;

const int CO_E_MISSING_DISPLAYNAME = -2146959339;

const int CO_E_RUNAS_VALUE_MUST_BE_AAA = -2146959338;

const int CO_E_ELEVATION_DISABLED = -2146959337;

const int APPX_E_PACKAGING_INTERNAL = -2146958848;

const int APPX_E_INTERLEAVING_NOT_ALLOWED = -2146958847;

const int APPX_E_RELATIONSHIPS_NOT_ALLOWED = -2146958846;

const int APPX_E_MISSING_REQUIRED_FILE = -2146958845;

const int APPX_E_INVALID_MANIFEST = -2146958844;

const int APPX_E_INVALID_BLOCKMAP = -2146958843;

const int APPX_E_CORRUPT_CONTENT = -2146958842;

const int APPX_E_BLOCK_HASH_INVALID = -2146958841;

const int APPX_E_REQUESTED_RANGE_TOO_LARGE = -2146958840;

const int APPX_E_INVALID_SIP_CLIENT_DATA = -2146958839;

const int APPX_E_INVALID_KEY_INFO = -2146958838;

const int APPX_E_INVALID_CONTENTGROUPMAP = -2146958837;

const int APPX_E_INVALID_APPINSTALLER = -2146958836;

const int APPX_E_DELTA_BASELINE_VERSION_MISMATCH = -2146958835;

const int APPX_E_DELTA_PACKAGE_MISSING_FILE = -2146958834;

const int APPX_E_INVALID_DELTA_PACKAGE = -2146958833;

const int APPX_E_DELTA_APPENDED_PACKAGE_NOT_ALLOWED = -2146958832;

const int APPX_E_INVALID_PACKAGING_LAYOUT = -2146958831;

const int APPX_E_INVALID_PACKAGESIGNCONFIG = -2146958830;

const int APPX_E_RESOURCESPRI_NOT_ALLOWED = -2146958829;

const int APPX_E_FILE_COMPRESSION_MISMATCH = -2146958828;

const int APPX_E_INVALID_PAYLOAD_PACKAGE_EXTENSION = -2146958827;

const int APPX_E_INVALID_ENCRYPTION_EXCLUSION_FILE_LIST = -2146958826;

const int APPX_E_INVALID_PACKAGE_FOLDER_ACLS = -2146958825;

const int APPX_E_INVALID_PUBLISHER_BRIDGING = -2146958824;

const int APPX_E_DIGEST_MISMATCH = -2146958823;

const int BT_E_SPURIOUS_ACTIVATION = -2146958592;

const int DISP_E_UNKNOWNINTERFACE = -2147352575;

const int DISP_E_MEMBERNOTFOUND = -2147352573;

const int DISP_E_PARAMNOTFOUND = -2147352572;

const int DISP_E_TYPEMISMATCH = -2147352571;

const int DISP_E_UNKNOWNNAME = -2147352570;

const int DISP_E_NONAMEDARGS = -2147352569;

const int DISP_E_BADVARTYPE = -2147352568;

const int DISP_E_EXCEPTION = -2147352567;

const int DISP_E_OVERFLOW = -2147352566;

const int DISP_E_BADINDEX = -2147352565;

const int DISP_E_UNKNOWNLCID = -2147352564;

const int DISP_E_ARRAYISLOCKED = -2147352563;

const int DISP_E_BADPARAMCOUNT = -2147352562;

const int DISP_E_PARAMNOTOPTIONAL = -2147352561;

const int DISP_E_BADCALLEE = -2147352560;

const int DISP_E_NOTACOLLECTION = -2147352559;

const int DISP_E_DIVBYZERO = -2147352558;

const int DISP_E_BUFFERTOOSMALL = -2147352557;

const int TYPE_E_BUFFERTOOSMALL = -2147319786;

const int TYPE_E_FIELDNOTFOUND = -2147319785;

const int TYPE_E_INVDATAREAD = -2147319784;

const int TYPE_E_UNSUPFORMAT = -2147319783;

const int TYPE_E_REGISTRYACCESS = -2147319780;

const int TYPE_E_LIBNOTREGISTERED = -2147319779;

const int TYPE_E_UNDEFINEDTYPE = -2147319769;

const int TYPE_E_QUALIFIEDNAMEDISALLOWED = -2147319768;

const int TYPE_E_INVALIDSTATE = -2147319767;

const int TYPE_E_WRONGTYPEKIND = -2147319766;

const int TYPE_E_ELEMENTNOTFOUND = -2147319765;

const int TYPE_E_AMBIGUOUSNAME = -2147319764;

const int TYPE_E_NAMECONFLICT = -2147319763;

const int TYPE_E_UNKNOWNLCID = -2147319762;

const int TYPE_E_DLLFUNCTIONNOTFOUND = -2147319761;

const int TYPE_E_BADMODULEKIND = -2147317571;

const int TYPE_E_SIZETOOBIG = -2147317563;

const int TYPE_E_DUPLICATEID = -2147317562;

const int TYPE_E_INVALIDID = -2147317553;

const int TYPE_E_TYPEMISMATCH = -2147316576;

const int TYPE_E_OUTOFBOUNDS = -2147316575;

const int TYPE_E_IOERROR = -2147316574;

const int TYPE_E_CANTCREATETMPFILE = -2147316573;

const int TYPE_E_CANTLOADLIBRARY = -2147312566;

const int TYPE_E_INCONSISTENTPROPFUNCS = -2147312509;

const int TYPE_E_CIRCULARTYPE = -2147312508;

const int STG_E_INVALIDFUNCTION = -2147287039;

const int STG_E_FILENOTFOUND = -2147287038;

const int STG_E_PATHNOTFOUND = -2147287037;

const int STG_E_TOOMANYOPENFILES = -2147287036;

const int STG_E_ACCESSDENIED = -2147287035;

const int STG_E_INVALIDHANDLE = -2147287034;

const int STG_E_INSUFFICIENTMEMORY = -2147287032;

const int STG_E_INVALIDPOINTER = -2147287031;

const int STG_E_NOMOREFILES = -2147287022;

const int STG_E_DISKISWRITEPROTECTED = -2147287021;

const int STG_E_SEEKERROR = -2147287015;

const int STG_E_WRITEFAULT = -2147287011;

const int STG_E_READFAULT = -2147287010;

const int STG_E_SHAREVIOLATION = -2147287008;

const int STG_E_LOCKVIOLATION = -2147287007;

const int STG_E_FILEALREADYEXISTS = -2147286960;

const int STG_E_INVALIDPARAMETER = -2147286953;

const int STG_E_MEDIUMFULL = -2147286928;

const int STG_E_PROPSETMISMATCHED = -2147286800;

const int STG_E_ABNORMALAPIEXIT = -2147286790;

const int STG_E_INVALIDHEADER = -2147286789;

const int STG_E_INVALIDNAME = -2147286788;

const int STG_E_UNKNOWN = -2147286787;

const int STG_E_UNIMPLEMENTEDFUNCTION = -2147286786;

const int STG_E_INVALIDFLAG = -2147286785;

const int STG_E_INUSE = -2147286784;

const int STG_E_NOTCURRENT = -2147286783;

const int STG_E_REVERTED = -2147286782;

const int STG_E_CANTSAVE = -2147286781;

const int STG_E_OLDFORMAT = -2147286780;

const int STG_E_OLDDLL = -2147286779;

const int STG_E_SHAREREQUIRED = -2147286778;

const int STG_E_NOTFILEBASEDSTORAGE = -2147286777;

const int STG_E_EXTANTMARSHALLINGS = -2147286776;

const int STG_E_DOCFILECORRUPT = -2147286775;

const int STG_E_BADBASEADDRESS = -2147286768;

const int STG_E_DOCFILETOOLARGE = -2147286767;

const int STG_E_NOTSIMPLEFORMAT = -2147286766;

const int STG_E_INCOMPLETE = -2147286527;

const int STG_E_TERMINATED = -2147286526;

const int STG_S_CONVERTED = 197120;

const int STG_S_BLOCK = 197121;

const int STG_S_RETRYNOW = 197122;

const int STG_S_MONITORING = 197123;

const int STG_S_MULTIPLEOPENS = 197124;

const int STG_S_CONSOLIDATIONFAILED = 197125;

const int STG_S_CANNOTCONSOLIDATE = 197126;

const int STG_S_POWER_CYCLE_REQUIRED = 197127;

const int STG_E_FIRMWARE_SLOT_INVALID = -2147286520;

const int STG_E_FIRMWARE_IMAGE_INVALID = -2147286519;

const int STG_E_DEVICE_UNRESPONSIVE = -2147286518;

const int STG_E_STATUS_COPY_PROTECTION_FAILURE = -2147286267;

const int STG_E_CSS_AUTHENTICATION_FAILURE = -2147286266;

const int STG_E_CSS_KEY_NOT_PRESENT = -2147286265;

const int STG_E_CSS_KEY_NOT_ESTABLISHED = -2147286264;

const int STG_E_CSS_SCRAMBLED_SECTOR = -2147286263;

const int STG_E_CSS_REGION_MISMATCH = -2147286262;

const int STG_E_RESETS_EXHAUSTED = -2147286261;

const int RPC_E_CALL_REJECTED = -2147418111;

const int RPC_E_CALL_CANCELED = -2147418110;

const int RPC_E_CANTPOST_INSENDCALL = -2147418109;

const int RPC_E_CANTCALLOUT_INASYNCCALL = -2147418108;

const int RPC_E_CANTCALLOUT_INEXTERNALCALL = -2147418107;

const int RPC_E_CONNECTION_TERMINATED = -2147418106;

const int RPC_E_SERVER_DIED = -2147418105;

const int RPC_E_CLIENT_DIED = -2147418104;

const int RPC_E_INVALID_DATAPACKET = -2147418103;

const int RPC_E_CANTTRANSMIT_CALL = -2147418102;

const int RPC_E_CLIENT_CANTMARSHAL_DATA = -2147418101;

const int RPC_E_CLIENT_CANTUNMARSHAL_DATA = -2147418100;

const int RPC_E_SERVER_CANTMARSHAL_DATA = -2147418099;

const int RPC_E_SERVER_CANTUNMARSHAL_DATA = -2147418098;

const int RPC_E_INVALID_DATA = -2147418097;

const int RPC_E_INVALID_PARAMETER = -2147418096;

const int RPC_E_CANTCALLOUT_AGAIN = -2147418095;

const int RPC_E_SERVER_DIED_DNE = -2147418094;

const int RPC_E_SYS_CALL_FAILED = -2147417856;

const int RPC_E_OUT_OF_RESOURCES = -2147417855;

const int RPC_E_ATTEMPTED_MULTITHREAD = -2147417854;

const int RPC_E_NOT_REGISTERED = -2147417853;

const int RPC_E_FAULT = -2147417852;

const int RPC_E_SERVERFAULT = -2147417851;

const int RPC_E_CHANGED_MODE = -2147417850;

const int RPC_E_INVALIDMETHOD = -2147417849;

const int RPC_E_DISCONNECTED = -2147417848;

const int RPC_E_RETRY = -2147417847;

const int RPC_E_SERVERCALL_RETRYLATER = -2147417846;

const int RPC_E_SERVERCALL_REJECTED = -2147417845;

const int RPC_E_INVALID_CALLDATA = -2147417844;

const int RPC_E_CANTCALLOUT_ININPUTSYNCCALL = -2147417843;

const int RPC_E_WRONG_THREAD = -2147417842;

const int RPC_E_THREAD_NOT_INIT = -2147417841;

const int RPC_E_VERSION_MISMATCH = -2147417840;

const int RPC_E_INVALID_HEADER = -2147417839;

const int RPC_E_INVALID_EXTENSION = -2147417838;

const int RPC_E_INVALID_IPID = -2147417837;

const int RPC_E_INVALID_OBJECT = -2147417836;

const int RPC_S_CALLPENDING = -2147417835;

const int RPC_S_WAITONTIMER = -2147417834;

const int RPC_E_CALL_COMPLETE = -2147417833;

const int RPC_E_UNSECURE_CALL = -2147417832;

const int RPC_E_TOO_LATE = -2147417831;

const int RPC_E_NO_GOOD_SECURITY_PACKAGES = -2147417830;

const int RPC_E_ACCESS_DENIED = -2147417829;

const int RPC_E_REMOTE_DISABLED = -2147417828;

const int RPC_E_INVALID_OBJREF = -2147417827;

const int RPC_E_NO_CONTEXT = -2147417826;

const int RPC_E_TIMEOUT = -2147417825;

const int RPC_E_NO_SYNC = -2147417824;

const int RPC_E_FULLSIC_REQUIRED = -2147417823;

const int RPC_E_INVALID_STD_NAME = -2147417822;

const int CO_E_FAILEDTOIMPERSONATE = -2147417821;

const int CO_E_FAILEDTOGETSECCTX = -2147417820;

const int CO_E_FAILEDTOOPENTHREADTOKEN = -2147417819;

const int CO_E_FAILEDTOGETTOKENINFO = -2147417818;

const int CO_E_TRUSTEEDOESNTMATCHCLIENT = -2147417817;

const int CO_E_FAILEDTOQUERYCLIENTBLANKET = -2147417816;

const int CO_E_FAILEDTOSETDACL = -2147417815;

const int CO_E_ACCESSCHECKFAILED = -2147417814;

const int CO_E_NETACCESSAPIFAILED = -2147417813;

const int CO_E_WRONGTRUSTEENAMESYNTAX = -2147417812;

const int CO_E_INVALIDSID = -2147417811;

const int CO_E_CONVERSIONFAILED = -2147417810;

const int CO_E_NOMATCHINGSIDFOUND = -2147417809;

const int CO_E_LOOKUPACCSIDFAILED = -2147417808;

const int CO_E_NOMATCHINGNAMEFOUND = -2147417807;

const int CO_E_LOOKUPACCNAMEFAILED = -2147417806;

const int CO_E_SETSERLHNDLFAILED = -2147417805;

const int CO_E_FAILEDTOGETWINDIR = -2147417804;

const int CO_E_PATHTOOLONG = -2147417803;

const int CO_E_FAILEDTOGENUUID = -2147417802;

const int CO_E_FAILEDTOCREATEFILE = -2147417801;

const int CO_E_FAILEDTOCLOSEHANDLE = -2147417800;

const int CO_E_EXCEEDSYSACLLIMIT = -2147417799;

const int CO_E_ACESINWRONGORDER = -2147417798;

const int CO_E_INCOMPATIBLESTREAMVERSION = -2147417797;

const int CO_E_FAILEDTOOPENPROCESSTOKEN = -2147417796;

const int CO_E_DECODEFAILED = -2147417795;

const int CO_E_ACNOTINITIALIZED = -2147417793;

const int CO_E_CANCEL_DISABLED = -2147417792;

const int RPC_E_UNEXPECTED = -2147352577;

const int ERROR_AUDITING_DISABLED = -1073151999;

const int ERROR_ALL_SIDS_FILTERED = -1073151998;

const int ERROR_BIZRULES_NOT_ENABLED = -1073151997;

const int NTE_BAD_UID = -2146893823;

const int NTE_BAD_HASH = -2146893822;

const int NTE_BAD_KEY = -2146893821;

const int NTE_BAD_LEN = -2146893820;

const int NTE_BAD_DATA = -2146893819;

const int NTE_BAD_SIGNATURE = -2146893818;

const int NTE_BAD_VER = -2146893817;

const int NTE_BAD_ALGID = -2146893816;

const int NTE_BAD_FLAGS = -2146893815;

const int NTE_BAD_TYPE = -2146893814;

const int NTE_BAD_KEY_STATE = -2146893813;

const int NTE_BAD_HASH_STATE = -2146893812;

const int NTE_NO_KEY = -2146893811;

const int NTE_NO_MEMORY = -2146893810;

const int NTE_EXISTS = -2146893809;

const int NTE_PERM = -2146893808;

const int NTE_NOT_FOUND = -2146893807;

const int NTE_DOUBLE_ENCRYPT = -2146893806;

const int NTE_BAD_PROVIDER = -2146893805;

const int NTE_BAD_PROV_TYPE = -2146893804;

const int NTE_BAD_PUBLIC_KEY = -2146893803;

const int NTE_BAD_KEYSET = -2146893802;

const int NTE_PROV_TYPE_NOT_DEF = -2146893801;

const int NTE_PROV_TYPE_ENTRY_BAD = -2146893800;

const int NTE_KEYSET_NOT_DEF = -2146893799;

const int NTE_KEYSET_ENTRY_BAD = -2146893798;

const int NTE_PROV_TYPE_NO_MATCH = -2146893797;

const int NTE_SIGNATURE_FILE_BAD = -2146893796;

const int NTE_PROVIDER_DLL_FAIL = -2146893795;

const int NTE_PROV_DLL_NOT_FOUND = -2146893794;

const int NTE_BAD_KEYSET_PARAM = -2146893793;

const int NTE_FAIL = -2146893792;

const int NTE_SYS_ERR = -2146893791;

const int NTE_SILENT_CONTEXT = -2146893790;

const int NTE_TOKEN_KEYSET_STORAGE_FULL = -2146893789;

const int NTE_TEMPORARY_PROFILE = -2146893788;

const int NTE_FIXEDPARAMETER = -2146893787;

const int NTE_INVALID_HANDLE = -2146893786;

const int NTE_INVALID_PARAMETER = -2146893785;

const int NTE_BUFFER_TOO_SMALL = -2146893784;

const int NTE_NOT_SUPPORTED = -2146893783;

const int NTE_NO_MORE_ITEMS = -2146893782;

const int NTE_BUFFERS_OVERLAP = -2146893781;

const int NTE_DECRYPTION_FAILURE = -2146893780;

const int NTE_INTERNAL_ERROR = -2146893779;

const int NTE_UI_REQUIRED = -2146893778;

const int NTE_HMAC_NOT_SUPPORTED = -2146893777;

const int NTE_DEVICE_NOT_READY = -2146893776;

const int NTE_AUTHENTICATION_IGNORED = -2146893775;

const int NTE_VALIDATION_FAILED = -2146893774;

const int NTE_INCORRECT_PASSWORD = -2146893773;

const int NTE_ENCRYPTION_FAILURE = -2146893772;

const int NTE_DEVICE_NOT_FOUND = -2146893771;

const int NTE_USER_CANCELLED = -2146893770;

const int NTE_PASSWORD_CHANGE_REQUIRED = -2146893769;

const int NTE_NOT_ACTIVE_CONSOLE = -2146893768;

const int SEC_E_INSUFFICIENT_MEMORY = -2146893056;

const int SEC_E_INVALID_HANDLE = -2146893055;

const int SEC_E_UNSUPPORTED_FUNCTION = -2146893054;

const int SEC_E_TARGET_UNKNOWN = -2146893053;

const int SEC_E_INTERNAL_ERROR = -2146893052;

const int SEC_E_SECPKG_NOT_FOUND = -2146893051;

const int SEC_E_NOT_OWNER = -2146893050;

const int SEC_E_CANNOT_INSTALL = -2146893049;

const int SEC_E_INVALID_TOKEN = -2146893048;

const int SEC_E_CANNOT_PACK = -2146893047;

const int SEC_E_QOP_NOT_SUPPORTED = -2146893046;

const int SEC_E_NO_IMPERSONATION = -2146893045;

const int SEC_E_LOGON_DENIED = -2146893044;

const int SEC_E_UNKNOWN_CREDENTIALS = -2146893043;

const int SEC_E_NO_CREDENTIALS = -2146893042;

const int SEC_E_MESSAGE_ALTERED = -2146893041;

const int SEC_E_OUT_OF_SEQUENCE = -2146893040;

const int SEC_E_NO_AUTHENTICATING_AUTHORITY = -2146893039;

const int SEC_I_CONTINUE_NEEDED = 590610;

const int SEC_I_COMPLETE_NEEDED = 590611;

const int SEC_I_COMPLETE_AND_CONTINUE = 590612;

const int SEC_I_LOCAL_LOGON = 590613;

const int SEC_I_GENERIC_EXTENSION_RECEIVED = 590614;

const int SEC_E_BAD_PKGID = -2146893034;

const int SEC_E_CONTEXT_EXPIRED = -2146893033;

const int SEC_I_CONTEXT_EXPIRED = 590615;

const int SEC_E_INCOMPLETE_MESSAGE = -2146893032;

const int SEC_E_INCOMPLETE_CREDENTIALS = -2146893024;

const int SEC_E_BUFFER_TOO_SMALL = -2146893023;

const int SEC_I_INCOMPLETE_CREDENTIALS = 590624;

const int SEC_I_RENEGOTIATE = 590625;

const int SEC_E_WRONG_PRINCIPAL = -2146893022;

const int SEC_I_NO_LSA_CONTEXT = 590627;

const int SEC_E_TIME_SKEW = -2146893020;

const int SEC_E_UNTRUSTED_ROOT = -2146893019;

const int SEC_E_ILLEGAL_MESSAGE = -2146893018;

const int SEC_E_CERT_UNKNOWN = -2146893017;

const int SEC_E_CERT_EXPIRED = -2146893016;

const int SEC_E_ENCRYPT_FAILURE = -2146893015;

const int SEC_E_DECRYPT_FAILURE = -2146893008;

const int SEC_E_ALGORITHM_MISMATCH = -2146893007;

const int SEC_E_SECURITY_QOS_FAILED = -2146893006;

const int SEC_E_UNFINISHED_CONTEXT_DELETED = -2146893005;

const int SEC_E_NO_TGT_REPLY = -2146893004;

const int SEC_E_NO_IP_ADDRESSES = -2146893003;

const int SEC_E_WRONG_CREDENTIAL_HANDLE = -2146893002;

const int SEC_E_CRYPTO_SYSTEM_INVALID = -2146893001;

const int SEC_E_MAX_REFERRALS_EXCEEDED = -2146893000;

const int SEC_E_MUST_BE_KDC = -2146892999;

const int SEC_E_STRONG_CRYPTO_NOT_SUPPORTED = -2146892998;

const int SEC_E_TOO_MANY_PRINCIPALS = -2146892997;

const int SEC_E_NO_PA_DATA = -2146892996;

const int SEC_E_PKINIT_NAME_MISMATCH = -2146892995;

const int SEC_E_SMARTCARD_LOGON_REQUIRED = -2146892994;

const int SEC_E_SHUTDOWN_IN_PROGRESS = -2146892993;

const int SEC_E_KDC_INVALID_REQUEST = -2146892992;

const int SEC_E_KDC_UNABLE_TO_REFER = -2146892991;

const int SEC_E_KDC_UNKNOWN_ETYPE = -2146892990;

const int SEC_E_UNSUPPORTED_PREAUTH = -2146892989;

const int SEC_E_DELEGATION_REQUIRED = -2146892987;

const int SEC_E_BAD_BINDINGS = -2146892986;

const int SEC_E_MULTIPLE_ACCOUNTS = -2146892985;

const int SEC_E_NO_KERB_KEY = -2146892984;

const int SEC_E_CERT_WRONG_USAGE = -2146892983;

const int SEC_E_DOWNGRADE_DETECTED = -2146892976;

const int SEC_E_SMARTCARD_CERT_REVOKED = -2146892975;

const int SEC_E_ISSUING_CA_UNTRUSTED = -2146892974;

const int SEC_E_REVOCATION_OFFLINE_C = -2146892973;

const int SEC_E_PKINIT_CLIENT_FAILURE = -2146892972;

const int SEC_E_SMARTCARD_CERT_EXPIRED = -2146892971;

const int SEC_E_NO_S4U_PROT_SUPPORT = -2146892970;

const int SEC_E_CROSSREALM_DELEGATION_FAILURE = -2146892969;

const int SEC_E_REVOCATION_OFFLINE_KDC = -2146892968;

const int SEC_E_ISSUING_CA_UNTRUSTED_KDC = -2146892967;

const int SEC_E_KDC_CERT_EXPIRED = -2146892966;

const int SEC_E_KDC_CERT_REVOKED = -2146892965;

const int SEC_I_SIGNATURE_NEEDED = 590684;

const int SEC_E_INVALID_PARAMETER = -2146892963;

const int SEC_E_DELEGATION_POLICY = -2146892962;

const int SEC_E_POLICY_NLTM_ONLY = -2146892961;

const int SEC_I_NO_RENEGOTIATION = 590688;

const int SEC_E_NO_CONTEXT = -2146892959;

const int SEC_E_PKU2U_CERT_FAILURE = -2146892958;

const int SEC_E_MUTUAL_AUTH_FAILED = -2146892957;

const int SEC_I_MESSAGE_FRAGMENT = 590692;

const int SEC_E_ONLY_HTTPS_ALLOWED = -2146892955;

const int SEC_I_CONTINUE_NEEDED_MESSAGE_OK = 590694;

const int SEC_E_APPLICATION_PROTOCOL_MISMATCH = -2146892953;

const int SEC_I_ASYNC_CALL_PENDING = 590696;

const int SEC_E_INVALID_UPN_NAME = -2146892951;

const int SEC_E_EXT_BUFFER_TOO_SMALL = -2146892950;

const int SEC_E_INSUFFICIENT_BUFFERS = -2146892949;

const int SEC_E_NO_SPM = -2146893052;

const int SEC_E_NOT_SUPPORTED = -2146893054;

const int CRYPT_E_MSG_ERROR = -2146889727;

const int CRYPT_E_UNKNOWN_ALGO = -2146889726;

const int CRYPT_E_OID_FORMAT = -2146889725;

const int CRYPT_E_INVALID_MSG_TYPE = -2146889724;

const int CRYPT_E_UNEXPECTED_ENCODING = -2146889723;

const int CRYPT_E_AUTH_ATTR_MISSING = -2146889722;

const int CRYPT_E_HASH_VALUE = -2146889721;

const int CRYPT_E_INVALID_INDEX = -2146889720;

const int CRYPT_E_ALREADY_DECRYPTED = -2146889719;

const int CRYPT_E_NOT_DECRYPTED = -2146889718;

const int CRYPT_E_RECIPIENT_NOT_FOUND = -2146889717;

const int CRYPT_E_CONTROL_TYPE = -2146889716;

const int CRYPT_E_ISSUER_SERIALNUMBER = -2146889715;

const int CRYPT_E_SIGNER_NOT_FOUND = -2146889714;

const int CRYPT_E_ATTRIBUTES_MISSING = -2146889713;

const int CRYPT_E_STREAM_MSG_NOT_READY = -2146889712;

const int CRYPT_E_STREAM_INSUFFICIENT_DATA = -2146889711;

const int CRYPT_I_NEW_PROTECTION_REQUIRED = 593938;

const int CRYPT_E_BAD_LEN = -2146885631;

const int CRYPT_E_BAD_ENCODE = -2146885630;

const int CRYPT_E_FILE_ERROR = -2146885629;

const int CRYPT_E_NOT_FOUND = -2146885628;

const int CRYPT_E_EXISTS = -2146885627;

const int CRYPT_E_NO_PROVIDER = -2146885626;

const int CRYPT_E_SELF_SIGNED = -2146885625;

const int CRYPT_E_DELETED_PREV = -2146885624;

const int CRYPT_E_NO_MATCH = -2146885623;

const int CRYPT_E_UNEXPECTED_MSG_TYPE = -2146885622;

const int CRYPT_E_NO_KEY_PROPERTY = -2146885621;

const int CRYPT_E_NO_DECRYPT_CERT = -2146885620;

const int CRYPT_E_BAD_MSG = -2146885619;

const int CRYPT_E_NO_SIGNER = -2146885618;

const int CRYPT_E_PENDING_CLOSE = -2146885617;

const int CRYPT_E_REVOKED = -2146885616;

const int CRYPT_E_NO_REVOCATION_DLL = -2146885615;

const int CRYPT_E_NO_REVOCATION_CHECK = -2146885614;

const int CRYPT_E_REVOCATION_OFFLINE = -2146885613;

const int CRYPT_E_NOT_IN_REVOCATION_DATABASE = -2146885612;

const int CRYPT_E_INVALID_NUMERIC_STRING = -2146885600;

const int CRYPT_E_INVALID_PRINTABLE_STRING = -2146885599;

const int CRYPT_E_INVALID_IA5_STRING = -2146885598;

const int CRYPT_E_INVALID_X500_STRING = -2146885597;

const int CRYPT_E_NOT_CHAR_STRING = -2146885596;

const int CRYPT_E_FILERESIZED = -2146885595;

const int CRYPT_E_SECURITY_SETTINGS = -2146885594;

const int CRYPT_E_NO_VERIFY_USAGE_DLL = -2146885593;

const int CRYPT_E_NO_VERIFY_USAGE_CHECK = -2146885592;

const int CRYPT_E_VERIFY_USAGE_OFFLINE = -2146885591;

const int CRYPT_E_NOT_IN_CTL = -2146885590;

const int CRYPT_E_NO_TRUSTED_SIGNER = -2146885589;

const int CRYPT_E_MISSING_PUBKEY_PARA = -2146885588;

const int CRYPT_E_OBJECT_LOCATOR_OBJECT_NOT_FOUND = -2146885587;

const int CRYPT_E_OSS_ERROR = -2146881536;

const int OSS_MORE_BUF = -2146881535;

const int OSS_NEGATIVE_UINTEGER = -2146881534;

const int OSS_PDU_RANGE = -2146881533;

const int OSS_MORE_INPUT = -2146881532;

const int OSS_DATA_ERROR = -2146881531;

const int OSS_BAD_ARG = -2146881530;

const int OSS_BAD_VERSION = -2146881529;

const int OSS_OUT_MEMORY = -2146881528;

const int OSS_PDU_MISMATCH = -2146881527;

const int OSS_LIMITED = -2146881526;

const int OSS_BAD_PTR = -2146881525;

const int OSS_BAD_TIME = -2146881524;

const int OSS_INDEFINITE_NOT_SUPPORTED = -2146881523;

const int OSS_MEM_ERROR = -2146881522;

const int OSS_BAD_TABLE = -2146881521;

const int OSS_TOO_LONG = -2146881520;

const int OSS_CONSTRAINT_VIOLATED = -2146881519;

const int OSS_FATAL_ERROR = -2146881518;

const int OSS_ACCESS_SERIALIZATION_ERROR = -2146881517;

const int OSS_NULL_TBL = -2146881516;

const int OSS_NULL_FCN = -2146881515;

const int OSS_BAD_ENCRULES = -2146881514;

const int OSS_UNAVAIL_ENCRULES = -2146881513;

const int OSS_CANT_OPEN_TRACE_WINDOW = -2146881512;

const int OSS_UNIMPLEMENTED = -2146881511;

const int OSS_OID_DLL_NOT_LINKED = -2146881510;

const int OSS_CANT_OPEN_TRACE_FILE = -2146881509;

const int OSS_TRACE_FILE_ALREADY_OPEN = -2146881508;

const int OSS_TABLE_MISMATCH = -2146881507;

const int OSS_TYPE_NOT_SUPPORTED = -2146881506;

const int OSS_REAL_DLL_NOT_LINKED = -2146881505;

const int OSS_REAL_CODE_NOT_LINKED = -2146881504;

const int OSS_OUT_OF_RANGE = -2146881503;

const int OSS_COPIER_DLL_NOT_LINKED = -2146881502;

const int OSS_CONSTRAINT_DLL_NOT_LINKED = -2146881501;

const int OSS_COMPARATOR_DLL_NOT_LINKED = -2146881500;

const int OSS_COMPARATOR_CODE_NOT_LINKED = -2146881499;

const int OSS_MEM_MGR_DLL_NOT_LINKED = -2146881498;

const int OSS_PDV_DLL_NOT_LINKED = -2146881497;

const int OSS_PDV_CODE_NOT_LINKED = -2146881496;

const int OSS_API_DLL_NOT_LINKED = -2146881495;

const int OSS_BERDER_DLL_NOT_LINKED = -2146881494;

const int OSS_PER_DLL_NOT_LINKED = -2146881493;

const int OSS_OPEN_TYPE_ERROR = -2146881492;

const int OSS_MUTEX_NOT_CREATED = -2146881491;

const int OSS_CANT_CLOSE_TRACE_FILE = -2146881490;

const int CRYPT_E_ASN1_ERROR = -2146881280;

const int CRYPT_E_ASN1_INTERNAL = -2146881279;

const int CRYPT_E_ASN1_EOD = -2146881278;

const int CRYPT_E_ASN1_CORRUPT = -2146881277;

const int CRYPT_E_ASN1_LARGE = -2146881276;

const int CRYPT_E_ASN1_CONSTRAINT = -2146881275;

const int CRYPT_E_ASN1_MEMORY = -2146881274;

const int CRYPT_E_ASN1_OVERFLOW = -2146881273;

const int CRYPT_E_ASN1_BADPDU = -2146881272;

const int CRYPT_E_ASN1_BADARGS = -2146881271;

const int CRYPT_E_ASN1_BADREAL = -2146881270;

const int CRYPT_E_ASN1_BADTAG = -2146881269;

const int CRYPT_E_ASN1_CHOICE = -2146881268;

const int CRYPT_E_ASN1_RULE = -2146881267;

const int CRYPT_E_ASN1_UTF8 = -2146881266;

const int CRYPT_E_ASN1_PDU_TYPE = -2146881229;

const int CRYPT_E_ASN1_NYI = -2146881228;

const int CRYPT_E_ASN1_EXTENDED = -2146881023;

const int CRYPT_E_ASN1_NOEOD = -2146881022;

const int CERTSRV_E_BAD_REQUESTSUBJECT = -2146877439;

const int CERTSRV_E_NO_REQUEST = -2146877438;

const int CERTSRV_E_BAD_REQUESTSTATUS = -2146877437;

const int CERTSRV_E_PROPERTY_EMPTY = -2146877436;

const int CERTSRV_E_INVALID_CA_CERTIFICATE = -2146877435;

const int CERTSRV_E_SERVER_SUSPENDED = -2146877434;

const int CERTSRV_E_ENCODING_LENGTH = -2146877433;

const int CERTSRV_E_ROLECONFLICT = -2146877432;

const int CERTSRV_E_RESTRICTEDOFFICER = -2146877431;

const int CERTSRV_E_KEY_ARCHIVAL_NOT_CONFIGURED = -2146877430;

const int CERTSRV_E_NO_VALID_KRA = -2146877429;

const int CERTSRV_E_BAD_REQUEST_KEY_ARCHIVAL = -2146877428;

const int CERTSRV_E_NO_CAADMIN_DEFINED = -2146877427;

const int CERTSRV_E_BAD_RENEWAL_CERT_ATTRIBUTE = -2146877426;

const int CERTSRV_E_NO_DB_SESSIONS = -2146877425;

const int CERTSRV_E_ALIGNMENT_FAULT = -2146877424;

const int CERTSRV_E_ENROLL_DENIED = -2146877423;

const int CERTSRV_E_TEMPLATE_DENIED = -2146877422;

const int CERTSRV_E_DOWNLEVEL_DC_SSL_OR_UPGRADE = -2146877421;

const int CERTSRV_E_ADMIN_DENIED_REQUEST = -2146877420;

const int CERTSRV_E_NO_POLICY_SERVER = -2146877419;

const int CERTSRV_E_WEAK_SIGNATURE_OR_KEY = -2146877418;

const int CERTSRV_E_KEY_ATTESTATION_NOT_SUPPORTED = -2146877417;

const int CERTSRV_E_ENCRYPTION_CERT_REQUIRED = -2146877416;

const int CERTSRV_E_UNSUPPORTED_CERT_TYPE = -2146875392;

const int CERTSRV_E_NO_CERT_TYPE = -2146875391;

const int CERTSRV_E_TEMPLATE_CONFLICT = -2146875390;

const int CERTSRV_E_SUBJECT_ALT_NAME_REQUIRED = -2146875389;

const int CERTSRV_E_ARCHIVED_KEY_REQUIRED = -2146875388;

const int CERTSRV_E_SMIME_REQUIRED = -2146875387;

const int CERTSRV_E_BAD_RENEWAL_SUBJECT = -2146875386;

const int CERTSRV_E_BAD_TEMPLATE_VERSION = -2146875385;

const int CERTSRV_E_TEMPLATE_POLICY_REQUIRED = -2146875384;

const int CERTSRV_E_SIGNATURE_POLICY_REQUIRED = -2146875383;

const int CERTSRV_E_SIGNATURE_COUNT = -2146875382;

const int CERTSRV_E_SIGNATURE_REJECTED = -2146875381;

const int CERTSRV_E_ISSUANCE_POLICY_REQUIRED = -2146875380;

const int CERTSRV_E_SUBJECT_UPN_REQUIRED = -2146875379;

const int CERTSRV_E_SUBJECT_DIRECTORY_GUID_REQUIRED = -2146875378;

const int CERTSRV_E_SUBJECT_DNS_REQUIRED = -2146875377;

const int CERTSRV_E_ARCHIVED_KEY_UNEXPECTED = -2146875376;

const int CERTSRV_E_KEY_LENGTH = -2146875375;

const int CERTSRV_E_SUBJECT_EMAIL_REQUIRED = -2146875374;

const int CERTSRV_E_UNKNOWN_CERT_TYPE = -2146875373;

const int CERTSRV_E_CERT_TYPE_OVERLAP = -2146875372;

const int CERTSRV_E_TOO_MANY_SIGNATURES = -2146875371;

const int CERTSRV_E_RENEWAL_BAD_PUBLIC_KEY = -2146875370;

const int CERTSRV_E_INVALID_EK = -2146875369;

const int CERTSRV_E_INVALID_IDBINDING = -2146875368;

const int CERTSRV_E_INVALID_ATTESTATION = -2146875367;

const int CERTSRV_E_KEY_ATTESTATION = -2146875366;

const int CERTSRV_E_CORRUPT_KEY_ATTESTATION = -2146875365;

const int CERTSRV_E_EXPIRED_CHALLENGE = -2146875364;

const int CERTSRV_E_INVALID_RESPONSE = -2146875363;

const int CERTSRV_E_INVALID_REQUESTID = -2146875362;

const int CERTSRV_E_REQUEST_PRECERTIFICATE_MISMATCH = -2146875361;

const int CERTSRV_E_PENDING_CLIENT_RESPONSE = -2146875360;

const int CERTSRV_E_SEC_EXT_DIRECTORY_SID_REQUIRED = -2146875359;

const int XENROLL_E_KEY_NOT_EXPORTABLE = -2146873344;

const int XENROLL_E_CANNOT_ADD_ROOT_CERT = -2146873343;

const int XENROLL_E_RESPONSE_KA_HASH_NOT_FOUND = -2146873342;

const int XENROLL_E_RESPONSE_UNEXPECTED_KA_HASH = -2146873341;

const int XENROLL_E_RESPONSE_KA_HASH_MISMATCH = -2146873340;

const int XENROLL_E_KEYSPEC_SMIME_MISMATCH = -2146873339;

const int TRUST_E_SYSTEM_ERROR = -2146869247;

const int TRUST_E_NO_SIGNER_CERT = -2146869246;

const int TRUST_E_COUNTER_SIGNER = -2146869245;

const int TRUST_E_CERT_SIGNATURE = -2146869244;

const int TRUST_E_TIME_STAMP = -2146869243;

const int TRUST_E_BAD_DIGEST = -2146869232;

const int TRUST_E_MALFORMED_SIGNATURE = -2146869231;

const int TRUST_E_BASIC_CONSTRAINTS = -2146869223;

const int TRUST_E_FINANCIAL_CRITERIA = -2146869218;

const int MSSIPOTF_E_OUTOFMEMRANGE = -2146865151;

const int MSSIPOTF_E_CANTGETOBJECT = -2146865150;

const int MSSIPOTF_E_NOHEADTABLE = -2146865149;

const int MSSIPOTF_E_BAD_MAGICNUMBER = -2146865148;

const int MSSIPOTF_E_BAD_OFFSET_TABLE = -2146865147;

const int MSSIPOTF_E_TABLE_TAGORDER = -2146865146;

const int MSSIPOTF_E_TABLE_LONGWORD = -2146865145;

const int MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = -2146865144;

const int MSSIPOTF_E_TABLES_OVERLAP = -2146865143;

const int MSSIPOTF_E_TABLE_PADBYTES = -2146865142;

const int MSSIPOTF_E_FILETOOSMALL = -2146865141;

const int MSSIPOTF_E_TABLE_CHECKSUM = -2146865140;

const int MSSIPOTF_E_FILE_CHECKSUM = -2146865139;

const int MSSIPOTF_E_FAILED_POLICY = -2146865136;

const int MSSIPOTF_E_FAILED_HINTS_CHECK = -2146865135;

const int MSSIPOTF_E_NOT_OPENTYPE = -2146865134;

const int MSSIPOTF_E_FILE = -2146865133;

const int MSSIPOTF_E_CRYPT = -2146865132;

const int MSSIPOTF_E_BADVERSION = -2146865131;

const int MSSIPOTF_E_DSIG_STRUCTURE = -2146865130;

const int MSSIPOTF_E_PCONST_CHECK = -2146865129;

const int MSSIPOTF_E_STRUCTURE = -2146865128;

const int ERROR_CRED_REQUIRES_CONFIRMATION = -2146865127;

const int NTE_OP_OK = 0;

const int TRUST_E_PROVIDER_UNKNOWN = -2146762751;

const int TRUST_E_ACTION_UNKNOWN = -2146762750;

const int TRUST_E_SUBJECT_FORM_UNKNOWN = -2146762749;

const int TRUST_E_SUBJECT_NOT_TRUSTED = -2146762748;

const int DIGSIG_E_ENCODE = -2146762747;

const int DIGSIG_E_DECODE = -2146762746;

const int DIGSIG_E_EXTENSIBILITY = -2146762745;

const int DIGSIG_E_CRYPTO = -2146762744;

const int PERSIST_E_SIZEDEFINITE = -2146762743;

const int PERSIST_E_SIZEINDEFINITE = -2146762742;

const int PERSIST_E_NOTSELFSIZING = -2146762741;

const int TRUST_E_NOSIGNATURE = -2146762496;

const int CERT_E_EXPIRED = -2146762495;

const int CERT_E_VALIDITYPERIODNESTING = -2146762494;

const int CERT_E_ROLE = -2146762493;

const int CERT_E_PATHLENCONST = -2146762492;

const int CERT_E_CRITICAL = -2146762491;

const int CERT_E_PURPOSE = -2146762490;

const int CERT_E_ISSUERCHAINING = -2146762489;

const int CERT_E_MALFORMED = -2146762488;

const int CERT_E_UNTRUSTEDROOT = -2146762487;

const int CERT_E_CHAINING = -2146762486;

const int TRUST_E_FAIL = -2146762485;

const int CERT_E_REVOKED = -2146762484;

const int CERT_E_UNTRUSTEDTESTROOT = -2146762483;

const int CERT_E_REVOCATION_FAILURE = -2146762482;

const int CERT_E_CN_NO_MATCH = -2146762481;

const int CERT_E_WRONG_USAGE = -2146762480;

const int TRUST_E_EXPLICIT_DISTRUST = -2146762479;

const int CERT_E_UNTRUSTEDCA = -2146762478;

const int CERT_E_INVALID_POLICY = -2146762477;

const int CERT_E_INVALID_NAME = -2146762476;

const int SPAPI_E_EXPECTED_SECTION_NAME = -2146500608;

const int SPAPI_E_BAD_SECTION_NAME_LINE = -2146500607;

const int SPAPI_E_SECTION_NAME_TOO_LONG = -2146500606;

const int SPAPI_E_GENERAL_SYNTAX = -2146500605;

const int SPAPI_E_WRONG_INF_STYLE = -2146500352;

const int SPAPI_E_SECTION_NOT_FOUND = -2146500351;

const int SPAPI_E_LINE_NOT_FOUND = -2146500350;

const int SPAPI_E_NO_BACKUP = -2146500349;

const int SPAPI_E_NO_ASSOCIATED_CLASS = -2146500096;

const int SPAPI_E_CLASS_MISMATCH = -2146500095;

const int SPAPI_E_DUPLICATE_FOUND = -2146500094;

const int SPAPI_E_NO_DRIVER_SELECTED = -2146500093;

const int SPAPI_E_KEY_DOES_NOT_EXIST = -2146500092;

const int SPAPI_E_INVALID_DEVINST_NAME = -2146500091;

const int SPAPI_E_INVALID_CLASS = -2146500090;

const int SPAPI_E_DEVINST_ALREADY_EXISTS = -2146500089;

const int SPAPI_E_DEVINFO_NOT_REGISTERED = -2146500088;

const int SPAPI_E_INVALID_REG_PROPERTY = -2146500087;

const int SPAPI_E_NO_INF = -2146500086;

const int SPAPI_E_NO_SUCH_DEVINST = -2146500085;

const int SPAPI_E_CANT_LOAD_CLASS_ICON = -2146500084;

const int SPAPI_E_INVALID_CLASS_INSTALLER = -2146500083;

const int SPAPI_E_DI_DO_DEFAULT = -2146500082;

const int SPAPI_E_DI_NOFILECOPY = -2146500081;

const int SPAPI_E_INVALID_HWPROFILE = -2146500080;

const int SPAPI_E_NO_DEVICE_SELECTED = -2146500079;

const int SPAPI_E_DEVINFO_LIST_LOCKED = -2146500078;

const int SPAPI_E_DEVINFO_DATA_LOCKED = -2146500077;

const int SPAPI_E_DI_BAD_PATH = -2146500076;

const int SPAPI_E_NO_CLASSINSTALL_PARAMS = -2146500075;

const int SPAPI_E_FILEQUEUE_LOCKED = -2146500074;

const int SPAPI_E_BAD_SERVICE_INSTALLSECT = -2146500073;

const int SPAPI_E_NO_CLASS_DRIVER_LIST = -2146500072;

const int SPAPI_E_NO_ASSOCIATED_SERVICE = -2146500071;

const int SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = -2146500070;

const int SPAPI_E_DEVICE_INTERFACE_ACTIVE = -2146500069;

const int SPAPI_E_DEVICE_INTERFACE_REMOVED = -2146500068;

const int SPAPI_E_BAD_INTERFACE_INSTALLSECT = -2146500067;

const int SPAPI_E_NO_SUCH_INTERFACE_CLASS = -2146500066;

const int SPAPI_E_INVALID_REFERENCE_STRING = -2146500065;

const int SPAPI_E_INVALID_MACHINENAME = -2146500064;

const int SPAPI_E_REMOTE_COMM_FAILURE = -2146500063;

const int SPAPI_E_MACHINE_UNAVAILABLE = -2146500062;

const int SPAPI_E_NO_CONFIGMGR_SERVICES = -2146500061;

const int SPAPI_E_INVALID_PROPPAGE_PROVIDER = -2146500060;

const int SPAPI_E_NO_SUCH_DEVICE_INTERFACE = -2146500059;

const int SPAPI_E_DI_POSTPROCESSING_REQUIRED = -2146500058;

const int SPAPI_E_INVALID_COINSTALLER = -2146500057;

const int SPAPI_E_NO_COMPAT_DRIVERS = -2146500056;

const int SPAPI_E_NO_DEVICE_ICON = -2146500055;

const int SPAPI_E_INVALID_INF_LOGCONFIG = -2146500054;

const int SPAPI_E_DI_DONT_INSTALL = -2146500053;

const int SPAPI_E_INVALID_FILTER_DRIVER = -2146500052;

const int SPAPI_E_NON_WINDOWS_NT_DRIVER = -2146500051;

const int SPAPI_E_NON_WINDOWS_DRIVER = -2146500050;

const int SPAPI_E_NO_CATALOG_FOR_OEM_INF = -2146500049;

const int SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = -2146500048;

const int SPAPI_E_NOT_DISABLEABLE = -2146500047;

const int SPAPI_E_CANT_REMOVE_DEVINST = -2146500046;

const int SPAPI_E_INVALID_TARGET = -2146500045;

const int SPAPI_E_DRIVER_NONNATIVE = -2146500044;

const int SPAPI_E_IN_WOW64 = -2146500043;

const int SPAPI_E_SET_SYSTEM_RESTORE_POINT = -2146500042;

const int SPAPI_E_INCORRECTLY_COPIED_INF = -2146500041;

const int SPAPI_E_SCE_DISABLED = -2146500040;

const int SPAPI_E_UNKNOWN_EXCEPTION = -2146500039;

const int SPAPI_E_PNP_REGISTRY_ERROR = -2146500038;

const int SPAPI_E_REMOTE_REQUEST_UNSUPPORTED = -2146500037;

const int SPAPI_E_NOT_AN_INSTALLED_OEM_INF = -2146500036;

const int SPAPI_E_INF_IN_USE_BY_DEVICES = -2146500035;

const int SPAPI_E_DI_FUNCTION_OBSOLETE = -2146500034;

const int SPAPI_E_NO_AUTHENTICODE_CATALOG = -2146500033;

const int SPAPI_E_AUTHENTICODE_DISALLOWED = -2146500032;

const int SPAPI_E_AUTHENTICODE_TRUSTED_PUBLISHER = -2146500031;

const int SPAPI_E_AUTHENTICODE_TRUST_NOT_ESTABLISHED = -2146500030;

const int SPAPI_E_AUTHENTICODE_PUBLISHER_NOT_TRUSTED = -2146500029;

const int SPAPI_E_SIGNATURE_OSATTRIBUTE_MISMATCH = -2146500028;

const int SPAPI_E_ONLY_VALIDATE_VIA_AUTHENTICODE = -2146500027;

const int SPAPI_E_DEVICE_INSTALLER_NOT_READY = -2146500026;

const int SPAPI_E_DRIVER_STORE_ADD_FAILED = -2146500025;

const int SPAPI_E_DEVICE_INSTALL_BLOCKED = -2146500024;

const int SPAPI_E_DRIVER_INSTALL_BLOCKED = -2146500023;

const int SPAPI_E_WRONG_INF_TYPE = -2146500022;

const int SPAPI_E_FILE_HASH_NOT_IN_CATALOG = -2146500021;

const int SPAPI_E_DRIVER_STORE_DELETE_FAILED = -2146500020;

const int SPAPI_E_UNRECOVERABLE_STACK_OVERFLOW = -2146499840;

const int SPAPI_E_ERROR_NOT_INSTALLED = -2146496512;

const int SCARD_S_SUCCESS = 0;

const int SCARD_F_INTERNAL_ERROR = -2146435071;

const int SCARD_E_CANCELLED = -2146435070;

const int SCARD_E_INVALID_HANDLE = -2146435069;

const int SCARD_E_INVALID_PARAMETER = -2146435068;

const int SCARD_E_INVALID_TARGET = -2146435067;

const int SCARD_E_NO_MEMORY = -2146435066;

const int SCARD_F_WAITED_TOO_LONG = -2146435065;

const int SCARD_E_INSUFFICIENT_BUFFER = -2146435064;

const int SCARD_E_UNKNOWN_READER = -2146435063;

const int SCARD_E_TIMEOUT = -2146435062;

const int SCARD_E_SHARING_VIOLATION = -2146435061;

const int SCARD_E_NO_SMARTCARD = -2146435060;

const int SCARD_E_UNKNOWN_CARD = -2146435059;

const int SCARD_E_CANT_DISPOSE = -2146435058;

const int SCARD_E_PROTO_MISMATCH = -2146435057;

const int SCARD_E_NOT_READY = -2146435056;

const int SCARD_E_INVALID_VALUE = -2146435055;

const int SCARD_E_SYSTEM_CANCELLED = -2146435054;

const int SCARD_F_COMM_ERROR = -2146435053;

const int SCARD_F_UNKNOWN_ERROR = -2146435052;

const int SCARD_E_INVALID_ATR = -2146435051;

const int SCARD_E_NOT_TRANSACTED = -2146435050;

const int SCARD_E_READER_UNAVAILABLE = -2146435049;

const int SCARD_P_SHUTDOWN = -2146435048;

const int SCARD_E_PCI_TOO_SMALL = -2146435047;

const int SCARD_E_READER_UNSUPPORTED = -2146435046;

const int SCARD_E_DUPLICATE_READER = -2146435045;

const int SCARD_E_CARD_UNSUPPORTED = -2146435044;

const int SCARD_E_NO_SERVICE = -2146435043;

const int SCARD_E_SERVICE_STOPPED = -2146435042;

const int SCARD_E_UNEXPECTED = -2146435041;

const int SCARD_E_ICC_INSTALLATION = -2146435040;

const int SCARD_E_ICC_CREATEORDER = -2146435039;

const int SCARD_E_UNSUPPORTED_FEATURE = -2146435038;

const int SCARD_E_DIR_NOT_FOUND = -2146435037;

const int SCARD_E_FILE_NOT_FOUND = -2146435036;

const int SCARD_E_NO_DIR = -2146435035;

const int SCARD_E_NO_FILE = -2146435034;

const int SCARD_E_NO_ACCESS = -2146435033;

const int SCARD_E_WRITE_TOO_MANY = -2146435032;

const int SCARD_E_BAD_SEEK = -2146435031;

const int SCARD_E_INVALID_CHV = -2146435030;

const int SCARD_E_UNKNOWN_RES_MNG = -2146435029;

const int SCARD_E_NO_SUCH_CERTIFICATE = -2146435028;

const int SCARD_E_CERTIFICATE_UNAVAILABLE = -2146435027;

const int SCARD_E_NO_READERS_AVAILABLE = -2146435026;

const int SCARD_E_COMM_DATA_LOST = -2146435025;

const int SCARD_E_NO_KEY_CONTAINER = -2146435024;

const int SCARD_E_SERVER_TOO_BUSY = -2146435023;

const int SCARD_E_PIN_CACHE_EXPIRED = -2146435022;

const int SCARD_E_NO_PIN_CACHE = -2146435021;

const int SCARD_E_READ_ONLY_CARD = -2146435020;

const int SCARD_W_UNSUPPORTED_CARD = -2146434971;

const int SCARD_W_UNRESPONSIVE_CARD = -2146434970;

const int SCARD_W_UNPOWERED_CARD = -2146434969;

const int SCARD_W_RESET_CARD = -2146434968;

const int SCARD_W_REMOVED_CARD = -2146434967;

const int SCARD_W_SECURITY_VIOLATION = -2146434966;

const int SCARD_W_WRONG_CHV = -2146434965;

const int SCARD_W_CHV_BLOCKED = -2146434964;

const int SCARD_W_EOF = -2146434963;

const int SCARD_W_CANCELLED_BY_USER = -2146434962;

const int SCARD_W_CARD_NOT_AUTHENTICATED = -2146434961;

const int SCARD_W_CACHE_ITEM_NOT_FOUND = -2146434960;

const int SCARD_W_CACHE_ITEM_STALE = -2146434959;

const int SCARD_W_CACHE_ITEM_TOO_BIG = -2146434958;

const int COMADMIN_E_OBJECTERRORS = -2146368511;

const int COMADMIN_E_OBJECTINVALID = -2146368510;

const int COMADMIN_E_KEYMISSING = -2146368509;

const int COMADMIN_E_ALREADYINSTALLED = -2146368508;

const int COMADMIN_E_APP_FILE_WRITEFAIL = -2146368505;

const int COMADMIN_E_APP_FILE_READFAIL = -2146368504;

const int COMADMIN_E_APP_FILE_VERSION = -2146368503;

const int COMADMIN_E_BADPATH = -2146368502;

const int COMADMIN_E_APPLICATIONEXISTS = -2146368501;

const int COMADMIN_E_ROLEEXISTS = -2146368500;

const int COMADMIN_E_CANTCOPYFILE = -2146368499;

const int COMADMIN_E_NOUSER = -2146368497;

const int COMADMIN_E_INVALIDUSERIDS = -2146368496;

const int COMADMIN_E_NOREGISTRYCLSID = -2146368495;

const int COMADMIN_E_BADREGISTRYPROGID = -2146368494;

const int COMADMIN_E_AUTHENTICATIONLEVEL = -2146368493;

const int COMADMIN_E_USERPASSWDNOTVALID = -2146368492;

const int COMADMIN_E_CLSIDORIIDMISMATCH = -2146368488;

const int COMADMIN_E_REMOTEINTERFACE = -2146368487;

const int COMADMIN_E_DLLREGISTERSERVER = -2146368486;

const int COMADMIN_E_NOSERVERSHARE = -2146368485;

const int COMADMIN_E_DLLLOADFAILED = -2146368483;

const int COMADMIN_E_BADREGISTRYLIBID = -2146368482;

const int COMADMIN_E_APPDIRNOTFOUND = -2146368481;

const int COMADMIN_E_REGISTRARFAILED = -2146368477;

const int COMADMIN_E_COMPFILE_DOESNOTEXIST = -2146368476;

const int COMADMIN_E_COMPFILE_LOADDLLFAIL = -2146368475;

const int COMADMIN_E_COMPFILE_GETCLASSOBJ = -2146368474;

const int COMADMIN_E_COMPFILE_CLASSNOTAVAIL = -2146368473;

const int COMADMIN_E_COMPFILE_BADTLB = -2146368472;

const int COMADMIN_E_COMPFILE_NOTINSTALLABLE = -2146368471;

const int COMADMIN_E_NOTCHANGEABLE = -2146368470;

const int COMADMIN_E_NOTDELETEABLE = -2146368469;

const int COMADMIN_E_SESSION = -2146368468;

const int COMADMIN_E_COMP_MOVE_LOCKED = -2146368467;

const int COMADMIN_E_COMP_MOVE_BAD_DEST = -2146368466;

const int COMADMIN_E_REGISTERTLB = -2146368464;

const int COMADMIN_E_SYSTEMAPP = -2146368461;

const int COMADMIN_E_COMPFILE_NOREGISTRAR = -2146368460;

const int COMADMIN_E_COREQCOMPINSTALLED = -2146368459;

const int COMADMIN_E_SERVICENOTINSTALLED = -2146368458;

const int COMADMIN_E_PROPERTYSAVEFAILED = -2146368457;

const int COMADMIN_E_OBJECTEXISTS = -2146368456;

const int COMADMIN_E_COMPONENTEXISTS = -2146368455;

const int COMADMIN_E_REGFILE_CORRUPT = -2146368453;

const int COMADMIN_E_PROPERTY_OVERFLOW = -2146368452;

const int COMADMIN_E_NOTINREGISTRY = -2146368450;

const int COMADMIN_E_OBJECTNOTPOOLABLE = -2146368449;

const int COMADMIN_E_APPLID_MATCHES_CLSID = -2146368442;

const int COMADMIN_E_ROLE_DOES_NOT_EXIST = -2146368441;

const int COMADMIN_E_START_APP_NEEDS_COMPONENTS = -2146368440;

const int COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = -2146368439;

const int COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = -2146368438;

const int COMADMIN_E_CAN_NOT_START_APP = -2146368437;

const int COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = -2146368436;

const int COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = -2146368435;

const int COMADMIN_E_EVENTCLASS_CANT_BE_SUBSCRIBER = -2146368434;

const int COMADMIN_E_LIB_APP_PROXY_INCOMPATIBLE = -2146368433;

const int COMADMIN_E_BASE_PARTITION_ONLY = -2146368432;

const int COMADMIN_E_START_APP_DISABLED = -2146368431;

const int COMADMIN_E_CAT_DUPLICATE_PARTITION_NAME = -2146368425;

const int COMADMIN_E_CAT_INVALID_PARTITION_NAME = -2146368424;

const int COMADMIN_E_CAT_PARTITION_IN_USE = -2146368423;

const int COMADMIN_E_FILE_PARTITION_DUPLICATE_FILES = -2146368422;

const int COMADMIN_E_CAT_IMPORTED_COMPONENTS_NOT_ALLOWED = -2146368421;

const int COMADMIN_E_AMBIGUOUS_APPLICATION_NAME = -2146368420;

const int COMADMIN_E_AMBIGUOUS_PARTITION_NAME = -2146368419;

const int COMADMIN_E_REGDB_NOTINITIALIZED = -2146368398;

const int COMADMIN_E_REGDB_NOTOPEN = -2146368397;

const int COMADMIN_E_REGDB_SYSTEMERR = -2146368396;

const int COMADMIN_E_REGDB_ALREADYRUNNING = -2146368395;

const int COMADMIN_E_MIG_VERSIONNOTSUPPORTED = -2146368384;

const int COMADMIN_E_MIG_SCHEMANOTFOUND = -2146368383;

const int COMADMIN_E_CAT_BITNESSMISMATCH = -2146368382;

const int COMADMIN_E_CAT_UNACCEPTABLEBITNESS = -2146368381;

const int COMADMIN_E_CAT_WRONGAPPBITNESS = -2146368380;

const int COMADMIN_E_CAT_PAUSE_RESUME_NOT_SUPPORTED = -2146368379;

const int COMADMIN_E_CAT_SERVERFAULT = -2146368378;

const int COMQC_E_APPLICATION_NOT_QUEUED = -2146368000;

const int COMQC_E_NO_QUEUEABLE_INTERFACES = -2146367999;

const int COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = -2146367998;

const int COMQC_E_NO_IPERSISTSTREAM = -2146367997;

const int COMQC_E_BAD_MESSAGE = -2146367996;

const int COMQC_E_UNAUTHENTICATED = -2146367995;

const int COMQC_E_UNTRUSTED_ENQUEUER = -2146367994;

const int MSDTC_E_DUPLICATE_RESOURCE = -2146367743;

const int COMADMIN_E_OBJECT_PARENT_MISSING = -2146367480;

const int COMADMIN_E_OBJECT_DOES_NOT_EXIST = -2146367479;

const int COMADMIN_E_APP_NOT_RUNNING = -2146367478;

const int COMADMIN_E_INVALID_PARTITION = -2146367477;

const int COMADMIN_E_SVCAPP_NOT_POOLABLE_OR_RECYCLABLE = -2146367475;

const int COMADMIN_E_USER_IN_SET = -2146367474;

const int COMADMIN_E_CANTRECYCLELIBRARYAPPS = -2146367473;

const int COMADMIN_E_CANTRECYCLESERVICEAPPS = -2146367471;

const int COMADMIN_E_PROCESSALREADYRECYCLED = -2146367470;

const int COMADMIN_E_PAUSEDPROCESSMAYNOTBERECYCLED = -2146367469;

const int COMADMIN_E_CANTMAKEINPROCSERVICE = -2146367468;

const int COMADMIN_E_PROGIDINUSEBYCLSID = -2146367467;

const int COMADMIN_E_DEFAULT_PARTITION_NOT_IN_SET = -2146367466;

const int COMADMIN_E_RECYCLEDPROCESSMAYNOTBEPAUSED = -2146367465;

const int COMADMIN_E_PARTITION_ACCESSDENIED = -2146367464;

const int COMADMIN_E_PARTITION_MSI_ONLY = -2146367463;

const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_1_0_FORMAT = -2146367462;

const int COMADMIN_E_LEGACYCOMPS_NOT_ALLOWED_IN_NONBASE_PARTITIONS =
    -2146367461;

const int COMADMIN_E_COMP_MOVE_SOURCE = -2146367460;

const int COMADMIN_E_COMP_MOVE_DEST = -2146367459;

const int COMADMIN_E_COMP_MOVE_PRIVATE = -2146367458;

const int COMADMIN_E_BASEPARTITION_REQUIRED_IN_SET = -2146367457;

const int COMADMIN_E_CANNOT_ALIAS_EVENTCLASS = -2146367456;

const int COMADMIN_E_PRIVATE_ACCESSDENIED = -2146367455;

const int COMADMIN_E_SAFERINVALID = -2146367454;

const int COMADMIN_E_REGISTRY_ACCESSDENIED = -2146367453;

const int COMADMIN_E_PARTITIONS_DISABLED = -2146367452;

const int MENROLL_E_DEVICE_MESSAGE_FORMAT_ERROR = -2145910783;

const int MENROLL_E_DEVICE_AUTHENTICATION_ERROR = -2145910782;

const int MENROLL_E_DEVICE_AUTHORIZATION_ERROR = -2145910781;

const int MENROLL_E_DEVICE_CERTIFICATEREQUEST_ERROR = -2145910780;

const int MENROLL_E_DEVICE_CONFIGMGRSERVER_ERROR = -2145910779;

const int MENROLL_E_DEVICE_INTERNALSERVICE_ERROR = -2145910778;

const int MENROLL_E_DEVICE_INVALIDSECURITY_ERROR = -2145910777;

const int MENROLL_E_DEVICE_UNKNOWN_ERROR = -2145910776;

const int MENROLL_E_ENROLLMENT_IN_PROGRESS = -2145910775;

const int MENROLL_E_DEVICE_ALREADY_ENROLLED = -2145910774;

const int MENROLL_E_DISCOVERY_SEC_CERT_DATE_INVALID = -2145910771;

const int MENROLL_E_PASSWORD_NEEDED = -2145910770;

const int MENROLL_E_WAB_ERROR = -2145910769;

const int MENROLL_E_CONNECTIVITY = -2145910768;

const int MENROLL_S_ENROLLMENT_SUSPENDED = 1572881;

const int MENROLL_E_INVALIDSSLCERT = -2145910766;

const int MENROLL_E_DEVICECAPREACHED = -2145910765;

const int MENROLL_E_DEVICENOTSUPPORTED = -2145910764;

const int MENROLL_E_NOT_SUPPORTED = -2145910763;

const int MENROLL_E_NOTELIGIBLETORENEW = -2145910762;

const int MENROLL_E_INMAINTENANCE = -2145910761;

const int MENROLL_E_USER_LICENSE = -2145910760;

const int MENROLL_E_ENROLLMENTDATAINVALID = -2145910759;

const int MENROLL_E_INSECUREREDIRECT = -2145910758;

const int MENROLL_E_PLATFORM_WRONG_STATE = -2145910757;

const int MENROLL_E_PLATFORM_LICENSE_ERROR = -2145910756;

const int MENROLL_E_PLATFORM_UNKNOWN_ERROR = -2145910755;

const int MENROLL_E_PROV_CSP_CERTSTORE = -2145910754;

const int MENROLL_E_PROV_CSP_W7 = -2145910753;

const int MENROLL_E_PROV_CSP_DMCLIENT = -2145910752;

const int MENROLL_E_PROV_CSP_PFW = -2145910751;

const int MENROLL_E_PROV_CSP_MISC = -2145910750;

const int MENROLL_E_PROV_UNKNOWN = -2145910749;

const int MENROLL_E_PROV_SSLCERTNOTFOUND = -2145910748;

const int MENROLL_E_PROV_CSP_APPMGMT = -2145910747;

const int MENROLL_E_DEVICE_MANAGEMENT_BLOCKED = -2145910746;

const int MENROLL_E_CERTPOLICY_PRIVATEKEYCREATION_FAILED = -2145910745;

const int MENROLL_E_CERTAUTH_FAILED_TO_FIND_CERT = -2145910744;

const int MENROLL_E_EMPTY_MESSAGE = -2145910743;

const int MENROLL_E_USER_CANCELLED = -2145910736;

const int MENROLL_E_MDM_NOT_CONFIGURED = -2145910735;

const int MENROLL_E_CUSTOMSERVERERROR = -2145910734;

const int WER_S_REPORT_DEBUG = 1769472;

const int WER_S_REPORT_UPLOADED = 1769473;

const int WER_S_REPORT_QUEUED = 1769474;

const int WER_S_DISABLED = 1769475;

const int WER_S_SUSPENDED_UPLOAD = 1769476;

const int WER_S_DISABLED_QUEUE = 1769477;

const int WER_S_DISABLED_ARCHIVE = 1769478;

const int WER_S_REPORT_ASYNC = 1769479;

const int WER_S_IGNORE_ASSERT_INSTANCE = 1769480;

const int WER_S_IGNORE_ALL_ASSERTS = 1769481;

const int WER_S_ASSERT_CONTINUE = 1769482;

const int WER_S_THROTTLED = 1769483;

const int WER_S_REPORT_UPLOADED_CAB = 1769484;

const int WER_E_CRASH_FAILURE = -2145681408;

const int WER_E_CANCELED = -2145681407;

const int WER_E_NETWORK_FAILURE = -2145681406;

const int WER_E_NOT_INITIALIZED = -2145681405;

const int WER_E_ALREADY_REPORTING = -2145681404;

const int WER_E_DUMP_THROTTLED = -2145681403;

const int WER_E_INSUFFICIENT_CONSENT = -2145681402;

const int WER_E_TOO_HEAVY = -2145681401;

const int ERROR_FLT_IO_COMPLETE = 2031617;

const int ERROR_FLT_NO_HANDLER_DEFINED = -2145452031;

const int ERROR_FLT_CONTEXT_ALREADY_DEFINED = -2145452030;

const int ERROR_FLT_INVALID_ASYNCHRONOUS_REQUEST = -2145452029;

const int ERROR_FLT_DISALLOW_FAST_IO = -2145452028;

const int ERROR_FLT_INVALID_NAME_REQUEST = -2145452027;

const int ERROR_FLT_NOT_SAFE_TO_POST_OPERATION = -2145452026;

const int ERROR_FLT_NOT_INITIALIZED = -2145452025;

const int ERROR_FLT_FILTER_NOT_READY = -2145452024;

const int ERROR_FLT_POST_OPERATION_CLEANUP = -2145452023;

const int ERROR_FLT_INTERNAL_ERROR = -2145452022;

const int ERROR_FLT_DELETING_OBJECT = -2145452021;

const int ERROR_FLT_MUST_BE_NONPAGED_POOL = -2145452020;

const int ERROR_FLT_DUPLICATE_ENTRY = -2145452019;

const int ERROR_FLT_CBDQ_DISABLED = -2145452018;

const int ERROR_FLT_DO_NOT_ATTACH = -2145452017;

const int ERROR_FLT_DO_NOT_DETACH = -2145452016;

const int ERROR_FLT_INSTANCE_ALTITUDE_COLLISION = -2145452015;

const int ERROR_FLT_INSTANCE_NAME_COLLISION = -2145452014;

const int ERROR_FLT_FILTER_NOT_FOUND = -2145452013;

const int ERROR_FLT_VOLUME_NOT_FOUND = -2145452012;

const int ERROR_FLT_INSTANCE_NOT_FOUND = -2145452011;

const int ERROR_FLT_CONTEXT_ALLOCATION_NOT_FOUND = -2145452010;

const int ERROR_FLT_INVALID_CONTEXT_REGISTRATION = -2145452009;

const int ERROR_FLT_NAME_CACHE_MISS = -2145452008;

const int ERROR_FLT_NO_DEVICE_OBJECT = -2145452007;

const int ERROR_FLT_VOLUME_ALREADY_MOUNTED = -2145452006;

const int ERROR_FLT_ALREADY_ENLISTED = -2145452005;

const int ERROR_FLT_CONTEXT_ALREADY_LINKED = -2145452004;

const int ERROR_FLT_NO_WAITER_FOR_REPLY = -2145452000;

const int ERROR_FLT_REGISTRATION_BUSY = -2145451997;

const int ERROR_FLT_WCOS_NOT_SUPPORTED = -2145451996;

const int ERROR_HUNG_DISPLAY_DRIVER_THREAD = -2144993279;

const int DWM_E_COMPOSITIONDISABLED = -2144980991;

const int DWM_E_REMOTING_NOT_SUPPORTED = -2144980990;

const int DWM_E_NO_REDIRECTION_SURFACE_AVAILABLE = -2144980989;

const int DWM_E_NOT_QUEUING_PRESENTS = -2144980988;

const int DWM_E_ADAPTER_NOT_FOUND = -2144980987;

const int DWM_S_GDI_REDIRECTION_SURFACE = 2502661;

const int DWM_E_TEXTURE_TOO_LARGE = -2144980985;

const int DWM_S_GDI_REDIRECTION_SURFACE_BLT_VIA_GDI = 2502664;

const int ERROR_MONITOR_NO_DESCRIPTOR = 2494465;

const int ERROR_MONITOR_UNKNOWN_DESCRIPTOR_FORMAT = 2494466;

const int ERROR_MONITOR_INVALID_DESCRIPTOR_CHECKSUM = -1071247357;

const int ERROR_MONITOR_INVALID_STANDARD_TIMING_BLOCK = -1071247356;

const int ERROR_MONITOR_WMI_DATABLOCK_REGISTRATION_FAILED = -1071247355;

const int ERROR_MONITOR_INVALID_SERIAL_NUMBER_MONDSC_BLOCK = -1071247354;

const int ERROR_MONITOR_INVALID_USER_FRIENDLY_MONDSC_BLOCK = -1071247353;

const int ERROR_MONITOR_NO_MORE_DESCRIPTOR_DATA = -1071247352;

const int ERROR_MONITOR_INVALID_DETAILED_TIMING_BLOCK = -1071247351;

const int ERROR_MONITOR_INVALID_MANUFACTURE_DATE = -1071247350;

const int ERROR_GRAPHICS_NOT_EXCLUSIVE_MODE_OWNER = -1071243264;

const int ERROR_GRAPHICS_INSUFFICIENT_DMA_BUFFER = -1071243263;

const int ERROR_GRAPHICS_INVALID_DISPLAY_ADAPTER = -1071243262;

const int ERROR_GRAPHICS_ADAPTER_WAS_RESET = -1071243261;

const int ERROR_GRAPHICS_INVALID_DRIVER_MODEL = -1071243260;

const int ERROR_GRAPHICS_PRESENT_MODE_CHANGED = -1071243259;

const int ERROR_GRAPHICS_PRESENT_OCCLUDED = -1071243258;

const int ERROR_GRAPHICS_PRESENT_DENIED = -1071243257;

const int ERROR_GRAPHICS_CANNOTCOLORCONVERT = -1071243256;

const int ERROR_GRAPHICS_DRIVER_MISMATCH = -1071243255;

const int ERROR_GRAPHICS_PARTIAL_DATA_POPULATED = 1076240394;

const int ERROR_GRAPHICS_PRESENT_REDIRECTION_DISABLED = -1071243253;

const int ERROR_GRAPHICS_PRESENT_UNOCCLUDED = -1071243252;

const int ERROR_GRAPHICS_WINDOWDC_NOT_AVAILABLE = -1071243251;

const int ERROR_GRAPHICS_WINDOWLESS_PRESENT_DISABLED = -1071243250;

const int ERROR_GRAPHICS_PRESENT_INVALID_WINDOW = -1071243249;

const int ERROR_GRAPHICS_PRESENT_BUFFER_NOT_BOUND = -1071243248;

const int ERROR_GRAPHICS_VAIL_STATE_CHANGED = -1071243247;

const int ERROR_GRAPHICS_INDIRECT_DISPLAY_ABANDON_SWAPCHAIN = -1071243246;

const int ERROR_GRAPHICS_INDIRECT_DISPLAY_DEVICE_STOPPED = -1071243245;

const int ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_CREATE_SUPERWETINK_MESSAGE =
    -1071243244;

const int ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_DESTROY_SUPERWETINK_MESSAGE =
    -1071243243;

const int ERROR_GRAPHICS_VAIL_FAILED_TO_SEND_COMPOSITION_WINDOW_DPI_MESSAGE =
    -1071243242;

const int ERROR_GRAPHICS_LINK_CONFIGURATION_IN_PROGRESS = -1071243241;

const int ERROR_GRAPHICS_MPO_ALLOCATION_UNPINNED = -1071243240;

const int ERROR_GRAPHICS_NO_VIDEO_MEMORY = -1071243008;

const int ERROR_GRAPHICS_CANT_LOCK_MEMORY = -1071243007;

const int ERROR_GRAPHICS_ALLOCATION_BUSY = -1071243006;

const int ERROR_GRAPHICS_TOO_MANY_REFERENCES = -1071243005;

const int ERROR_GRAPHICS_TRY_AGAIN_LATER = -1071243004;

const int ERROR_GRAPHICS_TRY_AGAIN_NOW = -1071243003;

const int ERROR_GRAPHICS_ALLOCATION_INVALID = -1071243002;

const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNAVAILABLE = -1071243001;

const int ERROR_GRAPHICS_UNSWIZZLING_APERTURE_UNSUPPORTED = -1071243000;

const int ERROR_GRAPHICS_CANT_EVICT_PINNED_ALLOCATION = -1071242999;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_USAGE = -1071242992;

const int ERROR_GRAPHICS_CANT_RENDER_LOCKED_ALLOCATION = -1071242991;

const int ERROR_GRAPHICS_ALLOCATION_CLOSED = -1071242990;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_INSTANCE = -1071242989;

const int ERROR_GRAPHICS_INVALID_ALLOCATION_HANDLE = -1071242988;

const int ERROR_GRAPHICS_WRONG_ALLOCATION_DEVICE = -1071242987;

const int ERROR_GRAPHICS_ALLOCATION_CONTENT_LOST = -1071242986;

const int ERROR_GRAPHICS_GPU_EXCEPTION_ON_DEVICE = -1071242752;

const int ERROR_GRAPHICS_SKIP_ALLOCATION_PREPARATION = 1076240897;

const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY = -1071242496;

const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_NOT_SUPPORTED = -1071242495;

const int ERROR_GRAPHICS_VIDPN_TOPOLOGY_CURRENTLY_NOT_SUPPORTED = -1071242494;

const int ERROR_GRAPHICS_INVALID_VIDPN = -1071242493;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE = -1071242492;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET = -1071242491;

const int ERROR_GRAPHICS_VIDPN_MODALITY_NOT_SUPPORTED = -1071242490;

const int ERROR_GRAPHICS_MODE_NOT_PINNED = 2499335;

const int ERROR_GRAPHICS_INVALID_VIDPN_SOURCEMODESET = -1071242488;

const int ERROR_GRAPHICS_INVALID_VIDPN_TARGETMODESET = -1071242487;

const int ERROR_GRAPHICS_INVALID_FREQUENCY = -1071242486;

const int ERROR_GRAPHICS_INVALID_ACTIVE_REGION = -1071242485;

const int ERROR_GRAPHICS_INVALID_TOTAL_REGION = -1071242484;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_SOURCE_MODE = -1071242480;

const int ERROR_GRAPHICS_INVALID_VIDEO_PRESENT_TARGET_MODE = -1071242479;

const int ERROR_GRAPHICS_PINNED_MODE_MUST_REMAIN_IN_SET = -1071242478;

const int ERROR_GRAPHICS_PATH_ALREADY_IN_TOPOLOGY = -1071242477;

const int ERROR_GRAPHICS_MODE_ALREADY_IN_MODESET = -1071242476;

const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTSOURCESET = -1071242475;

const int ERROR_GRAPHICS_INVALID_VIDEOPRESENTTARGETSET = -1071242474;

const int ERROR_GRAPHICS_SOURCE_ALREADY_IN_SET = -1071242473;

const int ERROR_GRAPHICS_TARGET_ALREADY_IN_SET = -1071242472;

const int ERROR_GRAPHICS_INVALID_VIDPN_PRESENT_PATH = -1071242471;

const int ERROR_GRAPHICS_NO_RECOMMENDED_VIDPN_TOPOLOGY = -1071242470;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGESET = -1071242469;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE = -1071242468;

const int ERROR_GRAPHICS_FREQUENCYRANGE_NOT_IN_SET = -1071242467;

const int ERROR_GRAPHICS_NO_PREFERRED_MODE = 2499358;

const int ERROR_GRAPHICS_FREQUENCYRANGE_ALREADY_IN_SET = -1071242465;

const int ERROR_GRAPHICS_STALE_MODESET = -1071242464;

const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCEMODESET = -1071242463;

const int ERROR_GRAPHICS_INVALID_MONITOR_SOURCE_MODE = -1071242462;

const int ERROR_GRAPHICS_NO_RECOMMENDED_FUNCTIONAL_VIDPN = -1071242461;

const int ERROR_GRAPHICS_MODE_ID_MUST_BE_UNIQUE = -1071242460;

const int ERROR_GRAPHICS_EMPTY_ADAPTER_MONITOR_MODE_SUPPORT_INTERSECTION =
    -1071242459;

const int ERROR_GRAPHICS_VIDEO_PRESENT_TARGETS_LESS_THAN_SOURCES = -1071242458;

const int ERROR_GRAPHICS_PATH_NOT_IN_TOPOLOGY = -1071242457;

const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_SOURCE = -1071242456;

const int ERROR_GRAPHICS_ADAPTER_MUST_HAVE_AT_LEAST_ONE_TARGET = -1071242455;

const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTORSET = -1071242454;

const int ERROR_GRAPHICS_INVALID_MONITORDESCRIPTOR = -1071242453;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_NOT_IN_SET = -1071242452;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ALREADY_IN_SET = -1071242451;

const int ERROR_GRAPHICS_MONITORDESCRIPTOR_ID_MUST_BE_UNIQUE = -1071242450;

const int ERROR_GRAPHICS_INVALID_VIDPN_TARGET_SUBSET_TYPE = -1071242449;

const int ERROR_GRAPHICS_RESOURCES_NOT_RELATED = -1071242448;

const int ERROR_GRAPHICS_SOURCE_ID_MUST_BE_UNIQUE = -1071242447;

const int ERROR_GRAPHICS_TARGET_ID_MUST_BE_UNIQUE = -1071242446;

const int ERROR_GRAPHICS_NO_AVAILABLE_VIDPN_TARGET = -1071242445;

const int ERROR_GRAPHICS_MONITOR_COULD_NOT_BE_ASSOCIATED_WITH_ADAPTER =
    -1071242444;

const int ERROR_GRAPHICS_NO_VIDPNMGR = -1071242443;

const int ERROR_GRAPHICS_NO_ACTIVE_VIDPN = -1071242442;

const int ERROR_GRAPHICS_STALE_VIDPN_TOPOLOGY = -1071242441;

const int ERROR_GRAPHICS_MONITOR_NOT_CONNECTED = -1071242440;

const int ERROR_GRAPHICS_SOURCE_NOT_IN_TOPOLOGY = -1071242439;

const int ERROR_GRAPHICS_INVALID_PRIMARYSURFACE_SIZE = -1071242438;

const int ERROR_GRAPHICS_INVALID_VISIBLEREGION_SIZE = -1071242437;

const int ERROR_GRAPHICS_INVALID_STRIDE = -1071242436;

const int ERROR_GRAPHICS_INVALID_PIXELFORMAT = -1071242435;

const int ERROR_GRAPHICS_INVALID_COLORBASIS = -1071242434;

const int ERROR_GRAPHICS_INVALID_PIXELVALUEACCESSMODE = -1071242433;

const int ERROR_GRAPHICS_TARGET_NOT_IN_TOPOLOGY = -1071242432;

const int ERROR_GRAPHICS_NO_DISPLAY_MODE_MANAGEMENT_SUPPORT = -1071242431;

const int ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = -1071242430;

const int ERROR_GRAPHICS_CANT_ACCESS_ACTIVE_VIDPN = -1071242429;

const int ERROR_GRAPHICS_INVALID_PATH_IMPORTANCE_ORDINAL = -1071242428;

const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_GEOMETRY_TRANSFORMATION =
    -1071242427;

const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_SUPPORTED =
    -1071242426;

const int ERROR_GRAPHICS_INVALID_GAMMA_RAMP = -1071242425;

const int ERROR_GRAPHICS_GAMMA_RAMP_NOT_SUPPORTED = -1071242424;

const int ERROR_GRAPHICS_MULTISAMPLING_NOT_SUPPORTED = -1071242423;

const int ERROR_GRAPHICS_MODE_NOT_IN_MODESET = -1071242422;

const int ERROR_GRAPHICS_DATASET_IS_EMPTY = 2499403;

const int ERROR_GRAPHICS_NO_MORE_ELEMENTS_IN_DATASET = 2499404;

const int ERROR_GRAPHICS_INVALID_VIDPN_TOPOLOGY_RECOMMENDATION_REASON =
    -1071242419;

const int ERROR_GRAPHICS_INVALID_PATH_CONTENT_TYPE = -1071242418;

const int ERROR_GRAPHICS_INVALID_COPYPROTECTION_TYPE = -1071242417;

const int ERROR_GRAPHICS_UNASSIGNED_MODESET_ALREADY_EXISTS = -1071242416;

const int ERROR_GRAPHICS_PATH_CONTENT_GEOMETRY_TRANSFORMATION_NOT_PINNED =
    2499409;

const int ERROR_GRAPHICS_INVALID_SCANLINE_ORDERING = -1071242414;

const int ERROR_GRAPHICS_TOPOLOGY_CHANGES_NOT_ALLOWED = -1071242413;

const int ERROR_GRAPHICS_NO_AVAILABLE_IMPORTANCE_ORDINALS = -1071242412;

const int ERROR_GRAPHICS_INCOMPATIBLE_PRIVATE_FORMAT = -1071242411;

const int ERROR_GRAPHICS_INVALID_MODE_PRUNING_ALGORITHM = -1071242410;

const int ERROR_GRAPHICS_INVALID_MONITOR_CAPABILITY_ORIGIN = -1071242409;

const int ERROR_GRAPHICS_INVALID_MONITOR_FREQUENCYRANGE_CONSTRAINT =
    -1071242408;

const int ERROR_GRAPHICS_MAX_NUM_PATHS_REACHED = -1071242407;

const int ERROR_GRAPHICS_CANCEL_VIDPN_TOPOLOGY_AUGMENTATION = -1071242406;

const int ERROR_GRAPHICS_INVALID_CLIENT_TYPE = -1071242405;

const int ERROR_GRAPHICS_CLIENTVIDPN_NOT_SET = -1071242404;

const int ERROR_GRAPHICS_SPECIFIED_CHILD_ALREADY_CONNECTED = -1071242240;

const int ERROR_GRAPHICS_CHILD_DESCRIPTOR_NOT_SUPPORTED = -1071242239;

const int ERROR_GRAPHICS_UNKNOWN_CHILD_STATUS = 1076241455;

const int ERROR_GRAPHICS_NOT_A_LINKED_ADAPTER = -1071242192;

const int ERROR_GRAPHICS_LEADLINK_NOT_ENUMERATED = -1071242191;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_ENUMERATED = -1071242190;

const int ERROR_GRAPHICS_ADAPTER_CHAIN_NOT_READY = -1071242189;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_STARTED = -1071242188;

const int ERROR_GRAPHICS_CHAINLINKS_NOT_POWERED_ON = -1071242187;

const int ERROR_GRAPHICS_INCONSISTENT_DEVICE_LINK_STATE = -1071242186;

const int ERROR_GRAPHICS_LEADLINK_START_DEFERRED = 1076241463;

const int ERROR_GRAPHICS_NOT_POST_DEVICE_DRIVER = -1071242184;

const int ERROR_GRAPHICS_POLLING_TOO_FREQUENTLY = 1076241465;

const int ERROR_GRAPHICS_START_DEFERRED = 1076241466;

const int ERROR_GRAPHICS_ADAPTER_ACCESS_NOT_EXCLUDED = -1071242181;

const int ERROR_GRAPHICS_DEPENDABLE_CHILD_STATUS = 1076241468;

const int ERROR_GRAPHICS_OPM_NOT_SUPPORTED = -1071241984;

const int ERROR_GRAPHICS_COPP_NOT_SUPPORTED = -1071241983;

const int ERROR_GRAPHICS_UAB_NOT_SUPPORTED = -1071241982;

const int ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS = -1071241981;

const int ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST = -1071241979;

const int ERROR_GRAPHICS_OPM_INTERNAL_ERROR = -1071241973;

const int ERROR_GRAPHICS_OPM_INVALID_HANDLE = -1071241972;

const int ERROR_GRAPHICS_PVP_INVALID_CERTIFICATE_LENGTH = -1071241970;

const int ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED = -1071241969;

const int ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED = -1071241968;

const int ERROR_GRAPHICS_PVP_HFS_FAILED = -1071241967;

const int ERROR_GRAPHICS_OPM_INVALID_SRM = -1071241966;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP = -1071241965;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP = -1071241964;

const int ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA = -1071241963;

const int ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET = -1071241962;

const int ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH = -1071241961;

const int ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE = -1071241960;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS = -1071241958;

const int ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS = -1071241957;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS =
    -1071241956;

const int ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST = -1071241955;

const int ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR = -1071241954;

const int ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS =
    -1071241953;

const int ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED = -1071241952;

const int ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST = -1071241951;

const int ERROR_GRAPHICS_I2C_NOT_SUPPORTED = -1071241856;

const int ERROR_GRAPHICS_I2C_DEVICE_DOES_NOT_EXIST = -1071241855;

const int ERROR_GRAPHICS_I2C_ERROR_TRANSMITTING_DATA = -1071241854;

const int ERROR_GRAPHICS_I2C_ERROR_RECEIVING_DATA = -1071241853;

const int ERROR_GRAPHICS_DDCCI_VCP_NOT_SUPPORTED = -1071241852;

const int ERROR_GRAPHICS_DDCCI_INVALID_DATA = -1071241851;

const int ERROR_GRAPHICS_DDCCI_MONITOR_RETURNED_INVALID_TIMING_STATUS_BYTE =
    -1071241850;

const int ERROR_GRAPHICS_MCA_INVALID_CAPABILITIES_STRING = -1071241849;

const int ERROR_GRAPHICS_MCA_INTERNAL_ERROR = -1071241848;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_COMMAND = -1071241847;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_LENGTH = -1071241846;

const int ERROR_GRAPHICS_DDCCI_INVALID_MESSAGE_CHECKSUM = -1071241845;

const int ERROR_GRAPHICS_INVALID_PHYSICAL_MONITOR_HANDLE = -1071241844;

const int ERROR_GRAPHICS_MONITOR_NO_LONGER_EXISTS = -1071241843;

const int
    ERROR_GRAPHICS_DDCCI_CURRENT_CURRENT_VALUE_GREATER_THAN_MAXIMUM_VALUE =
    -1071241768;

const int ERROR_GRAPHICS_MCA_INVALID_VCP_VERSION = -1071241767;

const int ERROR_GRAPHICS_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = -1071241766;

const int ERROR_GRAPHICS_MCA_MCCS_VERSION_MISMATCH = -1071241765;

const int ERROR_GRAPHICS_MCA_UNSUPPORTED_MCCS_VERSION = -1071241764;

const int ERROR_GRAPHICS_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = -1071241762;

const int ERROR_GRAPHICS_MCA_UNSUPPORTED_COLOR_TEMPERATURE = -1071241761;

const int ERROR_GRAPHICS_ONLY_CONSOLE_SESSION_SUPPORTED = -1071241760;

const int ERROR_GRAPHICS_NO_DISPLAY_DEVICE_CORRESPONDS_TO_NAME = -1071241759;

const int ERROR_GRAPHICS_DISPLAY_DEVICE_NOT_ATTACHED_TO_DESKTOP = -1071241758;

const int ERROR_GRAPHICS_MIRRORING_DEVICES_NOT_SUPPORTED = -1071241757;

const int ERROR_GRAPHICS_INVALID_POINTER = -1071241756;

const int ERROR_GRAPHICS_NO_MONITORS_CORRESPOND_TO_DISPLAY_DEVICE = -1071241755;

const int ERROR_GRAPHICS_PARAMETER_ARRAY_TOO_SMALL = -1071241754;

const int ERROR_GRAPHICS_INTERNAL_ERROR = -1071241753;

const int ERROR_GRAPHICS_SESSION_TYPE_CHANGE_IN_PROGRESS = -1071249944;

const int NAP_E_INVALID_PACKET = -2144927743;

const int NAP_E_MISSING_SOH = -2144927742;

const int NAP_E_CONFLICTING_ID = -2144927741;

const int NAP_E_NO_CACHED_SOH = -2144927740;

const int NAP_E_STILL_BOUND = -2144927739;

const int NAP_E_NOT_REGISTERED = -2144927738;

const int NAP_E_NOT_INITIALIZED = -2144927737;

const int NAP_E_MISMATCHED_ID = -2144927736;

const int NAP_E_NOT_PENDING = -2144927735;

const int NAP_E_ID_NOT_FOUND = -2144927734;

const int NAP_E_MAXSIZE_TOO_SMALL = -2144927733;

const int NAP_E_SERVICE_NOT_RUNNING = -2144927732;

const int NAP_S_CERT_ALREADY_PRESENT = 2555917;

const int NAP_E_ENTITY_DISABLED = -2144927730;

const int NAP_E_NETSH_GROUPPOLICY_ERROR = -2144927729;

const int NAP_E_TOO_MANY_CALLS = -2144927728;

const int NAP_E_SHV_CONFIG_EXISTED = -2144927727;

const int NAP_E_SHV_CONFIG_NOT_FOUND = -2144927726;

const int NAP_E_SHV_TIMEOUT = -2144927725;

const int TPM_E_ERROR_MASK = -2144862208;

const int TPM_E_AUTHFAIL = -2144862207;

const int TPM_E_BADINDEX = -2144862206;

const int TPM_E_BAD_PARAMETER = -2144862205;

const int TPM_E_AUDITFAILURE = -2144862204;

const int TPM_E_CLEAR_DISABLED = -2144862203;

const int TPM_E_DEACTIVATED = -2144862202;

const int TPM_E_DISABLED = -2144862201;

const int TPM_E_DISABLED_CMD = -2144862200;

const int TPM_E_FAIL = -2144862199;

const int TPM_E_BAD_ORDINAL = -2144862198;

const int TPM_E_INSTALL_DISABLED = -2144862197;

const int TPM_E_INVALID_KEYHANDLE = -2144862196;

const int TPM_E_KEYNOTFOUND = -2144862195;

const int TPM_E_INAPPROPRIATE_ENC = -2144862194;

const int TPM_E_MIGRATEFAIL = -2144862193;

const int TPM_E_INVALID_PCR_INFO = -2144862192;

const int TPM_E_NOSPACE = -2144862191;

const int TPM_E_NOSRK = -2144862190;

const int TPM_E_NOTSEALED_BLOB = -2144862189;

const int TPM_E_OWNER_SET = -2144862188;

const int TPM_E_RESOURCES = -2144862187;

const int TPM_E_SHORTRANDOM = -2144862186;

const int TPM_E_SIZE = -2144862185;

const int TPM_E_WRONGPCRVAL = -2144862184;

const int TPM_E_BAD_PARAM_SIZE = -2144862183;

const int TPM_E_SHA_THREAD = -2144862182;

const int TPM_E_SHA_ERROR = -2144862181;

const int TPM_E_FAILEDSELFTEST = -2144862180;

const int TPM_E_AUTH2FAIL = -2144862179;

const int TPM_E_BADTAG = -2144862178;

const int TPM_E_IOERROR = -2144862177;

const int TPM_E_ENCRYPT_ERROR = -2144862176;

const int TPM_E_DECRYPT_ERROR = -2144862175;

const int TPM_E_INVALID_AUTHHANDLE = -2144862174;

const int TPM_E_NO_ENDORSEMENT = -2144862173;

const int TPM_E_INVALID_KEYUSAGE = -2144862172;

const int TPM_E_WRONG_ENTITYTYPE = -2144862171;

const int TPM_E_INVALID_POSTINIT = -2144862170;

const int TPM_E_INAPPROPRIATE_SIG = -2144862169;

const int TPM_E_BAD_KEY_PROPERTY = -2144862168;

const int TPM_E_BAD_MIGRATION = -2144862167;

const int TPM_E_BAD_SCHEME = -2144862166;

const int TPM_E_BAD_DATASIZE = -2144862165;

const int TPM_E_BAD_MODE = -2144862164;

const int TPM_E_BAD_PRESENCE = -2144862163;

const int TPM_E_BAD_VERSION = -2144862162;

const int TPM_E_NO_WRAP_TRANSPORT = -2144862161;

const int TPM_E_AUDITFAIL_UNSUCCESSFUL = -2144862160;

const int TPM_E_AUDITFAIL_SUCCESSFUL = -2144862159;

const int TPM_E_NOTRESETABLE = -2144862158;

const int TPM_E_NOTLOCAL = -2144862157;

const int TPM_E_BAD_TYPE = -2144862156;

const int TPM_E_INVALID_RESOURCE = -2144862155;

const int TPM_E_NOTFIPS = -2144862154;

const int TPM_E_INVALID_FAMILY = -2144862153;

const int TPM_E_NO_NV_PERMISSION = -2144862152;

const int TPM_E_REQUIRES_SIGN = -2144862151;

const int TPM_E_KEY_NOTSUPPORTED = -2144862150;

const int TPM_E_AUTH_CONFLICT = -2144862149;

const int TPM_E_AREA_LOCKED = -2144862148;

const int TPM_E_BAD_LOCALITY = -2144862147;

const int TPM_E_READ_ONLY = -2144862146;

const int TPM_E_PER_NOWRITE = -2144862145;

const int TPM_E_FAMILYCOUNT = -2144862144;

const int TPM_E_WRITE_LOCKED = -2144862143;

const int TPM_E_BAD_ATTRIBUTES = -2144862142;

const int TPM_E_INVALID_STRUCTURE = -2144862141;

const int TPM_E_KEY_OWNER_CONTROL = -2144862140;

const int TPM_E_BAD_COUNTER = -2144862139;

const int TPM_E_NOT_FULLWRITE = -2144862138;

const int TPM_E_CONTEXT_GAP = -2144862137;

const int TPM_E_MAXNVWRITES = -2144862136;

const int TPM_E_NOOPERATOR = -2144862135;

const int TPM_E_RESOURCEMISSING = -2144862134;

const int TPM_E_DELEGATE_LOCK = -2144862133;

const int TPM_E_DELEGATE_FAMILY = -2144862132;

const int TPM_E_DELEGATE_ADMIN = -2144862131;

const int TPM_E_TRANSPORT_NOTEXCLUSIVE = -2144862130;

const int TPM_E_OWNER_CONTROL = -2144862129;

const int TPM_E_DAA_RESOURCES = -2144862128;

const int TPM_E_DAA_INPUT_DATA0 = -2144862127;

const int TPM_E_DAA_INPUT_DATA1 = -2144862126;

const int TPM_E_DAA_ISSUER_SETTINGS = -2144862125;

const int TPM_E_DAA_TPM_SETTINGS = -2144862124;

const int TPM_E_DAA_STAGE = -2144862123;

const int TPM_E_DAA_ISSUER_VALIDITY = -2144862122;

const int TPM_E_DAA_WRONG_W = -2144862121;

const int TPM_E_BAD_HANDLE = -2144862120;

const int TPM_E_BAD_DELEGATE = -2144862119;

const int TPM_E_BADCONTEXT = -2144862118;

const int TPM_E_TOOMANYCONTEXTS = -2144862117;

const int TPM_E_MA_TICKET_SIGNATURE = -2144862116;

const int TPM_E_MA_DESTINATION = -2144862115;

const int TPM_E_MA_SOURCE = -2144862114;

const int TPM_E_MA_AUTHORITY = -2144862113;

const int TPM_E_PERMANENTEK = -2144862111;

const int TPM_E_BAD_SIGNATURE = -2144862110;

const int TPM_E_NOCONTEXTSPACE = -2144862109;

const int TPM_20_E_ASYMMETRIC = -2144862079;

const int TPM_20_E_ATTRIBUTES = -2144862078;

const int TPM_20_E_HASH = -2144862077;

const int TPM_20_E_VALUE = -2144862076;

const int TPM_20_E_HIERARCHY = -2144862075;

const int TPM_20_E_KEY_SIZE = -2144862073;

const int TPM_20_E_MGF = -2144862072;

const int TPM_20_E_MODE = -2144862071;

const int TPM_20_E_TYPE = -2144862070;

const int TPM_20_E_HANDLE = -2144862069;

const int TPM_20_E_KDF = -2144862068;

const int TPM_20_E_RANGE = -2144862067;

const int TPM_20_E_AUTH_FAIL = -2144862066;

const int TPM_20_E_NONCE = -2144862065;

const int TPM_20_E_PP = -2144862064;

const int TPM_20_E_SCHEME = -2144862062;

const int TPM_20_E_SIZE = -2144862059;

const int TPM_20_E_SYMMETRIC = -2144862058;

const int TPM_20_E_TAG = -2144862057;

const int TPM_20_E_SELECTOR = -2144862056;

const int TPM_20_E_INSUFFICIENT = -2144862054;

const int TPM_20_E_SIGNATURE = -2144862053;

const int TPM_20_E_KEY = -2144862052;

const int TPM_20_E_POLICY_FAIL = -2144862051;

const int TPM_20_E_INTEGRITY = -2144862049;

const int TPM_20_E_TICKET = -2144862048;

const int TPM_20_E_RESERVED_BITS = -2144862047;

const int TPM_20_E_BAD_AUTH = -2144862046;

const int TPM_20_E_EXPIRED = -2144862045;

const int TPM_20_E_POLICY_CC = -2144862044;

const int TPM_20_E_BINDING = -2144862043;

const int TPM_20_E_CURVE = -2144862042;

const int TPM_20_E_ECC_POINT = -2144862041;

const int TPM_20_E_INITIALIZE = -2144861952;

const int TPM_20_E_FAILURE = -2144861951;

const int TPM_20_E_SEQUENCE = -2144861949;

const int TPM_20_E_PRIVATE = -2144861941;

const int TPM_20_E_HMAC = -2144861927;

const int TPM_20_E_DISABLED = -2144861920;

const int TPM_20_E_EXCLUSIVE = -2144861919;

const int TPM_20_E_ECC_CURVE = -2144861917;

const int TPM_20_E_AUTH_TYPE = -2144861916;

const int TPM_20_E_AUTH_MISSING = -2144861915;

const int TPM_20_E_POLICY = -2144861914;

const int TPM_20_E_PCR = -2144861913;

const int TPM_20_E_PCR_CHANGED = -2144861912;

const int TPM_20_E_UPGRADE = -2144861907;

const int TPM_20_E_TOO_MANY_CONTEXTS = -2144861906;

const int TPM_20_E_AUTH_UNAVAILABLE = -2144861905;

const int TPM_20_E_REBOOT = -2144861904;

const int TPM_20_E_UNBALANCED = -2144861903;

const int TPM_20_E_COMMAND_SIZE = -2144861886;

const int TPM_20_E_COMMAND_CODE = -2144861885;

const int TPM_20_E_AUTHSIZE = -2144861884;

const int TPM_20_E_AUTH_CONTEXT = -2144861883;

const int TPM_20_E_NV_RANGE = -2144861882;

const int TPM_20_E_NV_SIZE = -2144861881;

const int TPM_20_E_NV_LOCKED = -2144861880;

const int TPM_20_E_NV_AUTHORIZATION = -2144861879;

const int TPM_20_E_NV_UNINITIALIZED = -2144861878;

const int TPM_20_E_NV_SPACE = -2144861877;

const int TPM_20_E_NV_DEFINED = -2144861876;

const int TPM_20_E_BAD_CONTEXT = -2144861872;

const int TPM_20_E_CPHASH = -2144861871;

const int TPM_20_E_PARENT = -2144861870;

const int TPM_20_E_NEEDS_TEST = -2144861869;

const int TPM_20_E_NO_RESULT = -2144861868;

const int TPM_20_E_SENSITIVE = -2144861867;

const int TPM_E_COMMAND_BLOCKED = -2144861184;

const int TPM_E_INVALID_HANDLE = -2144861183;

const int TPM_E_DUPLICATE_VHANDLE = -2144861182;

const int TPM_E_EMBEDDED_COMMAND_BLOCKED = -2144861181;

const int TPM_E_EMBEDDED_COMMAND_UNSUPPORTED = -2144861180;

const int TPM_E_RETRY = -2144860160;

const int TPM_E_NEEDS_SELFTEST = -2144860159;

const int TPM_E_DOING_SELFTEST = -2144860158;

const int TPM_E_DEFEND_LOCK_RUNNING = -2144860157;

const int TPM_20_E_CONTEXT_GAP = -2144859903;

const int TPM_20_E_OBJECT_MEMORY = -2144859902;

const int TPM_20_E_SESSION_MEMORY = -2144859901;

const int TPM_20_E_MEMORY = -2144859900;

const int TPM_20_E_SESSION_HANDLES = -2144859899;

const int TPM_20_E_OBJECT_HANDLES = -2144859898;

const int TPM_20_E_LOCALITY = -2144859897;

const int TPM_20_E_YIELDED = -2144859896;

const int TPM_20_E_CANCELED = -2144859895;

const int TPM_20_E_TESTING = -2144859894;

const int TPM_20_E_NV_RATE = -2144859872;

const int TPM_20_E_LOCKOUT = -2144859871;

const int TPM_20_E_RETRY = -2144859870;

const int TPM_20_E_NV_UNAVAILABLE = -2144859869;

const int TBS_E_INTERNAL_ERROR = -2144845823;

const int TBS_E_BAD_PARAMETER = -2144845822;

const int TBS_E_INVALID_OUTPUT_POINTER = -2144845821;

const int TBS_E_INVALID_CONTEXT = -2144845820;

const int TBS_E_INSUFFICIENT_BUFFER = -2144845819;

const int TBS_E_IOERROR = -2144845818;

const int TBS_E_INVALID_CONTEXT_PARAM = -2144845817;

const int TBS_E_SERVICE_NOT_RUNNING = -2144845816;

const int TBS_E_TOO_MANY_TBS_CONTEXTS = -2144845815;

const int TBS_E_TOO_MANY_RESOURCES = -2144845814;

const int TBS_E_SERVICE_START_PENDING = -2144845813;

const int TBS_E_PPI_NOT_SUPPORTED = -2144845812;

const int TBS_E_COMMAND_CANCELED = -2144845811;

const int TBS_E_BUFFER_TOO_LARGE = -2144845810;

const int TBS_E_TPM_NOT_FOUND = -2144845809;

const int TBS_E_SERVICE_DISABLED = -2144845808;

const int TBS_E_NO_EVENT_LOG = -2144845807;

const int TBS_E_ACCESS_DENIED = -2144845806;

const int TBS_E_PROVISIONING_NOT_ALLOWED = -2144845805;

const int TBS_E_PPI_FUNCTION_UNSUPPORTED = -2144845804;

const int TBS_E_OWNERAUTH_NOT_FOUND = -2144845803;

const int TBS_E_PROVISIONING_INCOMPLETE = -2144845802;

const int TPMAPI_E_INVALID_STATE = -2144796416;

const int TPMAPI_E_NOT_ENOUGH_DATA = -2144796415;

const int TPMAPI_E_TOO_MUCH_DATA = -2144796414;

const int TPMAPI_E_INVALID_OUTPUT_POINTER = -2144796413;

const int TPMAPI_E_INVALID_PARAMETER = -2144796412;

const int TPMAPI_E_OUT_OF_MEMORY = -2144796411;

const int TPMAPI_E_BUFFER_TOO_SMALL = -2144796410;

const int TPMAPI_E_INTERNAL_ERROR = -2144796409;

const int TPMAPI_E_ACCESS_DENIED = -2144796408;

const int TPMAPI_E_AUTHORIZATION_FAILED = -2144796407;

const int TPMAPI_E_INVALID_CONTEXT_HANDLE = -2144796406;

const int TPMAPI_E_TBS_COMMUNICATION_ERROR = -2144796405;

const int TPMAPI_E_TPM_COMMAND_ERROR = -2144796404;

const int TPMAPI_E_MESSAGE_TOO_LARGE = -2144796403;

const int TPMAPI_E_INVALID_ENCODING = -2144796402;

const int TPMAPI_E_INVALID_KEY_SIZE = -2144796401;

const int TPMAPI_E_ENCRYPTION_FAILED = -2144796400;

const int TPMAPI_E_INVALID_KEY_PARAMS = -2144796399;

const int TPMAPI_E_INVALID_MIGRATION_AUTHORIZATION_BLOB = -2144796398;

const int TPMAPI_E_INVALID_PCR_INDEX = -2144796397;

const int TPMAPI_E_INVALID_DELEGATE_BLOB = -2144796396;

const int TPMAPI_E_INVALID_CONTEXT_PARAMS = -2144796395;

const int TPMAPI_E_INVALID_KEY_BLOB = -2144796394;

const int TPMAPI_E_INVALID_PCR_DATA = -2144796393;

const int TPMAPI_E_INVALID_OWNER_AUTH = -2144796392;

const int TPMAPI_E_FIPS_RNG_CHECK_FAILED = -2144796391;

const int TPMAPI_E_EMPTY_TCG_LOG = -2144796390;

const int TPMAPI_E_INVALID_TCG_LOG_ENTRY = -2144796389;

const int TPMAPI_E_TCG_SEPARATOR_ABSENT = -2144796388;

const int TPMAPI_E_TCG_INVALID_DIGEST_ENTRY = -2144796387;

const int TPMAPI_E_POLICY_DENIES_OPERATION = -2144796386;

const int TPMAPI_E_NV_BITS_NOT_DEFINED = -2144796385;

const int TPMAPI_E_NV_BITS_NOT_READY = -2144796384;

const int TPMAPI_E_SEALING_KEY_NOT_AVAILABLE = -2144796383;

const int TPMAPI_E_NO_AUTHORIZATION_CHAIN_FOUND = -2144796382;

const int TPMAPI_E_SVN_COUNTER_NOT_AVAILABLE = -2144796381;

const int TPMAPI_E_OWNER_AUTH_NOT_NULL = -2144796380;

const int TPMAPI_E_ENDORSEMENT_AUTH_NOT_NULL = -2144796379;

const int TPMAPI_E_AUTHORIZATION_REVOKED = -2144796378;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_KEY = -2144796377;

const int TPMAPI_E_AUTHORIZING_KEY_NOT_SUPPORTED = -2144796376;

const int TPMAPI_E_INVALID_AUTHORIZATION_SIGNATURE = -2144796375;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_POLICY = -2144796374;

const int TPMAPI_E_MALFORMED_AUTHORIZATION_OTHER = -2144796373;

const int TPMAPI_E_SEALING_KEY_CHANGED = -2144796372;

const int TPMAPI_E_INVALID_TPM_VERSION = -2144796371;

const int TPMAPI_E_INVALID_POLICYAUTH_BLOB_TYPE = -2144796370;

const int TBSIMP_E_BUFFER_TOO_SMALL = -2144796160;

const int TBSIMP_E_CLEANUP_FAILED = -2144796159;

const int TBSIMP_E_INVALID_CONTEXT_HANDLE = -2144796158;

const int TBSIMP_E_INVALID_CONTEXT_PARAM = -2144796157;

const int TBSIMP_E_TPM_ERROR = -2144796156;

const int TBSIMP_E_HASH_BAD_KEY = -2144796155;

const int TBSIMP_E_DUPLICATE_VHANDLE = -2144796154;

const int TBSIMP_E_INVALID_OUTPUT_POINTER = -2144796153;

const int TBSIMP_E_INVALID_PARAMETER = -2144796152;

const int TBSIMP_E_RPC_INIT_FAILED = -2144796151;

const int TBSIMP_E_SCHEDULER_NOT_RUNNING = -2144796150;

const int TBSIMP_E_COMMAND_CANCELED = -2144796149;

const int TBSIMP_E_OUT_OF_MEMORY = -2144796148;

const int TBSIMP_E_LIST_NO_MORE_ITEMS = -2144796147;

const int TBSIMP_E_LIST_NOT_FOUND = -2144796146;

const int TBSIMP_E_NOT_ENOUGH_SPACE = -2144796145;

const int TBSIMP_E_NOT_ENOUGH_TPM_CONTEXTS = -2144796144;

const int TBSIMP_E_COMMAND_FAILED = -2144796143;

const int TBSIMP_E_UNKNOWN_ORDINAL = -2144796142;

const int TBSIMP_E_RESOURCE_EXPIRED = -2144796141;

const int TBSIMP_E_INVALID_RESOURCE = -2144796140;

const int TBSIMP_E_NOTHING_TO_UNLOAD = -2144796139;

const int TBSIMP_E_HASH_TABLE_FULL = -2144796138;

const int TBSIMP_E_TOO_MANY_TBS_CONTEXTS = -2144796137;

const int TBSIMP_E_TOO_MANY_RESOURCES = -2144796136;

const int TBSIMP_E_PPI_NOT_SUPPORTED = -2144796135;

const int TBSIMP_E_TPM_INCOMPATIBLE = -2144796134;

const int TBSIMP_E_NO_EVENT_LOG = -2144796133;

const int TPM_E_PPI_ACPI_FAILURE = -2144795904;

const int TPM_E_PPI_USER_ABORT = -2144795903;

const int TPM_E_PPI_BIOS_FAILURE = -2144795902;

const int TPM_E_PPI_NOT_SUPPORTED = -2144795901;

const int TPM_E_PPI_BLOCKED_IN_BIOS = -2144795900;

const int TPM_E_PCP_ERROR_MASK = -2144795648;

const int TPM_E_PCP_DEVICE_NOT_READY = -2144795647;

const int TPM_E_PCP_INVALID_HANDLE = -2144795646;

const int TPM_E_PCP_INVALID_PARAMETER = -2144795645;

const int TPM_E_PCP_FLAG_NOT_SUPPORTED = -2144795644;

const int TPM_E_PCP_NOT_SUPPORTED = -2144795643;

const int TPM_E_PCP_BUFFER_TOO_SMALL = -2144795642;

const int TPM_E_PCP_INTERNAL_ERROR = -2144795641;

const int TPM_E_PCP_AUTHENTICATION_FAILED = -2144795640;

const int TPM_E_PCP_AUTHENTICATION_IGNORED = -2144795639;

const int TPM_E_PCP_POLICY_NOT_FOUND = -2144795638;

const int TPM_E_PCP_PROFILE_NOT_FOUND = -2144795637;

const int TPM_E_PCP_VALIDATION_FAILED = -2144795636;

const int TPM_E_PCP_WRONG_PARENT = -2144795634;

const int TPM_E_KEY_NOT_LOADED = -2144795633;

const int TPM_E_NO_KEY_CERTIFICATION = -2144795632;

const int TPM_E_KEY_NOT_FINALIZED = -2144795631;

const int TPM_E_ATTESTATION_CHALLENGE_NOT_SET = -2144795630;

const int TPM_E_NOT_PCR_BOUND = -2144795629;

const int TPM_E_KEY_ALREADY_FINALIZED = -2144795628;

const int TPM_E_KEY_USAGE_POLICY_NOT_SUPPORTED = -2144795627;

const int TPM_E_KEY_USAGE_POLICY_INVALID = -2144795626;

const int TPM_E_SOFT_KEY_ERROR = -2144795625;

const int TPM_E_KEY_NOT_AUTHENTICATED = -2144795624;

const int TPM_E_PCP_KEY_NOT_AIK = -2144795623;

const int TPM_E_KEY_NOT_SIGNING_KEY = -2144795622;

const int TPM_E_LOCKED_OUT = -2144795621;

const int TPM_E_CLAIM_TYPE_NOT_SUPPORTED = -2144795620;

const int TPM_E_VERSION_NOT_SUPPORTED = -2144795619;

const int TPM_E_BUFFER_LENGTH_MISMATCH = -2144795618;

const int TPM_E_PCP_IFX_RSA_KEY_CREATION_BLOCKED = -2144795617;

const int TPM_E_PCP_TICKET_MISSING = -2144795616;

const int TPM_E_PCP_RAW_POLICY_NOT_SUPPORTED = -2144795615;

const int TPM_E_PCP_KEY_HANDLE_INVALIDATED = -2144795614;

const int TPM_E_PCP_UNSUPPORTED_PSS_SALT = 1076429859;

const int TPM_E_PCP_PLATFORM_CLAIM_MAY_BE_OUTDATED = 1076429860;

const int TPM_E_PCP_PLATFORM_CLAIM_OUTDATED = 1076429861;

const int TPM_E_PCP_PLATFORM_CLAIM_REBOOT = 1076429862;

const int TPM_E_ZERO_EXHAUST_ENABLED = -2144795392;

const int TPM_E_PROVISIONING_INCOMPLETE = -2144795136;

const int TPM_E_INVALID_OWNER_AUTH = -2144795135;

const int TPM_E_TOO_MUCH_DATA = -2144795134;

const int TPM_E_TPM_GENERATED_EPS = -2144795133;

const int PLA_E_DCS_NOT_FOUND = -2144337918;

const int PLA_E_DCS_IN_USE = -2144337750;

const int PLA_E_TOO_MANY_FOLDERS = -2144337851;

const int PLA_E_NO_MIN_DISK = -2144337808;

const int PLA_E_DCS_ALREADY_EXISTS = -2144337737;

const int PLA_S_PROPERTY_IGNORED = 3145984;

const int PLA_E_PROPERTY_CONFLICT = -2144337663;

const int PLA_E_DCS_SINGLETON_REQUIRED = -2144337662;

const int PLA_E_CREDENTIALS_REQUIRED = -2144337661;

const int PLA_E_DCS_NOT_RUNNING = -2144337660;

const int PLA_E_CONFLICT_INCL_EXCL_API = -2144337659;

const int PLA_E_NETWORK_EXE_NOT_VALID = -2144337658;

const int PLA_E_EXE_ALREADY_CONFIGURED = -2144337657;

const int PLA_E_EXE_PATH_NOT_VALID = -2144337656;

const int PLA_E_DC_ALREADY_EXISTS = -2144337655;

const int PLA_E_DCS_START_WAIT_TIMEOUT = -2144337654;

const int PLA_E_DC_START_WAIT_TIMEOUT = -2144337653;

const int PLA_E_REPORT_WAIT_TIMEOUT = -2144337652;

const int PLA_E_NO_DUPLICATES = -2144337651;

const int PLA_E_EXE_FULL_PATH_REQUIRED = -2144337650;

const int PLA_E_INVALID_SESSION_NAME = -2144337649;

const int PLA_E_PLA_CHANNEL_NOT_ENABLED = -2144337648;

const int PLA_E_TASKSCHED_CHANNEL_NOT_ENABLED = -2144337647;

const int PLA_E_RULES_MANAGER_FAILED = -2144337646;

const int PLA_E_CABAPI_FAILURE = -2144337645;

const int FVE_E_LOCKED_VOLUME = -2144272384;

const int FVE_E_NOT_ENCRYPTED = -2144272383;

const int FVE_E_NO_TPM_BIOS = -2144272382;

const int FVE_E_NO_MBR_METRIC = -2144272381;

const int FVE_E_NO_BOOTSECTOR_METRIC = -2144272380;

const int FVE_E_NO_BOOTMGR_METRIC = -2144272379;

const int FVE_E_WRONG_BOOTMGR = -2144272378;

const int FVE_E_SECURE_KEY_REQUIRED = -2144272377;

const int FVE_E_NOT_ACTIVATED = -2144272376;

const int FVE_E_ACTION_NOT_ALLOWED = -2144272375;

const int FVE_E_AD_SCHEMA_NOT_INSTALLED = -2144272374;

const int FVE_E_AD_INVALID_DATATYPE = -2144272373;

const int FVE_E_AD_INVALID_DATASIZE = -2144272372;

const int FVE_E_AD_NO_VALUES = -2144272371;

const int FVE_E_AD_ATTR_NOT_SET = -2144272370;

const int FVE_E_AD_GUID_NOT_FOUND = -2144272369;

const int FVE_E_BAD_INFORMATION = -2144272368;

const int FVE_E_TOO_SMALL = -2144272367;

const int FVE_E_SYSTEM_VOLUME = -2144272366;

const int FVE_E_FAILED_WRONG_FS = -2144272365;

const int FVE_E_BAD_PARTITION_SIZE = -2144272364;

const int FVE_E_NOT_SUPPORTED = -2144272363;

const int FVE_E_BAD_DATA = -2144272362;

const int FVE_E_VOLUME_NOT_BOUND = -2144272361;

const int FVE_E_TPM_NOT_OWNED = -2144272360;

const int FVE_E_NOT_DATA_VOLUME = -2144272359;

const int FVE_E_AD_INSUFFICIENT_BUFFER = -2144272358;

const int FVE_E_CONV_READ = -2144272357;

const int FVE_E_CONV_WRITE = -2144272356;

const int FVE_E_KEY_REQUIRED = -2144272355;

const int FVE_E_CLUSTERING_NOT_SUPPORTED = -2144272354;

const int FVE_E_VOLUME_BOUND_ALREADY = -2144272353;

const int FVE_E_OS_NOT_PROTECTED = -2144272352;

const int FVE_E_PROTECTION_DISABLED = -2144272351;

const int FVE_E_RECOVERY_KEY_REQUIRED = -2144272350;

const int FVE_E_FOREIGN_VOLUME = -2144272349;

const int FVE_E_OVERLAPPED_UPDATE = -2144272348;

const int FVE_E_TPM_SRK_AUTH_NOT_ZERO = -2144272347;

const int FVE_E_FAILED_SECTOR_SIZE = -2144272346;

const int FVE_E_FAILED_AUTHENTICATION = -2144272345;

const int FVE_E_NOT_OS_VOLUME = -2144272344;

const int FVE_E_AUTOUNLOCK_ENABLED = -2144272343;

const int FVE_E_WRONG_BOOTSECTOR = -2144272342;

const int FVE_E_WRONG_SYSTEM_FS = -2144272341;

const int FVE_E_POLICY_PASSWORD_REQUIRED = -2144272340;

const int FVE_E_CANNOT_SET_FVEK_ENCRYPTED = -2144272339;

const int FVE_E_CANNOT_ENCRYPT_NO_KEY = -2144272338;

const int FVE_E_BOOTABLE_CDDVD = -2144272336;

const int FVE_E_PROTECTOR_EXISTS = -2144272335;

const int FVE_E_RELATIVE_PATH = -2144272334;

const int FVE_E_PROTECTOR_NOT_FOUND = -2144272333;

const int FVE_E_INVALID_KEY_FORMAT = -2144272332;

const int FVE_E_INVALID_PASSWORD_FORMAT = -2144272331;

const int FVE_E_FIPS_RNG_CHECK_FAILED = -2144272330;

const int FVE_E_FIPS_PREVENTS_RECOVERY_PASSWORD = -2144272329;

const int FVE_E_FIPS_PREVENTS_EXTERNAL_KEY_EXPORT = -2144272328;

const int FVE_E_NOT_DECRYPTED = -2144272327;

const int FVE_E_INVALID_PROTECTOR_TYPE = -2144272326;

const int FVE_E_NO_PROTECTORS_TO_TEST = -2144272325;

const int FVE_E_KEYFILE_NOT_FOUND = -2144272324;

const int FVE_E_KEYFILE_INVALID = -2144272323;

const int FVE_E_KEYFILE_NO_VMK = -2144272322;

const int FVE_E_TPM_DISABLED = -2144272321;

const int FVE_E_NOT_ALLOWED_IN_SAFE_MODE = -2144272320;

const int FVE_E_TPM_INVALID_PCR = -2144272319;

const int FVE_E_TPM_NO_VMK = -2144272318;

const int FVE_E_PIN_INVALID = -2144272317;

const int FVE_E_AUTH_INVALID_APPLICATION = -2144272316;

const int FVE_E_AUTH_INVALID_CONFIG = -2144272315;

const int FVE_E_FIPS_DISABLE_PROTECTION_NOT_ALLOWED = -2144272314;

const int FVE_E_FS_NOT_EXTENDED = -2144272313;

const int FVE_E_FIRMWARE_TYPE_NOT_SUPPORTED = -2144272312;

const int FVE_E_NO_LICENSE = -2144272311;

const int FVE_E_NOT_ON_STACK = -2144272310;

const int FVE_E_FS_MOUNTED = -2144272309;

const int FVE_E_TOKEN_NOT_IMPERSONATED = -2144272308;

const int FVE_E_DRY_RUN_FAILED = -2144272307;

const int FVE_E_REBOOT_REQUIRED = -2144272306;

const int FVE_E_DEBUGGER_ENABLED = -2144272305;

const int FVE_E_RAW_ACCESS = -2144272304;

const int FVE_E_RAW_BLOCKED = -2144272303;

const int FVE_E_BCD_APPLICATIONS_PATH_INCORRECT = -2144272302;

const int FVE_E_NOT_ALLOWED_IN_VERSION = -2144272301;

const int FVE_E_NO_AUTOUNLOCK_MASTER_KEY = -2144272300;

const int FVE_E_MOR_FAILED = -2144272299;

const int FVE_E_HIDDEN_VOLUME = -2144272298;

const int FVE_E_TRANSIENT_STATE = -2144272297;

const int FVE_E_PUBKEY_NOT_ALLOWED = -2144272296;

const int FVE_E_VOLUME_HANDLE_OPEN = -2144272295;

const int FVE_E_NO_FEATURE_LICENSE = -2144272294;

const int FVE_E_INVALID_STARTUP_OPTIONS = -2144272293;

const int FVE_E_POLICY_RECOVERY_PASSWORD_NOT_ALLOWED = -2144272292;

const int FVE_E_POLICY_RECOVERY_PASSWORD_REQUIRED = -2144272291;

const int FVE_E_POLICY_RECOVERY_KEY_NOT_ALLOWED = -2144272290;

const int FVE_E_POLICY_RECOVERY_KEY_REQUIRED = -2144272289;

const int FVE_E_POLICY_STARTUP_PIN_NOT_ALLOWED = -2144272288;

const int FVE_E_POLICY_STARTUP_PIN_REQUIRED = -2144272287;

const int FVE_E_POLICY_STARTUP_KEY_NOT_ALLOWED = -2144272286;

const int FVE_E_POLICY_STARTUP_KEY_REQUIRED = -2144272285;

const int FVE_E_POLICY_STARTUP_PIN_KEY_NOT_ALLOWED = -2144272284;

const int FVE_E_POLICY_STARTUP_PIN_KEY_REQUIRED = -2144272283;

const int FVE_E_POLICY_STARTUP_TPM_NOT_ALLOWED = -2144272282;

const int FVE_E_POLICY_STARTUP_TPM_REQUIRED = -2144272281;

const int FVE_E_POLICY_INVALID_PIN_LENGTH = -2144272280;

const int FVE_E_KEY_PROTECTOR_NOT_SUPPORTED = -2144272279;

const int FVE_E_POLICY_PASSPHRASE_NOT_ALLOWED = -2144272278;

const int FVE_E_POLICY_PASSPHRASE_REQUIRED = -2144272277;

const int FVE_E_FIPS_PREVENTS_PASSPHRASE = -2144272276;

const int FVE_E_OS_VOLUME_PASSPHRASE_NOT_ALLOWED = -2144272275;

const int FVE_E_INVALID_BITLOCKER_OID = -2144272274;

const int FVE_E_VOLUME_TOO_SMALL = -2144272273;

const int FVE_E_DV_NOT_SUPPORTED_ON_FS = -2144272272;

const int FVE_E_DV_NOT_ALLOWED_BY_GP = -2144272271;

const int FVE_E_POLICY_USER_CERTIFICATE_NOT_ALLOWED = -2144272270;

const int FVE_E_POLICY_USER_CERTIFICATE_REQUIRED = -2144272269;

const int FVE_E_POLICY_USER_CERT_MUST_BE_HW = -2144272268;

const int FVE_E_POLICY_USER_CONFIGURE_FDV_AUTOUNLOCK_NOT_ALLOWED = -2144272267;

const int FVE_E_POLICY_USER_CONFIGURE_RDV_AUTOUNLOCK_NOT_ALLOWED = -2144272266;

const int FVE_E_POLICY_USER_CONFIGURE_RDV_NOT_ALLOWED = -2144272265;

const int FVE_E_POLICY_USER_ENABLE_RDV_NOT_ALLOWED = -2144272264;

const int FVE_E_POLICY_USER_DISABLE_RDV_NOT_ALLOWED = -2144272263;

const int FVE_E_POLICY_INVALID_PASSPHRASE_LENGTH = -2144272256;

const int FVE_E_POLICY_PASSPHRASE_TOO_SIMPLE = -2144272255;

const int FVE_E_RECOVERY_PARTITION = -2144272254;

const int FVE_E_POLICY_CONFLICT_FDV_RK_OFF_AUK_ON = -2144272253;

const int FVE_E_POLICY_CONFLICT_RDV_RK_OFF_AUK_ON = -2144272252;

const int FVE_E_NON_BITLOCKER_OID = -2144272251;

const int FVE_E_POLICY_PROHIBITS_SELFSIGNED = -2144272250;

const int FVE_E_POLICY_CONFLICT_RO_AND_STARTUP_KEY_REQUIRED = -2144272249;

const int FVE_E_CONV_RECOVERY_FAILED = -2144272248;

const int FVE_E_VIRTUALIZED_SPACE_TOO_BIG = -2144272247;

const int FVE_E_POLICY_CONFLICT_OSV_RP_OFF_ADB_ON = -2144272240;

const int FVE_E_POLICY_CONFLICT_FDV_RP_OFF_ADB_ON = -2144272239;

const int FVE_E_POLICY_CONFLICT_RDV_RP_OFF_ADB_ON = -2144272238;

const int FVE_E_NON_BITLOCKER_KU = -2144272237;

const int FVE_E_PRIVATEKEY_AUTH_FAILED = -2144272236;

const int FVE_E_REMOVAL_OF_DRA_FAILED = -2144272235;

const int FVE_E_OPERATION_NOT_SUPPORTED_ON_VISTA_VOLUME = -2144272234;

const int FVE_E_CANT_LOCK_AUTOUNLOCK_ENABLED_VOLUME = -2144272233;

const int FVE_E_FIPS_HASH_KDF_NOT_ALLOWED = -2144272232;

const int FVE_E_ENH_PIN_INVALID = -2144272231;

const int FVE_E_INVALID_PIN_CHARS = -2144272230;

const int FVE_E_INVALID_DATUM_TYPE = -2144272229;

const int FVE_E_EFI_ONLY = -2144272228;

const int FVE_E_MULTIPLE_NKP_CERTS = -2144272227;

const int FVE_E_REMOVAL_OF_NKP_FAILED = -2144272226;

const int FVE_E_INVALID_NKP_CERT = -2144272225;

const int FVE_E_NO_EXISTING_PIN = -2144272224;

const int FVE_E_PROTECTOR_CHANGE_PIN_MISMATCH = -2144272223;

const int FVE_E_PIN_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED = -2144272222;

const int FVE_E_PROTECTOR_CHANGE_MAX_PIN_CHANGE_ATTEMPTS_REACHED = -2144272221;

const int FVE_E_POLICY_PASSPHRASE_REQUIRES_ASCII = -2144272220;

const int FVE_E_FULL_ENCRYPTION_NOT_ALLOWED_ON_TP_STORAGE = -2144272219;

const int FVE_E_WIPE_NOT_ALLOWED_ON_TP_STORAGE = -2144272218;

const int FVE_E_KEY_LENGTH_NOT_SUPPORTED_BY_EDRIVE = -2144272217;

const int FVE_E_NO_EXISTING_PASSPHRASE = -2144272216;

const int FVE_E_PROTECTOR_CHANGE_PASSPHRASE_MISMATCH = -2144272215;

const int FVE_E_PASSPHRASE_TOO_LONG = -2144272214;

const int FVE_E_NO_PASSPHRASE_WITH_TPM = -2144272213;

const int FVE_E_NO_TPM_WITH_PASSPHRASE = -2144272212;

const int FVE_E_NOT_ALLOWED_ON_CSV_STACK = -2144272211;

const int FVE_E_NOT_ALLOWED_ON_CLUSTER = -2144272210;

const int FVE_E_EDRIVE_NO_FAILOVER_TO_SW = -2144272209;

const int FVE_E_EDRIVE_BAND_IN_USE = -2144272208;

const int FVE_E_EDRIVE_DISALLOWED_BY_GP = -2144272207;

const int FVE_E_EDRIVE_INCOMPATIBLE_VOLUME = -2144272206;

const int FVE_E_NOT_ALLOWED_TO_UPGRADE_WHILE_CONVERTING = -2144272205;

const int FVE_E_EDRIVE_DV_NOT_SUPPORTED = -2144272204;

const int FVE_E_NO_PREBOOT_KEYBOARD_DETECTED = -2144272203;

const int FVE_E_NO_PREBOOT_KEYBOARD_OR_WINRE_DETECTED = -2144272202;

const int FVE_E_POLICY_REQUIRES_STARTUP_PIN_ON_TOUCH_DEVICE = -2144272201;

const int FVE_E_POLICY_REQUIRES_RECOVERY_PASSWORD_ON_TOUCH_DEVICE = -2144272200;

const int FVE_E_WIPE_CANCEL_NOT_APPLICABLE = -2144272199;

const int FVE_E_SECUREBOOT_DISABLED = -2144272198;

const int FVE_E_SECUREBOOT_CONFIGURATION_INVALID = -2144272197;

const int FVE_E_EDRIVE_DRY_RUN_FAILED = -2144272196;

const int FVE_E_SHADOW_COPY_PRESENT = -2144272195;

const int FVE_E_POLICY_INVALID_ENHANCED_BCD_SETTINGS = -2144272194;

const int FVE_E_EDRIVE_INCOMPATIBLE_FIRMWARE = -2144272193;

const int FVE_E_PROTECTOR_CHANGE_MAX_PASSPHRASE_CHANGE_ATTEMPTS_REACHED =
    -2144272192;

const int FVE_E_PASSPHRASE_PROTECTOR_CHANGE_BY_STD_USER_DISALLOWED =
    -2144272191;

const int FVE_E_LIVEID_ACCOUNT_SUSPENDED = -2144272190;

const int FVE_E_LIVEID_ACCOUNT_BLOCKED = -2144272189;

const int FVE_E_NOT_PROVISIONED_ON_ALL_VOLUMES = -2144272188;

const int FVE_E_DE_FIXED_DATA_NOT_SUPPORTED = -2144272187;

const int FVE_E_DE_HARDWARE_NOT_COMPLIANT = -2144272186;

const int FVE_E_DE_WINRE_NOT_CONFIGURED = -2144272185;

const int FVE_E_DE_PROTECTION_SUSPENDED = -2144272184;

const int FVE_E_DE_OS_VOLUME_NOT_PROTECTED = -2144272183;

const int FVE_E_DE_DEVICE_LOCKEDOUT = -2144272182;

const int FVE_E_DE_PROTECTION_NOT_YET_ENABLED = -2144272181;

const int FVE_E_INVALID_PIN_CHARS_DETAILED = -2144272180;

const int FVE_E_DEVICE_LOCKOUT_COUNTER_UNAVAILABLE = -2144272179;

const int FVE_E_DEVICELOCKOUT_COUNTER_MISMATCH = -2144272178;

const int FVE_E_BUFFER_TOO_LARGE = -2144272177;

const int FVE_E_NO_SUCH_CAPABILITY_ON_TARGET = -2144272176;

const int FVE_E_DE_PREVENTED_FOR_OS = -2144272175;

const int FVE_E_DE_VOLUME_OPTED_OUT = -2144272174;

const int FVE_E_DE_VOLUME_NOT_SUPPORTED = -2144272173;

const int FVE_E_EOW_NOT_SUPPORTED_IN_VERSION = -2144272172;

const int FVE_E_ADBACKUP_NOT_ENABLED = -2144272171;

const int FVE_E_VOLUME_EXTEND_PREVENTS_EOW_DECRYPT = -2144272170;

const int FVE_E_NOT_DE_VOLUME = -2144272169;

const int FVE_E_PROTECTION_CANNOT_BE_DISABLED = -2144272168;

const int FVE_E_OSV_KSR_NOT_ALLOWED = -2144272167;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_OS_DRIVE = -2144272166;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_FIXED_DRIVE = -2144272165;

const int FVE_E_AD_BACKUP_REQUIRED_POLICY_NOT_SET_REMOVABLE_DRIVE = -2144272164;

const int FVE_E_KEY_ROTATION_NOT_SUPPORTED = -2144272163;

const int FVE_E_EXECUTE_REQUEST_SENT_TOO_SOON = -2144272162;

const int FVE_E_KEY_ROTATION_NOT_ENABLED = -2144272161;

const int FVE_E_DEVICE_NOT_JOINED = -2144272160;

const int FVE_E_AAD_ENDPOINT_BUSY = -2144272159;

const int FVE_E_INVALID_NBP_CERT = -2144272158;

const int FVE_E_EDRIVE_BAND_ENUMERATION_FAILED = -2144272157;

const int FVE_E_POLICY_ON_RDV_EXCLUSION_LIST = -2144272156;

const int FVE_E_PREDICTED_TPM_PROTECTOR_NOT_SUPPORTED = -2144272155;

const int FVE_E_SETUP_TPM_CALLBACK_NOT_SUPPORTED = -2144272154;

const int FVE_E_TPM_CONTEXT_SETUP_NOT_SUPPORTED = -2144272153;

const int FVE_E_UPDATE_INVALID_CONFIG = -2144272152;

const int FVE_E_AAD_SERVER_FAIL_RETRY_AFTER = -2144272151;

const int FVE_E_AAD_SERVER_FAIL_BACKOFF = -2144272150;

const int FVE_E_DATASET_FULL = -2144272149;

const int FVE_E_METADATA_FULL = -2144272148;

const int FWP_E_CALLOUT_NOT_FOUND = -2144206847;

const int FWP_E_CONDITION_NOT_FOUND = -2144206846;

const int FWP_E_FILTER_NOT_FOUND = -2144206845;

const int FWP_E_LAYER_NOT_FOUND = -2144206844;

const int FWP_E_PROVIDER_NOT_FOUND = -2144206843;

const int FWP_E_PROVIDER_CONTEXT_NOT_FOUND = -2144206842;

const int FWP_E_SUBLAYER_NOT_FOUND = -2144206841;

const int FWP_E_NOT_FOUND = -2144206840;

const int FWP_E_ALREADY_EXISTS = -2144206839;

const int FWP_E_IN_USE = -2144206838;

const int FWP_E_DYNAMIC_SESSION_IN_PROGRESS = -2144206837;

const int FWP_E_WRONG_SESSION = -2144206836;

const int FWP_E_NO_TXN_IN_PROGRESS = -2144206835;

const int FWP_E_TXN_IN_PROGRESS = -2144206834;

const int FWP_E_TXN_ABORTED = -2144206833;

const int FWP_E_SESSION_ABORTED = -2144206832;

const int FWP_E_INCOMPATIBLE_TXN = -2144206831;

const int FWP_E_TIMEOUT = -2144206830;

const int FWP_E_NET_EVENTS_DISABLED = -2144206829;

const int FWP_E_INCOMPATIBLE_LAYER = -2144206828;

const int FWP_E_KM_CLIENTS_ONLY = -2144206827;

const int FWP_E_LIFETIME_MISMATCH = -2144206826;

const int FWP_E_BUILTIN_OBJECT = -2144206825;

const int FWP_E_TOO_MANY_CALLOUTS = -2144206824;

const int FWP_E_NOTIFICATION_DROPPED = -2144206823;

const int FWP_E_TRAFFIC_MISMATCH = -2144206822;

const int FWP_E_INCOMPATIBLE_SA_STATE = -2144206821;

const int FWP_E_NULL_POINTER = -2144206820;

const int FWP_E_INVALID_ENUMERATOR = -2144206819;

const int FWP_E_INVALID_FLAGS = -2144206818;

const int FWP_E_INVALID_NET_MASK = -2144206817;

const int FWP_E_INVALID_RANGE = -2144206816;

const int FWP_E_INVALID_INTERVAL = -2144206815;

const int FWP_E_ZERO_LENGTH_ARRAY = -2144206814;

const int FWP_E_NULL_DISPLAY_NAME = -2144206813;

const int FWP_E_INVALID_ACTION_TYPE = -2144206812;

const int FWP_E_INVALID_WEIGHT = -2144206811;

const int FWP_E_MATCH_TYPE_MISMATCH = -2144206810;

const int FWP_E_TYPE_MISMATCH = -2144206809;

const int FWP_E_OUT_OF_BOUNDS = -2144206808;

const int FWP_E_RESERVED = -2144206807;

const int FWP_E_DUPLICATE_CONDITION = -2144206806;

const int FWP_E_DUPLICATE_KEYMOD = -2144206805;

const int FWP_E_ACTION_INCOMPATIBLE_WITH_LAYER = -2144206804;

const int FWP_E_ACTION_INCOMPATIBLE_WITH_SUBLAYER = -2144206803;

const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_LAYER = -2144206802;

const int FWP_E_CONTEXT_INCOMPATIBLE_WITH_CALLOUT = -2144206801;

const int FWP_E_INCOMPATIBLE_AUTH_METHOD = -2144206800;

const int FWP_E_INCOMPATIBLE_DH_GROUP = -2144206799;

const int FWP_E_EM_NOT_SUPPORTED = -2144206798;

const int FWP_E_NEVER_MATCH = -2144206797;

const int FWP_E_PROVIDER_CONTEXT_MISMATCH = -2144206796;

const int FWP_E_INVALID_PARAMETER = -2144206795;

const int FWP_E_TOO_MANY_SUBLAYERS = -2144206794;

const int FWP_E_CALLOUT_NOTIFICATION_FAILED = -2144206793;

const int FWP_E_INVALID_AUTH_TRANSFORM = -2144206792;

const int FWP_E_INVALID_CIPHER_TRANSFORM = -2144206791;

const int FWP_E_INCOMPATIBLE_CIPHER_TRANSFORM = -2144206790;

const int FWP_E_INVALID_TRANSFORM_COMBINATION = -2144206789;

const int FWP_E_DUPLICATE_AUTH_METHOD = -2144206788;

const int FWP_E_INVALID_TUNNEL_ENDPOINT = -2144206787;

const int FWP_E_L2_DRIVER_NOT_READY = -2144206786;

const int FWP_E_KEY_DICTATOR_ALREADY_REGISTERED = -2144206785;

const int FWP_E_KEY_DICTATION_INVALID_KEYING_MATERIAL = -2144206784;

const int FWP_E_CONNECTIONS_DISABLED = -2144206783;

const int FWP_E_INVALID_DNS_NAME = -2144206782;

const int FWP_E_STILL_ON = -2144206781;

const int FWP_E_IKEEXT_NOT_RUNNING = -2144206780;

const int FWP_E_DROP_NOICMP = -2144206588;

const int WS_S_ASYNC = 3997696;

const int WS_S_END = 3997697;

const int WS_E_INVALID_FORMAT = -2143485952;

const int WS_E_OBJECT_FAULTED = -2143485951;

const int WS_E_NUMERIC_OVERFLOW = -2143485950;

const int WS_E_INVALID_OPERATION = -2143485949;

const int WS_E_OPERATION_ABORTED = -2143485948;

const int WS_E_ENDPOINT_ACCESS_DENIED = -2143485947;

const int WS_E_OPERATION_TIMED_OUT = -2143485946;

const int WS_E_OPERATION_ABANDONED = -2143485945;

const int WS_E_QUOTA_EXCEEDED = -2143485944;

const int WS_E_NO_TRANSLATION_AVAILABLE = -2143485943;

const int WS_E_SECURITY_VERIFICATION_FAILURE = -2143485942;

const int WS_E_ADDRESS_IN_USE = -2143485941;

const int WS_E_ADDRESS_NOT_AVAILABLE = -2143485940;

const int WS_E_ENDPOINT_NOT_FOUND = -2143485939;

const int WS_E_ENDPOINT_NOT_AVAILABLE = -2143485938;

const int WS_E_ENDPOINT_FAILURE = -2143485937;

const int WS_E_ENDPOINT_UNREACHABLE = -2143485936;

const int WS_E_ENDPOINT_ACTION_NOT_SUPPORTED = -2143485935;

const int WS_E_ENDPOINT_TOO_BUSY = -2143485934;

const int WS_E_ENDPOINT_FAULT_RECEIVED = -2143485933;

const int WS_E_ENDPOINT_DISCONNECTED = -2143485932;

const int WS_E_PROXY_FAILURE = -2143485931;

const int WS_E_PROXY_ACCESS_DENIED = -2143485930;

const int WS_E_NOT_SUPPORTED = -2143485929;

const int WS_E_PROXY_REQUIRES_BASIC_AUTH = -2143485928;

const int WS_E_PROXY_REQUIRES_DIGEST_AUTH = -2143485927;

const int WS_E_PROXY_REQUIRES_NTLM_AUTH = -2143485926;

const int WS_E_PROXY_REQUIRES_NEGOTIATE_AUTH = -2143485925;

const int WS_E_SERVER_REQUIRES_BASIC_AUTH = -2143485924;

const int WS_E_SERVER_REQUIRES_DIGEST_AUTH = -2143485923;

const int WS_E_SERVER_REQUIRES_NTLM_AUTH = -2143485922;

const int WS_E_SERVER_REQUIRES_NEGOTIATE_AUTH = -2143485921;

const int WS_E_INVALID_ENDPOINT_URL = -2143485920;

const int WS_E_OTHER = -2143485919;

const int WS_E_SECURITY_TOKEN_EXPIRED = -2143485918;

const int WS_E_SECURITY_SYSTEM_FAILURE = -2143485917;

const int ERROR_NDIS_INTERFACE_CLOSING = 2150891522;

const int ERROR_NDIS_BAD_VERSION = 2150891524;

const int ERROR_NDIS_BAD_CHARACTERISTICS = 2150891525;

const int ERROR_NDIS_ADAPTER_NOT_FOUND = 2150891526;

const int ERROR_NDIS_OPEN_FAILED = 2150891527;

const int ERROR_NDIS_DEVICE_FAILED = 2150891528;

const int ERROR_NDIS_MULTICAST_FULL = 2150891529;

const int ERROR_NDIS_MULTICAST_EXISTS = 2150891530;

const int ERROR_NDIS_MULTICAST_NOT_FOUND = 2150891531;

const int ERROR_NDIS_REQUEST_ABORTED = 2150891532;

const int ERROR_NDIS_RESET_IN_PROGRESS = 2150891533;

const int ERROR_NDIS_NOT_SUPPORTED = 2150891707;

const int ERROR_NDIS_INVALID_PACKET = 2150891535;

const int ERROR_NDIS_ADAPTER_NOT_READY = 2150891537;

const int ERROR_NDIS_INVALID_LENGTH = 2150891540;

const int ERROR_NDIS_INVALID_DATA = 2150891541;

const int ERROR_NDIS_BUFFER_TOO_SHORT = 2150891542;

const int ERROR_NDIS_INVALID_OID = 2150891543;

const int ERROR_NDIS_ADAPTER_REMOVED = 2150891544;

const int ERROR_NDIS_UNSUPPORTED_MEDIA = 2150891545;

const int ERROR_NDIS_GROUP_ADDRESS_IN_USE = 2150891546;

const int ERROR_NDIS_FILE_NOT_FOUND = 2150891547;

const int ERROR_NDIS_ERROR_READING_FILE = 2150891548;

const int ERROR_NDIS_ALREADY_MAPPED = 2150891549;

const int ERROR_NDIS_RESOURCE_CONFLICT = 2150891550;

const int ERROR_NDIS_MEDIA_DISCONNECTED = 2150891551;

const int ERROR_NDIS_INVALID_ADDRESS = 2150891554;

const int ERROR_NDIS_INVALID_DEVICE_REQUEST = 2150891536;

const int ERROR_NDIS_PAUSED = 2150891562;

const int ERROR_NDIS_INTERFACE_NOT_FOUND = 2150891563;

const int ERROR_NDIS_UNSUPPORTED_REVISION = 2150891564;

const int ERROR_NDIS_INVALID_PORT = 2150891565;

const int ERROR_NDIS_INVALID_PORT_STATE = 2150891566;

const int ERROR_NDIS_LOW_POWER_STATE = 2150891567;

const int ERROR_NDIS_REINIT_REQUIRED = 2150891568;

const int ERROR_NDIS_NO_QUEUES = 2150891569;

const int ERROR_NDIS_DOT11_AUTO_CONFIG_ENABLED = 2150899712;

const int ERROR_NDIS_DOT11_MEDIA_IN_USE = 2150899713;

const int ERROR_NDIS_DOT11_POWER_STATE_INVALID = 2150899714;

const int ERROR_NDIS_PM_WOL_PATTERN_LIST_FULL = 2150899715;

const int ERROR_NDIS_PM_PROTOCOL_OFFLOAD_LIST_FULL = 2150899716;

const int ERROR_NDIS_DOT11_AP_CHANNEL_CURRENTLY_NOT_AVAILABLE = 2150899717;

const int ERROR_NDIS_DOT11_AP_BAND_CURRENTLY_NOT_AVAILABLE = 2150899718;

const int ERROR_NDIS_DOT11_AP_CHANNEL_NOT_ALLOWED = 2150899719;

const int ERROR_NDIS_DOT11_AP_BAND_NOT_ALLOWED = 2150899720;

const int ERROR_NDIS_INDICATION_REQUIRED = 3407873;

const int ERROR_NDIS_OFFLOAD_POLICY = 3224637455;

const int ERROR_NDIS_OFFLOAD_CONNECTION_REJECTED = 3224637458;

const int ERROR_NDIS_OFFLOAD_PATH_REJECTED = 3224637459;

const int ERROR_HV_INVALID_HYPERCALL_CODE = 3224698882;

const int ERROR_HV_INVALID_HYPERCALL_INPUT = 3224698883;

const int ERROR_HV_INVALID_ALIGNMENT = 3224698884;

const int ERROR_HV_INVALID_PARAMETER = 3224698885;

const int ERROR_HV_ACCESS_DENIED = 3224698886;

const int ERROR_HV_INVALID_PARTITION_STATE = 3224698887;

const int ERROR_HV_OPERATION_DENIED = 3224698888;

const int ERROR_HV_UNKNOWN_PROPERTY = 3224698889;

const int ERROR_HV_PROPERTY_VALUE_OUT_OF_RANGE = 3224698890;

const int ERROR_HV_INSUFFICIENT_MEMORY = 3224698891;

const int ERROR_HV_PARTITION_TOO_DEEP = 3224698892;

const int ERROR_HV_INVALID_PARTITION_ID = 3224698893;

const int ERROR_HV_INVALID_VP_INDEX = 3224698894;

const int ERROR_HV_INVALID_PORT_ID = 3224698897;

const int ERROR_HV_INVALID_CONNECTION_ID = 3224698898;

const int ERROR_HV_INSUFFICIENT_BUFFERS = 3224698899;

const int ERROR_HV_NOT_ACKNOWLEDGED = 3224698900;

const int ERROR_HV_INVALID_VP_STATE = 3224698901;

const int ERROR_HV_ACKNOWLEDGED = 3224698902;

const int ERROR_HV_INVALID_SAVE_RESTORE_STATE = 3224698903;

const int ERROR_HV_INVALID_SYNIC_STATE = 3224698904;

const int ERROR_HV_OBJECT_IN_USE = 3224698905;

const int ERROR_HV_INVALID_PROXIMITY_DOMAIN_INFO = 3224698906;

const int ERROR_HV_NO_DATA = 3224698907;

const int ERROR_HV_INACTIVE = 3224698908;

const int ERROR_HV_NO_RESOURCES = 3224698909;

const int ERROR_HV_FEATURE_UNAVAILABLE = 3224698910;

const int ERROR_HV_INSUFFICIENT_BUFFER = 3224698931;

const int ERROR_HV_INSUFFICIENT_DEVICE_DOMAINS = 3224698936;

const int ERROR_HV_CPUID_FEATURE_VALIDATION = 3224698940;

const int ERROR_HV_CPUID_XSAVE_FEATURE_VALIDATION = 3224698941;

const int ERROR_HV_PROCESSOR_STARTUP_TIMEOUT = 3224698942;

const int ERROR_HV_SMX_ENABLED = 3224698943;

const int ERROR_HV_INVALID_LP_INDEX = 3224698945;

const int ERROR_HV_INVALID_REGISTER_VALUE = 3224698960;

const int ERROR_HV_INVALID_VTL_STATE = 3224698961;

const int ERROR_HV_NX_NOT_DETECTED = 3224698965;

const int ERROR_HV_INVALID_DEVICE_ID = 3224698967;

const int ERROR_HV_INVALID_DEVICE_STATE = 3224698968;

const int ERROR_HV_PENDING_PAGE_REQUESTS = 3473497;

const int ERROR_HV_PAGE_REQUEST_INVALID = 3224698976;

const int ERROR_HV_INVALID_CPU_GROUP_ID = 3224698991;

const int ERROR_HV_INVALID_CPU_GROUP_STATE = 3224698992;

const int ERROR_HV_OPERATION_FAILED = 3224698993;

const int ERROR_HV_NOT_ALLOWED_WITH_NESTED_VIRT_ACTIVE = 3224698994;

const int ERROR_HV_INSUFFICIENT_ROOT_MEMORY = 3224698995;

const int ERROR_HV_EVENT_BUFFER_ALREADY_FREED = 3224698996;

const int ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY = 3224698997;

const int ERROR_HV_DEVICE_NOT_IN_DOMAIN = 3224698998;

const int ERROR_HV_NESTED_VM_EXIT = 3224698999;

const int ERROR_HV_MSR_ACCESS_FAILED = 3224699008;

const int ERROR_HV_INSUFFICIENT_MEMORY_MIRRORING = 3224699009;

const int ERROR_HV_INSUFFICIENT_CONTIGUOUS_MEMORY_MIRRORING = 3224699010;

const int ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY = 3224699011;

const int ERROR_HV_INSUFFICIENT_ROOT_MEMORY_MIRRORING = 3224699012;

const int ERROR_HV_INSUFFICIENT_CONTIGUOUS_ROOT_MEMORY_MIRRORING = 3224699013;

const int ERROR_HV_NOT_PRESENT = 3224702976;

const int ERROR_VID_DUPLICATE_HANDLER = 3224829953;

const int ERROR_VID_TOO_MANY_HANDLERS = 3224829954;

const int ERROR_VID_QUEUE_FULL = 3224829955;

const int ERROR_VID_HANDLER_NOT_PRESENT = 3224829956;

const int ERROR_VID_INVALID_OBJECT_NAME = 3224829957;

const int ERROR_VID_PARTITION_NAME_TOO_LONG = 3224829958;

const int ERROR_VID_MESSAGE_QUEUE_NAME_TOO_LONG = 3224829959;

const int ERROR_VID_PARTITION_ALREADY_EXISTS = 3224829960;

const int ERROR_VID_PARTITION_DOES_NOT_EXIST = 3224829961;

const int ERROR_VID_PARTITION_NAME_NOT_FOUND = 3224829962;

const int ERROR_VID_MESSAGE_QUEUE_ALREADY_EXISTS = 3224829963;

const int ERROR_VID_EXCEEDED_MBP_ENTRY_MAP_LIMIT = 3224829964;

const int ERROR_VID_MB_STILL_REFERENCED = 3224829965;

const int ERROR_VID_CHILD_GPA_PAGE_SET_CORRUPTED = 3224829966;

const int ERROR_VID_INVALID_NUMA_SETTINGS = 3224829967;

const int ERROR_VID_INVALID_NUMA_NODE_INDEX = 3224829968;

const int ERROR_VID_NOTIFICATION_QUEUE_ALREADY_ASSOCIATED = 3224829969;

const int ERROR_VID_INVALID_MEMORY_BLOCK_HANDLE = 3224829970;

const int ERROR_VID_PAGE_RANGE_OVERFLOW = 3224829971;

const int ERROR_VID_INVALID_MESSAGE_QUEUE_HANDLE = 3224829972;

const int ERROR_VID_INVALID_GPA_RANGE_HANDLE = 3224829973;

const int ERROR_VID_NO_MEMORY_BLOCK_NOTIFICATION_QUEUE = 3224829974;

const int ERROR_VID_MEMORY_BLOCK_LOCK_COUNT_EXCEEDED = 3224829975;

const int ERROR_VID_INVALID_PPM_HANDLE = 3224829976;

const int ERROR_VID_MBPS_ARE_LOCKED = 3224829977;

const int ERROR_VID_MESSAGE_QUEUE_CLOSED = 3224829978;

const int ERROR_VID_VIRTUAL_PROCESSOR_LIMIT_EXCEEDED = 3224829979;

const int ERROR_VID_STOP_PENDING = 3224829980;

const int ERROR_VID_INVALID_PROCESSOR_STATE = 3224829981;

const int ERROR_VID_EXCEEDED_KM_CONTEXT_COUNT_LIMIT = 3224829982;

const int ERROR_VID_KM_INTERFACE_ALREADY_INITIALIZED = 3224829983;

const int ERROR_VID_MB_PROPERTY_ALREADY_SET_RESET = 3224829984;

const int ERROR_VID_MMIO_RANGE_DESTROYED = 3224829985;

const int ERROR_VID_INVALID_CHILD_GPA_PAGE_SET = 3224829986;

const int ERROR_VID_RESERVE_PAGE_SET_IS_BEING_USED = 3224829987;

const int ERROR_VID_RESERVE_PAGE_SET_TOO_SMALL = 3224829988;

const int ERROR_VID_MBP_ALREADY_LOCKED_USING_RESERVED_PAGE = 3224829989;

const int ERROR_VID_MBP_COUNT_EXCEEDED_LIMIT = 3224829990;

const int ERROR_VID_SAVED_STATE_CORRUPT = 3224829991;

const int ERROR_VID_SAVED_STATE_UNRECOGNIZED_ITEM = 3224829992;

const int ERROR_VID_SAVED_STATE_INCOMPATIBLE = 3224829993;

const int ERROR_VID_VTL_ACCESS_DENIED = 3224829994;

const int ERROR_VID_INSUFFICIENT_RESOURCES_RESERVE = 3224829995;

const int ERROR_VID_INSUFFICIENT_RESOURCES_PHYSICAL_BUFFER = 3224829996;

const int ERROR_VID_INSUFFICIENT_RESOURCES_HV_DEPOSIT = 3224829997;

const int ERROR_VID_MEMORY_TYPE_NOT_SUPPORTED = 3224829998;

const int ERROR_VID_INSUFFICIENT_RESOURCES_WITHDRAW = 3224829999;

const int ERROR_VID_PROCESS_ALREADY_SET = 3224830000;

const int ERROR_VMCOMPUTE_TERMINATED_DURING_START = 3224830208;

const int ERROR_VMCOMPUTE_IMAGE_MISMATCH = 3224830209;

const int ERROR_VMCOMPUTE_HYPERV_NOT_INSTALLED = 3224830210;

const int ERROR_VMCOMPUTE_OPERATION_PENDING = 3224830211;

const int ERROR_VMCOMPUTE_TOO_MANY_NOTIFICATIONS = 3224830212;

const int ERROR_VMCOMPUTE_INVALID_STATE = 3224830213;

const int ERROR_VMCOMPUTE_UNEXPECTED_EXIT = 3224830214;

const int ERROR_VMCOMPUTE_TERMINATED = 3224830215;

const int ERROR_VMCOMPUTE_CONNECT_FAILED = 3224830216;

const int ERROR_VMCOMPUTE_TIMEOUT = 3224830217;

const int ERROR_VMCOMPUTE_CONNECTION_CLOSED = 3224830218;

const int ERROR_VMCOMPUTE_UNKNOWN_MESSAGE = 3224830219;

const int ERROR_VMCOMPUTE_UNSUPPORTED_PROTOCOL_VERSION = 3224830220;

const int ERROR_VMCOMPUTE_INVALID_JSON = 3224830221;

const int ERROR_VMCOMPUTE_SYSTEM_NOT_FOUND = 3224830222;

const int ERROR_VMCOMPUTE_SYSTEM_ALREADY_EXISTS = 3224830223;

const int ERROR_VMCOMPUTE_SYSTEM_ALREADY_STOPPED = 3224830224;

const int ERROR_VMCOMPUTE_PROTOCOL_ERROR = 3224830225;

const int ERROR_VMCOMPUTE_INVALID_LAYER = 3224830226;

const int ERROR_VMCOMPUTE_WINDOWS_INSIDER_REQUIRED = 3224830227;

const int HCS_E_TERMINATED_DURING_START = -2143878912;

const int HCS_E_IMAGE_MISMATCH = -2143878911;

const int HCS_E_HYPERV_NOT_INSTALLED = -2143878910;

const int HCS_E_INVALID_STATE = -2143878907;

const int HCS_E_UNEXPECTED_EXIT = -2143878906;

const int HCS_E_TERMINATED = -2143878905;

const int HCS_E_CONNECT_FAILED = -2143878904;

const int HCS_E_CONNECTION_TIMEOUT = -2143878903;

const int HCS_E_CONNECTION_CLOSED = -2143878902;

const int HCS_E_UNKNOWN_MESSAGE = -2143878901;

const int HCS_E_UNSUPPORTED_PROTOCOL_VERSION = -2143878900;

const int HCS_E_INVALID_JSON = -2143878899;

const int HCS_E_SYSTEM_NOT_FOUND = -2143878898;

const int HCS_E_SYSTEM_ALREADY_EXISTS = -2143878897;

const int HCS_E_SYSTEM_ALREADY_STOPPED = -2143878896;

const int HCS_E_PROTOCOL_ERROR = -2143878895;

const int HCS_E_INVALID_LAYER = -2143878894;

const int HCS_E_WINDOWS_INSIDER_REQUIRED = -2143878893;

const int HCS_E_SERVICE_NOT_AVAILABLE = -2143878892;

const int HCS_E_OPERATION_NOT_STARTED = -2143878891;

const int HCS_E_OPERATION_ALREADY_STARTED = -2143878890;

const int HCS_E_OPERATION_PENDING = -2143878889;

const int HCS_E_OPERATION_TIMEOUT = -2143878888;

const int HCS_E_OPERATION_SYSTEM_CALLBACK_ALREADY_SET = -2143878887;

const int HCS_E_OPERATION_RESULT_ALLOCATION_FAILED = -2143878886;

const int HCS_E_ACCESS_DENIED = -2143878885;

const int HCS_E_GUEST_CRITICAL_ERROR = -2143878884;

const int HCS_E_PROCESS_INFO_NOT_AVAILABLE = -2143878883;

const int HCS_E_SERVICE_DISCONNECT = -2143878882;

const int HCS_E_PROCESS_ALREADY_STOPPED = -2143878881;

const int HCS_E_SYSTEM_NOT_CONFIGURED_FOR_OPERATION = -2143878880;

const int HCS_E_OPERATION_ALREADY_CANCELLED = -2143878879;

const int ERROR_VNET_VIRTUAL_SWITCH_NAME_NOT_FOUND = 3224830464;

const int ERROR_VID_REMOTE_NODE_PARENT_GPA_PAGES_USED = 2151088129;

const int WHV_E_UNKNOWN_CAPABILITY = -2143878400;

const int WHV_E_INSUFFICIENT_BUFFER = -2143878399;

const int WHV_E_UNKNOWN_PROPERTY = -2143878398;

const int WHV_E_UNSUPPORTED_HYPERVISOR_CONFIG = -2143878397;

const int WHV_E_INVALID_PARTITION_CONFIG = -2143878396;

const int WHV_E_GPA_RANGE_NOT_FOUND = -2143878395;

const int WHV_E_VP_ALREADY_EXISTS = -2143878394;

const int WHV_E_VP_DOES_NOT_EXIST = -2143878393;

const int WHV_E_INVALID_VP_STATE = -2143878392;

const int WHV_E_INVALID_VP_REGISTER_NAME = -2143878391;

const int WHV_E_UNSUPPORTED_PROCESSOR_CONFIG = -2143878384;

const int ERROR_VSMB_SAVED_STATE_FILE_NOT_FOUND = 3224830976;

const int ERROR_VSMB_SAVED_STATE_CORRUPT = 3224830977;

const int VM_SAVED_STATE_DUMP_E_PARTITION_STATE_NOT_FOUND = -1070136064;

const int VM_SAVED_STATE_DUMP_E_GUEST_MEMORY_NOT_FOUND = -1070136063;

const int VM_SAVED_STATE_DUMP_E_NO_VP_FOUND_IN_PARTITION_STATE = -1070136062;

const int VM_SAVED_STATE_DUMP_E_NESTED_VIRTUALIZATION_NOT_SUPPORTED =
    -1070136061;

const int VM_SAVED_STATE_DUMP_E_WINDOWS_KERNEL_IMAGE_NOT_FOUND = -1070136060;

const int VM_SAVED_STATE_DUMP_E_VA_NOT_MAPPED = -1070136059;

const int VM_SAVED_STATE_DUMP_E_INVALID_VP_STATE = -1070136058;

const int VM_SAVED_STATE_DUMP_E_VP_VTL_NOT_ENABLED = -1070136055;

const int ERROR_DM_OPERATION_LIMIT_EXCEEDED = -1070135808;

const int ERROR_VOLMGR_INCOMPLETE_REGENERATION = 2151153665;

const int ERROR_VOLMGR_INCOMPLETE_DISK_MIGRATION = 2151153666;

const int ERROR_VOLMGR_DATABASE_FULL = 3224895489;

const int ERROR_VOLMGR_DISK_CONFIGURATION_CORRUPTED = 3224895490;

const int ERROR_VOLMGR_DISK_CONFIGURATION_NOT_IN_SYNC = 3224895491;

const int ERROR_VOLMGR_PACK_CONFIG_UPDATE_FAILED = 3224895492;

const int ERROR_VOLMGR_DISK_CONTAINS_NON_SIMPLE_VOLUME = 3224895493;

const int ERROR_VOLMGR_DISK_DUPLICATE = 3224895494;

const int ERROR_VOLMGR_DISK_DYNAMIC = 3224895495;

const int ERROR_VOLMGR_DISK_ID_INVALID = 3224895496;

const int ERROR_VOLMGR_DISK_INVALID = 3224895497;

const int ERROR_VOLMGR_DISK_LAST_VOTER = 3224895498;

const int ERROR_VOLMGR_DISK_LAYOUT_INVALID = 3224895499;

const int ERROR_VOLMGR_DISK_LAYOUT_NON_BASIC_BETWEEN_BASIC_PARTITIONS =
    3224895500;

const int ERROR_VOLMGR_DISK_LAYOUT_NOT_CYLINDER_ALIGNED = 3224895501;

const int ERROR_VOLMGR_DISK_LAYOUT_PARTITIONS_TOO_SMALL = 3224895502;

const int ERROR_VOLMGR_DISK_LAYOUT_PRIMARY_BETWEEN_LOGICAL_PARTITIONS =
    3224895503;

const int ERROR_VOLMGR_DISK_LAYOUT_TOO_MANY_PARTITIONS = 3224895504;

const int ERROR_VOLMGR_DISK_MISSING = 3224895505;

const int ERROR_VOLMGR_DISK_NOT_EMPTY = 3224895506;

const int ERROR_VOLMGR_DISK_NOT_ENOUGH_SPACE = 3224895507;

const int ERROR_VOLMGR_DISK_REVECTORING_FAILED = 3224895508;

const int ERROR_VOLMGR_DISK_SECTOR_SIZE_INVALID = 3224895509;

const int ERROR_VOLMGR_DISK_SET_NOT_CONTAINED = 3224895510;

const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_MEMBERS = 3224895511;

const int ERROR_VOLMGR_DISK_USED_BY_MULTIPLE_PLEXES = 3224895512;

const int ERROR_VOLMGR_DYNAMIC_DISK_NOT_SUPPORTED = 3224895513;

const int ERROR_VOLMGR_EXTENT_ALREADY_USED = 3224895514;

const int ERROR_VOLMGR_EXTENT_NOT_CONTIGUOUS = 3224895515;

const int ERROR_VOLMGR_EXTENT_NOT_IN_PUBLIC_REGION = 3224895516;

const int ERROR_VOLMGR_EXTENT_NOT_SECTOR_ALIGNED = 3224895517;

const int ERROR_VOLMGR_EXTENT_OVERLAPS_EBR_PARTITION = 3224895518;

const int ERROR_VOLMGR_EXTENT_VOLUME_LENGTHS_DO_NOT_MATCH = 3224895519;

const int ERROR_VOLMGR_FAULT_TOLERANT_NOT_SUPPORTED = 3224895520;

const int ERROR_VOLMGR_INTERLEAVE_LENGTH_INVALID = 3224895521;

const int ERROR_VOLMGR_MAXIMUM_REGISTERED_USERS = 3224895522;

const int ERROR_VOLMGR_MEMBER_IN_SYNC = 3224895523;

const int ERROR_VOLMGR_MEMBER_INDEX_DUPLICATE = 3224895524;

const int ERROR_VOLMGR_MEMBER_INDEX_INVALID = 3224895525;

const int ERROR_VOLMGR_MEMBER_MISSING = 3224895526;

const int ERROR_VOLMGR_MEMBER_NOT_DETACHED = 3224895527;

const int ERROR_VOLMGR_MEMBER_REGENERATING = 3224895528;

const int ERROR_VOLMGR_ALL_DISKS_FAILED = 3224895529;

const int ERROR_VOLMGR_NO_REGISTERED_USERS = 3224895530;

const int ERROR_VOLMGR_NO_SUCH_USER = 3224895531;

const int ERROR_VOLMGR_NOTIFICATION_RESET = 3224895532;

const int ERROR_VOLMGR_NUMBER_OF_MEMBERS_INVALID = 3224895533;

const int ERROR_VOLMGR_NUMBER_OF_PLEXES_INVALID = 3224895534;

const int ERROR_VOLMGR_PACK_DUPLICATE = 3224895535;

const int ERROR_VOLMGR_PACK_ID_INVALID = 3224895536;

const int ERROR_VOLMGR_PACK_INVALID = 3224895537;

const int ERROR_VOLMGR_PACK_NAME_INVALID = 3224895538;

const int ERROR_VOLMGR_PACK_OFFLINE = 3224895539;

const int ERROR_VOLMGR_PACK_HAS_QUORUM = 3224895540;

const int ERROR_VOLMGR_PACK_WITHOUT_QUORUM = 3224895541;

const int ERROR_VOLMGR_PARTITION_STYLE_INVALID = 3224895542;

const int ERROR_VOLMGR_PARTITION_UPDATE_FAILED = 3224895543;

const int ERROR_VOLMGR_PLEX_IN_SYNC = 3224895544;

const int ERROR_VOLMGR_PLEX_INDEX_DUPLICATE = 3224895545;

const int ERROR_VOLMGR_PLEX_INDEX_INVALID = 3224895546;

const int ERROR_VOLMGR_PLEX_LAST_ACTIVE = 3224895547;

const int ERROR_VOLMGR_PLEX_MISSING = 3224895548;

const int ERROR_VOLMGR_PLEX_REGENERATING = 3224895549;

const int ERROR_VOLMGR_PLEX_TYPE_INVALID = 3224895550;

const int ERROR_VOLMGR_PLEX_NOT_RAID5 = 3224895551;

const int ERROR_VOLMGR_PLEX_NOT_SIMPLE = 3224895552;

const int ERROR_VOLMGR_STRUCTURE_SIZE_INVALID = 3224895553;

const int ERROR_VOLMGR_TOO_MANY_NOTIFICATION_REQUESTS = 3224895554;

const int ERROR_VOLMGR_TRANSACTION_IN_PROGRESS = 3224895555;

const int ERROR_VOLMGR_UNEXPECTED_DISK_LAYOUT_CHANGE = 3224895556;

const int ERROR_VOLMGR_VOLUME_CONTAINS_MISSING_DISK = 3224895557;

const int ERROR_VOLMGR_VOLUME_ID_INVALID = 3224895558;

const int ERROR_VOLMGR_VOLUME_LENGTH_INVALID = 3224895559;

const int ERROR_VOLMGR_VOLUME_LENGTH_NOT_SECTOR_SIZE_MULTIPLE = 3224895560;

const int ERROR_VOLMGR_VOLUME_NOT_MIRRORED = 3224895561;

const int ERROR_VOLMGR_VOLUME_NOT_RETAINED = 3224895562;

const int ERROR_VOLMGR_VOLUME_OFFLINE = 3224895563;

const int ERROR_VOLMGR_VOLUME_RETAINED = 3224895564;

const int ERROR_VOLMGR_NUMBER_OF_EXTENTS_INVALID = 3224895565;

const int ERROR_VOLMGR_DIFFERENT_SECTOR_SIZE = 3224895566;

const int ERROR_VOLMGR_BAD_BOOT_DISK = 3224895567;

const int ERROR_VOLMGR_PACK_CONFIG_OFFLINE = 3224895568;

const int ERROR_VOLMGR_PACK_CONFIG_ONLINE = 3224895569;

const int ERROR_VOLMGR_NOT_PRIMARY_PACK = 3224895570;

const int ERROR_VOLMGR_PACK_LOG_UPDATE_FAILED = 3224895571;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_PLEX_INVALID = 3224895572;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_IN_MEMBER_INVALID = 3224895573;

const int ERROR_VOLMGR_VOLUME_MIRRORED = 3224895574;

const int ERROR_VOLMGR_PLEX_NOT_SIMPLE_SPANNED = 3224895575;

const int ERROR_VOLMGR_NO_VALID_LOG_COPIES = 3224895576;

const int ERROR_VOLMGR_PRIMARY_PACK_PRESENT = 3224895577;

const int ERROR_VOLMGR_NUMBER_OF_DISKS_INVALID = 3224895578;

const int ERROR_VOLMGR_MIRROR_NOT_SUPPORTED = 3224895579;

const int ERROR_VOLMGR_RAID5_NOT_SUPPORTED = 3224895580;

const int ERROR_BCD_NOT_ALL_ENTRIES_IMPORTED = 2151219201;

const int ERROR_BCD_TOO_MANY_ELEMENTS = 3224961026;

const int ERROR_BCD_NOT_ALL_ENTRIES_SYNCHRONIZED = 2151219203;

const int ERROR_VHD_DRIVE_FOOTER_MISSING = 3225026561;

const int ERROR_VHD_DRIVE_FOOTER_CHECKSUM_MISMATCH = 3225026562;

const int ERROR_VHD_DRIVE_FOOTER_CORRUPT = 3225026563;

const int ERROR_VHD_FORMAT_UNKNOWN = 3225026564;

const int ERROR_VHD_FORMAT_UNSUPPORTED_VERSION = 3225026565;

const int ERROR_VHD_SPARSE_HEADER_CHECKSUM_MISMATCH = 3225026566;

const int ERROR_VHD_SPARSE_HEADER_UNSUPPORTED_VERSION = 3225026567;

const int ERROR_VHD_SPARSE_HEADER_CORRUPT = 3225026568;

const int ERROR_VHD_BLOCK_ALLOCATION_FAILURE = 3225026569;

const int ERROR_VHD_BLOCK_ALLOCATION_TABLE_CORRUPT = 3225026570;

const int ERROR_VHD_INVALID_BLOCK_SIZE = 3225026571;

const int ERROR_VHD_BITMAP_MISMATCH = 3225026572;

const int ERROR_VHD_PARENT_VHD_NOT_FOUND = 3225026573;

const int ERROR_VHD_CHILD_PARENT_ID_MISMATCH = 3225026574;

const int ERROR_VHD_CHILD_PARENT_TIMESTAMP_MISMATCH = 3225026575;

const int ERROR_VHD_METADATA_READ_FAILURE = 3225026576;

const int ERROR_VHD_METADATA_WRITE_FAILURE = 3225026577;

const int ERROR_VHD_INVALID_SIZE = 3225026578;

const int ERROR_VHD_INVALID_FILE_SIZE = 3225026579;

const int ERROR_VIRTDISK_PROVIDER_NOT_FOUND = 3225026580;

const int ERROR_VIRTDISK_NOT_VIRTUAL_DISK = 3225026581;

const int ERROR_VHD_PARENT_VHD_ACCESS_DENIED = 3225026582;

const int ERROR_VHD_CHILD_PARENT_SIZE_MISMATCH = 3225026583;

const int ERROR_VHD_DIFFERENCING_CHAIN_CYCLE_DETECTED = 3225026584;

const int ERROR_VHD_DIFFERENCING_CHAIN_ERROR_IN_PARENT = 3225026585;

const int ERROR_VIRTUAL_DISK_LIMITATION = 3225026586;

const int ERROR_VHD_INVALID_TYPE = 3225026587;

const int ERROR_VHD_INVALID_STATE = 3225026588;

const int ERROR_VIRTDISK_UNSUPPORTED_DISK_SECTOR_SIZE = 3225026589;

const int ERROR_VIRTDISK_DISK_ALREADY_OWNED = 3225026590;

const int ERROR_VIRTDISK_DISK_ONLINE_AND_WRITABLE = 3225026591;

const int ERROR_CTLOG_TRACKING_NOT_INITIALIZED = 3225026592;

const int ERROR_CTLOG_LOGFILE_SIZE_EXCEEDED_MAXSIZE = 3225026593;

const int ERROR_CTLOG_VHD_CHANGED_OFFLINE = 3225026594;

const int ERROR_CTLOG_INVALID_TRACKING_STATE = 3225026595;

const int ERROR_CTLOG_INCONSISTENT_TRACKING_FILE = 3225026596;

const int ERROR_VHD_RESIZE_WOULD_TRUNCATE_DATA = 3225026597;

const int ERROR_VHD_COULD_NOT_COMPUTE_MINIMUM_VIRTUAL_SIZE = 3225026598;

const int ERROR_VHD_ALREADY_AT_OR_BELOW_MINIMUM_VIRTUAL_SIZE = 3225026599;

const int ERROR_VHD_METADATA_FULL = 3225026600;

const int ERROR_VHD_INVALID_CHANGE_TRACKING_ID = 3225026601;

const int ERROR_VHD_CHANGE_TRACKING_DISABLED = 3225026602;

const int ERROR_VHD_MISSING_CHANGE_TRACKING_INFORMATION = 3225026608;

const int ERROR_VHD_UNEXPECTED_ID = 3225026612;

const int ERROR_QUERY_STORAGE_ERROR = 2151284737;

const int HCN_E_NETWORK_NOT_FOUND = -2143617023;

const int HCN_E_ENDPOINT_NOT_FOUND = -2143617022;

const int HCN_E_LAYER_NOT_FOUND = -2143617021;

const int HCN_E_SWITCH_NOT_FOUND = -2143617020;

const int HCN_E_SUBNET_NOT_FOUND = -2143617019;

const int HCN_E_ADAPTER_NOT_FOUND = -2143617018;

const int HCN_E_PORT_NOT_FOUND = -2143617017;

const int HCN_E_POLICY_NOT_FOUND = -2143617016;

const int HCN_E_VFP_PORTSETTING_NOT_FOUND = -2143617015;

const int HCN_E_INVALID_NETWORK = -2143617014;

const int HCN_E_INVALID_NETWORK_TYPE = -2143617013;

const int HCN_E_INVALID_ENDPOINT = -2143617012;

const int HCN_E_INVALID_POLICY = -2143617011;

const int HCN_E_INVALID_POLICY_TYPE = -2143617010;

const int HCN_E_INVALID_REMOTE_ENDPOINT_OPERATION = -2143617009;

const int HCN_E_NETWORK_ALREADY_EXISTS = -2143617008;

const int HCN_E_LAYER_ALREADY_EXISTS = -2143617007;

const int HCN_E_POLICY_ALREADY_EXISTS = -2143617006;

const int HCN_E_PORT_ALREADY_EXISTS = -2143617005;

const int HCN_E_ENDPOINT_ALREADY_ATTACHED = -2143617004;

const int HCN_E_REQUEST_UNSUPPORTED = -2143617003;

const int HCN_E_MAPPING_NOT_SUPPORTED = -2143617002;

const int HCN_E_DEGRADED_OPERATION = -2143617001;

const int HCN_E_SHARED_SWITCH_MODIFICATION = -2143617000;

const int HCN_E_GUID_CONVERSION_FAILURE = -2143616999;

const int HCN_E_REGKEY_FAILURE = -2143616998;

const int HCN_E_INVALID_JSON = -2143616997;

const int HCN_E_INVALID_JSON_REFERENCE = -2143616996;

const int HCN_E_ENDPOINT_SHARING_DISABLED = -2143616995;

const int HCN_E_INVALID_IP = -2143616994;

const int HCN_E_SWITCH_EXTENSION_NOT_FOUND = -2143616993;

const int HCN_E_MANAGER_STOPPED = -2143616992;

const int GCN_E_MODULE_NOT_FOUND = -2143616991;

const int GCN_E_NO_REQUEST_HANDLERS = -2143616990;

const int GCN_E_REQUEST_UNSUPPORTED = -2143616989;

const int GCN_E_RUNTIMEKEYS_FAILED = -2143616988;

const int GCN_E_NETADAPTER_TIMEOUT = -2143616987;

const int GCN_E_NETADAPTER_NOT_FOUND = -2143616986;

const int GCN_E_NETCOMPARTMENT_NOT_FOUND = -2143616985;

const int GCN_E_NETINTERFACE_NOT_FOUND = -2143616984;

const int GCN_E_DEFAULTNAMESPACE_EXISTS = -2143616983;

const int HCN_E_ICS_DISABLED = -2143616982;

const int HCN_E_ENDPOINT_NAMESPACE_ALREADY_EXISTS = -2143616981;

const int HCN_E_ENTITY_HAS_REFERENCES = -2143616980;

const int HCN_E_INVALID_INTERNAL_PORT = -2143616979;

const int HCN_E_NAMESPACE_ATTACH_FAILED = -2143616978;

const int HCN_E_ADDR_INVALID_OR_RESERVED = -2143616977;

const int HCN_E_INVALID_PREFIX = -2143616976;

const int HCN_E_OBJECT_USED_AFTER_UNLOAD = -2143616975;

const int HCN_E_INVALID_SUBNET = -2143616974;

const int HCN_E_INVALID_IP_SUBNET = -2143616973;

const int HCN_E_ENDPOINT_NOT_ATTACHED = -2143616972;

const int HCN_E_ENDPOINT_NOT_LOCAL = -2143616971;

const int HCN_INTERFACEPARAMETERS_ALREADY_APPLIED = -2143616970;

const int HCN_E_VFP_NOT_ALLOWED = -2143616969;

const int SDIAG_E_CANCELLED = 2151416064;

const int SDIAG_E_SCRIPT = 2151416065;

const int SDIAG_E_POWERSHELL = 2151416066;

const int SDIAG_E_MANAGEDHOST = 2151416067;

const int SDIAG_E_NOVERIFIER = 2151416068;

const int SDIAG_S_CANNOTRUN = 3932421;

const int SDIAG_E_DISABLED = 2151416070;

const int SDIAG_E_TRUST = 2151416071;

const int SDIAG_E_CANNOTRUN = 2151416072;

const int SDIAG_E_VERSION = 2151416073;

const int SDIAG_E_RESOURCE = 2151416074;

const int SDIAG_E_ROOTCAUSE = 2151416075;

const int WPN_E_CHANNEL_CLOSED = -2143420160;

const int WPN_E_CHANNEL_REQUEST_NOT_COMPLETE = -2143420159;

const int WPN_E_INVALID_APP = -2143420158;

const int WPN_E_OUTSTANDING_CHANNEL_REQUEST = -2143420157;

const int WPN_E_DUPLICATE_CHANNEL = -2143420156;

const int WPN_E_PLATFORM_UNAVAILABLE = -2143420155;

const int WPN_E_NOTIFICATION_POSTED = -2143420154;

const int WPN_E_NOTIFICATION_HIDDEN = -2143420153;

const int WPN_E_NOTIFICATION_NOT_POSTED = -2143420152;

const int WPN_E_CLOUD_DISABLED = -2143420151;

const int WPN_E_CLOUD_INCAPABLE = -2143420144;

const int WPN_E_CLOUD_AUTH_UNAVAILABLE = -2143420134;

const int WPN_E_CLOUD_SERVICE_UNAVAILABLE = -2143420133;

const int WPN_E_FAILED_LOCK_SCREEN_UPDATE_INTIALIZATION = -2143420132;

const int WPN_E_NOTIFICATION_DISABLED = -2143420143;

const int WPN_E_NOTIFICATION_INCAPABLE = -2143420142;

const int WPN_E_INTERNET_INCAPABLE = -2143420141;

const int WPN_E_NOTIFICATION_TYPE_DISABLED = -2143420140;

const int WPN_E_NOTIFICATION_SIZE = -2143420139;

const int WPN_E_TAG_SIZE = -2143420138;

const int WPN_E_ACCESS_DENIED = -2143420137;

const int WPN_E_DUPLICATE_REGISTRATION = -2143420136;

const int WPN_E_PUSH_NOTIFICATION_INCAPABLE = -2143420135;

const int WPN_E_DEV_ID_SIZE = -2143420128;

const int WPN_E_TAG_ALPHANUMERIC = -2143420118;

const int WPN_E_INVALID_HTTP_STATUS_CODE = -2143420117;

const int WPN_E_OUT_OF_SESSION = -2143419904;

const int WPN_E_POWER_SAVE = -2143419903;

const int WPN_E_IMAGE_NOT_FOUND_IN_CACHE = -2143419902;

const int WPN_E_ALL_URL_NOT_COMPLETED = -2143419901;

const int WPN_E_INVALID_CLOUD_IMAGE = -2143419900;

const int WPN_E_NOTIFICATION_ID_MATCHED = -2143419899;

const int WPN_E_CALLBACK_ALREADY_REGISTERED = -2143419898;

const int WPN_E_TOAST_NOTIFICATION_DROPPED = -2143419897;

const int WPN_E_STORAGE_LOCKED = -2143419896;

const int WPN_E_GROUP_SIZE = -2143419895;

const int WPN_E_GROUP_ALPHANUMERIC = -2143419894;

const int WPN_E_CLOUD_DISABLED_FOR_APP = -2143419893;

const int E_MBN_CONTEXT_NOT_ACTIVATED = -2141945343;

const int E_MBN_BAD_SIM = -2141945342;

const int E_MBN_DATA_CLASS_NOT_AVAILABLE = -2141945341;

const int E_MBN_INVALID_ACCESS_STRING = -2141945340;

const int E_MBN_MAX_ACTIVATED_CONTEXTS = -2141945339;

const int E_MBN_PACKET_SVC_DETACHED = -2141945338;

const int E_MBN_PROVIDER_NOT_VISIBLE = -2141945337;

const int E_MBN_RADIO_POWER_OFF = -2141945336;

const int E_MBN_SERVICE_NOT_ACTIVATED = -2141945335;

const int E_MBN_SIM_NOT_INSERTED = -2141945334;

const int E_MBN_VOICE_CALL_IN_PROGRESS = -2141945333;

const int E_MBN_INVALID_CACHE = -2141945332;

const int E_MBN_NOT_REGISTERED = -2141945331;

const int E_MBN_PROVIDERS_NOT_FOUND = -2141945330;

const int E_MBN_PIN_NOT_SUPPORTED = -2141945329;

const int E_MBN_PIN_REQUIRED = -2141945328;

const int E_MBN_PIN_DISABLED = -2141945327;

const int E_MBN_FAILURE = -2141945326;

const int E_MBN_INVALID_PROFILE = -2141945320;

const int E_MBN_DEFAULT_PROFILE_EXIST = -2141945319;

const int E_MBN_SMS_ENCODING_NOT_SUPPORTED = -2141945312;

const int E_MBN_SMS_FILTER_NOT_SUPPORTED = -2141945311;

const int E_MBN_SMS_INVALID_MEMORY_INDEX = -2141945310;

const int E_MBN_SMS_LANG_NOT_SUPPORTED = -2141945309;

const int E_MBN_SMS_MEMORY_FAILURE = -2141945308;

const int E_MBN_SMS_NETWORK_TIMEOUT = -2141945307;

const int E_MBN_SMS_UNKNOWN_SMSC_ADDRESS = -2141945306;

const int E_MBN_SMS_FORMAT_NOT_SUPPORTED = -2141945305;

const int E_MBN_SMS_OPERATION_NOT_ALLOWED = -2141945304;

const int E_MBN_SMS_MEMORY_FULL = -2141945303;

const int PEER_E_IPV6_NOT_INSTALLED = -2140995583;

const int PEER_E_NOT_INITIALIZED = -2140995582;

const int PEER_E_CANNOT_START_SERVICE = -2140995581;

const int PEER_E_NOT_LICENSED = -2140995580;

const int PEER_E_INVALID_GRAPH = -2140995568;

const int PEER_E_DBNAME_CHANGED = -2140995567;

const int PEER_E_DUPLICATE_GRAPH = -2140995566;

const int PEER_E_GRAPH_NOT_READY = -2140995565;

const int PEER_E_GRAPH_SHUTTING_DOWN = -2140995564;

const int PEER_E_GRAPH_IN_USE = -2140995563;

const int PEER_E_INVALID_DATABASE = -2140995562;

const int PEER_E_TOO_MANY_ATTRIBUTES = -2140995561;

const int PEER_E_CONNECTION_NOT_FOUND = -2140995325;

const int PEER_E_CONNECT_SELF = -2140995322;

const int PEER_E_ALREADY_LISTENING = -2140995321;

const int PEER_E_NODE_NOT_FOUND = -2140995320;

const int PEER_E_CONNECTION_FAILED = -2140995319;

const int PEER_E_CONNECTION_NOT_AUTHENTICATED = -2140995318;

const int PEER_E_CONNECTION_REFUSED = -2140995317;

const int PEER_E_CLASSIFIER_TOO_LONG = -2140995071;

const int PEER_E_TOO_MANY_IDENTITIES = -2140995070;

const int PEER_E_NO_KEY_ACCESS = -2140995069;

const int PEER_E_GROUPS_EXIST = -2140995068;

const int PEER_E_RECORD_NOT_FOUND = -2140994815;

const int PEER_E_DATABASE_ACCESSDENIED = -2140994814;

const int PEER_E_DBINITIALIZATION_FAILED = -2140994813;

const int PEER_E_MAX_RECORD_SIZE_EXCEEDED = -2140994812;

const int PEER_E_DATABASE_ALREADY_PRESENT = -2140994811;

const int PEER_E_DATABASE_NOT_PRESENT = -2140994810;

const int PEER_E_IDENTITY_NOT_FOUND = -2140994559;

const int PEER_E_EVENT_HANDLE_NOT_FOUND = -2140994303;

const int PEER_E_INVALID_SEARCH = -2140994047;

const int PEER_E_INVALID_ATTRIBUTES = -2140994046;

const int PEER_E_INVITATION_NOT_TRUSTED = -2140993791;

const int PEER_E_CHAIN_TOO_LONG = -2140993789;

const int PEER_E_INVALID_TIME_PERIOD = -2140993787;

const int PEER_E_CIRCULAR_CHAIN_DETECTED = -2140993786;

const int PEER_E_CERT_STORE_CORRUPTED = -2140993535;

const int PEER_E_NO_CLOUD = -2140991487;

const int PEER_E_CLOUD_NAME_AMBIGUOUS = -2140991483;

const int PEER_E_INVALID_RECORD = -2140987376;

const int PEER_E_NOT_AUTHORIZED = -2140987360;

const int PEER_E_PASSWORD_DOES_NOT_MEET_POLICY = -2140987359;

const int PEER_E_DEFERRED_VALIDATION = -2140987344;

const int PEER_E_INVALID_GROUP_PROPERTIES = -2140987328;

const int PEER_E_INVALID_PEER_NAME = -2140987312;

const int PEER_E_INVALID_CLASSIFIER = -2140987296;

const int PEER_E_INVALID_FRIENDLY_NAME = -2140987280;

const int PEER_E_INVALID_ROLE_PROPERTY = -2140987279;

const int PEER_E_INVALID_CLASSIFIER_PROPERTY = -2140987278;

const int PEER_E_INVALID_RECORD_EXPIRATION = -2140987264;

const int PEER_E_INVALID_CREDENTIAL_INFO = -2140987263;

const int PEER_E_INVALID_CREDENTIAL = -2140987262;

const int PEER_E_INVALID_RECORD_SIZE = -2140987261;

const int PEER_E_UNSUPPORTED_VERSION = -2140987248;

const int PEER_E_GROUP_NOT_READY = -2140987247;

const int PEER_E_GROUP_IN_USE = -2140987246;

const int PEER_E_INVALID_GROUP = -2140987245;

const int PEER_E_NO_MEMBERS_FOUND = -2140987244;

const int PEER_E_NO_MEMBER_CONNECTIONS = -2140987243;

const int PEER_E_UNABLE_TO_LISTEN = -2140987242;

const int PEER_E_IDENTITY_DELETED = -2140987232;

const int PEER_E_SERVICE_NOT_AVAILABLE = -2140987231;

const int PEER_E_CONTACT_NOT_FOUND = -2140971007;

const int PEER_S_GRAPH_DATA_CREATED = 6488065;

const int PEER_S_NO_EVENT_DATA = 6488066;

const int PEER_S_ALREADY_CONNECTED = 6496256;

const int PEER_S_SUBSCRIPTION_EXISTS = 6512640;

const int PEER_S_NO_CONNECTIVITY = 6488069;

const int PEER_S_ALREADY_A_MEMBER = 6488070;

const int PEER_E_CANNOT_CONVERT_PEER_NAME = -2140979199;

const int PEER_E_INVALID_PEER_HOST_NAME = -2140979198;

const int PEER_E_NO_MORE = -2140979197;

const int PEER_E_PNRP_DUPLICATE_PEER_NAME = -2140979195;

const int PEER_E_INVITE_CANCELLED = -2140966912;

const int PEER_E_INVITE_RESPONSE_NOT_AVAILABLE = -2140966911;

const int PEER_E_NOT_SIGNED_IN = -2140966909;

const int PEER_E_PRIVACY_DECLINED = -2140966908;

const int PEER_E_TIMEOUT = -2140966907;

const int PEER_E_INVALID_ADDRESS = -2140966905;

const int PEER_E_FW_EXCEPTION_DISABLED = -2140966904;

const int PEER_E_FW_BLOCKED_BY_POLICY = -2140966903;

const int PEER_E_FW_BLOCKED_BY_SHIELDS_UP = -2140966902;

const int PEER_E_FW_DECLINED = -2140966901;

const int UI_E_CREATE_FAILED = -2144731135;

const int UI_E_SHUTDOWN_CALLED = -2144731134;

const int UI_E_ILLEGAL_REENTRANCY = -2144731133;

const int UI_E_OBJECT_SEALED = -2144731132;

const int UI_E_VALUE_NOT_SET = -2144731131;

const int UI_E_VALUE_NOT_DETERMINED = -2144731130;

const int UI_E_INVALID_OUTPUT = -2144731129;

const int UI_E_BOOLEAN_EXPECTED = -2144731128;

const int UI_E_DIFFERENT_OWNER = -2144731127;

const int UI_E_AMBIGUOUS_MATCH = -2144731126;

const int UI_E_FP_OVERFLOW = -2144731125;

const int UI_E_WRONG_THREAD = -2144731124;

const int UI_E_STORYBOARD_ACTIVE = -2144730879;

const int UI_E_STORYBOARD_NOT_PLAYING = -2144730878;

const int UI_E_START_KEYFRAME_AFTER_END = -2144730877;

const int UI_E_END_KEYFRAME_NOT_DETERMINED = -2144730876;

const int UI_E_LOOPS_OVERLAP = -2144730875;

const int UI_E_TRANSITION_ALREADY_USED = -2144730874;

const int UI_E_TRANSITION_NOT_IN_STORYBOARD = -2144730873;

const int UI_E_TRANSITION_ECLIPSED = -2144730872;

const int UI_E_TIME_BEFORE_LAST_UPDATE = -2144730871;

const int UI_E_TIMER_CLIENT_ALREADY_CONNECTED = -2144730870;

const int UI_E_INVALID_DIMENSION = -2144730869;

const int UI_E_PRIMITIVE_OUT_OF_BOUNDS = -2144730868;

const int UI_E_WINDOW_CLOSED = -2144730623;

const int E_BLUETOOTH_ATT_INVALID_HANDLE = -2140864511;

const int E_BLUETOOTH_ATT_READ_NOT_PERMITTED = -2140864510;

const int E_BLUETOOTH_ATT_WRITE_NOT_PERMITTED = -2140864509;

const int E_BLUETOOTH_ATT_INVALID_PDU = -2140864508;

const int E_BLUETOOTH_ATT_INSUFFICIENT_AUTHENTICATION = -2140864507;

const int E_BLUETOOTH_ATT_REQUEST_NOT_SUPPORTED = -2140864506;

const int E_BLUETOOTH_ATT_INVALID_OFFSET = -2140864505;

const int E_BLUETOOTH_ATT_INSUFFICIENT_AUTHORIZATION = -2140864504;

const int E_BLUETOOTH_ATT_PREPARE_QUEUE_FULL = -2140864503;

const int E_BLUETOOTH_ATT_ATTRIBUTE_NOT_FOUND = -2140864502;

const int E_BLUETOOTH_ATT_ATTRIBUTE_NOT_LONG = -2140864501;

const int E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION_KEY_SIZE = -2140864500;

const int E_BLUETOOTH_ATT_INVALID_ATTRIBUTE_VALUE_LENGTH = -2140864499;

const int E_BLUETOOTH_ATT_UNLIKELY = -2140864498;

const int E_BLUETOOTH_ATT_INSUFFICIENT_ENCRYPTION = -2140864497;

const int E_BLUETOOTH_ATT_UNSUPPORTED_GROUP_TYPE = -2140864496;

const int E_BLUETOOTH_ATT_INSUFFICIENT_RESOURCES = -2140864495;

const int E_BLUETOOTH_ATT_UNKNOWN_ERROR = -2140860416;

const int E_AUDIO_ENGINE_NODE_NOT_FOUND = -2140798975;

const int E_HDAUDIO_EMPTY_CONNECTION_LIST = -2140798974;

const int E_HDAUDIO_CONNECTION_LIST_NOT_SUPPORTED = -2140798973;

const int E_HDAUDIO_NO_LOGICAL_DEVICES_CREATED = -2140798972;

const int E_HDAUDIO_NULL_LINKED_LIST_ENTRY = -2140798971;

const int STATEREPOSITORY_E_CONCURRENCY_LOCKING_FAILURE = -2140733439;

const int STATEREPOSITORY_E_STATEMENT_INPROGRESS = -2140733438;

const int STATEREPOSITORY_E_CONFIGURATION_INVALID = -2140733437;

const int STATEREPOSITORY_E_UNKNOWN_SCHEMA_VERSION = -2140733436;

const int STATEREPOSITORY_ERROR_DICTIONARY_CORRUPTED = -2140733435;

const int STATEREPOSITORY_E_BLOCKED = -2140733434;

const int STATEREPOSITORY_E_BUSY_RETRY = -2140733433;

const int STATEREPOSITORY_E_BUSY_RECOVERY_RETRY = -2140733432;

const int STATEREPOSITORY_E_LOCKED_RETRY = -2140733431;

const int STATEREPOSITORY_E_LOCKED_SHAREDCACHE_RETRY = -2140733430;

const int STATEREPOSITORY_E_TRANSACTION_REQUIRED = -2140733429;

const int STATEREPOSITORY_E_BUSY_TIMEOUT_EXCEEDED = -2140733428;

const int STATEREPOSITORY_E_BUSY_RECOVERY_TIMEOUT_EXCEEDED = -2140733427;

const int STATEREPOSITORY_E_LOCKED_TIMEOUT_EXCEEDED = -2140733426;

const int STATEREPOSITORY_E_LOCKED_SHAREDCACHE_TIMEOUT_EXCEEDED = -2140733425;

const int STATEREPOSITORY_E_SERVICE_STOP_IN_PROGRESS = -2140733424;

const int STATEREPOSTORY_E_NESTED_TRANSACTION_NOT_SUPPORTED = -2140733423;

const int STATEREPOSITORY_ERROR_CACHE_CORRUPTED = -2140733422;

const int STATEREPOSITORY_TRANSACTION_CALLER_ID_CHANGED = 6750227;

const int STATEREPOSITORY_TRANSACTION_IN_PROGRESS = -2140733420;

const int STATEREPOSITORY_E_CACHE_NOT_INIITALIZED = -2140733419;

const int STATEREPOSITORY_E_DEPENDENCY_NOT_RESOLVED = -2140733418;

const int ERROR_SPACES_POOL_WAS_DELETED = 15138817;

const int ERROR_SPACES_FAULT_DOMAIN_TYPE_INVALID = -2132344831;

const int ERROR_SPACES_INTERNAL_ERROR = -2132344830;

const int ERROR_SPACES_RESILIENCY_TYPE_INVALID = -2132344829;

const int ERROR_SPACES_DRIVE_SECTOR_SIZE_INVALID = -2132344828;

const int ERROR_SPACES_DRIVE_REDUNDANCY_INVALID = -2132344826;

const int ERROR_SPACES_NUMBER_OF_DATA_COPIES_INVALID = -2132344825;

const int ERROR_SPACES_PARITY_LAYOUT_INVALID = -2132344824;

const int ERROR_SPACES_INTERLEAVE_LENGTH_INVALID = -2132344823;

const int ERROR_SPACES_NUMBER_OF_COLUMNS_INVALID = -2132344822;

const int ERROR_SPACES_NOT_ENOUGH_DRIVES = -2132344821;

const int ERROR_SPACES_EXTENDED_ERROR = -2132344820;

const int ERROR_SPACES_PROVISIONING_TYPE_INVALID = -2132344819;

const int ERROR_SPACES_ALLOCATION_SIZE_INVALID = -2132344818;

const int ERROR_SPACES_ENCLOSURE_AWARE_INVALID = -2132344817;

const int ERROR_SPACES_WRITE_CACHE_SIZE_INVALID = -2132344816;

const int ERROR_SPACES_NUMBER_OF_GROUPS_INVALID = -2132344815;

const int ERROR_SPACES_DRIVE_OPERATIONAL_STATE_INVALID = -2132344814;

const int ERROR_SPACES_ENTRY_INCOMPLETE = -2132344813;

const int ERROR_SPACES_ENTRY_INVALID = -2132344812;

const int ERROR_SPACES_UPDATE_COLUMN_STATE = -2132344811;

const int ERROR_SPACES_MAP_REQUIRED = -2132344810;

const int ERROR_SPACES_UNSUPPORTED_VERSION = -2132344809;

const int ERROR_SPACES_CORRUPT_METADATA = -2132344808;

const int ERROR_SPACES_DRT_FULL = -2132344807;

const int ERROR_SPACES_INCONSISTENCY = -2132344806;

const int ERROR_SPACES_LOG_NOT_READY = -2132344805;

const int ERROR_SPACES_NO_REDUNDANCY = -2132344804;

const int ERROR_SPACES_DRIVE_NOT_READY = -2132344803;

const int ERROR_SPACES_DRIVE_SPLIT = -2132344802;

const int ERROR_SPACES_DRIVE_LOST_DATA = -2132344801;

const int ERROR_SPACES_MARK_DIRTY = -2132344800;

const int ERROR_SPACES_FLUSH_METADATA = -2132344795;

const int ERROR_SPACES_CACHE_FULL = -2132344794;

const int ERROR_SPACES_REPAIR_IN_PROGRESS = -2132344793;

const int ERROR_VOLSNAP_BOOTFILE_NOT_VALID = -2138963967;

const int ERROR_VOLSNAP_ACTIVATION_TIMEOUT = -2138963966;

const int ERROR_VOLSNAP_NO_BYPASSIO_WITH_SNAPSHOT = -2138963965;

const int ERROR_TIERING_NOT_SUPPORTED_ON_VOLUME = -2138898431;

const int ERROR_TIERING_VOLUME_DISMOUNT_IN_PROGRESS = -2138898430;

const int ERROR_TIERING_STORAGE_TIER_NOT_FOUND = -2138898429;

const int ERROR_TIERING_INVALID_FILE_ID = -2138898428;

const int ERROR_TIERING_WRONG_CLUSTER_NODE = -2138898427;

const int ERROR_TIERING_ALREADY_PROCESSING = -2138898426;

const int ERROR_TIERING_CANNOT_PIN_OBJECT = -2138898425;

const int ERROR_TIERING_FILE_IS_NOT_PINNED = -2138898424;

const int ERROR_NOT_A_TIERED_VOLUME = -2138898423;

const int ERROR_ATTRIBUTE_NOT_PRESENT = -2138898422;

const int ERROR_SECCORE_INVALID_COMMAND = -1058537472;

const int ERROR_NO_APPLICABLE_APP_LICENSES_FOUND = -1058406399;

const int ERROR_CLIP_LICENSE_NOT_FOUND = -1058406398;

const int ERROR_CLIP_DEVICE_LICENSE_MISSING = -1058406397;

const int ERROR_CLIP_LICENSE_INVALID_SIGNATURE = -1058406396;

const int ERROR_CLIP_KEYHOLDER_LICENSE_MISSING_OR_INVALID = -1058406395;

const int ERROR_CLIP_LICENSE_EXPIRED = -1058406394;

const int ERROR_CLIP_LICENSE_SIGNED_BY_UNKNOWN_SOURCE = -1058406393;

const int ERROR_CLIP_LICENSE_NOT_SIGNED = -1058406392;

const int ERROR_CLIP_LICENSE_HARDWARE_ID_OUT_OF_TOLERANCE = -1058406391;

const int ERROR_CLIP_LICENSE_DEVICE_ID_MISMATCH = -1058406390;

const int DXGI_STATUS_OCCLUDED = 142213121;

const int DXGI_STATUS_CLIPPED = 142213122;

const int DXGI_STATUS_NO_REDIRECTION = 142213124;

const int DXGI_STATUS_NO_DESKTOP_ACCESS = 142213125;

const int DXGI_STATUS_GRAPHICS_VIDPN_SOURCE_IN_USE = 142213126;

const int DXGI_STATUS_MODE_CHANGED = 142213127;

const int DXGI_STATUS_MODE_CHANGE_IN_PROGRESS = 142213128;

const int DXGI_ERROR_INVALID_CALL = -2005270527;

const int DXGI_ERROR_NOT_FOUND = -2005270526;

const int DXGI_ERROR_MORE_DATA = -2005270525;

const int DXGI_ERROR_UNSUPPORTED = -2005270524;

const int DXGI_ERROR_DEVICE_REMOVED = -2005270523;

const int DXGI_ERROR_DEVICE_HUNG = -2005270522;

const int DXGI_ERROR_DEVICE_RESET = -2005270521;

const int DXGI_ERROR_WAS_STILL_DRAWING = -2005270518;

const int DXGI_ERROR_FRAME_STATISTICS_DISJOINT = -2005270517;

const int DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE = -2005270516;

const int DXGI_ERROR_DRIVER_INTERNAL_ERROR = -2005270496;

const int DXGI_ERROR_NONEXCLUSIVE = -2005270495;

const int DXGI_ERROR_NOT_CURRENTLY_AVAILABLE = -2005270494;

const int DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED = -2005270493;

const int DXGI_ERROR_REMOTE_OUTOFMEMORY = -2005270492;

const int DXGI_ERROR_ACCESS_LOST = -2005270490;

const int DXGI_ERROR_WAIT_TIMEOUT = -2005270489;

const int DXGI_ERROR_SESSION_DISCONNECTED = -2005270488;

const int DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE = -2005270487;

const int DXGI_ERROR_CANNOT_PROTECT_CONTENT = -2005270486;

const int DXGI_ERROR_ACCESS_DENIED = -2005270485;

const int DXGI_ERROR_NAME_ALREADY_EXISTS = -2005270484;

const int DXGI_ERROR_SDK_COMPONENT_MISSING = -2005270483;

const int DXGI_ERROR_NOT_CURRENT = -2005270482;

const int DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY = -2005270480;

const int DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION = -2005270479;

const int DXGI_ERROR_NON_COMPOSITED_UI = -2005270478;

const int DXCORE_ERROR_EVENT_NOT_UNREGISTERED = -2004877311;

const int PRESENTATION_ERROR_LOST = -2004811775;

const int DXGI_STATUS_UNOCCLUDED = 142213129;

const int DXGI_STATUS_DDA_WAS_STILL_DRAWING = 142213130;

const int DXGI_ERROR_MODE_CHANGE_IN_PROGRESS = -2005270491;

const int DXGI_STATUS_PRESENT_REQUIRED = 142213167;

const int DXGI_ERROR_CACHE_CORRUPT = -2005270477;

const int DXGI_ERROR_CACHE_FULL = -2005270476;

const int DXGI_ERROR_CACHE_HASH_COLLISION = -2005270475;

const int DXGI_ERROR_ALREADY_EXISTS = -2005270474;

const int DXGI_ERROR_MPO_UNPINNED = -2005270428;

const int DXGI_DDI_ERR_WASSTILLDRAWING = -2005204991;

const int DXGI_DDI_ERR_UNSUPPORTED = -2005204990;

const int DXGI_DDI_ERR_NONEXCLUSIVE = -2005204989;

const int D3D10_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = -2005336063;

const int D3D10_ERROR_FILE_NOT_FOUND = -2005336062;

const int D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS = -2005139455;

const int D3D11_ERROR_FILE_NOT_FOUND = -2005139454;

const int D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS = -2005139453;

const int D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD =
    -2005139452;

const int D3D12_ERROR_ADAPTER_NOT_FOUND = -2005008383;

const int D3D12_ERROR_DRIVER_VERSION_MISMATCH = -2005008382;

const int D3D12_ERROR_INVALID_REDIST = -2005008381;

const int D2DERR_WRONG_STATE = -2003238911;

const int D2DERR_NOT_INITIALIZED = -2003238910;

const int D2DERR_UNSUPPORTED_OPERATION = -2003238909;

const int D2DERR_SCANNER_FAILED = -2003238908;

const int D2DERR_SCREEN_ACCESS_DENIED = -2003238907;

const int D2DERR_DISPLAY_STATE_INVALID = -2003238906;

const int D2DERR_ZERO_VECTOR = -2003238905;

const int D2DERR_INTERNAL_ERROR = -2003238904;

const int D2DERR_DISPLAY_FORMAT_NOT_SUPPORTED = -2003238903;

const int D2DERR_INVALID_CALL = -2003238902;

const int D2DERR_NO_HARDWARE_DEVICE = -2003238901;

const int D2DERR_RECREATE_TARGET = -2003238900;

const int D2DERR_TOO_MANY_SHADER_ELEMENTS = -2003238899;

const int D2DERR_SHADER_COMPILE_FAILED = -2003238898;

const int D2DERR_MAX_TEXTURE_SIZE_EXCEEDED = -2003238897;

const int D2DERR_UNSUPPORTED_VERSION = -2003238896;

const int D2DERR_BAD_NUMBER = -2003238895;

const int D2DERR_WRONG_FACTORY = -2003238894;

const int D2DERR_LAYER_ALREADY_IN_USE = -2003238893;

const int D2DERR_POP_CALL_DID_NOT_MATCH_PUSH = -2003238892;

const int D2DERR_WRONG_RESOURCE_DOMAIN = -2003238891;

const int D2DERR_PUSH_POP_UNBALANCED = -2003238890;

const int D2DERR_RENDER_TARGET_HAS_LAYER_OR_CLIPRECT = -2003238889;

const int D2DERR_INCOMPATIBLE_BRUSH_TYPES = -2003238888;

const int D2DERR_WIN32_ERROR = -2003238887;

const int D2DERR_TARGET_NOT_GDI_COMPATIBLE = -2003238886;

const int D2DERR_TEXT_EFFECT_IS_WRONG_TYPE = -2003238885;

const int D2DERR_TEXT_RENDERER_NOT_RELEASED = -2003238884;

const int D2DERR_EXCEEDS_MAX_BITMAP_SIZE = -2003238883;

const int D2DERR_INVALID_GRAPH_CONFIGURATION = -2003238882;

const int D2DERR_INVALID_INTERNAL_GRAPH_CONFIGURATION = -2003238881;

const int D2DERR_CYCLIC_GRAPH = -2003238880;

const int D2DERR_BITMAP_CANNOT_DRAW = -2003238879;

const int D2DERR_OUTSTANDING_BITMAP_REFERENCES = -2003238878;

const int D2DERR_ORIGINAL_TARGET_NOT_BOUND = -2003238877;

const int D2DERR_INVALID_TARGET = -2003238876;

const int D2DERR_BITMAP_BOUND_AS_TARGET = -2003238875;

const int D2DERR_INSUFFICIENT_DEVICE_CAPABILITIES = -2003238874;

const int D2DERR_INTERMEDIATE_TOO_LARGE = -2003238873;

const int D2DERR_EFFECT_IS_NOT_REGISTERED = -2003238872;

const int D2DERR_INVALID_PROPERTY = -2003238871;

const int D2DERR_NO_SUBPROPERTIES = -2003238870;

const int D2DERR_PRINT_JOB_CLOSED = -2003238869;

const int D2DERR_PRINT_FORMAT_NOT_SUPPORTED = -2003238868;

const int D2DERR_TOO_MANY_TRANSFORM_INPUTS = -2003238867;

const int D2DERR_INVALID_GLYPH_IMAGE = -2003238866;

const int DWRITE_E_FILEFORMAT = -2003283968;

const int DWRITE_E_UNEXPECTED = -2003283967;

const int DWRITE_E_NOFONT = -2003283966;

const int DWRITE_E_FILENOTFOUND = -2003283965;

const int DWRITE_E_FILEACCESS = -2003283964;

const int DWRITE_E_FONTCOLLECTIONOBSOLETE = -2003283963;

const int DWRITE_E_ALREADYREGISTERED = -2003283962;

const int DWRITE_E_CACHEFORMAT = -2003283961;

const int DWRITE_E_CACHEVERSION = -2003283960;

const int DWRITE_E_UNSUPPORTEDOPERATION = -2003283959;

const int DWRITE_E_TEXTRENDERERINCOMPATIBLE = -2003283958;

const int DWRITE_E_FLOWDIRECTIONCONFLICTS = -2003283957;

const int DWRITE_E_NOCOLOR = -2003283956;

const int DWRITE_E_REMOTEFONT = -2003283955;

const int DWRITE_E_DOWNLOADCANCELLED = -2003283954;

const int DWRITE_E_DOWNLOADFAILED = -2003283953;

const int DWRITE_E_TOOMANYDOWNLOADS = -2003283952;

const int WINCODEC_ERR_WRONGSTATE = -2003292412;

const int WINCODEC_ERR_VALUEOUTOFRANGE = -2003292411;

const int WINCODEC_ERR_UNKNOWNIMAGEFORMAT = -2003292409;

const int WINCODEC_ERR_UNSUPPORTEDVERSION = -2003292405;

const int WINCODEC_ERR_NOTINITIALIZED = -2003292404;

const int WINCODEC_ERR_ALREADYLOCKED = -2003292403;

const int WINCODEC_ERR_PROPERTYNOTFOUND = -2003292352;

const int WINCODEC_ERR_PROPERTYNOTSUPPORTED = -2003292351;

const int WINCODEC_ERR_PROPERTYSIZE = -2003292350;

const int WINCODEC_ERR_CODECPRESENT = -2003292349;

const int WINCODEC_ERR_CODECNOTHUMBNAIL = -2003292348;

const int WINCODEC_ERR_PALETTEUNAVAILABLE = -2003292347;

const int WINCODEC_ERR_CODECTOOMANYSCANLINES = -2003292346;

const int WINCODEC_ERR_INTERNALERROR = -2003292344;

const int WINCODEC_ERR_SOURCERECTDOESNOTMATCHDIMENSIONS = -2003292343;

const int WINCODEC_ERR_COMPONENTNOTFOUND = -2003292336;

const int WINCODEC_ERR_IMAGESIZEOUTOFRANGE = -2003292335;

const int WINCODEC_ERR_TOOMUCHMETADATA = -2003292334;

const int WINCODEC_ERR_BADIMAGE = -2003292320;

const int WINCODEC_ERR_BADHEADER = -2003292319;

const int WINCODEC_ERR_FRAMEMISSING = -2003292318;

const int WINCODEC_ERR_BADMETADATAHEADER = -2003292317;

const int WINCODEC_ERR_BADSTREAMDATA = -2003292304;

const int WINCODEC_ERR_STREAMWRITE = -2003292303;

const int WINCODEC_ERR_STREAMREAD = -2003292302;

const int WINCODEC_ERR_STREAMNOTAVAILABLE = -2003292301;

const int WINCODEC_ERR_UNSUPPORTEDPIXELFORMAT = -2003292288;

const int WINCODEC_ERR_UNSUPPORTEDOPERATION = -2003292287;

const int WINCODEC_ERR_INVALIDREGISTRATION = -2003292278;

const int WINCODEC_ERR_COMPONENTINITIALIZEFAILURE = -2003292277;

const int WINCODEC_ERR_INSUFFICIENTBUFFER = -2003292276;

const int WINCODEC_ERR_DUPLICATEMETADATAPRESENT = -2003292275;

const int WINCODEC_ERR_PROPERTYUNEXPECTEDTYPE = -2003292274;

const int WINCODEC_ERR_UNEXPECTEDSIZE = -2003292273;

const int WINCODEC_ERR_INVALIDQUERYREQUEST = -2003292272;

const int WINCODEC_ERR_UNEXPECTEDMETADATATYPE = -2003292271;

const int WINCODEC_ERR_REQUESTONLYVALIDATMETADATAROOT = -2003292270;

const int WINCODEC_ERR_INVALIDQUERYCHARACTER = -2003292269;

const int WINCODEC_ERR_WIN32ERROR = -2003292268;

const int WINCODEC_ERR_INVALIDPROGRESSIVELEVEL = -2003292267;

const int WINCODEC_ERR_INVALIDJPEGSCANINDEX = -2003292266;

const int MILERR_OBJECTBUSY = -2003304447;

const int MILERR_INSUFFICIENTBUFFER = -2003304446;

const int MILERR_WIN32ERROR = -2003304445;

const int MILERR_SCANNER_FAILED = -2003304444;

const int MILERR_SCREENACCESSDENIED = -2003304443;

const int MILERR_DISPLAYSTATEINVALID = -2003304442;

const int MILERR_NONINVERTIBLEMATRIX = -2003304441;

const int MILERR_ZEROVECTOR = -2003304440;

const int MILERR_TERMINATED = -2003304439;

const int MILERR_BADNUMBER = -2003304438;

const int MILERR_INTERNALERROR = -2003304320;

const int MILERR_DISPLAYFORMATNOTSUPPORTED = -2003304316;

const int MILERR_INVALIDCALL = -2003304315;

const int MILERR_ALREADYLOCKED = -2003304314;

const int MILERR_NOTLOCKED = -2003304313;

const int MILERR_DEVICECANNOTRENDERTEXT = -2003304312;

const int MILERR_GLYPHBITMAPMISSED = -2003304311;

const int MILERR_MALFORMEDGLYPHCACHE = -2003304310;

const int MILERR_GENERIC_IGNORE = -2003304309;

const int MILERR_MALFORMED_GUIDELINE_DATA = -2003304308;

const int MILERR_NO_HARDWARE_DEVICE = -2003304307;

const int MILERR_NEED_RECREATE_AND_PRESENT = -2003304306;

const int MILERR_ALREADY_INITIALIZED = -2003304305;

const int MILERR_MISMATCHED_SIZE = -2003304304;

const int MILERR_NO_REDIRECTION_SURFACE_AVAILABLE = -2003304303;

const int MILERR_REMOTING_NOT_SUPPORTED = -2003304302;

const int MILERR_QUEUED_PRESENT_NOT_SUPPORTED = -2003304301;

const int MILERR_NOT_QUEUING_PRESENTS = -2003304300;

const int MILERR_NO_REDIRECTION_SURFACE_RETRY_LATER = -2003304299;

const int MILERR_TOOMANYSHADERELEMNTS = -2003304298;

const int MILERR_MROW_READLOCK_FAILED = -2003304297;

const int MILERR_MROW_UPDATE_FAILED = -2003304296;

const int MILERR_SHADER_COMPILE_FAILED = -2003304295;

const int MILERR_MAX_TEXTURE_SIZE_EXCEEDED = -2003304294;

const int MILERR_QPC_TIME_WENT_BACKWARD = -2003304293;

const int MILERR_DXGI_ENUMERATION_OUT_OF_SYNC = -2003304291;

const int MILERR_ADAPTER_NOT_FOUND = -2003304290;

const int MILERR_COLORSPACE_NOT_SUPPORTED = -2003304289;

const int MILERR_PREFILTER_NOT_SUPPORTED = -2003304288;

const int MILERR_DISPLAYID_ACCESS_DENIED = -2003304287;

const int UCEERR_INVALIDPACKETHEADER = -2003303424;

const int UCEERR_UNKNOWNPACKET = -2003303423;

const int UCEERR_ILLEGALPACKET = -2003303422;

const int UCEERR_MALFORMEDPACKET = -2003303421;

const int UCEERR_ILLEGALHANDLE = -2003303420;

const int UCEERR_HANDLELOOKUPFAILED = -2003303419;

const int UCEERR_RENDERTHREADFAILURE = -2003303418;

const int UCEERR_CTXSTACKFRSTTARGETNULL = -2003303417;

const int UCEERR_CONNECTIONIDLOOKUPFAILED = -2003303416;

const int UCEERR_BLOCKSFULL = -2003303415;

const int UCEERR_MEMORYFAILURE = -2003303414;

const int UCEERR_PACKETRECORDOUTOFRANGE = -2003303413;

const int UCEERR_ILLEGALRECORDTYPE = -2003303412;

const int UCEERR_OUTOFHANDLES = -2003303411;

const int UCEERR_UNCHANGABLE_UPDATE_ATTEMPTED = -2003303410;

const int UCEERR_NO_MULTIPLE_WORKER_THREADS = -2003303409;

const int UCEERR_REMOTINGNOTSUPPORTED = -2003303408;

const int UCEERR_MISSINGENDCOMMAND = -2003303407;

const int UCEERR_MISSINGBEGINCOMMAND = -2003303406;

const int UCEERR_CHANNELSYNCTIMEDOUT = -2003303405;

const int UCEERR_CHANNELSYNCABANDONED = -2003303404;

const int UCEERR_UNSUPPORTEDTRANSPORTVERSION = -2003303403;

const int UCEERR_TRANSPORTUNAVAILABLE = -2003303402;

const int UCEERR_FEEDBACK_UNSUPPORTED = -2003303401;

const int UCEERR_COMMANDTRANSPORTDENIED = -2003303400;

const int UCEERR_GRAPHICSSTREAMUNAVAILABLE = -2003303399;

const int UCEERR_GRAPHICSSTREAMALREADYOPEN = -2003303392;

const int UCEERR_TRANSPORTDISCONNECTED = -2003303391;

const int UCEERR_TRANSPORTOVERLOADED = -2003303390;

const int UCEERR_PARTITION_ZOMBIED = -2003303389;

const int MILAVERR_NOCLOCK = -2003303168;

const int MILAVERR_NOMEDIATYPE = -2003303167;

const int MILAVERR_NOVIDEOMIXER = -2003303166;

const int MILAVERR_NOVIDEOPRESENTER = -2003303165;

const int MILAVERR_NOREADYFRAMES = -2003303164;

const int MILAVERR_MODULENOTLOADED = -2003303163;

const int MILAVERR_WMPFACTORYNOTREGISTERED = -2003303162;

const int MILAVERR_INVALIDWMPVERSION = -2003303161;

const int MILAVERR_INSUFFICIENTVIDEORESOURCES = -2003303160;

const int MILAVERR_VIDEOACCELERATIONNOTAVAILABLE = -2003303159;

const int MILAVERR_REQUESTEDTEXTURETOOBIG = -2003303158;

const int MILAVERR_SEEKFAILED = -2003303157;

const int MILAVERR_UNEXPECTEDWMPFAILURE = -2003303156;

const int MILAVERR_MEDIAPLAYERCLOSED = -2003303155;

const int MILAVERR_UNKNOWNHARDWAREERROR = -2003303154;

const int MILEFFECTSERR_UNKNOWNPROPERTY = -2003302898;

const int MILEFFECTSERR_EFFECTNOTPARTOFGROUP = -2003302897;

const int MILEFFECTSERR_NOINPUTSOURCEATTACHED = -2003302896;

const int MILEFFECTSERR_CONNECTORNOTCONNECTED = -2003302895;

const int MILEFFECTSERR_CONNECTORNOTASSOCIATEDWITHEFFECT = -2003302894;

const int MILEFFECTSERR_RESERVED = -2003302893;

const int MILEFFECTSERR_CYCLEDETECTED = -2003302892;

const int MILEFFECTSERR_EFFECTINMORETHANONEGRAPH = -2003302891;

const int MILEFFECTSERR_EFFECTALREADYINAGRAPH = -2003302890;

const int MILEFFECTSERR_EFFECTHASNOCHILDREN = -2003302889;

const int MILEFFECTSERR_ALREADYATTACHEDTOLISTENER = -2003302888;

const int MILEFFECTSERR_NOTAFFINETRANSFORM = -2003302887;

const int MILEFFECTSERR_EMPTYBOUNDS = -2003302886;

const int MILEFFECTSERR_OUTPUTSIZETOOLARGE = -2003302885;

const int DWMERR_STATE_TRANSITION_FAILED = -2003302656;

const int DWMERR_THEME_FAILED = -2003302655;

const int DWMERR_CATASTROPHIC_FAILURE = -2003302654;

const int DCOMPOSITION_ERROR_WINDOW_ALREADY_COMPOSED = -2003302400;

const int DCOMPOSITION_ERROR_SURFACE_BEING_RENDERED = -2003302399;

const int DCOMPOSITION_ERROR_SURFACE_NOT_BEING_RENDERED = -2003302398;

const int ONL_E_INVALID_AUTHENTICATION_TARGET = -2138701823;

const int ONL_E_ACCESS_DENIED_BY_TOU = -2138701822;

const int ONL_E_INVALID_APPLICATION = -2138701821;

const int ONL_E_PASSWORD_UPDATE_REQUIRED = -2138701820;

const int ONL_E_ACCOUNT_UPDATE_REQUIRED = -2138701819;

const int ONL_E_FORCESIGNIN = -2138701818;

const int ONL_E_ACCOUNT_LOCKED = -2138701817;

const int ONL_E_PARENTAL_CONSENT_REQUIRED = -2138701816;

const int ONL_E_EMAIL_VERIFICATION_REQUIRED = -2138701815;

const int ONL_E_ACCOUNT_SUSPENDED_COMPROIMISE = -2138701814;

const int ONL_E_ACCOUNT_SUSPENDED_ABUSE = -2138701813;

const int ONL_E_ACTION_REQUIRED = -2138701812;

const int ONL_CONNECTION_COUNT_LIMIT = -2138701811;

const int ONL_E_CONNECTED_ACCOUNT_CAN_NOT_SIGNOUT = -2138701810;

const int ONL_E_USER_AUTHENTICATION_REQUIRED = -2138701809;

const int ONL_E_REQUEST_THROTTLED = -2138701808;

const int FA_E_MAX_PERSISTED_ITEMS_REACHED = -2144927200;

const int FA_E_HOMEGROUP_NOT_AVAILABLE = -2144927198;

const int E_MONITOR_RESOLUTION_TOO_LOW = -2144927152;

const int E_ELEVATED_ACTIVATION_NOT_SUPPORTED = -2144927151;

const int E_UAC_DISABLED = -2144927150;

const int E_FULL_ADMIN_NOT_SUPPORTED = -2144927149;

const int E_APPLICATION_NOT_REGISTERED = -2144927148;

const int E_MULTIPLE_EXTENSIONS_FOR_APPLICATION = -2144927147;

const int E_MULTIPLE_PACKAGES_FOR_FAMILY = -2144927146;

const int E_APPLICATION_MANAGER_NOT_RUNNING = -2144927145;

const int S_STORE_LAUNCHED_FOR_REMEDIATION = 2556504;

const int S_APPLICATION_ACTIVATION_ERROR_HANDLED_BY_DIALOG = 2556505;

const int E_APPLICATION_ACTIVATION_TIMED_OUT = -2144927142;

const int E_APPLICATION_ACTIVATION_EXEC_FAILURE = -2144927141;

const int E_APPLICATION_TEMPORARY_LICENSE_ERROR = -2144927140;

const int E_APPLICATION_TRIAL_LICENSE_EXPIRED = -2144927139;

const int E_SKYDRIVE_ROOT_TARGET_FILE_SYSTEM_NOT_SUPPORTED = -2144927136;

const int E_SKYDRIVE_ROOT_TARGET_OVERLAP = -2144927135;

const int E_SKYDRIVE_ROOT_TARGET_CANNOT_INDEX = -2144927134;

const int E_SKYDRIVE_FILE_NOT_UPLOADED = -2144927133;

const int E_SKYDRIVE_UPDATE_AVAILABILITY_FAIL = -2144927132;

const int E_SKYDRIVE_ROOT_TARGET_VOLUME_ROOT_NOT_SUPPORTED = -2144927131;

const int E_SYNCENGINE_FILE_SIZE_OVER_LIMIT = -2013089791;

const int E_SYNCENGINE_FILE_SIZE_EXCEEDS_REMAINING_QUOTA = -2013089790;

const int E_SYNCENGINE_UNSUPPORTED_FILE_NAME = -2013089789;

const int E_SYNCENGINE_FOLDER_ITEM_COUNT_LIMIT_EXCEEDED = -2013089788;

const int E_SYNCENGINE_FILE_SYNC_PARTNER_ERROR = -2013089787;

const int E_SYNCENGINE_SYNC_PAUSED_BY_SERVICE = -2013089786;

const int E_SYNCENGINE_FILE_IDENTIFIER_UNKNOWN = -2013085694;

const int E_SYNCENGINE_SERVICE_AUTHENTICATION_FAILED = -2013085693;

const int E_SYNCENGINE_UNKNOWN_SERVICE_ERROR = -2013085692;

const int E_SYNCENGINE_SERVICE_RETURNED_UNEXPECTED_SIZE = -2013085691;

const int E_SYNCENGINE_REQUEST_BLOCKED_BY_SERVICE = -2013085690;

const int E_SYNCENGINE_REQUEST_BLOCKED_DUE_TO_CLIENT_ERROR = -2013085689;

const int E_SYNCENGINE_FOLDER_INACCESSIBLE = -2013081599;

const int E_SYNCENGINE_UNSUPPORTED_FOLDER_NAME = -2013081598;

const int E_SYNCENGINE_UNSUPPORTED_MARKET = -2013081597;

const int E_SYNCENGINE_PATH_LENGTH_LIMIT_EXCEEDED = -2013081596;

const int E_SYNCENGINE_REMOTE_PATH_LENGTH_LIMIT_EXCEEDED = -2013081595;

const int E_SYNCENGINE_CLIENT_UPDATE_NEEDED = -2013081594;

const int E_SYNCENGINE_PROXY_AUTHENTICATION_REQUIRED = -2013081593;

const int E_SYNCENGINE_STORAGE_SERVICE_PROVISIONING_FAILED = -2013081592;

const int E_SYNCENGINE_UNSUPPORTED_REPARSE_POINT = -2013081591;

const int E_SYNCENGINE_STORAGE_SERVICE_BLOCKED = -2013081590;

const int E_SYNCENGINE_FOLDER_IN_REDIRECTION = -2013081589;

const int EAS_E_POLICY_NOT_MANAGED_BY_OS = -2141913087;

const int EAS_E_POLICY_COMPLIANT_WITH_ACTIONS = -2141913086;

const int EAS_E_REQUESTED_POLICY_NOT_ENFORCEABLE = -2141913085;

const int EAS_E_CURRENT_USER_HAS_BLANK_PASSWORD = -2141913084;

const int EAS_E_REQUESTED_POLICY_PASSWORD_EXPIRATION_INCOMPATIBLE = -2141913083;

const int EAS_E_USER_CANNOT_CHANGE_PASSWORD = -2141913082;

const int EAS_E_ADMINS_HAVE_BLANK_PASSWORD = -2141913081;

const int EAS_E_ADMINS_CANNOT_CHANGE_PASSWORD = -2141913080;

const int EAS_E_LOCAL_CONTROLLED_USERS_CANNOT_CHANGE_PASSWORD = -2141913079;

const int EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CONNECTED_ADMINS =
    -2141913078;

const int EAS_E_CONNECTED_ADMINS_NEED_TO_CHANGE_PASSWORD = -2141913077;

const int EAS_E_PASSWORD_POLICY_NOT_ENFORCEABLE_FOR_CURRENT_CONNECTED_USER =
    -2141913076;

const int EAS_E_CURRENT_CONNECTED_USER_NEED_TO_CHANGE_PASSWORD = -2141913075;

const int WEB_E_UNSUPPORTED_FORMAT = -2089484287;

const int WEB_E_INVALID_XML = -2089484286;

const int WEB_E_MISSING_REQUIRED_ELEMENT = -2089484285;

const int WEB_E_MISSING_REQUIRED_ATTRIBUTE = -2089484284;

const int WEB_E_UNEXPECTED_CONTENT = -2089484283;

const int WEB_E_RESOURCE_TOO_LARGE = -2089484282;

const int WEB_E_INVALID_JSON_STRING = -2089484281;

const int WEB_E_INVALID_JSON_NUMBER = -2089484280;

const int WEB_E_JSON_VALUE_NOT_FOUND = -2089484279;

const int HTTP_E_STATUS_UNEXPECTED = -2145845247;

const int HTTP_E_STATUS_UNEXPECTED_REDIRECTION = -2145845245;

const int HTTP_E_STATUS_UNEXPECTED_CLIENT_ERROR = -2145845244;

const int HTTP_E_STATUS_UNEXPECTED_SERVER_ERROR = -2145845243;

const int HTTP_E_STATUS_AMBIGUOUS = -2145844948;

const int HTTP_E_STATUS_MOVED = -2145844947;

const int HTTP_E_STATUS_REDIRECT = -2145844946;

const int HTTP_E_STATUS_REDIRECT_METHOD = -2145844945;

const int HTTP_E_STATUS_NOT_MODIFIED = -2145844944;

const int HTTP_E_STATUS_USE_PROXY = -2145844943;

const int HTTP_E_STATUS_REDIRECT_KEEP_VERB = -2145844941;

const int HTTP_E_STATUS_BAD_REQUEST = -2145844848;

const int HTTP_E_STATUS_DENIED = -2145844847;

const int HTTP_E_STATUS_PAYMENT_REQ = -2145844846;

const int HTTP_E_STATUS_FORBIDDEN = -2145844845;

const int HTTP_E_STATUS_NOT_FOUND = -2145844844;

const int HTTP_E_STATUS_BAD_METHOD = -2145844843;

const int HTTP_E_STATUS_NONE_ACCEPTABLE = -2145844842;

const int HTTP_E_STATUS_PROXY_AUTH_REQ = -2145844841;

const int HTTP_E_STATUS_REQUEST_TIMEOUT = -2145844840;

const int HTTP_E_STATUS_CONFLICT = -2145844839;

const int HTTP_E_STATUS_GONE = -2145844838;

const int HTTP_E_STATUS_LENGTH_REQUIRED = -2145844837;

const int HTTP_E_STATUS_PRECOND_FAILED = -2145844836;

const int HTTP_E_STATUS_REQUEST_TOO_LARGE = -2145844835;

const int HTTP_E_STATUS_URI_TOO_LONG = -2145844834;

const int HTTP_E_STATUS_UNSUPPORTED_MEDIA = -2145844833;

const int HTTP_E_STATUS_RANGE_NOT_SATISFIABLE = -2145844832;

const int HTTP_E_STATUS_EXPECTATION_FAILED = -2145844831;

const int HTTP_E_STATUS_SERVER_ERROR = -2145844748;

const int HTTP_E_STATUS_NOT_SUPPORTED = -2145844747;

const int HTTP_E_STATUS_BAD_GATEWAY = -2145844746;

const int HTTP_E_STATUS_SERVICE_UNAVAIL = -2145844745;

const int HTTP_E_STATUS_GATEWAY_TIMEOUT = -2145844744;

const int HTTP_E_STATUS_VERSION_NOT_SUP = -2145844743;

const int E_INVALID_PROTOCOL_OPERATION = -2089418751;

const int E_INVALID_PROTOCOL_FORMAT = -2089418750;

const int E_PROTOCOL_EXTENSIONS_NOT_SUPPORTED = -2089418749;

const int E_SUBPROTOCOL_NOT_SUPPORTED = -2089418748;

const int E_PROTOCOL_VERSION_NOT_SUPPORTED = -2089418747;

const int INPUT_E_OUT_OF_ORDER = -2143289344;

const int INPUT_E_REENTRANCY = -2143289343;

const int INPUT_E_MULTIMODAL = -2143289342;

const int INPUT_E_PACKET = -2143289341;

const int INPUT_E_FRAME = -2143289340;

const int INPUT_E_HISTORY = -2143289339;

const int INPUT_E_DEVICE_INFO = -2143289338;

const int INPUT_E_TRANSFORM = -2143289337;

const int INPUT_E_DEVICE_PROPERTY = -2143289336;

const int INET_E_INVALID_URL = -2146697214;

const int INET_E_NO_SESSION = -2146697213;

const int INET_E_CANNOT_CONNECT = -2146697212;

const int INET_E_RESOURCE_NOT_FOUND = -2146697211;

const int INET_E_OBJECT_NOT_FOUND = -2146697210;

const int INET_E_DATA_NOT_AVAILABLE = -2146697209;

const int INET_E_DOWNLOAD_FAILURE = -2146697208;

const int INET_E_AUTHENTICATION_REQUIRED = -2146697207;

const int INET_E_NO_VALID_MEDIA = -2146697206;

const int INET_E_CONNECTION_TIMEOUT = -2146697205;

const int INET_E_INVALID_REQUEST = -2146697204;

const int INET_E_UNKNOWN_PROTOCOL = -2146697203;

const int INET_E_SECURITY_PROBLEM = -2146697202;

const int INET_E_CANNOT_LOAD_DATA = -2146697201;

const int INET_E_CANNOT_INSTANTIATE_OBJECT = -2146697200;

const int INET_E_INVALID_CERTIFICATE = -2146697191;

const int INET_E_REDIRECT_FAILED = -2146697196;

const int INET_E_REDIRECT_TO_DIR = -2146697195;

const int ERROR_DBG_CREATE_PROCESS_FAILURE_LOCKDOWN = -2135949311;

const int ERROR_DBG_ATTACH_PROCESS_FAILURE_LOCKDOWN = -2135949310;

const int ERROR_DBG_CONNECT_SERVER_FAILURE_LOCKDOWN = -2135949309;

const int ERROR_DBG_START_SERVER_FAILURE_LOCKDOWN = -2135949308;

const int HSP_E_ERROR_MASK = -2128084992;

const int HSP_E_INTERNAL_ERROR = -2128080897;

const int HSP_BS_ERROR_MASK = -2128080896;

const int HSP_BS_INTERNAL_ERROR = -2128080641;

const int HSP_DRV_ERROR_MASK = -2128019456;

const int HSP_DRV_INTERNAL_ERROR = -2128019201;

const int HSP_BASE_ERROR_MASK = -2128019200;

const int HSP_BASE_INTERNAL_ERROR = -2128018945;

const int HSP_KSP_ERROR_MASK = -2128018944;

const int HSP_KSP_DEVICE_NOT_READY = -2128018943;

const int HSP_KSP_INVALID_PROVIDER_HANDLE = -2128018942;

const int HSP_KSP_INVALID_KEY_HANDLE = -2128018941;

const int HSP_KSP_INVALID_PARAMETER = -2128018940;

const int HSP_KSP_BUFFER_TOO_SMALL = -2128018939;

const int HSP_KSP_NOT_SUPPORTED = -2128018938;

const int HSP_KSP_INVALID_DATA = -2128018937;

const int HSP_KSP_INVALID_FLAGS = -2128018936;

const int HSP_KSP_ALGORITHM_NOT_SUPPORTED = -2128018935;

const int HSP_KSP_KEY_ALREADY_FINALIZED = -2128018934;

const int HSP_KSP_KEY_NOT_FINALIZED = -2128018933;

const int HSP_KSP_INVALID_KEY_TYPE = -2128018932;

const int HSP_KSP_NO_MEMORY = -2128018928;

const int HSP_KSP_PARAMETER_NOT_SET = -2128018927;

const int HSP_KSP_KEY_EXISTS = -2128018923;

const int HSP_KSP_KEY_MISSING = -2128018922;

const int HSP_KSP_KEY_LOAD_FAIL = -2128018921;

const int HSP_KSP_NO_MORE_ITEMS = -2128018920;

const int HSP_KSP_INTERNAL_ERROR = -2128018689;

const int ERROR_IO_PREEMPTED = -1996423167;

const int JSCRIPT_E_CANTEXECUTE = -1996357631;

const int WEP_E_NOT_PROVISIONED_ON_ALL_VOLUMES = -2013200383;

const int WEP_E_FIXED_DATA_NOT_SUPPORTED = -2013200382;

const int WEP_E_HARDWARE_NOT_COMPLIANT = -2013200381;

const int WEP_E_LOCK_NOT_CONFIGURED = -2013200380;

const int WEP_E_PROTECTION_SUSPENDED = -2013200379;

const int WEP_E_NO_LICENSE = -2013200378;

const int WEP_E_OS_NOT_PROTECTED = -2013200377;

const int WEP_E_UNEXPECTED_FAIL = -2013200376;

const int WEP_E_BUFFER_TOO_LARGE = -2013200375;

const int ERROR_SVHDX_ERROR_STORED = -1067712512;

const int ERROR_SVHDX_ERROR_NOT_AVAILABLE = -1067647232;

const int ERROR_SVHDX_UNIT_ATTENTION_AVAILABLE = -1067647231;

const int ERROR_SVHDX_UNIT_ATTENTION_CAPACITY_DATA_CHANGED = -1067647230;

const int ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_PREEMPTED = -1067647229;

const int ERROR_SVHDX_UNIT_ATTENTION_RESERVATIONS_RELEASED = -1067647228;

const int ERROR_SVHDX_UNIT_ATTENTION_REGISTRATIONS_PREEMPTED = -1067647227;

const int ERROR_SVHDX_UNIT_ATTENTION_OPERATING_DEFINITION_CHANGED = -1067647226;

const int ERROR_SVHDX_RESERVATION_CONFLICT = -1067647225;

const int ERROR_SVHDX_WRONG_FILE_TYPE = -1067647224;

const int ERROR_SVHDX_VERSION_MISMATCH = -1067647223;

const int ERROR_VHD_SHARED = -1067647222;

const int ERROR_SVHDX_NO_INITIATOR = -1067647221;

const int ERROR_VHDSET_BACKING_STORAGE_NOT_FOUND = -1067647220;

const int ERROR_SMB_NO_PREAUTH_INTEGRITY_HASH_OVERLAP = -1067646976;

const int ERROR_SMB_BAD_CLUSTER_DIALECT = -1067646975;

const int ERROR_SMB_NO_SIGNING_ALGORITHM_OVERLAP = -1067646974;

const int WININET_E_OUT_OF_HANDLES = -2147012895;

const int WININET_E_TIMEOUT = -2147012894;

const int WININET_E_EXTENDED_ERROR = -2147012893;

const int WININET_E_INTERNAL_ERROR = -2147012892;

const int WININET_E_INVALID_URL = -2147012891;

const int WININET_E_UNRECOGNIZED_SCHEME = -2147012890;

const int WININET_E_NAME_NOT_RESOLVED = -2147012889;

const int WININET_E_PROTOCOL_NOT_FOUND = -2147012888;

const int WININET_E_INVALID_OPTION = -2147012887;

const int WININET_E_BAD_OPTION_LENGTH = -2147012886;

const int WININET_E_OPTION_NOT_SETTABLE = -2147012885;

const int WININET_E_SHUTDOWN = -2147012884;

const int WININET_E_INCORRECT_USER_NAME = -2147012883;

const int WININET_E_INCORRECT_PASSWORD = -2147012882;

const int WININET_E_LOGIN_FAILURE = -2147012881;

const int WININET_E_INVALID_OPERATION = -2147012880;

const int WININET_E_OPERATION_CANCELLED = -2147012879;

const int WININET_E_INCORRECT_HANDLE_TYPE = -2147012878;

const int WININET_E_INCORRECT_HANDLE_STATE = -2147012877;

const int WININET_E_NOT_PROXY_REQUEST = -2147012876;

const int WININET_E_REGISTRY_VALUE_NOT_FOUND = -2147012875;

const int WININET_E_BAD_REGISTRY_PARAMETER = -2147012874;

const int WININET_E_NO_DIRECT_ACCESS = -2147012873;

const int WININET_E_NO_CONTEXT = -2147012872;

const int WININET_E_NO_CALLBACK = -2147012871;

const int WININET_E_REQUEST_PENDING = -2147012870;

const int WININET_E_INCORRECT_FORMAT = -2147012869;

const int WININET_E_ITEM_NOT_FOUND = -2147012868;

const int WININET_E_CANNOT_CONNECT = -2147012867;

const int WININET_E_CONNECTION_ABORTED = -2147012866;

const int WININET_E_CONNECTION_RESET = -2147012865;

const int WININET_E_FORCE_RETRY = -2147012864;

const int WININET_E_INVALID_PROXY_REQUEST = -2147012863;

const int WININET_E_NEED_UI = -2147012862;

const int WININET_E_HANDLE_EXISTS = -2147012860;

const int WININET_E_SEC_CERT_DATE_INVALID = -2147012859;

const int WININET_E_SEC_CERT_CN_INVALID = -2147012858;

const int WININET_E_HTTP_TO_HTTPS_ON_REDIR = -2147012857;

const int WININET_E_HTTPS_TO_HTTP_ON_REDIR = -2147012856;

const int WININET_E_MIXED_SECURITY = -2147012855;

const int WININET_E_CHG_POST_IS_NON_SECURE = -2147012854;

const int WININET_E_POST_IS_NON_SECURE = -2147012853;

const int WININET_E_CLIENT_AUTH_CERT_NEEDED = -2147012852;

const int WININET_E_INVALID_CA = -2147012851;

const int WININET_E_CLIENT_AUTH_NOT_SETUP = -2147012850;

const int WININET_E_ASYNC_THREAD_FAILED = -2147012849;

const int WININET_E_REDIRECT_SCHEME_CHANGE = -2147012848;

const int WININET_E_DIALOG_PENDING = -2147012847;

const int WININET_E_RETRY_DIALOG = -2147012846;

const int WININET_E_NO_NEW_CONTAINERS = -2147012845;

const int WININET_E_HTTPS_HTTP_SUBMIT_REDIR = -2147012844;

const int WININET_E_SEC_CERT_ERRORS = -2147012841;

const int WININET_E_SEC_CERT_REV_FAILED = -2147012839;

const int WININET_E_HEADER_NOT_FOUND = -2147012746;

const int WININET_E_DOWNLEVEL_SERVER = -2147012745;

const int WININET_E_INVALID_SERVER_RESPONSE = -2147012744;

const int WININET_E_INVALID_HEADER = -2147012743;

const int WININET_E_INVALID_QUERY_REQUEST = -2147012742;

const int WININET_E_HEADER_ALREADY_EXISTS = -2147012741;

const int WININET_E_REDIRECT_FAILED = -2147012740;

const int WININET_E_SECURITY_CHANNEL_ERROR = -2147012739;

const int WININET_E_UNABLE_TO_CACHE_FILE = -2147012738;

const int WININET_E_TCPIP_NOT_INSTALLED = -2147012737;

const int WININET_E_DISCONNECTED = -2147012733;

const int WININET_E_SERVER_UNREACHABLE = -2147012732;

const int WININET_E_PROXY_SERVER_UNREACHABLE = -2147012731;

const int WININET_E_BAD_AUTO_PROXY_SCRIPT = -2147012730;

const int WININET_E_UNABLE_TO_DOWNLOAD_SCRIPT = -2147012729;

const int WININET_E_SEC_INVALID_CERT = -2147012727;

const int WININET_E_SEC_CERT_REVOKED = -2147012726;

const int WININET_E_FAILED_DUETOSECURITYCHECK = -2147012725;

const int WININET_E_NOT_INITIALIZED = -2147012724;

const int WININET_E_LOGIN_FAILURE_DISPLAY_ENTITY_BODY = -2147012722;

const int WININET_E_DECODING_FAILED = -2147012721;

const int WININET_E_NOT_REDIRECTED = -2147012736;

const int WININET_E_COOKIE_NEEDS_CONFIRMATION = -2147012735;

const int WININET_E_COOKIE_DECLINED = -2147012734;

const int WININET_E_REDIRECT_NEEDS_CONFIRMATION = -2147012728;

const int SQLITE_E_ERROR = -2018574335;

const int SQLITE_E_INTERNAL = -2018574334;

const int SQLITE_E_PERM = -2018574333;

const int SQLITE_E_ABORT = -2018574332;

const int SQLITE_E_BUSY = -2018574331;

const int SQLITE_E_LOCKED = -2018574330;

const int SQLITE_E_NOMEM = -2018574329;

const int SQLITE_E_READONLY = -2018574328;

const int SQLITE_E_INTERRUPT = -2018574327;

const int SQLITE_E_IOERR = -2018574326;

const int SQLITE_E_CORRUPT = -2018574325;

const int SQLITE_E_NOTFOUND = -2018574324;

const int SQLITE_E_FULL = -2018574323;

const int SQLITE_E_CANTOPEN = -2018574322;

const int SQLITE_E_PROTOCOL = -2018574321;

const int SQLITE_E_EMPTY = -2018574320;

const int SQLITE_E_SCHEMA = -2018574319;

const int SQLITE_E_TOOBIG = -2018574318;

const int SQLITE_E_CONSTRAINT = -2018574317;

const int SQLITE_E_MISMATCH = -2018574316;

const int SQLITE_E_MISUSE = -2018574315;

const int SQLITE_E_NOLFS = -2018574314;

const int SQLITE_E_AUTH = -2018574313;

const int SQLITE_E_FORMAT = -2018574312;

const int SQLITE_E_RANGE = -2018574311;

const int SQLITE_E_NOTADB = -2018574310;

const int SQLITE_E_NOTICE = -2018574309;

const int SQLITE_E_WARNING = -2018574308;

const int SQLITE_E_ROW = -2018574236;

const int SQLITE_E_DONE = -2018574235;

const int SQLITE_E_IOERR_READ = -2018574070;

const int SQLITE_E_IOERR_SHORT_READ = -2018573814;

const int SQLITE_E_IOERR_WRITE = -2018573558;

const int SQLITE_E_IOERR_FSYNC = -2018573302;

const int SQLITE_E_IOERR_DIR_FSYNC = -2018573046;

const int SQLITE_E_IOERR_TRUNCATE = -2018572790;

const int SQLITE_E_IOERR_FSTAT = -2018572534;

const int SQLITE_E_IOERR_UNLOCK = -2018572278;

const int SQLITE_E_IOERR_RDLOCK = -2018572022;

const int SQLITE_E_IOERR_DELETE = -2018571766;

const int SQLITE_E_IOERR_BLOCKED = -2018571510;

const int SQLITE_E_IOERR_NOMEM = -2018571254;

const int SQLITE_E_IOERR_ACCESS = -2018570998;

const int SQLITE_E_IOERR_CHECKRESERVEDLOCK = -2018570742;

const int SQLITE_E_IOERR_LOCK = -2018570486;

const int SQLITE_E_IOERR_CLOSE = -2018570230;

const int SQLITE_E_IOERR_DIR_CLOSE = -2018569974;

const int SQLITE_E_IOERR_SHMOPEN = -2018569718;

const int SQLITE_E_IOERR_SHMSIZE = -2018569462;

const int SQLITE_E_IOERR_SHMLOCK = -2018569206;

const int SQLITE_E_IOERR_SHMMAP = -2018568950;

const int SQLITE_E_IOERR_SEEK = -2018568694;

const int SQLITE_E_IOERR_DELETE_NOENT = -2018568438;

const int SQLITE_E_IOERR_MMAP = -2018568182;

const int SQLITE_E_IOERR_GETTEMPPATH = -2018567926;

const int SQLITE_E_IOERR_CONVPATH = -2018567670;

const int SQLITE_E_IOERR_VNODE = -2018567678;

const int SQLITE_E_IOERR_AUTH = -2018567677;

const int SQLITE_E_LOCKED_SHAREDCACHE = -2018574074;

const int SQLITE_E_BUSY_RECOVERY = -2018574075;

const int SQLITE_E_BUSY_SNAPSHOT = -2018573819;

const int SQLITE_E_CANTOPEN_NOTEMPDIR = -2018574066;

const int SQLITE_E_CANTOPEN_ISDIR = -2018573810;

const int SQLITE_E_CANTOPEN_FULLPATH = -2018573554;

const int SQLITE_E_CANTOPEN_CONVPATH = -2018573298;

const int SQLITE_E_CORRUPT_VTAB = -2018574069;

const int SQLITE_E_READONLY_RECOVERY = -2018574072;

const int SQLITE_E_READONLY_CANTLOCK = -2018573816;

const int SQLITE_E_READONLY_ROLLBACK = -2018573560;

const int SQLITE_E_READONLY_DBMOVED = -2018573304;

const int SQLITE_E_ABORT_ROLLBACK = -2018573820;

const int SQLITE_E_CONSTRAINT_CHECK = -2018574061;

const int SQLITE_E_CONSTRAINT_COMMITHOOK = -2018573805;

const int SQLITE_E_CONSTRAINT_FOREIGNKEY = -2018573549;

const int SQLITE_E_CONSTRAINT_FUNCTION = -2018573293;

const int SQLITE_E_CONSTRAINT_NOTNULL = -2018573037;

const int SQLITE_E_CONSTRAINT_PRIMARYKEY = -2018572781;

const int SQLITE_E_CONSTRAINT_TRIGGER = -2018572525;

const int SQLITE_E_CONSTRAINT_UNIQUE = -2018572269;

const int SQLITE_E_CONSTRAINT_VTAB = -2018572013;

const int SQLITE_E_CONSTRAINT_ROWID = -2018571757;

const int SQLITE_E_NOTICE_RECOVER_WAL = -2018574053;

const int SQLITE_E_NOTICE_RECOVER_ROLLBACK = -2018573797;

const int SQLITE_E_WARNING_AUTOINDEX = -2018574052;

const int UTC_E_TOGGLE_TRACE_STARTED = -2017128447;

const int UTC_E_ALTERNATIVE_TRACE_CANNOT_PREEMPT = -2017128446;

const int UTC_E_AOT_NOT_RUNNING = -2017128445;

const int UTC_E_SCRIPT_TYPE_INVALID = -2017128444;

const int UTC_E_SCENARIODEF_NOT_FOUND = -2017128443;

const int UTC_E_TRACEPROFILE_NOT_FOUND = -2017128442;

const int UTC_E_FORWARDER_ALREADY_ENABLED = -2017128441;

const int UTC_E_FORWARDER_ALREADY_DISABLED = -2017128440;

const int UTC_E_EVENTLOG_ENTRY_MALFORMED = -2017128439;

const int UTC_E_DIAGRULES_SCHEMAVERSION_MISMATCH = -2017128438;

const int UTC_E_SCRIPT_TERMINATED = -2017128437;

const int UTC_E_INVALID_CUSTOM_FILTER = -2017128436;

const int UTC_E_TRACE_NOT_RUNNING = -2017128435;

const int UTC_E_REESCALATED_TOO_QUICKLY = -2017128434;

const int UTC_E_ESCALATION_ALREADY_RUNNING = -2017128433;

const int UTC_E_PERFTRACK_ALREADY_TRACING = -2017128432;

const int UTC_E_REACHED_MAX_ESCALATIONS = -2017128431;

const int UTC_E_FORWARDER_PRODUCER_MISMATCH = -2017128430;

const int UTC_E_INTENTIONAL_SCRIPT_FAILURE = -2017128429;

const int UTC_E_SQM_INIT_FAILED = -2017128428;

const int UTC_E_NO_WER_LOGGER_SUPPORTED = -2017128427;

const int UTC_E_TRACERS_DONT_EXIST = -2017128426;

const int UTC_E_WINRT_INIT_FAILED = -2017128425;

const int UTC_E_SCENARIODEF_SCHEMAVERSION_MISMATCH = -2017128424;

const int UTC_E_INVALID_FILTER = -2017128423;

const int UTC_E_EXE_TERMINATED = -2017128422;

const int UTC_E_ESCALATION_NOT_AUTHORIZED = -2017128421;

const int UTC_E_SETUP_NOT_AUTHORIZED = -2017128420;

const int UTC_E_CHILD_PROCESS_FAILED = -2017128419;

const int UTC_E_COMMAND_LINE_NOT_AUTHORIZED = -2017128418;

const int UTC_E_CANNOT_LOAD_SCENARIO_EDITOR_XML = -2017128417;

const int UTC_E_ESCALATION_TIMED_OUT = -2017128416;

const int UTC_E_SETUP_TIMED_OUT = -2017128415;

const int UTC_E_TRIGGER_MISMATCH = -2017128414;

const int UTC_E_TRIGGER_NOT_FOUND = -2017128413;

const int UTC_E_SIF_NOT_SUPPORTED = -2017128412;

const int UTC_E_DELAY_TERMINATED = -2017128411;

const int UTC_E_DEVICE_TICKET_ERROR = -2017128410;

const int UTC_E_TRACE_BUFFER_LIMIT_EXCEEDED = -2017128409;

const int UTC_E_API_RESULT_UNAVAILABLE = -2017128408;

const int UTC_E_RPC_TIMEOUT = -2017128407;

const int UTC_E_RPC_WAIT_FAILED = -2017128406;

const int UTC_E_API_BUSY = -2017128405;

const int UTC_E_TRACE_MIN_DURATION_REQUIREMENT_NOT_MET = -2017128404;

const int UTC_E_EXCLUSIVITY_NOT_AVAILABLE = -2017128403;

const int UTC_E_GETFILE_FILE_PATH_NOT_APPROVED = -2017128402;

const int UTC_E_ESCALATION_DIRECTORY_ALREADY_EXISTS = -2017128401;

const int UTC_E_TIME_TRIGGER_ON_START_INVALID = -2017128400;

const int UTC_E_TIME_TRIGGER_ONLY_VALID_ON_SINGLE_TRANSITION = -2017128399;

const int UTC_E_TIME_TRIGGER_INVALID_TIME_RANGE = -2017128398;

const int UTC_E_MULTIPLE_TIME_TRIGGER_ON_SINGLE_STATE = -2017128397;

const int UTC_E_BINARY_MISSING = -2017128396;

const int UTC_E_FAILED_TO_RESOLVE_CONTAINER_ID = -2017128394;

const int UTC_E_UNABLE_TO_RESOLVE_SESSION = -2017128393;

const int UTC_E_THROTTLED = -2017128392;

const int UTC_E_UNAPPROVED_SCRIPT = -2017128391;

const int UTC_E_SCRIPT_MISSING = -2017128390;

const int UTC_E_SCENARIO_THROTTLED = -2017128389;

const int UTC_E_API_NOT_SUPPORTED = -2017128388;

const int UTC_E_GETFILE_EXTERNAL_PATH_NOT_APPROVED = -2017128387;

const int UTC_E_TRY_GET_SCENARIO_TIMEOUT_EXCEEDED = -2017128386;

const int UTC_E_CERT_REV_FAILED = -2017128385;

const int UTC_E_FAILED_TO_START_NDISCAP = -2017128384;

const int UTC_E_KERNELDUMP_LIMIT_REACHED = -2017128383;

const int UTC_E_MISSING_AGGREGATE_EVENT_TAG = -2017128382;

const int UTC_E_INVALID_AGGREGATION_STRUCT = -2017128381;

const int UTC_E_ACTION_NOT_SUPPORTED_IN_DESTINATION = -2017128380;

const int UTC_E_FILTER_MISSING_ATTRIBUTE = -2017128379;

const int UTC_E_FILTER_INVALID_TYPE = -2017128378;

const int UTC_E_FILTER_VARIABLE_NOT_FOUND = -2017128377;

const int UTC_E_FILTER_FUNCTION_RESTRICTED = -2017128376;

const int UTC_E_FILTER_VERSION_MISMATCH = -2017128375;

const int UTC_E_FILTER_INVALID_FUNCTION = -2017128368;

const int UTC_E_FILTER_INVALID_FUNCTION_PARAMS = -2017128367;

const int UTC_E_FILTER_INVALID_COMMAND = -2017128366;

const int UTC_E_FILTER_ILLEGAL_EVAL = -2017128365;

const int UTC_E_TTTRACER_RETURNED_ERROR = -2017128364;

const int UTC_E_AGENT_DIAGNOSTICS_TOO_LARGE = -2017128363;

const int UTC_E_FAILED_TO_RECEIVE_AGENT_DIAGNOSTICS = -2017128362;

const int UTC_E_SCENARIO_HAS_NO_ACTIONS = -2017128361;

const int UTC_E_TTTRACER_STORAGE_FULL = -2017128360;

const int UTC_E_INSUFFICIENT_SPACE_TO_START_TRACE = -2017128359;

const int UTC_E_ESCALATION_CANCELLED_AT_SHUTDOWN = -2017128358;

const int UTC_E_GETFILEINFOACTION_FILE_NOT_APPROVED = -2017128357;

const int UTC_E_SETREGKEYACTION_TYPE_NOT_APPROVED = -2017128356;

const int UTC_E_TRACE_THROTTLED = -2017128355;

const int WINML_ERR_INVALID_DEVICE = -2003828735;

const int WINML_ERR_INVALID_BINDING = -2003828734;

const int WINML_ERR_VALUE_NOTFOUND = -2003828733;

const int WINML_ERR_SIZE_MISMATCH = -2003828732;

const int ERROR_QUIC_HANDSHAKE_FAILURE = -2143223808;

const int ERROR_QUIC_VER_NEG_FAILURE = -2143223807;

const int ERROR_QUIC_USER_CANCELED = -2143223806;

const int ERROR_QUIC_INTERNAL_ERROR = -2143223805;

const int ERROR_QUIC_PROTOCOL_VIOLATION = -2143223804;

const int ERROR_QUIC_CONNECTION_IDLE = -2143223803;

const int ERROR_QUIC_CONNECTION_TIMEOUT = -2143223802;

const int ERROR_QUIC_ALPN_NEG_FAILURE = -2143223801;

const int IORING_E_REQUIRED_FLAG_NOT_SUPPORTED = -2142896127;

const int IORING_E_SUBMISSION_QUEUE_FULL = -2142896126;

const int IORING_E_VERSION_NOT_SUPPORTED = -2142896125;

const int IORING_E_SUBMISSION_QUEUE_TOO_BIG = -2142896124;

const int IORING_E_COMPLETION_QUEUE_TOO_BIG = -2142896123;

const int IORING_E_SUBMIT_IN_PROGRESS = -2142896122;

const int IORING_E_CORRUPT = -2142896121;

const int IORING_E_COMPLETION_QUEUE_TOO_FULL = -2142896120;

const int TIME_ZONE_ID_INVALID = 4294967295;

const int TC_NORMAL = 0;

const int TC_HARDERR = 1;

const int TC_GP_TRAP = 2;

const int TC_SIGNAL = 3;

const int AC_LINE_OFFLINE = 0;

const int AC_LINE_ONLINE = 1;

const int AC_LINE_BACKUP_POWER = 2;

const int AC_LINE_UNKNOWN = 255;

const int BATTERY_FLAG_HIGH = 1;

const int BATTERY_FLAG_LOW = 2;

const int BATTERY_FLAG_CRITICAL = 4;

const int BATTERY_FLAG_CHARGING = 8;

const int BATTERY_FLAG_NO_BATTERY = 128;

const int BATTERY_FLAG_UNKNOWN = 255;

const int BATTERY_PERCENTAGE_UNKNOWN = 255;

const int SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;

const int BATTERY_LIFE_UNKNOWN = 4294967295;

const int ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;

const int ACTCTX_FLAG_LANGID_VALID = 2;

const int ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;

const int ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;

const int ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;

const int ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;

const int ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;

const int ACTCTX_FLAG_HMODULE_VALID = 128;

const int DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;

const int FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;

const int FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;

const int ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;

const int QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;

const int QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;

const int QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;

const int RESTART_MAX_CMD_LINE = 1024;

const int RESTART_NO_CRASH = 1;

const int RESTART_NO_HANG = 2;

const int RESTART_NO_PATCH = 4;

const int RESTART_NO_REBOOT = 8;

const int RECOVERY_DEFAULT_PING_INTERVAL = 5000;

const int RECOVERY_MAX_PING_INTERVAL = 300000;

const int FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;

const int FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;

const int FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;

const int FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;

const int FILE_DISPOSITION_FLAG_DELETE = 1;

const int FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;

const int FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;

const int FILE_DISPOSITION_FLAG_ON_CLOSE = 8;

const int FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;

const int STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;

const int STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;

const int STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;

const int REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;

const int REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;

const int REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;

const int RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;

const int RPI_FLAG_SMB2_SHARECAP_DFS = 8;

const int RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;

const int RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;

const int RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;

const int RPI_SMB2_SHAREFLAG_ENCRYPT_DATA = 1;

const int RPI_SMB2_SHAREFLAG_COMPRESS_DATA = 2;

const int RPI_SMB2_FLAG_SERVERCAP_DFS = 1;

const int RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;

const int RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;

const int RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;

const int RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;

const int RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;

const int SYMBOLIC_LINK_FLAG_DIRECTORY = 1;

const int SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2;

const int MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS =
    1;

const int MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;

const int R2_BLACK = 1;

const int R2_NOTMERGEPEN = 2;

const int R2_MASKNOTPEN = 3;

const int R2_NOTCOPYPEN = 4;

const int R2_MASKPENNOT = 5;

const int R2_NOT = 6;

const int R2_XORPEN = 7;

const int R2_NOTMASKPEN = 8;

const int R2_MASKPEN = 9;

const int R2_NOTXORPEN = 10;

const int R2_NOP = 11;

const int R2_MERGENOTPEN = 12;

const int R2_COPYPEN = 13;

const int R2_MERGEPENNOT = 14;

const int R2_MERGEPEN = 15;

const int R2_WHITE = 16;

const int R2_LAST = 16;

const int SRCCOPY = 13369376;

const int SRCPAINT = 15597702;

const int SRCAND = 8913094;

const int SRCINVERT = 6684742;

const int SRCERASE = 4457256;

const int NOTSRCCOPY = 3342344;

const int NOTSRCERASE = 1114278;

const int MERGECOPY = 12583114;

const int MERGEPAINT = 12255782;

const int PATCOPY = 15728673;

const int PATPAINT = 16452105;

const int PATINVERT = 5898313;

const int DSTINVERT = 5570569;

const int BLACKNESS = 66;

const int WHITENESS = 16711778;

const int NOMIRRORBITMAP = 2147483648;

const int CAPTUREBLT = 1073741824;

const int GDI_ERROR = 4294967295;

const int ERROR = 0;

const int NULLREGION = 1;

const int SIMPLEREGION = 2;

const int COMPLEXREGION = 3;

const int RGN_ERROR = 0;

const int RGN_AND = 1;

const int RGN_OR = 2;

const int RGN_XOR = 3;

const int RGN_DIFF = 4;

const int RGN_COPY = 5;

const int RGN_MIN = 1;

const int RGN_MAX = 5;

const int BLACKONWHITE = 1;

const int WHITEONBLACK = 2;

const int COLORONCOLOR = 3;

const int HALFTONE = 4;

const int MAXSTRETCHBLTMODE = 4;

const int STRETCH_ANDSCANS = 1;

const int STRETCH_ORSCANS = 2;

const int STRETCH_DELETESCANS = 3;

const int STRETCH_HALFTONE = 4;

const int ALTERNATE = 1;

const int WINDING = 2;

const int POLYFILL_LAST = 2;

const int LAYOUT_RTL = 1;

const int LAYOUT_BTT = 2;

const int LAYOUT_VBH = 4;

const int LAYOUT_ORIENTATIONMASK = 7;

const int LAYOUT_BITMAPORIENTATIONPRESERVED = 8;

const int TA_NOUPDATECP = 0;

const int TA_UPDATECP = 1;

const int TA_LEFT = 0;

const int TA_RIGHT = 2;

const int TA_CENTER = 6;

const int TA_TOP = 0;

const int TA_BOTTOM = 8;

const int TA_BASELINE = 24;

const int TA_RTLREADING = 256;

const int TA_MASK = 287;

const int VTA_BASELINE = 24;

const int VTA_LEFT = 8;

const int VTA_RIGHT = 0;

const int VTA_CENTER = 6;

const int VTA_BOTTOM = 2;

const int VTA_TOP = 0;

const int ETO_OPAQUE = 2;

const int ETO_CLIPPED = 4;

const int ETO_GLYPH_INDEX = 16;

const int ETO_RTLREADING = 128;

const int ETO_NUMERICSLOCAL = 1024;

const int ETO_NUMERICSLATIN = 2048;

const int ETO_IGNORELANGUAGE = 4096;

const int ETO_PDY = 8192;

const int ETO_REVERSE_INDEX_MAP = 65536;

const int ASPECT_FILTERING = 1;

const int DCB_RESET = 1;

const int DCB_ACCUMULATE = 2;

const int DCB_DIRTY = 2;

const int DCB_SET = 3;

const int DCB_ENABLE = 4;

const int DCB_DISABLE = 8;

const int META_SETBKCOLOR = 513;

const int META_SETBKMODE = 258;

const int META_SETMAPMODE = 259;

const int META_SETROP2 = 260;

const int META_SETRELABS = 261;

const int META_SETPOLYFILLMODE = 262;

const int META_SETSTRETCHBLTMODE = 263;

const int META_SETTEXTCHAREXTRA = 264;

const int META_SETTEXTCOLOR = 521;

const int META_SETTEXTJUSTIFICATION = 522;

const int META_SETWINDOWORG = 523;

const int META_SETWINDOWEXT = 524;

const int META_SETVIEWPORTORG = 525;

const int META_SETVIEWPORTEXT = 526;

const int META_OFFSETWINDOWORG = 527;

const int META_SCALEWINDOWEXT = 1040;

const int META_OFFSETVIEWPORTORG = 529;

const int META_SCALEVIEWPORTEXT = 1042;

const int META_LINETO = 531;

const int META_MOVETO = 532;

const int META_EXCLUDECLIPRECT = 1045;

const int META_INTERSECTCLIPRECT = 1046;

const int META_ARC = 2071;

const int META_ELLIPSE = 1048;

const int META_FLOODFILL = 1049;

const int META_PIE = 2074;

const int META_RECTANGLE = 1051;

const int META_ROUNDRECT = 1564;

const int META_PATBLT = 1565;

const int META_SAVEDC = 30;

const int META_SETPIXEL = 1055;

const int META_OFFSETCLIPRGN = 544;

const int META_TEXTOUT = 1313;

const int META_BITBLT = 2338;

const int META_STRETCHBLT = 2851;

const int META_POLYGON = 804;

const int META_POLYLINE = 805;

const int META_ESCAPE = 1574;

const int META_RESTOREDC = 295;

const int META_FILLREGION = 552;

const int META_FRAMEREGION = 1065;

const int META_INVERTREGION = 298;

const int META_PAINTREGION = 299;

const int META_SELECTCLIPREGION = 300;

const int META_SELECTOBJECT = 301;

const int META_SETTEXTALIGN = 302;

const int META_CHORD = 2096;

const int META_SETMAPPERFLAGS = 561;

const int META_EXTTEXTOUT = 2610;

const int META_SETDIBTODEV = 3379;

const int META_SELECTPALETTE = 564;

const int META_REALIZEPALETTE = 53;

const int META_ANIMATEPALETTE = 1078;

const int META_SETPALENTRIES = 55;

const int META_POLYPOLYGON = 1336;

const int META_RESIZEPALETTE = 313;

const int META_DIBBITBLT = 2368;

const int META_DIBSTRETCHBLT = 2881;

const int META_DIBCREATEPATTERNBRUSH = 322;

const int META_STRETCHDIB = 3907;

const int META_EXTFLOODFILL = 1352;

const int META_SETLAYOUT = 329;

const int META_DELETEOBJECT = 496;

const int META_CREATEPALETTE = 247;

const int META_CREATEPATTERNBRUSH = 505;

const int META_CREATEPENINDIRECT = 762;

const int META_CREATEFONTINDIRECT = 763;

const int META_CREATEBRUSHINDIRECT = 764;

const int META_CREATEREGION = 1791;

const int NEWFRAME = 1;

const int ABORTDOC = 2;

const int NEXTBAND = 3;

const int SETCOLORTABLE = 4;

const int GETCOLORTABLE = 5;

const int FLUSHOUTPUT = 6;

const int DRAFTMODE = 7;

const int QUERYESCSUPPORT = 8;

const int SETABORTPROC = 9;

const int STARTDOC = 10;

const int ENDDOC = 11;

const int GETPHYSPAGESIZE = 12;

const int GETPRINTINGOFFSET = 13;

const int GETSCALINGFACTOR = 14;

const int MFCOMMENT = 15;

const int GETPENWIDTH = 16;

const int SETCOPYCOUNT = 17;

const int SELECTPAPERSOURCE = 18;

const int DEVICEDATA = 19;

const int PASSTHROUGH = 19;

const int GETTECHNOLGY = 20;

const int GETTECHNOLOGY = 20;

const int SETLINECAP = 21;

const int SETLINEJOIN = 22;

const int SETMITERLIMIT = 23;

const int BANDINFO = 24;

const int DRAWPATTERNRECT = 25;

const int GETVECTORPENSIZE = 26;

const int GETVECTORBRUSHSIZE = 27;

const int ENABLEDUPLEX = 28;

const int GETSETPAPERBINS = 29;

const int GETSETPRINTORIENT = 30;

const int ENUMPAPERBINS = 31;

const int SETDIBSCALING = 32;

const int EPSPRINTING = 33;

const int ENUMPAPERMETRICS = 34;

const int GETSETPAPERMETRICS = 35;

const int POSTSCRIPT_DATA = 37;

const int POSTSCRIPT_IGNORE = 38;

const int MOUSETRAILS = 39;

const int GETDEVICEUNITS = 42;

const int GETEXTENDEDTEXTMETRICS = 256;

const int GETEXTENTTABLE = 257;

const int GETPAIRKERNTABLE = 258;

const int GETTRACKKERNTABLE = 259;

const int EXTTEXTOUT = 512;

const int GETFACENAME = 513;

const int DOWNLOADFACE = 514;

const int ENABLERELATIVEWIDTHS = 768;

const int ENABLEPAIRKERNING = 769;

const int SETKERNTRACK = 770;

const int SETALLJUSTVALUES = 771;

const int SETCHARSET = 772;

const int STRETCHBLT = 2048;

const int METAFILE_DRIVER = 2049;

const int GETSETSCREENPARAMS = 3072;

const int QUERYDIBSUPPORT = 3073;

const int BEGIN_PATH = 4096;

const int CLIP_TO_PATH = 4097;

const int END_PATH = 4098;

const int EXT_DEVICE_CAPS = 4099;

const int RESTORE_CTM = 4100;

const int SAVE_CTM = 4101;

const int SET_ARC_DIRECTION = 4102;

const int SET_BACKGROUND_COLOR = 4103;

const int SET_POLY_MODE = 4104;

const int SET_SCREEN_ANGLE = 4105;

const int SET_SPREAD = 4106;

const int TRANSFORM_CTM = 4107;

const int SET_CLIP_BOX = 4108;

const int SET_BOUNDS = 4109;

const int SET_MIRROR_MODE = 4110;

const int OPENCHANNEL = 4110;

const int DOWNLOADHEADER = 4111;

const int CLOSECHANNEL = 4112;

const int POSTSCRIPT_PASSTHROUGH = 4115;

const int ENCAPSULATED_POSTSCRIPT = 4116;

const int POSTSCRIPT_IDENTIFY = 4117;

const int POSTSCRIPT_INJECTION = 4118;

const int CHECKJPEGFORMAT = 4119;

const int CHECKPNGFORMAT = 4120;

const int GET_PS_FEATURESETTING = 4121;

const int GDIPLUS_TS_QUERYVER = 4122;

const int GDIPLUS_TS_RECORD = 4123;

const int MILCORE_TS_QUERYVER_RESULT_FALSE = 0;

const int MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647;

const int SPCLPASSTHROUGH2 = 4568;

const int PSIDENT_GDICENTRIC = 0;

const int PSIDENT_PSCENTRIC = 1;

const int PSINJECT_BEGINSTREAM = 1;

const int PSINJECT_PSADOBE = 2;

const int PSINJECT_PAGESATEND = 3;

const int PSINJECT_PAGES = 4;

const int PSINJECT_DOCNEEDEDRES = 5;

const int PSINJECT_DOCSUPPLIEDRES = 6;

const int PSINJECT_PAGEORDER = 7;

const int PSINJECT_ORIENTATION = 8;

const int PSINJECT_BOUNDINGBOX = 9;

const int PSINJECT_DOCUMENTPROCESSCOLORS = 10;

const int PSINJECT_COMMENTS = 11;

const int PSINJECT_BEGINDEFAULTS = 12;

const int PSINJECT_ENDDEFAULTS = 13;

const int PSINJECT_BEGINPROLOG = 14;

const int PSINJECT_ENDPROLOG = 15;

const int PSINJECT_BEGINSETUP = 16;

const int PSINJECT_ENDSETUP = 17;

const int PSINJECT_TRAILER = 18;

const int PSINJECT_EOF = 19;

const int PSINJECT_ENDSTREAM = 20;

const int PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;

const int PSINJECT_PAGENUMBER = 100;

const int PSINJECT_BEGINPAGESETUP = 101;

const int PSINJECT_ENDPAGESETUP = 102;

const int PSINJECT_PAGETRAILER = 103;

const int PSINJECT_PLATECOLOR = 104;

const int PSINJECT_SHOWPAGE = 105;

const int PSINJECT_PAGEBBOX = 106;

const int PSINJECT_ENDPAGECOMMENTS = 107;

const int PSINJECT_VMSAVE = 200;

const int PSINJECT_VMRESTORE = 201;

const int PSINJECT_DLFONT = 3722304989;

const int FEATURESETTING_NUP = 0;

const int FEATURESETTING_OUTPUT = 1;

const int FEATURESETTING_PSLEVEL = 2;

const int FEATURESETTING_CUSTPAPER = 3;

const int FEATURESETTING_MIRROR = 4;

const int FEATURESETTING_NEGATIVE = 5;

const int FEATURESETTING_PROTOCOL = 6;

const int FEATURESETTING_PRIVATE_BEGIN = 4096;

const int FEATURESETTING_PRIVATE_END = 8191;

const int PSPROTOCOL_ASCII = 0;

const int PSPROTOCOL_BCP = 1;

const int PSPROTOCOL_TBCP = 2;

const int PSPROTOCOL_BINARY = 3;

const int QDI_SETDIBITS = 1;

const int QDI_GETDIBITS = 2;

const int QDI_DIBTOSCREEN = 4;

const int QDI_STRETCHDIB = 8;

const int SP_NOTREPORTED = 16384;

const int SP_ERROR = -1;

const int SP_APPABORT = -2;

const int SP_USERABORT = -3;

const int SP_OUTOFDISK = -4;

const int SP_OUTOFMEMORY = -5;

const int PR_JOBSTATUS = 0;

const int OBJ_PEN = 1;

const int OBJ_BRUSH = 2;

const int OBJ_DC = 3;

const int OBJ_METADC = 4;

const int OBJ_PAL = 5;

const int OBJ_FONT = 6;

const int OBJ_BITMAP = 7;

const int OBJ_REGION = 8;

const int OBJ_METAFILE = 9;

const int OBJ_MEMDC = 10;

const int OBJ_EXTPEN = 11;

const int OBJ_ENHMETADC = 12;

const int OBJ_ENHMETAFILE = 13;

const int OBJ_COLORSPACE = 14;

const int GDI_OBJ_LAST = 14;

const int GDI_MIN_OBJ_TYPE = 1;

const int GDI_MAX_OBJ_TYPE = 14;

const int MWT_IDENTITY = 1;

const int MWT_LEFTMULTIPLY = 2;

const int MWT_RIGHTMULTIPLY = 3;

const int MWT_MIN = 1;

const int MWT_MAX = 3;

const int CS_ENABLE = 1;

const int CS_DISABLE = 2;

const int CS_DELETE_TRANSFORM = 3;

const int LCS_SIGNATURE = 1347637059;

const int LCS_sRGB = 1934772034;

const int LCS_WINDOWS_COLOR_SPACE = 1466527264;

const int LCS_CALIBRATED_RGB = 0;

const int LCS_GM_BUSINESS = 1;

const int LCS_GM_GRAPHICS = 2;

const int LCS_GM_IMAGES = 4;

const int LCS_GM_ABS_COLORIMETRIC = 8;

const int CM_OUT_OF_GAMUT = 255;

const int CM_IN_GAMUT = 0;

const int ICM_ADDPROFILE = 1;

const int ICM_DELETEPROFILE = 2;

const int ICM_QUERYPROFILE = 3;

const int ICM_SETDEFAULTPROFILE = 4;

const int ICM_REGISTERICMATCHER = 5;

const int ICM_UNREGISTERICMATCHER = 6;

const int ICM_QUERYMATCH = 7;

const int PROFILE_LINKED = 1279872587;

const int PROFILE_EMBEDDED = 1296188740;

const int BI_RGB = 0;

const int BI_RLE8 = 1;

const int BI_RLE4 = 2;

const int BI_BITFIELDS = 3;

const int BI_JPEG = 4;

const int BI_PNG = 5;

const int TCI_SRCCHARSET = 1;

const int TCI_SRCCODEPAGE = 2;

const int TCI_SRCFONTSIG = 3;

const int TCI_SRCLOCALE = 4096;

const int TMPF_FIXED_PITCH = 1;

const int TMPF_VECTOR = 2;

const int TMPF_DEVICE = 8;

const int TMPF_TRUETYPE = 4;

const int NTM_REGULAR = 64;

const int NTM_BOLD = 32;

const int NTM_ITALIC = 1;

const int NTM_NONNEGATIVE_AC = 65536;

const int NTM_PS_OPENTYPE = 131072;

const int NTM_TT_OPENTYPE = 262144;

const int NTM_MULTIPLEMASTER = 524288;

const int NTM_TYPE1 = 1048576;

const int NTM_DSIG = 2097152;

const int LF_FACESIZE = 32;

const int LF_FULLFACESIZE = 64;

const int OUT_DEFAULT_PRECIS = 0;

const int OUT_STRING_PRECIS = 1;

const int OUT_CHARACTER_PRECIS = 2;

const int OUT_STROKE_PRECIS = 3;

const int OUT_TT_PRECIS = 4;

const int OUT_DEVICE_PRECIS = 5;

const int OUT_RASTER_PRECIS = 6;

const int OUT_TT_ONLY_PRECIS = 7;

const int OUT_OUTLINE_PRECIS = 8;

const int OUT_SCREEN_OUTLINE_PRECIS = 9;

const int OUT_PS_ONLY_PRECIS = 10;

const int CLIP_DEFAULT_PRECIS = 0;

const int CLIP_CHARACTER_PRECIS = 1;

const int CLIP_STROKE_PRECIS = 2;

const int CLIP_MASK = 15;

const int CLIP_LH_ANGLES = 16;

const int CLIP_TT_ALWAYS = 32;

const int CLIP_DFA_DISABLE = 64;

const int CLIP_EMBEDDED = 128;

const int DEFAULT_QUALITY = 0;

const int DRAFT_QUALITY = 1;

const int PROOF_QUALITY = 2;

const int NONANTIALIASED_QUALITY = 3;

const int ANTIALIASED_QUALITY = 4;

const int CLEARTYPE_QUALITY = 5;

const int CLEARTYPE_NATURAL_QUALITY = 6;

const int DEFAULT_PITCH = 0;

const int FIXED_PITCH = 1;

const int VARIABLE_PITCH = 2;

const int MONO_FONT = 8;

const int ANSI_CHARSET = 0;

const int DEFAULT_CHARSET = 1;

const int SYMBOL_CHARSET = 2;

const int SHIFTJIS_CHARSET = 128;

const int HANGEUL_CHARSET = 129;

const int HANGUL_CHARSET = 129;

const int GB2312_CHARSET = 134;

const int CHINESEBIG5_CHARSET = 136;

const int OEM_CHARSET = 255;

const int JOHAB_CHARSET = 130;

const int HEBREW_CHARSET = 177;

const int ARABIC_CHARSET = 178;

const int GREEK_CHARSET = 161;

const int TURKISH_CHARSET = 162;

const int VIETNAMESE_CHARSET = 163;

const int THAI_CHARSET = 222;

const int EASTEUROPE_CHARSET = 238;

const int RUSSIAN_CHARSET = 204;

const int MAC_CHARSET = 77;

const int BALTIC_CHARSET = 186;

const int FS_LATIN1 = 1;

const int FS_LATIN2 = 2;

const int FS_CYRILLIC = 4;

const int FS_GREEK = 8;

const int FS_TURKISH = 16;

const int FS_HEBREW = 32;

const int FS_ARABIC = 64;

const int FS_BALTIC = 128;

const int FS_VIETNAMESE = 256;

const int FS_THAI = 65536;

const int FS_JISJAPAN = 131072;

const int FS_CHINESESIMP = 262144;

const int FS_WANSUNG = 524288;

const int FS_CHINESETRAD = 1048576;

const int FS_JOHAB = 2097152;

const int FS_SYMBOL = 2147483648;

const int FF_DONTCARE = 0;

const int FF_ROMAN = 16;

const int FF_SWISS = 32;

const int FF_MODERN = 48;

const int FF_SCRIPT = 64;

const int FF_DECORATIVE = 80;

const int FW_DONTCARE = 0;

const int FW_THIN = 100;

const int FW_EXTRALIGHT = 200;

const int FW_LIGHT = 300;

const int FW_NORMAL = 400;

const int FW_MEDIUM = 500;

const int FW_SEMIBOLD = 600;

const int FW_BOLD = 700;

const int FW_EXTRABOLD = 800;

const int FW_HEAVY = 900;

const int FW_ULTRALIGHT = 200;

const int FW_REGULAR = 400;

const int FW_DEMIBOLD = 600;

const int FW_ULTRABOLD = 800;

const int FW_BLACK = 900;

const int PANOSE_COUNT = 10;

const int PAN_FAMILYTYPE_INDEX = 0;

const int PAN_SERIFSTYLE_INDEX = 1;

const int PAN_WEIGHT_INDEX = 2;

const int PAN_PROPORTION_INDEX = 3;

const int PAN_CONTRAST_INDEX = 4;

const int PAN_STROKEVARIATION_INDEX = 5;

const int PAN_ARMSTYLE_INDEX = 6;

const int PAN_LETTERFORM_INDEX = 7;

const int PAN_MIDLINE_INDEX = 8;

const int PAN_XHEIGHT_INDEX = 9;

const int PAN_CULTURE_LATIN = 0;

const int PAN_ANY = 0;

const int PAN_NO_FIT = 1;

const int PAN_FAMILY_TEXT_DISPLAY = 2;

const int PAN_FAMILY_SCRIPT = 3;

const int PAN_FAMILY_DECORATIVE = 4;

const int PAN_FAMILY_PICTORIAL = 5;

const int PAN_SERIF_COVE = 2;

const int PAN_SERIF_OBTUSE_COVE = 3;

const int PAN_SERIF_SQUARE_COVE = 4;

const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;

const int PAN_SERIF_SQUARE = 6;

const int PAN_SERIF_THIN = 7;

const int PAN_SERIF_BONE = 8;

const int PAN_SERIF_EXAGGERATED = 9;

const int PAN_SERIF_TRIANGLE = 10;

const int PAN_SERIF_NORMAL_SANS = 11;

const int PAN_SERIF_OBTUSE_SANS = 12;

const int PAN_SERIF_PERP_SANS = 13;

const int PAN_SERIF_FLARED = 14;

const int PAN_SERIF_ROUNDED = 15;

const int PAN_WEIGHT_VERY_LIGHT = 2;

const int PAN_WEIGHT_LIGHT = 3;

const int PAN_WEIGHT_THIN = 4;

const int PAN_WEIGHT_BOOK = 5;

const int PAN_WEIGHT_MEDIUM = 6;

const int PAN_WEIGHT_DEMI = 7;

const int PAN_WEIGHT_BOLD = 8;

const int PAN_WEIGHT_HEAVY = 9;

const int PAN_WEIGHT_BLACK = 10;

const int PAN_WEIGHT_NORD = 11;

const int PAN_PROP_OLD_STYLE = 2;

const int PAN_PROP_MODERN = 3;

const int PAN_PROP_EVEN_WIDTH = 4;

const int PAN_PROP_EXPANDED = 5;

const int PAN_PROP_CONDENSED = 6;

const int PAN_PROP_VERY_EXPANDED = 7;

const int PAN_PROP_VERY_CONDENSED = 8;

const int PAN_PROP_MONOSPACED = 9;

const int PAN_CONTRAST_NONE = 2;

const int PAN_CONTRAST_VERY_LOW = 3;

const int PAN_CONTRAST_LOW = 4;

const int PAN_CONTRAST_MEDIUM_LOW = 5;

const int PAN_CONTRAST_MEDIUM = 6;

const int PAN_CONTRAST_MEDIUM_HIGH = 7;

const int PAN_CONTRAST_HIGH = 8;

const int PAN_CONTRAST_VERY_HIGH = 9;

const int PAN_STROKE_GRADUAL_DIAG = 2;

const int PAN_STROKE_GRADUAL_TRAN = 3;

const int PAN_STROKE_GRADUAL_VERT = 4;

const int PAN_STROKE_GRADUAL_HORZ = 5;

const int PAN_STROKE_RAPID_VERT = 6;

const int PAN_STROKE_RAPID_HORZ = 7;

const int PAN_STROKE_INSTANT_VERT = 8;

const int PAN_STRAIGHT_ARMS_HORZ = 2;

const int PAN_STRAIGHT_ARMS_WEDGE = 3;

const int PAN_STRAIGHT_ARMS_VERT = 4;

const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;

const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;

const int PAN_BENT_ARMS_HORZ = 7;

const int PAN_BENT_ARMS_WEDGE = 8;

const int PAN_BENT_ARMS_VERT = 9;

const int PAN_BENT_ARMS_SINGLE_SERIF = 10;

const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;

const int PAN_LETT_NORMAL_CONTACT = 2;

const int PAN_LETT_NORMAL_WEIGHTED = 3;

const int PAN_LETT_NORMAL_BOXED = 4;

const int PAN_LETT_NORMAL_FLATTENED = 5;

const int PAN_LETT_NORMAL_ROUNDED = 6;

const int PAN_LETT_NORMAL_OFF_CENTER = 7;

const int PAN_LETT_NORMAL_SQUARE = 8;

const int PAN_LETT_OBLIQUE_CONTACT = 9;

const int PAN_LETT_OBLIQUE_WEIGHTED = 10;

const int PAN_LETT_OBLIQUE_BOXED = 11;

const int PAN_LETT_OBLIQUE_FLATTENED = 12;

const int PAN_LETT_OBLIQUE_ROUNDED = 13;

const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;

const int PAN_LETT_OBLIQUE_SQUARE = 15;

const int PAN_MIDLINE_STANDARD_TRIMMED = 2;

const int PAN_MIDLINE_STANDARD_POINTED = 3;

const int PAN_MIDLINE_STANDARD_SERIFED = 4;

const int PAN_MIDLINE_HIGH_TRIMMED = 5;

const int PAN_MIDLINE_HIGH_POINTED = 6;

const int PAN_MIDLINE_HIGH_SERIFED = 7;

const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;

const int PAN_MIDLINE_CONSTANT_POINTED = 9;

const int PAN_MIDLINE_CONSTANT_SERIFED = 10;

const int PAN_MIDLINE_LOW_TRIMMED = 11;

const int PAN_MIDLINE_LOW_POINTED = 12;

const int PAN_MIDLINE_LOW_SERIFED = 13;

const int PAN_XHEIGHT_CONSTANT_SMALL = 2;

const int PAN_XHEIGHT_CONSTANT_STD = 3;

const int PAN_XHEIGHT_CONSTANT_LARGE = 4;

const int PAN_XHEIGHT_DUCKING_SMALL = 5;

const int PAN_XHEIGHT_DUCKING_STD = 6;

const int PAN_XHEIGHT_DUCKING_LARGE = 7;

const int ELF_VENDOR_SIZE = 4;

const int ELF_VERSION = 0;

const int ELF_CULTURE_LATIN = 0;

const int RASTER_FONTTYPE = 1;

const int DEVICE_FONTTYPE = 2;

const int TRUETYPE_FONTTYPE = 4;

const int PC_RESERVED = 1;

const int PC_EXPLICIT = 2;

const int PC_NOCOLLAPSE = 4;

const int TRANSPARENT = 1;

const int OPAQUE = 2;

const int BKMODE_LAST = 2;

const int GM_COMPATIBLE = 1;

const int GM_ADVANCED = 2;

const int GM_LAST = 2;

const int PT_CLOSEFIGURE = 1;

const int PT_LINETO = 2;

const int PT_BEZIERTO = 4;

const int PT_MOVETO = 6;

const int MM_TEXT = 1;

const int MM_LOMETRIC = 2;

const int MM_HIMETRIC = 3;

const int MM_LOENGLISH = 4;

const int MM_HIENGLISH = 5;

const int MM_TWIPS = 6;

const int MM_ISOTROPIC = 7;

const int MM_ANISOTROPIC = 8;

const int MM_MIN = 1;

const int MM_MAX = 8;

const int MM_MAX_FIXEDSCALE = 6;

const int ABSOLUTE = 1;

const int RELATIVE = 2;

const int WHITE_BRUSH = 0;

const int LTGRAY_BRUSH = 1;

const int GRAY_BRUSH = 2;

const int DKGRAY_BRUSH = 3;

const int BLACK_BRUSH = 4;

const int NULL_BRUSH = 5;

const int HOLLOW_BRUSH = 5;

const int WHITE_PEN = 6;

const int BLACK_PEN = 7;

const int NULL_PEN = 8;

const int OEM_FIXED_FONT = 10;

const int ANSI_FIXED_FONT = 11;

const int ANSI_VAR_FONT = 12;

const int SYSTEM_FONT = 13;

const int DEVICE_DEFAULT_FONT = 14;

const int DEFAULT_PALETTE = 15;

const int SYSTEM_FIXED_FONT = 16;

const int DEFAULT_GUI_FONT = 17;

const int DC_BRUSH = 18;

const int DC_PEN = 19;

const int STOCK_LAST = 19;

const int CLR_INVALID = 4294967295;

const int BS_SOLID = 0;

const int BS_NULL = 1;

const int BS_HOLLOW = 1;

const int BS_HATCHED = 2;

const int BS_PATTERN = 3;

const int BS_INDEXED = 4;

const int BS_DIBPATTERN = 5;

const int BS_DIBPATTERNPT = 6;

const int BS_PATTERN8X8 = 7;

const int BS_DIBPATTERN8X8 = 8;

const int BS_MONOPATTERN = 9;

const int HS_HORIZONTAL = 0;

const int HS_VERTICAL = 1;

const int HS_FDIAGONAL = 2;

const int HS_BDIAGONAL = 3;

const int HS_CROSS = 4;

const int HS_DIAGCROSS = 5;

const int HS_API_MAX = 12;

const int PS_SOLID = 0;

const int PS_DASH = 1;

const int PS_DOT = 2;

const int PS_DASHDOT = 3;

const int PS_DASHDOTDOT = 4;

const int PS_NULL = 5;

const int PS_INSIDEFRAME = 6;

const int PS_USERSTYLE = 7;

const int PS_ALTERNATE = 8;

const int PS_STYLE_MASK = 15;

const int PS_ENDCAP_ROUND = 0;

const int PS_ENDCAP_SQUARE = 256;

const int PS_ENDCAP_FLAT = 512;

const int PS_ENDCAP_MASK = 3840;

const int PS_JOIN_ROUND = 0;

const int PS_JOIN_BEVEL = 4096;

const int PS_JOIN_MITER = 8192;

const int PS_JOIN_MASK = 61440;

const int PS_COSMETIC = 0;

const int PS_GEOMETRIC = 65536;

const int PS_TYPE_MASK = 983040;

const int AD_COUNTERCLOCKWISE = 1;

const int AD_CLOCKWISE = 2;

const int DRIVERVERSION = 0;

const int TECHNOLOGY = 2;

const int HORZSIZE = 4;

const int VERTSIZE = 6;

const int HORZRES = 8;

const int VERTRES = 10;

const int BITSPIXEL = 12;

const int PLANES = 14;

const int NUMBRUSHES = 16;

const int NUMPENS = 18;

const int NUMMARKERS = 20;

const int NUMFONTS = 22;

const int NUMCOLORS = 24;

const int PDEVICESIZE = 26;

const int CURVECAPS = 28;

const int LINECAPS = 30;

const int POLYGONALCAPS = 32;

const int TEXTCAPS = 34;

const int CLIPCAPS = 36;

const int RASTERCAPS = 38;

const int ASPECTX = 40;

const int ASPECTY = 42;

const int ASPECTXY = 44;

const int LOGPIXELSX = 88;

const int LOGPIXELSY = 90;

const int SIZEPALETTE = 104;

const int NUMRESERVED = 106;

const int COLORRES = 108;

const int PHYSICALWIDTH = 110;

const int PHYSICALHEIGHT = 111;

const int PHYSICALOFFSETX = 112;

const int PHYSICALOFFSETY = 113;

const int SCALINGFACTORX = 114;

const int SCALINGFACTORY = 115;

const int VREFRESH = 116;

const int DESKTOPVERTRES = 117;

const int DESKTOPHORZRES = 118;

const int BLTALIGNMENT = 119;

const int SHADEBLENDCAPS = 120;

const int COLORMGMTCAPS = 121;

const int DT_PLOTTER = 0;

const int DT_RASDISPLAY = 1;

const int DT_RASPRINTER = 2;

const int DT_RASCAMERA = 3;

const int DT_CHARSTREAM = 4;

const int DT_METAFILE = 5;

const int DT_DISPFILE = 6;

const int CC_NONE = 0;

const int CC_CIRCLES = 1;

const int CC_PIE = 2;

const int CC_CHORD = 4;

const int CC_ELLIPSES = 8;

const int CC_WIDE = 16;

const int CC_STYLED = 32;

const int CC_WIDESTYLED = 64;

const int CC_INTERIORS = 128;

const int CC_ROUNDRECT = 256;

const int LC_NONE = 0;

const int LC_POLYLINE = 2;

const int LC_MARKER = 4;

const int LC_POLYMARKER = 8;

const int LC_WIDE = 16;

const int LC_STYLED = 32;

const int LC_WIDESTYLED = 64;

const int LC_INTERIORS = 128;

const int PC_NONE = 0;

const int PC_POLYGON = 1;

const int PC_RECTANGLE = 2;

const int PC_WINDPOLYGON = 4;

const int PC_TRAPEZOID = 4;

const int PC_SCANLINE = 8;

const int PC_WIDE = 16;

const int PC_STYLED = 32;

const int PC_WIDESTYLED = 64;

const int PC_INTERIORS = 128;

const int PC_POLYPOLYGON = 256;

const int PC_PATHS = 512;

const int CP_NONE = 0;

const int CP_RECTANGLE = 1;

const int CP_REGION = 2;

const int TC_OP_CHARACTER = 1;

const int TC_OP_STROKE = 2;

const int TC_CP_STROKE = 4;

const int TC_CR_90 = 8;

const int TC_CR_ANY = 16;

const int TC_SF_X_YINDEP = 32;

const int TC_SA_DOUBLE = 64;

const int TC_SA_INTEGER = 128;

const int TC_SA_CONTIN = 256;

const int TC_EA_DOUBLE = 512;

const int TC_IA_ABLE = 1024;

const int TC_UA_ABLE = 2048;

const int TC_SO_ABLE = 4096;

const int TC_RA_ABLE = 8192;

const int TC_VA_ABLE = 16384;

const int TC_RESERVED = 32768;

const int TC_SCROLLBLT = 65536;

const int RC_BITBLT = 1;

const int RC_BANDING = 2;

const int RC_SCALING = 4;

const int RC_BITMAP64 = 8;

const int RC_GDI20_OUTPUT = 16;

const int RC_GDI20_STATE = 32;

const int RC_SAVEBITMAP = 64;

const int RC_DI_BITMAP = 128;

const int RC_PALETTE = 256;

const int RC_DIBTODEV = 512;

const int RC_BIGFONT = 1024;

const int RC_STRETCHBLT = 2048;

const int RC_FLOODFILL = 4096;

const int RC_STRETCHDIB = 8192;

const int RC_OP_DX_OUTPUT = 16384;

const int RC_DEVBITS = 32768;

const int SB_NONE = 0;

const int SB_CONST_ALPHA = 1;

const int SB_PIXEL_ALPHA = 2;

const int SB_PREMULT_ALPHA = 4;

const int SB_GRAD_RECT = 16;

const int SB_GRAD_TRI = 32;

const int CM_NONE = 0;

const int CM_DEVICE_ICM = 1;

const int CM_GAMMA_RAMP = 2;

const int CM_CMYK_COLOR = 4;

const int DIB_RGB_COLORS = 0;

const int DIB_PAL_COLORS = 1;

const int SYSPAL_ERROR = 0;

const int SYSPAL_STATIC = 1;

const int SYSPAL_NOSTATIC = 2;

const int SYSPAL_NOSTATIC256 = 3;

const int CBM_INIT = 4;

const int FLOODFILLBORDER = 0;

const int FLOODFILLSURFACE = 1;

const int CCHDEVICENAME = 32;

const int CCHFORMNAME = 32;

const int DM_SPECVERSION = 1025;

const int DM_ORIENTATION = 1;

const int DM_PAPERSIZE = 2;

const int DM_PAPERLENGTH = 4;

const int DM_PAPERWIDTH = 8;

const int DM_SCALE = 16;

const int DM_POSITION = 32;

const int DM_NUP = 64;

const int DM_DISPLAYORIENTATION = 128;

const int DM_COPIES = 256;

const int DM_DEFAULTSOURCE = 512;

const int DM_PRINTQUALITY = 1024;

const int DM_COLOR = 2048;

const int DM_DUPLEX = 4096;

const int DM_YRESOLUTION = 8192;

const int DM_TTOPTION = 16384;

const int DM_COLLATE = 32768;

const int DM_FORMNAME = 65536;

const int DM_LOGPIXELS = 131072;

const int DM_BITSPERPEL = 262144;

const int DM_PELSWIDTH = 524288;

const int DM_PELSHEIGHT = 1048576;

const int DM_DISPLAYFLAGS = 2097152;

const int DM_DISPLAYFREQUENCY = 4194304;

const int DM_ICMMETHOD = 8388608;

const int DM_ICMINTENT = 16777216;

const int DM_MEDIATYPE = 33554432;

const int DM_DITHERTYPE = 67108864;

const int DM_PANNINGWIDTH = 134217728;

const int DM_PANNINGHEIGHT = 268435456;

const int DM_DISPLAYFIXEDOUTPUT = 536870912;

const int DMORIENT_PORTRAIT = 1;

const int DMORIENT_LANDSCAPE = 2;

const int DMPAPER_FIRST = 1;

const int DMPAPER_LETTER = 1;

const int DMPAPER_LETTERSMALL = 2;

const int DMPAPER_TABLOID = 3;

const int DMPAPER_LEDGER = 4;

const int DMPAPER_LEGAL = 5;

const int DMPAPER_STATEMENT = 6;

const int DMPAPER_EXECUTIVE = 7;

const int DMPAPER_A3 = 8;

const int DMPAPER_A4 = 9;

const int DMPAPER_A4SMALL = 10;

const int DMPAPER_A5 = 11;

const int DMPAPER_B4 = 12;

const int DMPAPER_B5 = 13;

const int DMPAPER_FOLIO = 14;

const int DMPAPER_QUARTO = 15;

const int DMPAPER_10X14 = 16;

const int DMPAPER_11X17 = 17;

const int DMPAPER_NOTE = 18;

const int DMPAPER_ENV_9 = 19;

const int DMPAPER_ENV_10 = 20;

const int DMPAPER_ENV_11 = 21;

const int DMPAPER_ENV_12 = 22;

const int DMPAPER_ENV_14 = 23;

const int DMPAPER_CSHEET = 24;

const int DMPAPER_DSHEET = 25;

const int DMPAPER_ESHEET = 26;

const int DMPAPER_ENV_DL = 27;

const int DMPAPER_ENV_C5 = 28;

const int DMPAPER_ENV_C3 = 29;

const int DMPAPER_ENV_C4 = 30;

const int DMPAPER_ENV_C6 = 31;

const int DMPAPER_ENV_C65 = 32;

const int DMPAPER_ENV_B4 = 33;

const int DMPAPER_ENV_B5 = 34;

const int DMPAPER_ENV_B6 = 35;

const int DMPAPER_ENV_ITALY = 36;

const int DMPAPER_ENV_MONARCH = 37;

const int DMPAPER_ENV_PERSONAL = 38;

const int DMPAPER_FANFOLD_US = 39;

const int DMPAPER_FANFOLD_STD_GERMAN = 40;

const int DMPAPER_FANFOLD_LGL_GERMAN = 41;

const int DMPAPER_ISO_B4 = 42;

const int DMPAPER_JAPANESE_POSTCARD = 43;

const int DMPAPER_9X11 = 44;

const int DMPAPER_10X11 = 45;

const int DMPAPER_15X11 = 46;

const int DMPAPER_ENV_INVITE = 47;

const int DMPAPER_RESERVED_48 = 48;

const int DMPAPER_RESERVED_49 = 49;

const int DMPAPER_LETTER_EXTRA = 50;

const int DMPAPER_LEGAL_EXTRA = 51;

const int DMPAPER_TABLOID_EXTRA = 52;

const int DMPAPER_A4_EXTRA = 53;

const int DMPAPER_LETTER_TRANSVERSE = 54;

const int DMPAPER_A4_TRANSVERSE = 55;

const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;

const int DMPAPER_A_PLUS = 57;

const int DMPAPER_B_PLUS = 58;

const int DMPAPER_LETTER_PLUS = 59;

const int DMPAPER_A4_PLUS = 60;

const int DMPAPER_A5_TRANSVERSE = 61;

const int DMPAPER_B5_TRANSVERSE = 62;

const int DMPAPER_A3_EXTRA = 63;

const int DMPAPER_A5_EXTRA = 64;

const int DMPAPER_B5_EXTRA = 65;

const int DMPAPER_A2 = 66;

const int DMPAPER_A3_TRANSVERSE = 67;

const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;

const int DMPAPER_DBL_JAPANESE_POSTCARD = 69;

const int DMPAPER_A6 = 70;

const int DMPAPER_JENV_KAKU2 = 71;

const int DMPAPER_JENV_KAKU3 = 72;

const int DMPAPER_JENV_CHOU3 = 73;

const int DMPAPER_JENV_CHOU4 = 74;

const int DMPAPER_LETTER_ROTATED = 75;

const int DMPAPER_A3_ROTATED = 76;

const int DMPAPER_A4_ROTATED = 77;

const int DMPAPER_A5_ROTATED = 78;

const int DMPAPER_B4_JIS_ROTATED = 79;

const int DMPAPER_B5_JIS_ROTATED = 80;

const int DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;

const int DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;

const int DMPAPER_A6_ROTATED = 83;

const int DMPAPER_JENV_KAKU2_ROTATED = 84;

const int DMPAPER_JENV_KAKU3_ROTATED = 85;

const int DMPAPER_JENV_CHOU3_ROTATED = 86;

const int DMPAPER_JENV_CHOU4_ROTATED = 87;

const int DMPAPER_B6_JIS = 88;

const int DMPAPER_B6_JIS_ROTATED = 89;

const int DMPAPER_12X11 = 90;

const int DMPAPER_JENV_YOU4 = 91;

const int DMPAPER_JENV_YOU4_ROTATED = 92;

const int DMPAPER_P16K = 93;

const int DMPAPER_P32K = 94;

const int DMPAPER_P32KBIG = 95;

const int DMPAPER_PENV_1 = 96;

const int DMPAPER_PENV_2 = 97;

const int DMPAPER_PENV_3 = 98;

const int DMPAPER_PENV_4 = 99;

const int DMPAPER_PENV_5 = 100;

const int DMPAPER_PENV_6 = 101;

const int DMPAPER_PENV_7 = 102;

const int DMPAPER_PENV_8 = 103;

const int DMPAPER_PENV_9 = 104;

const int DMPAPER_PENV_10 = 105;

const int DMPAPER_P16K_ROTATED = 106;

const int DMPAPER_P32K_ROTATED = 107;

const int DMPAPER_P32KBIG_ROTATED = 108;

const int DMPAPER_PENV_1_ROTATED = 109;

const int DMPAPER_PENV_2_ROTATED = 110;

const int DMPAPER_PENV_3_ROTATED = 111;

const int DMPAPER_PENV_4_ROTATED = 112;

const int DMPAPER_PENV_5_ROTATED = 113;

const int DMPAPER_PENV_6_ROTATED = 114;

const int DMPAPER_PENV_7_ROTATED = 115;

const int DMPAPER_PENV_8_ROTATED = 116;

const int DMPAPER_PENV_9_ROTATED = 117;

const int DMPAPER_PENV_10_ROTATED = 118;

const int DMPAPER_LAST = 118;

const int DMPAPER_USER = 256;

const int DMBIN_FIRST = 1;

const int DMBIN_UPPER = 1;

const int DMBIN_ONLYONE = 1;

const int DMBIN_LOWER = 2;

const int DMBIN_MIDDLE = 3;

const int DMBIN_MANUAL = 4;

const int DMBIN_ENVELOPE = 5;

const int DMBIN_ENVMANUAL = 6;

const int DMBIN_AUTO = 7;

const int DMBIN_TRACTOR = 8;

const int DMBIN_SMALLFMT = 9;

const int DMBIN_LARGEFMT = 10;

const int DMBIN_LARGECAPACITY = 11;

const int DMBIN_CASSETTE = 14;

const int DMBIN_FORMSOURCE = 15;

const int DMBIN_LAST = 15;

const int DMBIN_USER = 256;

const int DMRES_DRAFT = -1;

const int DMRES_LOW = -2;

const int DMRES_MEDIUM = -3;

const int DMRES_HIGH = -4;

const int DMCOLOR_MONOCHROME = 1;

const int DMCOLOR_COLOR = 2;

const int DMDUP_SIMPLEX = 1;

const int DMDUP_VERTICAL = 2;

const int DMDUP_HORIZONTAL = 3;

const int DMTT_BITMAP = 1;

const int DMTT_DOWNLOAD = 2;

const int DMTT_SUBDEV = 3;

const int DMTT_DOWNLOAD_OUTLINE = 4;

const int DMCOLLATE_FALSE = 0;

const int DMCOLLATE_TRUE = 1;

const int DMDO_DEFAULT = 0;

const int DMDO_90 = 1;

const int DMDO_180 = 2;

const int DMDO_270 = 3;

const int DMDFO_DEFAULT = 0;

const int DMDFO_STRETCH = 1;

const int DMDFO_CENTER = 2;

const int DM_INTERLACED = 2;

const int DMDISPLAYFLAGS_TEXTMODE = 4;

const int DMNUP_SYSTEM = 1;

const int DMNUP_ONEUP = 2;

const int DMICMMETHOD_NONE = 1;

const int DMICMMETHOD_SYSTEM = 2;

const int DMICMMETHOD_DRIVER = 3;

const int DMICMMETHOD_DEVICE = 4;

const int DMICMMETHOD_USER = 256;

const int DMICM_SATURATE = 1;

const int DMICM_CONTRAST = 2;

const int DMICM_COLORIMETRIC = 3;

const int DMICM_ABS_COLORIMETRIC = 4;

const int DMICM_USER = 256;

const int DMMEDIA_STANDARD = 1;

const int DMMEDIA_TRANSPARENCY = 2;

const int DMMEDIA_GLOSSY = 3;

const int DMMEDIA_USER = 256;

const int DMDITHER_NONE = 1;

const int DMDITHER_COARSE = 2;

const int DMDITHER_FINE = 3;

const int DMDITHER_LINEART = 4;

const int DMDITHER_ERRORDIFFUSION = 5;

const int DMDITHER_RESERVED6 = 6;

const int DMDITHER_RESERVED7 = 7;

const int DMDITHER_RESERVED8 = 8;

const int DMDITHER_RESERVED9 = 9;

const int DMDITHER_GRAYSCALE = 10;

const int DMDITHER_USER = 256;

const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1;

const int DISPLAY_DEVICE_MULTI_DRIVER = 2;

const int DISPLAY_DEVICE_PRIMARY_DEVICE = 4;

const int DISPLAY_DEVICE_MIRRORING_DRIVER = 8;

const int DISPLAY_DEVICE_VGA_COMPATIBLE = 16;

const int DISPLAY_DEVICE_REMOVABLE = 32;

const int DISPLAY_DEVICE_ACC_DRIVER = 64;

const int DISPLAY_DEVICE_MODESPRUNED = 134217728;

const int DISPLAY_DEVICE_RDPUDD = 16777216;

const int DISPLAY_DEVICE_REMOTE = 67108864;

const int DISPLAY_DEVICE_DISCONNECT = 33554432;

const int DISPLAY_DEVICE_TS_COMPATIBLE = 2097152;

const int DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288;

const int DISPLAY_DEVICE_ACTIVE = 1;

const int DISPLAY_DEVICE_ATTACHED = 2;

const int DISPLAYCONFIG_MAXPATH = 1024;

const int DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295;

const int DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535;

const int DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535;

const int DISPLAYCONFIG_SOURCE_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_IN_USE = 1;

const int DISPLAYCONFIG_TARGET_FORCIBLE = 2;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8;

const int DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16;

const int DISPLAYCONFIG_TARGET_IS_HMD = 32;

const int DISPLAYCONFIG_PATH_ACTIVE = 1;

const int DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4;

const int DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8;

const int DISPLAYCONFIG_PATH_VALID_FLAGS = 29;

const int QDC_ALL_PATHS = 1;

const int QDC_ONLY_ACTIVE_PATHS = 2;

const int QDC_DATABASE_CURRENT = 4;

const int QDC_VIRTUAL_MODE_AWARE = 16;

const int QDC_INCLUDE_HMD = 32;

const int QDC_VIRTUAL_REFRESH_RATE_AWARE = 64;

const int SDC_TOPOLOGY_INTERNAL = 1;

const int SDC_TOPOLOGY_CLONE = 2;

const int SDC_TOPOLOGY_EXTEND = 4;

const int SDC_TOPOLOGY_EXTERNAL = 8;

const int SDC_TOPOLOGY_SUPPLIED = 16;

const int SDC_USE_DATABASE_CURRENT = 15;

const int SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32;

const int SDC_VALIDATE = 64;

const int SDC_APPLY = 128;

const int SDC_NO_OPTIMIZATION = 256;

const int SDC_SAVE_TO_DATABASE = 512;

const int SDC_ALLOW_CHANGES = 1024;

const int SDC_PATH_PERSIST_IF_REQUIRED = 2048;

const int SDC_FORCE_MODE_ENUMERATION = 4096;

const int SDC_ALLOW_PATH_ORDER_CHANGES = 8192;

const int SDC_VIRTUAL_MODE_AWARE = 32768;

const int SDC_VIRTUAL_REFRESH_RATE_AWARE = 131072;

const int RDH_RECTANGLES = 1;

const int SYSRGN = 4;

const int GGO_METRICS = 0;

const int GGO_BITMAP = 1;

const int GGO_NATIVE = 2;

const int GGO_BEZIER = 3;

const int GGO_GRAY2_BITMAP = 4;

const int GGO_GRAY4_BITMAP = 5;

const int GGO_GRAY8_BITMAP = 6;

const int GGO_GLYPH_INDEX = 128;

const int GGO_UNHINTED = 256;

const int TT_POLYGON_TYPE = 24;

const int TT_PRIM_LINE = 1;

const int TT_PRIM_QSPLINE = 2;

const int TT_PRIM_CSPLINE = 3;

const int GCP_DBCS = 1;

const int GCP_REORDER = 2;

const int GCP_USEKERNING = 8;

const int GCP_GLYPHSHAPE = 16;

const int GCP_LIGATE = 32;

const int GCP_DIACRITIC = 256;

const int GCP_KASHIDA = 1024;

const int GCP_ERROR = 32768;

const int FLI_MASK = 4155;

const int GCP_JUSTIFY = 65536;

const int FLI_GLYPHS = 262144;

const int GCP_CLASSIN = 524288;

const int GCP_MAXEXTENT = 1048576;

const int GCP_JUSTIFYIN = 2097152;

const int GCP_DISPLAYZWG = 4194304;

const int GCP_SYMSWAPOFF = 8388608;

const int GCP_NUMERICOVERRIDE = 16777216;

const int GCP_NEUTRALOVERRIDE = 33554432;

const int GCP_NUMERICSLATIN = 67108864;

const int GCP_NUMERICSLOCAL = 134217728;

const int GCPCLASS_LATIN = 1;

const int GCPCLASS_HEBREW = 2;

const int GCPCLASS_ARABIC = 2;

const int GCPCLASS_NEUTRAL = 3;

const int GCPCLASS_LOCALNUMBER = 4;

const int GCPCLASS_LATINNUMBER = 5;

const int GCPCLASS_LATINNUMERICTERMINATOR = 6;

const int GCPCLASS_LATINNUMERICSEPARATOR = 7;

const int GCPCLASS_NUMERICSEPARATOR = 8;

const int GCPCLASS_PREBOUNDLTR = 128;

const int GCPCLASS_PREBOUNDRTL = 64;

const int GCPCLASS_POSTBOUNDLTR = 32;

const int GCPCLASS_POSTBOUNDRTL = 16;

const int GCPGLYPH_LINKBEFORE = 32768;

const int GCPGLYPH_LINKAFTER = 16384;

const int TT_AVAILABLE = 1;

const int TT_ENABLED = 2;

const int PFD_TYPE_RGBA = 0;

const int PFD_TYPE_COLORINDEX = 1;

const int PFD_MAIN_PLANE = 0;

const int PFD_OVERLAY_PLANE = 1;

const int PFD_UNDERLAY_PLANE = -1;

const int PFD_DOUBLEBUFFER = 1;

const int PFD_STEREO = 2;

const int PFD_DRAW_TO_WINDOW = 4;

const int PFD_DRAW_TO_BITMAP = 8;

const int PFD_SUPPORT_GDI = 16;

const int PFD_SUPPORT_OPENGL = 32;

const int PFD_GENERIC_FORMAT = 64;

const int PFD_NEED_PALETTE = 128;

const int PFD_NEED_SYSTEM_PALETTE = 256;

const int PFD_SWAP_EXCHANGE = 512;

const int PFD_SWAP_COPY = 1024;

const int PFD_SWAP_LAYER_BUFFERS = 2048;

const int PFD_GENERIC_ACCELERATED = 4096;

const int PFD_SUPPORT_DIRECTDRAW = 8192;

const int PFD_DIRECT3D_ACCELERATED = 16384;

const int PFD_SUPPORT_COMPOSITION = 32768;

const int PFD_DEPTH_DONTCARE = 536870912;

const int PFD_DOUBLEBUFFER_DONTCARE = 1073741824;

const int PFD_STEREO_DONTCARE = 2147483648;

const int DC_BINADJUST = 19;

const int DC_EMF_COMPLIANT = 20;

const int DC_DATATYPE_PRODUCED = 21;

const int DC_COLLATE = 22;

const int DC_MANUFACTURER = 23;

const int DC_MODEL = 24;

const int DC_PERSONALITY = 25;

const int DC_PRINTRATE = 26;

const int DC_PRINTRATEUNIT = 27;

const int PRINTRATEUNIT_PPM = 1;

const int PRINTRATEUNIT_CPS = 2;

const int PRINTRATEUNIT_LPM = 3;

const int PRINTRATEUNIT_IPM = 4;

const int DC_PRINTERMEM = 28;

const int DC_MEDIAREADY = 29;

const int DC_STAPLE = 30;

const int DC_PRINTRATEPPM = 31;

const int DC_COLORDEVICE = 32;

const int DC_NUP = 33;

const int DC_MEDIATYPENAMES = 34;

const int DC_MEDIATYPES = 35;

const int DCTT_BITMAP = 1;

const int DCTT_DOWNLOAD = 2;

const int DCTT_SUBDEV = 4;

const int DCTT_DOWNLOAD_OUTLINE = 8;

const int DCBA_FACEUPNONE = 0;

const int DCBA_FACEUPCENTER = 1;

const int DCBA_FACEUPLEFT = 2;

const int DCBA_FACEUPRIGHT = 3;

const int DCBA_FACEDOWNNONE = 256;

const int DCBA_FACEDOWNCENTER = 257;

const int DCBA_FACEDOWNLEFT = 258;

const int DCBA_FACEDOWNRIGHT = 259;

const int GS_8BIT_INDICES = 1;

const int GGI_MARK_NONEXISTING_GLYPHS = 1;

const int STAMP_DESIGNVECTOR = 134248036;

const int STAMP_AXESLIST = 134245473;

const int STAMP_TRUETYPE_VARIATION = 134248052;

const int STAMP_CFF2 = 134248035;

const int MM_MAX_NUMAXES = 16;

const int FR_PRIVATE = 16;

const int FR_NOT_ENUM = 32;

const int MM_MAX_AXES_NAMELEN = 16;

const int AC_SRC_OVER = 0;

const int AC_SRC_ALPHA = 1;

const int GRADIENT_FILL_RECT_H = 0;

const int GRADIENT_FILL_RECT_V = 1;

const int GRADIENT_FILL_TRIANGLE = 2;

const int GRADIENT_FILL_OP_FLAG = 255;

const int CA_NEGATIVE = 1;

const int CA_LOG_FILTER = 2;

const int ILLUMINANT_DEVICE_DEFAULT = 0;

const int ILLUMINANT_A = 1;

const int ILLUMINANT_B = 2;

const int ILLUMINANT_C = 3;

const int ILLUMINANT_D50 = 4;

const int ILLUMINANT_D55 = 5;

const int ILLUMINANT_D65 = 6;

const int ILLUMINANT_D75 = 7;

const int ILLUMINANT_F2 = 8;

const int ILLUMINANT_MAX_INDEX = 8;

const int ILLUMINANT_TUNGSTEN = 1;

const int ILLUMINANT_DAYLIGHT = 3;

const int ILLUMINANT_FLUORESCENT = 8;

const int ILLUMINANT_NTSC = 3;

const int RGB_GAMMA_MIN = 1344;

const int RGB_GAMMA_MAX = 65000;

const int REFERENCE_WHITE_MIN = 6000;

const int REFERENCE_WHITE_MAX = 10000;

const int REFERENCE_BLACK_MIN = 0;

const int REFERENCE_BLACK_MAX = 4000;

const int COLOR_ADJ_MIN = -100;

const int COLOR_ADJ_MAX = 100;

const int DI_APPBANDING = 1;

const int DI_ROPS_READ_DESTINATION = 2;

const int FONTMAPPER_MAX = 10;

const int ICM_OFF = 1;

const int ICM_ON = 2;

const int ICM_QUERY = 3;

const int ICM_DONE_OUTSIDEDC = 4;

const int ENHMETA_SIGNATURE = 1179469088;

const int ENHMETA_STOCK_OBJECT = 2147483648;

const int EMR_HEADER = 1;

const int EMR_POLYBEZIER = 2;

const int EMR_POLYGON = 3;

const int EMR_POLYLINE = 4;

const int EMR_POLYBEZIERTO = 5;

const int EMR_POLYLINETO = 6;

const int EMR_POLYPOLYLINE = 7;

const int EMR_POLYPOLYGON = 8;

const int EMR_SETWINDOWEXTEX = 9;

const int EMR_SETWINDOWORGEX = 10;

const int EMR_SETVIEWPORTEXTEX = 11;

const int EMR_SETVIEWPORTORGEX = 12;

const int EMR_SETBRUSHORGEX = 13;

const int EMR_EOF = 14;

const int EMR_SETPIXELV = 15;

const int EMR_SETMAPPERFLAGS = 16;

const int EMR_SETMAPMODE = 17;

const int EMR_SETBKMODE = 18;

const int EMR_SETPOLYFILLMODE = 19;

const int EMR_SETROP2 = 20;

const int EMR_SETSTRETCHBLTMODE = 21;

const int EMR_SETTEXTALIGN = 22;

const int EMR_SETCOLORADJUSTMENT = 23;

const int EMR_SETTEXTCOLOR = 24;

const int EMR_SETBKCOLOR = 25;

const int EMR_OFFSETCLIPRGN = 26;

const int EMR_MOVETOEX = 27;

const int EMR_SETMETARGN = 28;

const int EMR_EXCLUDECLIPRECT = 29;

const int EMR_INTERSECTCLIPRECT = 30;

const int EMR_SCALEVIEWPORTEXTEX = 31;

const int EMR_SCALEWINDOWEXTEX = 32;

const int EMR_SAVEDC = 33;

const int EMR_RESTOREDC = 34;

const int EMR_SETWORLDTRANSFORM = 35;

const int EMR_MODIFYWORLDTRANSFORM = 36;

const int EMR_SELECTOBJECT = 37;

const int EMR_CREATEPEN = 38;

const int EMR_CREATEBRUSHINDIRECT = 39;

const int EMR_DELETEOBJECT = 40;

const int EMR_ANGLEARC = 41;

const int EMR_ELLIPSE = 42;

const int EMR_RECTANGLE = 43;

const int EMR_ROUNDRECT = 44;

const int EMR_ARC = 45;

const int EMR_CHORD = 46;

const int EMR_PIE = 47;

const int EMR_SELECTPALETTE = 48;

const int EMR_CREATEPALETTE = 49;

const int EMR_SETPALETTEENTRIES = 50;

const int EMR_RESIZEPALETTE = 51;

const int EMR_REALIZEPALETTE = 52;

const int EMR_EXTFLOODFILL = 53;

const int EMR_LINETO = 54;

const int EMR_ARCTO = 55;

const int EMR_POLYDRAW = 56;

const int EMR_SETARCDIRECTION = 57;

const int EMR_SETMITERLIMIT = 58;

const int EMR_BEGINPATH = 59;

const int EMR_ENDPATH = 60;

const int EMR_CLOSEFIGURE = 61;

const int EMR_FILLPATH = 62;

const int EMR_STROKEANDFILLPATH = 63;

const int EMR_STROKEPATH = 64;

const int EMR_FLATTENPATH = 65;

const int EMR_WIDENPATH = 66;

const int EMR_SELECTCLIPPATH = 67;

const int EMR_ABORTPATH = 68;

const int EMR_GDICOMMENT = 70;

const int EMR_FILLRGN = 71;

const int EMR_FRAMERGN = 72;

const int EMR_INVERTRGN = 73;

const int EMR_PAINTRGN = 74;

const int EMR_EXTSELECTCLIPRGN = 75;

const int EMR_BITBLT = 76;

const int EMR_STRETCHBLT = 77;

const int EMR_MASKBLT = 78;

const int EMR_PLGBLT = 79;

const int EMR_SETDIBITSTODEVICE = 80;

const int EMR_STRETCHDIBITS = 81;

const int EMR_EXTCREATEFONTINDIRECTW = 82;

const int EMR_EXTTEXTOUTA = 83;

const int EMR_EXTTEXTOUTW = 84;

const int EMR_POLYBEZIER16 = 85;

const int EMR_POLYGON16 = 86;

const int EMR_POLYLINE16 = 87;

const int EMR_POLYBEZIERTO16 = 88;

const int EMR_POLYLINETO16 = 89;

const int EMR_POLYPOLYLINE16 = 90;

const int EMR_POLYPOLYGON16 = 91;

const int EMR_POLYDRAW16 = 92;

const int EMR_CREATEMONOBRUSH = 93;

const int EMR_CREATEDIBPATTERNBRUSHPT = 94;

const int EMR_EXTCREATEPEN = 95;

const int EMR_POLYTEXTOUTA = 96;

const int EMR_POLYTEXTOUTW = 97;

const int EMR_SETICMMODE = 98;

const int EMR_CREATECOLORSPACE = 99;

const int EMR_SETCOLORSPACE = 100;

const int EMR_DELETECOLORSPACE = 101;

const int EMR_GLSRECORD = 102;

const int EMR_GLSBOUNDEDRECORD = 103;

const int EMR_PIXELFORMAT = 104;

const int EMR_RESERVED_105 = 105;

const int EMR_RESERVED_106 = 106;

const int EMR_RESERVED_107 = 107;

const int EMR_RESERVED_108 = 108;

const int EMR_RESERVED_109 = 109;

const int EMR_RESERVED_110 = 110;

const int EMR_COLORCORRECTPALETTE = 111;

const int EMR_SETICMPROFILEA = 112;

const int EMR_SETICMPROFILEW = 113;

const int EMR_ALPHABLEND = 114;

const int EMR_SETLAYOUT = 115;

const int EMR_TRANSPARENTBLT = 116;

const int EMR_RESERVED_117 = 117;

const int EMR_GRADIENTFILL = 118;

const int EMR_RESERVED_119 = 119;

const int EMR_RESERVED_120 = 120;

const int EMR_COLORMATCHTOTARGETW = 121;

const int EMR_CREATECOLORSPACEW = 122;

const int EMR_MIN = 1;

const int EMR_MAX = 122;

const int SETICMPROFILE_EMBEDED = 1;

const int CREATECOLORSPACE_EMBEDED = 1;

const int COLORMATCHTOTARGET_EMBEDED = 1;

const int GDICOMMENT_IDENTIFIER = 1128875079;

const int GDICOMMENT_WINDOWS_METAFILE = 2147483649;

const int GDICOMMENT_BEGINGROUP = 2;

const int GDICOMMENT_ENDGROUP = 3;

const int GDICOMMENT_MULTIFORMATS = 1073741828;

const int EPS_SIGNATURE = 1179865157;

const int GDICOMMENT_UNICODE_STRING = 64;

const int GDICOMMENT_UNICODE_END = 128;

const int WGL_FONT_LINES = 0;

const int WGL_FONT_POLYGONS = 1;

const int LPD_DOUBLEBUFFER = 1;

const int LPD_STEREO = 2;

const int LPD_SUPPORT_GDI = 16;

const int LPD_SUPPORT_OPENGL = 32;

const int LPD_SHARE_DEPTH = 64;

const int LPD_SHARE_STENCIL = 128;

const int LPD_SHARE_ACCUM = 256;

const int LPD_SWAP_EXCHANGE = 512;

const int LPD_SWAP_COPY = 1024;

const int LPD_TRANSPARENT = 4096;

const int LPD_TYPE_RGBA = 0;

const int LPD_TYPE_COLORINDEX = 1;

const int WGL_SWAP_MAIN_PLANE = 1;

const int WGL_SWAP_OVERLAY1 = 2;

const int WGL_SWAP_OVERLAY2 = 4;

const int WGL_SWAP_OVERLAY3 = 8;

const int WGL_SWAP_OVERLAY4 = 16;

const int WGL_SWAP_OVERLAY5 = 32;

const int WGL_SWAP_OVERLAY6 = 64;

const int WGL_SWAP_OVERLAY7 = 128;

const int WGL_SWAP_OVERLAY8 = 256;

const int WGL_SWAP_OVERLAY9 = 512;

const int WGL_SWAP_OVERLAY10 = 1024;

const int WGL_SWAP_OVERLAY11 = 2048;

const int WGL_SWAP_OVERLAY12 = 4096;

const int WGL_SWAP_OVERLAY13 = 8192;

const int WGL_SWAP_OVERLAY14 = 16384;

const int WGL_SWAP_OVERLAY15 = 32768;

const int WGL_SWAP_UNDERLAY1 = 65536;

const int WGL_SWAP_UNDERLAY2 = 131072;

const int WGL_SWAP_UNDERLAY3 = 262144;

const int WGL_SWAP_UNDERLAY4 = 524288;

const int WGL_SWAP_UNDERLAY5 = 1048576;

const int WGL_SWAP_UNDERLAY6 = 2097152;

const int WGL_SWAP_UNDERLAY7 = 4194304;

const int WGL_SWAP_UNDERLAY8 = 8388608;

const int WGL_SWAP_UNDERLAY9 = 16777216;

const int WGL_SWAP_UNDERLAY10 = 33554432;

const int WGL_SWAP_UNDERLAY11 = 67108864;

const int WGL_SWAP_UNDERLAY12 = 134217728;

const int WGL_SWAP_UNDERLAY13 = 268435456;

const int WGL_SWAP_UNDERLAY14 = 536870912;

const int WGL_SWAP_UNDERLAY15 = 1073741824;

const int WGL_SWAPMULTIPLE_MAX = 16;

const int DIFFERENCE = 11;

const int SB_HORZ = 0;

const int SB_VERT = 1;

const int SB_CTL = 2;

const int SB_BOTH = 3;

const int SB_LINEUP = 0;

const int SB_LINELEFT = 0;

const int SB_LINEDOWN = 1;

const int SB_LINERIGHT = 1;

const int SB_PAGEUP = 2;

const int SB_PAGELEFT = 2;

const int SB_PAGEDOWN = 3;

const int SB_PAGERIGHT = 3;

const int SB_THUMBPOSITION = 4;

const int SB_THUMBTRACK = 5;

const int SB_TOP = 6;

const int SB_LEFT = 6;

const int SB_BOTTOM = 7;

const int SB_RIGHT = 7;

const int SB_ENDSCROLL = 8;

const int SW_HIDE = 0;

const int SW_SHOWNORMAL = 1;

const int SW_NORMAL = 1;

const int SW_SHOWMINIMIZED = 2;

const int SW_SHOWMAXIMIZED = 3;

const int SW_MAXIMIZE = 3;

const int SW_SHOWNOACTIVATE = 4;

const int SW_SHOW = 5;

const int SW_MINIMIZE = 6;

const int SW_SHOWMINNOACTIVE = 7;

const int SW_SHOWNA = 8;

const int SW_RESTORE = 9;

const int SW_SHOWDEFAULT = 10;

const int SW_FORCEMINIMIZE = 11;

const int SW_MAX = 11;

const int HIDE_WINDOW = 0;

const int SHOW_OPENWINDOW = 1;

const int SHOW_ICONWINDOW = 2;

const int SHOW_FULLSCREEN = 3;

const int SHOW_OPENNOACTIVATE = 4;

const int SW_PARENTCLOSING = 1;

const int SW_OTHERZOOM = 2;

const int SW_PARENTOPENING = 3;

const int SW_OTHERUNZOOM = 4;

const int AW_HOR_POSITIVE = 1;

const int AW_HOR_NEGATIVE = 2;

const int AW_VER_POSITIVE = 4;

const int AW_VER_NEGATIVE = 8;

const int AW_CENTER = 16;

const int AW_HIDE = 65536;

const int AW_ACTIVATE = 131072;

const int AW_SLIDE = 262144;

const int AW_BLEND = 524288;

const int KF_EXTENDED = 256;

const int KF_DLGMODE = 2048;

const int KF_MENUMODE = 4096;

const int KF_ALTDOWN = 8192;

const int KF_REPEAT = 16384;

const int KF_UP = 32768;

const int VK_LBUTTON = 1;

const int VK_RBUTTON = 2;

const int VK_CANCEL = 3;

const int VK_MBUTTON = 4;

const int VK_XBUTTON1 = 5;

const int VK_XBUTTON2 = 6;

const int VK_BACK = 8;

const int VK_TAB = 9;

const int VK_CLEAR = 12;

const int VK_RETURN = 13;

const int VK_SHIFT = 16;

const int VK_CONTROL = 17;

const int VK_MENU = 18;

const int VK_PAUSE = 19;

const int VK_CAPITAL = 20;

const int VK_KANA = 21;

const int VK_HANGEUL = 21;

const int VK_HANGUL = 21;

const int VK_IME_ON = 22;

const int VK_JUNJA = 23;

const int VK_FINAL = 24;

const int VK_HANJA = 25;

const int VK_KANJI = 25;

const int VK_IME_OFF = 26;

const int VK_ESCAPE = 27;

const int VK_CONVERT = 28;

const int VK_NONCONVERT = 29;

const int VK_ACCEPT = 30;

const int VK_MODECHANGE = 31;

const int VK_SPACE = 32;

const int VK_PRIOR = 33;

const int VK_NEXT = 34;

const int VK_END = 35;

const int VK_HOME = 36;

const int VK_LEFT = 37;

const int VK_UP = 38;

const int VK_RIGHT = 39;

const int VK_DOWN = 40;

const int VK_SELECT = 41;

const int VK_PRINT = 42;

const int VK_EXECUTE = 43;

const int VK_SNAPSHOT = 44;

const int VK_INSERT = 45;

const int VK_DELETE = 46;

const int VK_HELP = 47;

const int VK_LWIN = 91;

const int VK_RWIN = 92;

const int VK_APPS = 93;

const int VK_SLEEP = 95;

const int VK_NUMPAD0 = 96;

const int VK_NUMPAD1 = 97;

const int VK_NUMPAD2 = 98;

const int VK_NUMPAD3 = 99;

const int VK_NUMPAD4 = 100;

const int VK_NUMPAD5 = 101;

const int VK_NUMPAD6 = 102;

const int VK_NUMPAD7 = 103;

const int VK_NUMPAD8 = 104;

const int VK_NUMPAD9 = 105;

const int VK_MULTIPLY = 106;

const int VK_ADD = 107;

const int VK_SEPARATOR = 108;

const int VK_SUBTRACT = 109;

const int VK_DECIMAL = 110;

const int VK_DIVIDE = 111;

const int VK_F1 = 112;

const int VK_F2 = 113;

const int VK_F3 = 114;

const int VK_F4 = 115;

const int VK_F5 = 116;

const int VK_F6 = 117;

const int VK_F7 = 118;

const int VK_F8 = 119;

const int VK_F9 = 120;

const int VK_F10 = 121;

const int VK_F11 = 122;

const int VK_F12 = 123;

const int VK_F13 = 124;

const int VK_F14 = 125;

const int VK_F15 = 126;

const int VK_F16 = 127;

const int VK_F17 = 128;

const int VK_F18 = 129;

const int VK_F19 = 130;

const int VK_F20 = 131;

const int VK_F21 = 132;

const int VK_F22 = 133;

const int VK_F23 = 134;

const int VK_F24 = 135;

const int VK_NAVIGATION_VIEW = 136;

const int VK_NAVIGATION_MENU = 137;

const int VK_NAVIGATION_UP = 138;

const int VK_NAVIGATION_DOWN = 139;

const int VK_NAVIGATION_LEFT = 140;

const int VK_NAVIGATION_RIGHT = 141;

const int VK_NAVIGATION_ACCEPT = 142;

const int VK_NAVIGATION_CANCEL = 143;

const int VK_NUMLOCK = 144;

const int VK_SCROLL = 145;

const int VK_OEM_NEC_EQUAL = 146;

const int VK_OEM_FJ_JISHO = 146;

const int VK_OEM_FJ_MASSHOU = 147;

const int VK_OEM_FJ_TOUROKU = 148;

const int VK_OEM_FJ_LOYA = 149;

const int VK_OEM_FJ_ROYA = 150;

const int VK_LSHIFT = 160;

const int VK_RSHIFT = 161;

const int VK_LCONTROL = 162;

const int VK_RCONTROL = 163;

const int VK_LMENU = 164;

const int VK_RMENU = 165;

const int VK_BROWSER_BACK = 166;

const int VK_BROWSER_FORWARD = 167;

const int VK_BROWSER_REFRESH = 168;

const int VK_BROWSER_STOP = 169;

const int VK_BROWSER_SEARCH = 170;

const int VK_BROWSER_FAVORITES = 171;

const int VK_BROWSER_HOME = 172;

const int VK_VOLUME_MUTE = 173;

const int VK_VOLUME_DOWN = 174;

const int VK_VOLUME_UP = 175;

const int VK_MEDIA_NEXT_TRACK = 176;

const int VK_MEDIA_PREV_TRACK = 177;

const int VK_MEDIA_STOP = 178;

const int VK_MEDIA_PLAY_PAUSE = 179;

const int VK_LAUNCH_MAIL = 180;

const int VK_LAUNCH_MEDIA_SELECT = 181;

const int VK_LAUNCH_APP1 = 182;

const int VK_LAUNCH_APP2 = 183;

const int VK_OEM_1 = 186;

const int VK_OEM_PLUS = 187;

const int VK_OEM_COMMA = 188;

const int VK_OEM_MINUS = 189;

const int VK_OEM_PERIOD = 190;

const int VK_OEM_2 = 191;

const int VK_OEM_3 = 192;

const int VK_GAMEPAD_A = 195;

const int VK_GAMEPAD_B = 196;

const int VK_GAMEPAD_X = 197;

const int VK_GAMEPAD_Y = 198;

const int VK_GAMEPAD_RIGHT_SHOULDER = 199;

const int VK_GAMEPAD_LEFT_SHOULDER = 200;

const int VK_GAMEPAD_LEFT_TRIGGER = 201;

const int VK_GAMEPAD_RIGHT_TRIGGER = 202;

const int VK_GAMEPAD_DPAD_UP = 203;

const int VK_GAMEPAD_DPAD_DOWN = 204;

const int VK_GAMEPAD_DPAD_LEFT = 205;

const int VK_GAMEPAD_DPAD_RIGHT = 206;

const int VK_GAMEPAD_MENU = 207;

const int VK_GAMEPAD_VIEW = 208;

const int VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;

const int VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;

const int VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;

const int VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;

const int VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;

const int VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;

const int VK_OEM_4 = 219;

const int VK_OEM_5 = 220;

const int VK_OEM_6 = 221;

const int VK_OEM_7 = 222;

const int VK_OEM_8 = 223;

const int VK_OEM_AX = 225;

const int VK_OEM_102 = 226;

const int VK_ICO_HELP = 227;

const int VK_ICO_00 = 228;

const int VK_PROCESSKEY = 229;

const int VK_ICO_CLEAR = 230;

const int VK_PACKET = 231;

const int VK_OEM_RESET = 233;

const int VK_OEM_JUMP = 234;

const int VK_OEM_PA1 = 235;

const int VK_OEM_PA2 = 236;

const int VK_OEM_PA3 = 237;

const int VK_OEM_WSCTRL = 238;

const int VK_OEM_CUSEL = 239;

const int VK_OEM_ATTN = 240;

const int VK_OEM_FINISH = 241;

const int VK_OEM_COPY = 242;

const int VK_OEM_AUTO = 243;

const int VK_OEM_ENLW = 244;

const int VK_OEM_BACKTAB = 245;

const int VK_ATTN = 246;

const int VK_CRSEL = 247;

const int VK_EXSEL = 248;

const int VK_EREOF = 249;

const int VK_PLAY = 250;

const int VK_ZOOM = 251;

const int VK_NONAME = 252;

const int VK_PA1 = 253;

const int VK_OEM_CLEAR = 254;

const int WH_MIN = -1;

const int WH_MSGFILTER = -1;

const int WH_JOURNALRECORD = 0;

const int WH_JOURNALPLAYBACK = 1;

const int WH_KEYBOARD = 2;

const int WH_GETMESSAGE = 3;

const int WH_CALLWNDPROC = 4;

const int WH_CBT = 5;

const int WH_SYSMSGFILTER = 6;

const int WH_MOUSE = 7;

const int WH_DEBUG = 9;

const int WH_SHELL = 10;

const int WH_FOREGROUNDIDLE = 11;

const int WH_CALLWNDPROCRET = 12;

const int WH_KEYBOARD_LL = 13;

const int WH_MOUSE_LL = 14;

const int WH_MAX = 14;

const int WH_MINHOOK = -1;

const int WH_MAXHOOK = 14;

const int HC_ACTION = 0;

const int HC_GETNEXT = 1;

const int HC_SKIP = 2;

const int HC_NOREMOVE = 3;

const int HC_NOREM = 3;

const int HC_SYSMODALON = 4;

const int HC_SYSMODALOFF = 5;

const int HCBT_MOVESIZE = 0;

const int HCBT_MINMAX = 1;

const int HCBT_QS = 2;

const int HCBT_CREATEWND = 3;

const int HCBT_DESTROYWND = 4;

const int HCBT_ACTIVATE = 5;

const int HCBT_CLICKSKIPPED = 6;

const int HCBT_KEYSKIPPED = 7;

const int HCBT_SYSCOMMAND = 8;

const int HCBT_SETFOCUS = 9;

const int WTS_CONSOLE_CONNECT = 1;

const int WTS_CONSOLE_DISCONNECT = 2;

const int WTS_REMOTE_CONNECT = 3;

const int WTS_REMOTE_DISCONNECT = 4;

const int WTS_SESSION_LOGON = 5;

const int WTS_SESSION_LOGOFF = 6;

const int WTS_SESSION_LOCK = 7;

const int WTS_SESSION_UNLOCK = 8;

const int WTS_SESSION_REMOTE_CONTROL = 9;

const int WTS_SESSION_CREATE = 10;

const int WTS_SESSION_TERMINATE = 11;

const int MSGF_DIALOGBOX = 0;

const int MSGF_MESSAGEBOX = 1;

const int MSGF_MENU = 2;

const int MSGF_SCROLLBAR = 5;

const int MSGF_NEXTWINDOW = 6;

const int MSGF_MAX = 8;

const int MSGF_USER = 4096;

const int HSHELL_WINDOWCREATED = 1;

const int HSHELL_WINDOWDESTROYED = 2;

const int HSHELL_ACTIVATESHELLWINDOW = 3;

const int HSHELL_WINDOWACTIVATED = 4;

const int HSHELL_GETMINRECT = 5;

const int HSHELL_REDRAW = 6;

const int HSHELL_TASKMAN = 7;

const int HSHELL_LANGUAGE = 8;

const int HSHELL_SYSMENU = 9;

const int HSHELL_ENDTASK = 10;

const int HSHELL_ACCESSIBILITYSTATE = 11;

const int HSHELL_APPCOMMAND = 12;

const int HSHELL_WINDOWREPLACED = 13;

const int HSHELL_WINDOWREPLACING = 14;

const int HSHELL_MONITORCHANGED = 16;

const int HSHELL_HIGHBIT = 32768;

const int HSHELL_FLASH = 32774;

const int HSHELL_RUDEAPPACTIVATED = 32772;

const int APPCOMMAND_BROWSER_BACKWARD = 1;

const int APPCOMMAND_BROWSER_FORWARD = 2;

const int APPCOMMAND_BROWSER_REFRESH = 3;

const int APPCOMMAND_BROWSER_STOP = 4;

const int APPCOMMAND_BROWSER_SEARCH = 5;

const int APPCOMMAND_BROWSER_FAVORITES = 6;

const int APPCOMMAND_BROWSER_HOME = 7;

const int APPCOMMAND_VOLUME_MUTE = 8;

const int APPCOMMAND_VOLUME_DOWN = 9;

const int APPCOMMAND_VOLUME_UP = 10;

const int APPCOMMAND_MEDIA_NEXTTRACK = 11;

const int APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;

const int APPCOMMAND_MEDIA_STOP = 13;

const int APPCOMMAND_MEDIA_PLAY_PAUSE = 14;

const int APPCOMMAND_LAUNCH_MAIL = 15;

const int APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;

const int APPCOMMAND_LAUNCH_APP1 = 17;

const int APPCOMMAND_LAUNCH_APP2 = 18;

const int APPCOMMAND_BASS_DOWN = 19;

const int APPCOMMAND_BASS_BOOST = 20;

const int APPCOMMAND_BASS_UP = 21;

const int APPCOMMAND_TREBLE_DOWN = 22;

const int APPCOMMAND_TREBLE_UP = 23;

const int APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;

const int APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;

const int APPCOMMAND_MICROPHONE_VOLUME_UP = 26;

const int APPCOMMAND_HELP = 27;

const int APPCOMMAND_FIND = 28;

const int APPCOMMAND_NEW = 29;

const int APPCOMMAND_OPEN = 30;

const int APPCOMMAND_CLOSE = 31;

const int APPCOMMAND_SAVE = 32;

const int APPCOMMAND_PRINT = 33;

const int APPCOMMAND_UNDO = 34;

const int APPCOMMAND_REDO = 35;

const int APPCOMMAND_COPY = 36;

const int APPCOMMAND_CUT = 37;

const int APPCOMMAND_PASTE = 38;

const int APPCOMMAND_REPLY_TO_MAIL = 39;

const int APPCOMMAND_FORWARD_MAIL = 40;

const int APPCOMMAND_SEND_MAIL = 41;

const int APPCOMMAND_SPELL_CHECK = 42;

const int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;

const int APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;

const int APPCOMMAND_CORRECTION_LIST = 45;

const int APPCOMMAND_MEDIA_PLAY = 46;

const int APPCOMMAND_MEDIA_PAUSE = 47;

const int APPCOMMAND_MEDIA_RECORD = 48;

const int APPCOMMAND_MEDIA_FAST_FORWARD = 49;

const int APPCOMMAND_MEDIA_REWIND = 50;

const int APPCOMMAND_MEDIA_CHANNEL_UP = 51;

const int APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;

const int APPCOMMAND_DELETE = 53;

const int APPCOMMAND_DWM_FLIP3D = 54;

const int FAPPCOMMAND_MOUSE = 32768;

const int FAPPCOMMAND_KEY = 0;

const int FAPPCOMMAND_OEM = 4096;

const int FAPPCOMMAND_MASK = 61440;

const int LLKHF_EXTENDED = 1;

const int LLKHF_INJECTED = 16;

const int LLKHF_ALTDOWN = 32;

const int LLKHF_UP = 128;

const int LLKHF_LOWER_IL_INJECTED = 2;

const int LLMHF_INJECTED = 1;

const int LLMHF_LOWER_IL_INJECTED = 2;

const int HKL_PREV = 0;

const int HKL_NEXT = 1;

const int KLF_ACTIVATE = 1;

const int KLF_SUBSTITUTE_OK = 2;

const int KLF_REORDER = 8;

const int KLF_REPLACELANG = 16;

const int KLF_NOTELLSHELL = 128;

const int KLF_SETFORPROCESS = 256;

const int KLF_SHIFTLOCK = 65536;

const int KLF_RESET = 1073741824;

const int INPUTLANGCHANGE_SYSCHARSET = 1;

const int INPUTLANGCHANGE_FORWARD = 2;

const int INPUTLANGCHANGE_BACKWARD = 4;

const int KL_NAMELENGTH = 9;

const int GMMP_USE_DISPLAY_POINTS = 1;

const int GMMP_USE_HIGH_RESOLUTION_POINTS = 2;

const int DESKTOP_READOBJECTS = 1;

const int DESKTOP_CREATEWINDOW = 2;

const int DESKTOP_CREATEMENU = 4;

const int DESKTOP_HOOKCONTROL = 8;

const int DESKTOP_JOURNALRECORD = 16;

const int DESKTOP_JOURNALPLAYBACK = 32;

const int DESKTOP_ENUMERATE = 64;

const int DESKTOP_WRITEOBJECTS = 128;

const int DESKTOP_SWITCHDESKTOP = 256;

const int DF_ALLOWOTHERACCOUNTHOOK = 1;

const int WINSTA_ENUMDESKTOPS = 1;

const int WINSTA_READATTRIBUTES = 2;

const int WINSTA_ACCESSCLIPBOARD = 4;

const int WINSTA_CREATEDESKTOP = 8;

const int WINSTA_WRITEATTRIBUTES = 16;

const int WINSTA_ACCESSGLOBALATOMS = 32;

const int WINSTA_EXITWINDOWS = 64;

const int WINSTA_ENUMERATE = 256;

const int WINSTA_READSCREEN = 512;

const int WINSTA_ALL_ACCESS = 895;

const int CWF_CREATE_ONLY = 1;

const int WSF_VISIBLE = 1;

const int UOI_FLAGS = 1;

const int UOI_NAME = 2;

const int UOI_TYPE = 3;

const int UOI_USER_SID = 4;

const int UOI_HEAPSIZE = 5;

const int UOI_IO = 6;

const int UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7;

const int GWL_STYLE = -16;

const int GWL_EXSTYLE = -20;

const int GWL_ID = -12;

const int GWLP_WNDPROC = -4;

const int GWLP_HINSTANCE = -6;

const int GWLP_HWNDPARENT = -8;

const int GWLP_USERDATA = -21;

const int GWLP_ID = -12;

const int GCL_CBWNDEXTRA = -18;

const int GCL_CBCLSEXTRA = -20;

const int GCL_STYLE = -26;

const int GCW_ATOM = -32;

const int GCLP_MENUNAME = -8;

const int GCLP_HBRBACKGROUND = -10;

const int GCLP_HCURSOR = -12;

const int GCLP_HICON = -14;

const int GCLP_HMODULE = -16;

const int GCLP_WNDPROC = -24;

const int GCLP_HICONSM = -34;

const int WM_NULL = 0;

const int WM_CREATE = 1;

const int WM_DESTROY = 2;

const int WM_MOVE = 3;

const int WM_SIZE = 5;

const int WM_ACTIVATE = 6;

const int WA_INACTIVE = 0;

const int WA_ACTIVE = 1;

const int WA_CLICKACTIVE = 2;

const int WM_SETFOCUS = 7;

const int WM_KILLFOCUS = 8;

const int WM_ENABLE = 10;

const int WM_SETREDRAW = 11;

const int WM_SETTEXT = 12;

const int WM_GETTEXT = 13;

const int WM_GETTEXTLENGTH = 14;

const int WM_PAINT = 15;

const int WM_CLOSE = 16;

const int WM_QUERYENDSESSION = 17;

const int WM_QUERYOPEN = 19;

const int WM_ENDSESSION = 22;

const int WM_QUIT = 18;

const int WM_ERASEBKGND = 20;

const int WM_SYSCOLORCHANGE = 21;

const int WM_SHOWWINDOW = 24;

const int WM_WININICHANGE = 26;

const int WM_SETTINGCHANGE = 26;

const int WM_DEVMODECHANGE = 27;

const int WM_ACTIVATEAPP = 28;

const int WM_FONTCHANGE = 29;

const int WM_TIMECHANGE = 30;

const int WM_CANCELMODE = 31;

const int WM_SETCURSOR = 32;

const int WM_MOUSEACTIVATE = 33;

const int WM_CHILDACTIVATE = 34;

const int WM_QUEUESYNC = 35;

const int WM_GETMINMAXINFO = 36;

const int WM_PAINTICON = 38;

const int WM_ICONERASEBKGND = 39;

const int WM_NEXTDLGCTL = 40;

const int WM_SPOOLERSTATUS = 42;

const int WM_DRAWITEM = 43;

const int WM_MEASUREITEM = 44;

const int WM_DELETEITEM = 45;

const int WM_VKEYTOITEM = 46;

const int WM_CHARTOITEM = 47;

const int WM_SETFONT = 48;

const int WM_GETFONT = 49;

const int WM_SETHOTKEY = 50;

const int WM_GETHOTKEY = 51;

const int WM_QUERYDRAGICON = 55;

const int WM_COMPAREITEM = 57;

const int WM_GETOBJECT = 61;

const int WM_COMPACTING = 65;

const int WM_COMMNOTIFY = 68;

const int WM_WINDOWPOSCHANGING = 70;

const int WM_WINDOWPOSCHANGED = 71;

const int WM_POWER = 72;

const int PWR_OK = 1;

const int PWR_FAIL = -1;

const int PWR_SUSPENDREQUEST = 1;

const int PWR_SUSPENDRESUME = 2;

const int PWR_CRITICALRESUME = 3;

const int WM_COPYDATA = 74;

const int WM_CANCELJOURNAL = 75;

const int WM_NOTIFY = 78;

const int WM_INPUTLANGCHANGEREQUEST = 80;

const int WM_INPUTLANGCHANGE = 81;

const int WM_TCARD = 82;

const int WM_HELP = 83;

const int WM_USERCHANGED = 84;

const int WM_NOTIFYFORMAT = 85;

const int NFR_ANSI = 1;

const int NFR_UNICODE = 2;

const int NF_QUERY = 3;

const int NF_REQUERY = 4;

const int WM_CONTEXTMENU = 123;

const int WM_STYLECHANGING = 124;

const int WM_STYLECHANGED = 125;

const int WM_DISPLAYCHANGE = 126;

const int WM_GETICON = 127;

const int WM_SETICON = 128;

const int WM_NCCREATE = 129;

const int WM_NCDESTROY = 130;

const int WM_NCCALCSIZE = 131;

const int WM_NCHITTEST = 132;

const int WM_NCPAINT = 133;

const int WM_NCACTIVATE = 134;

const int WM_GETDLGCODE = 135;

const int WM_SYNCPAINT = 136;

const int WM_NCMOUSEMOVE = 160;

const int WM_NCLBUTTONDOWN = 161;

const int WM_NCLBUTTONUP = 162;

const int WM_NCLBUTTONDBLCLK = 163;

const int WM_NCRBUTTONDOWN = 164;

const int WM_NCRBUTTONUP = 165;

const int WM_NCRBUTTONDBLCLK = 166;

const int WM_NCMBUTTONDOWN = 167;

const int WM_NCMBUTTONUP = 168;

const int WM_NCMBUTTONDBLCLK = 169;

const int WM_NCXBUTTONDOWN = 171;

const int WM_NCXBUTTONUP = 172;

const int WM_NCXBUTTONDBLCLK = 173;

const int WM_INPUT_DEVICE_CHANGE = 254;

const int WM_INPUT = 255;

const int WM_KEYFIRST = 256;

const int WM_KEYDOWN = 256;

const int WM_KEYUP = 257;

const int WM_CHAR = 258;

const int WM_DEADCHAR = 259;

const int WM_SYSKEYDOWN = 260;

const int WM_SYSKEYUP = 261;

const int WM_SYSCHAR = 262;

const int WM_SYSDEADCHAR = 263;

const int WM_UNICHAR = 265;

const int WM_KEYLAST = 265;

const int UNICODE_NOCHAR = 65535;

const int WM_IME_STARTCOMPOSITION = 269;

const int WM_IME_ENDCOMPOSITION = 270;

const int WM_IME_COMPOSITION = 271;

const int WM_IME_KEYLAST = 271;

const int WM_INITDIALOG = 272;

const int WM_COMMAND = 273;

const int WM_SYSCOMMAND = 274;

const int WM_TIMER = 275;

const int WM_HSCROLL = 276;

const int WM_VSCROLL = 277;

const int WM_INITMENU = 278;

const int WM_INITMENUPOPUP = 279;

const int WM_GESTURE = 281;

const int WM_GESTURENOTIFY = 282;

const int WM_MENUSELECT = 287;

const int WM_MENUCHAR = 288;

const int WM_ENTERIDLE = 289;

const int WM_MENURBUTTONUP = 290;

const int WM_MENUDRAG = 291;

const int WM_MENUGETOBJECT = 292;

const int WM_UNINITMENUPOPUP = 293;

const int WM_MENUCOMMAND = 294;

const int WM_CHANGEUISTATE = 295;

const int WM_UPDATEUISTATE = 296;

const int WM_QUERYUISTATE = 297;

const int UIS_SET = 1;

const int UIS_CLEAR = 2;

const int UIS_INITIALIZE = 3;

const int UISF_HIDEFOCUS = 1;

const int UISF_HIDEACCEL = 2;

const int UISF_ACTIVE = 4;

const int WM_CTLCOLORMSGBOX = 306;

const int WM_CTLCOLOREDIT = 307;

const int WM_CTLCOLORLISTBOX = 308;

const int WM_CTLCOLORBTN = 309;

const int WM_CTLCOLORDLG = 310;

const int WM_CTLCOLORSCROLLBAR = 311;

const int WM_CTLCOLORSTATIC = 312;

const int MN_GETHMENU = 481;

const int WM_MOUSEFIRST = 512;

const int WM_MOUSEMOVE = 512;

const int WM_LBUTTONDOWN = 513;

const int WM_LBUTTONUP = 514;

const int WM_LBUTTONDBLCLK = 515;

const int WM_RBUTTONDOWN = 516;

const int WM_RBUTTONUP = 517;

const int WM_RBUTTONDBLCLK = 518;

const int WM_MBUTTONDOWN = 519;

const int WM_MBUTTONUP = 520;

const int WM_MBUTTONDBLCLK = 521;

const int WM_MOUSEWHEEL = 522;

const int WM_XBUTTONDOWN = 523;

const int WM_XBUTTONUP = 524;

const int WM_XBUTTONDBLCLK = 525;

const int WM_MOUSEHWHEEL = 526;

const int WM_MOUSELAST = 526;

const int WHEEL_DELTA = 120;

const int WHEEL_PAGESCROLL = 4294967295;

const int XBUTTON1 = 1;

const int XBUTTON2 = 2;

const int WM_PARENTNOTIFY = 528;

const int WM_ENTERMENULOOP = 529;

const int WM_EXITMENULOOP = 530;

const int WM_NEXTMENU = 531;

const int WM_SIZING = 532;

const int WM_CAPTURECHANGED = 533;

const int WM_MOVING = 534;

const int WM_POWERBROADCAST = 536;

const int PBT_APMQUERYSUSPEND = 0;

const int PBT_APMQUERYSTANDBY = 1;

const int PBT_APMQUERYSUSPENDFAILED = 2;

const int PBT_APMQUERYSTANDBYFAILED = 3;

const int PBT_APMSUSPEND = 4;

const int PBT_APMSTANDBY = 5;

const int PBT_APMRESUMECRITICAL = 6;

const int PBT_APMRESUMESUSPEND = 7;

const int PBT_APMRESUMESTANDBY = 8;

const int PBTF_APMRESUMEFROMFAILURE = 1;

const int PBT_APMBATTERYLOW = 9;

const int PBT_APMPOWERSTATUSCHANGE = 10;

const int PBT_APMOEMEVENT = 11;

const int PBT_APMRESUMEAUTOMATIC = 18;

const int PBT_POWERSETTINGCHANGE = 32787;

const int WM_DEVICECHANGE = 537;

const int WM_MDICREATE = 544;

const int WM_MDIDESTROY = 545;

const int WM_MDIACTIVATE = 546;

const int WM_MDIRESTORE = 547;

const int WM_MDINEXT = 548;

const int WM_MDIMAXIMIZE = 549;

const int WM_MDITILE = 550;

const int WM_MDICASCADE = 551;

const int WM_MDIICONARRANGE = 552;

const int WM_MDIGETACTIVE = 553;

const int WM_MDISETMENU = 560;

const int WM_ENTERSIZEMOVE = 561;

const int WM_EXITSIZEMOVE = 562;

const int WM_DROPFILES = 563;

const int WM_MDIREFRESHMENU = 564;

const int WM_POINTERDEVICECHANGE = 568;

const int WM_POINTERDEVICEINRANGE = 569;

const int WM_POINTERDEVICEOUTOFRANGE = 570;

const int WM_TOUCH = 576;

const int WM_NCPOINTERUPDATE = 577;

const int WM_NCPOINTERDOWN = 578;

const int WM_NCPOINTERUP = 579;

const int WM_POINTERUPDATE = 581;

const int WM_POINTERDOWN = 582;

const int WM_POINTERUP = 583;

const int WM_POINTERENTER = 585;

const int WM_POINTERLEAVE = 586;

const int WM_POINTERACTIVATE = 587;

const int WM_POINTERCAPTURECHANGED = 588;

const int WM_TOUCHHITTESTING = 589;

const int WM_POINTERWHEEL = 590;

const int WM_POINTERHWHEEL = 591;

const int DM_POINTERHITTEST = 592;

const int WM_POINTERROUTEDTO = 593;

const int WM_POINTERROUTEDAWAY = 594;

const int WM_POINTERROUTEDRELEASED = 595;

const int WM_IME_SETCONTEXT = 641;

const int WM_IME_NOTIFY = 642;

const int WM_IME_CONTROL = 643;

const int WM_IME_COMPOSITIONFULL = 644;

const int WM_IME_SELECT = 645;

const int WM_IME_CHAR = 646;

const int WM_IME_REQUEST = 648;

const int WM_IME_KEYDOWN = 656;

const int WM_IME_KEYUP = 657;

const int WM_MOUSEHOVER = 673;

const int WM_MOUSELEAVE = 675;

const int WM_NCMOUSEHOVER = 672;

const int WM_NCMOUSELEAVE = 674;

const int WM_WTSSESSION_CHANGE = 689;

const int WM_TABLET_FIRST = 704;

const int WM_TABLET_LAST = 735;

const int WM_DPICHANGED = 736;

const int WM_DPICHANGED_BEFOREPARENT = 738;

const int WM_DPICHANGED_AFTERPARENT = 739;

const int WM_GETDPISCALEDSIZE = 740;

const int WM_CUT = 768;

const int WM_COPY = 769;

const int WM_PASTE = 770;

const int WM_CLEAR = 771;

const int WM_UNDO = 772;

const int WM_RENDERFORMAT = 773;

const int WM_RENDERALLFORMATS = 774;

const int WM_DESTROYCLIPBOARD = 775;

const int WM_DRAWCLIPBOARD = 776;

const int WM_PAINTCLIPBOARD = 777;

const int WM_VSCROLLCLIPBOARD = 778;

const int WM_SIZECLIPBOARD = 779;

const int WM_ASKCBFORMATNAME = 780;

const int WM_CHANGECBCHAIN = 781;

const int WM_HSCROLLCLIPBOARD = 782;

const int WM_QUERYNEWPALETTE = 783;

const int WM_PALETTEISCHANGING = 784;

const int WM_PALETTECHANGED = 785;

const int WM_HOTKEY = 786;

const int WM_PRINT = 791;

const int WM_PRINTCLIENT = 792;

const int WM_APPCOMMAND = 793;

const int WM_THEMECHANGED = 794;

const int WM_CLIPBOARDUPDATE = 797;

const int WM_DWMCOMPOSITIONCHANGED = 798;

const int WM_DWMNCRENDERINGCHANGED = 799;

const int WM_DWMCOLORIZATIONCOLORCHANGED = 800;

const int WM_DWMWINDOWMAXIMIZEDCHANGE = 801;

const int WM_DWMSENDICONICTHUMBNAIL = 803;

const int WM_DWMSENDICONICLIVEPREVIEWBITMAP = 806;

const int WM_GETTITLEBARINFOEX = 831;

const int WM_HANDHELDFIRST = 856;

const int WM_HANDHELDLAST = 863;

const int WM_AFXFIRST = 864;

const int WM_AFXLAST = 895;

const int WM_PENWINFIRST = 896;

const int WM_PENWINLAST = 911;

const int WM_APP = 32768;

const int WM_USER = 1024;

const int WMSZ_LEFT = 1;

const int WMSZ_RIGHT = 2;

const int WMSZ_TOP = 3;

const int WMSZ_TOPLEFT = 4;

const int WMSZ_TOPRIGHT = 5;

const int WMSZ_BOTTOM = 6;

const int WMSZ_BOTTOMLEFT = 7;

const int WMSZ_BOTTOMRIGHT = 8;

const int HTERROR = -2;

const int HTTRANSPARENT = -1;

const int HTNOWHERE = 0;

const int HTCLIENT = 1;

const int HTCAPTION = 2;

const int HTSYSMENU = 3;

const int HTGROWBOX = 4;

const int HTSIZE = 4;

const int HTMENU = 5;

const int HTHSCROLL = 6;

const int HTVSCROLL = 7;

const int HTMINBUTTON = 8;

const int HTMAXBUTTON = 9;

const int HTLEFT = 10;

const int HTRIGHT = 11;

const int HTTOP = 12;

const int HTTOPLEFT = 13;

const int HTTOPRIGHT = 14;

const int HTBOTTOM = 15;

const int HTBOTTOMLEFT = 16;

const int HTBOTTOMRIGHT = 17;

const int HTBORDER = 18;

const int HTREDUCE = 8;

const int HTZOOM = 9;

const int HTSIZEFIRST = 10;

const int HTSIZELAST = 17;

const int HTOBJECT = 19;

const int HTCLOSE = 20;

const int HTHELP = 21;

const int SMTO_NORMAL = 0;

const int SMTO_BLOCK = 1;

const int SMTO_ABORTIFHUNG = 2;

const int SMTO_NOTIMEOUTIFNOTHUNG = 8;

const int SMTO_ERRORONEXIT = 32;

const int MA_ACTIVATE = 1;

const int MA_ACTIVATEANDEAT = 2;

const int MA_NOACTIVATE = 3;

const int MA_NOACTIVATEANDEAT = 4;

const int ICON_SMALL = 0;

const int ICON_BIG = 1;

const int ICON_SMALL2 = 2;

const int SIZE_RESTORED = 0;

const int SIZE_MINIMIZED = 1;

const int SIZE_MAXIMIZED = 2;

const int SIZE_MAXSHOW = 3;

const int SIZE_MAXHIDE = 4;

const int SIZENORMAL = 0;

const int SIZEICONIC = 1;

const int SIZEFULLSCREEN = 2;

const int SIZEZOOMSHOW = 3;

const int SIZEZOOMHIDE = 4;

const int WVR_ALIGNTOP = 16;

const int WVR_ALIGNLEFT = 32;

const int WVR_ALIGNBOTTOM = 64;

const int WVR_ALIGNRIGHT = 128;

const int WVR_HREDRAW = 256;

const int WVR_VREDRAW = 512;

const int WVR_REDRAW = 768;

const int WVR_VALIDRECTS = 1024;

const int MK_LBUTTON = 1;

const int MK_RBUTTON = 2;

const int MK_SHIFT = 4;

const int MK_CONTROL = 8;

const int MK_MBUTTON = 16;

const int MK_XBUTTON1 = 32;

const int MK_XBUTTON2 = 64;

const int TME_HOVER = 1;

const int TME_LEAVE = 2;

const int TME_NONCLIENT = 16;

const int TME_QUERY = 1073741824;

const int TME_CANCEL = 2147483648;

const int HOVER_DEFAULT = 4294967295;

const int WS_OVERLAPPED = 0;

const int WS_POPUP = 2147483648;

const int WS_CHILD = 1073741824;

const int WS_MINIMIZE = 536870912;

const int WS_VISIBLE = 268435456;

const int WS_DISABLED = 134217728;

const int WS_CLIPSIBLINGS = 67108864;

const int WS_CLIPCHILDREN = 33554432;

const int WS_MAXIMIZE = 16777216;

const int WS_CAPTION = 12582912;

const int WS_BORDER = 8388608;

const int WS_DLGFRAME = 4194304;

const int WS_VSCROLL = 2097152;

const int WS_HSCROLL = 1048576;

const int WS_SYSMENU = 524288;

const int WS_THICKFRAME = 262144;

const int WS_GROUP = 131072;

const int WS_TABSTOP = 65536;

const int WS_MINIMIZEBOX = 131072;

const int WS_MAXIMIZEBOX = 65536;

const int WS_TILED = 0;

const int WS_ICONIC = 536870912;

const int WS_SIZEBOX = 262144;

const int WS_TILEDWINDOW = 13565952;

const int WS_OVERLAPPEDWINDOW = 13565952;

const int WS_POPUPWINDOW = 2156396544;

const int WS_CHILDWINDOW = 1073741824;

const int WS_EX_DLGMODALFRAME = 1;

const int WS_EX_NOPARENTNOTIFY = 4;

const int WS_EX_TOPMOST = 8;

const int WS_EX_ACCEPTFILES = 16;

const int WS_EX_TRANSPARENT = 32;

const int WS_EX_MDICHILD = 64;

const int WS_EX_TOOLWINDOW = 128;

const int WS_EX_WINDOWEDGE = 256;

const int WS_EX_CLIENTEDGE = 512;

const int WS_EX_CONTEXTHELP = 1024;

const int WS_EX_RIGHT = 4096;

const int WS_EX_LEFT = 0;

const int WS_EX_RTLREADING = 8192;

const int WS_EX_LTRREADING = 0;

const int WS_EX_LEFTSCROLLBAR = 16384;

const int WS_EX_RIGHTSCROLLBAR = 0;

const int WS_EX_CONTROLPARENT = 65536;

const int WS_EX_STATICEDGE = 131072;

const int WS_EX_APPWINDOW = 262144;

const int WS_EX_OVERLAPPEDWINDOW = 768;

const int WS_EX_PALETTEWINDOW = 392;

const int WS_EX_LAYERED = 524288;

const int WS_EX_NOINHERITLAYOUT = 1048576;

const int WS_EX_NOREDIRECTIONBITMAP = 2097152;

const int WS_EX_LAYOUTRTL = 4194304;

const int WS_EX_COMPOSITED = 33554432;

const int WS_EX_NOACTIVATE = 134217728;

const int CS_VREDRAW = 1;

const int CS_HREDRAW = 2;

const int CS_DBLCLKS = 8;

const int CS_OWNDC = 32;

const int CS_CLASSDC = 64;

const int CS_PARENTDC = 128;

const int CS_NOCLOSE = 512;

const int CS_SAVEBITS = 2048;

const int CS_BYTEALIGNCLIENT = 4096;

const int CS_BYTEALIGNWINDOW = 8192;

const int CS_GLOBALCLASS = 16384;

const int CS_IME = 65536;

const int CS_DROPSHADOW = 131072;

const int PRF_CHECKVISIBLE = 1;

const int PRF_NONCLIENT = 2;

const int PRF_CLIENT = 4;

const int PRF_ERASEBKGND = 8;

const int PRF_CHILDREN = 16;

const int PRF_OWNED = 32;

const int BDR_RAISEDOUTER = 1;

const int BDR_SUNKENOUTER = 2;

const int BDR_RAISEDINNER = 4;

const int BDR_SUNKENINNER = 8;

const int BDR_OUTER = 3;

const int BDR_INNER = 12;

const int BDR_RAISED = 5;

const int BDR_SUNKEN = 10;

const int EDGE_RAISED = 5;

const int EDGE_SUNKEN = 10;

const int EDGE_ETCHED = 6;

const int EDGE_BUMP = 9;

const int BF_LEFT = 1;

const int BF_TOP = 2;

const int BF_RIGHT = 4;

const int BF_BOTTOM = 8;

const int BF_TOPLEFT = 3;

const int BF_TOPRIGHT = 6;

const int BF_BOTTOMLEFT = 9;

const int BF_BOTTOMRIGHT = 12;

const int BF_RECT = 15;

const int BF_DIAGONAL = 16;

const int BF_DIAGONAL_ENDTOPRIGHT = 22;

const int BF_DIAGONAL_ENDTOPLEFT = 19;

const int BF_DIAGONAL_ENDBOTTOMLEFT = 25;

const int BF_DIAGONAL_ENDBOTTOMRIGHT = 28;

const int BF_MIDDLE = 2048;

const int BF_SOFT = 4096;

const int BF_ADJUST = 8192;

const int BF_FLAT = 16384;

const int BF_MONO = 32768;

const int DFC_CAPTION = 1;

const int DFC_MENU = 2;

const int DFC_SCROLL = 3;

const int DFC_BUTTON = 4;

const int DFC_POPUPMENU = 5;

const int DFCS_CAPTIONCLOSE = 0;

const int DFCS_CAPTIONMIN = 1;

const int DFCS_CAPTIONMAX = 2;

const int DFCS_CAPTIONRESTORE = 3;

const int DFCS_CAPTIONHELP = 4;

const int DFCS_MENUARROW = 0;

const int DFCS_MENUCHECK = 1;

const int DFCS_MENUBULLET = 2;

const int DFCS_MENUARROWRIGHT = 4;

const int DFCS_SCROLLUP = 0;

const int DFCS_SCROLLDOWN = 1;

const int DFCS_SCROLLLEFT = 2;

const int DFCS_SCROLLRIGHT = 3;

const int DFCS_SCROLLCOMBOBOX = 5;

const int DFCS_SCROLLSIZEGRIP = 8;

const int DFCS_SCROLLSIZEGRIPRIGHT = 16;

const int DFCS_BUTTONCHECK = 0;

const int DFCS_BUTTONRADIOIMAGE = 1;

const int DFCS_BUTTONRADIOMASK = 2;

const int DFCS_BUTTONRADIO = 4;

const int DFCS_BUTTON3STATE = 8;

const int DFCS_BUTTONPUSH = 16;

const int DFCS_INACTIVE = 256;

const int DFCS_PUSHED = 512;

const int DFCS_CHECKED = 1024;

const int DFCS_TRANSPARENT = 2048;

const int DFCS_HOT = 4096;

const int DFCS_ADJUSTRECT = 8192;

const int DFCS_FLAT = 16384;

const int DFCS_MONO = 32768;

const int DC_ACTIVE = 1;

const int DC_SMALLCAP = 2;

const int DC_ICON = 4;

const int DC_TEXT = 8;

const int DC_INBUTTON = 16;

const int DC_GRADIENT = 32;

const int DC_BUTTONS = 4096;

const int IDANI_OPEN = 1;

const int IDANI_CAPTION = 3;

const int CF_TEXT = 1;

const int CF_BITMAP = 2;

const int CF_METAFILEPICT = 3;

const int CF_SYLK = 4;

const int CF_DIF = 5;

const int CF_TIFF = 6;

const int CF_OEMTEXT = 7;

const int CF_DIB = 8;

const int CF_PALETTE = 9;

const int CF_PENDATA = 10;

const int CF_RIFF = 11;

const int CF_WAVE = 12;

const int CF_UNICODETEXT = 13;

const int CF_ENHMETAFILE = 14;

const int CF_HDROP = 15;

const int CF_LOCALE = 16;

const int CF_DIBV5 = 17;

const int CF_MAX = 18;

const int CF_OWNERDISPLAY = 128;

const int CF_DSPTEXT = 129;

const int CF_DSPBITMAP = 130;

const int CF_DSPMETAFILEPICT = 131;

const int CF_DSPENHMETAFILE = 142;

const int CF_PRIVATEFIRST = 512;

const int CF_PRIVATELAST = 767;

const int CF_GDIOBJFIRST = 768;

const int CF_GDIOBJLAST = 1023;

const int FVIRTKEY = 1;

const int FNOINVERT = 2;

const int FSHIFT = 4;

const int FCONTROL = 8;

const int FALT = 16;

const int WPF_SETMINPOSITION = 1;

const int WPF_RESTORETOMAXIMIZED = 2;

const int WPF_ASYNCWINDOWPLACEMENT = 4;

const int ODT_MENU = 1;

const int ODT_LISTBOX = 2;

const int ODT_COMBOBOX = 3;

const int ODT_BUTTON = 4;

const int ODT_STATIC = 5;

const int ODA_DRAWENTIRE = 1;

const int ODA_SELECT = 2;

const int ODA_FOCUS = 4;

const int ODS_SELECTED = 1;

const int ODS_GRAYED = 2;

const int ODS_DISABLED = 4;

const int ODS_CHECKED = 8;

const int ODS_FOCUS = 16;

const int ODS_DEFAULT = 32;

const int ODS_COMBOBOXEDIT = 4096;

const int ODS_HOTLIGHT = 64;

const int ODS_INACTIVE = 128;

const int ODS_NOACCEL = 256;

const int ODS_NOFOCUSRECT = 512;

const int PM_NOREMOVE = 0;

const int PM_REMOVE = 1;

const int PM_NOYIELD = 2;

const int PM_QS_INPUT = 470220800;

const int PM_QS_POSTMESSAGE = 9961472;

const int PM_QS_PAINT = 2097152;

const int PM_QS_SENDMESSAGE = 4194304;

const int MOD_ALT = 1;

const int MOD_CONTROL = 2;

const int MOD_SHIFT = 4;

const int MOD_WIN = 8;

const int MOD_NOREPEAT = 16384;

const int IDHOT_SNAPWINDOW = -1;

const int IDHOT_SNAPDESKTOP = -2;

const int ENDSESSION_CLOSEAPP = 1;

const int ENDSESSION_CRITICAL = 1073741824;

const int ENDSESSION_LOGOFF = 2147483648;

const int EWX_LOGOFF = 0;

const int EWX_SHUTDOWN = 1;

const int EWX_REBOOT = 2;

const int EWX_FORCE = 4;

const int EWX_POWEROFF = 8;

const int EWX_FORCEIFHUNG = 16;

const int EWX_QUICKRESOLVE = 32;

const int EWX_RESTARTAPPS = 64;

const int EWX_HYBRID_SHUTDOWN = 4194304;

const int EWX_BOOTOPTIONS = 16777216;

const int EWX_ARSO = 67108864;

const int EWX_CHECK_SAFE_FOR_SERVER = 134217728;

const int EWX_SYSTEM_INITIATED = 268435456;

const int BSM_ALLCOMPONENTS = 0;

const int BSM_VXDS = 1;

const int BSM_NETDRIVER = 2;

const int BSM_INSTALLABLEDRIVERS = 4;

const int BSM_APPLICATIONS = 8;

const int BSM_ALLDESKTOPS = 16;

const int BSF_QUERY = 1;

const int BSF_IGNORECURRENTTASK = 2;

const int BSF_FLUSHDISK = 4;

const int BSF_NOHANG = 8;

const int BSF_POSTMESSAGE = 16;

const int BSF_FORCEIFHUNG = 32;

const int BSF_NOTIMEOUTIFNOTHUNG = 64;

const int BSF_ALLOWSFW = 128;

const int BSF_SENDNOTIFYMESSAGE = 256;

const int BSF_RETURNHDESK = 512;

const int BSF_LUID = 1024;

const int BROADCAST_QUERY_DENY = 1112363332;

const int DEVICE_NOTIFY_WINDOW_HANDLE = 0;

const int DEVICE_NOTIFY_SERVICE_HANDLE = 1;

const int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 4;

const int ISMEX_NOSEND = 0;

const int ISMEX_SEND = 1;

const int ISMEX_NOTIFY = 2;

const int ISMEX_CALLBACK = 4;

const int ISMEX_REPLIED = 8;

const int CW_USEDEFAULT = -2147483648;

const int PW_CLIENTONLY = 1;

const int PW_RENDERFULLCONTENT = 2;

const int LWA_COLORKEY = 1;

const int LWA_ALPHA = 2;

const int ULW_COLORKEY = 1;

const int ULW_ALPHA = 2;

const int ULW_OPAQUE = 4;

const int ULW_EX_NORESIZE = 8;

const int FLASHW_STOP = 0;

const int FLASHW_CAPTION = 1;

const int FLASHW_TRAY = 2;

const int FLASHW_ALL = 3;

const int FLASHW_TIMER = 4;

const int FLASHW_TIMERNOFG = 12;

const int WDA_NONE = 0;

const int WDA_MONITOR = 1;

const int WDA_EXCLUDEFROMCAPTURE = 17;

const int SWP_NOSIZE = 1;

const int SWP_NOMOVE = 2;

const int SWP_NOZORDER = 4;

const int SWP_NOREDRAW = 8;

const int SWP_NOACTIVATE = 16;

const int SWP_FRAMECHANGED = 32;

const int SWP_SHOWWINDOW = 64;

const int SWP_HIDEWINDOW = 128;

const int SWP_NOCOPYBITS = 256;

const int SWP_NOOWNERZORDER = 512;

const int SWP_NOSENDCHANGING = 1024;

const int SWP_DRAWFRAME = 32;

const int SWP_NOREPOSITION = 512;

const int SWP_DEFERERASE = 8192;

const int SWP_ASYNCWINDOWPOS = 16384;

const int DLGWINDOWEXTRA = 30;

const int KEYEVENTF_EXTENDEDKEY = 1;

const int KEYEVENTF_KEYUP = 2;

const int KEYEVENTF_UNICODE = 4;

const int KEYEVENTF_SCANCODE = 8;

const int MOUSEEVENTF_MOVE = 1;

const int MOUSEEVENTF_LEFTDOWN = 2;

const int MOUSEEVENTF_LEFTUP = 4;

const int MOUSEEVENTF_RIGHTDOWN = 8;

const int MOUSEEVENTF_RIGHTUP = 16;

const int MOUSEEVENTF_MIDDLEDOWN = 32;

const int MOUSEEVENTF_MIDDLEUP = 64;

const int MOUSEEVENTF_XDOWN = 128;

const int MOUSEEVENTF_XUP = 256;

const int MOUSEEVENTF_WHEEL = 2048;

const int MOUSEEVENTF_HWHEEL = 4096;

const int MOUSEEVENTF_MOVE_NOCOALESCE = 8192;

const int MOUSEEVENTF_VIRTUALDESK = 16384;

const int MOUSEEVENTF_ABSOLUTE = 32768;

const int INPUT_MOUSE = 0;

const int INPUT_KEYBOARD = 1;

const int INPUT_HARDWARE = 2;

const int TOUCHEVENTF_MOVE = 1;

const int TOUCHEVENTF_DOWN = 2;

const int TOUCHEVENTF_UP = 4;

const int TOUCHEVENTF_INRANGE = 8;

const int TOUCHEVENTF_PRIMARY = 16;

const int TOUCHEVENTF_NOCOALESCE = 32;

const int TOUCHEVENTF_PEN = 64;

const int TOUCHEVENTF_PALM = 128;

const int TOUCHINPUTMASKF_TIMEFROMSYSTEM = 1;

const int TOUCHINPUTMASKF_EXTRAINFO = 2;

const int TOUCHINPUTMASKF_CONTACTAREA = 4;

const int TWF_FINETOUCH = 1;

const int TWF_WANTPALM = 2;

const int POINTER_FLAG_NONE = 0;

const int POINTER_FLAG_NEW = 1;

const int POINTER_FLAG_INRANGE = 2;

const int POINTER_FLAG_INCONTACT = 4;

const int POINTER_FLAG_FIRSTBUTTON = 16;

const int POINTER_FLAG_SECONDBUTTON = 32;

const int POINTER_FLAG_THIRDBUTTON = 64;

const int POINTER_FLAG_FOURTHBUTTON = 128;

const int POINTER_FLAG_FIFTHBUTTON = 256;

const int POINTER_FLAG_PRIMARY = 8192;

const int POINTER_FLAG_CONFIDENCE = 16384;

const int POINTER_FLAG_CANCELED = 32768;

const int POINTER_FLAG_DOWN = 65536;

const int POINTER_FLAG_UPDATE = 131072;

const int POINTER_FLAG_UP = 262144;

const int POINTER_FLAG_WHEEL = 524288;

const int POINTER_FLAG_HWHEEL = 1048576;

const int POINTER_FLAG_CAPTURECHANGED = 2097152;

const int POINTER_FLAG_HASTRANSFORM = 4194304;

const int POINTER_MOD_SHIFT = 4;

const int POINTER_MOD_CTRL = 8;

const int TOUCH_FLAG_NONE = 0;

const int TOUCH_MASK_NONE = 0;

const int TOUCH_MASK_CONTACTAREA = 1;

const int TOUCH_MASK_ORIENTATION = 2;

const int TOUCH_MASK_PRESSURE = 4;

const int PEN_FLAG_NONE = 0;

const int PEN_FLAG_BARREL = 1;

const int PEN_FLAG_INVERTED = 2;

const int PEN_FLAG_ERASER = 4;

const int PEN_MASK_NONE = 0;

const int PEN_MASK_PRESSURE = 1;

const int PEN_MASK_ROTATION = 2;

const int PEN_MASK_TILT_X = 4;

const int PEN_MASK_TILT_Y = 8;

const int POINTER_MESSAGE_FLAG_NEW = 1;

const int POINTER_MESSAGE_FLAG_INRANGE = 2;

const int POINTER_MESSAGE_FLAG_INCONTACT = 4;

const int POINTER_MESSAGE_FLAG_FIRSTBUTTON = 16;

const int POINTER_MESSAGE_FLAG_SECONDBUTTON = 32;

const int POINTER_MESSAGE_FLAG_THIRDBUTTON = 64;

const int POINTER_MESSAGE_FLAG_FOURTHBUTTON = 128;

const int POINTER_MESSAGE_FLAG_FIFTHBUTTON = 256;

const int POINTER_MESSAGE_FLAG_PRIMARY = 8192;

const int POINTER_MESSAGE_FLAG_CONFIDENCE = 16384;

const int POINTER_MESSAGE_FLAG_CANCELED = 32768;

const int PA_ACTIVATE = 1;

const int PA_NOACTIVATE = 3;

const int MAX_TOUCH_COUNT = 256;

const int TOUCH_FEEDBACK_DEFAULT = 1;

const int TOUCH_FEEDBACK_INDIRECT = 2;

const int TOUCH_FEEDBACK_NONE = 3;

const int TOUCH_HIT_TESTING_DEFAULT = 0;

const int TOUCH_HIT_TESTING_CLIENT = 1;

const int TOUCH_HIT_TESTING_NONE = 2;

const int TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0;

const int TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 4095;

const int GWFS_INCLUDE_ANCESTORS = 1;

const int MAPVK_VK_TO_VSC = 0;

const int MAPVK_VSC_TO_VK = 1;

const int MAPVK_VK_TO_CHAR = 2;

const int MAPVK_VSC_TO_VK_EX = 3;

const int MAPVK_VK_TO_VSC_EX = 4;

const int MWMO_WAITALL = 1;

const int MWMO_ALERTABLE = 2;

const int MWMO_INPUTAVAILABLE = 4;

const int QS_KEY = 1;

const int QS_MOUSEMOVE = 2;

const int QS_MOUSEBUTTON = 4;

const int QS_POSTMESSAGE = 8;

const int QS_TIMER = 16;

const int QS_PAINT = 32;

const int QS_SENDMESSAGE = 64;

const int QS_HOTKEY = 128;

const int QS_ALLPOSTMESSAGE = 256;

const int QS_RAWINPUT = 1024;

const int QS_TOUCH = 2048;

const int QS_POINTER = 4096;

const int QS_MOUSE = 6;

const int QS_INPUT = 7175;

const int QS_ALLEVENTS = 7359;

const int QS_ALLINPUT = 7423;

const int USER_TIMER_MAXIMUM = 2147483647;

const int USER_TIMER_MINIMUM = 10;

const int TIMERV_DEFAULT_COALESCING = 0;

const int TIMERV_NO_COALESCING = 4294967295;

const int TIMERV_COALESCING_MIN = 1;

const int TIMERV_COALESCING_MAX = 2147483637;

const int SM_CXSCREEN = 0;

const int SM_CYSCREEN = 1;

const int SM_CXVSCROLL = 2;

const int SM_CYHSCROLL = 3;

const int SM_CYCAPTION = 4;

const int SM_CXBORDER = 5;

const int SM_CYBORDER = 6;

const int SM_CXDLGFRAME = 7;

const int SM_CYDLGFRAME = 8;

const int SM_CYVTHUMB = 9;

const int SM_CXHTHUMB = 10;

const int SM_CXICON = 11;

const int SM_CYICON = 12;

const int SM_CXCURSOR = 13;

const int SM_CYCURSOR = 14;

const int SM_CYMENU = 15;

const int SM_CXFULLSCREEN = 16;

const int SM_CYFULLSCREEN = 17;

const int SM_CYKANJIWINDOW = 18;

const int SM_MOUSEPRESENT = 19;

const int SM_CYVSCROLL = 20;

const int SM_CXHSCROLL = 21;

const int SM_DEBUG = 22;

const int SM_SWAPBUTTON = 23;

const int SM_RESERVED1 = 24;

const int SM_RESERVED2 = 25;

const int SM_RESERVED3 = 26;

const int SM_RESERVED4 = 27;

const int SM_CXMIN = 28;

const int SM_CYMIN = 29;

const int SM_CXSIZE = 30;

const int SM_CYSIZE = 31;

const int SM_CXFRAME = 32;

const int SM_CYFRAME = 33;

const int SM_CXMINTRACK = 34;

const int SM_CYMINTRACK = 35;

const int SM_CXDOUBLECLK = 36;

const int SM_CYDOUBLECLK = 37;

const int SM_CXICONSPACING = 38;

const int SM_CYICONSPACING = 39;

const int SM_MENUDROPALIGNMENT = 40;

const int SM_PENWINDOWS = 41;

const int SM_DBCSENABLED = 42;

const int SM_CMOUSEBUTTONS = 43;

const int SM_CXFIXEDFRAME = 7;

const int SM_CYFIXEDFRAME = 8;

const int SM_CXSIZEFRAME = 32;

const int SM_CYSIZEFRAME = 33;

const int SM_SECURE = 44;

const int SM_CXEDGE = 45;

const int SM_CYEDGE = 46;

const int SM_CXMINSPACING = 47;

const int SM_CYMINSPACING = 48;

const int SM_CXSMICON = 49;

const int SM_CYSMICON = 50;

const int SM_CYSMCAPTION = 51;

const int SM_CXSMSIZE = 52;

const int SM_CYSMSIZE = 53;

const int SM_CXMENUSIZE = 54;

const int SM_CYMENUSIZE = 55;

const int SM_ARRANGE = 56;

const int SM_CXMINIMIZED = 57;

const int SM_CYMINIMIZED = 58;

const int SM_CXMAXTRACK = 59;

const int SM_CYMAXTRACK = 60;

const int SM_CXMAXIMIZED = 61;

const int SM_CYMAXIMIZED = 62;

const int SM_NETWORK = 63;

const int SM_CLEANBOOT = 67;

const int SM_CXDRAG = 68;

const int SM_CYDRAG = 69;

const int SM_SHOWSOUNDS = 70;

const int SM_CXMENUCHECK = 71;

const int SM_CYMENUCHECK = 72;

const int SM_SLOWMACHINE = 73;

const int SM_MIDEASTENABLED = 74;

const int SM_MOUSEWHEELPRESENT = 75;

const int SM_XVIRTUALSCREEN = 76;

const int SM_YVIRTUALSCREEN = 77;

const int SM_CXVIRTUALSCREEN = 78;

const int SM_CYVIRTUALSCREEN = 79;

const int SM_CMONITORS = 80;

const int SM_SAMEDISPLAYFORMAT = 81;

const int SM_IMMENABLED = 82;

const int SM_CXFOCUSBORDER = 83;

const int SM_CYFOCUSBORDER = 84;

const int SM_TABLETPC = 86;

const int SM_MEDIACENTER = 87;

const int SM_STARTER = 88;

const int SM_SERVERR2 = 89;

const int SM_MOUSEHORIZONTALWHEELPRESENT = 91;

const int SM_CXPADDEDBORDER = 92;

const int SM_DIGITIZER = 94;

const int SM_MAXIMUMTOUCHES = 95;

const int SM_CMETRICS = 97;

const int SM_REMOTESESSION = 4096;

const int SM_SHUTTINGDOWN = 8192;

const int SM_REMOTECONTROL = 8193;

const int SM_CARETBLINKINGENABLED = 8194;

const int SM_CONVERTIBLESLATEMODE = 8195;

const int SM_SYSTEMDOCKED = 8196;

const int PMB_ACTIVE = 1;

const int MNC_IGNORE = 0;

const int MNC_CLOSE = 1;

const int MNC_EXECUTE = 2;

const int MNC_SELECT = 3;

const int MNS_NOCHECK = 2147483648;

const int MNS_MODELESS = 1073741824;

const int MNS_DRAGDROP = 536870912;

const int MNS_AUTODISMISS = 268435456;

const int MNS_NOTIFYBYPOS = 134217728;

const int MNS_CHECKORBMP = 67108864;

const int MIM_MAXHEIGHT = 1;

const int MIM_BACKGROUND = 2;

const int MIM_HELPID = 4;

const int MIM_MENUDATA = 8;

const int MIM_STYLE = 16;

const int MIM_APPLYTOSUBMENUS = 2147483648;

const int MND_CONTINUE = 0;

const int MND_ENDMENU = 1;

const int MNGOF_TOPGAP = 1;

const int MNGOF_BOTTOMGAP = 2;

const int MNGO_NOINTERFACE = 0;

const int MNGO_NOERROR = 1;

const int MIIM_STATE = 1;

const int MIIM_ID = 2;

const int MIIM_SUBMENU = 4;

const int MIIM_CHECKMARKS = 8;

const int MIIM_TYPE = 16;

const int MIIM_DATA = 32;

const int MIIM_STRING = 64;

const int MIIM_BITMAP = 128;

const int MIIM_FTYPE = 256;

const int GMDI_USEDISABLED = 1;

const int GMDI_GOINTOPOPUPS = 2;

const int TPM_LEFTBUTTON = 0;

const int TPM_RIGHTBUTTON = 2;

const int TPM_LEFTALIGN = 0;

const int TPM_CENTERALIGN = 4;

const int TPM_RIGHTALIGN = 8;

const int TPM_TOPALIGN = 0;

const int TPM_VCENTERALIGN = 16;

const int TPM_BOTTOMALIGN = 32;

const int TPM_HORIZONTAL = 0;

const int TPM_VERTICAL = 64;

const int TPM_NONOTIFY = 128;

const int TPM_RETURNCMD = 256;

const int TPM_RECURSE = 1;

const int TPM_HORPOSANIMATION = 1024;

const int TPM_HORNEGANIMATION = 2048;

const int TPM_VERPOSANIMATION = 4096;

const int TPM_VERNEGANIMATION = 8192;

const int TPM_NOANIMATION = 16384;

const int TPM_LAYOUTRTL = 32768;

const int TPM_WORKAREA = 65536;

const int DOF_EXECUTABLE = 32769;

const int DOF_DOCUMENT = 32770;

const int DOF_DIRECTORY = 32771;

const int DOF_MULTIPLE = 32772;

const int DOF_PROGMAN = 1;

const int DOF_SHELLDATA = 2;

const int DO_DROPFILE = 1162627398;

const int DO_PRINTFILE = 1414419024;

const int DT_TOP = 0;

const int DT_LEFT = 0;

const int DT_CENTER = 1;

const int DT_RIGHT = 2;

const int DT_VCENTER = 4;

const int DT_BOTTOM = 8;

const int DT_WORDBREAK = 16;

const int DT_SINGLELINE = 32;

const int DT_EXPANDTABS = 64;

const int DT_TABSTOP = 128;

const int DT_NOCLIP = 256;

const int DT_EXTERNALLEADING = 512;

const int DT_CALCRECT = 1024;

const int DT_NOPREFIX = 2048;

const int DT_INTERNAL = 4096;

const int DT_EDITCONTROL = 8192;

const int DT_PATH_ELLIPSIS = 16384;

const int DT_END_ELLIPSIS = 32768;

const int DT_MODIFYSTRING = 65536;

const int DT_RTLREADING = 131072;

const int DT_WORD_ELLIPSIS = 262144;

const int DT_NOFULLWIDTHCHARBREAK = 524288;

const int DT_HIDEPREFIX = 1048576;

const int DT_PREFIXONLY = 2097152;

const int DST_COMPLEX = 0;

const int DST_TEXT = 1;

const int DST_PREFIXTEXT = 2;

const int DST_ICON = 3;

const int DST_BITMAP = 4;

const int DSS_NORMAL = 0;

const int DSS_UNION = 16;

const int DSS_DISABLED = 32;

const int DSS_MONO = 128;

const int DSS_HIDEPREFIX = 512;

const int DSS_PREFIXONLY = 1024;

const int DSS_RIGHT = 32768;

const int ASFW_ANY = 4294967295;

const int LSFW_LOCK = 1;

const int LSFW_UNLOCK = 2;

const int DCX_WINDOW = 1;

const int DCX_CACHE = 2;

const int DCX_NORESETATTRS = 4;

const int DCX_CLIPCHILDREN = 8;

const int DCX_CLIPSIBLINGS = 16;

const int DCX_PARENTCLIP = 32;

const int DCX_EXCLUDERGN = 64;

const int DCX_INTERSECTRGN = 128;

const int DCX_EXCLUDEUPDATE = 256;

const int DCX_INTERSECTUPDATE = 512;

const int DCX_LOCKWINDOWUPDATE = 1024;

const int DCX_VALIDATE = 2097152;

const int RDW_INVALIDATE = 1;

const int RDW_INTERNALPAINT = 2;

const int RDW_ERASE = 4;

const int RDW_VALIDATE = 8;

const int RDW_NOINTERNALPAINT = 16;

const int RDW_NOERASE = 32;

const int RDW_NOCHILDREN = 64;

const int RDW_ALLCHILDREN = 128;

const int RDW_UPDATENOW = 256;

const int RDW_ERASENOW = 512;

const int RDW_FRAME = 1024;

const int RDW_NOFRAME = 2048;

const int SW_SCROLLCHILDREN = 1;

const int SW_INVALIDATE = 2;

const int SW_ERASE = 4;

const int SW_SMOOTHSCROLL = 16;

const int ESB_ENABLE_BOTH = 0;

const int ESB_DISABLE_BOTH = 3;

const int ESB_DISABLE_LEFT = 1;

const int ESB_DISABLE_RIGHT = 2;

const int ESB_DISABLE_UP = 1;

const int ESB_DISABLE_DOWN = 2;

const int ESB_DISABLE_LTUP = 1;

const int ESB_DISABLE_RTDN = 2;

const int HELPINFO_WINDOW = 1;

const int HELPINFO_MENUITEM = 2;

const int MB_OK = 0;

const int MB_OKCANCEL = 1;

const int MB_ABORTRETRYIGNORE = 2;

const int MB_YESNOCANCEL = 3;

const int MB_YESNO = 4;

const int MB_RETRYCANCEL = 5;

const int MB_CANCELTRYCONTINUE = 6;

const int MB_ICONHAND = 16;

const int MB_ICONQUESTION = 32;

const int MB_ICONEXCLAMATION = 48;

const int MB_ICONASTERISK = 64;

const int MB_USERICON = 128;

const int MB_ICONWARNING = 48;

const int MB_ICONERROR = 16;

const int MB_ICONINFORMATION = 64;

const int MB_ICONSTOP = 16;

const int MB_DEFBUTTON1 = 0;

const int MB_DEFBUTTON2 = 256;

const int MB_DEFBUTTON3 = 512;

const int MB_DEFBUTTON4 = 768;

const int MB_APPLMODAL = 0;

const int MB_SYSTEMMODAL = 4096;

const int MB_TASKMODAL = 8192;

const int MB_HELP = 16384;

const int MB_NOFOCUS = 32768;

const int MB_SETFOREGROUND = 65536;

const int MB_DEFAULT_DESKTOP_ONLY = 131072;

const int MB_TOPMOST = 262144;

const int MB_RIGHT = 524288;

const int MB_RTLREADING = 1048576;

const int MB_SERVICE_NOTIFICATION = 2097152;

const int MB_SERVICE_NOTIFICATION_NT3X = 262144;

const int MB_TYPEMASK = 15;

const int MB_ICONMASK = 240;

const int MB_DEFMASK = 3840;

const int MB_MODEMASK = 12288;

const int MB_MISCMASK = 49152;

const int CWP_ALL = 0;

const int CWP_SKIPINVISIBLE = 1;

const int CWP_SKIPDISABLED = 2;

const int CWP_SKIPTRANSPARENT = 4;

const int CTLCOLOR_MSGBOX = 0;

const int CTLCOLOR_EDIT = 1;

const int CTLCOLOR_LISTBOX = 2;

const int CTLCOLOR_BTN = 3;

const int CTLCOLOR_DLG = 4;

const int CTLCOLOR_SCROLLBAR = 5;

const int CTLCOLOR_STATIC = 6;

const int CTLCOLOR_MAX = 7;

const int COLOR_SCROLLBAR = 0;

const int COLOR_BACKGROUND = 1;

const int COLOR_ACTIVECAPTION = 2;

const int COLOR_INACTIVECAPTION = 3;

const int COLOR_MENU = 4;

const int COLOR_WINDOW = 5;

const int COLOR_WINDOWFRAME = 6;

const int COLOR_MENUTEXT = 7;

const int COLOR_WINDOWTEXT = 8;

const int COLOR_CAPTIONTEXT = 9;

const int COLOR_ACTIVEBORDER = 10;

const int COLOR_INACTIVEBORDER = 11;

const int COLOR_APPWORKSPACE = 12;

const int COLOR_HIGHLIGHT = 13;

const int COLOR_HIGHLIGHTTEXT = 14;

const int COLOR_BTNFACE = 15;

const int COLOR_BTNSHADOW = 16;

const int COLOR_GRAYTEXT = 17;

const int COLOR_BTNTEXT = 18;

const int COLOR_INACTIVECAPTIONTEXT = 19;

const int COLOR_BTNHIGHLIGHT = 20;

const int COLOR_3DDKSHADOW = 21;

const int COLOR_3DLIGHT = 22;

const int COLOR_INFOTEXT = 23;

const int COLOR_INFOBK = 24;

const int COLOR_HOTLIGHT = 26;

const int COLOR_GRADIENTACTIVECAPTION = 27;

const int COLOR_GRADIENTINACTIVECAPTION = 28;

const int COLOR_MENUHILIGHT = 29;

const int COLOR_MENUBAR = 30;

const int COLOR_DESKTOP = 1;

const int COLOR_3DFACE = 15;

const int COLOR_3DSHADOW = 16;

const int COLOR_3DHIGHLIGHT = 20;

const int COLOR_3DHILIGHT = 20;

const int COLOR_BTNHILIGHT = 20;

const int GW_HWNDFIRST = 0;

const int GW_HWNDLAST = 1;

const int GW_HWNDNEXT = 2;

const int GW_HWNDPREV = 3;

const int GW_OWNER = 4;

const int GW_CHILD = 5;

const int GW_ENABLEDPOPUP = 6;

const int GW_MAX = 6;

const int MF_INSERT = 0;

const int MF_CHANGE = 128;

const int MF_APPEND = 256;

const int MF_DELETE = 512;

const int MF_REMOVE = 4096;

const int MF_BYCOMMAND = 0;

const int MF_BYPOSITION = 1024;

const int MF_SEPARATOR = 2048;

const int MF_ENABLED = 0;

const int MF_GRAYED = 1;

const int MF_DISABLED = 2;

const int MF_UNCHECKED = 0;

const int MF_CHECKED = 8;

const int MF_USECHECKBITMAPS = 512;

const int MF_STRING = 0;

const int MF_BITMAP = 4;

const int MF_OWNERDRAW = 256;

const int MF_POPUP = 16;

const int MF_MENUBARBREAK = 32;

const int MF_MENUBREAK = 64;

const int MF_UNHILITE = 0;

const int MF_HILITE = 128;

const int MF_DEFAULT = 4096;

const int MF_SYSMENU = 8192;

const int MF_HELP = 16384;

const int MF_RIGHTJUSTIFY = 16384;

const int MF_MOUSESELECT = 32768;

const int MF_END = 128;

const int MFT_STRING = 0;

const int MFT_BITMAP = 4;

const int MFT_MENUBARBREAK = 32;

const int MFT_MENUBREAK = 64;

const int MFT_OWNERDRAW = 256;

const int MFT_RADIOCHECK = 512;

const int MFT_SEPARATOR = 2048;

const int MFT_RIGHTORDER = 8192;

const int MFT_RIGHTJUSTIFY = 16384;

const int MFS_GRAYED = 3;

const int MFS_DISABLED = 3;

const int MFS_CHECKED = 8;

const int MFS_HILITE = 128;

const int MFS_ENABLED = 0;

const int MFS_UNCHECKED = 0;

const int MFS_UNHILITE = 0;

const int MFS_DEFAULT = 4096;

const int SC_SIZE = 61440;

const int SC_MOVE = 61456;

const int SC_MINIMIZE = 61472;

const int SC_MAXIMIZE = 61488;

const int SC_NEXTWINDOW = 61504;

const int SC_PREVWINDOW = 61520;

const int SC_CLOSE = 61536;

const int SC_VSCROLL = 61552;

const int SC_HSCROLL = 61568;

const int SC_MOUSEMENU = 61584;

const int SC_KEYMENU = 61696;

const int SC_ARRANGE = 61712;

const int SC_RESTORE = 61728;

const int SC_TASKLIST = 61744;

const int SC_SCREENSAVE = 61760;

const int SC_HOTKEY = 61776;

const int SC_DEFAULT = 61792;

const int SC_MONITORPOWER = 61808;

const int SC_CONTEXTHELP = 61824;

const int SC_SEPARATOR = 61455;

const int SCF_ISSECURE = 1;

const int SC_ICON = 61472;

const int SC_ZOOM = 61488;

const int CURSOR_CREATION_SCALING_NONE = 1;

const int CURSOR_CREATION_SCALING_DEFAULT = 2;

const int IMAGE_BITMAP = 0;

const int IMAGE_ICON = 1;

const int IMAGE_CURSOR = 2;

const int IMAGE_ENHMETAFILE = 3;

const int LR_DEFAULTCOLOR = 0;

const int LR_MONOCHROME = 1;

const int LR_COLOR = 2;

const int LR_COPYRETURNORG = 4;

const int LR_COPYDELETEORG = 8;

const int LR_LOADFROMFILE = 16;

const int LR_LOADTRANSPARENT = 32;

const int LR_DEFAULTSIZE = 64;

const int LR_VGACOLOR = 128;

const int LR_LOADMAP3DCOLORS = 4096;

const int LR_CREATEDIBSECTION = 8192;

const int LR_COPYFROMRESOURCE = 16384;

const int LR_SHARED = 32768;

const int DI_MASK = 1;

const int DI_IMAGE = 2;

const int DI_NORMAL = 3;

const int DI_COMPAT = 4;

const int DI_DEFAULTSIZE = 8;

const int DI_NOMIRROR = 16;

const int RES_ICON = 1;

const int RES_CURSOR = 2;

const int ORD_LANGDRIVER = 1;

const int IDOK = 1;

const int IDCANCEL = 2;

const int IDABORT = 3;

const int IDRETRY = 4;

const int IDIGNORE = 5;

const int IDYES = 6;

const int IDNO = 7;

const int IDCLOSE = 8;

const int IDHELP = 9;

const int IDTRYAGAIN = 10;

const int IDCONTINUE = 11;

const int IDTIMEOUT = 32000;

const int ES_LEFT = 0;

const int ES_CENTER = 1;

const int ES_RIGHT = 2;

const int ES_MULTILINE = 4;

const int ES_UPPERCASE = 8;

const int ES_LOWERCASE = 16;

const int ES_PASSWORD = 32;

const int ES_AUTOVSCROLL = 64;

const int ES_AUTOHSCROLL = 128;

const int ES_NOHIDESEL = 256;

const int ES_OEMCONVERT = 1024;

const int ES_READONLY = 2048;

const int ES_WANTRETURN = 4096;

const int ES_NUMBER = 8192;

const int EN_SETFOCUS = 256;

const int EN_KILLFOCUS = 512;

const int EN_CHANGE = 768;

const int EN_UPDATE = 1024;

const int EN_ERRSPACE = 1280;

const int EN_MAXTEXT = 1281;

const int EN_HSCROLL = 1537;

const int EN_VSCROLL = 1538;

const int EN_ALIGN_LTR_EC = 1792;

const int EN_ALIGN_RTL_EC = 1793;

const int EN_BEFORE_PASTE = 2048;

const int EN_AFTER_PASTE = 2049;

const int EC_LEFTMARGIN = 1;

const int EC_RIGHTMARGIN = 2;

const int EC_USEFONTINFO = 65535;

const int EMSIS_COMPOSITIONSTRING = 1;

const int EIMES_GETCOMPSTRATONCE = 1;

const int EIMES_CANCELCOMPSTRINFOCUS = 2;

const int EIMES_COMPLETECOMPSTRKILLFOCUS = 4;

const int EM_GETSEL = 176;

const int EM_SETSEL = 177;

const int EM_GETRECT = 178;

const int EM_SETRECT = 179;

const int EM_SETRECTNP = 180;

const int EM_SCROLL = 181;

const int EM_LINESCROLL = 182;

const int EM_SCROLLCARET = 183;

const int EM_GETMODIFY = 184;

const int EM_SETMODIFY = 185;

const int EM_GETLINECOUNT = 186;

const int EM_LINEINDEX = 187;

const int EM_SETHANDLE = 188;

const int EM_GETHANDLE = 189;

const int EM_GETTHUMB = 190;

const int EM_LINELENGTH = 193;

const int EM_REPLACESEL = 194;

const int EM_GETLINE = 196;

const int EM_LIMITTEXT = 197;

const int EM_CANUNDO = 198;

const int EM_UNDO = 199;

const int EM_FMTLINES = 200;

const int EM_LINEFROMCHAR = 201;

const int EM_SETTABSTOPS = 203;

const int EM_SETPASSWORDCHAR = 204;

const int EM_EMPTYUNDOBUFFER = 205;

const int EM_GETFIRSTVISIBLELINE = 206;

const int EM_SETREADONLY = 207;

const int EM_SETWORDBREAKPROC = 208;

const int EM_GETWORDBREAKPROC = 209;

const int EM_GETPASSWORDCHAR = 210;

const int EM_SETMARGINS = 211;

const int EM_GETMARGINS = 212;

const int EM_SETLIMITTEXT = 197;

const int EM_GETLIMITTEXT = 213;

const int EM_POSFROMCHAR = 214;

const int EM_CHARFROMPOS = 215;

const int EM_SETIMESTATUS = 216;

const int EM_GETIMESTATUS = 217;

const int EM_ENABLEFEATURE = 218;

const int WB_LEFT = 0;

const int WB_RIGHT = 1;

const int WB_ISDELIMITER = 2;

const int BS_PUSHBUTTON = 0;

const int BS_DEFPUSHBUTTON = 1;

const int BS_CHECKBOX = 2;

const int BS_AUTOCHECKBOX = 3;

const int BS_RADIOBUTTON = 4;

const int BS_3STATE = 5;

const int BS_AUTO3STATE = 6;

const int BS_GROUPBOX = 7;

const int BS_USERBUTTON = 8;

const int BS_AUTORADIOBUTTON = 9;

const int BS_PUSHBOX = 10;

const int BS_OWNERDRAW = 11;

const int BS_TYPEMASK = 15;

const int BS_LEFTTEXT = 32;

const int BS_TEXT = 0;

const int BS_ICON = 64;

const int BS_BITMAP = 128;

const int BS_LEFT = 256;

const int BS_RIGHT = 512;

const int BS_CENTER = 768;

const int BS_TOP = 1024;

const int BS_BOTTOM = 2048;

const int BS_VCENTER = 3072;

const int BS_PUSHLIKE = 4096;

const int BS_MULTILINE = 8192;

const int BS_NOTIFY = 16384;

const int BS_FLAT = 32768;

const int BS_RIGHTBUTTON = 32;

const int BN_CLICKED = 0;

const int BN_PAINT = 1;

const int BN_HILITE = 2;

const int BN_UNHILITE = 3;

const int BN_DISABLE = 4;

const int BN_DOUBLECLICKED = 5;

const int BN_PUSHED = 2;

const int BN_UNPUSHED = 3;

const int BN_DBLCLK = 5;

const int BN_SETFOCUS = 6;

const int BN_KILLFOCUS = 7;

const int BM_GETCHECK = 240;

const int BM_SETCHECK = 241;

const int BM_GETSTATE = 242;

const int BM_SETSTATE = 243;

const int BM_SETSTYLE = 244;

const int BM_CLICK = 245;

const int BM_GETIMAGE = 246;

const int BM_SETIMAGE = 247;

const int BM_SETDONTCLICK = 248;

const int BST_UNCHECKED = 0;

const int BST_CHECKED = 1;

const int BST_INDETERMINATE = 2;

const int BST_PUSHED = 4;

const int BST_FOCUS = 8;

const int SS_LEFT = 0;

const int SS_CENTER = 1;

const int SS_RIGHT = 2;

const int SS_ICON = 3;

const int SS_BLACKRECT = 4;

const int SS_GRAYRECT = 5;

const int SS_WHITERECT = 6;

const int SS_BLACKFRAME = 7;

const int SS_GRAYFRAME = 8;

const int SS_WHITEFRAME = 9;

const int SS_USERITEM = 10;

const int SS_SIMPLE = 11;

const int SS_LEFTNOWORDWRAP = 12;

const int SS_OWNERDRAW = 13;

const int SS_BITMAP = 14;

const int SS_ENHMETAFILE = 15;

const int SS_ETCHEDHORZ = 16;

const int SS_ETCHEDVERT = 17;

const int SS_ETCHEDFRAME = 18;

const int SS_TYPEMASK = 31;

const int SS_REALSIZECONTROL = 64;

const int SS_NOPREFIX = 128;

const int SS_NOTIFY = 256;

const int SS_CENTERIMAGE = 512;

const int SS_RIGHTJUST = 1024;

const int SS_REALSIZEIMAGE = 2048;

const int SS_SUNKEN = 4096;

const int SS_EDITCONTROL = 8192;

const int SS_ENDELLIPSIS = 16384;

const int SS_PATHELLIPSIS = 32768;

const int SS_WORDELLIPSIS = 49152;

const int SS_ELLIPSISMASK = 49152;

const int STM_SETICON = 368;

const int STM_GETICON = 369;

const int STM_SETIMAGE = 370;

const int STM_GETIMAGE = 371;

const int STN_CLICKED = 0;

const int STN_DBLCLK = 1;

const int STN_ENABLE = 2;

const int STN_DISABLE = 3;

const int STM_MSGMAX = 372;

const int DWLP_MSGRESULT = 0;

const int DWLP_DLGPROC = 8;

const int DWLP_USER = 16;

const int DDL_READWRITE = 0;

const int DDL_READONLY = 1;

const int DDL_HIDDEN = 2;

const int DDL_SYSTEM = 4;

const int DDL_DIRECTORY = 16;

const int DDL_ARCHIVE = 32;

const int DDL_POSTMSGS = 8192;

const int DDL_DRIVES = 16384;

const int DDL_EXCLUSIVE = 32768;

const int DS_ABSALIGN = 1;

const int DS_SYSMODAL = 2;

const int DS_LOCALEDIT = 32;

const int DS_SETFONT = 64;

const int DS_MODALFRAME = 128;

const int DS_NOIDLEMSG = 256;

const int DS_SETFOREGROUND = 512;

const int DS_3DLOOK = 4;

const int DS_FIXEDSYS = 8;

const int DS_NOFAILCREATE = 16;

const int DS_CONTROL = 1024;

const int DS_CENTER = 2048;

const int DS_CENTERMOUSE = 4096;

const int DS_CONTEXTHELP = 8192;

const int DS_SHELLFONT = 72;

const int DM_GETDEFID = 1024;

const int DM_SETDEFID = 1025;

const int DM_REPOSITION = 1026;

const int DC_HASDEFID = 21323;

const int DLGC_WANTARROWS = 1;

const int DLGC_WANTTAB = 2;

const int DLGC_WANTALLKEYS = 4;

const int DLGC_WANTMESSAGE = 4;

const int DLGC_HASSETSEL = 8;

const int DLGC_DEFPUSHBUTTON = 16;

const int DLGC_UNDEFPUSHBUTTON = 32;

const int DLGC_RADIOBUTTON = 64;

const int DLGC_WANTCHARS = 128;

const int DLGC_STATIC = 256;

const int DLGC_BUTTON = 8192;

const int LB_CTLCODE = 0;

const int LB_OKAY = 0;

const int LB_ERR = -1;

const int LB_ERRSPACE = -2;

const int LBN_ERRSPACE = -2;

const int LBN_SELCHANGE = 1;

const int LBN_DBLCLK = 2;

const int LBN_SELCANCEL = 3;

const int LBN_SETFOCUS = 4;

const int LBN_KILLFOCUS = 5;

const int LB_ADDSTRING = 384;

const int LB_INSERTSTRING = 385;

const int LB_DELETESTRING = 386;

const int LB_SELITEMRANGEEX = 387;

const int LB_RESETCONTENT = 388;

const int LB_SETSEL = 389;

const int LB_SETCURSEL = 390;

const int LB_GETSEL = 391;

const int LB_GETCURSEL = 392;

const int LB_GETTEXT = 393;

const int LB_GETTEXTLEN = 394;

const int LB_GETCOUNT = 395;

const int LB_SELECTSTRING = 396;

const int LB_DIR = 397;

const int LB_GETTOPINDEX = 398;

const int LB_FINDSTRING = 399;

const int LB_GETSELCOUNT = 400;

const int LB_GETSELITEMS = 401;

const int LB_SETTABSTOPS = 402;

const int LB_GETHORIZONTALEXTENT = 403;

const int LB_SETHORIZONTALEXTENT = 404;

const int LB_SETCOLUMNWIDTH = 405;

const int LB_ADDFILE = 406;

const int LB_SETTOPINDEX = 407;

const int LB_GETITEMRECT = 408;

const int LB_GETITEMDATA = 409;

const int LB_SETITEMDATA = 410;

const int LB_SELITEMRANGE = 411;

const int LB_SETANCHORINDEX = 412;

const int LB_GETANCHORINDEX = 413;

const int LB_SETCARETINDEX = 414;

const int LB_GETCARETINDEX = 415;

const int LB_SETITEMHEIGHT = 416;

const int LB_GETITEMHEIGHT = 417;

const int LB_FINDSTRINGEXACT = 418;

const int LB_SETLOCALE = 421;

const int LB_GETLOCALE = 422;

const int LB_SETCOUNT = 423;

const int LB_INITSTORAGE = 424;

const int LB_ITEMFROMPOINT = 425;

const int LB_GETLISTBOXINFO = 434;

const int LB_MSGMAX = 435;

const int LBS_NOTIFY = 1;

const int LBS_SORT = 2;

const int LBS_NOREDRAW = 4;

const int LBS_MULTIPLESEL = 8;

const int LBS_OWNERDRAWFIXED = 16;

const int LBS_OWNERDRAWVARIABLE = 32;

const int LBS_HASSTRINGS = 64;

const int LBS_USETABSTOPS = 128;

const int LBS_NOINTEGRALHEIGHT = 256;

const int LBS_MULTICOLUMN = 512;

const int LBS_WANTKEYBOARDINPUT = 1024;

const int LBS_EXTENDEDSEL = 2048;

const int LBS_DISABLENOSCROLL = 4096;

const int LBS_NODATA = 8192;

const int LBS_NOSEL = 16384;

const int LBS_COMBOBOX = 32768;

const int LBS_STANDARD = 10485763;

const int CB_OKAY = 0;

const int CB_ERR = -1;

const int CB_ERRSPACE = -2;

const int CBN_ERRSPACE = -1;

const int CBN_SELCHANGE = 1;

const int CBN_DBLCLK = 2;

const int CBN_SETFOCUS = 3;

const int CBN_KILLFOCUS = 4;

const int CBN_EDITCHANGE = 5;

const int CBN_EDITUPDATE = 6;

const int CBN_DROPDOWN = 7;

const int CBN_CLOSEUP = 8;

const int CBN_SELENDOK = 9;

const int CBN_SELENDCANCEL = 10;

const int CBS_SIMPLE = 1;

const int CBS_DROPDOWN = 2;

const int CBS_DROPDOWNLIST = 3;

const int CBS_OWNERDRAWFIXED = 16;

const int CBS_OWNERDRAWVARIABLE = 32;

const int CBS_AUTOHSCROLL = 64;

const int CBS_OEMCONVERT = 128;

const int CBS_SORT = 256;

const int CBS_HASSTRINGS = 512;

const int CBS_NOINTEGRALHEIGHT = 1024;

const int CBS_DISABLENOSCROLL = 2048;

const int CBS_UPPERCASE = 8192;

const int CBS_LOWERCASE = 16384;

const int CB_GETEDITSEL = 320;

const int CB_LIMITTEXT = 321;

const int CB_SETEDITSEL = 322;

const int CB_ADDSTRING = 323;

const int CB_DELETESTRING = 324;

const int CB_DIR = 325;

const int CB_GETCOUNT = 326;

const int CB_GETCURSEL = 327;

const int CB_GETLBTEXT = 328;

const int CB_GETLBTEXTLEN = 329;

const int CB_INSERTSTRING = 330;

const int CB_RESETCONTENT = 331;

const int CB_FINDSTRING = 332;

const int CB_SELECTSTRING = 333;

const int CB_SETCURSEL = 334;

const int CB_SHOWDROPDOWN = 335;

const int CB_GETITEMDATA = 336;

const int CB_SETITEMDATA = 337;

const int CB_GETDROPPEDCONTROLRECT = 338;

const int CB_SETITEMHEIGHT = 339;

const int CB_GETITEMHEIGHT = 340;

const int CB_SETEXTENDEDUI = 341;

const int CB_GETEXTENDEDUI = 342;

const int CB_GETDROPPEDSTATE = 343;

const int CB_FINDSTRINGEXACT = 344;

const int CB_SETLOCALE = 345;

const int CB_GETLOCALE = 346;

const int CB_GETTOPINDEX = 347;

const int CB_SETTOPINDEX = 348;

const int CB_GETHORIZONTALEXTENT = 349;

const int CB_SETHORIZONTALEXTENT = 350;

const int CB_GETDROPPEDWIDTH = 351;

const int CB_SETDROPPEDWIDTH = 352;

const int CB_INITSTORAGE = 353;

const int CB_GETCOMBOBOXINFO = 356;

const int CB_MSGMAX = 357;

const int SBS_HORZ = 0;

const int SBS_VERT = 1;

const int SBS_TOPALIGN = 2;

const int SBS_LEFTALIGN = 2;

const int SBS_BOTTOMALIGN = 4;

const int SBS_RIGHTALIGN = 4;

const int SBS_SIZEBOXTOPLEFTALIGN = 2;

const int SBS_SIZEBOXBOTTOMRIGHTALIGN = 4;

const int SBS_SIZEBOX = 8;

const int SBS_SIZEGRIP = 16;

const int SBM_SETPOS = 224;

const int SBM_GETPOS = 225;

const int SBM_SETRANGE = 226;

const int SBM_SETRANGEREDRAW = 230;

const int SBM_GETRANGE = 227;

const int SBM_ENABLE_ARROWS = 228;

const int SBM_SETSCROLLINFO = 233;

const int SBM_GETSCROLLINFO = 234;

const int SBM_GETSCROLLBARINFO = 235;

const int SIF_RANGE = 1;

const int SIF_PAGE = 2;

const int SIF_POS = 4;

const int SIF_DISABLENOSCROLL = 8;

const int SIF_TRACKPOS = 16;

const int SIF_ALL = 23;

const int MDIS_ALLCHILDSTYLES = 1;

const int MDITILE_VERTICAL = 0;

const int MDITILE_HORIZONTAL = 1;

const int MDITILE_SKIPDISABLED = 2;

const int MDITILE_ZORDER = 4;

const int HELP_CONTEXT = 1;

const int HELP_QUIT = 2;

const int HELP_INDEX = 3;

const int HELP_CONTENTS = 3;

const int HELP_HELPONHELP = 4;

const int HELP_SETINDEX = 5;

const int HELP_SETCONTENTS = 5;

const int HELP_CONTEXTPOPUP = 8;

const int HELP_FORCEFILE = 9;

const int HELP_KEY = 257;

const int HELP_COMMAND = 258;

const int HELP_PARTIALKEY = 261;

const int HELP_MULTIKEY = 513;

const int HELP_SETWINPOS = 515;

const int HELP_CONTEXTMENU = 10;

const int HELP_FINDER = 11;

const int HELP_WM_HELP = 12;

const int HELP_SETPOPUP_POS = 13;

const int HELP_TCARD = 32768;

const int HELP_TCARD_DATA = 16;

const int HELP_TCARD_OTHER_CALLER = 17;

const int IDH_NO_HELP = 28440;

const int IDH_MISSING_CONTEXT = 28441;

const int IDH_GENERIC_HELP_BUTTON = 28442;

const int IDH_OK = 28443;

const int IDH_CANCEL = 28444;

const int IDH_HELP = 28445;

const int GR_GDIOBJECTS = 0;

const int GR_USEROBJECTS = 1;

const int GR_GDIOBJECTS_PEAK = 2;

const int GR_USEROBJECTS_PEAK = 4;

const int SPI_GETBEEP = 1;

const int SPI_SETBEEP = 2;

const int SPI_GETMOUSE = 3;

const int SPI_SETMOUSE = 4;

const int SPI_GETBORDER = 5;

const int SPI_SETBORDER = 6;

const int SPI_GETKEYBOARDSPEED = 10;

const int SPI_SETKEYBOARDSPEED = 11;

const int SPI_LANGDRIVER = 12;

const int SPI_ICONHORIZONTALSPACING = 13;

const int SPI_GETSCREENSAVETIMEOUT = 14;

const int SPI_SETSCREENSAVETIMEOUT = 15;

const int SPI_GETSCREENSAVEACTIVE = 16;

const int SPI_SETSCREENSAVEACTIVE = 17;

const int SPI_GETGRIDGRANULARITY = 18;

const int SPI_SETGRIDGRANULARITY = 19;

const int SPI_SETDESKWALLPAPER = 20;

const int SPI_SETDESKPATTERN = 21;

const int SPI_GETKEYBOARDDELAY = 22;

const int SPI_SETKEYBOARDDELAY = 23;

const int SPI_ICONVERTICALSPACING = 24;

const int SPI_GETICONTITLEWRAP = 25;

const int SPI_SETICONTITLEWRAP = 26;

const int SPI_GETMENUDROPALIGNMENT = 27;

const int SPI_SETMENUDROPALIGNMENT = 28;

const int SPI_SETDOUBLECLKWIDTH = 29;

const int SPI_SETDOUBLECLKHEIGHT = 30;

const int SPI_GETICONTITLELOGFONT = 31;

const int SPI_SETDOUBLECLICKTIME = 32;

const int SPI_SETMOUSEBUTTONSWAP = 33;

const int SPI_SETICONTITLELOGFONT = 34;

const int SPI_GETFASTTASKSWITCH = 35;

const int SPI_SETFASTTASKSWITCH = 36;

const int SPI_SETDRAGFULLWINDOWS = 37;

const int SPI_GETDRAGFULLWINDOWS = 38;

const int SPI_GETNONCLIENTMETRICS = 41;

const int SPI_SETNONCLIENTMETRICS = 42;

const int SPI_GETMINIMIZEDMETRICS = 43;

const int SPI_SETMINIMIZEDMETRICS = 44;

const int SPI_GETICONMETRICS = 45;

const int SPI_SETICONMETRICS = 46;

const int SPI_SETWORKAREA = 47;

const int SPI_GETWORKAREA = 48;

const int SPI_SETPENWINDOWS = 49;

const int SPI_GETHIGHCONTRAST = 66;

const int SPI_SETHIGHCONTRAST = 67;

const int SPI_GETKEYBOARDPREF = 68;

const int SPI_SETKEYBOARDPREF = 69;

const int SPI_GETSCREENREADER = 70;

const int SPI_SETSCREENREADER = 71;

const int SPI_GETANIMATION = 72;

const int SPI_SETANIMATION = 73;

const int SPI_GETFONTSMOOTHING = 74;

const int SPI_SETFONTSMOOTHING = 75;

const int SPI_SETDRAGWIDTH = 76;

const int SPI_SETDRAGHEIGHT = 77;

const int SPI_SETHANDHELD = 78;

const int SPI_GETLOWPOWERTIMEOUT = 79;

const int SPI_GETPOWEROFFTIMEOUT = 80;

const int SPI_SETLOWPOWERTIMEOUT = 81;

const int SPI_SETPOWEROFFTIMEOUT = 82;

const int SPI_GETLOWPOWERACTIVE = 83;

const int SPI_GETPOWEROFFACTIVE = 84;

const int SPI_SETLOWPOWERACTIVE = 85;

const int SPI_SETPOWEROFFACTIVE = 86;

const int SPI_SETCURSORS = 87;

const int SPI_SETICONS = 88;

const int SPI_GETDEFAULTINPUTLANG = 89;

const int SPI_SETDEFAULTINPUTLANG = 90;

const int SPI_SETLANGTOGGLE = 91;

const int SPI_GETWINDOWSEXTENSION = 92;

const int SPI_SETMOUSETRAILS = 93;

const int SPI_GETMOUSETRAILS = 94;

const int SPI_SETSCREENSAVERRUNNING = 97;

const int SPI_SCREENSAVERRUNNING = 97;

const int SPI_GETFILTERKEYS = 50;

const int SPI_SETFILTERKEYS = 51;

const int SPI_GETTOGGLEKEYS = 52;

const int SPI_SETTOGGLEKEYS = 53;

const int SPI_GETMOUSEKEYS = 54;

const int SPI_SETMOUSEKEYS = 55;

const int SPI_GETSHOWSOUNDS = 56;

const int SPI_SETSHOWSOUNDS = 57;

const int SPI_GETSTICKYKEYS = 58;

const int SPI_SETSTICKYKEYS = 59;

const int SPI_GETACCESSTIMEOUT = 60;

const int SPI_SETACCESSTIMEOUT = 61;

const int SPI_GETSERIALKEYS = 62;

const int SPI_SETSERIALKEYS = 63;

const int SPI_GETSOUNDSENTRY = 64;

const int SPI_SETSOUNDSENTRY = 65;

const int SPI_GETSNAPTODEFBUTTON = 95;

const int SPI_SETSNAPTODEFBUTTON = 96;

const int SPI_GETMOUSEHOVERWIDTH = 98;

const int SPI_SETMOUSEHOVERWIDTH = 99;

const int SPI_GETMOUSEHOVERHEIGHT = 100;

const int SPI_SETMOUSEHOVERHEIGHT = 101;

const int SPI_GETMOUSEHOVERTIME = 102;

const int SPI_SETMOUSEHOVERTIME = 103;

const int SPI_GETWHEELSCROLLLINES = 104;

const int SPI_SETWHEELSCROLLLINES = 105;

const int SPI_GETMENUSHOWDELAY = 106;

const int SPI_SETMENUSHOWDELAY = 107;

const int SPI_GETWHEELSCROLLCHARS = 108;

const int SPI_SETWHEELSCROLLCHARS = 109;

const int SPI_GETSHOWIMEUI = 110;

const int SPI_SETSHOWIMEUI = 111;

const int SPI_GETMOUSESPEED = 112;

const int SPI_SETMOUSESPEED = 113;

const int SPI_GETSCREENSAVERRUNNING = 114;

const int SPI_GETDESKWALLPAPER = 115;

const int SPI_GETAUDIODESCRIPTION = 116;

const int SPI_SETAUDIODESCRIPTION = 117;

const int SPI_GETSCREENSAVESECURE = 118;

const int SPI_SETSCREENSAVESECURE = 119;

const int SPI_GETHUNGAPPTIMEOUT = 120;

const int SPI_SETHUNGAPPTIMEOUT = 121;

const int SPI_GETWAITTOKILLTIMEOUT = 122;

const int SPI_SETWAITTOKILLTIMEOUT = 123;

const int SPI_GETWAITTOKILLSERVICETIMEOUT = 124;

const int SPI_SETWAITTOKILLSERVICETIMEOUT = 125;

const int SPI_GETMOUSEDOCKTHRESHOLD = 126;

const int SPI_SETMOUSEDOCKTHRESHOLD = 127;

const int SPI_GETPENDOCKTHRESHOLD = 128;

const int SPI_SETPENDOCKTHRESHOLD = 129;

const int SPI_GETWINARRANGING = 130;

const int SPI_SETWINARRANGING = 131;

const int SPI_GETMOUSEDRAGOUTTHRESHOLD = 132;

const int SPI_SETMOUSEDRAGOUTTHRESHOLD = 133;

const int SPI_GETPENDRAGOUTTHRESHOLD = 134;

const int SPI_SETPENDRAGOUTTHRESHOLD = 135;

const int SPI_GETMOUSESIDEMOVETHRESHOLD = 136;

const int SPI_SETMOUSESIDEMOVETHRESHOLD = 137;

const int SPI_GETPENSIDEMOVETHRESHOLD = 138;

const int SPI_SETPENSIDEMOVETHRESHOLD = 139;

const int SPI_GETDRAGFROMMAXIMIZE = 140;

const int SPI_SETDRAGFROMMAXIMIZE = 141;

const int SPI_GETSNAPSIZING = 142;

const int SPI_SETSNAPSIZING = 143;

const int SPI_GETDOCKMOVING = 144;

const int SPI_SETDOCKMOVING = 145;

const int MAX_TOUCH_PREDICTION_FILTER_TAPS = 3;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8;

const int TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN =
    0.8999999761581421;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX =
    0.9990000128746033;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE =
    0.0010000000474974513;

const double TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA =
    0.9900000095367432;

const int SPI_GETTOUCHPREDICTIONPARAMETERS = 156;

const int SPI_SETTOUCHPREDICTIONPARAMETERS = 157;

const int MAX_LOGICALDPIOVERRIDE = 2;

const int MIN_LOGICALDPIOVERRIDE = -2;

const int SPI_GETLOGICALDPIOVERRIDE = 158;

const int SPI_SETLOGICALDPIOVERRIDE = 159;

const int SPI_GETMENURECT = 162;

const int SPI_SETMENURECT = 163;

const int SPI_GETACTIVEWINDOWTRACKING = 4096;

const int SPI_SETACTIVEWINDOWTRACKING = 4097;

const int SPI_GETMENUANIMATION = 4098;

const int SPI_SETMENUANIMATION = 4099;

const int SPI_GETCOMBOBOXANIMATION = 4100;

const int SPI_SETCOMBOBOXANIMATION = 4101;

const int SPI_GETLISTBOXSMOOTHSCROLLING = 4102;

const int SPI_SETLISTBOXSMOOTHSCROLLING = 4103;

const int SPI_GETGRADIENTCAPTIONS = 4104;

const int SPI_SETGRADIENTCAPTIONS = 4105;

const int SPI_GETKEYBOARDCUES = 4106;

const int SPI_SETKEYBOARDCUES = 4107;

const int SPI_GETMENUUNDERLINES = 4106;

const int SPI_SETMENUUNDERLINES = 4107;

const int SPI_GETACTIVEWNDTRKZORDER = 4108;

const int SPI_SETACTIVEWNDTRKZORDER = 4109;

const int SPI_GETHOTTRACKING = 4110;

const int SPI_SETHOTTRACKING = 4111;

const int SPI_GETMENUFADE = 4114;

const int SPI_SETMENUFADE = 4115;

const int SPI_GETSELECTIONFADE = 4116;

const int SPI_SETSELECTIONFADE = 4117;

const int SPI_GETTOOLTIPANIMATION = 4118;

const int SPI_SETTOOLTIPANIMATION = 4119;

const int SPI_GETTOOLTIPFADE = 4120;

const int SPI_SETTOOLTIPFADE = 4121;

const int SPI_GETCURSORSHADOW = 4122;

const int SPI_SETCURSORSHADOW = 4123;

const int SPI_GETMOUSESONAR = 4124;

const int SPI_SETMOUSESONAR = 4125;

const int SPI_GETMOUSECLICKLOCK = 4126;

const int SPI_SETMOUSECLICKLOCK = 4127;

const int SPI_GETMOUSEVANISH = 4128;

const int SPI_SETMOUSEVANISH = 4129;

const int SPI_GETFLATMENU = 4130;

const int SPI_SETFLATMENU = 4131;

const int SPI_GETDROPSHADOW = 4132;

const int SPI_SETDROPSHADOW = 4133;

const int SPI_GETBLOCKSENDINPUTRESETS = 4134;

const int SPI_SETBLOCKSENDINPUTRESETS = 4135;

const int SPI_GETUIEFFECTS = 4158;

const int SPI_SETUIEFFECTS = 4159;

const int SPI_GETDISABLEOVERLAPPEDCONTENT = 4160;

const int SPI_SETDISABLEOVERLAPPEDCONTENT = 4161;

const int SPI_GETCLIENTAREAANIMATION = 4162;

const int SPI_SETCLIENTAREAANIMATION = 4163;

const int SPI_GETCLEARTYPE = 4168;

const int SPI_SETCLEARTYPE = 4169;

const int SPI_GETSPEECHRECOGNITION = 4170;

const int SPI_SETSPEECHRECOGNITION = 4171;

const int SPI_GETCARETBROWSING = 4172;

const int SPI_SETCARETBROWSING = 4173;

const int SPI_GETTHREADLOCALINPUTSETTINGS = 4174;

const int SPI_SETTHREADLOCALINPUTSETTINGS = 4175;

const int SPI_GETSYSTEMLANGUAGEBAR = 4176;

const int SPI_SETSYSTEMLANGUAGEBAR = 4177;

const int SPI_GETFOREGROUNDLOCKTIMEOUT = 8192;

const int SPI_SETFOREGROUNDLOCKTIMEOUT = 8193;

const int SPI_GETACTIVEWNDTRKTIMEOUT = 8194;

const int SPI_SETACTIVEWNDTRKTIMEOUT = 8195;

const int SPI_GETFOREGROUNDFLASHCOUNT = 8196;

const int SPI_SETFOREGROUNDFLASHCOUNT = 8197;

const int SPI_GETCARETWIDTH = 8198;

const int SPI_SETCARETWIDTH = 8199;

const int SPI_GETMOUSECLICKLOCKTIME = 8200;

const int SPI_SETMOUSECLICKLOCKTIME = 8201;

const int SPI_GETFONTSMOOTHINGTYPE = 8202;

const int SPI_SETFONTSMOOTHINGTYPE = 8203;

const int FE_FONTSMOOTHINGSTANDARD = 1;

const int FE_FONTSMOOTHINGCLEARTYPE = 2;

const int SPI_GETFONTSMOOTHINGCONTRAST = 8204;

const int SPI_SETFONTSMOOTHINGCONTRAST = 8205;

const int SPI_GETFOCUSBORDERWIDTH = 8206;

const int SPI_SETFOCUSBORDERWIDTH = 8207;

const int SPI_GETFOCUSBORDERHEIGHT = 8208;

const int SPI_SETFOCUSBORDERHEIGHT = 8209;

const int SPI_GETFONTSMOOTHINGORIENTATION = 8210;

const int SPI_SETFONTSMOOTHINGORIENTATION = 8211;

const int FE_FONTSMOOTHINGORIENTATIONBGR = 0;

const int FE_FONTSMOOTHINGORIENTATIONRGB = 1;

const int SPI_GETMINIMUMHITRADIUS = 8212;

const int SPI_SETMINIMUMHITRADIUS = 8213;

const int SPI_GETMESSAGEDURATION = 8214;

const int SPI_SETMESSAGEDURATION = 8215;

const int SPI_GETCONTACTVISUALIZATION = 8216;

const int SPI_SETCONTACTVISUALIZATION = 8217;

const int CONTACTVISUALIZATION_OFF = 0;

const int CONTACTVISUALIZATION_ON = 1;

const int CONTACTVISUALIZATION_PRESENTATIONMODE = 2;

const int SPI_GETGESTUREVISUALIZATION = 8218;

const int SPI_SETGESTUREVISUALIZATION = 8219;

const int GESTUREVISUALIZATION_OFF = 0;

const int GESTUREVISUALIZATION_ON = 31;

const int GESTUREVISUALIZATION_TAP = 1;

const int GESTUREVISUALIZATION_DOUBLETAP = 2;

const int GESTUREVISUALIZATION_PRESSANDTAP = 4;

const int GESTUREVISUALIZATION_PRESSANDHOLD = 8;

const int GESTUREVISUALIZATION_RIGHTTAP = 16;

const int SPI_GETMOUSEWHEELROUTING = 8220;

const int SPI_SETMOUSEWHEELROUTING = 8221;

const int MOUSEWHEEL_ROUTING_FOCUS = 0;

const int MOUSEWHEEL_ROUTING_HYBRID = 1;

const int MOUSEWHEEL_ROUTING_MOUSE_POS = 2;

const int SPI_GETPENVISUALIZATION = 8222;

const int SPI_SETPENVISUALIZATION = 8223;

const int PENVISUALIZATION_ON = 35;

const int PENVISUALIZATION_OFF = 0;

const int PENVISUALIZATION_TAP = 1;

const int PENVISUALIZATION_DOUBLETAP = 2;

const int PENVISUALIZATION_CURSOR = 32;

const int SPI_GETPENARBITRATIONTYPE = 8224;

const int SPI_SETPENARBITRATIONTYPE = 8225;

const int PENARBITRATIONTYPE_NONE = 0;

const int PENARBITRATIONTYPE_WIN8 = 1;

const int PENARBITRATIONTYPE_FIS = 2;

const int PENARBITRATIONTYPE_SPT = 3;

const int PENARBITRATIONTYPE_MAX = 4;

const int SPI_GETCARETTIMEOUT = 8226;

const int SPI_SETCARETTIMEOUT = 8227;

const int SPI_GETHANDEDNESS = 8228;

const int SPI_SETHANDEDNESS = 8229;

const int SPIF_UPDATEINIFILE = 1;

const int SPIF_SENDWININICHANGE = 2;

const int SPIF_SENDCHANGE = 2;

const int METRICS_USEDEFAULT = -1;

const int ARW_BOTTOMLEFT = 0;

const int ARW_BOTTOMRIGHT = 1;

const int ARW_TOPLEFT = 2;

const int ARW_TOPRIGHT = 3;

const int ARW_STARTMASK = 3;

const int ARW_STARTRIGHT = 1;

const int ARW_STARTTOP = 2;

const int ARW_LEFT = 0;

const int ARW_RIGHT = 0;

const int ARW_UP = 4;

const int ARW_DOWN = 4;

const int ARW_HIDE = 8;

const int SERKF_SERIALKEYSON = 1;

const int SERKF_AVAILABLE = 2;

const int SERKF_INDICATOR = 4;

const int HCF_HIGHCONTRASTON = 1;

const int HCF_AVAILABLE = 2;

const int HCF_HOTKEYACTIVE = 4;

const int HCF_CONFIRMHOTKEY = 8;

const int HCF_HOTKEYSOUND = 16;

const int HCF_INDICATOR = 32;

const int HCF_HOTKEYAVAILABLE = 64;

const int HCF_LOGONDESKTOP = 256;

const int HCF_DEFAULTDESKTOP = 512;

const int HCF_OPTION_NOTHEMECHANGE = 4096;

const int CDS_UPDATEREGISTRY = 1;

const int CDS_TEST = 2;

const int CDS_FULLSCREEN = 4;

const int CDS_GLOBAL = 8;

const int CDS_SET_PRIMARY = 16;

const int CDS_VIDEOPARAMETERS = 32;

const int CDS_ENABLE_UNSAFE_MODES = 256;

const int CDS_DISABLE_UNSAFE_MODES = 512;

const int CDS_RESET = 1073741824;

const int CDS_RESET_EX = 536870912;

const int CDS_NORESET = 268435456;

const int VP_COMMAND_GET = 1;

const int VP_COMMAND_SET = 2;

const int VP_FLAGS_TV_MODE = 1;

const int VP_FLAGS_TV_STANDARD = 2;

const int VP_FLAGS_FLICKER = 4;

const int VP_FLAGS_OVERSCAN = 8;

const int VP_FLAGS_MAX_UNSCALED = 16;

const int VP_FLAGS_POSITION = 32;

const int VP_FLAGS_BRIGHTNESS = 64;

const int VP_FLAGS_CONTRAST = 128;

const int VP_FLAGS_COPYPROTECT = 256;

const int VP_MODE_WIN_GRAPHICS = 1;

const int VP_MODE_TV_PLAYBACK = 2;

const int VP_TV_STANDARD_NTSC_M = 1;

const int VP_TV_STANDARD_NTSC_M_J = 2;

const int VP_TV_STANDARD_PAL_B = 4;

const int VP_TV_STANDARD_PAL_D = 8;

const int VP_TV_STANDARD_PAL_H = 16;

const int VP_TV_STANDARD_PAL_I = 32;

const int VP_TV_STANDARD_PAL_M = 64;

const int VP_TV_STANDARD_PAL_N = 128;

const int VP_TV_STANDARD_SECAM_B = 256;

const int VP_TV_STANDARD_SECAM_D = 512;

const int VP_TV_STANDARD_SECAM_G = 1024;

const int VP_TV_STANDARD_SECAM_H = 2048;

const int VP_TV_STANDARD_SECAM_K = 4096;

const int VP_TV_STANDARD_SECAM_K1 = 8192;

const int VP_TV_STANDARD_SECAM_L = 16384;

const int VP_TV_STANDARD_WIN_VGA = 32768;

const int VP_TV_STANDARD_NTSC_433 = 65536;

const int VP_TV_STANDARD_PAL_G = 131072;

const int VP_TV_STANDARD_PAL_60 = 262144;

const int VP_TV_STANDARD_SECAM_L1 = 524288;

const int VP_CP_TYPE_APS_TRIGGER = 1;

const int VP_CP_TYPE_MACROVISION = 2;

const int VP_CP_CMD_ACTIVATE = 1;

const int VP_CP_CMD_DEACTIVATE = 2;

const int VP_CP_CMD_CHANGE = 4;

const int DISP_CHANGE_SUCCESSFUL = 0;

const int DISP_CHANGE_RESTART = 1;

const int DISP_CHANGE_FAILED = -1;

const int DISP_CHANGE_BADMODE = -2;

const int DISP_CHANGE_NOTUPDATED = -3;

const int DISP_CHANGE_BADFLAGS = -4;

const int DISP_CHANGE_BADPARAM = -5;

const int DISP_CHANGE_BADDUALVIEW = -6;

const int ENUM_CURRENT_SETTINGS = 4294967295;

const int ENUM_REGISTRY_SETTINGS = 4294967294;

const int EDS_RAWMODE = 2;

const int EDS_ROTATEDMODE = 4;

const int EDD_GET_DEVICE_INTERFACE_NAME = 1;

const int FKF_FILTERKEYSON = 1;

const int FKF_AVAILABLE = 2;

const int FKF_HOTKEYACTIVE = 4;

const int FKF_CONFIRMHOTKEY = 8;

const int FKF_HOTKEYSOUND = 16;

const int FKF_INDICATOR = 32;

const int FKF_CLICKON = 64;

const int SKF_STICKYKEYSON = 1;

const int SKF_AVAILABLE = 2;

const int SKF_HOTKEYACTIVE = 4;

const int SKF_CONFIRMHOTKEY = 8;

const int SKF_HOTKEYSOUND = 16;

const int SKF_INDICATOR = 32;

const int SKF_AUDIBLEFEEDBACK = 64;

const int SKF_TRISTATE = 128;

const int SKF_TWOKEYSOFF = 256;

const int SKF_LALTLATCHED = 268435456;

const int SKF_LCTLLATCHED = 67108864;

const int SKF_LSHIFTLATCHED = 16777216;

const int SKF_RALTLATCHED = 536870912;

const int SKF_RCTLLATCHED = 134217728;

const int SKF_RSHIFTLATCHED = 33554432;

const int SKF_LWINLATCHED = 1073741824;

const int SKF_RWINLATCHED = 2147483648;

const int SKF_LALTLOCKED = 1048576;

const int SKF_LCTLLOCKED = 262144;

const int SKF_LSHIFTLOCKED = 65536;

const int SKF_RALTLOCKED = 2097152;

const int SKF_RCTLLOCKED = 524288;

const int SKF_RSHIFTLOCKED = 131072;

const int SKF_LWINLOCKED = 4194304;

const int SKF_RWINLOCKED = 8388608;

const int MKF_MOUSEKEYSON = 1;

const int MKF_AVAILABLE = 2;

const int MKF_HOTKEYACTIVE = 4;

const int MKF_CONFIRMHOTKEY = 8;

const int MKF_HOTKEYSOUND = 16;

const int MKF_INDICATOR = 32;

const int MKF_MODIFIERS = 64;

const int MKF_REPLACENUMBERS = 128;

const int MKF_LEFTBUTTONSEL = 268435456;

const int MKF_RIGHTBUTTONSEL = 536870912;

const int MKF_LEFTBUTTONDOWN = 16777216;

const int MKF_RIGHTBUTTONDOWN = 33554432;

const int MKF_MOUSEMODE = 2147483648;

const int ATF_TIMEOUTON = 1;

const int ATF_ONOFFFEEDBACK = 2;

const int SSGF_NONE = 0;

const int SSGF_DISPLAY = 3;

const int SSTF_NONE = 0;

const int SSTF_CHARS = 1;

const int SSTF_BORDER = 2;

const int SSTF_DISPLAY = 3;

const int SSWF_NONE = 0;

const int SSWF_TITLE = 1;

const int SSWF_WINDOW = 2;

const int SSWF_DISPLAY = 3;

const int SSWF_CUSTOM = 4;

const int SSF_SOUNDSENTRYON = 1;

const int SSF_AVAILABLE = 2;

const int SSF_INDICATOR = 4;

const int TKF_TOGGLEKEYSON = 1;

const int TKF_AVAILABLE = 2;

const int TKF_HOTKEYACTIVE = 4;

const int TKF_CONFIRMHOTKEY = 8;

const int TKF_HOTKEYSOUND = 16;

const int TKF_INDICATOR = 32;

const int SLE_ERROR = 1;

const int SLE_MINORERROR = 2;

const int SLE_WARNING = 3;

const int MONITOR_DEFAULTTONULL = 0;

const int MONITOR_DEFAULTTOPRIMARY = 1;

const int MONITOR_DEFAULTTONEAREST = 2;

const int MONITORINFOF_PRIMARY = 1;

const int WINEVENT_OUTOFCONTEXT = 0;

const int WINEVENT_SKIPOWNTHREAD = 1;

const int WINEVENT_SKIPOWNPROCESS = 2;

const int WINEVENT_INCONTEXT = 4;

const int CHILDID_SELF = 0;

const int INDEXID_OBJECT = 0;

const int INDEXID_CONTAINER = 0;

const int OBJID_WINDOW = 0;

const int OBJID_SYSMENU = -1;

const int OBJID_TITLEBAR = -2;

const int OBJID_MENU = -3;

const int OBJID_CLIENT = -4;

const int OBJID_VSCROLL = -5;

const int OBJID_HSCROLL = -6;

const int OBJID_SIZEGRIP = -7;

const int OBJID_CARET = -8;

const int OBJID_CURSOR = -9;

const int OBJID_ALERT = -10;

const int OBJID_SOUND = -11;

const int OBJID_QUERYCLASSNAMEIDX = -12;

const int OBJID_NATIVEOM = -16;

const int EVENT_MIN = 1;

const int EVENT_MAX = 2147483647;

const int EVENT_SYSTEM_SOUND = 1;

const int EVENT_SYSTEM_ALERT = 2;

const int EVENT_SYSTEM_FOREGROUND = 3;

const int EVENT_SYSTEM_MENUSTART = 4;

const int EVENT_SYSTEM_MENUEND = 5;

const int EVENT_SYSTEM_MENUPOPUPSTART = 6;

const int EVENT_SYSTEM_MENUPOPUPEND = 7;

const int EVENT_SYSTEM_CAPTURESTART = 8;

const int EVENT_SYSTEM_CAPTUREEND = 9;

const int EVENT_SYSTEM_MOVESIZESTART = 10;

const int EVENT_SYSTEM_MOVESIZEEND = 11;

const int EVENT_SYSTEM_CONTEXTHELPSTART = 12;

const int EVENT_SYSTEM_CONTEXTHELPEND = 13;

const int EVENT_SYSTEM_DRAGDROPSTART = 14;

const int EVENT_SYSTEM_DRAGDROPEND = 15;

const int EVENT_SYSTEM_DIALOGSTART = 16;

const int EVENT_SYSTEM_DIALOGEND = 17;

const int EVENT_SYSTEM_SCROLLINGSTART = 18;

const int EVENT_SYSTEM_SCROLLINGEND = 19;

const int EVENT_SYSTEM_SWITCHSTART = 20;

const int EVENT_SYSTEM_SWITCHEND = 21;

const int EVENT_SYSTEM_MINIMIZESTART = 22;

const int EVENT_SYSTEM_MINIMIZEEND = 23;

const int EVENT_SYSTEM_DESKTOPSWITCH = 32;

const int EVENT_SYSTEM_SWITCHER_APPGRABBED = 36;

const int EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 37;

const int EVENT_SYSTEM_SWITCHER_APPDROPPED = 38;

const int EVENT_SYSTEM_SWITCHER_CANCELLED = 39;

const int EVENT_SYSTEM_IME_KEY_NOTIFICATION = 41;

const int EVENT_SYSTEM_END = 255;

const int EVENT_OEM_DEFINED_START = 257;

const int EVENT_OEM_DEFINED_END = 511;

const int EVENT_UIA_EVENTID_START = 19968;

const int EVENT_UIA_EVENTID_END = 20223;

const int EVENT_UIA_PROPID_START = 29952;

const int EVENT_UIA_PROPID_END = 30207;

const int EVENT_CONSOLE_CARET = 16385;

const int EVENT_CONSOLE_UPDATE_REGION = 16386;

const int EVENT_CONSOLE_UPDATE_SIMPLE = 16387;

const int EVENT_CONSOLE_UPDATE_SCROLL = 16388;

const int EVENT_CONSOLE_LAYOUT = 16389;

const int EVENT_CONSOLE_START_APPLICATION = 16390;

const int EVENT_CONSOLE_END_APPLICATION = 16391;

const int CONSOLE_APPLICATION_16BIT = 0;

const int CONSOLE_CARET_SELECTION = 1;

const int CONSOLE_CARET_VISIBLE = 2;

const int EVENT_CONSOLE_END = 16639;

const int EVENT_OBJECT_CREATE = 32768;

const int EVENT_OBJECT_DESTROY = 32769;

const int EVENT_OBJECT_SHOW = 32770;

const int EVENT_OBJECT_HIDE = 32771;

const int EVENT_OBJECT_REORDER = 32772;

const int EVENT_OBJECT_FOCUS = 32773;

const int EVENT_OBJECT_SELECTION = 32774;

const int EVENT_OBJECT_SELECTIONADD = 32775;

const int EVENT_OBJECT_SELECTIONREMOVE = 32776;

const int EVENT_OBJECT_SELECTIONWITHIN = 32777;

const int EVENT_OBJECT_STATECHANGE = 32778;

const int EVENT_OBJECT_LOCATIONCHANGE = 32779;

const int EVENT_OBJECT_NAMECHANGE = 32780;

const int EVENT_OBJECT_DESCRIPTIONCHANGE = 32781;

const int EVENT_OBJECT_VALUECHANGE = 32782;

const int EVENT_OBJECT_PARENTCHANGE = 32783;

const int EVENT_OBJECT_HELPCHANGE = 32784;

const int EVENT_OBJECT_DEFACTIONCHANGE = 32785;

const int EVENT_OBJECT_ACCELERATORCHANGE = 32786;

const int EVENT_OBJECT_INVOKED = 32787;

const int EVENT_OBJECT_TEXTSELECTIONCHANGED = 32788;

const int EVENT_OBJECT_CONTENTSCROLLED = 32789;

const int EVENT_SYSTEM_ARRANGMENTPREVIEW = 32790;

const int EVENT_OBJECT_CLOAKED = 32791;

const int EVENT_OBJECT_UNCLOAKED = 32792;

const int EVENT_OBJECT_LIVEREGIONCHANGED = 32793;

const int EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 32800;

const int EVENT_OBJECT_DRAGSTART = 32801;

const int EVENT_OBJECT_DRAGCANCEL = 32802;

const int EVENT_OBJECT_DRAGCOMPLETE = 32803;

const int EVENT_OBJECT_DRAGENTER = 32804;

const int EVENT_OBJECT_DRAGLEAVE = 32805;

const int EVENT_OBJECT_DRAGDROPPED = 32806;

const int EVENT_OBJECT_IME_SHOW = 32807;

const int EVENT_OBJECT_IME_HIDE = 32808;

const int EVENT_OBJECT_IME_CHANGE = 32809;

const int EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 32816;

const int EVENT_OBJECT_END = 33023;

const int EVENT_AIA_START = 40960;

const int EVENT_AIA_END = 45055;

const int SOUND_SYSTEM_STARTUP = 1;

const int SOUND_SYSTEM_SHUTDOWN = 2;

const int SOUND_SYSTEM_BEEP = 3;

const int SOUND_SYSTEM_ERROR = 4;

const int SOUND_SYSTEM_QUESTION = 5;

const int SOUND_SYSTEM_WARNING = 6;

const int SOUND_SYSTEM_INFORMATION = 7;

const int SOUND_SYSTEM_MAXIMIZE = 8;

const int SOUND_SYSTEM_MINIMIZE = 9;

const int SOUND_SYSTEM_RESTOREUP = 10;

const int SOUND_SYSTEM_RESTOREDOWN = 11;

const int SOUND_SYSTEM_APPSTART = 12;

const int SOUND_SYSTEM_FAULT = 13;

const int SOUND_SYSTEM_APPEND = 14;

const int SOUND_SYSTEM_MENUCOMMAND = 15;

const int SOUND_SYSTEM_MENUPOPUP = 16;

const int CSOUND_SYSTEM = 16;

const int ALERT_SYSTEM_INFORMATIONAL = 1;

const int ALERT_SYSTEM_WARNING = 2;

const int ALERT_SYSTEM_ERROR = 3;

const int ALERT_SYSTEM_QUERY = 4;

const int ALERT_SYSTEM_CRITICAL = 5;

const int CALERT_SYSTEM = 6;

const int GUI_CARETBLINKING = 1;

const int GUI_INMOVESIZE = 2;

const int GUI_INMENUMODE = 4;

const int GUI_SYSTEMMENUMODE = 8;

const int GUI_POPUPMENUMODE = 16;

const int GUI_16BITTASK = 0;

const int USER_DEFAULT_SCREEN_DPI = 96;

const int STATE_SYSTEM_UNAVAILABLE = 1;

const int STATE_SYSTEM_SELECTED = 2;

const int STATE_SYSTEM_FOCUSED = 4;

const int STATE_SYSTEM_PRESSED = 8;

const int STATE_SYSTEM_CHECKED = 16;

const int STATE_SYSTEM_MIXED = 32;

const int STATE_SYSTEM_INDETERMINATE = 32;

const int STATE_SYSTEM_READONLY = 64;

const int STATE_SYSTEM_HOTTRACKED = 128;

const int STATE_SYSTEM_DEFAULT = 256;

const int STATE_SYSTEM_EXPANDED = 512;

const int STATE_SYSTEM_COLLAPSED = 1024;

const int STATE_SYSTEM_BUSY = 2048;

const int STATE_SYSTEM_FLOATING = 4096;

const int STATE_SYSTEM_MARQUEED = 8192;

const int STATE_SYSTEM_ANIMATED = 16384;

const int STATE_SYSTEM_INVISIBLE = 32768;

const int STATE_SYSTEM_OFFSCREEN = 65536;

const int STATE_SYSTEM_SIZEABLE = 131072;

const int STATE_SYSTEM_MOVEABLE = 262144;

const int STATE_SYSTEM_SELFVOICING = 524288;

const int STATE_SYSTEM_FOCUSABLE = 1048576;

const int STATE_SYSTEM_SELECTABLE = 2097152;

const int STATE_SYSTEM_LINKED = 4194304;

const int STATE_SYSTEM_TRAVERSED = 8388608;

const int STATE_SYSTEM_MULTISELECTABLE = 16777216;

const int STATE_SYSTEM_EXTSELECTABLE = 33554432;

const int STATE_SYSTEM_ALERT_LOW = 67108864;

const int STATE_SYSTEM_ALERT_MEDIUM = 134217728;

const int STATE_SYSTEM_ALERT_HIGH = 268435456;

const int STATE_SYSTEM_PROTECTED = 536870912;

const int STATE_SYSTEM_VALID = 1073741823;

const int CCHILDREN_TITLEBAR = 5;

const int CCHILDREN_SCROLLBAR = 5;

const int CURSOR_SHOWING = 1;

const int CURSOR_SUPPRESSED = 2;

const int WS_ACTIVECAPTION = 1;

const int GA_PARENT = 1;

const int GA_ROOT = 2;

const int GA_ROOTOWNER = 3;

const int RIM_INPUT = 0;

const int RIM_INPUTSINK = 1;

const int RIM_TYPEMOUSE = 0;

const int RIM_TYPEKEYBOARD = 1;

const int RIM_TYPEHID = 2;

const int RIM_TYPEMAX = 2;

const int RI_MOUSE_LEFT_BUTTON_DOWN = 1;

const int RI_MOUSE_LEFT_BUTTON_UP = 2;

const int RI_MOUSE_RIGHT_BUTTON_DOWN = 4;

const int RI_MOUSE_RIGHT_BUTTON_UP = 8;

const int RI_MOUSE_MIDDLE_BUTTON_DOWN = 16;

const int RI_MOUSE_MIDDLE_BUTTON_UP = 32;

const int RI_MOUSE_BUTTON_1_DOWN = 1;

const int RI_MOUSE_BUTTON_1_UP = 2;

const int RI_MOUSE_BUTTON_2_DOWN = 4;

const int RI_MOUSE_BUTTON_2_UP = 8;

const int RI_MOUSE_BUTTON_3_DOWN = 16;

const int RI_MOUSE_BUTTON_3_UP = 32;

const int RI_MOUSE_BUTTON_4_DOWN = 64;

const int RI_MOUSE_BUTTON_4_UP = 128;

const int RI_MOUSE_BUTTON_5_DOWN = 256;

const int RI_MOUSE_BUTTON_5_UP = 512;

const int RI_MOUSE_WHEEL = 1024;

const int RI_MOUSE_HWHEEL = 2048;

const int MOUSE_MOVE_RELATIVE = 0;

const int MOUSE_MOVE_ABSOLUTE = 1;

const int MOUSE_VIRTUAL_DESKTOP = 2;

const int MOUSE_ATTRIBUTES_CHANGED = 4;

const int MOUSE_MOVE_NOCOALESCE = 8;

const int KEYBOARD_OVERRUN_MAKE_CODE = 255;

const int RI_KEY_MAKE = 0;

const int RI_KEY_BREAK = 1;

const int RI_KEY_E0 = 2;

const int RI_KEY_E1 = 4;

const int RI_KEY_TERMSRV_SET_LED = 8;

const int RI_KEY_TERMSRV_SHADOW = 16;

const int RID_INPUT = 268435459;

const int RID_HEADER = 268435461;

const int RIDI_PREPARSEDDATA = 536870917;

const int RIDI_DEVICENAME = 536870919;

const int RIDI_DEVICEINFO = 536870923;

const int RIDEV_REMOVE = 1;

const int RIDEV_EXCLUDE = 16;

const int RIDEV_PAGEONLY = 32;

const int RIDEV_NOLEGACY = 48;

const int RIDEV_INPUTSINK = 256;

const int RIDEV_CAPTUREMOUSE = 512;

const int RIDEV_NOHOTKEYS = 512;

const int RIDEV_APPKEYS = 1024;

const int RIDEV_EXINPUTSINK = 4096;

const int RIDEV_DEVNOTIFY = 8192;

const int RIDEV_EXMODEMASK = 240;

const int GIDC_ARRIVAL = 1;

const int GIDC_REMOVAL = 2;

const int POINTER_DEVICE_PRODUCT_STRING_MAX = 520;

const int PDC_ARRIVAL = 1;

const int PDC_REMOVAL = 2;

const int PDC_ORIENTATION_0 = 4;

const int PDC_ORIENTATION_90 = 8;

const int PDC_ORIENTATION_180 = 16;

const int PDC_ORIENTATION_270 = 32;

const int PDC_MODE_DEFAULT = 64;

const int PDC_MODE_CENTERED = 128;

const int PDC_MAPPING_CHANGE = 256;

const int PDC_RESOLUTION = 512;

const int PDC_ORIGIN = 1024;

const int PDC_MODE_ASPECTRATIOPRESERVED = 2048;

const int MSGFLT_ADD = 1;

const int MSGFLT_REMOVE = 2;

const int MSGFLTINFO_NONE = 0;

const int MSGFLTINFO_ALREADYALLOWED_FORWND = 1;

const int MSGFLTINFO_ALREADYDISALLOWED_FORWND = 2;

const int MSGFLTINFO_ALLOWED_HIGHER = 3;

const int MSGFLT_RESET = 0;

const int MSGFLT_ALLOW = 1;

const int MSGFLT_DISALLOW = 2;

const int GF_BEGIN = 1;

const int GF_INERTIA = 2;

const int GF_END = 4;

const int GID_BEGIN = 1;

const int GID_END = 2;

const int GID_ZOOM = 3;

const int GID_PAN = 4;

const int GID_ROTATE = 5;

const int GID_TWOFINGERTAP = 6;

const int GID_PRESSANDTAP = 7;

const int GID_ROLLOVER = 7;

const int GC_ALLGESTURES = 1;

const int GC_ZOOM = 1;

const int GC_PAN = 1;

const int GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 2;

const int GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 4;

const int GC_PAN_WITH_GUTTER = 8;

const int GC_PAN_WITH_INERTIA = 16;

const int GC_ROTATE = 1;

const int GC_TWOFINGERTAP = 1;

const int GC_PRESSANDTAP = 1;

const int GC_ROLLOVER = 1;

const int GESTURECONFIGMAXCOUNT = 256;

const int GCF_INCLUDE_ANCESTORS = 1;

const int NID_INTEGRATED_TOUCH = 1;

const int NID_EXTERNAL_TOUCH = 2;

const int NID_INTEGRATED_PEN = 4;

const int NID_EXTERNAL_PEN = 8;

const int NID_MULTI_INPUT = 64;

const int NID_READY = 128;

const int MAX_STR_BLOCKREASON = 256;

const int WM_TOOLTIPDISMISS = 837;

const int MAX_LEADBYTES = 12;

const int MAX_DEFAULTCHAR = 2;

const int HIGH_SURROGATE_START = 55296;

const int HIGH_SURROGATE_END = 56319;

const int LOW_SURROGATE_START = 56320;

const int LOW_SURROGATE_END = 57343;

const int MB_PRECOMPOSED = 1;

const int MB_COMPOSITE = 2;

const int MB_USEGLYPHCHARS = 4;

const int MB_ERR_INVALID_CHARS = 8;

const int WC_COMPOSITECHECK = 512;

const int WC_DISCARDNS = 16;

const int WC_SEPCHARS = 32;

const int WC_DEFAULTCHAR = 64;

const int WC_ERR_INVALID_CHARS = 128;

const int WC_NO_BEST_FIT_CHARS = 1024;

const int CT_CTYPE1 = 1;

const int CT_CTYPE2 = 2;

const int CT_CTYPE3 = 4;

const int C1_UPPER = 1;

const int C1_LOWER = 2;

const int C1_DIGIT = 4;

const int C1_SPACE = 8;

const int C1_PUNCT = 16;

const int C1_CNTRL = 32;

const int C1_BLANK = 64;

const int C1_XDIGIT = 128;

const int C1_ALPHA = 256;

const int C1_DEFINED = 512;

const int C2_LEFTTORIGHT = 1;

const int C2_RIGHTTOLEFT = 2;

const int C2_EUROPENUMBER = 3;

const int C2_EUROPESEPARATOR = 4;

const int C2_EUROPETERMINATOR = 5;

const int C2_ARABICNUMBER = 6;

const int C2_COMMONSEPARATOR = 7;

const int C2_BLOCKSEPARATOR = 8;

const int C2_SEGMENTSEPARATOR = 9;

const int C2_WHITESPACE = 10;

const int C2_OTHERNEUTRAL = 11;

const int C2_NOTAPPLICABLE = 0;

const int C3_NONSPACING = 1;

const int C3_DIACRITIC = 2;

const int C3_VOWELMARK = 4;

const int C3_SYMBOL = 8;

const int C3_KATAKANA = 16;

const int C3_HIRAGANA = 32;

const int C3_HALFWIDTH = 64;

const int C3_FULLWIDTH = 128;

const int C3_IDEOGRAPH = 256;

const int C3_KASHIDA = 512;

const int C3_LEXICAL = 1024;

const int C3_HIGHSURROGATE = 2048;

const int C3_LOWSURROGATE = 4096;

const int C3_ALPHA = 32768;

const int C3_NOTAPPLICABLE = 0;

const int NORM_IGNORECASE = 1;

const int NORM_IGNORENONSPACE = 2;

const int NORM_IGNORESYMBOLS = 4;

const int LINGUISTIC_IGNORECASE = 16;

const int LINGUISTIC_IGNOREDIACRITIC = 32;

const int NORM_IGNOREKANATYPE = 65536;

const int NORM_IGNOREWIDTH = 131072;

const int NORM_LINGUISTIC_CASING = 134217728;

const int MAP_FOLDCZONE = 16;

const int MAP_PRECOMPOSED = 32;

const int MAP_COMPOSITE = 64;

const int MAP_FOLDDIGITS = 128;

const int MAP_EXPAND_LIGATURES = 8192;

const int LCMAP_LOWERCASE = 256;

const int LCMAP_UPPERCASE = 512;

const int LCMAP_TITLECASE = 768;

const int LCMAP_SORTKEY = 1024;

const int LCMAP_BYTEREV = 2048;

const int LCMAP_HIRAGANA = 1048576;

const int LCMAP_KATAKANA = 2097152;

const int LCMAP_HALFWIDTH = 4194304;

const int LCMAP_FULLWIDTH = 8388608;

const int LCMAP_LINGUISTIC_CASING = 16777216;

const int LCMAP_SIMPLIFIED_CHINESE = 33554432;

const int LCMAP_TRADITIONAL_CHINESE = 67108864;

const int LCMAP_SORTHANDLE = 536870912;

const int LCMAP_HASH = 262144;

const int FIND_STARTSWITH = 1048576;

const int FIND_ENDSWITH = 2097152;

const int FIND_FROMSTART = 4194304;

const int FIND_FROMEND = 8388608;

const int LGRPID_INSTALLED = 1;

const int LGRPID_SUPPORTED = 2;

const int LCID_INSTALLED = 1;

const int LCID_SUPPORTED = 2;

const int LCID_ALTERNATE_SORTS = 4;

const int LOCALE_ALL = 0;

const int LOCALE_WINDOWS = 1;

const int LOCALE_SUPPLEMENTAL = 2;

const int LOCALE_ALTERNATE_SORTS = 4;

const int LOCALE_REPLACEMENT = 8;

const int LOCALE_NEUTRALDATA = 16;

const int LOCALE_SPECIFICDATA = 32;

const int CP_INSTALLED = 1;

const int CP_SUPPORTED = 2;

const int SORT_STRINGSORT = 4096;

const int SORT_DIGITSASNUMBERS = 8;

const int CSTR_LESS_THAN = 1;

const int CSTR_EQUAL = 2;

const int CSTR_GREATER_THAN = 3;

const int CP_ACP = 0;

const int CP_OEMCP = 1;

const int CP_MACCP = 2;

const int CP_THREAD_ACP = 3;

const int CP_SYMBOL = 42;

const int CP_UTF7 = 65000;

const int CP_UTF8 = 65001;

const int CTRY_DEFAULT = 0;

const int CTRY_ALBANIA = 355;

const int CTRY_ALGERIA = 213;

const int CTRY_ARGENTINA = 54;

const int CTRY_ARMENIA = 374;

const int CTRY_AUSTRALIA = 61;

const int CTRY_AUSTRIA = 43;

const int CTRY_AZERBAIJAN = 994;

const int CTRY_BAHRAIN = 973;

const int CTRY_BELARUS = 375;

const int CTRY_BELGIUM = 32;

const int CTRY_BELIZE = 501;

const int CTRY_BOLIVIA = 591;

const int CTRY_BRAZIL = 55;

const int CTRY_BRUNEI_DARUSSALAM = 673;

const int CTRY_BULGARIA = 359;

const int CTRY_CANADA = 2;

const int CTRY_CARIBBEAN = 1;

const int CTRY_CHILE = 56;

const int CTRY_COLOMBIA = 57;

const int CTRY_COSTA_RICA = 506;

const int CTRY_CROATIA = 385;

const int CTRY_CZECH = 420;

const int CTRY_DENMARK = 45;

const int CTRY_DOMINICAN_REPUBLIC = 1;

const int CTRY_ECUADOR = 593;

const int CTRY_EGYPT = 20;

const int CTRY_EL_SALVADOR = 503;

const int CTRY_ESTONIA = 372;

const int CTRY_FAEROE_ISLANDS = 298;

const int CTRY_FINLAND = 358;

const int CTRY_FRANCE = 33;

const int CTRY_GEORGIA = 995;

const int CTRY_GERMANY = 49;

const int CTRY_GREECE = 30;

const int CTRY_GUATEMALA = 502;

const int CTRY_HONDURAS = 504;

const int CTRY_HONG_KONG = 852;

const int CTRY_HUNGARY = 36;

const int CTRY_ICELAND = 354;

const int CTRY_INDIA = 91;

const int CTRY_INDONESIA = 62;

const int CTRY_IRAN = 981;

const int CTRY_IRAQ = 964;

const int CTRY_IRELAND = 353;

const int CTRY_ISRAEL = 972;

const int CTRY_ITALY = 39;

const int CTRY_JAMAICA = 1;

const int CTRY_JAPAN = 81;

const int CTRY_JORDAN = 962;

const int CTRY_KAZAKSTAN = 7;

const int CTRY_KENYA = 254;

const int CTRY_KUWAIT = 965;

const int CTRY_KYRGYZSTAN = 996;

const int CTRY_LATVIA = 371;

const int CTRY_LEBANON = 961;

const int CTRY_LIBYA = 218;

const int CTRY_LIECHTENSTEIN = 41;

const int CTRY_LITHUANIA = 370;

const int CTRY_LUXEMBOURG = 352;

const int CTRY_MACAU = 853;

const int CTRY_MACEDONIA = 389;

const int CTRY_MALAYSIA = 60;

const int CTRY_MALDIVES = 960;

const int CTRY_MEXICO = 52;

const int CTRY_MONACO = 33;

const int CTRY_MONGOLIA = 976;

const int CTRY_MOROCCO = 212;

const int CTRY_NETHERLANDS = 31;

const int CTRY_NEW_ZEALAND = 64;

const int CTRY_NICARAGUA = 505;

const int CTRY_NORWAY = 47;

const int CTRY_OMAN = 968;

const int CTRY_PAKISTAN = 92;

const int CTRY_PANAMA = 507;

const int CTRY_PARAGUAY = 595;

const int CTRY_PERU = 51;

const int CTRY_PHILIPPINES = 63;

const int CTRY_POLAND = 48;

const int CTRY_PORTUGAL = 351;

const int CTRY_PRCHINA = 86;

const int CTRY_PUERTO_RICO = 1;

const int CTRY_QATAR = 974;

const int CTRY_ROMANIA = 40;

const int CTRY_RUSSIA = 7;

const int CTRY_SAUDI_ARABIA = 966;

const int CTRY_SERBIA = 381;

const int CTRY_SINGAPORE = 65;

const int CTRY_SLOVAK = 421;

const int CTRY_SLOVENIA = 386;

const int CTRY_SOUTH_AFRICA = 27;

const int CTRY_SOUTH_KOREA = 82;

const int CTRY_SPAIN = 34;

const int CTRY_SWEDEN = 46;

const int CTRY_SWITZERLAND = 41;

const int CTRY_SYRIA = 963;

const int CTRY_TAIWAN = 886;

const int CTRY_TATARSTAN = 7;

const int CTRY_THAILAND = 66;

const int CTRY_TRINIDAD_Y_TOBAGO = 1;

const int CTRY_TUNISIA = 216;

const int CTRY_TURKEY = 90;

const int CTRY_UAE = 971;

const int CTRY_UKRAINE = 380;

const int CTRY_UNITED_KINGDOM = 44;

const int CTRY_UNITED_STATES = 1;

const int CTRY_URUGUAY = 598;

const int CTRY_UZBEKISTAN = 7;

const int CTRY_VENEZUELA = 58;

const int CTRY_VIET_NAM = 84;

const int CTRY_YEMEN = 967;

const int CTRY_ZIMBABWE = 263;

const int LOCALE_NOUSEROVERRIDE = 2147483648;

const int LOCALE_USE_CP_ACP = 1073741824;

const int LOCALE_RETURN_NUMBER = 536870912;

const int LOCALE_RETURN_GENITIVE_NAMES = 268435456;

const int LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;

const int LOCALE_SLOCALIZEDDISPLAYNAME = 2;

const int LOCALE_SENGLISHDISPLAYNAME = 114;

const int LOCALE_SNATIVEDISPLAYNAME = 115;

const int LOCALE_SLOCALIZEDLANGUAGENAME = 111;

const int LOCALE_SENGLISHLANGUAGENAME = 4097;

const int LOCALE_SNATIVELANGUAGENAME = 4;

const int LOCALE_SLOCALIZEDCOUNTRYNAME = 6;

const int LOCALE_SENGLISHCOUNTRYNAME = 4098;

const int LOCALE_SNATIVECOUNTRYNAME = 8;

const int LOCALE_IDIALINGCODE = 5;

const int LOCALE_SLIST = 12;

const int LOCALE_IMEASURE = 13;

const int LOCALE_SDECIMAL = 14;

const int LOCALE_STHOUSAND = 15;

const int LOCALE_SGROUPING = 16;

const int LOCALE_IDIGITS = 17;

const int LOCALE_ILZERO = 18;

const int LOCALE_INEGNUMBER = 4112;

const int LOCALE_SNATIVEDIGITS = 19;

const int LOCALE_SCURRENCY = 20;

const int LOCALE_SINTLSYMBOL = 21;

const int LOCALE_SMONDECIMALSEP = 22;

const int LOCALE_SMONTHOUSANDSEP = 23;

const int LOCALE_SMONGROUPING = 24;

const int LOCALE_ICURRDIGITS = 25;

const int LOCALE_ICURRENCY = 27;

const int LOCALE_INEGCURR = 28;

const int LOCALE_SSHORTDATE = 31;

const int LOCALE_SLONGDATE = 32;

const int LOCALE_STIMEFORMAT = 4099;

const int LOCALE_SAM = 40;

const int LOCALE_SPM = 41;

const int LOCALE_ICALENDARTYPE = 4105;

const int LOCALE_IOPTIONALCALENDAR = 4107;

const int LOCALE_IFIRSTDAYOFWEEK = 4108;

const int LOCALE_IFIRSTWEEKOFYEAR = 4109;

const int LOCALE_SDAYNAME1 = 42;

const int LOCALE_SDAYNAME2 = 43;

const int LOCALE_SDAYNAME3 = 44;

const int LOCALE_SDAYNAME4 = 45;

const int LOCALE_SDAYNAME5 = 46;

const int LOCALE_SDAYNAME6 = 47;

const int LOCALE_SDAYNAME7 = 48;

const int LOCALE_SABBREVDAYNAME1 = 49;

const int LOCALE_SABBREVDAYNAME2 = 50;

const int LOCALE_SABBREVDAYNAME3 = 51;

const int LOCALE_SABBREVDAYNAME4 = 52;

const int LOCALE_SABBREVDAYNAME5 = 53;

const int LOCALE_SABBREVDAYNAME6 = 54;

const int LOCALE_SABBREVDAYNAME7 = 55;

const int LOCALE_SMONTHNAME1 = 56;

const int LOCALE_SMONTHNAME2 = 57;

const int LOCALE_SMONTHNAME3 = 58;

const int LOCALE_SMONTHNAME4 = 59;

const int LOCALE_SMONTHNAME5 = 60;

const int LOCALE_SMONTHNAME6 = 61;

const int LOCALE_SMONTHNAME7 = 62;

const int LOCALE_SMONTHNAME8 = 63;

const int LOCALE_SMONTHNAME9 = 64;

const int LOCALE_SMONTHNAME10 = 65;

const int LOCALE_SMONTHNAME11 = 66;

const int LOCALE_SMONTHNAME12 = 67;

const int LOCALE_SMONTHNAME13 = 4110;

const int LOCALE_SABBREVMONTHNAME1 = 68;

const int LOCALE_SABBREVMONTHNAME2 = 69;

const int LOCALE_SABBREVMONTHNAME3 = 70;

const int LOCALE_SABBREVMONTHNAME4 = 71;

const int LOCALE_SABBREVMONTHNAME5 = 72;

const int LOCALE_SABBREVMONTHNAME6 = 73;

const int LOCALE_SABBREVMONTHNAME7 = 74;

const int LOCALE_SABBREVMONTHNAME8 = 75;

const int LOCALE_SABBREVMONTHNAME9 = 76;

const int LOCALE_SABBREVMONTHNAME10 = 77;

const int LOCALE_SABBREVMONTHNAME11 = 78;

const int LOCALE_SABBREVMONTHNAME12 = 79;

const int LOCALE_SABBREVMONTHNAME13 = 4111;

const int LOCALE_SPOSITIVESIGN = 80;

const int LOCALE_SNEGATIVESIGN = 81;

const int LOCALE_IPOSSIGNPOSN = 82;

const int LOCALE_INEGSIGNPOSN = 83;

const int LOCALE_IPOSSYMPRECEDES = 84;

const int LOCALE_IPOSSEPBYSPACE = 85;

const int LOCALE_INEGSYMPRECEDES = 86;

const int LOCALE_INEGSEPBYSPACE = 87;

const int LOCALE_FONTSIGNATURE = 88;

const int LOCALE_SISO639LANGNAME = 89;

const int LOCALE_SISO3166CTRYNAME = 90;

const int LOCALE_IPAPERSIZE = 4106;

const int LOCALE_SENGCURRNAME = 4103;

const int LOCALE_SNATIVECURRNAME = 4104;

const int LOCALE_SYEARMONTH = 4102;

const int LOCALE_SSORTNAME = 4115;

const int LOCALE_IDIGITSUBSTITUTION = 4116;

const int LOCALE_SNAME = 92;

const int LOCALE_SDURATION = 93;

const int LOCALE_SSHORTESTDAYNAME1 = 96;

const int LOCALE_SSHORTESTDAYNAME2 = 97;

const int LOCALE_SSHORTESTDAYNAME3 = 98;

const int LOCALE_SSHORTESTDAYNAME4 = 99;

const int LOCALE_SSHORTESTDAYNAME5 = 100;

const int LOCALE_SSHORTESTDAYNAME6 = 101;

const int LOCALE_SSHORTESTDAYNAME7 = 102;

const int LOCALE_SISO639LANGNAME2 = 103;

const int LOCALE_SISO3166CTRYNAME2 = 104;

const int LOCALE_SNAN = 105;

const int LOCALE_SPOSINFINITY = 106;

const int LOCALE_SNEGINFINITY = 107;

const int LOCALE_SSCRIPTS = 108;

const int LOCALE_SPARENT = 109;

const int LOCALE_SCONSOLEFALLBACKNAME = 110;

const int LOCALE_IREADINGLAYOUT = 112;

const int LOCALE_INEUTRAL = 113;

const int LOCALE_INEGATIVEPERCENT = 116;

const int LOCALE_IPOSITIVEPERCENT = 117;

const int LOCALE_SPERCENT = 118;

const int LOCALE_SPERMILLE = 119;

const int LOCALE_SMONTHDAY = 120;

const int LOCALE_SSHORTTIME = 121;

const int LOCALE_SOPENTYPELANGUAGETAG = 122;

const int LOCALE_SSORTLOCALE = 123;

const int LOCALE_SRELATIVELONGDATE = 124;

const int LOCALE_ICONSTRUCTEDLOCALE = 125;

const int LOCALE_SSHORTESTAM = 126;

const int LOCALE_SSHORTESTPM = 127;

const int LOCALE_IUSEUTF8LEGACYACP = 1638;

const int LOCALE_IUSEUTF8LEGACYOEMCP = 2457;

const int LOCALE_IDEFAULTCODEPAGE = 11;

const int LOCALE_IDEFAULTANSICODEPAGE = 4100;

const int LOCALE_IDEFAULTMACCODEPAGE = 4113;

const int LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;

const int LOCALE_ILANGUAGE = 1;

const int LOCALE_SABBREVLANGNAME = 3;

const int LOCALE_SABBREVCTRYNAME = 7;

const int LOCALE_IGEOID = 91;

const int LOCALE_IDEFAULTLANGUAGE = 9;

const int LOCALE_IDEFAULTCOUNTRY = 10;

const int LOCALE_IINTLCURRDIGITS = 26;

const int LOCALE_SDATE = 29;

const int LOCALE_STIME = 30;

const int LOCALE_IDATE = 33;

const int LOCALE_ILDATE = 34;

const int LOCALE_ITIME = 35;

const int LOCALE_ITIMEMARKPOSN = 4101;

const int LOCALE_ICENTURY = 36;

const int LOCALE_ITLZERO = 37;

const int LOCALE_IDAYLZERO = 38;

const int LOCALE_IMONLZERO = 39;

const int LOCALE_SKEYBOARDSTOINSTALL = 94;

const int LOCALE_SLANGUAGE = 2;

const int LOCALE_SLANGDISPLAYNAME = 111;

const int LOCALE_SENGLANGUAGE = 4097;

const int LOCALE_SNATIVELANGNAME = 4;

const int LOCALE_SCOUNTRY = 6;

const int LOCALE_SENGCOUNTRY = 4098;

const int LOCALE_SNATIVECTRYNAME = 8;

const int LOCALE_ICOUNTRY = 5;

const int LOCALE_S1159 = 40;

const int LOCALE_S2359 = 41;

const int TIME_NOMINUTESORSECONDS = 1;

const int TIME_NOSECONDS = 2;

const int TIME_NOTIMEMARKER = 4;

const int TIME_FORCE24HOURFORMAT = 8;

const int DATE_SHORTDATE = 1;

const int DATE_LONGDATE = 2;

const int DATE_USE_ALT_CALENDAR = 4;

const int DATE_YEARMONTH = 8;

const int DATE_LTRREADING = 16;

const int DATE_RTLREADING = 32;

const int DATE_AUTOLAYOUT = 64;

const int DATE_MONTHDAY = 128;

const int CAL_NOUSEROVERRIDE = 2147483648;

const int CAL_USE_CP_ACP = 1073741824;

const int CAL_RETURN_NUMBER = 536870912;

const int CAL_RETURN_GENITIVE_NAMES = 268435456;

const int CAL_ICALINTVALUE = 1;

const int CAL_SCALNAME = 2;

const int CAL_IYEAROFFSETRANGE = 3;

const int CAL_SERASTRING = 4;

const int CAL_SSHORTDATE = 5;

const int CAL_SLONGDATE = 6;

const int CAL_SDAYNAME1 = 7;

const int CAL_SDAYNAME2 = 8;

const int CAL_SDAYNAME3 = 9;

const int CAL_SDAYNAME4 = 10;

const int CAL_SDAYNAME5 = 11;

const int CAL_SDAYNAME6 = 12;

const int CAL_SDAYNAME7 = 13;

const int CAL_SABBREVDAYNAME1 = 14;

const int CAL_SABBREVDAYNAME2 = 15;

const int CAL_SABBREVDAYNAME3 = 16;

const int CAL_SABBREVDAYNAME4 = 17;

const int CAL_SABBREVDAYNAME5 = 18;

const int CAL_SABBREVDAYNAME6 = 19;

const int CAL_SABBREVDAYNAME7 = 20;

const int CAL_SMONTHNAME1 = 21;

const int CAL_SMONTHNAME2 = 22;

const int CAL_SMONTHNAME3 = 23;

const int CAL_SMONTHNAME4 = 24;

const int CAL_SMONTHNAME5 = 25;

const int CAL_SMONTHNAME6 = 26;

const int CAL_SMONTHNAME7 = 27;

const int CAL_SMONTHNAME8 = 28;

const int CAL_SMONTHNAME9 = 29;

const int CAL_SMONTHNAME10 = 30;

const int CAL_SMONTHNAME11 = 31;

const int CAL_SMONTHNAME12 = 32;

const int CAL_SMONTHNAME13 = 33;

const int CAL_SABBREVMONTHNAME1 = 34;

const int CAL_SABBREVMONTHNAME2 = 35;

const int CAL_SABBREVMONTHNAME3 = 36;

const int CAL_SABBREVMONTHNAME4 = 37;

const int CAL_SABBREVMONTHNAME5 = 38;

const int CAL_SABBREVMONTHNAME6 = 39;

const int CAL_SABBREVMONTHNAME7 = 40;

const int CAL_SABBREVMONTHNAME8 = 41;

const int CAL_SABBREVMONTHNAME9 = 42;

const int CAL_SABBREVMONTHNAME10 = 43;

const int CAL_SABBREVMONTHNAME11 = 44;

const int CAL_SABBREVMONTHNAME12 = 45;

const int CAL_SABBREVMONTHNAME13 = 46;

const int CAL_SYEARMONTH = 47;

const int CAL_ITWODIGITYEARMAX = 48;

const int CAL_SSHORTESTDAYNAME1 = 49;

const int CAL_SSHORTESTDAYNAME2 = 50;

const int CAL_SSHORTESTDAYNAME3 = 51;

const int CAL_SSHORTESTDAYNAME4 = 52;

const int CAL_SSHORTESTDAYNAME5 = 53;

const int CAL_SSHORTESTDAYNAME6 = 54;

const int CAL_SSHORTESTDAYNAME7 = 55;

const int CAL_SMONTHDAY = 56;

const int CAL_SABBREVERASTRING = 57;

const int CAL_SRELATIVELONGDATE = 58;

const int CAL_SENGLISHERANAME = 59;

const int CAL_SENGLISHABBREVERANAME = 60;

const int CAL_SJAPANESEERAFIRSTYEAR = 61;

const int ENUM_ALL_CALENDARS = 4294967295;

const int CAL_GREGORIAN = 1;

const int CAL_GREGORIAN_US = 2;

const int CAL_JAPAN = 3;

const int CAL_TAIWAN = 4;

const int CAL_KOREA = 5;

const int CAL_HIJRI = 6;

const int CAL_THAI = 7;

const int CAL_HEBREW = 8;

const int CAL_GREGORIAN_ME_FRENCH = 9;

const int CAL_GREGORIAN_ARABIC = 10;

const int CAL_GREGORIAN_XLIT_ENGLISH = 11;

const int CAL_GREGORIAN_XLIT_FRENCH = 12;

const int CAL_PERSIAN = 22;

const int CAL_UMALQURA = 23;

const int LGRPID_WESTERN_EUROPE = 1;

const int LGRPID_CENTRAL_EUROPE = 2;

const int LGRPID_BALTIC = 3;

const int LGRPID_GREEK = 4;

const int LGRPID_CYRILLIC = 5;

const int LGRPID_TURKIC = 6;

const int LGRPID_TURKISH = 6;

const int LGRPID_JAPANESE = 7;

const int LGRPID_KOREAN = 8;

const int LGRPID_TRADITIONAL_CHINESE = 9;

const int LGRPID_SIMPLIFIED_CHINESE = 10;

const int LGRPID_THAI = 11;

const int LGRPID_HEBREW = 12;

const int LGRPID_ARABIC = 13;

const int LGRPID_VIETNAMESE = 14;

const int LGRPID_INDIC = 15;

const int LGRPID_GEORGIAN = 16;

const int LGRPID_ARMENIAN = 17;

const int MUI_LANGUAGE_ID = 4;

const int MUI_LANGUAGE_NAME = 8;

const int MUI_MERGE_SYSTEM_FALLBACK = 16;

const int MUI_MERGE_USER_FALLBACK = 32;

const int MUI_UI_FALLBACK = 48;

const int MUI_THREAD_LANGUAGES = 64;

const int MUI_CONSOLE_FILTER = 256;

const int MUI_COMPLEX_SCRIPT_FILTER = 512;

const int MUI_RESET_FILTERS = 1;

const int MUI_USER_PREFERRED_UI_LANGUAGES = 16;

const int MUI_USE_INSTALLED_LANGUAGES = 32;

const int MUI_USE_SEARCH_ALL_LANGUAGES = 64;

const int MUI_LANG_NEUTRAL_PE_FILE = 256;

const int MUI_NON_LANG_NEUTRAL_FILE = 512;

const int MUI_MACHINE_LANGUAGE_SETTINGS = 1024;

const int MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;

const int MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;

const int MUI_QUERY_TYPE = 1;

const int MUI_QUERY_CHECKSUM = 2;

const int MUI_QUERY_LANGUAGE_NAME = 4;

const int MUI_QUERY_RESOURCE_TYPES = 8;

const int MUI_FILEINFO_VERSION = 1;

const int MUI_FULL_LANGUAGE = 1;

const int MUI_PARTIAL_LANGUAGE = 2;

const int MUI_LIP_LANGUAGE = 4;

const int MUI_LANGUAGE_INSTALLED = 32;

const int MUI_LANGUAGE_LICENSED = 64;

const int GEOID_NOT_AVAILABLE = -1;

const int SORTING_PARADIGM_NLS = 0;

const int SORTING_PARADIGM_ICU = 16777216;

const int GEO_NAME_USER_DEFAULT = 0;

const int IDN_ALLOW_UNASSIGNED = 1;

const int IDN_USE_STD3_ASCII_RULES = 2;

const int IDN_EMAIL_ADDRESS = 4;

const int IDN_RAW_PUNYCODE = 8;

const int VS_ALLOW_LATIN = 1;

const int GSS_ALLOW_INHERITED_COMMON = 1;

const int MUI_FORMAT_REG_COMPAT = 1;

const int MUI_FORMAT_INF_COMPAT = 2;

const int MUI_VERIFY_FILE_EXISTS = 4;

const int MUI_SKIP_STRING_CACHE = 8;

const int MUI_IMMUTABLE_LOOKUP = 16;

const int LOCALE_NAME_USER_DEFAULT = 0;

const String LOCALE_NAME_INVARIANT = '';

const String LOCALE_NAME_SYSTEM_DEFAULT = '!';

const int RIGHT_ALT_PRESSED = 1;

const int LEFT_ALT_PRESSED = 2;

const int RIGHT_CTRL_PRESSED = 4;

const int LEFT_CTRL_PRESSED = 8;

const int SHIFT_PRESSED = 16;

const int NUMLOCK_ON = 32;

const int SCROLLLOCK_ON = 64;

const int CAPSLOCK_ON = 128;

const int ENHANCED_KEY = 256;

const int NLS_DBCSCHAR = 65536;

const int NLS_ALPHANUMERIC = 0;

const int NLS_KATAKANA = 131072;

const int NLS_HIRAGANA = 262144;

const int NLS_ROMAN = 4194304;

const int NLS_IME_CONVERSION = 8388608;

const int ALTNUMPAD_BIT = 67108864;

const int NLS_IME_DISABLE = 536870912;

const int FROM_LEFT_1ST_BUTTON_PRESSED = 1;

const int RIGHTMOST_BUTTON_PRESSED = 2;

const int FROM_LEFT_2ND_BUTTON_PRESSED = 4;

const int FROM_LEFT_3RD_BUTTON_PRESSED = 8;

const int FROM_LEFT_4TH_BUTTON_PRESSED = 16;

const int MOUSE_MOVED = 1;

const int DOUBLE_CLICK = 2;

const int MOUSE_WHEELED = 4;

const int MOUSE_HWHEELED = 8;

const int KEY_EVENT = 1;

const int MOUSE_EVENT = 2;

const int WINDOW_BUFFER_SIZE_EVENT = 4;

const int MENU_EVENT = 8;

const int FOCUS_EVENT = 16;

const int ATTACH_PARENT_PROCESS = 4294967295;

const int ENABLE_PROCESSED_INPUT = 1;

const int ENABLE_LINE_INPUT = 2;

const int ENABLE_ECHO_INPUT = 4;

const int ENABLE_WINDOW_INPUT = 8;

const int ENABLE_MOUSE_INPUT = 16;

const int ENABLE_INSERT_MODE = 32;

const int ENABLE_QUICK_EDIT_MODE = 64;

const int ENABLE_EXTENDED_FLAGS = 128;

const int ENABLE_AUTO_POSITION = 256;

const int ENABLE_VIRTUAL_TERMINAL_INPUT = 512;

const int ENABLE_PROCESSED_OUTPUT = 1;

const int ENABLE_WRAP_AT_EOL_OUTPUT = 2;

const int ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;

const int DISABLE_NEWLINE_AUTO_RETURN = 8;

const int ENABLE_LVB_GRID_WORLDWIDE = 16;

const int CTRL_C_EVENT = 0;

const int CTRL_BREAK_EVENT = 1;

const int CTRL_CLOSE_EVENT = 2;

const int CTRL_LOGOFF_EVENT = 5;

const int CTRL_SHUTDOWN_EVENT = 6;

const int PSEUDOCONSOLE_INHERIT_CURSOR = 1;

const int FOREGROUND_BLUE = 1;

const int FOREGROUND_GREEN = 2;

const int FOREGROUND_RED = 4;

const int FOREGROUND_INTENSITY = 8;

const int BACKGROUND_BLUE = 16;

const int BACKGROUND_GREEN = 32;

const int BACKGROUND_RED = 64;

const int BACKGROUND_INTENSITY = 128;

const int COMMON_LVB_LEADING_BYTE = 256;

const int COMMON_LVB_TRAILING_BYTE = 512;

const int COMMON_LVB_GRID_HORIZONTAL = 1024;

const int COMMON_LVB_GRID_LVERTICAL = 2048;

const int COMMON_LVB_GRID_RVERTICAL = 4096;

const int COMMON_LVB_REVERSE_VIDEO = 16384;

const int COMMON_LVB_UNDERSCORE = 32768;

const int COMMON_LVB_SBCSDBCS = 768;

const int CONSOLE_NO_SELECTION = 0;

const int CONSOLE_SELECTION_IN_PROGRESS = 1;

const int CONSOLE_SELECTION_NOT_EMPTY = 2;

const int CONSOLE_MOUSE_SELECTION = 4;

const int CONSOLE_MOUSE_DOWN = 8;

const int HISTORY_NO_DUP_FLAG = 1;

const int CONSOLE_FULLSCREEN = 1;

const int CONSOLE_FULLSCREEN_HARDWARE = 2;

const int CONSOLE_FULLSCREEN_MODE = 1;

const int CONSOLE_WINDOWED_MODE = 2;

const int CONSOLE_TEXTMODE_BUFFER = 1;

const int VS_VERSION_INFO = 1;

const int VS_USER_DEFINED = 100;

const int VS_FFI_SIGNATURE = 4277077181;

const int VS_FFI_STRUCVERSION = 65536;

const int VS_FFI_FILEFLAGSMASK = 63;

const int VS_FF_DEBUG = 1;

const int VS_FF_PRERELEASE = 2;

const int VS_FF_PATCHED = 4;

const int VS_FF_PRIVATEBUILD = 8;

const int VS_FF_INFOINFERRED = 16;

const int VS_FF_SPECIALBUILD = 32;

const int VOS_UNKNOWN = 0;

const int VOS_DOS = 65536;

const int VOS_OS216 = 131072;

const int VOS_OS232 = 196608;

const int VOS_NT = 262144;

const int VOS_WINCE = 327680;

const int VOS__BASE = 0;

const int VOS__WINDOWS16 = 1;

const int VOS__PM16 = 2;

const int VOS__PM32 = 3;

const int VOS__WINDOWS32 = 4;

const int VOS_DOS_WINDOWS16 = 65537;

const int VOS_DOS_WINDOWS32 = 65540;

const int VOS_OS216_PM16 = 131074;

const int VOS_OS232_PM32 = 196611;

const int VOS_NT_WINDOWS32 = 262148;

const int VFT_UNKNOWN = 0;

const int VFT_APP = 1;

const int VFT_DLL = 2;

const int VFT_DRV = 3;

const int VFT_FONT = 4;

const int VFT_VXD = 5;

const int VFT_STATIC_LIB = 7;

const int VFT2_UNKNOWN = 0;

const int VFT2_DRV_PRINTER = 1;

const int VFT2_DRV_KEYBOARD = 2;

const int VFT2_DRV_LANGUAGE = 3;

const int VFT2_DRV_DISPLAY = 4;

const int VFT2_DRV_MOUSE = 5;

const int VFT2_DRV_NETWORK = 6;

const int VFT2_DRV_SYSTEM = 7;

const int VFT2_DRV_INSTALLABLE = 8;

const int VFT2_DRV_SOUND = 9;

const int VFT2_DRV_COMM = 10;

const int VFT2_DRV_INPUTMETHOD = 11;

const int VFT2_DRV_VERSIONED_PRINTER = 12;

const int VFT2_FONT_RASTER = 1;

const int VFT2_FONT_VECTOR = 2;

const int VFT2_FONT_TRUETYPE = 3;

const int VFFF_ISSHAREDFILE = 1;

const int VFF_CURNEDEST = 1;

const int VFF_FILEINUSE = 2;

const int VFF_BUFFTOOSMALL = 4;

const int VIFF_FORCEINSTALL = 1;

const int VIFF_DONTDELETEOLD = 2;

const int VIF_TEMPFILE = 1;

const int VIF_MISMATCH = 2;

const int VIF_SRCOLD = 4;

const int VIF_DIFFLANG = 8;

const int VIF_DIFFCODEPG = 16;

const int VIF_DIFFTYPE = 32;

const int VIF_WRITEPROT = 64;

const int VIF_FILEINUSE = 128;

const int VIF_OUTOFSPACE = 256;

const int VIF_ACCESSVIOLATION = 512;

const int VIF_SHARINGVIOLATION = 1024;

const int VIF_CANNOTCREATE = 2048;

const int VIF_CANNOTDELETE = 4096;

const int VIF_CANNOTRENAME = 8192;

const int VIF_CANNOTDELETECUR = 16384;

const int VIF_OUTOFMEMORY = 32768;

const int VIF_CANNOTREADSRC = 65536;

const int VIF_CANNOTREADDST = 131072;

const int VIF_BUFFTOOSMALL = 262144;

const int VIF_CANNOTLOADLZ32 = 524288;

const int VIF_CANNOTLOADCABINET = 1048576;

const int FILE_VER_GET_LOCALISED = 1;

const int FILE_VER_GET_NEUTRAL = 2;

const int FILE_VER_GET_PREFETCHED = 4;

const int RRF_RT_REG_NONE = 1;

const int RRF_RT_REG_SZ = 2;

const int RRF_RT_REG_EXPAND_SZ = 4;

const int RRF_RT_REG_BINARY = 8;

const int RRF_RT_REG_DWORD = 16;

const int RRF_RT_REG_MULTI_SZ = 32;

const int RRF_RT_REG_QWORD = 64;

const int RRF_RT_DWORD = 24;

const int RRF_RT_QWORD = 72;

const int RRF_RT_ANY = 65535;

const int RRF_SUBKEY_WOW6464KEY = 65536;

const int RRF_SUBKEY_WOW6432KEY = 131072;

const int RRF_WOW64_MASK = 196608;

const int RRF_NOEXPAND = 268435456;

const int RRF_ZEROONFAILURE = 536870912;

const int REG_PROCESS_APPKEY = 1;

const int REG_USE_CURRENT_SECURITY_CONTEXT = 2;

const int PROVIDER_KEEPS_VALUE_LENGTH = 1;

const int WIN31_CLASS = 0;

const int REG_MUI_STRING_TRUNCATE = 1;

const int REG_SECURE_CONNECTION = 1;

const int SHTDN_REASON_FLAG_COMMENT_REQUIRED = 16777216;

const int SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 33554432;

const int SHTDN_REASON_FLAG_CLEAN_UI = 67108864;

const int SHTDN_REASON_FLAG_DIRTY_UI = 134217728;

const int SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = 268435456;

const int SHTDN_REASON_FLAG_USER_DEFINED = 1073741824;

const int SHTDN_REASON_FLAG_PLANNED = 2147483648;

const int SHTDN_REASON_MAJOR_OTHER = 0;

const int SHTDN_REASON_MAJOR_NONE = 0;

const int SHTDN_REASON_MAJOR_HARDWARE = 65536;

const int SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 131072;

const int SHTDN_REASON_MAJOR_SOFTWARE = 196608;

const int SHTDN_REASON_MAJOR_APPLICATION = 262144;

const int SHTDN_REASON_MAJOR_SYSTEM = 327680;

const int SHTDN_REASON_MAJOR_POWER = 393216;

const int SHTDN_REASON_MAJOR_LEGACY_API = 458752;

const int SHTDN_REASON_MINOR_OTHER = 0;

const int SHTDN_REASON_MINOR_NONE = 255;

const int SHTDN_REASON_MINOR_MAINTENANCE = 1;

const int SHTDN_REASON_MINOR_INSTALLATION = 2;

const int SHTDN_REASON_MINOR_UPGRADE = 3;

const int SHTDN_REASON_MINOR_RECONFIG = 4;

const int SHTDN_REASON_MINOR_HUNG = 5;

const int SHTDN_REASON_MINOR_UNSTABLE = 6;

const int SHTDN_REASON_MINOR_DISK = 7;

const int SHTDN_REASON_MINOR_PROCESSOR = 8;

const int SHTDN_REASON_MINOR_NETWORKCARD = 9;

const int SHTDN_REASON_MINOR_POWER_SUPPLY = 10;

const int SHTDN_REASON_MINOR_CORDUNPLUGGED = 11;

const int SHTDN_REASON_MINOR_ENVIRONMENT = 12;

const int SHTDN_REASON_MINOR_HARDWARE_DRIVER = 13;

const int SHTDN_REASON_MINOR_OTHERDRIVER = 14;

const int SHTDN_REASON_MINOR_BLUESCREEN = 15;

const int SHTDN_REASON_MINOR_SERVICEPACK = 16;

const int SHTDN_REASON_MINOR_HOTFIX = 17;

const int SHTDN_REASON_MINOR_SECURITYFIX = 18;

const int SHTDN_REASON_MINOR_SECURITY = 19;

const int SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 20;

const int SHTDN_REASON_MINOR_WMI = 21;

const int SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 22;

const int SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 23;

const int SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 24;

const int SHTDN_REASON_MINOR_MMC = 25;

const int SHTDN_REASON_MINOR_SYSTEMRESTORE = 26;

const int SHTDN_REASON_MINOR_TERMSRV = 32;

const int SHTDN_REASON_MINOR_DC_PROMOTION = 33;

const int SHTDN_REASON_MINOR_DC_DEMOTION = 34;

const int SHTDN_REASON_UNKNOWN = 255;

const int SHTDN_REASON_LEGACY_API = 2147942400;

const int SHTDN_REASON_VALID_BIT_MASK = 3238002687;

const int PCLEANUI = 2214592512;

const int UCLEANUI = 67108864;

const int PDIRTYUI = 2281701376;

const int UDIRTYUI = 134217728;

const int MAX_REASON_NAME_LEN = 64;

const int MAX_REASON_DESC_LEN = 256;

const int MAX_REASON_BUGID_LEN = 32;

const int MAX_REASON_COMMENT_LEN = 512;

const int SHUTDOWN_TYPE_LEN = 32;

const int POLICY_SHOWREASONUI_NEVER = 0;

const int POLICY_SHOWREASONUI_ALWAYS = 1;

const int POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;

const int POLICY_SHOWREASONUI_SERVERONLY = 3;

const int SNAPSHOT_POLICY_NEVER = 0;

const int SNAPSHOT_POLICY_ALWAYS = 1;

const int SNAPSHOT_POLICY_UNPLANNED = 2;

const int MAX_NUM_REASONS = 256;

const int REASON_SWINSTALL = 196610;

const int REASON_HWINSTALL = 65538;

const int REASON_SERVICEHANG = 196613;

const int REASON_UNSTABLE = 327686;

const int REASON_SWHWRECONF = 196612;

const int REASON_OTHER = 0;

const int REASON_UNKNOWN = 255;

const int REASON_LEGACY_API = 2147942400;

const int REASON_PLANNED_FLAG = 2147483648;

const int MAX_SHUTDOWN_TIMEOUT = 315360000;

const int SHUTDOWN_FORCE_OTHERS = 1;

const int SHUTDOWN_FORCE_SELF = 2;

const int SHUTDOWN_RESTART = 4;

const int SHUTDOWN_POWEROFF = 8;

const int SHUTDOWN_NOREBOOT = 16;

const int SHUTDOWN_GRACE_OVERRIDE = 32;

const int SHUTDOWN_INSTALL_UPDATES = 64;

const int SHUTDOWN_RESTARTAPPS = 128;

const int SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 256;

const int SHUTDOWN_HYBRID = 512;

const int SHUTDOWN_RESTART_BOOTOPTIONS = 1024;

const int SHUTDOWN_SOFT_REBOOT = 2048;

const int SHUTDOWN_MOBILE_UI = 4096;

const int SHUTDOWN_ARSO = 8192;

const int SHUTDOWN_CHECK_SAFE_FOR_SERVER = 16384;

const int SHUTDOWN_VAIL_CONTAINER = 32768;

const int SHUTDOWN_SYSTEM_INITIATED = 65536;

const int WNNC_NET_MSNET = 65536;

const int WNNC_NET_SMB = 131072;

const int WNNC_NET_NETWARE = 196608;

const int WNNC_NET_VINES = 262144;

const int WNNC_NET_10NET = 327680;

const int WNNC_NET_LOCUS = 393216;

const int WNNC_NET_SUN_PC_NFS = 458752;

const int WNNC_NET_LANSTEP = 524288;

const int WNNC_NET_9TILES = 589824;

const int WNNC_NET_LANTASTIC = 655360;

const int WNNC_NET_AS400 = 720896;

const int WNNC_NET_FTP_NFS = 786432;

const int WNNC_NET_PATHWORKS = 851968;

const int WNNC_NET_LIFENET = 917504;

const int WNNC_NET_POWERLAN = 983040;

const int WNNC_NET_BWNFS = 1048576;

const int WNNC_NET_COGENT = 1114112;

const int WNNC_NET_FARALLON = 1179648;

const int WNNC_NET_APPLETALK = 1245184;

const int WNNC_NET_INTERGRAPH = 1310720;

const int WNNC_NET_SYMFONET = 1376256;

const int WNNC_NET_CLEARCASE = 1441792;

const int WNNC_NET_FRONTIER = 1507328;

const int WNNC_NET_BMC = 1572864;

const int WNNC_NET_DCE = 1638400;

const int WNNC_NET_AVID = 1703936;

const int WNNC_NET_DOCUSPACE = 1769472;

const int WNNC_NET_MANGOSOFT = 1835008;

const int WNNC_NET_SERNET = 1900544;

const int WNNC_NET_RIVERFRONT1 = 1966080;

const int WNNC_NET_RIVERFRONT2 = 2031616;

const int WNNC_NET_DECORB = 2097152;

const int WNNC_NET_PROTSTOR = 2162688;

const int WNNC_NET_FJ_REDIR = 2228224;

const int WNNC_NET_DISTINCT = 2293760;

const int WNNC_NET_TWINS = 2359296;

const int WNNC_NET_RDR2SAMPLE = 2424832;

const int WNNC_NET_CSC = 2490368;

const int WNNC_NET_3IN1 = 2555904;

const int WNNC_NET_EXTENDNET = 2686976;

const int WNNC_NET_STAC = 2752512;

const int WNNC_NET_FOXBAT = 2818048;

const int WNNC_NET_YAHOO = 2883584;

const int WNNC_NET_EXIFS = 2949120;

const int WNNC_NET_DAV = 3014656;

const int WNNC_NET_KNOWARE = 3080192;

const int WNNC_NET_OBJECT_DIRE = 3145728;

const int WNNC_NET_MASFAX = 3211264;

const int WNNC_NET_HOB_NFS = 3276800;

const int WNNC_NET_SHIVA = 3342336;

const int WNNC_NET_IBMAL = 3407872;

const int WNNC_NET_LOCK = 3473408;

const int WNNC_NET_TERMSRV = 3538944;

const int WNNC_NET_SRT = 3604480;

const int WNNC_NET_QUINCY = 3670016;

const int WNNC_NET_OPENAFS = 3735552;

const int WNNC_NET_AVID1 = 3801088;

const int WNNC_NET_DFS = 3866624;

const int WNNC_NET_KWNP = 3932160;

const int WNNC_NET_ZENWORKS = 3997696;

const int WNNC_NET_DRIVEONWEB = 4063232;

const int WNNC_NET_VMWARE = 4128768;

const int WNNC_NET_RSFX = 4194304;

const int WNNC_NET_MFILES = 4259840;

const int WNNC_NET_MS_NFS = 4325376;

const int WNNC_NET_GOOGLE = 4390912;

const int WNNC_NET_NDFS = 4456448;

const int WNNC_NET_DOCUSHARE = 4521984;

const int WNNC_NET_AURISTOR_FS = 4587520;

const int WNNC_NET_SECUREAGENT = 4653056;

const int WNNC_NET_9P = 4718592;

const int WNNC_CRED_MANAGER = 4294901760;

const int WNNC_NET_LANMAN = 131072;

const int RESOURCE_CONNECTED = 1;

const int RESOURCE_GLOBALNET = 2;

const int RESOURCE_REMEMBERED = 3;

const int RESOURCE_RECENT = 4;

const int RESOURCE_CONTEXT = 5;

const int RESOURCETYPE_ANY = 0;

const int RESOURCETYPE_DISK = 1;

const int RESOURCETYPE_PRINT = 2;

const int RESOURCETYPE_RESERVED = 8;

const int RESOURCETYPE_UNKNOWN = 4294967295;

const int RESOURCEUSAGE_CONNECTABLE = 1;

const int RESOURCEUSAGE_CONTAINER = 2;

const int RESOURCEUSAGE_NOLOCALDEVICE = 4;

const int RESOURCEUSAGE_SIBLING = 8;

const int RESOURCEUSAGE_ATTACHED = 16;

const int RESOURCEUSAGE_ALL = 19;

const int RESOURCEUSAGE_RESERVED = 2147483648;

const int RESOURCEDISPLAYTYPE_GENERIC = 0;

const int RESOURCEDISPLAYTYPE_DOMAIN = 1;

const int RESOURCEDISPLAYTYPE_SERVER = 2;

const int RESOURCEDISPLAYTYPE_SHARE = 3;

const int RESOURCEDISPLAYTYPE_FILE = 4;

const int RESOURCEDISPLAYTYPE_GROUP = 5;

const int RESOURCEDISPLAYTYPE_NETWORK = 6;

const int RESOURCEDISPLAYTYPE_ROOT = 7;

const int RESOURCEDISPLAYTYPE_SHAREADMIN = 8;

const int RESOURCEDISPLAYTYPE_DIRECTORY = 9;

const int RESOURCEDISPLAYTYPE_TREE = 10;

const int RESOURCEDISPLAYTYPE_NDSCONTAINER = 11;

const int NETPROPERTY_PERSISTENT = 1;

const int CONNECT_UPDATE_PROFILE = 1;

const int CONNECT_UPDATE_RECENT = 2;

const int CONNECT_TEMPORARY = 4;

const int CONNECT_INTERACTIVE = 8;

const int CONNECT_PROMPT = 16;

const int CONNECT_NEED_DRIVE = 32;

const int CONNECT_REFCOUNT = 64;

const int CONNECT_REDIRECT = 128;

const int CONNECT_LOCALDRIVE = 256;

const int CONNECT_CURRENT_MEDIA = 512;

const int CONNECT_DEFERRED = 1024;

const int CONNECT_RESERVED = 4278190080;

const int CONNECT_COMMANDLINE = 2048;

const int CONNECT_CMD_SAVECRED = 4096;

const int CONNECT_CRED_RESET = 8192;

const int CONNECT_REQUIRE_INTEGRITY = 16384;

const int CONNECT_REQUIRE_PRIVACY = 32768;

const int CONNECT_WRITE_THROUGH_SEMANTICS = 65536;

const int CONNECT_GLOBAL_MAPPING = 262144;

const int CONNDLG_RO_PATH = 1;

const int CONNDLG_CONN_POINT = 2;

const int CONNDLG_USE_MRU = 4;

const int CONNDLG_HIDE_BOX = 8;

const int CONNDLG_PERSIST = 16;

const int CONNDLG_NOT_PERSIST = 32;

const int DISC_UPDATE_PROFILE = 1;

const int DISC_NO_FORCE = 64;

const int UNIVERSAL_NAME_INFO_LEVEL = 1;

const int REMOTE_NAME_INFO_LEVEL = 2;

const int WNFMT_MULTILINE = 1;

const int WNFMT_ABBREVIATED = 2;

const int WNFMT_INENUM = 16;

const int WNFMT_CONNECTION = 32;

const int NETINFO_DLL16 = 1;

const int NETINFO_DISKRED = 4;

const int NETINFO_PRINTERRED = 8;

const int WN_SUCCESS = 0;

const int WN_NO_ERROR = 0;

const int WN_NOT_SUPPORTED = 50;

const int WN_CANCEL = 1223;

const int WN_RETRY = 1237;

const int WN_NET_ERROR = 59;

const int WN_MORE_DATA = 234;

const int WN_BAD_POINTER = 487;

const int WN_BAD_VALUE = 87;

const int WN_BAD_USER = 2202;

const int WN_BAD_PASSWORD = 86;

const int WN_ACCESS_DENIED = 5;

const int WN_FUNCTION_BUSY = 170;

const int WN_WINDOWS_ERROR = 59;

const int WN_OUT_OF_MEMORY = 8;

const int WN_NO_NETWORK = 1222;

const int WN_EXTENDED_ERROR = 1208;

const int WN_BAD_LEVEL = 124;

const int WN_BAD_HANDLE = 6;

const int WN_NOT_INITIALIZING = 1247;

const int WN_NO_MORE_DEVICES = 1248;

const int WN_NOT_CONNECTED = 2250;

const int WN_OPEN_FILES = 2401;

const int WN_DEVICE_IN_USE = 2404;

const int WN_BAD_NETNAME = 67;

const int WN_BAD_LOCALNAME = 1200;

const int WN_ALREADY_CONNECTED = 85;

const int WN_DEVICE_ERROR = 31;

const int WN_CONNECTION_CLOSED = 1201;

const int WN_NO_NET_OR_BAD_PATH = 1203;

const int WN_BAD_PROVIDER = 1204;

const int WN_CANNOT_OPEN_PROFILE = 1205;

const int WN_BAD_PROFILE = 1206;

const int WN_BAD_DEV_TYPE = 66;

const int WN_DEVICE_ALREADY_REMEMBERED = 1202;

const int WN_CONNECTED_OTHER_PASSWORD = 2108;

const int WN_CONNECTED_OTHER_PASSWORD_DEFAULT = 2109;

const int WN_NO_MORE_ENTRIES = 259;

const int WN_NOT_CONTAINER = 1207;

const int WN_NOT_AUTHENTICATED = 1244;

const int WN_NOT_LOGGED_ON = 1245;

const int WN_NOT_VALIDATED = 1311;

const int WNCON_FORNETCARD = 1;

const int WNCON_NOTROUTED = 2;

const int WNCON_SLOWLINK = 4;

const int WNCON_DYNAMIC = 8;

const int CDERR_DIALOGFAILURE = 65535;

const int CDERR_GENERALCODES = 0;

const int CDERR_STRUCTSIZE = 1;

const int CDERR_INITIALIZATION = 2;

const int CDERR_NOTEMPLATE = 3;

const int CDERR_NOHINSTANCE = 4;

const int CDERR_LOADSTRFAILURE = 5;

const int CDERR_FINDRESFAILURE = 6;

const int CDERR_LOADRESFAILURE = 7;

const int CDERR_LOCKRESFAILURE = 8;

const int CDERR_MEMALLOCFAILURE = 9;

const int CDERR_MEMLOCKFAILURE = 10;

const int CDERR_NOHOOK = 11;

const int CDERR_REGISTERMSGFAIL = 12;

const int PDERR_PRINTERCODES = 4096;

const int PDERR_SETUPFAILURE = 4097;

const int PDERR_PARSEFAILURE = 4098;

const int PDERR_RETDEFFAILURE = 4099;

const int PDERR_LOADDRVFAILURE = 4100;

const int PDERR_GETDEVMODEFAIL = 4101;

const int PDERR_INITFAILURE = 4102;

const int PDERR_NODEVICES = 4103;

const int PDERR_NODEFAULTPRN = 4104;

const int PDERR_DNDMMISMATCH = 4105;

const int PDERR_CREATEICFAILURE = 4106;

const int PDERR_PRINTERNOTFOUND = 4107;

const int PDERR_DEFAULTDIFFERENT = 4108;

const int CFERR_CHOOSEFONTCODES = 8192;

const int CFERR_NOFONTS = 8193;

const int CFERR_MAXLESSTHANMIN = 8194;

const int FNERR_FILENAMECODES = 12288;

const int FNERR_SUBCLASSFAILURE = 12289;

const int FNERR_INVALIDFILENAME = 12290;

const int FNERR_BUFFERTOOSMALL = 12291;

const int FRERR_FINDREPLACECODES = 16384;

const int FRERR_BUFFERLENGTHZERO = 16385;

const int CCERR_CHOOSECOLORCODES = 20480;

const int WM_DDE_FIRST = 992;

const int WM_DDE_INITIATE = 992;

const int WM_DDE_TERMINATE = 993;

const int WM_DDE_ADVISE = 994;

const int WM_DDE_UNADVISE = 995;

const int WM_DDE_ACK = 996;

const int WM_DDE_DATA = 997;

const int WM_DDE_REQUEST = 998;

const int WM_DDE_POKE = 999;

const int WM_DDE_EXECUTE = 1000;

const int WM_DDE_LAST = 1000;

const int XST_NULL = 0;

const int XST_INCOMPLETE = 1;

const int XST_CONNECTED = 2;

const int XST_INIT1 = 3;

const int XST_INIT2 = 4;

const int XST_REQSENT = 5;

const int XST_DATARCVD = 6;

const int XST_POKESENT = 7;

const int XST_POKEACKRCVD = 8;

const int XST_EXECSENT = 9;

const int XST_EXECACKRCVD = 10;

const int XST_ADVSENT = 11;

const int XST_UNADVSENT = 12;

const int XST_ADVACKRCVD = 13;

const int XST_UNADVACKRCVD = 14;

const int XST_ADVDATASENT = 15;

const int XST_ADVDATAACKRCVD = 16;

const int CADV_LATEACK = 65535;

const int ST_CONNECTED = 1;

const int ST_ADVISE = 2;

const int ST_ISLOCAL = 4;

const int ST_BLOCKED = 8;

const int ST_CLIENT = 16;

const int ST_TERMINATED = 32;

const int ST_INLIST = 64;

const int ST_BLOCKNEXT = 128;

const int ST_ISSELF = 256;

const int DDE_FACK = 32768;

const int DDE_FBUSY = 16384;

const int DDE_FDEFERUPD = 16384;

const int DDE_FACKREQ = 32768;

const int DDE_FRELEASE = 8192;

const int DDE_FREQUESTED = 4096;

const int DDE_FAPPSTATUS = 255;

const int DDE_FNOTPROCESSED = 0;

const int DDE_FACKRESERVED = -49408;

const int DDE_FADVRESERVED = -49153;

const int DDE_FDATRESERVED = -45057;

const int DDE_FPOKRESERVED = -8193;

const int MSGF_DDEMGR = 32769;

const int CP_WINANSI = 1004;

const int CP_WINUNICODE = 1200;

const int CP_WINNEUTRAL = 1004;

const int XTYPF_NOBLOCK = 2;

const int XTYPF_NODATA = 4;

const int XTYPF_ACKREQ = 8;

const int XCLASS_MASK = 64512;

const int XCLASS_BOOL = 4096;

const int XCLASS_DATA = 8192;

const int XCLASS_FLAGS = 16384;

const int XCLASS_NOTIFICATION = 32768;

const int XTYP_ERROR = 32770;

const int XTYP_ADVDATA = 16400;

const int XTYP_ADVREQ = 8226;

const int XTYP_ADVSTART = 4144;

const int XTYP_ADVSTOP = 32832;

const int XTYP_EXECUTE = 16464;

const int XTYP_CONNECT = 4194;

const int XTYP_CONNECT_CONFIRM = 32882;

const int XTYP_XACT_COMPLETE = 32896;

const int XTYP_POKE = 16528;

const int XTYP_REGISTER = 32930;

const int XTYP_REQUEST = 8368;

const int XTYP_DISCONNECT = 32962;

const int XTYP_UNREGISTER = 32978;

const int XTYP_WILDCONNECT = 8418;

const int XTYP_MASK = 240;

const int XTYP_SHIFT = 4;

const int TIMEOUT_ASYNC = 4294967295;

const int QID_SYNC = 4294967295;

const String SZDDESYS_TOPIC = 'System';

const String SZDDESYS_ITEM_TOPICS = 'Topics';

const String SZDDESYS_ITEM_SYSITEMS = 'SysItems';

const String SZDDESYS_ITEM_RTNMSG = 'ReturnMessage';

const String SZDDESYS_ITEM_STATUS = 'Status';

const String SZDDESYS_ITEM_FORMATS = 'Formats';

const String SZDDESYS_ITEM_HELP = 'Help';

const String SZDDE_ITEM_ITEMLIST = 'TopicItemList';

const int CBF_FAIL_SELFCONNECTIONS = 4096;

const int CBF_FAIL_CONNECTIONS = 8192;

const int CBF_FAIL_ADVISES = 16384;

const int CBF_FAIL_EXECUTES = 32768;

const int CBF_FAIL_POKES = 65536;

const int CBF_FAIL_REQUESTS = 131072;

const int CBF_FAIL_ALLSVRXACTIONS = 258048;

const int CBF_SKIP_CONNECT_CONFIRMS = 262144;

const int CBF_SKIP_REGISTRATIONS = 524288;

const int CBF_SKIP_UNREGISTRATIONS = 1048576;

const int CBF_SKIP_DISCONNECTS = 2097152;

const int CBF_SKIP_ALLNOTIFICATIONS = 3932160;

const int APPCMD_CLIENTONLY = 16;

const int APPCMD_FILTERINITS = 32;

const int APPCMD_MASK = 4080;

const int APPCLASS_STANDARD = 0;

const int APPCLASS_MASK = 15;

const int EC_ENABLEALL = 0;

const int EC_ENABLEONE = 128;

const int EC_DISABLE = 8;

const int EC_QUERYWAITING = 2;

const int DNS_REGISTER = 1;

const int DNS_UNREGISTER = 2;

const int DNS_FILTERON = 4;

const int DNS_FILTEROFF = 8;

const int HDATA_APPOWNED = 1;

const int DMLERR_NO_ERROR = 0;

const int DMLERR_FIRST = 16384;

const int DMLERR_ADVACKTIMEOUT = 16384;

const int DMLERR_BUSY = 16385;

const int DMLERR_DATAACKTIMEOUT = 16386;

const int DMLERR_DLL_NOT_INITIALIZED = 16387;

const int DMLERR_DLL_USAGE = 16388;

const int DMLERR_EXECACKTIMEOUT = 16389;

const int DMLERR_INVALIDPARAMETER = 16390;

const int DMLERR_LOW_MEMORY = 16391;

const int DMLERR_MEMORY_ERROR = 16392;

const int DMLERR_NOTPROCESSED = 16393;

const int DMLERR_NO_CONV_ESTABLISHED = 16394;

const int DMLERR_POKEACKTIMEOUT = 16395;

const int DMLERR_POSTMSG_FAILED = 16396;

const int DMLERR_REENTRANCY = 16397;

const int DMLERR_SERVER_DIED = 16398;

const int DMLERR_SYS_ERROR = 16399;

const int DMLERR_UNADVACKTIMEOUT = 16400;

const int DMLERR_UNFOUND_QUEUE_ID = 16401;

const int DMLERR_LAST = 16401;

const int MH_CREATE = 1;

const int MH_KEEP = 2;

const int MH_DELETE = 3;

const int MH_CLEANUP = 4;

const int MAX_MONITORS = 4;

const int APPCLASS_MONITOR = 1;

const int XTYP_MONITOR = 33010;

const int MF_HSZ_INFO = 16777216;

const int MF_SENDMSGS = 33554432;

const int MF_POSTMSGS = 67108864;

const int MF_CALLBACKS = 134217728;

const int MF_ERRORS = 268435456;

const int MF_LINKS = 536870912;

const int MF_CONV = 1073741824;

const int MF_MASK = 4278190080;

const int ctlFirst = 1024;

const int ctlLast = 1279;

const int psh1 = 1024;

const int psh2 = 1025;

const int psh3 = 1026;

const int psh4 = 1027;

const int psh5 = 1028;

const int psh6 = 1029;

const int psh7 = 1030;

const int psh8 = 1031;

const int psh9 = 1032;

const int psh10 = 1033;

const int psh11 = 1034;

const int psh12 = 1035;

const int psh13 = 1036;

const int psh14 = 1037;

const int psh15 = 1038;

const int pshHelp = 1038;

const int psh16 = 1039;

const int chx1 = 1040;

const int chx2 = 1041;

const int chx3 = 1042;

const int chx4 = 1043;

const int chx5 = 1044;

const int chx6 = 1045;

const int chx7 = 1046;

const int chx8 = 1047;

const int chx9 = 1048;

const int chx10 = 1049;

const int chx11 = 1050;

const int chx12 = 1051;

const int chx13 = 1052;

const int chx14 = 1053;

const int chx15 = 1054;

const int chx16 = 1055;

const int rad1 = 1056;

const int rad2 = 1057;

const int rad3 = 1058;

const int rad4 = 1059;

const int rad5 = 1060;

const int rad6 = 1061;

const int rad7 = 1062;

const int rad8 = 1063;

const int rad9 = 1064;

const int rad10 = 1065;

const int rad11 = 1066;

const int rad12 = 1067;

const int rad13 = 1068;

const int rad14 = 1069;

const int rad15 = 1070;

const int rad16 = 1071;

const int grp1 = 1072;

const int grp2 = 1073;

const int grp3 = 1074;

const int grp4 = 1075;

const int frm1 = 1076;

const int frm2 = 1077;

const int frm3 = 1078;

const int frm4 = 1079;

const int rct1 = 1080;

const int rct2 = 1081;

const int rct3 = 1082;

const int rct4 = 1083;

const int ico1 = 1084;

const int ico2 = 1085;

const int ico3 = 1086;

const int ico4 = 1087;

const int stc1 = 1088;

const int stc2 = 1089;

const int stc3 = 1090;

const int stc4 = 1091;

const int stc5 = 1092;

const int stc6 = 1093;

const int stc7 = 1094;

const int stc8 = 1095;

const int stc9 = 1096;

const int stc10 = 1097;

const int stc11 = 1098;

const int stc12 = 1099;

const int stc13 = 1100;

const int stc14 = 1101;

const int stc15 = 1102;

const int stc16 = 1103;

const int stc17 = 1104;

const int stc18 = 1105;

const int stc19 = 1106;

const int stc20 = 1107;

const int stc21 = 1108;

const int stc22 = 1109;

const int stc23 = 1110;

const int stc24 = 1111;

const int stc25 = 1112;

const int stc26 = 1113;

const int stc27 = 1114;

const int stc28 = 1115;

const int stc29 = 1116;

const int stc30 = 1117;

const int stc31 = 1118;

const int stc32 = 1119;

const int lst1 = 1120;

const int lst2 = 1121;

const int lst3 = 1122;

const int lst4 = 1123;

const int lst5 = 1124;

const int lst6 = 1125;

const int lst7 = 1126;

const int lst8 = 1127;

const int lst9 = 1128;

const int lst10 = 1129;

const int lst11 = 1130;

const int lst12 = 1131;

const int lst13 = 1132;

const int lst14 = 1133;

const int lst15 = 1134;

const int lst16 = 1135;

const int cmb1 = 1136;

const int cmb2 = 1137;

const int cmb3 = 1138;

const int cmb4 = 1139;

const int cmb5 = 1140;

const int cmb6 = 1141;

const int cmb7 = 1142;

const int cmb8 = 1143;

const int cmb9 = 1144;

const int cmb10 = 1145;

const int cmb11 = 1146;

const int cmb12 = 1147;

const int cmb13 = 1148;

const int cmb14 = 1149;

const int cmb15 = 1150;

const int cmb16 = 1151;

const int edt1 = 1152;

const int edt2 = 1153;

const int edt3 = 1154;

const int edt4 = 1155;

const int edt5 = 1156;

const int edt6 = 1157;

const int edt7 = 1158;

const int edt8 = 1159;

const int edt9 = 1160;

const int edt10 = 1161;

const int edt11 = 1162;

const int edt12 = 1163;

const int edt13 = 1164;

const int edt14 = 1165;

const int edt15 = 1166;

const int edt16 = 1167;

const int scr1 = 1168;

const int scr2 = 1169;

const int scr3 = 1170;

const int scr4 = 1171;

const int scr5 = 1172;

const int scr6 = 1173;

const int scr7 = 1174;

const int scr8 = 1175;

const int ctl1 = 1184;

const int FILEOPENORD = 1536;

const int MULTIFILEOPENORD = 1537;

const int PRINTDLGORD = 1538;

const int PRNSETUPDLGORD = 1539;

const int FINDDLGORD = 1540;

const int REPLACEDLGORD = 1541;

const int FONTDLGORD = 1542;

const int FORMATDLGORD31 = 1543;

const int FORMATDLGORD30 = 1544;

const int RUNDLGORD = 1545;

const int PAGESETUPDLGORD = 1546;

const int NEWFILEOPENORD = 1547;

const int PRINTDLGEXORD = 1549;

const int PAGESETUPDLGORDMOTIF = 1550;

const int COLORMGMTDLGORD = 1551;

const int NEWFILEOPENV2ORD = 1552;

const int NEWFILEOPENV3ORD = 1553;

const int NEWFORMATDLGWITHLINK = 1591;

const int IDC_MANAGE_LINK = 1592;

const int LZERROR_BADINHANDLE = -1;

const int LZERROR_BADOUTHANDLE = -2;

const int LZERROR_READ = -3;

const int LZERROR_WRITE = -4;

const int LZERROR_GLOBALLOC = -5;

const int LZERROR_GLOBLOCK = -6;

const int LZERROR_BADVALUE = -7;

const int LZERROR_UNKNOWNALG = -8;

const int MAXPNAMELEN = 32;

const int MAXERRORLENGTH = 256;

const int MAX_JOYSTICKOEMVXDNAME = 260;

const int TIME_MS = 1;

const int TIME_SAMPLES = 2;

const int TIME_BYTES = 4;

const int TIME_SMPTE = 8;

const int TIME_MIDI = 16;

const int TIME_TICKS = 32;

const int MM_JOY1MOVE = 928;

const int MM_JOY2MOVE = 929;

const int MM_JOY1ZMOVE = 930;

const int MM_JOY2ZMOVE = 931;

const int MM_JOY1BUTTONDOWN = 949;

const int MM_JOY2BUTTONDOWN = 950;

const int MM_JOY1BUTTONUP = 951;

const int MM_JOY2BUTTONUP = 952;

const int MM_MCINOTIFY = 953;

const int MM_WOM_OPEN = 955;

const int MM_WOM_CLOSE = 956;

const int MM_WOM_DONE = 957;

const int MM_WIM_OPEN = 958;

const int MM_WIM_CLOSE = 959;

const int MM_WIM_DATA = 960;

const int MM_MIM_OPEN = 961;

const int MM_MIM_CLOSE = 962;

const int MM_MIM_DATA = 963;

const int MM_MIM_LONGDATA = 964;

const int MM_MIM_ERROR = 965;

const int MM_MIM_LONGERROR = 966;

const int MM_MOM_OPEN = 967;

const int MM_MOM_CLOSE = 968;

const int MM_MOM_DONE = 969;

const int MM_DRVM_OPEN = 976;

const int MM_DRVM_CLOSE = 977;

const int MM_DRVM_DATA = 978;

const int MM_DRVM_ERROR = 979;

const int MM_STREAM_OPEN = 980;

const int MM_STREAM_CLOSE = 981;

const int MM_STREAM_DONE = 982;

const int MM_STREAM_ERROR = 983;

const int MM_MOM_POSITIONCB = 970;

const int MM_MCISIGNAL = 971;

const int MM_MIM_MOREDATA = 972;

const int MM_MIXM_LINE_CHANGE = 976;

const int MM_MIXM_CONTROL_CHANGE = 977;

const int MMSYSERR_BASE = 0;

const int WAVERR_BASE = 32;

const int MIDIERR_BASE = 64;

const int TIMERR_BASE = 96;

const int JOYERR_BASE = 160;

const int MCIERR_BASE = 256;

const int MIXERR_BASE = 1024;

const int MCI_STRING_OFFSET = 512;

const int MCI_VD_OFFSET = 1024;

const int MCI_CD_OFFSET = 1088;

const int MCI_WAVE_OFFSET = 1152;

const int MCI_SEQ_OFFSET = 1216;

const int MMSYSERR_NOERROR = 0;

const int MMSYSERR_ERROR = 1;

const int MMSYSERR_BADDEVICEID = 2;

const int MMSYSERR_NOTENABLED = 3;

const int MMSYSERR_ALLOCATED = 4;

const int MMSYSERR_INVALHANDLE = 5;

const int MMSYSERR_NODRIVER = 6;

const int MMSYSERR_NOMEM = 7;

const int MMSYSERR_NOTSUPPORTED = 8;

const int MMSYSERR_BADERRNUM = 9;

const int MMSYSERR_INVALFLAG = 10;

const int MMSYSERR_INVALPARAM = 11;

const int MMSYSERR_HANDLEBUSY = 12;

const int MMSYSERR_INVALIDALIAS = 13;

const int MMSYSERR_BADDB = 14;

const int MMSYSERR_KEYNOTFOUND = 15;

const int MMSYSERR_READERROR = 16;

const int MMSYSERR_WRITEERROR = 17;

const int MMSYSERR_DELETEERROR = 18;

const int MMSYSERR_VALNOTFOUND = 19;

const int MMSYSERR_NODRIVERCB = 20;

const int MMSYSERR_MOREDATA = 21;

const int MMSYSERR_LASTERROR = 21;

const int CALLBACK_TYPEMASK = 458752;

const int CALLBACK_NULL = 0;

const int CALLBACK_WINDOW = 65536;

const int CALLBACK_TASK = 131072;

const int CALLBACK_FUNCTION = 196608;

const int CALLBACK_THREAD = 131072;

const int CALLBACK_EVENT = 327680;

const int MCIERR_INVALID_DEVICE_ID = 257;

const int MCIERR_UNRECOGNIZED_KEYWORD = 259;

const int MCIERR_UNRECOGNIZED_COMMAND = 261;

const int MCIERR_HARDWARE = 262;

const int MCIERR_INVALID_DEVICE_NAME = 263;

const int MCIERR_OUT_OF_MEMORY = 264;

const int MCIERR_DEVICE_OPEN = 265;

const int MCIERR_CANNOT_LOAD_DRIVER = 266;

const int MCIERR_MISSING_COMMAND_STRING = 267;

const int MCIERR_PARAM_OVERFLOW = 268;

const int MCIERR_MISSING_STRING_ARGUMENT = 269;

const int MCIERR_BAD_INTEGER = 270;

const int MCIERR_PARSER_INTERNAL = 271;

const int MCIERR_DRIVER_INTERNAL = 272;

const int MCIERR_MISSING_PARAMETER = 273;

const int MCIERR_UNSUPPORTED_FUNCTION = 274;

const int MCIERR_FILE_NOT_FOUND = 275;

const int MCIERR_DEVICE_NOT_READY = 276;

const int MCIERR_INTERNAL = 277;

const int MCIERR_DRIVER = 278;

const int MCIERR_CANNOT_USE_ALL = 279;

const int MCIERR_MULTIPLE = 280;

const int MCIERR_EXTENSION_NOT_FOUND = 281;

const int MCIERR_OUTOFRANGE = 282;

const int MCIERR_FLAGS_NOT_COMPATIBLE = 284;

const int MCIERR_FILE_NOT_SAVED = 286;

const int MCIERR_DEVICE_TYPE_REQUIRED = 287;

const int MCIERR_DEVICE_LOCKED = 288;

const int MCIERR_DUPLICATE_ALIAS = 289;

const int MCIERR_BAD_CONSTANT = 290;

const int MCIERR_MUST_USE_SHAREABLE = 291;

const int MCIERR_MISSING_DEVICE_NAME = 292;

const int MCIERR_BAD_TIME_FORMAT = 293;

const int MCIERR_NO_CLOSING_QUOTE = 294;

const int MCIERR_DUPLICATE_FLAGS = 295;

const int MCIERR_INVALID_FILE = 296;

const int MCIERR_NULL_PARAMETER_BLOCK = 297;

const int MCIERR_UNNAMED_RESOURCE = 298;

const int MCIERR_NEW_REQUIRES_ALIAS = 299;

const int MCIERR_NOTIFY_ON_AUTO_OPEN = 300;

const int MCIERR_NO_ELEMENT_ALLOWED = 301;

const int MCIERR_NONAPPLICABLE_FUNCTION = 302;

const int MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303;

const int MCIERR_FILENAME_REQUIRED = 304;

const int MCIERR_EXTRA_CHARACTERS = 305;

const int MCIERR_DEVICE_NOT_INSTALLED = 306;

const int MCIERR_GET_CD = 307;

const int MCIERR_SET_CD = 308;

const int MCIERR_SET_DRIVE = 309;

const int MCIERR_DEVICE_LENGTH = 310;

const int MCIERR_DEVICE_ORD_LENGTH = 311;

const int MCIERR_NO_INTEGER = 312;

const int MCIERR_WAVE_OUTPUTSINUSE = 320;

const int MCIERR_WAVE_SETOUTPUTINUSE = 321;

const int MCIERR_WAVE_INPUTSINUSE = 322;

const int MCIERR_WAVE_SETINPUTINUSE = 323;

const int MCIERR_WAVE_OUTPUTUNSPECIFIED = 324;

const int MCIERR_WAVE_INPUTUNSPECIFIED = 325;

const int MCIERR_WAVE_OUTPUTSUNSUITABLE = 326;

const int MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327;

const int MCIERR_WAVE_INPUTSUNSUITABLE = 328;

const int MCIERR_WAVE_SETINPUTUNSUITABLE = 329;

const int MCIERR_SEQ_DIV_INCOMPATIBLE = 336;

const int MCIERR_SEQ_PORT_INUSE = 337;

const int MCIERR_SEQ_PORT_NONEXISTENT = 338;

const int MCIERR_SEQ_PORT_MAPNODEVICE = 339;

const int MCIERR_SEQ_PORT_MISCERROR = 340;

const int MCIERR_SEQ_TIMER = 341;

const int MCIERR_SEQ_PORTUNSPECIFIED = 342;

const int MCIERR_SEQ_NOMIDIPRESENT = 343;

const int MCIERR_NO_WINDOW = 346;

const int MCIERR_CREATEWINDOW = 347;

const int MCIERR_FILE_READ = 348;

const int MCIERR_FILE_WRITE = 349;

const int MCIERR_NO_IDENTITY = 350;

const int MCIERR_CUSTOM_DRIVER_BASE = 512;

const int MCI_FIRST = 2048;

const int MCI_OPEN = 2051;

const int MCI_CLOSE = 2052;

const int MCI_ESCAPE = 2053;

const int MCI_PLAY = 2054;

const int MCI_SEEK = 2055;

const int MCI_STOP = 2056;

const int MCI_PAUSE = 2057;

const int MCI_INFO = 2058;

const int MCI_GETDEVCAPS = 2059;

const int MCI_SPIN = 2060;

const int MCI_SET = 2061;

const int MCI_STEP = 2062;

const int MCI_RECORD = 2063;

const int MCI_SYSINFO = 2064;

const int MCI_BREAK = 2065;

const int MCI_SAVE = 2067;

const int MCI_STATUS = 2068;

const int MCI_CUE = 2096;

const int MCI_REALIZE = 2112;

const int MCI_WINDOW = 2113;

const int MCI_PUT = 2114;

const int MCI_WHERE = 2115;

const int MCI_FREEZE = 2116;

const int MCI_UNFREEZE = 2117;

const int MCI_LOAD = 2128;

const int MCI_CUT = 2129;

const int MCI_COPY = 2130;

const int MCI_PASTE = 2131;

const int MCI_UPDATE = 2132;

const int MCI_RESUME = 2133;

const int MCI_DELETE = 2134;

const int MCI_USER_MESSAGES = 3072;

const int MCI_LAST = 4095;

const int MCI_ALL_DEVICE_ID = 4294967295;

const int MCI_DEVTYPE_VCR = 513;

const int MCI_DEVTYPE_VIDEODISC = 514;

const int MCI_DEVTYPE_OVERLAY = 515;

const int MCI_DEVTYPE_CD_AUDIO = 516;

const int MCI_DEVTYPE_DAT = 517;

const int MCI_DEVTYPE_SCANNER = 518;

const int MCI_DEVTYPE_ANIMATION = 519;

const int MCI_DEVTYPE_DIGITAL_VIDEO = 520;

const int MCI_DEVTYPE_OTHER = 521;

const int MCI_DEVTYPE_WAVEFORM_AUDIO = 522;

const int MCI_DEVTYPE_SEQUENCER = 523;

const int MCI_DEVTYPE_FIRST = 513;

const int MCI_DEVTYPE_LAST = 523;

const int MCI_DEVTYPE_FIRST_USER = 4096;

const int MCI_MODE_NOT_READY = 524;

const int MCI_MODE_STOP = 525;

const int MCI_MODE_PLAY = 526;

const int MCI_MODE_RECORD = 527;

const int MCI_MODE_SEEK = 528;

const int MCI_MODE_PAUSE = 529;

const int MCI_MODE_OPEN = 530;

const int MCI_FORMAT_MILLISECONDS = 0;

const int MCI_FORMAT_HMS = 1;

const int MCI_FORMAT_MSF = 2;

const int MCI_FORMAT_FRAMES = 3;

const int MCI_FORMAT_SMPTE_24 = 4;

const int MCI_FORMAT_SMPTE_25 = 5;

const int MCI_FORMAT_SMPTE_30 = 6;

const int MCI_FORMAT_SMPTE_30DROP = 7;

const int MCI_FORMAT_BYTES = 8;

const int MCI_FORMAT_SAMPLES = 9;

const int MCI_FORMAT_TMSF = 10;

const int MCI_NOTIFY_SUCCESSFUL = 1;

const int MCI_NOTIFY_SUPERSEDED = 2;

const int MCI_NOTIFY_ABORTED = 4;

const int MCI_NOTIFY_FAILURE = 8;

const int MCI_NOTIFY = 1;

const int MCI_WAIT = 2;

const int MCI_FROM = 4;

const int MCI_TO = 8;

const int MCI_TRACK = 16;

const int MCI_OPEN_SHAREABLE = 256;

const int MCI_OPEN_ELEMENT = 512;

const int MCI_OPEN_ALIAS = 1024;

const int MCI_OPEN_ELEMENT_ID = 2048;

const int MCI_OPEN_TYPE_ID = 4096;

const int MCI_OPEN_TYPE = 8192;

const int MCI_SEEK_TO_START = 256;

const int MCI_SEEK_TO_END = 512;

const int MCI_STATUS_ITEM = 256;

const int MCI_STATUS_START = 512;

const int MCI_STATUS_LENGTH = 1;

const int MCI_STATUS_POSITION = 2;

const int MCI_STATUS_NUMBER_OF_TRACKS = 3;

const int MCI_STATUS_MODE = 4;

const int MCI_STATUS_MEDIA_PRESENT = 5;

const int MCI_STATUS_TIME_FORMAT = 6;

const int MCI_STATUS_READY = 7;

const int MCI_STATUS_CURRENT_TRACK = 8;

const int MCI_INFO_PRODUCT = 256;

const int MCI_INFO_FILE = 512;

const int MCI_INFO_MEDIA_UPC = 1024;

const int MCI_INFO_MEDIA_IDENTITY = 2048;

const int MCI_INFO_NAME = 4096;

const int MCI_INFO_COPYRIGHT = 8192;

const int MCI_GETDEVCAPS_ITEM = 256;

const int MCI_GETDEVCAPS_CAN_RECORD = 1;

const int MCI_GETDEVCAPS_HAS_AUDIO = 2;

const int MCI_GETDEVCAPS_HAS_VIDEO = 3;

const int MCI_GETDEVCAPS_DEVICE_TYPE = 4;

const int MCI_GETDEVCAPS_USES_FILES = 5;

const int MCI_GETDEVCAPS_COMPOUND_DEVICE = 6;

const int MCI_GETDEVCAPS_CAN_EJECT = 7;

const int MCI_GETDEVCAPS_CAN_PLAY = 8;

const int MCI_GETDEVCAPS_CAN_SAVE = 9;

const int MCI_SYSINFO_QUANTITY = 256;

const int MCI_SYSINFO_OPEN = 512;

const int MCI_SYSINFO_NAME = 1024;

const int MCI_SYSINFO_INSTALLNAME = 2048;

const int MCI_SET_DOOR_OPEN = 256;

const int MCI_SET_DOOR_CLOSED = 512;

const int MCI_SET_TIME_FORMAT = 1024;

const int MCI_SET_AUDIO = 2048;

const int MCI_SET_VIDEO = 4096;

const int MCI_SET_ON = 8192;

const int MCI_SET_OFF = 16384;

const int MCI_SET_AUDIO_ALL = 0;

const int MCI_SET_AUDIO_LEFT = 1;

const int MCI_SET_AUDIO_RIGHT = 2;

const int MCI_BREAK_KEY = 256;

const int MCI_BREAK_HWND = 512;

const int MCI_BREAK_OFF = 1024;

const int MCI_RECORD_INSERT = 256;

const int MCI_RECORD_OVERWRITE = 512;

const int MCI_SAVE_FILE = 256;

const int MCI_LOAD_FILE = 256;

const int MCI_VD_MODE_PARK = 1025;

const int MCI_VD_MEDIA_CLV = 1026;

const int MCI_VD_MEDIA_CAV = 1027;

const int MCI_VD_MEDIA_OTHER = 1028;

const int MCI_VD_FORMAT_TRACK = 16385;

const int MCI_VD_PLAY_REVERSE = 65536;

const int MCI_VD_PLAY_FAST = 131072;

const int MCI_VD_PLAY_SPEED = 262144;

const int MCI_VD_PLAY_SCAN = 524288;

const int MCI_VD_PLAY_SLOW = 1048576;

const int MCI_VD_SEEK_REVERSE = 65536;

const int MCI_VD_STATUS_SPEED = 16386;

const int MCI_VD_STATUS_FORWARD = 16387;

const int MCI_VD_STATUS_MEDIA_TYPE = 16388;

const int MCI_VD_STATUS_SIDE = 16389;

const int MCI_VD_STATUS_DISC_SIZE = 16390;

const int MCI_VD_GETDEVCAPS_CLV = 65536;

const int MCI_VD_GETDEVCAPS_CAV = 131072;

const int MCI_VD_SPIN_UP = 65536;

const int MCI_VD_SPIN_DOWN = 131072;

const int MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386;

const int MCI_VD_GETDEVCAPS_FAST_RATE = 16387;

const int MCI_VD_GETDEVCAPS_SLOW_RATE = 16388;

const int MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389;

const int MCI_VD_STEP_FRAMES = 65536;

const int MCI_VD_STEP_REVERSE = 131072;

const int MCI_VD_ESCAPE_STRING = 256;

const int MCI_CDA_STATUS_TYPE_TRACK = 16385;

const int MCI_CDA_TRACK_AUDIO = 1088;

const int MCI_CDA_TRACK_OTHER = 1089;

const int MCI_WAVE_PCM = 1152;

const int MCI_WAVE_MAPPER = 1153;

const int MCI_WAVE_OPEN_BUFFER = 65536;

const int MCI_WAVE_SET_FORMATTAG = 65536;

const int MCI_WAVE_SET_CHANNELS = 131072;

const int MCI_WAVE_SET_SAMPLESPERSEC = 262144;

const int MCI_WAVE_SET_AVGBYTESPERSEC = 524288;

const int MCI_WAVE_SET_BLOCKALIGN = 1048576;

const int MCI_WAVE_SET_BITSPERSAMPLE = 2097152;

const int MCI_WAVE_INPUT = 4194304;

const int MCI_WAVE_OUTPUT = 8388608;

const int MCI_WAVE_STATUS_FORMATTAG = 16385;

const int MCI_WAVE_STATUS_CHANNELS = 16386;

const int MCI_WAVE_STATUS_SAMPLESPERSEC = 16387;

const int MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388;

const int MCI_WAVE_STATUS_BLOCKALIGN = 16389;

const int MCI_WAVE_STATUS_BITSPERSAMPLE = 16390;

const int MCI_WAVE_STATUS_LEVEL = 16391;

const int MCI_WAVE_SET_ANYINPUT = 67108864;

const int MCI_WAVE_SET_ANYOUTPUT = 134217728;

const int MCI_WAVE_GETDEVCAPS_INPUTS = 16385;

const int MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386;

const int MCI_SEQ_DIV_PPQN = 1216;

const int MCI_SEQ_DIV_SMPTE_24 = 1217;

const int MCI_SEQ_DIV_SMPTE_25 = 1218;

const int MCI_SEQ_DIV_SMPTE_30DROP = 1219;

const int MCI_SEQ_DIV_SMPTE_30 = 1220;

const int MCI_SEQ_FORMAT_SONGPTR = 16385;

const int MCI_SEQ_FILE = 16386;

const int MCI_SEQ_MIDI = 16387;

const int MCI_SEQ_SMPTE = 16388;

const int MCI_SEQ_NONE = 65533;

const int MCI_SEQ_MAPPER = 65535;

const int MCI_SEQ_STATUS_TEMPO = 16386;

const int MCI_SEQ_STATUS_PORT = 16387;

const int MCI_SEQ_STATUS_SLAVE = 16391;

const int MCI_SEQ_STATUS_MASTER = 16392;

const int MCI_SEQ_STATUS_OFFSET = 16393;

const int MCI_SEQ_STATUS_DIVTYPE = 16394;

const int MCI_SEQ_STATUS_NAME = 16395;

const int MCI_SEQ_STATUS_COPYRIGHT = 16396;

const int MCI_SEQ_SET_TEMPO = 65536;

const int MCI_SEQ_SET_PORT = 131072;

const int MCI_SEQ_SET_SLAVE = 262144;

const int MCI_SEQ_SET_MASTER = 524288;

const int MCI_SEQ_SET_OFFSET = 16777216;

const int MCI_ANIM_OPEN_WS = 65536;

const int MCI_ANIM_OPEN_PARENT = 131072;

const int MCI_ANIM_OPEN_NOSTATIC = 262144;

const int MCI_ANIM_PLAY_SPEED = 65536;

const int MCI_ANIM_PLAY_REVERSE = 131072;

const int MCI_ANIM_PLAY_FAST = 262144;

const int MCI_ANIM_PLAY_SLOW = 524288;

const int MCI_ANIM_PLAY_SCAN = 1048576;

const int MCI_ANIM_STEP_REVERSE = 65536;

const int MCI_ANIM_STEP_FRAMES = 131072;

const int MCI_ANIM_STATUS_SPEED = 16385;

const int MCI_ANIM_STATUS_FORWARD = 16386;

const int MCI_ANIM_STATUS_HWND = 16387;

const int MCI_ANIM_STATUS_HPAL = 16388;

const int MCI_ANIM_STATUS_STRETCH = 16389;

const int MCI_ANIM_INFO_TEXT = 65536;

const int MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385;

const int MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386;

const int MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387;

const int MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388;

const int MCI_ANIM_GETDEVCAPS_PALETTES = 16390;

const int MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391;

const int MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392;

const int MCI_ANIM_REALIZE_NORM = 65536;

const int MCI_ANIM_REALIZE_BKGD = 131072;

const int MCI_ANIM_WINDOW_HWND = 65536;

const int MCI_ANIM_WINDOW_STATE = 262144;

const int MCI_ANIM_WINDOW_TEXT = 524288;

const int MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576;

const int MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152;

const int MCI_ANIM_WINDOW_DEFAULT = 0;

const int MCI_ANIM_RECT = 65536;

const int MCI_ANIM_PUT_SOURCE = 131072;

const int MCI_ANIM_PUT_DESTINATION = 262144;

const int MCI_ANIM_WHERE_SOURCE = 131072;

const int MCI_ANIM_WHERE_DESTINATION = 262144;

const int MCI_ANIM_UPDATE_HDC = 131072;

const int MCI_OVLY_OPEN_WS = 65536;

const int MCI_OVLY_OPEN_PARENT = 131072;

const int MCI_OVLY_STATUS_HWND = 16385;

const int MCI_OVLY_STATUS_STRETCH = 16386;

const int MCI_OVLY_INFO_TEXT = 65536;

const int MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385;

const int MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386;

const int MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387;

const int MCI_OVLY_WINDOW_HWND = 65536;

const int MCI_OVLY_WINDOW_STATE = 262144;

const int MCI_OVLY_WINDOW_TEXT = 524288;

const int MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576;

const int MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152;

const int MCI_OVLY_WINDOW_DEFAULT = 0;

const int MCI_OVLY_RECT = 65536;

const int MCI_OVLY_PUT_SOURCE = 131072;

const int MCI_OVLY_PUT_DESTINATION = 262144;

const int MCI_OVLY_PUT_FRAME = 524288;

const int MCI_OVLY_PUT_VIDEO = 1048576;

const int MCI_OVLY_WHERE_SOURCE = 131072;

const int MCI_OVLY_WHERE_DESTINATION = 262144;

const int MCI_OVLY_WHERE_FRAME = 524288;

const int MCI_OVLY_WHERE_VIDEO = 1048576;

const int DRV_LOAD = 1;

const int DRV_ENABLE = 2;

const int DRV_OPEN = 3;

const int DRV_CLOSE = 4;

const int DRV_DISABLE = 5;

const int DRV_FREE = 6;

const int DRV_CONFIGURE = 7;

const int DRV_QUERYCONFIGURE = 8;

const int DRV_INSTALL = 9;

const int DRV_REMOVE = 10;

const int DRV_EXITSESSION = 11;

const int DRV_POWER = 15;

const int DRV_RESERVED = 2048;

const int DRV_USER = 16384;

const int DRVCNF_CANCEL = 0;

const int DRVCNF_OK = 1;

const int DRVCNF_RESTART = 2;

const int DRV_CANCEL = 0;

const int DRV_OK = 1;

const int DRV_RESTART = 2;

const int DRV_MCI_FIRST = 2048;

const int DRV_MCI_LAST = 6143;

const int MMIOERR_BASE = 256;

const int MMIOERR_FILENOTFOUND = 257;

const int MMIOERR_OUTOFMEMORY = 258;

const int MMIOERR_CANNOTOPEN = 259;

const int MMIOERR_CANNOTCLOSE = 260;

const int MMIOERR_CANNOTREAD = 261;

const int MMIOERR_CANNOTWRITE = 262;

const int MMIOERR_CANNOTSEEK = 263;

const int MMIOERR_CANNOTEXPAND = 264;

const int MMIOERR_CHUNKNOTFOUND = 265;

const int MMIOERR_UNBUFFERED = 266;

const int MMIOERR_PATHNOTFOUND = 267;

const int MMIOERR_ACCESSDENIED = 268;

const int MMIOERR_SHARINGVIOLATION = 269;

const int MMIOERR_NETWORKERROR = 270;

const int MMIOERR_TOOMANYOPENFILES = 271;

const int MMIOERR_INVALIDFILE = 272;

const int CFSEPCHAR = 43;

const int MMIO_RWMODE = 3;

const int MMIO_SHAREMODE = 112;

const int MMIO_CREATE = 4096;

const int MMIO_PARSE = 256;

const int MMIO_DELETE = 512;

const int MMIO_EXIST = 16384;

const int MMIO_ALLOCBUF = 65536;

const int MMIO_GETTEMP = 131072;

const int MMIO_DIRTY = 268435456;

const int MMIO_READ = 0;

const int MMIO_WRITE = 1;

const int MMIO_READWRITE = 2;

const int MMIO_COMPAT = 0;

const int MMIO_EXCLUSIVE = 16;

const int MMIO_DENYWRITE = 32;

const int MMIO_DENYREAD = 48;

const int MMIO_DENYNONE = 64;

const int MMIO_FHOPEN = 16;

const int MMIO_EMPTYBUF = 16;

const int MMIO_TOUPPER = 16;

const int MMIO_INSTALLPROC = 65536;

const int MMIO_GLOBALPROC = 268435456;

const int MMIO_REMOVEPROC = 131072;

const int MMIO_UNICODEPROC = 16777216;

const int MMIO_FINDPROC = 262144;

const int MMIO_FINDCHUNK = 16;

const int MMIO_FINDRIFF = 32;

const int MMIO_FINDLIST = 64;

const int MMIO_CREATERIFF = 32;

const int MMIO_CREATELIST = 64;

const int MMIOM_READ = 0;

const int MMIOM_WRITE = 1;

const int MMIOM_SEEK = 2;

const int MMIOM_OPEN = 3;

const int MMIOM_CLOSE = 4;

const int MMIOM_WRITEFLUSH = 5;

const int MMIOM_RENAME = 6;

const int MMIOM_USER = 32768;

const int FOURCC_RIFF = 1179011410;

const int FOURCC_LIST = 1414744396;

const int FOURCC_DOS = 542330692;

const int FOURCC_MEM = 541934925;

const int MMIO_DEFAULTBUFFER = 8192;

const int TIME_ONESHOT = 0;

const int TIME_PERIODIC = 1;

const int TIME_CALLBACK_FUNCTION = 0;

const int TIME_CALLBACK_EVENT_SET = 16;

const int TIME_CALLBACK_EVENT_PULSE = 32;

const int TIME_KILL_SYNCHRONOUS = 256;

const int SND_SYNC = 0;

const int SND_ASYNC = 1;

const int SND_NODEFAULT = 2;

const int SND_MEMORY = 4;

const int SND_LOOP = 8;

const int SND_NOSTOP = 16;

const int SND_NOWAIT = 8192;

const int SND_ALIAS = 65536;

const int SND_ALIAS_ID = 1114112;

const int SND_FILENAME = 131072;

const int SND_RESOURCE = 262148;

const int SND_PURGE = 64;

const int SND_APPLICATION = 128;

const int SND_SENTRY = 524288;

const int SND_RING = 1048576;

const int SND_SYSTEM = 2097152;

const int SND_ALIAS_START = 0;

const int SND_ALIAS_SYSTEMASTERISK = 10835;

const int SND_ALIAS_SYSTEMQUESTION = 16211;

const int SND_ALIAS_SYSTEMHAND = 18515;

const int SND_ALIAS_SYSTEMEXIT = 17747;

const int SND_ALIAS_SYSTEMSTART = 21331;

const int SND_ALIAS_SYSTEMWELCOME = 22355;

const int SND_ALIAS_SYSTEMEXCLAMATION = 8531;

const int SND_ALIAS_SYSTEMDEFAULT = 17491;

const int WAVERR_BADFORMAT = 32;

const int WAVERR_STILLPLAYING = 33;

const int WAVERR_UNPREPARED = 34;

const int WAVERR_SYNC = 35;

const int WAVERR_LASTERROR = 35;

const int WOM_OPEN = 955;

const int WOM_CLOSE = 956;

const int WOM_DONE = 957;

const int WIM_OPEN = 958;

const int WIM_CLOSE = 959;

const int WIM_DATA = 960;

const int WAVE_MAPPER = 4294967295;

const int WAVE_FORMAT_QUERY = 1;

const int WAVE_ALLOWSYNC = 2;

const int WAVE_MAPPED = 4;

const int WAVE_FORMAT_DIRECT = 8;

const int WAVE_FORMAT_DIRECT_QUERY = 9;

const int WAVE_MAPPED_DEFAULT_COMMUNICATION_DEVICE = 16;

const int WHDR_DONE = 1;

const int WHDR_PREPARED = 2;

const int WHDR_BEGINLOOP = 4;

const int WHDR_ENDLOOP = 8;

const int WHDR_INQUEUE = 16;

const int WAVECAPS_PITCH = 1;

const int WAVECAPS_PLAYBACKRATE = 2;

const int WAVECAPS_VOLUME = 4;

const int WAVECAPS_LRVOLUME = 8;

const int WAVECAPS_SYNC = 16;

const int WAVECAPS_SAMPLEACCURATE = 32;

const int WAVE_INVALIDFORMAT = 0;

const int WAVE_FORMAT_1M08 = 1;

const int WAVE_FORMAT_1S08 = 2;

const int WAVE_FORMAT_1M16 = 4;

const int WAVE_FORMAT_1S16 = 8;

const int WAVE_FORMAT_2M08 = 16;

const int WAVE_FORMAT_2S08 = 32;

const int WAVE_FORMAT_2M16 = 64;

const int WAVE_FORMAT_2S16 = 128;

const int WAVE_FORMAT_4M08 = 256;

const int WAVE_FORMAT_4S08 = 512;

const int WAVE_FORMAT_4M16 = 1024;

const int WAVE_FORMAT_4S16 = 2048;

const int WAVE_FORMAT_44M08 = 256;

const int WAVE_FORMAT_44S08 = 512;

const int WAVE_FORMAT_44M16 = 1024;

const int WAVE_FORMAT_44S16 = 2048;

const int WAVE_FORMAT_48M08 = 4096;

const int WAVE_FORMAT_48S08 = 8192;

const int WAVE_FORMAT_48M16 = 16384;

const int WAVE_FORMAT_48S16 = 32768;

const int WAVE_FORMAT_96M08 = 65536;

const int WAVE_FORMAT_96S08 = 131072;

const int WAVE_FORMAT_96M16 = 262144;

const int WAVE_FORMAT_96S16 = 524288;

const int WAVE_FORMAT_PCM = 1;

const int MIDIERR_UNPREPARED = 64;

const int MIDIERR_STILLPLAYING = 65;

const int MIDIERR_NOMAP = 66;

const int MIDIERR_NOTREADY = 67;

const int MIDIERR_NODEVICE = 68;

const int MIDIERR_INVALIDSETUP = 69;

const int MIDIERR_BADOPENMODE = 70;

const int MIDIERR_DONT_CONTINUE = 71;

const int MIDIERR_LASTERROR = 71;

const int MIDIPATCHSIZE = 128;

const int MIM_OPEN = 961;

const int MIM_CLOSE = 962;

const int MIM_DATA = 963;

const int MIM_LONGDATA = 964;

const int MIM_ERROR = 965;

const int MIM_LONGERROR = 966;

const int MOM_OPEN = 967;

const int MOM_CLOSE = 968;

const int MOM_DONE = 969;

const int MIM_MOREDATA = 972;

const int MOM_POSITIONCB = 970;

const int MIDIMAPPER = 4294967295;

const int MIDI_MAPPER = 4294967295;

const int MIDI_IO_STATUS = 32;

const int MIDI_CACHE_ALL = 1;

const int MIDI_CACHE_BESTFIT = 2;

const int MIDI_CACHE_QUERY = 3;

const int MIDI_UNCACHE = 4;

const int MOD_MIDIPORT = 1;

const int MOD_SYNTH = 2;

const int MOD_SQSYNTH = 3;

const int MOD_FMSYNTH = 4;

const int MOD_MAPPER = 5;

const int MOD_WAVETABLE = 6;

const int MOD_SWSYNTH = 7;

const int MIDICAPS_VOLUME = 1;

const int MIDICAPS_LRVOLUME = 2;

const int MIDICAPS_CACHE = 4;

const int MIDICAPS_STREAM = 8;

const int MHDR_DONE = 1;

const int MHDR_PREPARED = 2;

const int MHDR_INQUEUE = 4;

const int MHDR_ISSTRM = 8;

const int MEVT_F_SHORT = 0;

const int MEVT_F_LONG = 2147483648;

const int MEVT_F_CALLBACK = 1073741824;

const int MEVT_SHORTMSG = 0;

const int MEVT_TEMPO = 1;

const int MEVT_NOP = 2;

const int MEVT_LONGMSG = 128;

const int MEVT_COMMENT = 130;

const int MEVT_VERSION = 132;

const int MIDISTRM_ERROR = -2;

const int MIDIPROP_SET = 2147483648;

const int MIDIPROP_GET = 1073741824;

const int MIDIPROP_TIMEDIV = 1;

const int MIDIPROP_TEMPO = 2;

const int AUX_MAPPER = 4294967295;

const int AUXCAPS_CDAUDIO = 1;

const int AUXCAPS_AUXIN = 2;

const int AUXCAPS_VOLUME = 1;

const int AUXCAPS_LRVOLUME = 2;

const int MIXER_SHORT_NAME_CHARS = 16;

const int MIXER_LONG_NAME_CHARS = 64;

const int MIXERR_INVALLINE = 1024;

const int MIXERR_INVALCONTROL = 1025;

const int MIXERR_INVALVALUE = 1026;

const int MIXERR_LASTERROR = 1026;

const int MIXER_OBJECTF_HANDLE = 2147483648;

const int MIXER_OBJECTF_MIXER = 0;

const int MIXER_OBJECTF_HMIXER = 2147483648;

const int MIXER_OBJECTF_WAVEOUT = 268435456;

const int MIXER_OBJECTF_HWAVEOUT = 2415919104;

const int MIXER_OBJECTF_WAVEIN = 536870912;

const int MIXER_OBJECTF_HWAVEIN = 2684354560;

const int MIXER_OBJECTF_MIDIOUT = 805306368;

const int MIXER_OBJECTF_HMIDIOUT = 2952790016;

const int MIXER_OBJECTF_MIDIIN = 1073741824;

const int MIXER_OBJECTF_HMIDIIN = 3221225472;

const int MIXER_OBJECTF_AUX = 1342177280;

const int MIXERLINE_LINEF_ACTIVE = 1;

const int MIXERLINE_LINEF_DISCONNECTED = 32768;

const int MIXERLINE_LINEF_SOURCE = 2147483648;

const int MIXERLINE_COMPONENTTYPE_DST_FIRST = 0;

const int MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0;

const int MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 1;

const int MIXERLINE_COMPONENTTYPE_DST_LINE = 2;

const int MIXERLINE_COMPONENTTYPE_DST_MONITOR = 3;

const int MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 4;

const int MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 5;

const int MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 6;

const int MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 7;

const int MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 8;

const int MIXERLINE_COMPONENTTYPE_DST_LAST = 8;

const int MIXERLINE_COMPONENTTYPE_SRC_FIRST = 4096;

const int MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 4096;

const int MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 4097;

const int MIXERLINE_COMPONENTTYPE_SRC_LINE = 4098;

const int MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 4099;

const int MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 4100;

const int MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 4101;

const int MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 4102;

const int MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 4103;

const int MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 4104;

const int MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 4105;

const int MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 4106;

const int MIXERLINE_COMPONENTTYPE_SRC_LAST = 4106;

const int MIXERLINE_TARGETTYPE_UNDEFINED = 0;

const int MIXERLINE_TARGETTYPE_WAVEOUT = 1;

const int MIXERLINE_TARGETTYPE_WAVEIN = 2;

const int MIXERLINE_TARGETTYPE_MIDIOUT = 3;

const int MIXERLINE_TARGETTYPE_MIDIIN = 4;

const int MIXERLINE_TARGETTYPE_AUX = 5;

const int MIXER_GETLINEINFOF_DESTINATION = 0;

const int MIXER_GETLINEINFOF_SOURCE = 1;

const int MIXER_GETLINEINFOF_LINEID = 2;

const int MIXER_GETLINEINFOF_COMPONENTTYPE = 3;

const int MIXER_GETLINEINFOF_TARGETTYPE = 4;

const int MIXER_GETLINEINFOF_QUERYMASK = 15;

const int MIXERCONTROL_CONTROLF_UNIFORM = 1;

const int MIXERCONTROL_CONTROLF_MULTIPLE = 2;

const int MIXERCONTROL_CONTROLF_DISABLED = 2147483648;

const int MIXERCONTROL_CT_CLASS_MASK = 4026531840;

const int MIXERCONTROL_CT_CLASS_CUSTOM = 0;

const int MIXERCONTROL_CT_CLASS_METER = 268435456;

const int MIXERCONTROL_CT_CLASS_SWITCH = 536870912;

const int MIXERCONTROL_CT_CLASS_NUMBER = 805306368;

const int MIXERCONTROL_CT_CLASS_SLIDER = 1073741824;

const int MIXERCONTROL_CT_CLASS_FADER = 1342177280;

const int MIXERCONTROL_CT_CLASS_TIME = 1610612736;

const int MIXERCONTROL_CT_CLASS_LIST = 1879048192;

const int MIXERCONTROL_CT_SUBCLASS_MASK = 251658240;

const int MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0;

const int MIXERCONTROL_CT_SC_SWITCH_BUTTON = 16777216;

const int MIXERCONTROL_CT_SC_METER_POLLED = 0;

const int MIXERCONTROL_CT_SC_TIME_MICROSECS = 0;

const int MIXERCONTROL_CT_SC_TIME_MILLISECS = 16777216;

const int MIXERCONTROL_CT_SC_LIST_SINGLE = 0;

const int MIXERCONTROL_CT_SC_LIST_MULTIPLE = 16777216;

const int MIXERCONTROL_CT_UNITS_MASK = 16711680;

const int MIXERCONTROL_CT_UNITS_CUSTOM = 0;

const int MIXERCONTROL_CT_UNITS_BOOLEAN = 65536;

const int MIXERCONTROL_CT_UNITS_SIGNED = 131072;

const int MIXERCONTROL_CT_UNITS_UNSIGNED = 196608;

const int MIXERCONTROL_CT_UNITS_DECIBELS = 262144;

const int MIXERCONTROL_CT_UNITS_PERCENT = 327680;

const int MIXERCONTROL_CONTROLTYPE_CUSTOM = 0;

const int MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 268500992;

const int MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 268566528;

const int MIXERCONTROL_CONTROLTYPE_PEAKMETER = 268566529;

const int MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 268632064;

const int MIXERCONTROL_CONTROLTYPE_BOOLEAN = 536936448;

const int MIXERCONTROL_CONTROLTYPE_ONOFF = 536936449;

const int MIXERCONTROL_CONTROLTYPE_MUTE = 536936450;

const int MIXERCONTROL_CONTROLTYPE_MONO = 536936451;

const int MIXERCONTROL_CONTROLTYPE_LOUDNESS = 536936452;

const int MIXERCONTROL_CONTROLTYPE_STEREOENH = 536936453;

const int MIXERCONTROL_CONTROLTYPE_BASS_BOOST = 536945271;

const int MIXERCONTROL_CONTROLTYPE_BUTTON = 553713664;

const int MIXERCONTROL_CONTROLTYPE_DECIBELS = 805568512;

const int MIXERCONTROL_CONTROLTYPE_SIGNED = 805437440;

const int MIXERCONTROL_CONTROLTYPE_UNSIGNED = 805502976;

const int MIXERCONTROL_CONTROLTYPE_PERCENT = 805634048;

const int MIXERCONTROL_CONTROLTYPE_SLIDER = 1073872896;

const int MIXERCONTROL_CONTROLTYPE_PAN = 1073872897;

const int MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 1073872898;

const int MIXERCONTROL_CONTROLTYPE_FADER = 1342373888;

const int MIXERCONTROL_CONTROLTYPE_VOLUME = 1342373889;

const int MIXERCONTROL_CONTROLTYPE_BASS = 1342373890;

const int MIXERCONTROL_CONTROLTYPE_TREBLE = 1342373891;

const int MIXERCONTROL_CONTROLTYPE_EQUALIZER = 1342373892;

const int MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 1879113728;

const int MIXERCONTROL_CONTROLTYPE_MUX = 1879113729;

const int MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 1895890944;

const int MIXERCONTROL_CONTROLTYPE_MIXER = 1895890945;

const int MIXERCONTROL_CONTROLTYPE_MICROTIME = 1610809344;

const int MIXERCONTROL_CONTROLTYPE_MILLITIME = 1627586560;

const int MIXER_GETLINECONTROLSF_ALL = 0;

const int MIXER_GETLINECONTROLSF_ONEBYID = 1;

const int MIXER_GETLINECONTROLSF_ONEBYTYPE = 2;

const int MIXER_GETLINECONTROLSF_QUERYMASK = 15;

const int MIXER_GETCONTROLDETAILSF_VALUE = 0;

const int MIXER_GETCONTROLDETAILSF_LISTTEXT = 1;

const int MIXER_GETCONTROLDETAILSF_QUERYMASK = 15;

const int MIXER_SETCONTROLDETAILSF_VALUE = 0;

const int MIXER_SETCONTROLDETAILSF_CUSTOM = 1;

const int MIXER_SETCONTROLDETAILSF_QUERYMASK = 15;

const int TIMERR_NOERROR = 0;

const int TIMERR_NOCANDO = 97;

const int TIMERR_STRUCT = 129;

const int JOYERR_NOERROR = 0;

const int JOYERR_PARMS = 165;

const int JOYERR_NOCANDO = 166;

const int JOYERR_UNPLUGGED = 167;

const int JOY_BUTTON1 = 1;

const int JOY_BUTTON2 = 2;

const int JOY_BUTTON3 = 4;

const int JOY_BUTTON4 = 8;

const int JOY_BUTTON1CHG = 256;

const int JOY_BUTTON2CHG = 512;

const int JOY_BUTTON3CHG = 1024;

const int JOY_BUTTON4CHG = 2048;

const int JOY_BUTTON5 = 16;

const int JOY_BUTTON6 = 32;

const int JOY_BUTTON7 = 64;

const int JOY_BUTTON8 = 128;

const int JOY_BUTTON9 = 256;

const int JOY_BUTTON10 = 512;

const int JOY_BUTTON11 = 1024;

const int JOY_BUTTON12 = 2048;

const int JOY_BUTTON13 = 4096;

const int JOY_BUTTON14 = 8192;

const int JOY_BUTTON15 = 16384;

const int JOY_BUTTON16 = 32768;

const int JOY_BUTTON17 = 65536;

const int JOY_BUTTON18 = 131072;

const int JOY_BUTTON19 = 262144;

const int JOY_BUTTON20 = 524288;

const int JOY_BUTTON21 = 1048576;

const int JOY_BUTTON22 = 2097152;

const int JOY_BUTTON23 = 4194304;

const int JOY_BUTTON24 = 8388608;

const int JOY_BUTTON25 = 16777216;

const int JOY_BUTTON26 = 33554432;

const int JOY_BUTTON27 = 67108864;

const int JOY_BUTTON28 = 134217728;

const int JOY_BUTTON29 = 268435456;

const int JOY_BUTTON30 = 536870912;

const int JOY_BUTTON31 = 1073741824;

const int JOY_BUTTON32 = 2147483648;

const int JOY_POVCENTERED = 65535;

const int JOY_POVFORWARD = 0;

const int JOY_POVRIGHT = 9000;

const int JOY_POVBACKWARD = 18000;

const int JOY_POVLEFT = 27000;

const int JOY_RETURNX = 1;

const int JOY_RETURNY = 2;

const int JOY_RETURNZ = 4;

const int JOY_RETURNR = 8;

const int JOY_RETURNU = 16;

const int JOY_RETURNV = 32;

const int JOY_RETURNPOV = 64;

const int JOY_RETURNBUTTONS = 128;

const int JOY_RETURNRAWDATA = 256;

const int JOY_RETURNPOVCTS = 512;

const int JOY_RETURNCENTERED = 1024;

const int JOY_USEDEADZONE = 2048;

const int JOY_RETURNALL = 255;

const int JOY_CAL_READALWAYS = 65536;

const int JOY_CAL_READXYONLY = 131072;

const int JOY_CAL_READ3 = 262144;

const int JOY_CAL_READ4 = 524288;

const int JOY_CAL_READXONLY = 1048576;

const int JOY_CAL_READYONLY = 2097152;

const int JOY_CAL_READ5 = 4194304;

const int JOY_CAL_READ6 = 8388608;

const int JOY_CAL_READZONLY = 16777216;

const int JOY_CAL_READRONLY = 33554432;

const int JOY_CAL_READUONLY = 67108864;

const int JOY_CAL_READVONLY = 134217728;

const int JOYSTICKID1 = 0;

const int JOYSTICKID2 = 1;

const int JOYCAPS_HASZ = 1;

const int JOYCAPS_HASR = 2;

const int JOYCAPS_HASU = 4;

const int JOYCAPS_HASV = 8;

const int JOYCAPS_HASPOV = 16;

const int JOYCAPS_POV4DIR = 32;

const int JOYCAPS_POVCTS = 64;

const int NEWTRANSPARENT = 3;

const int QUERYROPSUPPORT = 40;

const int SELECTDIB = 41;

const int NCBNAMSZ = 16;

const int MAX_LANA = 254;

const int NAME_FLAGS_MASK = 135;

const int GROUP_NAME = 128;

const int UNIQUE_NAME = 0;

const int REGISTERING = 0;

const int REGISTERED = 4;

const int DEREGISTERED = 5;

const int DUPLICATE = 6;

const int DUPLICATE_DEREG = 7;

const int LISTEN_OUTSTANDING = 1;

const int CALL_PENDING = 2;

const int SESSION_ESTABLISHED = 3;

const int HANGUP_PENDING = 4;

const int HANGUP_COMPLETE = 5;

const int SESSION_ABORTED = 6;

const String ALL_TRANSPORTS = 'M';

const String MS_NBF = 'MNBF';

const int NCBCALL = 16;

const int NCBLISTEN = 17;

const int NCBHANGUP = 18;

const int NCBSEND = 20;

const int NCBRECV = 21;

const int NCBRECVANY = 22;

const int NCBCHAINSEND = 23;

const int NCBDGSEND = 32;

const int NCBDGRECV = 33;

const int NCBDGSENDBC = 34;

const int NCBDGRECVBC = 35;

const int NCBADDNAME = 48;

const int NCBDELNAME = 49;

const int NCBRESET = 50;

const int NCBASTAT = 51;

const int NCBSSTAT = 52;

const int NCBCANCEL = 53;

const int NCBADDGRNAME = 54;

const int NCBENUM = 55;

const int NCBUNLINK = 112;

const int NCBSENDNA = 113;

const int NCBCHAINSENDNA = 114;

const int NCBLANSTALERT = 115;

const int NCBACTION = 119;

const int NCBFINDNAME = 120;

const int NCBTRACE = 121;

const int ASYNCH = 128;

const int NRC_GOODRET = 0;

const int NRC_BUFLEN = 1;

const int NRC_ILLCMD = 3;

const int NRC_CMDTMO = 5;

const int NRC_INCOMP = 6;

const int NRC_BADDR = 7;

const int NRC_SNUMOUT = 8;

const int NRC_NORES = 9;

const int NRC_SCLOSED = 10;

const int NRC_CMDCAN = 11;

const int NRC_DUPNAME = 13;

const int NRC_NAMTFUL = 14;

const int NRC_ACTSES = 15;

const int NRC_LOCTFUL = 17;

const int NRC_REMTFUL = 18;

const int NRC_ILLNN = 19;

const int NRC_NOCALL = 20;

const int NRC_NOWILD = 21;

const int NRC_INUSE = 22;

const int NRC_NAMERR = 23;

const int NRC_SABORT = 24;

const int NRC_NAMCONF = 25;

const int NRC_IFBUSY = 33;

const int NRC_TOOMANY = 34;

const int NRC_BRIDGE = 35;

const int NRC_CANOCCR = 36;

const int NRC_CANCEL = 38;

const int NRC_DUPENV = 48;

const int NRC_ENVNOTDEF = 52;

const int NRC_OSRESNOTAV = 53;

const int NRC_MAXAPPS = 54;

const int NRC_NOSAPS = 55;

const int NRC_NORESOURCES = 56;

const int NRC_INVADDRESS = 57;

const int NRC_INVDDID = 59;

const int NRC_LOCKFAIL = 60;

const int NRC_OPENERR = 63;

const int NRC_SYSTEM = 64;

const int NRC_PENDING = 255;

const int RPC_C_BINDING_INFINITE_TIMEOUT = 10;

const int RPC_C_BINDING_MIN_TIMEOUT = 0;

const int RPC_C_BINDING_DEFAULT_TIMEOUT = 5;

const int RPC_C_BINDING_MAX_TIMEOUT = 9;

const int RPC_C_CANCEL_INFINITE_TIMEOUT = -1;

const int RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234;

const int RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10;

const int RPC_C_BIND_TO_ALL_NICS = 1;

const int RPC_C_USE_INTERNET_PORT = 1;

const int RPC_C_USE_INTRANET_PORT = 2;

const int RPC_C_DONT_FAIL = 4;

const int RPC_C_RPCHTTP_USE_LOAD_BALANCE = 8;

const int RPC_C_TRY_ENFORCE_MAX_CALLS = 16;

const int RPC_C_OPT_BINDING_NONCAUSAL = 9;

const int RPC_C_OPT_SECURITY_CALLBACK = 10;

const int RPC_C_OPT_UNIQUE_BINDING = 11;

const int RPC_C_OPT_TRANS_SEND_BUFFER_SIZE = 5;

const int RPC_C_OPT_CALL_TIMEOUT = 12;

const int RPC_C_OPT_DONT_LINGER = 13;

const int RPC_C_OPT_TRUST_PEER = 14;

const int RPC_C_OPT_ASYNC_BLOCK = 15;

const int RPC_C_OPT_OPTIMIZE_TIME = 16;

const int RPC_C_OPT_MAX_OPTIONS = 17;

const int RPC_C_FULL_CERT_CHAIN = 1;

const int RPC_C_STATS_CALLS_IN = 0;

const int RPC_C_STATS_CALLS_OUT = 1;

const int RPC_C_STATS_PKTS_IN = 2;

const int RPC_C_STATS_PKTS_OUT = 3;

const int RPC_C_AUTHN_LEVEL_DEFAULT = 0;

const int RPC_C_AUTHN_LEVEL_NONE = 1;

const int RPC_C_AUTHN_LEVEL_CONNECT = 2;

const int RPC_C_AUTHN_LEVEL_CALL = 3;

const int RPC_C_AUTHN_LEVEL_PKT = 4;

const int RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5;

const int RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6;

const int RPC_C_IMP_LEVEL_DEFAULT = 0;

const int RPC_C_IMP_LEVEL_ANONYMOUS = 1;

const int RPC_C_IMP_LEVEL_IDENTIFY = 2;

const int RPC_C_IMP_LEVEL_IMPERSONATE = 3;

const int RPC_C_IMP_LEVEL_DELEGATE = 4;

const int RPC_C_QOS_IDENTITY_STATIC = 0;

const int RPC_C_QOS_IDENTITY_DYNAMIC = 1;

const int RPC_C_QOS_CAPABILITIES_DEFAULT = 0;

const int RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1;

const int RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = 2;

const int RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = 4;

const int RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE = 8;

const int RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT = 16;

const int RPC_C_QOS_CAPABILITIES_SCHANNEL_FULL_AUTH_IDENTITY = 32;

const int RPC_C_PROTECT_LEVEL_DEFAULT = 0;

const int RPC_C_PROTECT_LEVEL_NONE = 1;

const int RPC_C_PROTECT_LEVEL_CONNECT = 2;

const int RPC_C_PROTECT_LEVEL_CALL = 3;

const int RPC_C_PROTECT_LEVEL_PKT = 4;

const int RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = 5;

const int RPC_C_PROTECT_LEVEL_PKT_PRIVACY = 6;

const int RPC_C_AUTHN_NONE = 0;

const int RPC_C_AUTHN_DCE_PRIVATE = 1;

const int RPC_C_AUTHN_DCE_PUBLIC = 2;

const int RPC_C_AUTHN_DEC_PUBLIC = 4;

const int RPC_C_AUTHN_GSS_NEGOTIATE = 9;

const int RPC_C_AUTHN_WINNT = 10;

const int RPC_C_AUTHN_GSS_SCHANNEL = 14;

const int RPC_C_AUTHN_GSS_KERBEROS = 16;

const int RPC_C_AUTHN_DPA = 17;

const int RPC_C_AUTHN_MSN = 18;

const int RPC_C_AUTHN_DIGEST = 21;

const int RPC_C_AUTHN_KERNEL = 20;

const int RPC_C_AUTHN_NEGO_EXTENDER = 30;

const int RPC_C_AUTHN_PKU2U = 31;

const int RPC_C_AUTHN_LIVE_SSP = 32;

const int RPC_C_AUTHN_LIVEXP_SSP = 35;

const int RPC_C_AUTHN_CLOUD_AP = 36;

const int RPC_C_AUTHN_MSONLINE = 82;

const int RPC_C_AUTHN_MQ = 100;

const int RPC_C_AUTHN_DEFAULT = 4294967295;

const int RPC_C_SECURITY_QOS_VERSION = 1;

const int RPC_C_SECURITY_QOS_VERSION_1 = 1;

const int SEC_WINNT_AUTH_IDENTITY_ANSI = 1;

const int SEC_WINNT_AUTH_IDENTITY_UNICODE = 2;

const int RPC_C_SECURITY_QOS_VERSION_2 = 2;

const int RPC_C_AUTHN_INFO_TYPE_HTTP = 1;

const int RPC_C_HTTP_AUTHN_TARGET_SERVER = 1;

const int RPC_C_HTTP_AUTHN_TARGET_PROXY = 2;

const int RPC_C_HTTP_AUTHN_SCHEME_BASIC = 1;

const int RPC_C_HTTP_AUTHN_SCHEME_NTLM = 2;

const int RPC_C_HTTP_AUTHN_SCHEME_PASSPORT = 4;

const int RPC_C_HTTP_AUTHN_SCHEME_DIGEST = 8;

const int RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE = 16;

const int RPC_C_HTTP_AUTHN_SCHEME_CERT = 65536;

const int RPC_C_HTTP_FLAG_USE_SSL = 1;

const int RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME = 2;

const int RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID = 8;

const int RPC_C_HTTP_FLAG_ENABLE_CERT_REVOCATION_CHECK = 16;

const int RPC_C_SECURITY_QOS_VERSION_3 = 3;

const int RPC_C_SECURITY_QOS_VERSION_4 = 4;

const int RPC_C_SECURITY_QOS_VERSION_5 = 5;

const int RPC_PROTSEQ_TCP = 1;

const int RPC_PROTSEQ_NMP = 2;

const int RPC_PROTSEQ_LRPC = 3;

const int RPC_PROTSEQ_HTTP = 4;

const int RPC_BHT_OBJECT_UUID_VALID = 1;

const int RPC_BHO_NONCAUSAL = 1;

const int RPC_BHO_DONTLINGER = 2;

const int RPC_BHO_EXCLUSIVE_AND_GUARANTEED = 4;

const int RPC_C_AUTHZ_NONE = 0;

const int RPC_C_AUTHZ_NAME = 1;

const int RPC_C_AUTHZ_DCE = 2;

const int RPC_C_AUTHZ_DEFAULT = 4294967295;

const int DCE_C_ERROR_STRING_LEN = 256;

const int RPC_C_EP_ALL_ELTS = 0;

const int RPC_C_EP_MATCH_BY_IF = 1;

const int RPC_C_EP_MATCH_BY_OBJ = 2;

const int RPC_C_EP_MATCH_BY_BOTH = 3;

const int RPC_C_VERS_ALL = 1;

const int RPC_C_VERS_COMPATIBLE = 2;

const int RPC_C_VERS_EXACT = 3;

const int RPC_C_VERS_MAJOR_ONLY = 4;

const int RPC_C_VERS_UPTO = 5;

const int RPC_C_MGMT_INQ_IF_IDS = 0;

const int RPC_C_MGMT_INQ_PRINC_NAME = 1;

const int RPC_C_MGMT_INQ_STATS = 2;

const int RPC_C_MGMT_IS_SERVER_LISTEN = 3;

const int RPC_C_MGMT_STOP_SERVER_LISTEN = 4;

const int RPC_C_PARM_MAX_PACKET_LENGTH = 1;

const int RPC_C_PARM_BUFFER_LENGTH = 2;

const int RPC_IF_AUTOLISTEN = 1;

const int RPC_IF_OLE = 2;

const int RPC_IF_ALLOW_UNKNOWN_AUTHORITY = 4;

const int RPC_IF_ALLOW_SECURE_ONLY = 8;

const int RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH = 16;

const int RPC_IF_ALLOW_LOCAL_ONLY = 32;

const int RPC_IF_SEC_NO_CACHE = 64;

const int RPC_IF_SEC_CACHE_PER_PROC = 128;

const int RPC_IF_ASYNC_CALLBACK = 256;

const int RPC_FW_IF_FLAG_DCOM = 1;

const int RPC_CONTEXT_HANDLE_DEFAULT_FLAGS = 0;

const int RPC_CONTEXT_HANDLE_FLAGS = 805306368;

const int RPC_CONTEXT_HANDLE_SERIALIZE = 268435456;

const int RPC_CONTEXT_HANDLE_DONT_SERIALIZE = 536870912;

const int RPC_TYPE_STRICT_CONTEXT_HANDLE = 1073741824;

const int RPC_TYPE_DISCONNECT_EVENT_CONTEXT_HANDLE = 2147483648;

const int RPC_NCA_FLAGS_DEFAULT = 0;

const int RPC_NCA_FLAGS_IDEMPOTENT = 1;

const int RPC_NCA_FLAGS_BROADCAST = 2;

const int RPC_NCA_FLAGS_MAYBE = 4;

const int RPCFLG_HAS_GUARANTEE = 16;

const int RPCFLG_WINRT_REMOTE_ASYNC = 32;

const int RPC_BUFFER_COMPLETE = 4096;

const int RPC_BUFFER_PARTIAL = 8192;

const int RPC_BUFFER_EXTRA = 16384;

const int RPC_BUFFER_ASYNC = 32768;

const int RPC_BUFFER_NONOTIFY = 65536;

const int RPCFLG_MESSAGE = 16777216;

const int RPCFLG_AUTO_COMPLETE = 134217728;

const int RPCFLG_LOCAL_CALL = 268435456;

const int RPCFLG_INPUT_SYNCHRONOUS = 536870912;

const int RPCFLG_ASYNCHRONOUS = 1073741824;

const int RPCFLG_NON_NDR = 2147483648;

const int RPCFLG_HAS_MULTI_SYNTAXES = 33554432;

const int RPCFLG_HAS_CALLBACK = 67108864;

const int RPCFLG_ACCESSIBILITY_BIT1 = 1048576;

const int RPCFLG_ACCESSIBILITY_BIT2 = 2097152;

const int RPCFLG_ACCESS_LOCAL = 4194304;

const int NDR_CUSTOM_OR_DEFAULT_ALLOCATOR = 268435456;

const int NDR_DEFAULT_ALLOCATOR = 536870912;

const int RPCFLG_NDR64_CONTAINS_ARM_LAYOUT = 67108864;

const int RPCFLG_SENDER_WAITING_FOR_REPLY = 8388608;

const int RPC_FLAGS_VALID_BIT = 32768;

const int NT351_INTERFACE_SIZE = 64;

const int RPC_INTERFACE_HAS_PIPES = 1;

const int RPC_SYSTEM_HANDLE_FREE_UNRETRIEVED = 1;

const int RPC_SYSTEM_HANDLE_FREE_RETRIEVED = 2;

const int RPC_SYSTEM_HANDLE_FREE_ALL = 3;

const int RPC_SYSTEM_HANDLE_FREE_ERROR_ON_CLOSE = 4;

const int TRANSPORT_TYPE_CN = 1;

const int TRANSPORT_TYPE_DG = 2;

const int TRANSPORT_TYPE_LPC = 4;

const int TRANSPORT_TYPE_WMSG = 8;

const int RPC_P_ADDR_FORMAT_TCP_IPV4 = 1;

const int RPC_P_ADDR_FORMAT_TCP_IPV6 = 2;

const int RPC_C_OPT_SESSION_ID = 6;

const int RPC_C_OPT_COOKIE_AUTH = 7;

const int RPC_C_OPT_RESOURCE_TYPE_UUID = 8;

const int RPC_PROXY_CONNECTION_TYPE_IN_PROXY = 0;

const int RPC_PROXY_CONNECTION_TYPE_OUT_PROXY = 1;

const int RPC_C_OPT_PRIVATE_SUPPRESS_WAKE = 1;

const int RPC_C_OPT_PRIVATE_DO_NOT_DISTURB = 2;

const int RPC_C_OPT_PRIVATE_BREAK_ON_SUSPEND = 3;

const int RPC_C_NS_SYNTAX_DEFAULT = 0;

const int RPC_C_NS_SYNTAX_DCE = 3;

const int RPC_C_PROFILE_DEFAULT_ELT = 0;

const int RPC_C_PROFILE_ALL_ELT = 1;

const int RPC_C_PROFILE_ALL_ELTS = 1;

const int RPC_C_PROFILE_MATCH_BY_IF = 2;

const int RPC_C_PROFILE_MATCH_BY_MBR = 3;

const int RPC_C_PROFILE_MATCH_BY_BOTH = 4;

const int RPC_C_NS_DEFAULT_EXP_AGE = -1;

const int RPC_S_OK = 0;

const int RPC_S_INVALID_ARG = 87;

const int RPC_S_OUT_OF_MEMORY = 14;

const int RPC_S_OUT_OF_THREADS = 164;

const int RPC_S_INVALID_LEVEL = 87;

const int RPC_S_BUFFER_TOO_SMALL = 122;

const int RPC_S_INVALID_SECURITY_DESC = 1338;

const int RPC_S_ACCESS_DENIED = 5;

const int RPC_S_SERVER_OUT_OF_MEMORY = 1130;

const int RPC_S_ASYNC_CALL_PENDING = 997;

const int RPC_S_UNKNOWN_PRINCIPAL = 1332;

const int RPC_S_TIMEOUT = 1460;

const int RPC_S_RUNTIME_UNINITIALIZED = 1;

const int RPC_S_NOT_ENOUGH_QUOTA = 1816;

const int RPC_X_NO_MEMORY = 14;

const int RPC_X_INVALID_BOUND = 1734;

const int RPC_X_INVALID_TAG = 1733;

const int RPC_X_ENUM_VALUE_TOO_LARGE = 1781;

const int RPC_X_SS_CONTEXT_MISMATCH = 6;

const int RPC_X_INVALID_BUFFER = 1784;

const int RPC_X_PIPE_APP_MEMORY = 14;

const int RPC_X_INVALID_PIPE_OPERATION = 1831;

const int RPC_ASYNC_VERSION_1_0 = 112;

const int RPC_C_NOTIFY_ON_SEND_COMPLETE = 1;

const int RPC_C_INFINITE_TIMEOUT = 4294967295;

const int MaxNumberOfEEInfoParams = 4;

const int RPC_EEINFO_VERSION = 1;

const int EEInfoPreviousRecordsMissing = 1;

const int EEInfoNextRecordsMissing = 2;

const int EEInfoUseFileTime = 4;

const int EEInfoGCCOM = 11;

const int EEInfoGCFRS = 12;

const int RPC_QUERY_SERVER_PRINCIPAL_NAME = 2;

const int RPC_QUERY_CLIENT_PRINCIPAL_NAME = 4;

const int RPC_QUERY_CALL_LOCAL_ADDRESS = 8;

const int RPC_QUERY_CLIENT_PID = 16;

const int RPC_QUERY_IS_CLIENT_LOCAL = 32;

const int RPC_QUERY_NO_AUTH_REQUIRED = 64;

const int RPC_CALL_ATTRIBUTES_VERSION = 3;

const int RPC_QUERY_CLIENT_ID = 128;

const int RPC_CALL_STATUS_CANCELLED = 1;

const int RPC_CALL_STATUS_DISCONNECTED = 2;

const int RpcNotificationCallStatusChange = 1;

const int ABM_NEW = 0;

const int ABM_REMOVE = 1;

const int ABM_QUERYPOS = 2;

const int ABM_SETPOS = 3;

const int ABM_GETSTATE = 4;

const int ABM_GETTASKBARPOS = 5;

const int ABM_ACTIVATE = 6;

const int ABM_GETAUTOHIDEBAR = 7;

const int ABM_SETAUTOHIDEBAR = 8;

const int ABM_WINDOWPOSCHANGED = 9;

const int ABM_SETSTATE = 10;

const int ABM_GETAUTOHIDEBAREX = 11;

const int ABM_SETAUTOHIDEBAREX = 12;

const int ABN_STATECHANGE = 0;

const int ABN_POSCHANGED = 1;

const int ABN_FULLSCREENAPP = 2;

const int ABN_WINDOWARRANGE = 3;

const int ABS_AUTOHIDE = 1;

const int ABS_ALWAYSONTOP = 2;

const int ABE_LEFT = 0;

const int ABE_TOP = 1;

const int ABE_RIGHT = 2;

const int ABE_BOTTOM = 3;

const int FO_MOVE = 1;

const int FO_COPY = 2;

const int FO_DELETE = 3;

const int FO_RENAME = 4;

const int FOF_MULTIDESTFILES = 1;

const int FOF_CONFIRMMOUSE = 2;

const int FOF_SILENT = 4;

const int FOF_RENAMEONCOLLISION = 8;

const int FOF_NOCONFIRMATION = 16;

const int FOF_WANTMAPPINGHANDLE = 32;

const int FOF_ALLOWUNDO = 64;

const int FOF_FILESONLY = 128;

const int FOF_SIMPLEPROGRESS = 256;

const int FOF_NOCONFIRMMKDIR = 512;

const int FOF_NOERRORUI = 1024;

const int FOF_NOCOPYSECURITYATTRIBS = 2048;

const int FOF_NORECURSION = 4096;

const int FOF_NO_CONNECTED_ELEMENTS = 8192;

const int FOF_WANTNUKEWARNING = 16384;

const int FOF_NORECURSEREPARSE = 32768;

const int FOF_NO_UI = 1556;

const int PO_DELETE = 19;

const int PO_RENAME = 20;

const int PO_PORTCHANGE = 32;

const int PO_REN_PORT = 52;

const int SE_ERR_FNF = 2;

const int SE_ERR_PNF = 3;

const int SE_ERR_ACCESSDENIED = 5;

const int SE_ERR_OOM = 8;

const int SE_ERR_DLLNOTFOUND = 32;

const int SE_ERR_SHARE = 26;

const int SE_ERR_ASSOCINCOMPLETE = 27;

const int SE_ERR_DDETIMEOUT = 28;

const int SE_ERR_DDEFAIL = 29;

const int SE_ERR_DDEBUSY = 30;

const int SE_ERR_NOASSOC = 31;

const int SEE_MASK_DEFAULT = 0;

const int SEE_MASK_CLASSNAME = 1;

const int SEE_MASK_CLASSKEY = 3;

const int SEE_MASK_IDLIST = 4;

const int SEE_MASK_INVOKEIDLIST = 12;

const int SEE_MASK_HOTKEY = 32;

const int SEE_MASK_NOCLOSEPROCESS = 64;

const int SEE_MASK_CONNECTNETDRV = 128;

const int SEE_MASK_NOASYNC = 256;

const int SEE_MASK_FLAG_DDEWAIT = 256;

const int SEE_MASK_DOENVSUBST = 512;

const int SEE_MASK_FLAG_NO_UI = 1024;

const int SEE_MASK_UNICODE = 16384;

const int SEE_MASK_NO_CONSOLE = 32768;

const int SEE_MASK_ASYNCOK = 1048576;

const int SEE_MASK_HMONITOR = 2097152;

const int SEE_MASK_NOZONECHECKS = 8388608;

const int SEE_MASK_NOQUERYCLASSSTORE = 16777216;

const int SEE_MASK_WAITFORINPUTIDLE = 33554432;

const int SEE_MASK_FLAG_LOG_USAGE = 67108864;

const int SEE_MASK_FLAG_HINST_IS_SITE = 134217728;

const int SHERB_NOCONFIRMATION = 1;

const int SHERB_NOPROGRESSUI = 2;

const int SHERB_NOSOUND = 4;

const int NOTIFYICONDATAA_V1_SIZE = 104;

const int NOTIFYICONDATAW_V1_SIZE = 168;

const int NOTIFYICONDATA_V1_SIZE = 104;

const int NOTIFYICONDATAA_V2_SIZE = 504;

const int NOTIFYICONDATAW_V2_SIZE = 952;

const int NOTIFYICONDATA_V2_SIZE = 504;

const int NOTIFYICONDATAA_V3_SIZE = 520;

const int NOTIFYICONDATAW_V3_SIZE = 968;

const int NOTIFYICONDATA_V3_SIZE = 520;

const int NIN_SELECT = 1024;

const int NINF_KEY = 1;

const int NIN_KEYSELECT = 1025;

const int NIN_BALLOONSHOW = 1026;

const int NIN_BALLOONHIDE = 1027;

const int NIN_BALLOONTIMEOUT = 1028;

const int NIN_BALLOONUSERCLICK = 1029;

const int NIN_POPUPOPEN = 1030;

const int NIN_POPUPCLOSE = 1031;

const int NIM_ADD = 0;

const int NIM_MODIFY = 1;

const int NIM_DELETE = 2;

const int NIM_SETFOCUS = 3;

const int NIM_SETVERSION = 4;

const int NOTIFYICON_VERSION = 3;

const int NOTIFYICON_VERSION_4 = 4;

const int NIF_MESSAGE = 1;

const int NIF_ICON = 2;

const int NIF_TIP = 4;

const int NIF_STATE = 8;

const int NIF_INFO = 16;

const int NIF_GUID = 32;

const int NIF_REALTIME = 64;

const int NIF_SHOWTIP = 128;

const int NIS_HIDDEN = 1;

const int NIS_SHAREDICON = 2;

const int NIIF_NONE = 0;

const int NIIF_INFO = 1;

const int NIIF_WARNING = 2;

const int NIIF_ERROR = 3;

const int NIIF_USER = 4;

const int NIIF_ICON_MASK = 15;

const int NIIF_NOSOUND = 16;

const int NIIF_LARGE_ICON = 32;

const int NIIF_RESPECT_QUIET_TIME = 128;

const int SHGFI_ICON = 256;

const int SHGFI_DISPLAYNAME = 512;

const int SHGFI_TYPENAME = 1024;

const int SHGFI_ATTRIBUTES = 2048;

const int SHGFI_ICONLOCATION = 4096;

const int SHGFI_EXETYPE = 8192;

const int SHGFI_SYSICONINDEX = 16384;

const int SHGFI_LINKOVERLAY = 32768;

const int SHGFI_SELECTED = 65536;

const int SHGFI_ATTR_SPECIFIED = 131072;

const int SHGFI_LARGEICON = 0;

const int SHGFI_SMALLICON = 1;

const int SHGFI_OPENICON = 2;

const int SHGFI_SHELLICONSIZE = 4;

const int SHGFI_PIDL = 8;

const int SHGFI_USEFILEATTRIBUTES = 16;

const int SHGFI_ADDOVERLAYS = 32;

const int SHGFI_OVERLAYINDEX = 64;

const int SHGSI_ICONLOCATION = 0;

const int SHGSI_ICON = 256;

const int SHGSI_SYSICONINDEX = 16384;

const int SHGSI_LINKOVERLAY = 32768;

const int SHGSI_SELECTED = 65536;

const int SHGSI_LARGEICON = 0;

const int SHGSI_SMALLICON = 1;

const int SHGSI_SHELLICONSIZE = 4;

const int SIID_INVALID = -1;

const int SHGNLI_PIDL = 1;

const int SHGNLI_PREFIXNAME = 2;

const int SHGNLI_NOUNIQUE = 4;

const int SHGNLI_NOLNK = 8;

const int SHGNLI_NOLOCNAME = 16;

const int SHGNLI_USEURLEXT = 32;

const int PRINTACTION_OPEN = 0;

const int PRINTACTION_PROPERTIES = 1;

const int PRINTACTION_NETINSTALL = 2;

const int PRINTACTION_NETINSTALLLINK = 3;

const int PRINTACTION_TESTPAGE = 4;

const int PRINTACTION_OPENNETPRN = 5;

const int PRINTACTION_DOCUMENTDEFAULTS = 6;

const int PRINTACTION_SERVERPROPERTIES = 7;

const int PRINT_PROP_FORCE_NAME = 1;

const int OFFLINE_STATUS_LOCAL = 1;

const int OFFLINE_STATUS_REMOTE = 2;

const int OFFLINE_STATUS_INCOMPLETE = 4;

const int SHIL_LARGE = 0;

const int SHIL_SMALL = 1;

const int SHIL_EXTRALARGE = 2;

const int SHIL_SYSSMALL = 3;

const int SHIL_JUMBO = 4;

const int SHIL_LAST = 4;

const String WC_NETADDRESS = 'm';

const int NCM_GETADDRESS = 1025;

const int NCM_SETALLOWTYPE = 1026;

const int NCM_GETALLOWTYPE = 1027;

const int NCM_DISPLAYERRORTIP = 1028;

const int PERF_DATA_VERSION = 1;

const int PERF_DATA_REVISION = 1;

const int PERF_NO_INSTANCES = -1;

const int PERF_METADATA_MULTIPLE_INSTANCES = -2;

const int PERF_METADATA_NO_INSTANCES = -3;

const int PERF_SIZE_DWORD = 0;

const int PERF_SIZE_LARGE = 256;

const int PERF_SIZE_ZERO = 512;

const int PERF_SIZE_VARIABLE_LEN = 768;

const int PERF_TYPE_NUMBER = 0;

const int PERF_TYPE_COUNTER = 1024;

const int PERF_TYPE_TEXT = 2048;

const int PERF_TYPE_ZERO = 3072;

const int PERF_NUMBER_HEX = 0;

const int PERF_NUMBER_DECIMAL = 65536;

const int PERF_NUMBER_DEC_1000 = 131072;

const int PERF_COUNTER_VALUE = 0;

const int PERF_COUNTER_RATE = 65536;

const int PERF_COUNTER_FRACTION = 131072;

const int PERF_COUNTER_BASE = 196608;

const int PERF_COUNTER_ELAPSED = 262144;

const int PERF_COUNTER_QUEUELEN = 327680;

const int PERF_COUNTER_HISTOGRAM = 393216;

const int PERF_COUNTER_PRECISION = 458752;

const int PERF_TEXT_UNICODE = 0;

const int PERF_TEXT_ASCII = 65536;

const int PERF_TIMER_TICK = 0;

const int PERF_TIMER_100NS = 1048576;

const int PERF_OBJECT_TIMER = 2097152;

const int PERF_DELTA_COUNTER = 4194304;

const int PERF_DELTA_BASE = 8388608;

const int PERF_INVERSE_COUNTER = 16777216;

const int PERF_MULTI_COUNTER = 33554432;

const int PERF_DISPLAY_NO_SUFFIX = 0;

const int PERF_DISPLAY_PER_SEC = 268435456;

const int PERF_DISPLAY_PERCENT = 536870912;

const int PERF_DISPLAY_SECONDS = 805306368;

const int PERF_DISPLAY_NOSHOW = 1073741824;

const int PERF_COUNTER_COUNTER = 272696320;

const int PERF_COUNTER_TIMER = 541132032;

const int PERF_COUNTER_QUEUELEN_TYPE = 4523008;

const int PERF_COUNTER_LARGE_QUEUELEN_TYPE = 4523264;

const int PERF_COUNTER_100NS_QUEUELEN_TYPE = 5571840;

const int PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE = 6620416;

const int PERF_COUNTER_BULK_COUNT = 272696576;

const int PERF_COUNTER_TEXT = 2816;

const int PERF_COUNTER_RAWCOUNT = 65536;

const int PERF_COUNTER_LARGE_RAWCOUNT = 65792;

const int PERF_COUNTER_RAWCOUNT_HEX = 0;

const int PERF_COUNTER_LARGE_RAWCOUNT_HEX = 256;

const int PERF_SAMPLE_FRACTION = 549585920;

const int PERF_SAMPLE_COUNTER = 4260864;

const int PERF_COUNTER_NODATA = 1073742336;

const int PERF_COUNTER_TIMER_INV = 557909248;

const int PERF_SAMPLE_BASE = 1073939457;

const int PERF_AVERAGE_TIMER = 805438464;

const int PERF_AVERAGE_BASE = 1073939458;

const int PERF_AVERAGE_BULK = 1073874176;

const int PERF_OBJ_TIME_TIMER = 543229184;

const int PERF_100NSEC_TIMER = 542180608;

const int PERF_100NSEC_TIMER_INV = 558957824;

const int PERF_COUNTER_MULTI_TIMER = 574686464;

const int PERF_COUNTER_MULTI_TIMER_INV = 591463680;

const int PERF_COUNTER_MULTI_BASE = 1107494144;

const int PERF_100NSEC_MULTI_TIMER = 575735040;

const int PERF_100NSEC_MULTI_TIMER_INV = 592512256;

const int PERF_RAW_FRACTION = 537003008;

const int PERF_LARGE_RAW_FRACTION = 537003264;

const int PERF_RAW_BASE = 1073939459;

const int PERF_LARGE_RAW_BASE = 1073939712;

const int PERF_ELAPSED_TIME = 807666944;

const int PERF_COUNTER_HISTOGRAM_TYPE = 2147483648;

const int PERF_COUNTER_DELTA = 4195328;

const int PERF_COUNTER_LARGE_DELTA = 4195584;

const int PERF_PRECISION_SYSTEM_TIMER = 541525248;

const int PERF_PRECISION_100NS_TIMER = 542573824;

const int PERF_PRECISION_OBJECT_TIMER = 543622400;

const int PERF_PRECISION_TIMESTAMP = 1073939712;

const int PERF_DETAIL_NOVICE = 100;

const int PERF_DETAIL_ADVANCED = 200;

const int PERF_DETAIL_EXPERT = 300;

const int PERF_DETAIL_WIZARD = 400;

const int PERF_NO_UNIQUE_ID = -1;

const int MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = 64;

const int WINPERF_LOG_NONE = 0;

const int WINPERF_LOG_USER = 1;

const int WINPERF_LOG_DEBUG = 2;

const int WINPERF_LOG_VERBOSE = 3;

const int ALG_CLASS_ANY = 0;

const int ALG_CLASS_SIGNATURE = 8192;

const int ALG_CLASS_MSG_ENCRYPT = 16384;

const int ALG_CLASS_DATA_ENCRYPT = 24576;

const int ALG_CLASS_HASH = 32768;

const int ALG_CLASS_KEY_EXCHANGE = 40960;

const int ALG_CLASS_ALL = 57344;

const int ALG_TYPE_ANY = 0;

const int ALG_TYPE_DSS = 512;

const int ALG_TYPE_RSA = 1024;

const int ALG_TYPE_BLOCK = 1536;

const int ALG_TYPE_STREAM = 2048;

const int ALG_TYPE_DH = 2560;

const int ALG_TYPE_SECURECHANNEL = 3072;

const int ALG_TYPE_ECDH = 3584;

const int ALG_TYPE_THIRDPARTY = 4096;

const int ALG_SID_ANY = 0;

const int ALG_SID_THIRDPARTY_ANY = 0;

const int ALG_SID_RSA_ANY = 0;

const int ALG_SID_RSA_PKCS = 1;

const int ALG_SID_RSA_MSATWORK = 2;

const int ALG_SID_RSA_ENTRUST = 3;

const int ALG_SID_RSA_PGP = 4;

const int ALG_SID_DSS_ANY = 0;

const int ALG_SID_DSS_PKCS = 1;

const int ALG_SID_DSS_DMS = 2;

const int ALG_SID_ECDSA = 3;

const int ALG_SID_DES = 1;

const int ALG_SID_3DES = 3;

const int ALG_SID_DESX = 4;

const int ALG_SID_IDEA = 5;

const int ALG_SID_CAST = 6;

const int ALG_SID_SAFERSK64 = 7;

const int ALG_SID_SAFERSK128 = 8;

const int ALG_SID_3DES_112 = 9;

const int ALG_SID_CYLINK_MEK = 12;

const int ALG_SID_RC5 = 13;

const int ALG_SID_AES_128 = 14;

const int ALG_SID_AES_192 = 15;

const int ALG_SID_AES_256 = 16;

const int ALG_SID_AES = 17;

const int ALG_SID_SKIPJACK = 10;

const int ALG_SID_TEK = 11;

const int CRYPT_MODE_CBCI = 6;

const int CRYPT_MODE_CFBP = 7;

const int CRYPT_MODE_OFBP = 8;

const int CRYPT_MODE_CBCOFM = 9;

const int CRYPT_MODE_CBCOFMI = 10;

const int ALG_SID_RC2 = 2;

const int ALG_SID_RC4 = 1;

const int ALG_SID_SEAL = 2;

const int ALG_SID_DH_SANDF = 1;

const int ALG_SID_DH_EPHEM = 2;

const int ALG_SID_AGREED_KEY_ANY = 3;

const int ALG_SID_KEA = 4;

const int ALG_SID_ECDH = 5;

const int ALG_SID_ECDH_EPHEM = 6;

const int ALG_SID_MD2 = 1;

const int ALG_SID_MD4 = 2;

const int ALG_SID_MD5 = 3;

const int ALG_SID_SHA = 4;

const int ALG_SID_SHA1 = 4;

const int ALG_SID_MAC = 5;

const int ALG_SID_RIPEMD = 6;

const int ALG_SID_RIPEMD160 = 7;

const int ALG_SID_SSL3SHAMD5 = 8;

const int ALG_SID_HMAC = 9;

const int ALG_SID_TLS1PRF = 10;

const int ALG_SID_HASH_REPLACE_OWF = 11;

const int ALG_SID_SHA_256 = 12;

const int ALG_SID_SHA_384 = 13;

const int ALG_SID_SHA_512 = 14;

const int ALG_SID_SSL3_MASTER = 1;

const int ALG_SID_SCHANNEL_MASTER_HASH = 2;

const int ALG_SID_SCHANNEL_MAC_KEY = 3;

const int ALG_SID_PCT1_MASTER = 4;

const int ALG_SID_SSL2_MASTER = 5;

const int ALG_SID_TLS1_MASTER = 6;

const int ALG_SID_SCHANNEL_ENC_KEY = 7;

const int ALG_SID_ECMQV = 1;

const int ALG_SID_EXAMPLE = 80;

const int CALG_MD2 = 32769;

const int CALG_MD4 = 32770;

const int CALG_MD5 = 32771;

const int CALG_SHA = 32772;

const int CALG_SHA1 = 32772;

const int CALG_MAC = 32773;

const int CALG_RSA_SIGN = 9216;

const int CALG_DSS_SIGN = 8704;

const int CALG_NO_SIGN = 8192;

const int CALG_RSA_KEYX = 41984;

const int CALG_DES = 26113;

const int CALG_3DES_112 = 26121;

const int CALG_3DES = 26115;

const int CALG_DESX = 26116;

const int CALG_RC2 = 26114;

const int CALG_RC4 = 26625;

const int CALG_SEAL = 26626;

const int CALG_DH_SF = 43521;

const int CALG_DH_EPHEM = 43522;

const int CALG_AGREEDKEY_ANY = 43523;

const int CALG_KEA_KEYX = 43524;

const int CALG_HUGHES_MD5 = 40963;

const int CALG_SKIPJACK = 26122;

const int CALG_TEK = 26123;

const int CALG_CYLINK_MEK = 26124;

const int CALG_SSL3_SHAMD5 = 32776;

const int CALG_SSL3_MASTER = 19457;

const int CALG_SCHANNEL_MASTER_HASH = 19458;

const int CALG_SCHANNEL_MAC_KEY = 19459;

const int CALG_SCHANNEL_ENC_KEY = 19463;

const int CALG_PCT1_MASTER = 19460;

const int CALG_SSL2_MASTER = 19461;

const int CALG_TLS1_MASTER = 19462;

const int CALG_RC5 = 26125;

const int CALG_HMAC = 32777;

const int CALG_TLS1PRF = 32778;

const int CALG_HASH_REPLACE_OWF = 32779;

const int CALG_AES_128 = 26126;

const int CALG_AES_192 = 26127;

const int CALG_AES_256 = 26128;

const int CALG_AES = 26129;

const int CALG_SHA_256 = 32780;

const int CALG_SHA_384 = 32781;

const int CALG_SHA_512 = 32782;

const int CALG_ECDH = 43525;

const int CALG_ECDH_EPHEM = 44550;

const int CALG_ECMQV = 40961;

const int CALG_ECDSA = 8707;

const int CALG_NULLCIPHER = 24576;

const int CALG_THIRDPARTY_KEY_EXCHANGE = 45056;

const int CALG_THIRDPARTY_SIGNATURE = 12288;

const int CALG_THIRDPARTY_CIPHER = 28672;

const int CALG_THIRDPARTY_HASH = 36864;

const int CRYPT_VERIFYCONTEXT = 4026531840;

const int CRYPT_NEWKEYSET = 8;

const int CRYPT_DELETEKEYSET = 16;

const int CRYPT_MACHINE_KEYSET = 32;

const int CRYPT_SILENT = 64;

const int CRYPT_DEFAULT_CONTAINER_OPTIONAL = 128;

const int CRYPT_EXPORTABLE = 1;

const int CRYPT_USER_PROTECTED = 2;

const int CRYPT_CREATE_SALT = 4;

const int CRYPT_UPDATE_KEY = 8;

const int CRYPT_NO_SALT = 16;

const int CRYPT_PREGEN = 64;

const int CRYPT_RECIPIENT = 16;

const int CRYPT_INITIATOR = 64;

const int CRYPT_ONLINE = 128;

const int CRYPT_SF = 256;

const int CRYPT_CREATE_IV = 512;

const int CRYPT_KEK = 1024;

const int CRYPT_DATA_KEY = 2048;

const int CRYPT_VOLATILE = 4096;

const int CRYPT_SGCKEY = 8192;

const int CRYPT_USER_PROTECTED_STRONG = 1048576;

const int CRYPT_ARCHIVABLE = 16384;

const int CRYPT_FORCE_KEY_PROTECTION_HIGH = 32768;

const int RSA1024BIT_KEY = 67108864;

const int CRYPT_SERVER = 1024;

const int KEY_LENGTH_MASK = 4294901760;

const int CRYPT_Y_ONLY = 1;

const int CRYPT_SSL2_FALLBACK = 2;

const int CRYPT_DESTROYKEY = 4;

const int CRYPT_OAEP = 64;

const int CRYPT_BLOB_VER3 = 128;

const int CRYPT_IPSEC_HMAC_KEY = 256;

const int CRYPT_DECRYPT_RSA_NO_PADDING_CHECK = 32;

const int CRYPT_SECRETDIGEST = 1;

const int CRYPT_OWF_REPL_LM_HASH = 1;

const int CRYPT_LITTLE_ENDIAN = 1;

const int CRYPT_NOHASHOID = 1;

const int CRYPT_TYPE2_FORMAT = 2;

const int CRYPT_X931_FORMAT = 4;

const int CRYPT_MACHINE_DEFAULT = 1;

const int CRYPT_USER_DEFAULT = 2;

const int CRYPT_DELETE_DEFAULT = 4;

const int SIMPLEBLOB = 1;

const int PUBLICKEYBLOB = 6;

const int PRIVATEKEYBLOB = 7;

const int PLAINTEXTKEYBLOB = 8;

const int OPAQUEKEYBLOB = 9;

const int PUBLICKEYBLOBEX = 10;

const int SYMMETRICWRAPKEYBLOB = 11;

const int KEYSTATEBLOB = 12;

const int AT_KEYEXCHANGE = 1;

const int AT_SIGNATURE = 2;

const int CRYPT_USERDATA = 1;

const int KP_IV = 1;

const int KP_SALT = 2;

const int KP_PADDING = 3;

const int KP_MODE = 4;

const int KP_MODE_BITS = 5;

const int KP_PERMISSIONS = 6;

const int KP_ALGID = 7;

const int KP_BLOCKLEN = 8;

const int KP_KEYLEN = 9;

const int KP_SALT_EX = 10;

const int KP_P = 11;

const int KP_G = 12;

const int KP_Q = 13;

const int KP_X = 14;

const int KP_Y = 15;

const int KP_RA = 16;

const int KP_RB = 17;

const int KP_INFO = 18;

const int KP_EFFECTIVE_KEYLEN = 19;

const int KP_SCHANNEL_ALG = 20;

const int KP_CLIENT_RANDOM = 21;

const int KP_SERVER_RANDOM = 22;

const int KP_RP = 23;

const int KP_PRECOMP_MD5 = 24;

const int KP_PRECOMP_SHA = 25;

const int KP_CERTIFICATE = 26;

const int KP_CLEAR_KEY = 27;

const int KP_PUB_EX_LEN = 28;

const int KP_PUB_EX_VAL = 29;

const int KP_KEYVAL = 30;

const int KP_ADMIN_PIN = 31;

const int KP_KEYEXCHANGE_PIN = 32;

const int KP_SIGNATURE_PIN = 33;

const int KP_PREHASH = 34;

const int KP_ROUNDS = 35;

const int KP_OAEP_PARAMS = 36;

const int KP_CMS_KEY_INFO = 37;

const int KP_CMS_DH_KEY_INFO = 38;

const int KP_PUB_PARAMS = 39;

const int KP_VERIFY_PARAMS = 40;

const int KP_HIGHEST_VERSION = 41;

const int KP_GET_USE_COUNT = 42;

const int KP_PIN_ID = 43;

const int KP_PIN_INFO = 44;

const int PKCS5_PADDING = 1;

const int RANDOM_PADDING = 2;

const int ZERO_PADDING = 3;

const int CRYPT_MODE_CBC = 1;

const int CRYPT_MODE_ECB = 2;

const int CRYPT_MODE_OFB = 3;

const int CRYPT_MODE_CFB = 4;

const int CRYPT_MODE_CTS = 5;

const int CRYPT_ENCRYPT = 1;

const int CRYPT_DECRYPT = 2;

const int CRYPT_EXPORT = 4;

const int CRYPT_READ = 8;

const int CRYPT_WRITE = 16;

const int CRYPT_MAC = 32;

const int CRYPT_EXPORT_KEY = 64;

const int CRYPT_IMPORT_KEY = 128;

const int CRYPT_ARCHIVE = 256;

const int HP_ALGID = 1;

const int HP_HASHVAL = 2;

const int HP_HASHSIZE = 4;

const int HP_HMAC_INFO = 5;

const int HP_TLS1PRF_LABEL = 6;

const int HP_TLS1PRF_SEED = 7;

const int CRYPT_FAILED = 0;

const int CRYPT_SUCCEED = 1;

const int PP_ENUMALGS = 1;

const int PP_ENUMCONTAINERS = 2;

const int PP_IMPTYPE = 3;

const int PP_NAME = 4;

const int PP_VERSION = 5;

const int PP_CONTAINER = 6;

const int PP_CHANGE_PASSWORD = 7;

const int PP_KEYSET_SEC_DESCR = 8;

const int PP_CERTCHAIN = 9;

const int PP_KEY_TYPE_SUBTYPE = 10;

const int PP_PROVTYPE = 16;

const int PP_KEYSTORAGE = 17;

const int PP_APPLI_CERT = 18;

const int PP_SYM_KEYSIZE = 19;

const int PP_SESSION_KEYSIZE = 20;

const int PP_UI_PROMPT = 21;

const int PP_ENUMALGS_EX = 22;

const int PP_ENUMMANDROOTS = 25;

const int PP_ENUMELECTROOTS = 26;

const int PP_KEYSET_TYPE = 27;

const int PP_ADMIN_PIN = 31;

const int PP_KEYEXCHANGE_PIN = 32;

const int PP_SIGNATURE_PIN = 33;

const int PP_SIG_KEYSIZE_INC = 34;

const int PP_KEYX_KEYSIZE_INC = 35;

const int PP_UNIQUE_CONTAINER = 36;

const int PP_SGC_INFO = 37;

const int PP_USE_HARDWARE_RNG = 38;

const int PP_KEYSPEC = 39;

const int PP_ENUMEX_SIGNING_PROT = 40;

const int PP_CRYPT_COUNT_KEY_USE = 41;

const int PP_USER_CERTSTORE = 42;

const int PP_SMARTCARD_READER = 43;

const int PP_SMARTCARD_GUID = 45;

const int PP_ROOT_CERTSTORE = 46;

const int PP_SMARTCARD_READER_ICON = 47;

const int CRYPT_FIRST = 1;

const int CRYPT_NEXT = 2;

const int CRYPT_SGC_ENUM = 4;

const int CRYPT_IMPL_HARDWARE = 1;

const int CRYPT_IMPL_SOFTWARE = 2;

const int CRYPT_IMPL_MIXED = 3;

const int CRYPT_IMPL_UNKNOWN = 4;

const int CRYPT_IMPL_REMOVABLE = 8;

const int CRYPT_SEC_DESCR = 1;

const int CRYPT_PSTORE = 2;

const int CRYPT_UI_PROMPT = 4;

const int CRYPT_FLAG_PCT1 = 1;

const int CRYPT_FLAG_SSL2 = 2;

const int CRYPT_FLAG_SSL3 = 4;

const int CRYPT_FLAG_TLS1 = 8;

const int CRYPT_FLAG_IPSEC = 16;

const int CRYPT_FLAG_SIGNING = 32;

const int CRYPT_SGC = 1;

const int CRYPT_FASTSGC = 2;

const int PP_CLIENT_HWND = 1;

const int PP_CONTEXT_INFO = 11;

const int PP_KEYEXCHANGE_KEYSIZE = 12;

const int PP_SIGNATURE_KEYSIZE = 13;

const int PP_KEYEXCHANGE_ALG = 14;

const int PP_SIGNATURE_ALG = 15;

const int PP_DELETEKEY = 24;

const int PP_PIN_PROMPT_STRING = 44;

const int PP_SECURE_KEYEXCHANGE_PIN = 47;

const int PP_SECURE_SIGNATURE_PIN = 48;

const int PP_DISMISS_PIN_UI_SEC = 49;

const int PP_IS_PFX_EPHEMERAL = 50;

const int PROV_RSA_FULL = 1;

const int PROV_RSA_SIG = 2;

const int PROV_DSS = 3;

const int PROV_FORTEZZA = 4;

const int PROV_MS_EXCHANGE = 5;

const int PROV_SSL = 6;

const int PROV_RSA_SCHANNEL = 12;

const int PROV_DSS_DH = 13;

const int PROV_EC_ECDSA_SIG = 14;

const int PROV_EC_ECNRA_SIG = 15;

const int PROV_EC_ECDSA_FULL = 16;

const int PROV_EC_ECNRA_FULL = 17;

const int PROV_DH_SCHANNEL = 18;

const int PROV_SPYRUS_LYNKS = 20;

const int PROV_RNG = 21;

const int PROV_INTEL_SEC = 22;

const int PROV_REPLACE_OWF = 23;

const int PROV_RSA_AES = 24;

const String MS_DEF_PROV_A = 'Microsoft Base Cryptographic Provider v1.0';

const String MS_DEF_PROV_W = 'M';

const String MS_DEF_PROV = 'Microsoft Base Cryptographic Provider v1.0';

const String MS_ENHANCED_PROV_A =
    'Microsoft Enhanced Cryptographic Provider v1.0';

const String MS_ENHANCED_PROV_W = 'M';

const String MS_ENHANCED_PROV =
    'Microsoft Enhanced Cryptographic Provider v1.0';

const String MS_STRONG_PROV_A = 'Microsoft Strong Cryptographic Provider';

const String MS_STRONG_PROV_W = 'M';

const String MS_STRONG_PROV = 'Microsoft Strong Cryptographic Provider';

const String MS_DEF_RSA_SIG_PROV_A =
    'Microsoft RSA Signature Cryptographic Provider';

const String MS_DEF_RSA_SIG_PROV_W = 'M';

const String MS_DEF_RSA_SIG_PROV =
    'Microsoft RSA Signature Cryptographic Provider';

const String MS_DEF_RSA_SCHANNEL_PROV_A =
    'Microsoft RSA SChannel Cryptographic Provider';

const String MS_DEF_RSA_SCHANNEL_PROV_W = 'M';

const String MS_DEF_RSA_SCHANNEL_PROV =
    'Microsoft RSA SChannel Cryptographic Provider';

const String MS_DEF_DSS_PROV_A = 'Microsoft Base DSS Cryptographic Provider';

const String MS_DEF_DSS_PROV_W = 'M';

const String MS_DEF_DSS_PROV = 'Microsoft Base DSS Cryptographic Provider';

const String MS_DEF_DSS_DH_PROV_A =
    'Microsoft Base DSS and Diffie-Hellman Cryptographic Provider';

const String MS_DEF_DSS_DH_PROV_W = 'M';

const String MS_DEF_DSS_DH_PROV =
    'Microsoft Base DSS and Diffie-Hellman Cryptographic Provider';

const String MS_ENH_DSS_DH_PROV_A =
    'Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider';

const String MS_ENH_DSS_DH_PROV_W = 'M';

const String MS_ENH_DSS_DH_PROV =
    'Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider';

const String MS_DEF_DH_SCHANNEL_PROV_A =
    'Microsoft DH SChannel Cryptographic Provider';

const String MS_DEF_DH_SCHANNEL_PROV_W = 'M';

const String MS_DEF_DH_SCHANNEL_PROV =
    'Microsoft DH SChannel Cryptographic Provider';

const String MS_SCARD_PROV_A = 'Microsoft Base Smart Card Crypto Provider';

const String MS_SCARD_PROV_W = 'M';

const String MS_SCARD_PROV = 'Microsoft Base Smart Card Crypto Provider';

const String MS_ENH_RSA_AES_PROV_A =
    'Microsoft Enhanced RSA and AES Cryptographic Provider';

const String MS_ENH_RSA_AES_PROV_W = 'M';

const String MS_ENH_RSA_AES_PROV_XP_A =
    'Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)';

const String MS_ENH_RSA_AES_PROV_XP_W = 'M';

const String MS_ENH_RSA_AES_PROV_XP =
    'Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)';

const String MS_ENH_RSA_AES_PROV =
    'Microsoft Enhanced RSA and AES Cryptographic Provider';

const int MAXUIDLEN = 64;

const String EXPO_OFFLOAD_REG_VALUE = 'ExpoOffload';

const String EXPO_OFFLOAD_FUNC_NAME = 'OffloadModExpo';

const String szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS =
    'Software\\Policies\\Microsoft\\Cryptography';

const String szKEY_CACHE_ENABLED = 'CachePrivateKeys';

const String szKEY_CACHE_SECONDS = 'PrivateKeyLifetimeSeconds';

const String szPRIV_KEY_CACHE_MAX_ITEMS = 'PrivKeyCacheMaxItems';

const int cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT = 20;

const String szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS =
    'PrivKeyCachePurgeIntervalSeconds';

const int cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT = 86400;

const int CUR_BLOB_VERSION = 2;

const int SCHANNEL_MAC_KEY = 0;

const int SCHANNEL_ENC_KEY = 1;

const int INTERNATIONAL_USAGE = 1;

const int BCRYPT_OBJECT_ALIGNMENT = 16;

const String BCRYPT_KDF_HASH = 'H';

const String BCRYPT_KDF_HMAC = 'H';

const String BCRYPT_KDF_TLS_PRF = 'T';

const String BCRYPT_KDF_SP80056A_CONCAT = 'S';

const String BCRYPT_KDF_RAW_SECRET = 'T';

const String BCRYPT_KDF_HKDF = 'H';

const int KDF_HASH_ALGORITHM = 0;

const int KDF_SECRET_PREPEND = 1;

const int KDF_SECRET_APPEND = 2;

const int KDF_HMAC_KEY = 3;

const int KDF_TLS_PRF_LABEL = 4;

const int KDF_TLS_PRF_SEED = 5;

const int KDF_SECRET_HANDLE = 6;

const int KDF_TLS_PRF_PROTOCOL = 7;

const int KDF_ALGORITHMID = 8;

const int KDF_PARTYUINFO = 9;

const int KDF_PARTYVINFO = 10;

const int KDF_SUPPPUBINFO = 11;

const int KDF_SUPPPRIVINFO = 12;

const int KDF_LABEL = 13;

const int KDF_CONTEXT = 14;

const int KDF_SALT = 15;

const int KDF_ITERATION_COUNT = 16;

const int KDF_GENERIC_PARAMETER = 17;

const int KDF_KEYBITLENGTH = 18;

const int KDF_HKDF_SALT = 19;

const int KDF_HKDF_INFO = 20;

const int KDF_USE_SECRET_AS_HMAC_KEY_FLAG = 1;

const int BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION = 1;

const int BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG = 1;

const int BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG = 2;

const String BCRYPT_OPAQUE_KEY_BLOB = 'O';

const String BCRYPT_KEY_DATA_BLOB = 'K';

const String BCRYPT_AES_WRAP_KEY_BLOB = 'R';

const String BCRYPT_OBJECT_LENGTH = 'O';

const String BCRYPT_ALGORITHM_NAME = 'A';

const String BCRYPT_PROVIDER_HANDLE = 'P';

const String BCRYPT_CHAINING_MODE = 'C';

const String BCRYPT_BLOCK_LENGTH = 'B';

const String BCRYPT_KEY_LENGTH = 'K';

const String BCRYPT_KEY_OBJECT_LENGTH = 'K';

const String BCRYPT_KEY_STRENGTH = 'K';

const String BCRYPT_KEY_LENGTHS = 'K';

const String BCRYPT_BLOCK_SIZE_LIST = 'B';

const String BCRYPT_EFFECTIVE_KEY_LENGTH = 'E';

const String BCRYPT_HASH_LENGTH = 'H';

const String BCRYPT_HASH_OID_LIST = 'H';

const String BCRYPT_PADDING_SCHEMES = 'P';

const String BCRYPT_SIGNATURE_LENGTH = 'S';

const String BCRYPT_HASH_BLOCK_LENGTH = 'H';

const String BCRYPT_AUTH_TAG_LENGTH = 'A';

const String BCRYPT_PRIMITIVE_TYPE = 'P';

const String BCRYPT_IS_KEYED_HASH = 'I';

const String BCRYPT_IS_REUSABLE_HASH = 'I';

const String BCRYPT_MESSAGE_BLOCK_LENGTH = 'M';

const String BCRYPT_PUBLIC_KEY_LENGTH = 'P';

const String BCRYPT_PCP_PLATFORM_TYPE_PROPERTY = 'P';

const String BCRYPT_PCP_PROVIDER_VERSION_PROPERTY = 'P';

const String BCRYPT_MULTI_OBJECT_LENGTH = 'M';

const String BCRYPT_IS_IFX_TPM_WEAK_KEY = 'I';

const String BCRYPT_HKDF_HASH_ALGORITHM = 'H';

const String BCRYPT_HKDF_SALT_AND_FINALIZE = 'H';

const String BCRYPT_HKDF_PRK_AND_FINALIZE = 'H';

const String BCRYPT_INITIALIZATION_VECTOR = 'I';

const String BCRYPT_CHAIN_MODE_NA = 'C';

const String BCRYPT_CHAIN_MODE_CBC = 'C';

const String BCRYPT_CHAIN_MODE_ECB = 'C';

const String BCRYPT_CHAIN_MODE_CFB = 'C';

const String BCRYPT_CHAIN_MODE_CCM = 'C';

const String BCRYPT_CHAIN_MODE_GCM = 'C';

const int BCRYPT_SUPPORTED_PAD_ROUTER = 1;

const int BCRYPT_SUPPORTED_PAD_PKCS1_ENC = 2;

const int BCRYPT_SUPPORTED_PAD_PKCS1_SIG = 4;

const int BCRYPT_SUPPORTED_PAD_OAEP = 8;

const int BCRYPT_SUPPORTED_PAD_PSS = 16;

const int BCRYPT_PROV_DISPATCH = 1;

const int BCRYPT_BLOCK_PADDING = 1;

const int BCRYPT_GENERATE_IV = 32;

const int BCRYPT_PAD_NONE = 1;

const int BCRYPT_PAD_PKCS1 = 2;

const int BCRYPT_PAD_OAEP = 4;

const int BCRYPT_PAD_PSS = 8;

const int BCRYPT_PAD_PKCS1_OPTIONAL_HASH_OID = 16;

const int BCRYPTBUFFER_VERSION = 0;

const String BCRYPT_PUBLIC_KEY_BLOB = 'P';

const String BCRYPT_PRIVATE_KEY_BLOB = 'P';

const String BCRYPT_RSAPUBLIC_BLOB = 'R';

const String BCRYPT_RSAPRIVATE_BLOB = 'R';

const String LEGACY_RSAPUBLIC_BLOB = 'C';

const String LEGACY_RSAPRIVATE_BLOB = 'C';

const int BCRYPT_RSAPUBLIC_MAGIC = 826364754;

const int BCRYPT_RSAPRIVATE_MAGIC = 843141970;

const String BCRYPT_RSAFULLPRIVATE_BLOB = 'R';

const int BCRYPT_RSAFULLPRIVATE_MAGIC = 859919186;

const String BCRYPT_GLOBAL_PARAMETERS = 'S';

const String BCRYPT_PRIVATE_KEY = 'P';

const String BCRYPT_ECCPUBLIC_BLOB = 'E';

const String BCRYPT_ECCPRIVATE_BLOB = 'E';

const String BCRYPT_ECCFULLPUBLIC_BLOB = 'E';

const String BCRYPT_ECCFULLPRIVATE_BLOB = 'E';

const String SSL_ECCPUBLIC_BLOB = 'S';

const int BCRYPT_ECDH_PUBLIC_P256_MAGIC = 827016005;

const int BCRYPT_ECDH_PRIVATE_P256_MAGIC = 843793221;

const int BCRYPT_ECDH_PUBLIC_P384_MAGIC = 860570437;

const int BCRYPT_ECDH_PRIVATE_P384_MAGIC = 877347653;

const int BCRYPT_ECDH_PUBLIC_P521_MAGIC = 894124869;

const int BCRYPT_ECDH_PRIVATE_P521_MAGIC = 910902085;

const int BCRYPT_ECDH_PUBLIC_GENERIC_MAGIC = 1347109701;

const int BCRYPT_ECDH_PRIVATE_GENERIC_MAGIC = 1447772997;

const int BCRYPT_ECDSA_PUBLIC_P256_MAGIC = 827540293;

const int BCRYPT_ECDSA_PRIVATE_P256_MAGIC = 844317509;

const int BCRYPT_ECDSA_PUBLIC_P384_MAGIC = 861094725;

const int BCRYPT_ECDSA_PRIVATE_P384_MAGIC = 877871941;

const int BCRYPT_ECDSA_PUBLIC_P521_MAGIC = 894649157;

const int BCRYPT_ECDSA_PRIVATE_P521_MAGIC = 911426373;

const int BCRYPT_ECDSA_PUBLIC_GENERIC_MAGIC = 1346650949;

const int BCRYPT_ECDSA_PRIVATE_GENERIC_MAGIC = 1447314245;

const int BCRYPT_ECC_FULLKEY_BLOB_V1 = 1;

const String BCRYPT_DH_PUBLIC_BLOB = 'D';

const String BCRYPT_DH_PRIVATE_BLOB = 'D';

const String LEGACY_DH_PUBLIC_BLOB = 'C';

const String LEGACY_DH_PRIVATE_BLOB = 'C';

const int BCRYPT_DH_PUBLIC_MAGIC = 1112557636;

const int BCRYPT_DH_PRIVATE_MAGIC = 1448101956;

const String BCRYPT_DH_PARAMETERS = 'D';

const int BCRYPT_DH_PARAMETERS_MAGIC = 1297107012;

const String BCRYPT_DSA_PUBLIC_BLOB = 'D';

const String BCRYPT_DSA_PRIVATE_BLOB = 'D';

const String LEGACY_DSA_PUBLIC_BLOB = 'C';

const String LEGACY_DSA_PRIVATE_BLOB = 'C';

const String LEGACY_DSA_V2_PUBLIC_BLOB = 'V';

const String LEGACY_DSA_V2_PRIVATE_BLOB = 'V';

const int BCRYPT_DSA_PUBLIC_MAGIC = 1112560452;

const int BCRYPT_DSA_PRIVATE_MAGIC = 1448104772;

const int BCRYPT_DSA_PUBLIC_MAGIC_V2 = 843206724;

const int BCRYPT_DSA_PRIVATE_MAGIC_V2 = 844517444;

const int BCRYPT_KEY_DATA_BLOB_MAGIC = 1296188491;

const int BCRYPT_KEY_DATA_BLOB_VERSION1 = 1;

const String BCRYPT_DSA_PARAMETERS = 'D';

const int BCRYPT_DSA_PARAMETERS_MAGIC = 1297109828;

const int BCRYPT_DSA_PARAMETERS_MAGIC_V2 = 843927620;

const String BCRYPT_ECC_PARAMETERS = 'E';

const String BCRYPT_ECC_CURVE_NAME = 'E';

const String BCRYPT_ECC_CURVE_NAME_LIST = 'E';

const int BCRYPT_ECC_PARAMETERS_MAGIC = 1346585413;

const String BCRYPT_ECC_CURVE_BRAINPOOLP160R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP160T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP192R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP192T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP224R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP224T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP256R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP256T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP320R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP320T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP384R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP384T1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP512R1 = 'b';

const String BCRYPT_ECC_CURVE_BRAINPOOLP512T1 = 'b';

const String BCRYPT_ECC_CURVE_25519 = 'c';

const String BCRYPT_ECC_CURVE_EC192WAPI = 'e';

const String BCRYPT_ECC_CURVE_NISTP192 = 'n';

const String BCRYPT_ECC_CURVE_NISTP224 = 'n';

const String BCRYPT_ECC_CURVE_NISTP256 = 'n';

const String BCRYPT_ECC_CURVE_NISTP384 = 'n';

const String BCRYPT_ECC_CURVE_NISTP521 = 'n';

const String BCRYPT_ECC_CURVE_NUMSP256T1 = 'n';

const String BCRYPT_ECC_CURVE_NUMSP384T1 = 'n';

const String BCRYPT_ECC_CURVE_NUMSP512T1 = 'n';

const String BCRYPT_ECC_CURVE_SECP160K1 = 's';

const String BCRYPT_ECC_CURVE_SECP160R1 = 's';

const String BCRYPT_ECC_CURVE_SECP160R2 = 's';

const String BCRYPT_ECC_CURVE_SECP192K1 = 's';

const String BCRYPT_ECC_CURVE_SECP192R1 = 's';

const String BCRYPT_ECC_CURVE_SECP224K1 = 's';

const String BCRYPT_ECC_CURVE_SECP224R1 = 's';

const String BCRYPT_ECC_CURVE_SECP256K1 = 's';

const String BCRYPT_ECC_CURVE_SECP256R1 = 's';

const String BCRYPT_ECC_CURVE_SECP384R1 = 's';

const String BCRYPT_ECC_CURVE_SECP521R1 = 's';

const String BCRYPT_ECC_CURVE_WTLS7 = 'w';

const String BCRYPT_ECC_CURVE_WTLS9 = 'w';

const String BCRYPT_ECC_CURVE_WTLS12 = 'w';

const String BCRYPT_ECC_CURVE_X962P192V1 = 'x';

const String BCRYPT_ECC_CURVE_X962P192V2 = 'x';

const String BCRYPT_ECC_CURVE_X962P192V3 = 'x';

const String BCRYPT_ECC_CURVE_X962P239V1 = 'x';

const String BCRYPT_ECC_CURVE_X962P239V2 = 'x';

const String BCRYPT_ECC_CURVE_X962P239V3 = 'x';

const String BCRYPT_ECC_CURVE_X962P256V1 = 'x';

const String MS_PRIMITIVE_PROVIDER = 'M';

const String MS_PLATFORM_CRYPTO_PROVIDER = 'M';

const String BCRYPT_RSA_ALGORITHM = 'R';

const String BCRYPT_RSA_SIGN_ALGORITHM = 'R';

const String BCRYPT_DH_ALGORITHM = 'D';

const String BCRYPT_DSA_ALGORITHM = 'D';

const String BCRYPT_RC2_ALGORITHM = 'R';

const String BCRYPT_RC4_ALGORITHM = 'R';

const String BCRYPT_AES_ALGORITHM = 'A';

const String BCRYPT_DES_ALGORITHM = 'D';

const String BCRYPT_DESX_ALGORITHM = 'D';

const String BCRYPT_3DES_ALGORITHM = '3';

const String BCRYPT_3DES_112_ALGORITHM = '3';

const String BCRYPT_MD2_ALGORITHM = 'M';

const String BCRYPT_MD4_ALGORITHM = 'M';

const String BCRYPT_MD5_ALGORITHM = 'M';

const String BCRYPT_SHA1_ALGORITHM = 'S';

const String BCRYPT_SHA256_ALGORITHM = 'S';

const String BCRYPT_SHA384_ALGORITHM = 'S';

const String BCRYPT_SHA512_ALGORITHM = 'S';

const String BCRYPT_AES_GMAC_ALGORITHM = 'A';

const String BCRYPT_AES_CMAC_ALGORITHM = 'A';

const String BCRYPT_ECDSA_P256_ALGORITHM = 'E';

const String BCRYPT_ECDSA_P384_ALGORITHM = 'E';

const String BCRYPT_ECDSA_P521_ALGORITHM = 'E';

const String BCRYPT_ECDH_P256_ALGORITHM = 'E';

const String BCRYPT_ECDH_P384_ALGORITHM = 'E';

const String BCRYPT_ECDH_P521_ALGORITHM = 'E';

const String BCRYPT_RNG_ALGORITHM = 'R';

const String BCRYPT_RNG_FIPS186_DSA_ALGORITHM = 'F';

const String BCRYPT_RNG_DUAL_EC_ALGORITHM = 'D';

const String BCRYPT_SP800108_CTR_HMAC_ALGORITHM = 'S';

const String BCRYPT_SP80056A_CONCAT_ALGORITHM = 'S';

const String BCRYPT_PBKDF2_ALGORITHM = 'P';

const String BCRYPT_CAPI_KDF_ALGORITHM = 'C';

const String BCRYPT_TLS1_1_KDF_ALGORITHM = 'T';

const String BCRYPT_TLS1_2_KDF_ALGORITHM = 'T';

const String BCRYPT_ECDSA_ALGORITHM = 'E';

const String BCRYPT_ECDH_ALGORITHM = 'E';

const String BCRYPT_XTS_AES_ALGORITHM = 'X';

const String BCRYPT_HKDF_ALGORITHM = 'H';

const String BCRYPT_CHACHA20_POLY1305_ALGORITHM = 'C';

const int BCRYPT_CIPHER_INTERFACE = 1;

const int BCRYPT_HASH_INTERFACE = 2;

const int BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3;

const int BCRYPT_SECRET_AGREEMENT_INTERFACE = 4;

const int BCRYPT_SIGNATURE_INTERFACE = 5;

const int BCRYPT_RNG_INTERFACE = 6;

const int BCRYPT_KEY_DERIVATION_INTERFACE = 7;

const int BCRYPT_ALG_HANDLE_HMAC_FLAG = 8;

const int BCRYPT_HASH_REUSABLE_FLAG = 32;

const int BCRYPT_CAPI_AES_FLAG = 16;

const int BCRYPT_MULTI_FLAG = 64;

const int BCRYPT_TLS_CBC_HMAC_VERIFY_FLAG = 4;

const int BCRYPT_BUFFERS_LOCKED_FLAG = 64;

const int BCRYPT_EXTENDED_KEYSIZE = 128;

const int BCRYPT_ENABLE_INCOMPATIBLE_FIPS_CHECKS = 256;

const int BCRYPT_CIPHER_OPERATION = 1;

const int BCRYPT_HASH_OPERATION = 2;

const int BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4;

const int BCRYPT_SECRET_AGREEMENT_OPERATION = 8;

const int BCRYPT_SIGNATURE_OPERATION = 16;

const int BCRYPT_RNG_OPERATION = 32;

const int BCRYPT_KEY_DERIVATION_OPERATION = 64;

const int BCRYPT_PUBLIC_KEY_FLAG = 1;

const int BCRYPT_PRIVATE_KEY_FLAG = 2;

const int BCRYPT_NO_KEY_VALIDATION = 8;

const int BCRYPT_KEY_VALIDATION_RANGE = 16;

const int BCRYPT_KEY_VALIDATION_RANGE_AND_ORDER = 24;

const int BCRYPT_KEY_VALIDATION_REGENERATE = 32;

const int BCRYPT_RNG_USE_ENTROPY_IN_BUFFER = 1;

const int BCRYPT_USE_SYSTEM_PREFERRED_RNG = 2;

const int BCRYPT_HASH_INTERFACE_MAJORVERSION_2 = 2;

const int CRYPT_MIN_DEPENDENCIES = 1;

const int CRYPT_PROCESS_ISOLATE = 65536;

const int CRYPT_UM = 1;

const int CRYPT_KM = 2;

const int CRYPT_MM = 3;

const int CRYPT_ANY = 4;

const int CRYPT_OVERWRITE = 1;

const int CRYPT_LOCAL = 1;

const int CRYPT_DOMAIN = 2;

const int CRYPT_EXCLUSIVE = 1;

const int CRYPT_OVERRIDE = 65536;

const int CRYPT_ALL_FUNCTIONS = 1;

const int CRYPT_ALL_PROVIDERS = 2;

const int CRYPT_PRIORITY_TOP = 0;

const int CRYPT_PRIORITY_BOTTOM = 4294967295;

const String CRYPT_DEFAULT_CONTEXT = 'D';

const int NCRYPT_MAX_KEY_NAME_LENGTH = 512;

const int NCRYPT_MAX_ALG_ID_LENGTH = 512;

const String MS_KEY_STORAGE_PROVIDER = 'M';

const String MS_SMART_CARD_KEY_STORAGE_PROVIDER = 'M';

const String MS_PLATFORM_KEY_STORAGE_PROVIDER = 'M';

const String MS_NGC_KEY_STORAGE_PROVIDER = 'M';

const String TPM_RSA_SRK_SEAL_KEY = 'M';

const String NCRYPT_RSA_ALGORITHM = 'R';

const String NCRYPT_RSA_SIGN_ALGORITHM = 'R';

const String NCRYPT_DH_ALGORITHM = 'D';

const String NCRYPT_DSA_ALGORITHM = 'D';

const String NCRYPT_MD2_ALGORITHM = 'M';

const String NCRYPT_MD4_ALGORITHM = 'M';

const String NCRYPT_MD5_ALGORITHM = 'M';

const String NCRYPT_SHA1_ALGORITHM = 'S';

const String NCRYPT_SHA256_ALGORITHM = 'S';

const String NCRYPT_SHA384_ALGORITHM = 'S';

const String NCRYPT_SHA512_ALGORITHM = 'S';

const String NCRYPT_ECDSA_P256_ALGORITHM = 'E';

const String NCRYPT_ECDSA_P384_ALGORITHM = 'E';

const String NCRYPT_ECDSA_P521_ALGORITHM = 'E';

const String NCRYPT_ECDH_P256_ALGORITHM = 'E';

const String NCRYPT_ECDH_P384_ALGORITHM = 'E';

const String NCRYPT_ECDH_P521_ALGORITHM = 'E';

const String NCRYPT_AES_ALGORITHM = 'A';

const String NCRYPT_RC2_ALGORITHM = 'R';

const String NCRYPT_3DES_ALGORITHM = '3';

const String NCRYPT_DES_ALGORITHM = 'D';

const String NCRYPT_DESX_ALGORITHM = 'D';

const String NCRYPT_3DES_112_ALGORITHM = '3';

const String NCRYPT_SP800108_CTR_HMAC_ALGORITHM = 'S';

const String NCRYPT_SP80056A_CONCAT_ALGORITHM = 'S';

const String NCRYPT_PBKDF2_ALGORITHM = 'P';

const String NCRYPT_CAPI_KDF_ALGORITHM = 'C';

const String NCRYPT_ECDSA_ALGORITHM = 'E';

const String NCRYPT_ECDH_ALGORITHM = 'E';

const String NCRYPT_KEY_STORAGE_ALGORITHM = 'K';

const String NCRYPT_HMAC_SHA256_ALGORITHM = 'H';

const int NCRYPT_CIPHER_INTERFACE = 1;

const int NCRYPT_HASH_INTERFACE = 2;

const int NCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = 3;

const int NCRYPT_SECRET_AGREEMENT_INTERFACE = 4;

const int NCRYPT_SIGNATURE_INTERFACE = 5;

const int NCRYPT_KEY_DERIVATION_INTERFACE = 7;

const int NCRYPT_KEY_STORAGE_INTERFACE = 65537;

const int NCRYPT_SCHANNEL_INTERFACE = 65538;

const int NCRYPT_SCHANNEL_SIGNATURE_INTERFACE = 65539;

const int NCRYPT_KEY_PROTECTION_INTERFACE = 65540;

const String NCRYPT_RSA_ALGORITHM_GROUP = 'R';

const String NCRYPT_DH_ALGORITHM_GROUP = 'D';

const String NCRYPT_DSA_ALGORITHM_GROUP = 'D';

const String NCRYPT_ECDSA_ALGORITHM_GROUP = 'E';

const String NCRYPT_ECDH_ALGORITHM_GROUP = 'E';

const String NCRYPT_AES_ALGORITHM_GROUP = 'A';

const String NCRYPT_RC2_ALGORITHM_GROUP = 'R';

const String NCRYPT_DES_ALGORITHM_GROUP = 'D';

const String NCRYPT_KEY_DERIVATION_GROUP = 'K';

const int NCRYPTBUFFER_VERSION = 0;

const int NCRYPTBUFFER_EMPTY = 0;

const int NCRYPTBUFFER_DATA = 1;

const int NCRYPTBUFFER_PROTECTION_DESCRIPTOR_STRING = 3;

const int NCRYPTBUFFER_PROTECTION_FLAGS = 4;

const int NCRYPTBUFFER_SSL_CLIENT_RANDOM = 20;

const int NCRYPTBUFFER_SSL_SERVER_RANDOM = 21;

const int NCRYPTBUFFER_SSL_HIGHEST_VERSION = 22;

const int NCRYPTBUFFER_SSL_CLEAR_KEY = 23;

const int NCRYPTBUFFER_SSL_KEY_ARG_DATA = 24;

const int NCRYPTBUFFER_SSL_SESSION_HASH = 25;

const int NCRYPTBUFFER_PKCS_OID = 40;

const int NCRYPTBUFFER_PKCS_ALG_OID = 41;

const int NCRYPTBUFFER_PKCS_ALG_PARAM = 42;

const int NCRYPTBUFFER_PKCS_ALG_ID = 43;

const int NCRYPTBUFFER_PKCS_ATTRS = 44;

const int NCRYPTBUFFER_PKCS_KEY_NAME = 45;

const int NCRYPTBUFFER_PKCS_SECRET = 46;

const int NCRYPTBUFFER_CERT_BLOB = 47;

const int NCRYPTBUFFER_CLAIM_IDBINDING_NONCE = 48;

const int NCRYPTBUFFER_CLAIM_KEYATTESTATION_NONCE = 49;

const int NCRYPTBUFFER_KEY_PROPERTY_FLAGS = 50;

const int NCRYPTBUFFER_ATTESTATIONSTATEMENT_BLOB = 51;

const int NCRYPTBUFFER_ATTESTATION_CLAIM_TYPE = 52;

const int NCRYPTBUFFER_ATTESTATION_CLAIM_CHALLENGE_REQUIRED = 53;

const int NCRYPTBUFFER_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS = 54;

const int NCRYPTBUFFER_ECC_CURVE_NAME = 60;

const int NCRYPTBUFFER_ECC_PARAMETERS = 61;

const int NCRYPTBUFFER_TPM_SEAL_PASSWORD = 70;

const int NCRYPTBUFFER_TPM_SEAL_POLICYINFO = 71;

const int NCRYPTBUFFER_TPM_SEAL_TICKET = 72;

const int NCRYPTBUFFER_TPM_SEAL_NO_DA_PROTECTION = 73;

const int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_PCR_MASK = 80;

const int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_NONCE = 81;

const int NCRYPTBUFFER_TPM_PLATFORM_CLAIM_STATIC_CREATE = 82;

const int NCRYPT_CIPHER_NO_PADDING_FLAG = 0;

const int NCRYPT_CIPHER_BLOCK_PADDING_FLAG = 1;

const int NCRYPT_CIPHER_OTHER_PADDING_FLAG = 2;

const int NCRYPT_PLATFORM_ATTEST_MAGIC = 1146110288;

const int NCRYPT_KEY_ATTEST_MAGIC = 1146110283;

const int NCRYPT_CLAIM_AUTHORITY_ONLY = 1;

const int NCRYPT_CLAIM_SUBJECT_ONLY = 2;

const int NCRYPT_CLAIM_WEB_AUTH_SUBJECT_ONLY = 258;

const int NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = 3;

const int NCRYPT_CLAIM_VSM_KEY_ATTESTATION_STATEMENT = 4;

const int NCRYPT_CLAIM_UNKNOWN = 4096;

const int NCRYPT_CLAIM_PLATFORM = 65536;

const int NCRYPT_ISOLATED_KEY_FLAG_CREATED_IN_ISOLATION = 1;

const int NCRYPT_ISOLATED_KEY_FLAG_IMPORT_ONLY = 2;

const int NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_V0 = 0;

const int NCRYPT_ISOLATED_KEY_ATTESTED_ATTRIBUTES_CURRENT_VERSION = 0;

const int NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_V0 = 0;

const int NCRYPT_VSM_KEY_ATTESTATION_STATEMENT_CURRENT_VERSION = 0;

const int NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_V0 = 0;

const int NCRYPT_VSM_KEY_ATTESTATION_CLAIM_RESTRICTIONS_CURRENT_VERSION = 0;

const int NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_V0 = 0;

const int NCRYPT_EXPORTED_ISOLATED_KEY_HEADER_CURRENT_VERSION = 0;

const int NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_V0 = 0;

const int NCRYPT_TPM_PLATFORM_ATTESTATION_STATEMENT_CURRENT_VERSION = 0;

const int NCRYPT_NO_PADDING_FLAG = 1;

const int NCRYPT_PAD_PKCS1_FLAG = 2;

const int NCRYPT_PAD_OAEP_FLAG = 4;

const int NCRYPT_PAD_PSS_FLAG = 8;

const int NCRYPT_PAD_CIPHER_FLAG = 16;

const int NCRYPT_ATTESTATION_FLAG = 32;

const int NCRYPT_SEALING_FLAG = 256;

const int NCRYPT_REGISTER_NOTIFY_FLAG = 1;

const int NCRYPT_UNREGISTER_NOTIFY_FLAG = 2;

const int NCRYPT_NO_KEY_VALIDATION = 8;

const int NCRYPT_MACHINE_KEY_FLAG = 32;

const int NCRYPT_SILENT_FLAG = 64;

const int NCRYPT_OVERWRITE_KEY_FLAG = 128;

const int NCRYPT_WRITE_KEY_TO_LEGACY_STORE_FLAG = 512;

const int NCRYPT_DO_NOT_FINALIZE_FLAG = 1024;

const int NCRYPT_EXPORT_LEGACY_FLAG = 2048;

const int NCRYPT_IGNORE_DEVICE_STATE_FLAG = 4096;

const int NCRYPT_TREAT_NIST_AS_GENERIC_ECC_FLAG = 8192;

const int NCRYPT_NO_CACHED_PASSWORD = 16384;

const int NCRYPT_PROTECT_TO_LOCAL_SYSTEM = 32768;

const int NCRYPT_REQUIRE_KDS_LRPC_BIND_FLAG = 536870912;

const int NCRYPT_PERSIST_ONLY_FLAG = 1073741824;

const int NCRYPT_PERSIST_FLAG = 2147483648;

const int NCRYPT_PREFER_VIRTUAL_ISOLATION_FLAG = 65536;

const int NCRYPT_USE_VIRTUAL_ISOLATION_FLAG = 131072;

const int NCRYPT_USE_PER_BOOT_KEY_FLAG = 262144;

const int NCRYPT_CIPHER_OPERATION = 1;

const int NCRYPT_HASH_OPERATION = 2;

const int NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = 4;

const int NCRYPT_SECRET_AGREEMENT_OPERATION = 8;

const int NCRYPT_SIGNATURE_OPERATION = 16;

const int NCRYPT_RNG_OPERATION = 32;

const int NCRYPT_KEY_DERIVATION_OPERATION = 64;

const int NCRYPT_AUTHORITY_KEY_FLAG = 256;

const int NCRYPT_EXTENDED_ERRORS_FLAG = 268435456;

const String NCRYPT_NAME_PROPERTY = 'N';

const String NCRYPT_UNIQUE_NAME_PROPERTY = 'U';

const String NCRYPT_ALGORITHM_PROPERTY = 'A';

const String NCRYPT_LENGTH_PROPERTY = 'L';

const String NCRYPT_LENGTHS_PROPERTY = 'L';

const String NCRYPT_BLOCK_LENGTH_PROPERTY = 'B';

const String NCRYPT_PUBLIC_LENGTH_PROPERTY = 'P';

const String NCRYPT_SIGNATURE_LENGTH_PROPERTY = 'S';

const String NCRYPT_CHAINING_MODE_PROPERTY = 'C';

const String NCRYPT_AUTH_TAG_LENGTH = 'A';

const String NCRYPT_UI_POLICY_PROPERTY = 'U';

const String NCRYPT_EXPORT_POLICY_PROPERTY = 'E';

const String NCRYPT_WINDOW_HANDLE_PROPERTY = 'H';

const String NCRYPT_USE_CONTEXT_PROPERTY = 'U';

const String NCRYPT_IMPL_TYPE_PROPERTY = 'I';

const String NCRYPT_KEY_USAGE_PROPERTY = 'K';

const String NCRYPT_KEY_TYPE_PROPERTY = 'K';

const String NCRYPT_VERSION_PROPERTY = 'V';

const String NCRYPT_SECURITY_DESCR_SUPPORT_PROPERTY = 'S';

const String NCRYPT_SECURITY_DESCR_PROPERTY = 'S';

const String NCRYPT_USE_COUNT_ENABLED_PROPERTY = 'E';

const String NCRYPT_USE_COUNT_PROPERTY = 'U';

const String NCRYPT_LAST_MODIFIED_PROPERTY = 'M';

const String NCRYPT_MAX_NAME_LENGTH_PROPERTY = 'M';

const String NCRYPT_ALGORITHM_GROUP_PROPERTY = 'A';

const String NCRYPT_DH_PARAMETERS_PROPERTY = 'D';

const String NCRYPT_ECC_PARAMETERS_PROPERTY = 'E';

const String NCRYPT_ECC_CURVE_NAME_PROPERTY = 'E';

const String NCRYPT_ECC_CURVE_NAME_LIST_PROPERTY = 'E';

const String NCRYPT_USE_VIRTUAL_ISOLATION_PROPERTY = 'V';

const String NCRYPT_USE_PER_BOOT_KEY_PROPERTY = 'P';

const String NCRYPT_PROVIDER_HANDLE_PROPERTY = 'P';

const String NCRYPT_PIN_PROPERTY = 'S';

const String NCRYPT_READER_PROPERTY = 'S';

const String NCRYPT_SMARTCARD_GUID_PROPERTY = 'S';

const String NCRYPT_CERTIFICATE_PROPERTY = 'S';

const String NCRYPT_PIN_PROMPT_PROPERTY = 'S';

const String NCRYPT_USER_CERTSTORE_PROPERTY = 'S';

const String NCRYPT_ROOT_CERTSTORE_PROPERTY = 'S';

const String NCRYPT_SECURE_PIN_PROPERTY = 'S';

const String NCRYPT_ASSOCIATED_ECDH_KEY = 'S';

const String NCRYPT_SCARD_PIN_ID = 'S';

const String NCRYPT_SCARD_PIN_INFO = 'S';

const String NCRYPT_READER_ICON_PROPERTY = 'S';

const String NCRYPT_KDF_SECRET_VALUE = 'K';

const String NCRYPT_DISMISS_UI_TIMEOUT_SEC_PROPERTY = 'S';

const String NCRYPT_PCP_PLATFORM_TYPE_PROPERTY = 'P';

const String NCRYPT_PCP_PROVIDER_VERSION_PROPERTY = 'P';

const String NCRYPT_PCP_EKPUB_PROPERTY = 'P';

const String NCRYPT_PCP_EKCERT_PROPERTY = 'P';

const String NCRYPT_PCP_EKNVCERT_PROPERTY = 'P';

const String NCRYPT_PCP_RSA_EKPUB_PROPERTY = 'P';

const String NCRYPT_PCP_RSA_EKCERT_PROPERTY = 'P';

const String NCRYPT_PCP_RSA_EKNVCERT_PROPERTY = 'P';

const String NCRYPT_PCP_ECC_EKPUB_PROPERTY = 'P';

const String NCRYPT_PCP_ECC_EKCERT_PROPERTY = 'P';

const String NCRYPT_PCP_ECC_EKNVCERT_PROPERTY = 'P';

const String NCRYPT_PCP_SRKPUB_PROPERTY = 'P';

const String NCRYPT_PCP_PCRTABLE_PROPERTY = 'P';

const String NCRYPT_PCP_CHANGEPASSWORD_PROPERTY = 'P';

const String NCRYPT_PCP_PASSWORD_REQUIRED_PROPERTY = 'P';

const String NCRYPT_PCP_USAGEAUTH_PROPERTY = 'P';

const String NCRYPT_PCP_MIGRATIONPASSWORD_PROPERTY = 'P';

const String NCRYPT_PCP_EXPORT_ALLOWED_PROPERTY = 'P';

const String NCRYPT_PCP_STORAGEPARENT_PROPERTY = 'P';

const String NCRYPT_PCP_PROVIDERHANDLE_PROPERTY = 'P';

const String NCRYPT_PCP_PLATFORMHANDLE_PROPERTY = 'P';

const String NCRYPT_PCP_PLATFORM_BINDING_PCRMASK_PROPERTY = 'P';

const String NCRYPT_PCP_PLATFORM_BINDING_PCRDIGESTLIST_PROPERTY = 'P';

const String NCRYPT_PCP_PLATFORM_BINDING_PCRDIGEST_PROPERTY = 'P';

const String NCRYPT_PCP_KEY_USAGE_POLICY_PROPERTY = 'P';

const String NCRYPT_PCP_RSA_SCHEME_PROPERTY = 'P';

const String NCRYPT_PCP_TPM12_IDBINDING_PROPERTY = 'P';

const String NCRYPT_PCP_TPM12_IDBINDING_DYNAMIC_PROPERTY = 'P';

const String NCRYPT_PCP_TPM12_IDACTIVATION_PROPERTY = 'P';

const String NCRYPT_PCP_KEYATTESTATION_PROPERTY = 'P';

const String NCRYPT_PCP_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = 'P';

const String NCRYPT_PCP_PLATFORM_BINDING_PCRALGID_PROPERTY = 'P';

const String NCRYPT_PCP_HMAC_AUTH_POLICYREF = 'P';

const String NCRYPT_PCP_HMAC_AUTH_POLICYINFO = 'P';

const String NCRYPT_PCP_HMAC_AUTH_NONCE = 'P';

const String NCRYPT_PCP_HMAC_AUTH_SIGNATURE = 'P';

const String NCRYPT_PCP_HMAC_AUTH_TICKET = 'P';

const String NCRYPT_PCP_NO_DA_PROTECTION_PROPERTY = 'P';

const String NCRYPT_PCP_TPM_MANUFACTURER_ID_PROPERTY = 'P';

const String NCRYPT_PCP_TPM_FW_VERSION_PROPERTY = 'P';

const String NCRYPT_PCP_TPM2BNAME_PROPERTY = 'P';

const String NCRYPT_PCP_TPM_VERSION_PROPERTY = 'P';

const String NCRYPT_PCP_RAW_POLICYDIGEST_PROPERTY = 'P';

const String NCRYPT_PCP_KEY_CREATIONHASH_PROPERTY = 'P';

const String NCRYPT_PCP_KEY_CREATIONTICKET_PROPERTY = 'P';

const String NCRYPT_PCP_RSA_SCHEME_HASH_ALG_PROPERTY = 'P';

const String NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_PROHIBITED_PROPERTY = 'P';

const String NCRYPT_PCP_TPM_IFX_RSA_KEYGEN_VULNERABILITY_PROPERTY = 'P';

const int IFX_RSA_KEYGEN_VUL_NOT_AFFECTED = 0;

const int IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_1 = 1;

const int IFX_RSA_KEYGEN_VUL_AFFECTED_LEVEL_2 = 2;

const String NCRYPT_PCP_SESSIONID_PROPERTY = 'P';

const String NCRYPT_PCP_PSS_SALT_SIZE_PROPERTY = 'P';

const int NCRYPT_TPM_PSS_SALT_SIZE_UNKNOWN = 0;

const int NCRYPT_TPM_PSS_SALT_SIZE_MAXIMUM = 1;

const int NCRYPT_TPM_PSS_SALT_SIZE_HASHSIZE = 2;

const String NCRYPT_PCP_INTERMEDIATE_CA_EKCERT_PROPERTY = 'P';

const String NCRYPT_PCP_PCRTABLE_ALGORITHM_PROPERTY = 'P';

const String NCRYPT_PCP_SYMMETRIC_KEYBITS_PROPERTY = 'P';

const int NCRYPT_TPM_PAD_PSS_IGNORE_SALT = 32;

const int NCRYPT_TPM12_PROVIDER = 65536;

const int NCRYPT_PCP_SIGNATURE_KEY = 1;

const int NCRYPT_PCP_ENCRYPTION_KEY = 2;

const int NCRYPT_PCP_GENERIC_KEY = 3;

const int NCRYPT_PCP_STORAGE_KEY = 4;

const int NCRYPT_PCP_IDENTITY_KEY = 8;

const int NCRYPT_PCP_HMACVERIFICATION_KEY = 16;

const String NCRYPT_SCARD_NGC_KEY_NAME = 'S';

const String NCRYPT_INITIALIZATION_VECTOR = 'I';

const String NCRYPT_CHANGEPASSWORD_PROPERTY = 'P';

const String NCRYPT_ALTERNATE_KEY_STORAGE_LOCATION_PROPERTY = 'P';

const String NCRYPT_KEY_ACCESS_POLICY_PROPERTY = 'K';

const int NCRYPT_MAX_PROPERTY_NAME = 64;

const int NCRYPT_MAX_PROPERTY_DATA = 1048576;

const int NCRYPT_ALLOW_EXPORT_FLAG = 1;

const int NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = 2;

const int NCRYPT_ALLOW_ARCHIVING_FLAG = 4;

const int NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = 8;

const int NCRYPT_IMPL_HARDWARE_FLAG = 1;

const int NCRYPT_IMPL_SOFTWARE_FLAG = 2;

const int NCRYPT_IMPL_REMOVABLE_FLAG = 8;

const int NCRYPT_IMPL_HARDWARE_RNG_FLAG = 16;

const int NCRYPT_IMPL_VIRTUAL_ISOLATION_FLAG = 32;

const int NCRYPT_ALLOW_DECRYPT_FLAG = 1;

const int NCRYPT_ALLOW_SIGNING_FLAG = 2;

const int NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = 4;

const int NCRYPT_ALLOW_KEY_IMPORT_FLAG = 8;

const int NCRYPT_ALLOW_ALL_USAGES = 16777215;

const int NCRYPT_UI_PROTECT_KEY_FLAG = 1;

const int NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = 2;

const int NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = 4;

const int NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = 8;

const String NCRYPT_PIN_CACHE_FREE_APPLICATION_TICKET_PROPERTY = 'P';

const String NCRYPT_PIN_CACHE_FLAGS_PROPERTY = 'P';

const int NCRYPT_PIN_CACHE_DISABLE_DPL_FLAG = 1;

const String NCRYPT_PIN_CACHE_APPLICATION_TICKET_PROPERTY = 'P';

const String NCRYPT_PIN_CACHE_APPLICATION_IMAGE_PROPERTY = 'P';

const String NCRYPT_PIN_CACHE_APPLICATION_STATUS_PROPERTY = 'P';

const String NCRYPT_PIN_CACHE_PIN_PROPERTY = 'P';

const String NCRYPT_PIN_CACHE_IS_GESTURE_REQUIRED_PROPERTY = 'P';

const int NCRYPT_PIN_CACHE_REQUIRE_GESTURE_FLAG = 1;

const int NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH = 90;

const int NCRYPT_PIN_CACHE_APPLICATION_TICKET_BYTE_LENGTH = 90;

const String NCRYPT_PIN_CACHE_CLEAR_PROPERTY = 'P';

const int NCRYPT_PIN_CACHE_CLEAR_FOR_CALLING_PROCESS_OPTION = 1;

const int NCRYPT_KEY_ACCESS_POLICY_VERSION = 1;

const int NCRYPT_ALLOW_SILENT_KEY_ACCESS = 1;

const int NCRYPT_CIPHER_KEY_BLOB_MAGIC = 1380470851;

const int NCRYPT_KDF_KEY_BLOB_MAGIC = 826688587;

const int NCRYPT_PROTECTED_KEY_BLOB_MAGIC = 1263817296;

const String NCRYPT_CIPHER_KEY_BLOB = 'C';

const String NCRYPT_KDF_KEY_BLOB = 'K';

const String NCRYPT_PROTECTED_KEY_BLOB = 'P';

const int NCRYPT_TPM_LOADABLE_KEY_BLOB_MIN_SIZE = 20;

const String NCRYPT_TPM_LOADABLE_KEY_BLOB = 'P';

const int NCRYPT_TPM_LOADABLE_KEY_BLOB_MAGIC = 1297371211;

const String NCRYPT_PKCS7_ENVELOPE_BLOB = 'P';

const String NCRYPT_PKCS8_PRIVATE_KEY_BLOB = 'P';

const String NCRYPT_OPAQUETRANSPORT_BLOB = 'O';

const String NCRYPT_ISOLATED_KEY_ENVELOPE_BLOB = 'I';

const String szOID_RSA = '1.2.840.113549';

const String szOID_PKCS = '1.2.840.113549.1';

const String szOID_RSA_HASH = '1.2.840.113549.2';

const String szOID_RSA_ENCRYPT = '1.2.840.113549.3';

const String szOID_PKCS_1 = '1.2.840.113549.1.1';

const String szOID_PKCS_2 = '1.2.840.113549.1.2';

const String szOID_PKCS_3 = '1.2.840.113549.1.3';

const String szOID_PKCS_4 = '1.2.840.113549.1.4';

const String szOID_PKCS_5 = '1.2.840.113549.1.5';

const String szOID_PKCS_6 = '1.2.840.113549.1.6';

const String szOID_PKCS_7 = '1.2.840.113549.1.7';

const String szOID_PKCS_8 = '1.2.840.113549.1.8';

const String szOID_PKCS_9 = '1.2.840.113549.1.9';

const String szOID_PKCS_10 = '1.2.840.113549.1.10';

const String szOID_PKCS_12 = '1.2.840.113549.1.12';

const String szOID_RSA_RSA = '1.2.840.113549.1.1.1';

const String szOID_RSA_MD2RSA = '1.2.840.113549.1.1.2';

const String szOID_RSA_MD4RSA = '1.2.840.113549.1.1.3';

const String szOID_RSA_MD5RSA = '1.2.840.113549.1.1.4';

const String szOID_RSA_SHA1RSA = '1.2.840.113549.1.1.5';

const String szOID_RSA_SETOAEP_RSA = '1.2.840.113549.1.1.6';

const String szOID_RSAES_OAEP = '1.2.840.113549.1.1.7';

const String szOID_RSA_MGF1 = '1.2.840.113549.1.1.8';

const String szOID_RSA_PSPECIFIED = '1.2.840.113549.1.1.9';

const String szOID_RSA_SSA_PSS = '1.2.840.113549.1.1.10';

const String szOID_RSA_SHA256RSA = '1.2.840.113549.1.1.11';

const String szOID_RSA_SHA384RSA = '1.2.840.113549.1.1.12';

const String szOID_RSA_SHA512RSA = '1.2.840.113549.1.1.13';

const String szOID_RSA_DH = '1.2.840.113549.1.3.1';

const String szOID_RSA_data = '1.2.840.113549.1.7.1';

const String szOID_RSA_signedData = '1.2.840.113549.1.7.2';

const String szOID_RSA_envelopedData = '1.2.840.113549.1.7.3';

const String szOID_RSA_signEnvData = '1.2.840.113549.1.7.4';

const String szOID_RSA_digestedData = '1.2.840.113549.1.7.5';

const String szOID_RSA_hashedData = '1.2.840.113549.1.7.5';

const String szOID_RSA_encryptedData = '1.2.840.113549.1.7.6';

const String szOID_RSA_emailAddr = '1.2.840.113549.1.9.1';

const String szOID_RSA_unstructName = '1.2.840.113549.1.9.2';

const String szOID_RSA_contentType = '1.2.840.113549.1.9.3';

const String szOID_RSA_messageDigest = '1.2.840.113549.1.9.4';

const String szOID_RSA_signingTime = '1.2.840.113549.1.9.5';

const String szOID_RSA_counterSign = '1.2.840.113549.1.9.6';

const String szOID_RSA_challengePwd = '1.2.840.113549.1.9.7';

const String szOID_RSA_unstructAddr = '1.2.840.113549.1.9.8';

const String szOID_RSA_extCertAttrs = '1.2.840.113549.1.9.9';

const String szOID_RSA_certExtensions = '1.2.840.113549.1.9.14';

const String szOID_RSA_SMIMECapabilities = '1.2.840.113549.1.9.15';

const String szOID_RSA_preferSignedData = '1.2.840.113549.1.9.15.1';

const String szOID_TIMESTAMP_TOKEN = '1.2.840.113549.1.9.16.1.4';

const String szOID_RFC3161_counterSign = '1.3.6.1.4.1.311.3.3.1';

const String szOID_RFC3161v21_counterSign = '1.3.6.1.4.1.311.3.3.2';

const String szOID_RFC3161v21_thumbprints = '1.3.6.1.4.1.311.3.3.3';

const String szOID_RSA_SMIMEalg = '1.2.840.113549.1.9.16.3';

const String szOID_RSA_SMIMEalgESDH = '1.2.840.113549.1.9.16.3.5';

const String szOID_RSA_SMIMEalgCMS3DESwrap = '1.2.840.113549.1.9.16.3.6';

const String szOID_RSA_SMIMEalgCMSRC2wrap = '1.2.840.113549.1.9.16.3.7';

const String szOID_RSA_MD2 = '1.2.840.113549.2.2';

const String szOID_RSA_MD4 = '1.2.840.113549.2.4';

const String szOID_RSA_MD5 = '1.2.840.113549.2.5';

const String szOID_RSA_RC2CBC = '1.2.840.113549.3.2';

const String szOID_RSA_RC4 = '1.2.840.113549.3.4';

const String szOID_RSA_DES_EDE3_CBC = '1.2.840.113549.3.7';

const String szOID_RSA_RC5_CBCPad = '1.2.840.113549.3.9';

const String szOID_ANSI_X942 = '1.2.840.10046';

const String szOID_ANSI_X942_DH = '1.2.840.10046.2.1';

const String szOID_X957 = '1.2.840.10040';

const String szOID_X957_DSA = '1.2.840.10040.4.1';

const String szOID_X957_SHA1DSA = '1.2.840.10040.4.3';

const String szOID_ECC_PUBLIC_KEY = '1.2.840.10045.2.1';

const String szOID_ECC_CURVE_P256 = '1.2.840.10045.3.1.7';

const String szOID_ECC_CURVE_P384 = '1.3.132.0.34';

const String szOID_ECC_CURVE_P521 = '1.3.132.0.35';

const String szOID_ECC_CURVE_BRAINPOOLP160R1 = '1.3.36.3.3.2.8.1.1.1';

const String szOID_ECC_CURVE_BRAINPOOLP160T1 = '1.3.36.3.3.2.8.1.1.2';

const String szOID_ECC_CURVE_BRAINPOOLP192R1 = '1.3.36.3.3.2.8.1.1.3';

const String szOID_ECC_CURVE_BRAINPOOLP192T1 = '1.3.36.3.3.2.8.1.1.4';

const String szOID_ECC_CURVE_BRAINPOOLP224R1 = '1.3.36.3.3.2.8.1.1.5';

const String szOID_ECC_CURVE_BRAINPOOLP224T1 = '1.3.36.3.3.2.8.1.1.6';

const String szOID_ECC_CURVE_BRAINPOOLP256R1 = '1.3.36.3.3.2.8.1.1.7';

const String szOID_ECC_CURVE_BRAINPOOLP256T1 = '1.3.36.3.3.2.8.1.1.8';

const String szOID_ECC_CURVE_BRAINPOOLP320R1 = '1.3.36.3.3.2.8.1.1.9';

const String szOID_ECC_CURVE_BRAINPOOLP320T1 = '1.3.36.3.3.2.8.1.1.10';

const String szOID_ECC_CURVE_BRAINPOOLP384R1 = '1.3.36.3.3.2.8.1.1.11';

const String szOID_ECC_CURVE_BRAINPOOLP384T1 = '1.3.36.3.3.2.8.1.1.12';

const String szOID_ECC_CURVE_BRAINPOOLP512R1 = '1.3.36.3.3.2.8.1.1.13';

const String szOID_ECC_CURVE_BRAINPOOLP512T1 = '1.3.36.3.3.2.8.1.1.14';

const String szOID_ECC_CURVE_EC192WAPI = '1.2.156.11235.1.1.2.1';

const String szOID_CN_ECDSA_SHA256 = '1.2.156.11235.1.1.1';

const String szOID_ECC_CURVE_NISTP192 = '1.2.840.10045.3.1.1';

const String szOID_ECC_CURVE_NISTP224 = '1.3.132.0.33';

const String szOID_ECC_CURVE_NISTP256 = '1.2.840.10045.3.1.7';

const String szOID_ECC_CURVE_NISTP384 = '1.3.132.0.34';

const String szOID_ECC_CURVE_NISTP521 = '1.3.132.0.35';

const String szOID_ECC_CURVE_SECP160K1 = '1.3.132.0.9';

const String szOID_ECC_CURVE_SECP160R1 = '1.3.132.0.8';

const String szOID_ECC_CURVE_SECP160R2 = '1.3.132.0.30';

const String szOID_ECC_CURVE_SECP192K1 = '1.3.132.0.31';

const String szOID_ECC_CURVE_SECP192R1 = '1.2.840.10045.3.1.1';

const String szOID_ECC_CURVE_SECP224K1 = '1.3.132.0.32';

const String szOID_ECC_CURVE_SECP224R1 = '1.3.132.0.33';

const String szOID_ECC_CURVE_SECP256K1 = '1.3.132.0.10';

const String szOID_ECC_CURVE_SECP256R1 = '1.2.840.10045.3.1.7';

const String szOID_ECC_CURVE_SECP384R1 = '1.3.132.0.34';

const String szOID_ECC_CURVE_SECP521R1 = '1.3.132.0.35';

const String szOID_ECC_CURVE_WTLS7 = '1.3.132.0.30';

const String szOID_ECC_CURVE_WTLS9 = '2.23.43.1.4.9';

const String szOID_ECC_CURVE_WTLS12 = '1.3.132.0.33';

const String szOID_ECC_CURVE_X962P192V1 = '1.2.840.10045.3.1.1';

const String szOID_ECC_CURVE_X962P192V2 = '1.2.840.10045.3.1.2';

const String szOID_ECC_CURVE_X962P192V3 = '1.2.840.10045.3.1.3';

const String szOID_ECC_CURVE_X962P239V1 = '1.2.840.10045.3.1.4';

const String szOID_ECC_CURVE_X962P239V2 = '1.2.840.10045.3.1.5';

const String szOID_ECC_CURVE_X962P239V3 = '1.2.840.10045.3.1.6';

const String szOID_ECC_CURVE_X962P256V1 = '1.2.840.10045.3.1.7';

const String szOID_ECDSA_SHA1 = '1.2.840.10045.4.1';

const String szOID_ECDSA_SPECIFIED = '1.2.840.10045.4.3';

const String szOID_ECDSA_SHA256 = '1.2.840.10045.4.3.2';

const String szOID_ECDSA_SHA384 = '1.2.840.10045.4.3.3';

const String szOID_ECDSA_SHA512 = '1.2.840.10045.4.3.4';

const String szOID_NIST_AES128_CBC = '2.16.840.1.101.3.4.1.2';

const String szOID_NIST_AES192_CBC = '2.16.840.1.101.3.4.1.22';

const String szOID_NIST_AES256_CBC = '2.16.840.1.101.3.4.1.42';

const String szOID_NIST_AES128_WRAP = '2.16.840.1.101.3.4.1.5';

const String szOID_NIST_AES192_WRAP = '2.16.840.1.101.3.4.1.25';

const String szOID_NIST_AES256_WRAP = '2.16.840.1.101.3.4.1.45';

const String szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF = '1.3.133.16.840.63.0.2';

const String szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF = '1.3.132.1.11.1';

const String szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF = '1.3.132.1.11.2';

const String szOID_DS = '2.5';

const String szOID_DSALG = '2.5.8';

const String szOID_DSALG_CRPT = '2.5.8.1';

const String szOID_DSALG_HASH = '2.5.8.2';

const String szOID_DSALG_SIGN = '2.5.8.3';

const String szOID_DSALG_RSA = '2.5.8.1.1';

const String szOID_OIW = '1.3.14';

const String szOID_OIWSEC = '1.3.14.3.2';

const String szOID_OIWSEC_md4RSA = '1.3.14.3.2.2';

const String szOID_OIWSEC_md5RSA = '1.3.14.3.2.3';

const String szOID_OIWSEC_md4RSA2 = '1.3.14.3.2.4';

const String szOID_OIWSEC_desECB = '1.3.14.3.2.6';

const String szOID_OIWSEC_desCBC = '1.3.14.3.2.7';

const String szOID_OIWSEC_desOFB = '1.3.14.3.2.8';

const String szOID_OIWSEC_desCFB = '1.3.14.3.2.9';

const String szOID_OIWSEC_desMAC = '1.3.14.3.2.10';

const String szOID_OIWSEC_rsaSign = '1.3.14.3.2.11';

const String szOID_OIWSEC_dsa = '1.3.14.3.2.12';

const String szOID_OIWSEC_shaDSA = '1.3.14.3.2.13';

const String szOID_OIWSEC_mdc2RSA = '1.3.14.3.2.14';

const String szOID_OIWSEC_shaRSA = '1.3.14.3.2.15';

const String szOID_OIWSEC_dhCommMod = '1.3.14.3.2.16';

const String szOID_OIWSEC_desEDE = '1.3.14.3.2.17';

const String szOID_OIWSEC_sha = '1.3.14.3.2.18';

const String szOID_OIWSEC_mdc2 = '1.3.14.3.2.19';

const String szOID_OIWSEC_dsaComm = '1.3.14.3.2.20';

const String szOID_OIWSEC_dsaCommSHA = '1.3.14.3.2.21';

const String szOID_OIWSEC_rsaXchg = '1.3.14.3.2.22';

const String szOID_OIWSEC_keyHashSeal = '1.3.14.3.2.23';

const String szOID_OIWSEC_md2RSASign = '1.3.14.3.2.24';

const String szOID_OIWSEC_md5RSASign = '1.3.14.3.2.25';

const String szOID_OIWSEC_sha1 = '1.3.14.3.2.26';

const String szOID_OIWSEC_dsaSHA1 = '1.3.14.3.2.27';

const String szOID_OIWSEC_dsaCommSHA1 = '1.3.14.3.2.28';

const String szOID_OIWSEC_sha1RSASign = '1.3.14.3.2.29';

const String szOID_OIWDIR = '1.3.14.7.2';

const String szOID_OIWDIR_CRPT = '1.3.14.7.2.1';

const String szOID_OIWDIR_HASH = '1.3.14.7.2.2';

const String szOID_OIWDIR_SIGN = '1.3.14.7.2.3';

const String szOID_OIWDIR_md2 = '1.3.14.7.2.2.1';

const String szOID_OIWDIR_md2RSA = '1.3.14.7.2.3.1';

const String szOID_INFOSEC = '2.16.840.1.101.2.1';

const String szOID_INFOSEC_sdnsSignature = '2.16.840.1.101.2.1.1.1';

const String szOID_INFOSEC_mosaicSignature = '2.16.840.1.101.2.1.1.2';

const String szOID_INFOSEC_sdnsConfidentiality = '2.16.840.1.101.2.1.1.3';

const String szOID_INFOSEC_mosaicConfidentiality = '2.16.840.1.101.2.1.1.4';

const String szOID_INFOSEC_sdnsIntegrity = '2.16.840.1.101.2.1.1.5';

const String szOID_INFOSEC_mosaicIntegrity = '2.16.840.1.101.2.1.1.6';

const String szOID_INFOSEC_sdnsTokenProtection = '2.16.840.1.101.2.1.1.7';

const String szOID_INFOSEC_mosaicTokenProtection = '2.16.840.1.101.2.1.1.8';

const String szOID_INFOSEC_sdnsKeyManagement = '2.16.840.1.101.2.1.1.9';

const String szOID_INFOSEC_mosaicKeyManagement = '2.16.840.1.101.2.1.1.10';

const String szOID_INFOSEC_sdnsKMandSig = '2.16.840.1.101.2.1.1.11';

const String szOID_INFOSEC_mosaicKMandSig = '2.16.840.1.101.2.1.1.12';

const String szOID_INFOSEC_SuiteASignature = '2.16.840.1.101.2.1.1.13';

const String szOID_INFOSEC_SuiteAConfidentiality = '2.16.840.1.101.2.1.1.14';

const String szOID_INFOSEC_SuiteAIntegrity = '2.16.840.1.101.2.1.1.15';

const String szOID_INFOSEC_SuiteATokenProtection = '2.16.840.1.101.2.1.1.16';

const String szOID_INFOSEC_SuiteAKeyManagement = '2.16.840.1.101.2.1.1.17';

const String szOID_INFOSEC_SuiteAKMandSig = '2.16.840.1.101.2.1.1.18';

const String szOID_INFOSEC_mosaicUpdatedSig = '2.16.840.1.101.2.1.1.19';

const String szOID_INFOSEC_mosaicKMandUpdSig = '2.16.840.1.101.2.1.1.20';

const String szOID_INFOSEC_mosaicUpdatedInteg = '2.16.840.1.101.2.1.1.21';

const String szOID_NIST_sha256 = '2.16.840.1.101.3.4.2.1';

const String szOID_NIST_sha384 = '2.16.840.1.101.3.4.2.2';

const String szOID_NIST_sha512 = '2.16.840.1.101.3.4.2.3';

const String szOID_COMMON_NAME = '2.5.4.3';

const String szOID_SUR_NAME = '2.5.4.4';

const String szOID_DEVICE_SERIAL_NUMBER = '2.5.4.5';

const String szOID_COUNTRY_NAME = '2.5.4.6';

const String szOID_LOCALITY_NAME = '2.5.4.7';

const String szOID_STATE_OR_PROVINCE_NAME = '2.5.4.8';

const String szOID_STREET_ADDRESS = '2.5.4.9';

const String szOID_ORGANIZATION_NAME = '2.5.4.10';

const String szOID_ORGANIZATIONAL_UNIT_NAME = '2.5.4.11';

const String szOID_TITLE = '2.5.4.12';

const String szOID_DESCRIPTION = '2.5.4.13';

const String szOID_SEARCH_GUIDE = '2.5.4.14';

const String szOID_BUSINESS_CATEGORY = '2.5.4.15';

const String szOID_POSTAL_ADDRESS = '2.5.4.16';

const String szOID_POSTAL_CODE = '2.5.4.17';

const String szOID_POST_OFFICE_BOX = '2.5.4.18';

const String szOID_PHYSICAL_DELIVERY_OFFICE_NAME = '2.5.4.19';

const String szOID_TELEPHONE_NUMBER = '2.5.4.20';

const String szOID_TELEX_NUMBER = '2.5.4.21';

const String szOID_TELETEXT_TERMINAL_IDENTIFIER = '2.5.4.22';

const String szOID_FACSIMILE_TELEPHONE_NUMBER = '2.5.4.23';

const String szOID_X21_ADDRESS = '2.5.4.24';

const String szOID_INTERNATIONAL_ISDN_NUMBER = '2.5.4.25';

const String szOID_REGISTERED_ADDRESS = '2.5.4.26';

const String szOID_DESTINATION_INDICATOR = '2.5.4.27';

const String szOID_PREFERRED_DELIVERY_METHOD = '2.5.4.28';

const String szOID_PRESENTATION_ADDRESS = '2.5.4.29';

const String szOID_SUPPORTED_APPLICATION_CONTEXT = '2.5.4.30';

const String szOID_MEMBER = '2.5.4.31';

const String szOID_OWNER = '2.5.4.32';

const String szOID_ROLE_OCCUPANT = '2.5.4.33';

const String szOID_SEE_ALSO = '2.5.4.34';

const String szOID_USER_PASSWORD = '2.5.4.35';

const String szOID_USER_CERTIFICATE = '2.5.4.36';

const String szOID_CA_CERTIFICATE = '2.5.4.37';

const String szOID_AUTHORITY_REVOCATION_LIST = '2.5.4.38';

const String szOID_CERTIFICATE_REVOCATION_LIST = '2.5.4.39';

const String szOID_CROSS_CERTIFICATE_PAIR = '2.5.4.40';

const String szOID_GIVEN_NAME = '2.5.4.42';

const String szOID_INITIALS = '2.5.4.43';

const String szOID_DN_QUALIFIER = '2.5.4.46';

const String szOID_DOMAIN_COMPONENT = '0.9.2342.19200300.100.1.25';

const String szOID_PKCS_12_FRIENDLY_NAME_ATTR = '1.2.840.113549.1.9.20';

const String szOID_PKCS_12_LOCAL_KEY_ID = '1.2.840.113549.1.9.21';

const String szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR = '1.3.6.1.4.1.311.17.1';

const String szOID_LOCAL_MACHINE_KEYSET = '1.3.6.1.4.1.311.17.2';

const String szOID_PKCS_12_EXTENDED_ATTRIBUTES = '1.3.6.1.4.1.311.17.3';

const String szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID =
    '1.3.6.1.4.1.311.17.4';

const String szOID_KEYID_RDN = '1.3.6.1.4.1.311.10.7.1';

const String szOID_EV_RDN_LOCALE = '1.3.6.1.4.1.311.60.2.1.1';

const String szOID_EV_RDN_STATE_OR_PROVINCE = '1.3.6.1.4.1.311.60.2.1.2';

const String szOID_EV_RDN_COUNTRY = '1.3.6.1.4.1.311.60.2.1.3';

const int CERT_RDN_ANY_TYPE = 0;

const int CERT_RDN_ENCODED_BLOB = 1;

const int CERT_RDN_OCTET_STRING = 2;

const int CERT_RDN_NUMERIC_STRING = 3;

const int CERT_RDN_PRINTABLE_STRING = 4;

const int CERT_RDN_TELETEX_STRING = 5;

const int CERT_RDN_T61_STRING = 5;

const int CERT_RDN_VIDEOTEX_STRING = 6;

const int CERT_RDN_IA5_STRING = 7;

const int CERT_RDN_GRAPHIC_STRING = 8;

const int CERT_RDN_VISIBLE_STRING = 9;

const int CERT_RDN_ISO646_STRING = 9;

const int CERT_RDN_GENERAL_STRING = 10;

const int CERT_RDN_UNIVERSAL_STRING = 11;

const int CERT_RDN_INT4_STRING = 11;

const int CERT_RDN_BMP_STRING = 12;

const int CERT_RDN_UNICODE_STRING = 12;

const int CERT_RDN_UTF8_STRING = 13;

const int CERT_RDN_TYPE_MASK = 255;

const int CERT_RDN_FLAGS_MASK = 4278190080;

const int CERT_RDN_ENABLE_T61_UNICODE_FLAG = 2147483648;

const int CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912;

const int CERT_RDN_FORCE_UTF8_UNICODE_FLAG = 268435456;

const int CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824;

const int CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216;

const int CERT_RDN_ENABLE_PUNYCODE_FLAG = 33554432;

const String CERT_RSA_PUBLIC_KEY_OBJID = '1.2.840.113549.1.1.1';

const String CERT_DEFAULT_OID_PUBLIC_KEY_SIGN = '1.2.840.113549.1.1.1';

const String CERT_DEFAULT_OID_PUBLIC_KEY_XCHG = '1.2.840.113549.1.1.1';

const int CRYPT_ECC_PRIVATE_KEY_INFO_v1 = 1;

const int CERT_V1 = 0;

const int CERT_V2 = 1;

const int CERT_V3 = 2;

const int CERT_INFO_VERSION_FLAG = 1;

const int CERT_INFO_SERIAL_NUMBER_FLAG = 2;

const int CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3;

const int CERT_INFO_ISSUER_FLAG = 4;

const int CERT_INFO_NOT_BEFORE_FLAG = 5;

const int CERT_INFO_NOT_AFTER_FLAG = 6;

const int CERT_INFO_SUBJECT_FLAG = 7;

const int CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8;

const int CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9;

const int CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10;

const int CERT_INFO_EXTENSION_FLAG = 11;

const int CRL_V1 = 0;

const int CRL_V2 = 1;

const int CERT_BUNDLE_CERTIFICATE = 0;

const int CERT_BUNDLE_CRL = 1;

const int CERT_REQUEST_V1 = 0;

const int CERT_KEYGEN_REQUEST_V1 = 0;

const int CTL_V1 = 0;

const int CERT_ENCODING_TYPE_MASK = 65535;

const int CMSG_ENCODING_TYPE_MASK = 4294901760;

const int CRYPT_ASN_ENCODING = 1;

const int CRYPT_NDR_ENCODING = 2;

const int X509_ASN_ENCODING = 1;

const int X509_NDR_ENCODING = 2;

const int PKCS_7_ASN_ENCODING = 65536;

const int PKCS_7_NDR_ENCODING = 131072;

const int CRYPT_FORMAT_STR_MULTI_LINE = 1;

const int CRYPT_FORMAT_STR_NO_HEX = 16;

const int CRYPT_FORMAT_SIMPLE = 1;

const int CRYPT_FORMAT_X509 = 2;

const int CRYPT_FORMAT_OID = 4;

const int CRYPT_FORMAT_RDN_SEMICOLON = 256;

const int CRYPT_FORMAT_RDN_CRLF = 512;

const int CRYPT_FORMAT_RDN_UNQUOTE = 1024;

const int CRYPT_FORMAT_RDN_REVERSE = 2048;

const int CRYPT_FORMAT_COMMA = 4096;

const int CRYPT_FORMAT_SEMICOLON = 256;

const int CRYPT_FORMAT_CRLF = 512;

const int CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8;

const int CRYPT_ENCODE_ALLOC_FLAG = 32768;

const int CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 2147483648;

const int CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 536870912;

const int CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG = 268435456;

const int CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 1073741824;

const int CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 65536;

const int CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG = 131072;

const int CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG = 262144;

const int CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG = 393216;

const int CRYPT_DECODE_NOCOPY_FLAG = 1;

const int CRYPT_DECODE_TO_BE_SIGNED_FLAG = 2;

const int CRYPT_DECODE_SHARE_OID_STRING_FLAG = 4;

const int CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 8;

const int CRYPT_DECODE_ALLOC_FLAG = 32768;

const int CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 16777216;

const int CRYPT_DECODE_ENABLE_PUNYCODE_FLAG = 33554432;

const int CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG = 67108864;

const int CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG = 100663296;

const int CRYPT_ENCODE_DECODE_NONE = 0;

const String szOID_AUTHORITY_KEY_IDENTIFIER = '2.5.29.1';

const String szOID_KEY_ATTRIBUTES = '2.5.29.2';

const String szOID_CERT_POLICIES_95 = '2.5.29.3';

const String szOID_KEY_USAGE_RESTRICTION = '2.5.29.4';

const String szOID_SUBJECT_ALT_NAME = '2.5.29.7';

const String szOID_ISSUER_ALT_NAME = '2.5.29.8';

const String szOID_BASIC_CONSTRAINTS = '2.5.29.10';

const String szOID_KEY_USAGE = '2.5.29.15';

const String szOID_PRIVATEKEY_USAGE_PERIOD = '2.5.29.16';

const String szOID_BASIC_CONSTRAINTS2 = '2.5.29.19';

const String szOID_CERT_POLICIES = '2.5.29.32';

const String szOID_ANY_CERT_POLICY = '2.5.29.32.0';

const String szOID_INHIBIT_ANY_POLICY = '2.5.29.54';

const String szOID_AUTHORITY_KEY_IDENTIFIER2 = '2.5.29.35';

const String szOID_SUBJECT_KEY_IDENTIFIER = '2.5.29.14';

const String szOID_SUBJECT_ALT_NAME2 = '2.5.29.17';

const String szOID_ISSUER_ALT_NAME2 = '2.5.29.18';

const String szOID_CRL_REASON_CODE = '2.5.29.21';

const String szOID_REASON_CODE_HOLD = '2.5.29.23';

const String szOID_CRL_DIST_POINTS = '2.5.29.31';

const String szOID_ENHANCED_KEY_USAGE = '2.5.29.37';

const String szOID_ANY_ENHANCED_KEY_USAGE = '2.5.29.37.0';

const String szOID_CRL_NUMBER = '2.5.29.20';

const String szOID_DELTA_CRL_INDICATOR = '2.5.29.27';

const String szOID_ISSUING_DIST_POINT = '2.5.29.28';

const String szOID_FRESHEST_CRL = '2.5.29.46';

const String szOID_NAME_CONSTRAINTS = '2.5.29.30';

const String szOID_POLICY_MAPPINGS = '2.5.29.33';

const String szOID_LEGACY_POLICY_MAPPINGS = '2.5.29.5';

const String szOID_POLICY_CONSTRAINTS = '2.5.29.36';

const String szOID_RENEWAL_CERTIFICATE = '1.3.6.1.4.1.311.13.1';

const String szOID_ENROLLMENT_NAME_VALUE_PAIR = '1.3.6.1.4.1.311.13.2.1';

const String szOID_ENROLLMENT_CSP_PROVIDER = '1.3.6.1.4.1.311.13.2.2';

const String szOID_OS_VERSION = '1.3.6.1.4.1.311.13.2.3';

const String szOID_ENROLLMENT_AGENT = '1.3.6.1.4.1.311.20.2.1';

const String szOID_PKIX = '1.3.6.1.5.5.7';

const String szOID_PKIX_PE = '1.3.6.1.5.5.7.1';

const String szOID_AUTHORITY_INFO_ACCESS = '1.3.6.1.5.5.7.1.1';

const String szOID_SUBJECT_INFO_ACCESS = '1.3.6.1.5.5.7.1.11';

const String szOID_BIOMETRIC_EXT = '1.3.6.1.5.5.7.1.2';

const String szOID_QC_STATEMENTS_EXT = '1.3.6.1.5.5.7.1.3';

const String szOID_LOGOTYPE_EXT = '1.3.6.1.5.5.7.1.12';

const String szOID_TLS_FEATURES_EXT = '1.3.6.1.5.5.7.1.24';

const String szOID_CERT_EXTENSIONS = '1.3.6.1.4.1.311.2.1.14';

const String szOID_NEXT_UPDATE_LOCATION = '1.3.6.1.4.1.311.10.2';

const String szOID_REMOVE_CERTIFICATE = '1.3.6.1.4.1.311.10.8.1';

const String szOID_CROSS_CERT_DIST_POINTS = '1.3.6.1.4.1.311.10.9.1';

const String szOID_CTL = '1.3.6.1.4.1.311.10.1';

const String szOID_SORTED_CTL = '1.3.6.1.4.1.311.10.1.1';

const String szOID_SERIALIZED = '1.3.6.1.4.1.311.10.3.3.1';

const String szOID_NT_PRINCIPAL_NAME = '1.3.6.1.4.1.311.20.2.3';

const String szOID_INTERNATIONALIZED_EMAIL_ADDRESS = '1.3.6.1.4.1.311.20.2.4';

const String szOID_PRODUCT_UPDATE = '1.3.6.1.4.1.311.31.1';

const String szOID_ANY_APPLICATION_POLICY = '1.3.6.1.4.1.311.10.12.1';

const String szOID_AUTO_ENROLL_CTL_USAGE = '1.3.6.1.4.1.311.20.1';

const String szOID_ENROLL_CERTTYPE_EXTENSION = '1.3.6.1.4.1.311.20.2';

const String szOID_CERT_MANIFOLD = '1.3.6.1.4.1.311.20.3';

const String szOID_CERTSRV_CA_VERSION = '1.3.6.1.4.1.311.21.1';

const String szOID_CERTSRV_PREVIOUS_CERT_HASH = '1.3.6.1.4.1.311.21.2';

const String szOID_CRL_VIRTUAL_BASE = '1.3.6.1.4.1.311.21.3';

const String szOID_CRL_NEXT_PUBLISH = '1.3.6.1.4.1.311.21.4';

const String szOID_KP_CA_EXCHANGE = '1.3.6.1.4.1.311.21.5';

const String szOID_KP_PRIVACY_CA = '1.3.6.1.4.1.311.21.36';

const String szOID_KP_KEY_RECOVERY_AGENT = '1.3.6.1.4.1.311.21.6';

const String szOID_CERTIFICATE_TEMPLATE = '1.3.6.1.4.1.311.21.7';

const String szOID_ENTERPRISE_OID_ROOT = '1.3.6.1.4.1.311.21.8';

const String szOID_RDN_DUMMY_SIGNER = '1.3.6.1.4.1.311.21.9';

const String szOID_APPLICATION_CERT_POLICIES = '1.3.6.1.4.1.311.21.10';

const String szOID_APPLICATION_POLICY_MAPPINGS = '1.3.6.1.4.1.311.21.11';

const String szOID_APPLICATION_POLICY_CONSTRAINTS = '1.3.6.1.4.1.311.21.12';

const String szOID_ARCHIVED_KEY_ATTR = '1.3.6.1.4.1.311.21.13';

const String szOID_CRL_SELF_CDP = '1.3.6.1.4.1.311.21.14';

const String szOID_REQUIRE_CERT_CHAIN_POLICY = '1.3.6.1.4.1.311.21.15';

const String szOID_ARCHIVED_KEY_CERT_HASH = '1.3.6.1.4.1.311.21.16';

const String szOID_ISSUED_CERT_HASH = '1.3.6.1.4.1.311.21.17';

const String szOID_DS_EMAIL_REPLICATION = '1.3.6.1.4.1.311.21.19';

const String szOID_REQUEST_CLIENT_INFO = '1.3.6.1.4.1.311.21.20';

const String szOID_ENCRYPTED_KEY_HASH = '1.3.6.1.4.1.311.21.21';

const String szOID_CERTSRV_CROSSCA_VERSION = '1.3.6.1.4.1.311.21.22';

const String szOID_NTDS_REPLICATION = '1.3.6.1.4.1.311.25.1';

const String szOID_NTDS_CA_SECURITY_EXT = '1.3.6.1.4.1.311.25.2';

const String szOID_NTDS_OBJECTSID = '1.3.6.1.4.1.311.25.2.1';

const String wszURI_NTDS_OBJECTSID_PREFIX = 't';

const String szOID_SUBJECT_DIR_ATTRS = '2.5.29.9';

const String szOID_PKIX_KP = '1.3.6.1.5.5.7.3';

const String szOID_PKIX_KP_SERVER_AUTH = '1.3.6.1.5.5.7.3.1';

const String szOID_PKIX_KP_CLIENT_AUTH = '1.3.6.1.5.5.7.3.2';

const String szOID_PKIX_KP_CODE_SIGNING = '1.3.6.1.5.5.7.3.3';

const String szOID_PKIX_KP_EMAIL_PROTECTION = '1.3.6.1.5.5.7.3.4';

const String szOID_PKIX_KP_IPSEC_END_SYSTEM = '1.3.6.1.5.5.7.3.5';

const String szOID_PKIX_KP_IPSEC_TUNNEL = '1.3.6.1.5.5.7.3.6';

const String szOID_PKIX_KP_IPSEC_USER = '1.3.6.1.5.5.7.3.7';

const String szOID_PKIX_KP_TIMESTAMP_SIGNING = '1.3.6.1.5.5.7.3.8';

const String szOID_PKIX_KP_OCSP_SIGNING = '1.3.6.1.5.5.7.3.9';

const String szOID_PKIX_OCSP_NOCHECK = '1.3.6.1.5.5.7.48.1.5';

const String szOID_PKIX_OCSP_NONCE = '1.3.6.1.5.5.7.48.1.2';

const String szOID_IPSEC_KP_IKE_INTERMEDIATE = '1.3.6.1.5.5.8.2.2';

const String szOID_PKINIT_KP_KDC = '1.3.6.1.5.2.3.5';

const String szOID_KP_CTL_USAGE_SIGNING = '1.3.6.1.4.1.311.10.3.1';

const String szOID_KP_TIME_STAMP_SIGNING = '1.3.6.1.4.1.311.10.3.2';

const String szOID_SERVER_GATED_CRYPTO = '1.3.6.1.4.1.311.10.3.3';

const String szOID_SGC_NETSCAPE = '2.16.840.1.113730.4.1';

const String szOID_KP_EFS = '1.3.6.1.4.1.311.10.3.4';

const String szOID_EFS_RECOVERY = '1.3.6.1.4.1.311.10.3.4.1';

const String szOID_WHQL_CRYPTO = '1.3.6.1.4.1.311.10.3.5';

const String szOID_ATTEST_WHQL_CRYPTO = '1.3.6.1.4.1.311.10.3.5.1';

const String szOID_NT5_CRYPTO = '1.3.6.1.4.1.311.10.3.6';

const String szOID_OEM_WHQL_CRYPTO = '1.3.6.1.4.1.311.10.3.7';

const String szOID_EMBEDDED_NT_CRYPTO = '1.3.6.1.4.1.311.10.3.8';

const String szOID_ROOT_LIST_SIGNER = '1.3.6.1.4.1.311.10.3.9';

const String szOID_KP_QUALIFIED_SUBORDINATION = '1.3.6.1.4.1.311.10.3.10';

const String szOID_KP_KEY_RECOVERY = '1.3.6.1.4.1.311.10.3.11';

const String szOID_KP_DOCUMENT_SIGNING = '1.3.6.1.4.1.311.10.3.12';

const String szOID_KP_LIFETIME_SIGNING = '1.3.6.1.4.1.311.10.3.13';

const String szOID_KP_MOBILE_DEVICE_SOFTWARE = '1.3.6.1.4.1.311.10.3.14';

const String szOID_KP_SMART_DISPLAY = '1.3.6.1.4.1.311.10.3.15';

const String szOID_KP_CSP_SIGNATURE = '1.3.6.1.4.1.311.10.3.16';

const String szOID_KP_FLIGHT_SIGNING = '1.3.6.1.4.1.311.10.3.27';

const String szOID_PLATFORM_MANIFEST_BINARY_ID = '1.3.6.1.4.1.311.10.3.28';

const String szOID_DRM = '1.3.6.1.4.1.311.10.5.1';

const String szOID_DRM_INDIVIDUALIZATION = '1.3.6.1.4.1.311.10.5.2';

const String szOID_LICENSES = '1.3.6.1.4.1.311.10.6.1';

const String szOID_LICENSE_SERVER = '1.3.6.1.4.1.311.10.6.2';

const String szOID_KP_SMARTCARD_LOGON = '1.3.6.1.4.1.311.20.2.2';

const String szOID_KP_KERNEL_MODE_CODE_SIGNING = '1.3.6.1.4.1.311.61.1.1';

const String szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING =
    '1.3.6.1.4.1.311.61.4.1';

const String szOID_REVOKED_LIST_SIGNER = '1.3.6.1.4.1.311.10.3.19';

const String szOID_WINDOWS_KITS_SIGNER = '1.3.6.1.4.1.311.10.3.20';

const String szOID_WINDOWS_RT_SIGNER = '1.3.6.1.4.1.311.10.3.21';

const String szOID_PROTECTED_PROCESS_LIGHT_SIGNER = '1.3.6.1.4.1.311.10.3.22';

const String szOID_WINDOWS_TCB_SIGNER = '1.3.6.1.4.1.311.10.3.23';

const String szOID_PROTECTED_PROCESS_SIGNER = '1.3.6.1.4.1.311.10.3.24';

const String szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER =
    '1.3.6.1.4.1.311.10.3.25';

const String szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER =
    '1.3.6.1.4.1.311.10.3.26';

const String szOID_DISALLOWED_LIST = '1.3.6.1.4.1.311.10.3.30';

const String szOID_PIN_RULES_SIGNER = '1.3.6.1.4.1.311.10.3.31';

const String szOID_PIN_RULES_CTL = '1.3.6.1.4.1.311.10.3.32';

const String szOID_PIN_RULES_EXT = '1.3.6.1.4.1.311.10.3.33';

const String szOID_PIN_RULES_DOMAIN_NAME = '1.3.6.1.4.1.311.10.3.34';

const String szOID_PIN_RULES_LOG_END_DATE_EXT = '1.3.6.1.4.1.311.10.3.35';

const String szOID_IUM_SIGNING = '1.3.6.1.4.1.311.10.3.37';

const String szOID_EV_WHQL_CRYPTO = '1.3.6.1.4.1.311.10.3.39';

const String szOID_BIOMETRIC_SIGNING = '1.3.6.1.4.1.311.10.3.41';

const String szOID_ENCLAVE_SIGNING = '1.3.6.1.4.1.311.10.3.42';

const String szOID_SYNC_ROOT_CTL_EXT = '1.3.6.1.4.1.311.10.3.50';

const String szOID_HPKP_DOMAIN_NAME_CTL = '1.3.6.1.4.1.311.10.3.60';

const String szOID_HPKP_HEADER_VALUE_CTL = '1.3.6.1.4.1.311.10.3.61';

const String szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING =
    '1.3.6.1.4.1.311.61.5.1';

const String szOID_WINDOWS_STORE_SIGNER = '1.3.6.1.4.1.311.76.3.1';

const String szOID_DYNAMIC_CODE_GEN_SIGNER = '1.3.6.1.4.1.311.76.5.1';

const String szOID_MICROSOFT_PUBLISHER_SIGNER = '1.3.6.1.4.1.311.76.8.1';

const String szOID_YESNO_TRUST_ATTR = '1.3.6.1.4.1.311.10.4.1';

const String szOID_SITE_PIN_RULES_INDEX_ATTR = '1.3.6.1.4.1.311.10.4.2';

const String szOID_SITE_PIN_RULES_FLAGS_ATTR = '1.3.6.1.4.1.311.10.4.3';

const int SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG = 1;

const String szOID_PKIX_POLICY_QUALIFIER_CPS = '1.3.6.1.5.5.7.2.1';

const String szOID_PKIX_POLICY_QUALIFIER_USERNOTICE = '1.3.6.1.5.5.7.2.2';

const String szOID_ROOT_PROGRAM_FLAGS = '1.3.6.1.4.1.311.60.1.1';

const int CERT_ROOT_PROGRAM_FLAG_ORG = 128;

const int CERT_ROOT_PROGRAM_FLAG_LSC = 64;

const int CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO = 32;

const int CERT_ROOT_PROGRAM_FLAG_OU = 16;

const int CERT_ROOT_PROGRAM_FLAG_ADDRESS = 8;

const String szOID_CERT_POLICIES_95_QUALIFIER1 = '2.16.840.1.113733.1.7.1.1';

const String szOID_RDN_TPM_MANUFACTURER = '2.23.133.2.1';

const String szOID_RDN_TPM_MODEL = '2.23.133.2.2';

const String szOID_RDN_TPM_VERSION = '2.23.133.2.3';

const String szOID_RDN_TCG_PLATFORM_MANUFACTURER = '2.23.133.2.4';

const String szOID_RDN_TCG_PLATFORM_MODEL = '2.23.133.2.5';

const String szOID_RDN_TCG_PLATFORM_VERSION = '2.23.133.2.6';

const String szOID_CT_CERT_SCTLIST = '1.3.6.1.4.1.11129.2.4.2';

const String szOID_ENROLL_EK_INFO = '1.3.6.1.4.1.311.21.23';

const String szOID_ENROLL_AIK_INFO = '1.3.6.1.4.1.311.21.39';

const String szOID_ENROLL_ATTESTATION_STATEMENT = '1.3.6.1.4.1.311.21.24';

const String szOID_ENROLL_KSP_NAME = '1.3.6.1.4.1.311.21.25';

const String szOID_ENROLL_EKPUB_CHALLENGE = '1.3.6.1.4.1.311.21.26';

const String szOID_ENROLL_CAXCHGCERT_HASH = '1.3.6.1.4.1.311.21.27';

const String szOID_ENROLL_ATTESTATION_CHALLENGE = '1.3.6.1.4.1.311.21.28';

const String szOID_ENROLL_ENCRYPTION_ALGORITHM = '1.3.6.1.4.1.311.21.29';

const String szOID_KP_TPM_EK_CERTIFICATE = '2.23.133.8.1';

const String szOID_KP_TPM_PLATFORM_CERTIFICATE = '2.23.133.8.2';

const String szOID_KP_TPM_AIK_CERTIFICATE = '2.23.133.8.3';

const String szOID_ENROLL_EKVERIFYKEY = '1.3.6.1.4.1.311.21.30';

const String szOID_ENROLL_EKVERIFYCERT = '1.3.6.1.4.1.311.21.31';

const String szOID_ENROLL_EKVERIFYCREDS = '1.3.6.1.4.1.311.21.32';

const String szOID_ENROLL_SCEP_ERROR = '1.3.6.1.4.1.311.21.33';

const String szOID_ENROLL_SCEP_SERVER_STATE = '1.3.6.1.4.1.311.21.34';

const String szOID_ENROLL_SCEP_CHALLENGE_ANSWER = '1.3.6.1.4.1.311.21.35';

const String szOID_ENROLL_SCEP_CLIENT_REQUEST = '1.3.6.1.4.1.311.21.37';

const String szOID_ENROLL_SCEP_SERVER_MESSAGE = '1.3.6.1.4.1.311.21.38';

const String szOID_ENROLL_SCEP_SERVER_SECRET = '1.3.6.1.4.1.311.21.40';

const String szOID_ENROLL_KEY_AFFINITY = '1.3.6.1.4.1.311.21.41';

const String szOID_ENROLL_SCEP_SIGNER_HASH = '1.3.6.1.4.1.311.21.42';

const String szOID_ENROLL_EK_CA_KEYID = '1.3.6.1.4.1.311.21.43';

const String szOID_ATTR_SUPPORTED_ALGORITHMS = '2.5.4.52';

const String szOID_ATTR_TPM_SPECIFICATION = '2.23.133.2.16';

const String szOID_ATTR_PLATFORM_SPECIFICATION = '2.23.133.2.17';

const String szOID_ATTR_TPM_SECURITY_ASSERTIONS = '2.23.133.2.18';

const int CERT_UNICODE_RDN_ERR_INDEX_MASK = 1023;

const int CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 22;

const int CERT_UNICODE_ATTR_ERR_INDEX_MASK = 63;

const int CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 16;

const int CERT_UNICODE_VALUE_ERR_INDEX_MASK = 65535;

const int CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0;

const int CERT_DIGITAL_SIGNATURE_KEY_USAGE = 128;

const int CERT_NON_REPUDIATION_KEY_USAGE = 64;

const int CERT_KEY_ENCIPHERMENT_KEY_USAGE = 32;

const int CERT_DATA_ENCIPHERMENT_KEY_USAGE = 16;

const int CERT_KEY_AGREEMENT_KEY_USAGE = 8;

const int CERT_KEY_CERT_SIGN_KEY_USAGE = 4;

const int CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 2;

const int CERT_CRL_SIGN_KEY_USAGE = 2;

const int CERT_ENCIPHER_ONLY_KEY_USAGE = 1;

const int CERT_DECIPHER_ONLY_KEY_USAGE = 128;

const int CERT_ALT_NAME_OTHER_NAME = 1;

const int CERT_ALT_NAME_RFC822_NAME = 2;

const int CERT_ALT_NAME_DNS_NAME = 3;

const int CERT_ALT_NAME_X400_ADDRESS = 4;

const int CERT_ALT_NAME_DIRECTORY_NAME = 5;

const int CERT_ALT_NAME_EDI_PARTY_NAME = 6;

const int CERT_ALT_NAME_URL = 7;

const int CERT_ALT_NAME_IP_ADDRESS = 8;

const int CERT_ALT_NAME_REGISTERED_ID = 9;

const int CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 255;

const int CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 16;

const int CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 65535;

const int CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0;

const int CERT_CA_SUBJECT_FLAG = 128;

const int CERT_END_ENTITY_SUBJECT_FLAG = 64;

const String szOID_PKIX_ACC_DESCR = '1.3.6.1.5.5.7.48';

const String szOID_PKIX_OCSP = '1.3.6.1.5.5.7.48.1';

const String szOID_PKIX_CA_ISSUERS = '1.3.6.1.5.5.7.48.2';

const String szOID_PKIX_TIME_STAMPING = '1.3.6.1.5.5.7.48.3';

const String szOID_PKIX_CA_REPOSITORY = '1.3.6.1.5.5.7.48.5';

const int CRL_REASON_UNSPECIFIED = 0;

const int CRL_REASON_KEY_COMPROMISE = 1;

const int CRL_REASON_CA_COMPROMISE = 2;

const int CRL_REASON_AFFILIATION_CHANGED = 3;

const int CRL_REASON_SUPERSEDED = 4;

const int CRL_REASON_CESSATION_OF_OPERATION = 5;

const int CRL_REASON_CERTIFICATE_HOLD = 6;

const int CRL_REASON_REMOVE_FROM_CRL = 8;

const int CRL_REASON_PRIVILEGE_WITHDRAWN = 9;

const int CRL_REASON_AA_COMPROMISE = 10;

const int CRL_DIST_POINT_NO_NAME = 0;

const int CRL_DIST_POINT_FULL_NAME = 1;

const int CRL_DIST_POINT_ISSUER_RDN_NAME = 2;

const int CRL_REASON_UNUSED_FLAG = 128;

const int CRL_REASON_KEY_COMPROMISE_FLAG = 64;

const int CRL_REASON_CA_COMPROMISE_FLAG = 32;

const int CRL_REASON_AFFILIATION_CHANGED_FLAG = 16;

const int CRL_REASON_SUPERSEDED_FLAG = 8;

const int CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4;

const int CRL_REASON_CERTIFICATE_HOLD_FLAG = 2;

const int CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG = 1;

const int CRL_REASON_AA_COMPROMISE_FLAG = 128;

const int CRL_DIST_POINT_ERR_INDEX_MASK = 127;

const int CRL_DIST_POINT_ERR_INDEX_SHIFT = 24;

const int CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = 2147483648;

const int CROSS_CERT_DIST_POINT_ERR_INDEX_MASK = 255;

const int CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT = 24;

const int CERT_EXCLUDED_SUBTREE_BIT = 2147483648;

const int SORTED_CTL_EXT_FLAGS_OFFSET = 0;

const int SORTED_CTL_EXT_COUNT_OFFSET = 4;

const int SORTED_CTL_EXT_MAX_COLLISION_OFFSET = 8;

const int SORTED_CTL_EXT_HASH_BUCKET_OFFSET = 12;

const int SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1;

const int CERT_DSS_R_LEN = 20;

const int CERT_DSS_S_LEN = 20;

const int CERT_DSS_SIGNATURE_LEN = 40;

const int CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN = 48;

const int CRYPT_X942_COUNTER_BYTE_LENGTH = 4;

const int CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4;

const int CRYPT_X942_PUB_INFO_BYTE_LENGTH = 64;

const int CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH = 4;

const int CRYPT_RC2_40BIT_VERSION = 160;

const int CRYPT_RC2_56BIT_VERSION = 52;

const int CRYPT_RC2_64BIT_VERSION = 120;

const int CRYPT_RC2_128BIT_VERSION = 58;

const String szOID_QC_EU_COMPLIANCE = '0.4.0.1862.1.1';

const String szOID_QC_SSCD = '0.4.0.1862.1.4';

const int PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC = 1;

const String szOID_VERISIGN_PRIVATE_6_9 = '2.16.840.1.113733.1.6.9';

const String szOID_VERISIGN_ONSITE_JURISDICTION_HASH =
    '2.16.840.1.113733.1.6.11';

const String szOID_VERISIGN_BITSTRING_6_13 = '2.16.840.1.113733.1.6.13';

const String szOID_VERISIGN_ISS_STRONG_CRYPTO = '2.16.840.1.113733.1.8.1';

const String szOIDVerisign_MessageType = '2.16.840.1.113733.1.9.2';

const String szOIDVerisign_PkiStatus = '2.16.840.1.113733.1.9.3';

const String szOIDVerisign_FailInfo = '2.16.840.1.113733.1.9.4';

const String szOIDVerisign_SenderNonce = '2.16.840.1.113733.1.9.5';

const String szOIDVerisign_RecipientNonce = '2.16.840.1.113733.1.9.6';

const String szOIDVerisign_TransactionID = '2.16.840.1.113733.1.9.7';

const String szOID_NETSCAPE = '2.16.840.1.113730';

const String szOID_NETSCAPE_CERT_EXTENSION = '2.16.840.1.113730.1';

const String szOID_NETSCAPE_CERT_TYPE = '2.16.840.1.113730.1.1';

const String szOID_NETSCAPE_BASE_URL = '2.16.840.1.113730.1.2';

const String szOID_NETSCAPE_REVOCATION_URL = '2.16.840.1.113730.1.3';

const String szOID_NETSCAPE_CA_REVOCATION_URL = '2.16.840.1.113730.1.4';

const String szOID_NETSCAPE_CERT_RENEWAL_URL = '2.16.840.1.113730.1.7';

const String szOID_NETSCAPE_CA_POLICY_URL = '2.16.840.1.113730.1.8';

const String szOID_NETSCAPE_SSL_SERVER_NAME = '2.16.840.1.113730.1.12';

const String szOID_NETSCAPE_COMMENT = '2.16.840.1.113730.1.13';

const String szOID_NETSCAPE_DATA_TYPE = '2.16.840.1.113730.2';

const String szOID_NETSCAPE_CERT_SEQUENCE = '2.16.840.1.113730.2.5';

const int NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 128;

const int NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 64;

const int NETSCAPE_SMIME_CERT_TYPE = 32;

const int NETSCAPE_SIGN_CERT_TYPE = 16;

const int NETSCAPE_SSL_CA_CERT_TYPE = 4;

const int NETSCAPE_SMIME_CA_CERT_TYPE = 2;

const int NETSCAPE_SIGN_CA_CERT_TYPE = 1;

const String szOID_CT_PKI_DATA = '1.3.6.1.5.5.7.12.2';

const String szOID_CT_PKI_RESPONSE = '1.3.6.1.5.5.7.12.3';

const String szOID_PKIX_NO_SIGNATURE = '1.3.6.1.5.5.7.6.2';

const String szOID_CMC = '1.3.6.1.5.5.7.7';

const String szOID_CMC_STATUS_INFO = '1.3.6.1.5.5.7.7.1';

const String szOID_CMC_IDENTIFICATION = '1.3.6.1.5.5.7.7.2';

const String szOID_CMC_IDENTITY_PROOF = '1.3.6.1.5.5.7.7.3';

const String szOID_CMC_DATA_RETURN = '1.3.6.1.5.5.7.7.4';

const String szOID_CMC_TRANSACTION_ID = '1.3.6.1.5.5.7.7.5';

const String szOID_CMC_SENDER_NONCE = '1.3.6.1.5.5.7.7.6';

const String szOID_CMC_RECIPIENT_NONCE = '1.3.6.1.5.5.7.7.7';

const String szOID_CMC_ADD_EXTENSIONS = '1.3.6.1.5.5.7.7.8';

const String szOID_CMC_ENCRYPTED_POP = '1.3.6.1.5.5.7.7.9';

const String szOID_CMC_DECRYPTED_POP = '1.3.6.1.5.5.7.7.10';

const String szOID_CMC_LRA_POP_WITNESS = '1.3.6.1.5.5.7.7.11';

const String szOID_CMC_GET_CERT = '1.3.6.1.5.5.7.7.15';

const String szOID_CMC_GET_CRL = '1.3.6.1.5.5.7.7.16';

const String szOID_CMC_REVOKE_REQUEST = '1.3.6.1.5.5.7.7.17';

const String szOID_CMC_REG_INFO = '1.3.6.1.5.5.7.7.18';

const String szOID_CMC_RESPONSE_INFO = '1.3.6.1.5.5.7.7.19';

const String szOID_CMC_QUERY_PENDING = '1.3.6.1.5.5.7.7.21';

const String szOID_CMC_ID_POP_LINK_RANDOM = '1.3.6.1.5.5.7.7.22';

const String szOID_CMC_ID_POP_LINK_WITNESS = '1.3.6.1.5.5.7.7.23';

const String szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = '1.3.6.1.5.5.7.7.24';

const String szOID_CMC_ADD_ATTRIBUTES = '1.3.6.1.4.1.311.10.10.1';

const int CMC_TAGGED_CERT_REQUEST_CHOICE = 1;

const int CMC_OTHER_INFO_NO_CHOICE = 0;

const int CMC_OTHER_INFO_FAIL_CHOICE = 1;

const int CMC_OTHER_INFO_PEND_CHOICE = 2;

const int CMC_STATUS_SUCCESS = 0;

const int CMC_STATUS_FAILED = 2;

const int CMC_STATUS_PENDING = 3;

const int CMC_STATUS_NO_SUPPORT = 4;

const int CMC_STATUS_CONFIRM_REQUIRED = 5;

const int CMC_FAIL_BAD_ALG = 0;

const int CMC_FAIL_BAD_MESSAGE_CHECK = 1;

const int CMC_FAIL_BAD_REQUEST = 2;

const int CMC_FAIL_BAD_TIME = 3;

const int CMC_FAIL_BAD_CERT_ID = 4;

const int CMC_FAIL_UNSUPORTED_EXT = 5;

const int CMC_FAIL_MUST_ARCHIVE_KEYS = 6;

const int CMC_FAIL_BAD_IDENTITY = 7;

const int CMC_FAIL_POP_REQUIRED = 8;

const int CMC_FAIL_POP_FAILED = 9;

const int CMC_FAIL_NO_KEY_REUSE = 10;

const int CMC_FAIL_INTERNAL_CA_ERROR = 11;

const int CMC_FAIL_TRY_LATER = 12;

const int CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE = 1;

const int CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE = 2;

const int CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE = 0;

const int CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE = 1;

const int CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE = 2;

const int CERT_LOGOTYPE_DIRECT_INFO_CHOICE = 1;

const int CERT_LOGOTYPE_INDIRECT_INFO_CHOICE = 2;

const String szOID_LOYALTY_OTHER_LOGOTYPE = '1.3.6.1.5.5.7.20.1';

const String szOID_BACKGROUND_OTHER_LOGOTYPE = '1.3.6.1.5.5.7.20.2';

const int CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE = 1;

const int CERT_BIOMETRIC_OID_DATA_CHOICE = 2;

const int CERT_BIOMETRIC_PICTURE_TYPE = 0;

const int CERT_BIOMETRIC_SIGNATURE_TYPE = 1;

const int OCSP_REQUEST_V1 = 0;

const int OCSP_SUCCESSFUL_RESPONSE = 0;

const int OCSP_MALFORMED_REQUEST_RESPONSE = 1;

const int OCSP_INTERNAL_ERROR_RESPONSE = 2;

const int OCSP_TRY_LATER_RESPONSE = 3;

const int OCSP_SIG_REQUIRED_RESPONSE = 5;

const int OCSP_UNAUTHORIZED_RESPONSE = 6;

const String szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = '1.3.6.1.5.5.7.48.1.1';

const int OCSP_BASIC_GOOD_CERT_STATUS = 0;

const int OCSP_BASIC_REVOKED_CERT_STATUS = 1;

const int OCSP_BASIC_UNKNOWN_CERT_STATUS = 2;

const int OCSP_BASIC_RESPONSE_V1 = 0;

const int OCSP_BASIC_BY_NAME_RESPONDER_ID = 1;

const int OCSP_BASIC_BY_KEY_RESPONDER_ID = 2;

const String CRYPT_OID_ENCODE_OBJECT_FUNC = 'CryptDllEncodeObject';

const String CRYPT_OID_DECODE_OBJECT_FUNC = 'CryptDllDecodeObject';

const String CRYPT_OID_ENCODE_OBJECT_EX_FUNC = 'CryptDllEncodeObjectEx';

const String CRYPT_OID_DECODE_OBJECT_EX_FUNC = 'CryptDllDecodeObjectEx';

const String CRYPT_OID_CREATE_COM_OBJECT_FUNC = 'CryptDllCreateCOMObject';

const String CRYPT_OID_VERIFY_REVOCATION_FUNC = 'CertDllVerifyRevocation';

const String CRYPT_OID_VERIFY_CTL_USAGE_FUNC = 'CertDllVerifyCTLUsage';

const String CRYPT_OID_FORMAT_OBJECT_FUNC = 'CryptDllFormatObject';

const String CRYPT_OID_FIND_OID_INFO_FUNC = 'CryptDllFindOIDInfo';

const String CRYPT_OID_FIND_LOCALIZED_NAME_FUNC = 'CryptDllFindLocalizedName';

const String CRYPT_OID_REGPATH = 'Software\\Microsoft\\Cryptography\\OID';

const String CRYPT_OID_REG_ENCODING_TYPE_PREFIX = 'EncodingType ';

const String CRYPT_OID_REG_DLL_VALUE_NAME = 'D';

const String CRYPT_OID_REG_FUNC_NAME_VALUE_NAME = 'F';

const String CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A = 'FuncName';

const String CRYPT_OID_REG_FLAGS_VALUE_NAME = 'C';

const String CRYPT_DEFAULT_OID = 'DEFAULT';

const int CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1;

const int CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1;

const int CRYPT_REGISTER_FIRST_INDEX = 0;

const int CRYPT_REGISTER_LAST_INDEX = 4294967295;

const int CRYPT_MATCH_ANY_ENCODING_TYPE = 4294967295;

const int CALG_OID_INFO_CNG_ONLY = 4294967295;

const int CALG_OID_INFO_PARAMETERS = 4294967294;

const String CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM = 'C';

const String CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM = 'C';

const String CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM = 'C';

const String CRYPT_OID_INFO_NO_SIGN_ALGORITHM = 'C';

const String CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM = 'C';

const String CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM = 'C';

const String CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM = 'C';

const int CRYPT_HASH_ALG_OID_GROUP_ID = 1;

const int CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2;

const int CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3;

const int CRYPT_SIGN_ALG_OID_GROUP_ID = 4;

const int CRYPT_RDN_ATTR_OID_GROUP_ID = 5;

const int CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6;

const int CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7;

const int CRYPT_POLICY_OID_GROUP_ID = 8;

const int CRYPT_TEMPLATE_OID_GROUP_ID = 9;

const int CRYPT_KDF_OID_GROUP_ID = 10;

const int CRYPT_LAST_OID_GROUP_ID = 10;

const int CRYPT_FIRST_ALG_OID_GROUP_ID = 1;

const int CRYPT_LAST_ALG_OID_GROUP_ID = 4;

const int CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1;

const int CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2;

const int CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4;

const int CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG = 2147483648;

const int CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG = 1073741824;

const int CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = 536870912;

const int CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = 268435456;

const int CRYPT_OID_INFO_OID_KEY = 1;

const int CRYPT_OID_INFO_NAME_KEY = 2;

const int CRYPT_OID_INFO_ALGID_KEY = 3;

const int CRYPT_OID_INFO_SIGN_KEY = 4;

const int CRYPT_OID_INFO_CNG_ALGID_KEY = 5;

const int CRYPT_OID_INFO_CNG_SIGN_KEY = 6;

const int CRYPT_OID_INFO_OID_KEY_FLAGS_MASK = 4294901760;

const int CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = 2147483648;

const int CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = 1073741824;

const int CRYPT_OID_DISABLE_SEARCH_DS_FLAG = 2147483648;

const int CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920;

const int CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16;

const int CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1;

const int CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0;

const String CRYPT_LOCALIZED_NAME_OID = 'LocalizedNames';

const String CERT_STRONG_SIGN_ECDSA_ALGORITHM = 'E';

const int CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE = 1;

const int CERT_STRONG_SIGN_OID_INFO_CHOICE = 2;

const int CERT_STRONG_SIGN_ENABLE_CRL_CHECK = 1;

const int CERT_STRONG_SIGN_ENABLE_OCSP_CHECK = 2;

const String szOID_CERT_STRONG_SIGN_OS_PREFIX = '1.3.6.1.4.1.311.72.1.';

const String szOID_CERT_STRONG_SIGN_OS_1 = '1.3.6.1.4.1.311.72.1.1';

const String szOID_CERT_STRONG_SIGN_OS_CURRENT = '1.3.6.1.4.1.311.72.1.1';

const String szOID_CERT_STRONG_KEY_OS_PREFIX = '1.3.6.1.4.1.311.72.2.';

const String szOID_CERT_STRONG_KEY_OS_1 = '1.3.6.1.4.1.311.72.2.1';

const String szOID_CERT_STRONG_KEY_OS_CURRENT = '1.3.6.1.4.1.311.72.2.1';

const String szOID_PKCS_7_DATA = '1.2.840.113549.1.7.1';

const String szOID_PKCS_7_SIGNED = '1.2.840.113549.1.7.2';

const String szOID_PKCS_7_ENVELOPED = '1.2.840.113549.1.7.3';

const String szOID_PKCS_7_SIGNEDANDENVELOPED = '1.2.840.113549.1.7.4';

const String szOID_PKCS_7_DIGESTED = '1.2.840.113549.1.7.5';

const String szOID_PKCS_7_ENCRYPTED = '1.2.840.113549.1.7.6';

const String szOID_PKCS_9_CONTENT_TYPE = '1.2.840.113549.1.9.3';

const String szOID_PKCS_9_MESSAGE_DIGEST = '1.2.840.113549.1.9.4';

const int CMSG_DATA = 1;

const int CMSG_SIGNED = 2;

const int CMSG_ENVELOPED = 3;

const int CMSG_SIGNED_AND_ENVELOPED = 4;

const int CMSG_HASHED = 5;

const int CMSG_ENCRYPTED = 6;

const int CMSG_ALL_FLAGS = 4294967295;

const int CMSG_DATA_FLAG = 2;

const int CMSG_SIGNED_FLAG = 4;

const int CMSG_ENVELOPED_FLAG = 8;

const int CMSG_SIGNED_AND_ENVELOPED_FLAG = 16;

const int CMSG_HASHED_FLAG = 32;

const int CMSG_ENCRYPTED_FLAG = 64;

const int CERT_ID_ISSUER_SERIAL_NUMBER = 1;

const int CERT_ID_KEY_IDENTIFIER = 2;

const int CERT_ID_SHA1_HASH = 3;

const int CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1;

const int CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2;

const int CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1;

const int CMSG_KEY_TRANS_RECIPIENT = 1;

const int CMSG_KEY_AGREE_RECIPIENT = 2;

const int CMSG_MAIL_LIST_RECIPIENT = 3;

const int CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = 2147483648;

const int CMSG_RC4_NO_SALT_FLAG = 1073741824;

const int CMSG_INDEFINITE_LENGTH = 4294967295;

const int CMSG_BARE_CONTENT_FLAG = 1;

const int CMSG_LENGTH_ONLY_FLAG = 2;

const int CMSG_DETACHED_FLAG = 4;

const int CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8;

const int CMSG_CONTENTS_OCTETS_FLAG = 16;

const int CMSG_MAX_LENGTH_FLAG = 32;

const int CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64;

const int CMSG_SIGNED_DATA_NO_SIGN_FLAG = 128;

const int CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768;

const int CMSG_TYPE_PARAM = 1;

const int CMSG_CONTENT_PARAM = 2;

const int CMSG_BARE_CONTENT_PARAM = 3;

const int CMSG_INNER_CONTENT_TYPE_PARAM = 4;

const int CMSG_SIGNER_COUNT_PARAM = 5;

const int CMSG_SIGNER_INFO_PARAM = 6;

const int CMSG_SIGNER_CERT_INFO_PARAM = 7;

const int CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8;

const int CMSG_SIGNER_AUTH_ATTR_PARAM = 9;

const int CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10;

const int CMSG_CERT_COUNT_PARAM = 11;

const int CMSG_CERT_PARAM = 12;

const int CMSG_CRL_COUNT_PARAM = 13;

const int CMSG_CRL_PARAM = 14;

const int CMSG_ENVELOPE_ALGORITHM_PARAM = 15;

const int CMSG_RECIPIENT_COUNT_PARAM = 17;

const int CMSG_RECIPIENT_INDEX_PARAM = 18;

const int CMSG_RECIPIENT_INFO_PARAM = 19;

const int CMSG_HASH_ALGORITHM_PARAM = 20;

const int CMSG_HASH_DATA_PARAM = 21;

const int CMSG_COMPUTED_HASH_PARAM = 22;

const int CMSG_ENCRYPT_PARAM = 26;

const int CMSG_ENCRYPTED_DIGEST = 27;

const int CMSG_ENCODED_SIGNER = 28;

const int CMSG_ENCODED_MESSAGE = 29;

const int CMSG_VERSION_PARAM = 30;

const int CMSG_ATTR_CERT_COUNT_PARAM = 31;

const int CMSG_ATTR_CERT_PARAM = 32;

const int CMSG_CMS_RECIPIENT_COUNT_PARAM = 33;

const int CMSG_CMS_RECIPIENT_INDEX_PARAM = 34;

const int CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35;

const int CMSG_CMS_RECIPIENT_INFO_PARAM = 36;

const int CMSG_UNPROTECTED_ATTR_PARAM = 37;

const int CMSG_SIGNER_CERT_ID_PARAM = 38;

const int CMSG_CMS_SIGNER_INFO_PARAM = 39;

const int CMSG_SIGNED_DATA_V1 = 1;

const int CMSG_SIGNED_DATA_V3 = 3;

const int CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1;

const int CMSG_SIGNED_DATA_CMS_VERSION = 3;

const int CMSG_SIGNER_INFO_V1 = 1;

const int CMSG_SIGNER_INFO_V3 = 3;

const int CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1;

const int CMSG_SIGNER_INFO_CMS_VERSION = 3;

const int CMSG_HASHED_DATA_V0 = 0;

const int CMSG_HASHED_DATA_V2 = 2;

const int CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0;

const int CMSG_HASHED_DATA_CMS_VERSION = 2;

const int CMSG_ENVELOPED_DATA_V0 = 0;

const int CMSG_ENVELOPED_DATA_V2 = 2;

const int CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0;

const int CMSG_ENVELOPED_DATA_CMS_VERSION = 2;

const int CMSG_KEY_AGREE_ORIGINATOR_CERT = 1;

const int CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2;

const int CMSG_ENVELOPED_RECIPIENT_V0 = 0;

const int CMSG_ENVELOPED_RECIPIENT_V2 = 2;

const int CMSG_ENVELOPED_RECIPIENT_V3 = 3;

const int CMSG_ENVELOPED_RECIPIENT_V4 = 4;

const int CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0;

const int CMSG_KEY_TRANS_CMS_VERSION = 2;

const int CMSG_KEY_AGREE_VERSION = 3;

const int CMSG_MAIL_LIST_VERSION = 4;

const int CMSG_CTRL_VERIFY_SIGNATURE = 1;

const int CMSG_CTRL_DECRYPT = 2;

const int CMSG_CTRL_VERIFY_HASH = 5;

const int CMSG_CTRL_ADD_SIGNER = 6;

const int CMSG_CTRL_DEL_SIGNER = 7;

const int CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8;

const int CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9;

const int CMSG_CTRL_ADD_CERT = 10;

const int CMSG_CTRL_DEL_CERT = 11;

const int CMSG_CTRL_ADD_CRL = 12;

const int CMSG_CTRL_DEL_CRL = 13;

const int CMSG_CTRL_ADD_ATTR_CERT = 14;

const int CMSG_CTRL_DEL_ATTR_CERT = 15;

const int CMSG_CTRL_KEY_TRANS_DECRYPT = 16;

const int CMSG_CTRL_KEY_AGREE_DECRYPT = 17;

const int CMSG_CTRL_MAIL_LIST_DECRYPT = 18;

const int CMSG_CTRL_VERIFY_SIGNATURE_EX = 19;

const int CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20;

const int CMSG_CTRL_ENABLE_STRONG_SIGNATURE = 21;

const int CMSG_VERIFY_SIGNER_PUBKEY = 1;

const int CMSG_VERIFY_SIGNER_CERT = 2;

const int CMSG_VERIFY_SIGNER_CHAIN = 3;

const int CMSG_VERIFY_SIGNER_NULL = 4;

const int CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG = 1;

const String CMSG_OID_GEN_ENCRYPT_KEY_FUNC = 'CryptMsgDllGenEncryptKey';

const String CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC = 'CryptMsgDllExportEncryptKey';

const String CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC = 'CryptMsgDllImportEncryptKey';

const int CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1;

const int CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1;

const int CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG = 2;

const int CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768;

const String CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC =
    'CryptMsgDllGenContentEncryptKey';

const String CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC =
    'CryptMsgDllGenContentEncryptKey';

const String CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC =
    'CryptMsgDllCNGGenContentEncryptKey';

const int CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1;

const int CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG = 2;

const String CMSG_OID_EXPORT_KEY_TRANS_FUNC = 'CryptMsgDllExportKeyTrans';

const String CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC = 'CryptMsgDllExportKeyTrans';

const String CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC =
    'CryptMsgDllCNGExportKeyTrans';

const int CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1;

const int CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2;

const int CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4;

const int CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8;

const int CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16;

const int CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG = 32;

const String CMSG_OID_EXPORT_KEY_AGREE_FUNC = 'CryptMsgDllExportKeyAgree';

const String CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC = 'CryptMsgDllExportKeyAgree';

const String CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC =
    'CryptMsgDllCNGExportKeyAgree';

const int CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1;

const int CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG = 2;

const String CMSG_OID_EXPORT_MAIL_LIST_FUNC = 'CryptMsgDllExportMailList';

const String CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC = 'CryptMsgDllExportMailList';

const String CMSG_OID_IMPORT_KEY_TRANS_FUNC = 'CryptMsgDllImportKeyTrans';

const String CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC = 'CryptMsgDllImportKeyTrans';

const String CMSG_OID_IMPORT_KEY_AGREE_FUNC = 'CryptMsgDllImportKeyAgree';

const String CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC = 'CryptMsgDllImportKeyAgree';

const String CMSG_OID_IMPORT_MAIL_LIST_FUNC = 'CryptMsgDllImportMailList';

const String CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC = 'CryptMsgDllImportMailList';

const String CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC =
    'CryptMsgDllCNGImportKeyTrans';

const String CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC =
    'CryptMsgDllCNGImportKeyAgree';

const String CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC =
    'CryptMsgDllCNGImportContentEncryptKey';

const int CERT_KEY_PROV_HANDLE_PROP_ID = 1;

const int CERT_KEY_PROV_INFO_PROP_ID = 2;

const int CERT_SHA1_HASH_PROP_ID = 3;

const int CERT_MD5_HASH_PROP_ID = 4;

const int CERT_HASH_PROP_ID = 3;

const int CERT_KEY_CONTEXT_PROP_ID = 5;

const int CERT_KEY_SPEC_PROP_ID = 6;

const int CERT_IE30_RESERVED_PROP_ID = 7;

const int CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8;

const int CERT_ENHKEY_USAGE_PROP_ID = 9;

const int CERT_CTL_USAGE_PROP_ID = 9;

const int CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10;

const int CERT_FRIENDLY_NAME_PROP_ID = 11;

const int CERT_PVK_FILE_PROP_ID = 12;

const int CERT_DESCRIPTION_PROP_ID = 13;

const int CERT_ACCESS_STATE_PROP_ID = 14;

const int CERT_SIGNATURE_HASH_PROP_ID = 15;

const int CERT_SMART_CARD_DATA_PROP_ID = 16;

const int CERT_EFS_PROP_ID = 17;

const int CERT_FORTEZZA_DATA_PROP_ID = 18;

const int CERT_ARCHIVED_PROP_ID = 19;

const int CERT_KEY_IDENTIFIER_PROP_ID = 20;

const int CERT_AUTO_ENROLL_PROP_ID = 21;

const int CERT_PUBKEY_ALG_PARA_PROP_ID = 22;

const int CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23;

const int CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24;

const int CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25;

const int CERT_ENROLLMENT_PROP_ID = 26;

const int CERT_DATE_STAMP_PROP_ID = 27;

const int CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28;

const int CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29;

const int CERT_EXTENDED_ERROR_INFO_PROP_ID = 30;

const int CERT_RENEWAL_PROP_ID = 64;

const int CERT_ARCHIVED_KEY_HASH_PROP_ID = 65;

const int CERT_AUTO_ENROLL_RETRY_PROP_ID = 66;

const int CERT_AIA_URL_RETRIEVED_PROP_ID = 67;

const int CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68;

const int CERT_BACKED_UP_PROP_ID = 69;

const int CERT_OCSP_RESPONSE_PROP_ID = 70;

const int CERT_REQUEST_ORIGINATOR_PROP_ID = 71;

const int CERT_SOURCE_LOCATION_PROP_ID = 72;

const int CERT_SOURCE_URL_PROP_ID = 73;

const int CERT_NEW_KEY_PROP_ID = 74;

const int CERT_OCSP_CACHE_PREFIX_PROP_ID = 75;

const int CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76;

const int CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77;

const int CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78;

const int CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79;

const int CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80;

const int CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81;

const int CERT_CA_DISABLE_CRL_PROP_ID = 82;

const int CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83;

const int CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84;

const int CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85;

const int CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86;

const int CERT_CEP_PROP_ID = 87;

const int CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89;

const int CERT_SCARD_PIN_ID_PROP_ID = 90;

const int CERT_SCARD_PIN_INFO_PROP_ID = 91;

const int CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92;

const int CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93;

const int CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94;

const int CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95;

const int CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96;

const int CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97;

const int CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98;

const int CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99;

const int CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100;

const int CERT_SMART_CARD_READER_PROP_ID = 101;

const int CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102;

const int CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103;

const int CERT_DISALLOWED_FILETIME_PROP_ID = 104;

const int CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105;

const int CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106;

const int CERT_SHA256_HASH_PROP_ID = 107;

const int CERT_SCEP_SERVER_CERTS_PROP_ID = 108;

const int CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109;

const int CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110;

const int CERT_SCEP_CA_CERT_PROP_ID = 111;

const int CERT_SCEP_SIGNER_CERT_PROP_ID = 112;

const int CERT_SCEP_NONCE_PROP_ID = 113;

const int CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114;

const int CERT_SCEP_FLAGS_PROP_ID = 115;

const int CERT_SCEP_GUID_PROP_ID = 116;

const int CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117;

const int CERT_ISOLATED_KEY_PROP_ID = 118;

const int CERT_SERIAL_CHAIN_PROP_ID = 119;

const int CERT_KEY_CLASSIFICATION_PROP_ID = 120;

const int CERT_OCSP_MUST_STAPLE_PROP_ID = 121;

const int CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122;

const int CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123;

const int CERT_PIN_SHA256_HASH_PROP_ID = 124;

const int CERT_CLR_DELETE_KEY_PROP_ID = 125;

const int CERT_NOT_BEFORE_FILETIME_PROP_ID = 126;

const int CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127;

const int CERT_DISALLOWED_CA_FILETIME_PROP_ID = 128;

const int CERT_FIRST_RESERVED_PROP_ID = 129;

const int CERT_LAST_RESERVED_PROP_ID = 32767;

const int CERT_FIRST_USER_PROP_ID = 32768;

const int CERT_LAST_USER_PROP_ID = 65535;

const String szOID_CERT_PROP_ID_PREFIX = '1.3.6.1.4.1.311.10.11.';

const String szOID_CERT_KEY_IDENTIFIER_PROP_ID = '1.3.6.1.4.1.311.10.11.20';

const String szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID =
    '1.3.6.1.4.1.311.10.11.28';

const String szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID =
    '1.3.6.1.4.1.311.10.11.29';

const String szOID_CERT_MD5_HASH_PROP_ID = '1.3.6.1.4.1.311.10.11.4';

const String szOID_CERT_SIGNATURE_HASH_PROP_ID = '1.3.6.1.4.1.311.10.11.15';

const String szOID_DISALLOWED_HASH = '1.3.6.1.4.1.311.10.11.15';

const String szOID_CERT_DISALLOWED_FILETIME_PROP_ID =
    '1.3.6.1.4.1.311.10.11.104';

const String szOID_CERT_DISALLOWED_CA_FILETIME_PROP_ID =
    '1.3.6.1.4.1.311.10.11.128';

const int CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1;

const int CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2;

const int CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG = 4;

const int CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG = 8;

const int CERT_ACCESS_STATE_SHARED_USER_FLAG = 16;

const String szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION =
    '1.3.6.1.4.1.311.60.3.1';

const String szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION =
    '1.3.6.1.4.1.311.60.3.2';

const String szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL =
    '1.3.6.1.4.1.311.60.3.3';

const int CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1;

const int CERT_SET_KEY_CONTEXT_PROP_ID = 1;

const int CERT_NCRYPT_KEY_SPEC = 4294967295;

const String sz_CERT_STORE_PROV_MEMORY = 'Memory';

const String sz_CERT_STORE_PROV_FILENAME_W = 'File';

const String sz_CERT_STORE_PROV_FILENAME = 'File';

const String sz_CERT_STORE_PROV_SYSTEM_W = 'System';

const String sz_CERT_STORE_PROV_SYSTEM = 'System';

const String sz_CERT_STORE_PROV_PKCS7 = 'PKCS7';

const String sz_CERT_STORE_PROV_PKCS12 = 'PKCS12';

const String sz_CERT_STORE_PROV_SERIALIZED = 'Serialized';

const String sz_CERT_STORE_PROV_COLLECTION = 'Collection';

const String sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W = 'SystemRegistry';

const String sz_CERT_STORE_PROV_SYSTEM_REGISTRY = 'SystemRegistry';

const String sz_CERT_STORE_PROV_PHYSICAL_W = 'Physical';

const String sz_CERT_STORE_PROV_PHYSICAL = 'Physical';

const String sz_CERT_STORE_PROV_SMART_CARD_W = 'SmartCard';

const String sz_CERT_STORE_PROV_SMART_CARD = 'SmartCard';

const String sz_CERT_STORE_PROV_LDAP_W = 'Ldap';

const String sz_CERT_STORE_PROV_LDAP = 'Ldap';

const int CERT_STORE_SIGNATURE_FLAG = 1;

const int CERT_STORE_TIME_VALIDITY_FLAG = 2;

const int CERT_STORE_REVOCATION_FLAG = 4;

const int CERT_STORE_NO_CRL_FLAG = 65536;

const int CERT_STORE_NO_ISSUER_FLAG = 131072;

const int CERT_STORE_BASE_CRL_FLAG = 256;

const int CERT_STORE_DELTA_CRL_FLAG = 512;

const int CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1;

const int CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2;

const int CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4;

const int CERT_STORE_DELETE_FLAG = 16;

const int CERT_STORE_UNSAFE_PHYSICAL_FLAG = 32;

const int CERT_STORE_SHARE_STORE_FLAG = 64;

const int CERT_STORE_SHARE_CONTEXT_FLAG = 128;

const int CERT_STORE_MANIFOLD_FLAG = 256;

const int CERT_STORE_ENUM_ARCHIVED_FLAG = 512;

const int CERT_STORE_UPDATE_KEYID_FLAG = 1024;

const int CERT_STORE_BACKUP_RESTORE_FLAG = 2048;

const int CERT_STORE_READONLY_FLAG = 32768;

const int CERT_STORE_OPEN_EXISTING_FLAG = 16384;

const int CERT_STORE_CREATE_NEW_FLAG = 8192;

const int CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096;

const int CERT_SYSTEM_STORE_MASK = 4294901760;

const int CERT_SYSTEM_STORE_RELOCATE_FLAG = 2147483648;

const int CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824;

const int CERT_SYSTEM_STORE_DEFER_READ_FLAG = 536870912;

const int CERT_SYSTEM_STORE_LOCATION_MASK = 16711680;

const int CERT_SYSTEM_STORE_LOCATION_SHIFT = 16;

const int CERT_SYSTEM_STORE_CURRENT_USER_ID = 1;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2;

const int CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4;

const int CERT_SYSTEM_STORE_SERVICES_ID = 5;

const int CERT_SYSTEM_STORE_USERS_ID = 6;

const int CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID = 10;

const int CERT_SYSTEM_STORE_CURRENT_USER = 65536;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072;

const int CERT_SYSTEM_STORE_CURRENT_SERVICE = 262144;

const int CERT_SYSTEM_STORE_SERVICES = 327680;

const int CERT_SYSTEM_STORE_USERS = 393216;

const int CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = 458752;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 524288;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = 589824;

const int CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS = 655360;

const String CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH = 'S';

const String CERT_EFSBLOB_REGPATH = 'S';

const String CERT_EFSBLOB_VALUE_NAME = 'E';

const String CERT_PROT_ROOT_FLAGS_REGPATH = 'S';

const String CERT_PROT_ROOT_FLAGS_VALUE_NAME = 'F';

const int CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1;

const int CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2;

const int CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4;

const int CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG = 8;

const int CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8;

const int CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG = 16;

const int CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG = 32;

const int CERT_PROT_ROOT_DISABLE_PEER_TRUST = 65536;

const String CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME = 'P';

const String CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A = 'PeerUsages';

const String CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A = '1.3.6.1.5.5.7.3.2';

const String CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH = 'S';

const String CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH = 'S';

const String CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH = 'S';

const String CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME = 'A';

const int CERT_TRUST_PUB_ALLOW_TRUST_MASK = 3;

const int CERT_TRUST_PUB_ALLOW_END_USER_TRUST = 0;

const int CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST = 1;

const int CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST = 2;

const int CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG = 256;

const int CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG = 512;

const String CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH = 'S';

const String CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME = 'R';

const String CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH = 'S';

const String CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME = 'D';

const String CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME = 'E';

const String CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME = 'D';

const String CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH = 'S';

const String CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = 'R';

const String CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME = 'S';

const String CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH = 'S';

const String CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME = 'R';

const String CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = 'S';

const String CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME = 'F';

const int CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG = 1;

const int CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG = 2;

const int CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG = 4;

const String CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = 'L';

const String CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = 'E';

const String CERT_AUTH_ROOT_CTL_FILENAME = 'a';

const String CERT_AUTH_ROOT_CTL_FILENAME_A = 'authroot.stl';

const String CERT_AUTH_ROOT_CAB_FILENAME = 'a';

const String CERT_AUTH_ROOT_SEQ_FILENAME = 'a';

const String CERT_AUTH_ROOT_CERT_EXT = '.';

const String CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = 'D';

const String CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = 'D';

const String CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = 'D';

const String CERT_DISALLOWED_CERT_CTL_FILENAME = 'd';

const String CERT_DISALLOWED_CERT_CTL_FILENAME_A = 'disallowedcert.stl';

const String CERT_DISALLOWED_CERT_CAB_FILENAME = 'd';

const String CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER = 'D';

const String CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME = 'P';

const String CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME = 'P';

const String CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME = 'P';

const String CERT_PIN_RULES_CTL_FILENAME = 'p';

const String CERT_PIN_RULES_CTL_FILENAME_A = 'pinrules.stl';

const String CERT_PIN_RULES_CAB_FILENAME = 'p';

const String CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER = 'P';

const int CERT_REGISTRY_STORE_REMOTE_FLAG = 65536;

const int CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072;

const int CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = 2147483648;

const int CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216;

const int CERT_REGISTRY_STORE_ROAMING_FLAG = 262144;

const int CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288;

const int CERT_REGISTRY_STORE_EXTERNAL_FLAG = 1048576;

const String CERT_IE_DIRTY_FLAGS_REGPATH = 'S';

const int CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536;

const int CERT_LDAP_STORE_SIGN_FLAG = 65536;

const int CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG = 131072;

const int CERT_LDAP_STORE_OPENED_FLAG = 262144;

const int CERT_LDAP_STORE_UNBIND_FLAG = 524288;

const String CRYPT_OID_OPEN_STORE_PROV_FUNC = 'CertDllOpenStoreProv';

const int CERT_STORE_PROV_EXTERNAL_FLAG = 1;

const int CERT_STORE_PROV_DELETED_FLAG = 2;

const int CERT_STORE_PROV_NO_PERSIST_FLAG = 4;

const int CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8;

const int CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG = 16;

const int CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG = 32;

const int CERT_STORE_PROV_SHARED_USER_FLAG = 64;

const int CERT_STORE_PROV_CLOSE_FUNC = 0;

const int CERT_STORE_PROV_READ_CERT_FUNC = 1;

const int CERT_STORE_PROV_WRITE_CERT_FUNC = 2;

const int CERT_STORE_PROV_DELETE_CERT_FUNC = 3;

const int CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4;

const int CERT_STORE_PROV_READ_CRL_FUNC = 5;

const int CERT_STORE_PROV_WRITE_CRL_FUNC = 6;

const int CERT_STORE_PROV_DELETE_CRL_FUNC = 7;

const int CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8;

const int CERT_STORE_PROV_READ_CTL_FUNC = 9;

const int CERT_STORE_PROV_WRITE_CTL_FUNC = 10;

const int CERT_STORE_PROV_DELETE_CTL_FUNC = 11;

const int CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12;

const int CERT_STORE_PROV_CONTROL_FUNC = 13;

const int CERT_STORE_PROV_FIND_CERT_FUNC = 14;

const int CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15;

const int CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16;

const int CERT_STORE_PROV_FIND_CRL_FUNC = 17;

const int CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18;

const int CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19;

const int CERT_STORE_PROV_FIND_CTL_FUNC = 20;

const int CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21;

const int CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22;

const int CERT_STORE_PROV_WRITE_ADD_FLAG = 1;

const int CERT_STORE_SAVE_AS_STORE = 1;

const int CERT_STORE_SAVE_AS_PKCS7 = 2;

const int CERT_STORE_SAVE_AS_PKCS12 = 3;

const int CERT_STORE_SAVE_TO_FILE = 1;

const int CERT_STORE_SAVE_TO_MEMORY = 2;

const int CERT_STORE_SAVE_TO_FILENAME_A = 3;

const int CERT_STORE_SAVE_TO_FILENAME_W = 4;

const int CERT_STORE_SAVE_TO_FILENAME = 4;

const int CERT_CLOSE_STORE_FORCE_FLAG = 1;

const int CERT_CLOSE_STORE_CHECK_FLAG = 2;

const int CERT_COMPARE_MASK = 65535;

const int CERT_COMPARE_SHIFT = 16;

const int CERT_COMPARE_ANY = 0;

const int CERT_COMPARE_SHA1_HASH = 1;

const int CERT_COMPARE_NAME = 2;

const int CERT_COMPARE_ATTR = 3;

const int CERT_COMPARE_MD5_HASH = 4;

const int CERT_COMPARE_PROPERTY = 5;

const int CERT_COMPARE_PUBLIC_KEY = 6;

const int CERT_COMPARE_HASH = 1;

const int CERT_COMPARE_NAME_STR_A = 7;

const int CERT_COMPARE_NAME_STR_W = 8;

const int CERT_COMPARE_KEY_SPEC = 9;

const int CERT_COMPARE_ENHKEY_USAGE = 10;

const int CERT_COMPARE_CTL_USAGE = 10;

const int CERT_COMPARE_SUBJECT_CERT = 11;

const int CERT_COMPARE_ISSUER_OF = 12;

const int CERT_COMPARE_EXISTING = 13;

const int CERT_COMPARE_SIGNATURE_HASH = 14;

const int CERT_COMPARE_KEY_IDENTIFIER = 15;

const int CERT_COMPARE_CERT_ID = 16;

const int CERT_COMPARE_CROSS_CERT_DIST_POINTS = 17;

const int CERT_COMPARE_PUBKEY_MD5_HASH = 18;

const int CERT_COMPARE_SUBJECT_INFO_ACCESS = 19;

const int CERT_COMPARE_HASH_STR = 20;

const int CERT_COMPARE_HAS_PRIVATE_KEY = 21;

const int CERT_FIND_ANY = 0;

const int CERT_FIND_SHA1_HASH = 65536;

const int CERT_FIND_MD5_HASH = 262144;

const int CERT_FIND_SIGNATURE_HASH = 917504;

const int CERT_FIND_KEY_IDENTIFIER = 983040;

const int CERT_FIND_HASH = 65536;

const int CERT_FIND_PROPERTY = 327680;

const int CERT_FIND_PUBLIC_KEY = 393216;

const int CERT_FIND_SUBJECT_NAME = 131079;

const int CERT_FIND_SUBJECT_ATTR = 196615;

const int CERT_FIND_ISSUER_NAME = 131076;

const int CERT_FIND_ISSUER_ATTR = 196612;

const int CERT_FIND_SUBJECT_STR_A = 458759;

const int CERT_FIND_SUBJECT_STR_W = 524295;

const int CERT_FIND_SUBJECT_STR = 524295;

const int CERT_FIND_ISSUER_STR_A = 458756;

const int CERT_FIND_ISSUER_STR_W = 524292;

const int CERT_FIND_ISSUER_STR = 524292;

const int CERT_FIND_KEY_SPEC = 589824;

const int CERT_FIND_ENHKEY_USAGE = 655360;

const int CERT_FIND_CTL_USAGE = 655360;

const int CERT_FIND_SUBJECT_CERT = 720896;

const int CERT_FIND_ISSUER_OF = 786432;

const int CERT_FIND_EXISTING = 851968;

const int CERT_FIND_CERT_ID = 1048576;

const int CERT_FIND_CROSS_CERT_DIST_POINTS = 1114112;

const int CERT_FIND_PUBKEY_MD5_HASH = 1179648;

const int CERT_FIND_SUBJECT_INFO_ACCESS = 1245184;

const int CERT_FIND_HASH_STR = 1310720;

const int CERT_FIND_HAS_PRIVATE_KEY = 1376256;

const int CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1;

const int CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2;

const int CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4;

const int CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8;

const int CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16;

const int CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32;

const int CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1;

const int CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2;

const int CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4;

const int CERT_FIND_NO_CTL_USAGE_FLAG = 8;

const int CERT_FIND_OR_CTL_USAGE_FLAG = 16;

const int CERT_FIND_VALID_CTL_USAGE_FLAG = 32;

const int CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = 2147483648;

const int CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG = 1073741824;

const int CTL_ENTRY_FROM_PROP_CHAIN_FLAG = 1;

const int CRL_FIND_ANY = 0;

const int CRL_FIND_ISSUED_BY = 1;

const int CRL_FIND_EXISTING = 2;

const int CRL_FIND_ISSUED_FOR = 3;

const int CRL_FIND_ISSUED_BY_AKI_FLAG = 1;

const int CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2;

const int CRL_FIND_ISSUED_BY_DELTA_FLAG = 4;

const int CRL_FIND_ISSUED_BY_BASE_FLAG = 8;

const int CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG = 16;

const int CERT_STORE_ADD_NEW = 1;

const int CERT_STORE_ADD_USE_EXISTING = 2;

const int CERT_STORE_ADD_REPLACE_EXISTING = 3;

const int CERT_STORE_ADD_ALWAYS = 4;

const int CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5;

const int CERT_STORE_ADD_NEWER = 6;

const int CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7;

const int CERT_STORE_CERTIFICATE_CONTEXT = 1;

const int CERT_STORE_CRL_CONTEXT = 2;

const int CERT_STORE_CTL_CONTEXT = 3;

const int CERT_STORE_ALL_CONTEXT_FLAG = 4294967295;

const int CERT_STORE_CERTIFICATE_CONTEXT_FLAG = 2;

const int CERT_STORE_CRL_CONTEXT_FLAG = 4;

const int CERT_STORE_CTL_CONTEXT_FLAG = 8;

const int CTL_ANY_SUBJECT_TYPE = 1;

const int CTL_CERT_SUBJECT_TYPE = 2;

const int CTL_FIND_ANY = 0;

const int CTL_FIND_SHA1_HASH = 1;

const int CTL_FIND_MD5_HASH = 2;

const int CTL_FIND_USAGE = 3;

const int CTL_FIND_SUBJECT = 4;

const int CTL_FIND_EXISTING = 5;

const int CTL_FIND_NO_LIST_ID_CBDATA = 4294967295;

const int CTL_FIND_SAME_USAGE_FLAG = 1;

const int CERT_STORE_CTRL_RESYNC = 1;

const int CERT_STORE_CTRL_NOTIFY_CHANGE = 2;

const int CERT_STORE_CTRL_COMMIT = 3;

const int CERT_STORE_CTRL_AUTO_RESYNC = 4;

const int CERT_STORE_CTRL_CANCEL_NOTIFY = 5;

const int CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG = 1;

const int CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1;

const int CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2;

const int CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096;

const int CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1;

const int CERT_CREATE_CONTEXT_SORTED_FLAG = 2;

const int CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4;

const int CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8;

const int CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1;

const int CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2;

const int CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4;

const int CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8;

const int CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1;

const String CERT_PHYSICAL_STORE_DEFAULT_NAME = '.';

const String CERT_PHYSICAL_STORE_GROUP_POLICY_NAME = '.';

const String CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME = '.';

const String CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME = '.';

const String CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME = '.';

const String CERT_PHYSICAL_STORE_ENTERPRISE_NAME = '.';

const String CERT_PHYSICAL_STORE_AUTH_ROOT_NAME = '.';

const String CERT_PHYSICAL_STORE_SMART_CARD_NAME = '.';

const String CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC =
    'CertDllOpenSystemStoreProv';

const String CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC =
    'CertDllRegisterSystemStore';

const String CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC =
    'CertDllUnregisterSystemStore';

const String CRYPT_OID_ENUM_SYSTEM_STORE_FUNC = 'CertDllEnumSystemStore';

const String CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC =
    'CertDllRegisterPhysicalStore';

const String CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC =
    'CertDllUnregisterPhysicalStore';

const String CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC = 'CertDllEnumPhysicalStore';

const String CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME = 'S';

const int CMSG_TRUSTED_SIGNER_FLAG = 1;

const int CMSG_SIGNER_ONLY_FLAG = 2;

const int CMSG_USE_SIGNER_INDEX_FLAG = 4;

const int CMSG_CMS_ENCAPSULATED_CTL_FLAG = 32768;

const int CMSG_ENCODE_SORTED_CTL_FLAG = 1;

const int CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 2;

const int CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 1;

const int CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 2;

const int CERT_VERIFY_NO_TIME_CHECK_FLAG = 4;

const int CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 8;

const int CERT_VERIFY_UPDATED_CTL_FLAG = 1;

const int CERT_CONTEXT_REVOCATION_TYPE = 1;

const int CERT_VERIFY_REV_CHAIN_FLAG = 1;

const int CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 2;

const int CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG = 4;

const int CERT_VERIFY_REV_SERVER_OCSP_FLAG = 8;

const int CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG = 16;

const int CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG = 32;

const int CERT_UNICODE_IS_RDN_ATTRS_FLAG = 1;

const int CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 2;

const int CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1;

const int CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2;

const int CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3;

const int CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE = 4;

const int CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1;

const int CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2;

const int CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3;

const int CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL = 4;

const int CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG = 1;

const int CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG = 2;

const int CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG = 4;

const int CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG = 8;

const String CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC =
    'CryptDllExtractEncodedSignatureParameters';

const String CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC = 'CryptDllSignAndEncodeHash';

const String CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC =
    'CryptDllVerifyEncodedSignature';

const int CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1;

const int CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2;

const int CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1;

const int CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2;

const String CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC =
    'CryptDllExportPublicKeyInfoEx';

const String CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC =
    'CryptDllExportPublicKeyInfoEx2';

const String CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC =
    'CryptDllExportPublicKeyInfoFromBCryptKeyHandle';

const String CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC =
    'CryptDllImportPublicKeyInfoEx';

const String CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC =
    'CryptDllImportPublicKeyInfoEx2';

const int CRYPT_ACQUIRE_CACHE_FLAG = 1;

const int CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2;

const int CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4;

const int CRYPT_ACQUIRE_NO_HEALING = 8;

const int CRYPT_ACQUIRE_SILENT_FLAG = 64;

const int CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG = 128;

const int CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK = 458752;

const int CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG = 65536;

const int CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG = 131072;

const int CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG = 262144;

const int CRYPT_FIND_USER_KEYSET_FLAG = 1;

const int CRYPT_FIND_MACHINE_KEYSET_FLAG = 2;

const int CRYPT_FIND_SILENT_KEYSET_FLAG = 64;

const String CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC =
    'CryptDllImportPrivateKeyInfoEx';

const String CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC =
    'CryptDllExportPrivateKeyInfoEx';

const int CRYPT_DELETE_KEYSET = 16;

const int CERT_SIMPLE_NAME_STR = 1;

const int CERT_OID_NAME_STR = 2;

const int CERT_X500_NAME_STR = 3;

const int CERT_XML_NAME_STR = 4;

const int CERT_NAME_STR_SEMICOLON_FLAG = 1073741824;

const int CERT_NAME_STR_NO_PLUS_FLAG = 536870912;

const int CERT_NAME_STR_NO_QUOTING_FLAG = 268435456;

const int CERT_NAME_STR_CRLF_FLAG = 134217728;

const int CERT_NAME_STR_COMMA_FLAG = 67108864;

const int CERT_NAME_STR_REVERSE_FLAG = 33554432;

const int CERT_NAME_STR_FORWARD_FLAG = 16777216;

const int CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536;

const int CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072;

const int CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144;

const int CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288;

const int CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576;

const int CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152;

const int CERT_NAME_EMAIL_TYPE = 1;

const int CERT_NAME_RDN_TYPE = 2;

const int CERT_NAME_ATTR_TYPE = 3;

const int CERT_NAME_SIMPLE_DISPLAY_TYPE = 4;

const int CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5;

const int CERT_NAME_DNS_TYPE = 6;

const int CERT_NAME_URL_TYPE = 7;

const int CERT_NAME_UPN_TYPE = 8;

const int CERT_NAME_ISSUER_FLAG = 1;

const int CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536;

const int CERT_NAME_SEARCH_ALL_NAMES_FLAG = 2;

const int CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 1;

const int CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 2;

const int CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 4;

const int CRYPT_MESSAGE_SILENT_KEYSET_FLAG = 64;

const int CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 4;

const int CERT_QUERY_OBJECT_FILE = 1;

const int CERT_QUERY_OBJECT_BLOB = 2;

const int CERT_QUERY_CONTENT_CERT = 1;

const int CERT_QUERY_CONTENT_CTL = 2;

const int CERT_QUERY_CONTENT_CRL = 3;

const int CERT_QUERY_CONTENT_SERIALIZED_STORE = 4;

const int CERT_QUERY_CONTENT_SERIALIZED_CERT = 5;

const int CERT_QUERY_CONTENT_SERIALIZED_CTL = 6;

const int CERT_QUERY_CONTENT_SERIALIZED_CRL = 7;

const int CERT_QUERY_CONTENT_PKCS7_SIGNED = 8;

const int CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 9;

const int CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 10;

const int CERT_QUERY_CONTENT_PKCS10 = 11;

const int CERT_QUERY_CONTENT_PFX = 12;

const int CERT_QUERY_CONTENT_CERT_PAIR = 13;

const int CERT_QUERY_CONTENT_PFX_AND_LOAD = 14;

const int CERT_QUERY_CONTENT_FLAG_CERT = 2;

const int CERT_QUERY_CONTENT_FLAG_CTL = 4;

const int CERT_QUERY_CONTENT_FLAG_CRL = 8;

const int CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 16;

const int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 32;

const int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 64;

const int CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 128;

const int CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 256;

const int CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 512;

const int CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 1024;

const int CERT_QUERY_CONTENT_FLAG_PKCS10 = 2048;

const int CERT_QUERY_CONTENT_FLAG_PFX = 4096;

const int CERT_QUERY_CONTENT_FLAG_CERT_PAIR = 8192;

const int CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD = 16384;

const int CERT_QUERY_CONTENT_FLAG_ALL = 16382;

const int CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT = 818;

const int CERT_QUERY_FORMAT_BINARY = 1;

const int CERT_QUERY_FORMAT_BASE64_ENCODED = 2;

const int CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED = 3;

const int CERT_QUERY_FORMAT_FLAG_BINARY = 2;

const int CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 4;

const int CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED = 8;

const int CERT_QUERY_FORMAT_FLAG_ALL = 14;

const String SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC =
    'SchemeDllRetrieveEncodedObject';

const String SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC =
    'SchemeDllRetrieveEncodedObjectW';

const String CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC =
    'ContextDllCreateObjectContext';

const int CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 1;

const int CRYPT_CACHE_ONLY_RETRIEVAL = 2;

const int CRYPT_WIRE_ONLY_RETRIEVAL = 4;

const int CRYPT_DONT_CACHE_RESULT = 8;

const int CRYPT_ASYNC_RETRIEVAL = 16;

const int CRYPT_STICKY_CACHE_RETRIEVAL = 4096;

const int CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL = 8192;

const int CRYPT_OFFLINE_CHECK_RETRIEVAL = 16384;

const int CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE = 32768;

const int CRYPT_LDAP_SIGN_RETRIEVAL = 65536;

const int CRYPT_NO_AUTH_RETRIEVAL = 131072;

const int CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL = 262144;

const int CRYPT_AIA_RETRIEVAL = 524288;

const int CRYPT_HTTP_POST_RETRIEVAL = 1048576;

const int CRYPT_PROXY_CACHE_RETRIEVAL = 2097152;

const int CRYPT_NOT_MODIFIED_RETRIEVAL = 4194304;

const int CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL = 8388608;

const int CRYPT_RANDOM_QUERY_STRING_RETRIEVAL = 67108864;

const int CRYPT_ENABLE_FILE_RETRIEVAL = 134217728;

const int CRYPT_CREATE_NEW_FLUSH_ENTRY = 268435456;

const int CRYPT_VERIFY_CONTEXT_SIGNATURE = 32;

const int CRYPT_VERIFY_DATA_HASH = 64;

const int CRYPT_KEEP_TIME_VALID = 128;

const int CRYPT_DONT_VERIFY_SIGNATURE = 256;

const int CRYPT_DONT_CHECK_TIME_VALIDITY = 512;

const int CRYPT_CHECK_FRESHNESS_TIME_VALIDITY = 1024;

const int CRYPT_ACCUMULATIVE_TIMEOUT = 2048;

const int CRYPT_OCSP_ONLY_RETRIEVAL = 16777216;

const int CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL = 33554432;

const int CRYPTNET_URL_CACHE_PRE_FETCH_NONE = 0;

const int CRYPTNET_URL_CACHE_PRE_FETCH_BLOB = 1;

const int CRYPTNET_URL_CACHE_PRE_FETCH_CRL = 2;

const int CRYPTNET_URL_CACHE_PRE_FETCH_OCSP = 3;

const int CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB = 5;

const int CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB = 6;

const int CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB = 7;

const int CRYPTNET_URL_CACHE_DEFAULT_FLUSH = 0;

const int CRYPTNET_URL_CACHE_DISABLE_FLUSH = 4294967295;

const int CRYPTNET_URL_CACHE_RESPONSE_NONE = 0;

const int CRYPTNET_URL_CACHE_RESPONSE_HTTP = 1;

const int CRYPTNET_URL_CACHE_RESPONSE_VALIDATED = 32768;

const int CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH = 4096;

const int CRYPT_GET_URL_FROM_PROPERTY = 1;

const int CRYPT_GET_URL_FROM_EXTENSION = 2;

const int CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 4;

const int CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 8;

const String URL_OID_GET_OBJECT_URL_FUNC = 'UrlDllGetObjectUrl';

const String TIME_VALID_OID_GET_OBJECT_FUNC = 'TimeValidDllGetObject';

const String TIME_VALID_OID_FLUSH_OBJECT_FUNC = 'TimeValidDllFlushObject';

const int CERT_CREATE_SELFSIGN_NO_SIGN = 1;

const int CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2;

const int CRYPT_KEYID_MACHINE_FLAG = 32;

const int CRYPT_KEYID_ALLOC_FLAG = 32768;

const int CRYPT_KEYID_DELETE_FLAG = 16;

const int CRYPT_KEYID_SET_NEW_FLAG = 8192;

const String CERT_CHAIN_CONFIG_REGPATH = 'S';

const String CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 104857600;

const String CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME = 'C';

const String CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME = 'D';

const String CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME = 'D';

const String CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME =
    'D';

const String CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT = 5;

const String CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT = 3;

const String CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT = 100000;

const String CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT = 10;

const String CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME = 'O';

const int CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT = 43200;

const String CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME = 'D';

const String CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME = 'S';

const String CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME = 'D';

const String CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME = 'M';

const int CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT = 5;

const int CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE = 4294967295;

const String CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME = 'S';

const String CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME = 'E';

const int CERT_CHAIN_ENABLE_MD2_MD4_FLAG = 1;

const int CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG = 2;

const int CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG = 4;

const int CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG = 8;

const String CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME = 'M';

const int CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT = 1023;

const int CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295;

const String CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME = 'W';

const int CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT = 129067776000000000;

const String CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME = 'W';

const String CERT_CHAIN_DEFAULT_CONFIG_SUBDIR = 'D';

const String CERT_CHAIN_WEAK_PREFIX_NAME = 'W';

const String CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME = 'T';

const String CERT_CHAIN_WEAK_ALL_CONFIG_NAME = 'A';

const String CERT_CHAIN_WEAK_FLAGS_NAME = 'F';

const String CERT_CHAIN_WEAK_HYGIENE_NAME = 'H';

const String CERT_CHAIN_WEAK_AFTER_TIME_NAME = 'A';

const String CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME = 'F';

const String CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME = 'T';

const String CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME = 'M';

const String CERT_CHAIN_WEAK_SHA256_ALLOW_NAME = 'S';

const int CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE = 4294967295;

const int CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG = 2147483648;

const int CERT_CHAIN_DISABLE_ECC_PARA_FLAG = 16;

const int CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG = 65536;

const int CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG = 131072;

const int CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG = 262144;

const int CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG = 1048576;

const int CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG = 2097152;

const int CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG = 4194304;

const int CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG = 8388608;

const int CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG = 16777216;

const int CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG = 33554432;

const int CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG = 67108864;

const int CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG = 134217728;

const int CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG = 268435456;

const int CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG = 536870912;

const int CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG = 1073741824;

const int CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG = 4096;

const int CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG = 8192;

const int CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG = 16384;

const int CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG = 32768;

const int CERT_CHAIN_DISABLE_WEAK_FLAGS = 215285776;

const int CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS = 12288;

const int CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS = 49152;

const int CERT_CHAIN_ENABLE_HYGIENE_FLAGS = 857866240;

const int CERT_CHAIN_MOTW_WEAK_FLAGS = 1786773504;

const int CERT_CHAIN_OPT_IN_WEAK_FLAGS = 262144;

const int CERT_CHAIN_AUTO_CURRENT_USER = 1;

const int CERT_CHAIN_AUTO_LOCAL_MACHINE = 2;

const int CERT_CHAIN_AUTO_IMPERSONATED = 3;

const int CERT_CHAIN_AUTO_PROCESS_INFO = 4;

const int CERT_CHAIN_AUTO_PINRULE_INFO = 5;

const int CERT_CHAIN_AUTO_NETWORK_INFO = 6;

const int CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE = 7;

const int CERT_CHAIN_AUTO_HPKP_RULE_INFO = 8;

const String CERT_CHAIN_AUTO_FLAGS_VALUE_NAME = 'A';

const int CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG = 1;

const int CERT_CHAIN_AUTO_LOG_CREATE_FLAG = 2;

const int CERT_CHAIN_AUTO_LOG_FREE_FLAG = 4;

const int CERT_CHAIN_AUTO_LOG_FLUSH_FLAG = 8;

const int CERT_CHAIN_AUTO_LOG_FLAGS = 14;

const String CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME = 'A';

const int CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT = 300;

const String CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME = 'A';

const int CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT = 1800;

const String CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME = 'A';

const String CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME = 'D';

const String CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT = 600;

const String CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME =
    'S';

const int CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT = 15000;

const String CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT = 14400;

const String CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT = 120;

const String CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT = 60;

const String CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT = 5;

const String CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME = 'S';

const int CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT = 3600;

const String CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME = 'C';

const int CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT = 500;

const int CRYPTNET_OCSP_AFTER_CRL_DISABLE = 4294967295;

const String CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME = 'C';

const int CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT = 2419200;

const String CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME = 'C';

const int CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT = 3600;

const String CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME = 'C';

const int CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT = 1209600;

const String CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME =
    'C';

const int CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT = 1209600;

const String CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME =
    'C';

const int CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT = 10;

const String
    CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME = 'C';

const int CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT = 20;

const String
    CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME =
    'C';

const int
    CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT =
    3600;

const String
    CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME =
    'C';

const int
    CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT =
    10;

const String
    CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME =
    'C';

const int
    CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT =
    14400;

const String
    CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME =
    'C';

const int
    CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT =
    1800;

const String
    CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME =
    'C';

const int
    CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT =
    1800;

const String CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME = 'C';

const int CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT = 600;

const int CRYPTNET_PRE_FETCH_TRIGGER_DISABLE = 4294967295;

const String CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME =
    'C';

const int CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT = 60;

const String CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME = 'C';

const int CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT = 300;

const String CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH = 'S';

const String CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME = 'P';

const String CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME = 'P';

const String CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME = 'D';

const String CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME = 'L';

const String CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME = 'T';

const int CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT = 300;

const String CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME = 'M';

const int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT = 7200;

const int CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN = 300;

const String
    CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME = 'P';

const int CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT =
    3600;

const String CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME =
    'P';

const int CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT = 300;

const String CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME =
    'M';

const int CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT = 300;

const String CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME =
    'M';

const int CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT = 300;

const String CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH = 'S';

const String CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME = 'C';

const int CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT = 15000;

const String
    CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME =
    'C';

const int
    CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT =
    20000;

const String CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME = 'E';

const String CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME = 'E';

const String CERT_RETR_BEHAVIOR_FILE_VALUE_NAME = 'A';

const String CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME = 'D';

const String CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME = 'C';

const int CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT = 50;

const int CRYPTNET_CRL_BEFORE_OCSP_ENABLE = 4294967295;

const String CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME = 'D';

const String CERT_CHAIN_OPTIONS_VALUE_NAME = 'O';

const int CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL = 2;

const int CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL = 4;

const String CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME = 'C';

const int CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT = 168;

const String CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME = 'C';

const int CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT = 12;

const int CERT_CHAIN_CACHE_END_CERT = 1;

const int CERT_CHAIN_THREAD_STORE_SYNC = 2;

const int CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 4;

const int CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 8;

const int CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 16;

const int CERT_CHAIN_ENABLE_SHARE_STORE = 32;

const int CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG = 1;

const int CERT_TRUST_NO_ERROR = 0;

const int CERT_TRUST_IS_NOT_TIME_VALID = 1;

const int CERT_TRUST_IS_NOT_TIME_NESTED = 2;

const int CERT_TRUST_IS_REVOKED = 4;

const int CERT_TRUST_IS_NOT_SIGNATURE_VALID = 8;

const int CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 16;

const int CERT_TRUST_IS_UNTRUSTED_ROOT = 32;

const int CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 64;

const int CERT_TRUST_IS_CYCLIC = 128;

const int CERT_TRUST_INVALID_EXTENSION = 256;

const int CERT_TRUST_INVALID_POLICY_CONSTRAINTS = 512;

const int CERT_TRUST_INVALID_BASIC_CONSTRAINTS = 1024;

const int CERT_TRUST_INVALID_NAME_CONSTRAINTS = 2048;

const int CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT = 4096;

const int CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT = 8192;

const int CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT = 16384;

const int CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT = 32768;

const int CERT_TRUST_IS_OFFLINE_REVOCATION = 16777216;

const int CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY = 33554432;

const int CERT_TRUST_IS_EXPLICIT_DISTRUST = 67108864;

const int CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT = 134217728;

const int CERT_TRUST_HAS_WEAK_SIGNATURE = 1048576;

const int CERT_TRUST_HAS_WEAK_HYGIENE = 2097152;

const int CERT_TRUST_IS_PARTIAL_CHAIN = 65536;

const int CERT_TRUST_CTL_IS_NOT_TIME_VALID = 131072;

const int CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 262144;

const int CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 524288;

const int CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 1;

const int CERT_TRUST_HAS_KEY_MATCH_ISSUER = 2;

const int CERT_TRUST_HAS_NAME_MATCH_ISSUER = 4;

const int CERT_TRUST_IS_SELF_SIGNED = 8;

const int CERT_TRUST_AUTO_UPDATE_CA_REVOCATION = 16;

const int CERT_TRUST_AUTO_UPDATE_END_REVOCATION = 32;

const int CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL = 64;

const int CERT_TRUST_IS_KEY_ROLLOVER = 128;

const int CERT_TRUST_SSL_HANDSHAKE_OCSP = 262144;

const int CERT_TRUST_SSL_TIME_VALID_OCSP = 524288;

const int CERT_TRUST_SSL_RECONNECT_OCSP = 1048576;

const int CERT_TRUST_HAS_PREFERRED_ISSUER = 256;

const int CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY = 512;

const int CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS = 1024;

const int CERT_TRUST_IS_PEER_TRUSTED = 2048;

const int CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED = 4096;

const int CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE = 8192;

const int CERT_TRUST_IS_CA_TRUSTED = 16384;

const int CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE = 32768;

const int CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE = 131072;

const int CERT_TRUST_BEFORE_DISALLOWED_CA_FILETIME = 2097152;

const int CERT_TRUST_IS_COMPLEX_CHAIN = 65536;

const int CERT_TRUST_SSL_TIME_VALID = 16777216;

const int CERT_TRUST_NO_TIME_CHECK = 33554432;

const int USAGE_MATCH_TYPE_AND = 0;

const int USAGE_MATCH_TYPE_OR = 1;

const int CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG = 1;

const int CERT_CHAIN_REVOCATION_CHECK_END_CERT = 268435456;

const int CERT_CHAIN_REVOCATION_CHECK_CHAIN = 536870912;

const int CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1073741824;

const int CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 2147483648;

const int CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT = 134217728;

const int CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT = 67108864;

const int CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING = 64;

const int CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS = 128;

const int CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE = 256;

const int CERT_CHAIN_TIMESTAMP_TIME = 512;

const int CERT_CHAIN_ENABLE_PEER_TRUST = 1024;

const int CERT_CHAIN_DISABLE_MY_PEER_TRUST = 2048;

const int CERT_CHAIN_DISABLE_MD2_MD4 = 4096;

const int CERT_CHAIN_DISABLE_AIA = 8192;

const int CERT_CHAIN_HAS_MOTW = 16384;

const int CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT = 32768;

const int CERT_CHAIN_OPT_IN_WEAK_SIGNATURE = 65536;

const int CERT_CHAIN_ENABLE_DISALLOWED_CA = 131072;

const int CERT_CHAIN_FIND_BY_ISSUER = 1;

const int CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1;

const int CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2;

const int CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4;

const int CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8;

const int CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384;

const int CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768;

const int CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1;

const int CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2;

const int CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4;

const int CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG = 8;

const int CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7;

const int CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16;

const int CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32;

const int CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG = 64;

const int CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG = 128;

const int CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256;

const int CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512;

const int CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024;

const int CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048;

const int CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840;

const int CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768;

const int CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384;

const int CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG = 8192;

const int CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG = 4096;

const int CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG = 134217728;

const String CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC =
    'CertDllVerifyCertificateChainPolicy';

const int AUTHTYPE_CLIENT = 1;

const int AUTHTYPE_SERVER = 2;

const int BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 2147483648;

const int BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 1073741824;

const int MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 65536;

const int MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 131072;

const int MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 262144;

const int SSL_F12_ERROR_TEXT_LENGTH = 256;

const int CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL = 0;

const int CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL = 1;

const int CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL = 2;

const int CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY = 0;

const int CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY = 1;

const int CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY = 2;

const int SSL_HPKP_PKP_HEADER_INDEX = 0;

const int SSL_HPKP_PKP_RO_HEADER_INDEX = 1;

const int SSL_HPKP_HEADER_COUNT = 2;

const int SSL_KEY_PIN_ERROR_TEXT_LENGTH = 512;

const int CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR = -2;

const int CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR = -1;

const int CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS = 0;

const int CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING = 1;

const int CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING = 2;

const int CRYPT_STRING_BASE64HEADER = 0;

const int CRYPT_STRING_BASE64 = 1;

const int CRYPT_STRING_BINARY = 2;

const int CRYPT_STRING_BASE64REQUESTHEADER = 3;

const int CRYPT_STRING_HEX = 4;

const int CRYPT_STRING_HEXASCII = 5;

const int CRYPT_STRING_BASE64_ANY = 6;

const int CRYPT_STRING_ANY = 7;

const int CRYPT_STRING_HEX_ANY = 8;

const int CRYPT_STRING_BASE64X509CRLHEADER = 9;

const int CRYPT_STRING_HEXADDR = 10;

const int CRYPT_STRING_HEXASCIIADDR = 11;

const int CRYPT_STRING_HEXRAW = 12;

const int CRYPT_STRING_BASE64URI = 13;

const int CRYPT_STRING_ENCODEMASK = 255;

const int CRYPT_STRING_RESERVED100 = 256;

const int CRYPT_STRING_RESERVED200 = 512;

const int CRYPT_STRING_PERCENTESCAPE = 134217728;

const int CRYPT_STRING_HASHDATA = 268435456;

const int CRYPT_STRING_STRICT = 536870912;

const int CRYPT_STRING_NOCRLF = 1073741824;

const int CRYPT_STRING_NOCR = 2147483648;

const String szOID_PKCS_12_PbeIds = '1.2.840.113549.1.12.1';

const String szOID_PKCS_12_pbeWithSHA1And128BitRC4 = '1.2.840.113549.1.12.1.1';

const String szOID_PKCS_12_pbeWithSHA1And40BitRC4 = '1.2.840.113549.1.12.1.2';

const String szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES =
    '1.2.840.113549.1.12.1.3';

const String szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES =
    '1.2.840.113549.1.12.1.4';

const String szOID_PKCS_12_pbeWithSHA1And128BitRC2 = '1.2.840.113549.1.12.1.5';

const String szOID_PKCS_12_pbeWithSHA1And40BitRC2 = '1.2.840.113549.1.12.1.6';

const String szOID_PKCS_5_PBKDF2 = '1.2.840.113549.1.5.12';

const String szOID_PKCS_5_PBES2 = '1.2.840.113549.1.5.13';

const int PKCS12_IMPORT_SILENT = 64;

const int CRYPT_USER_KEYSET = 4096;

const int PKCS12_PREFER_CNG_KSP = 256;

const int PKCS12_ALWAYS_CNG_KSP = 512;

const int PKCS12_ONLY_CERTIFICATES = 1024;

const int PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES = 2048;

const int PKCS12_ALLOW_OVERWRITE_KEY = 16384;

const int PKCS12_NO_PERSIST_KEY = 32768;

const int PKCS12_VIRTUAL_ISOLATION_KEY = 65536;

const int PKCS12_IMPORT_RESERVED_MASK = 4294901760;

const int PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS = 33360;

const int PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE = 0;

const String PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME = 'P';

const String PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME = 'P';

const int REPORT_NO_PRIVATE_KEY = 1;

const int REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY = 2;

const int EXPORT_PRIVATE_KEYS = 4;

const int PKCS12_INCLUDE_EXTENDED_PROPERTIES = 16;

const int PKCS12_PROTECT_TO_DOMAIN_SIDS = 32;

const int PKCS12_EXPORT_SILENT = 64;

const int PKCS12_EXPORT_PBES2_PARAMS = 128;

const int PKCS12_DISABLE_ENCRYPT_CERTIFICATES = 256;

const int PKCS12_ENCRYPT_CERTIFICATES = 512;

const int PKCS12_EXPORT_ECC_CURVE_PARAMETERS = 4096;

const int PKCS12_EXPORT_ECC_CURVE_OID = 8192;

const int PKCS12_EXPORT_RESERVED_MASK = 4294901760;

const String PKCS12_PBKDF2_ID_HMAC_SHA1 = '1.2.840.113549.2.7';

const String PKCS12_PBKDF2_ID_HMAC_SHA256 = '1.2.840.113549.2.9';

const String PKCS12_PBKDF2_ID_HMAC_SHA384 = '1.2.840.113549.2.10';

const String PKCS12_PBKDF2_ID_HMAC_SHA512 = '1.2.840.113549.2.11';

const String PKCS12_PBES2_ALG_AES256_SHA256 = 'A';

const String PKCS12_CONFIG_REGPATH = 'S';

const String PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME = 'E';

const int CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG = 1;

const int CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG = 2;

const int CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG = 1;

const int CERT_SELECT_MAX_PARA = 500;

const int CERT_SELECT_BY_ENHKEY_USAGE = 1;

const int CERT_SELECT_BY_KEY_USAGE = 2;

const int CERT_SELECT_BY_POLICY_OID = 3;

const int CERT_SELECT_BY_PROV_NAME = 4;

const int CERT_SELECT_BY_EXTENSION = 5;

const int CERT_SELECT_BY_SUBJECT_HOST_NAME = 6;

const int CERT_SELECT_BY_ISSUER_ATTR = 7;

const int CERT_SELECT_BY_SUBJECT_ATTR = 8;

const int CERT_SELECT_BY_ISSUER_NAME = 9;

const int CERT_SELECT_BY_PUBLIC_KEY = 10;

const int CERT_SELECT_BY_TLS_SIGNATURES = 11;

const int CERT_SELECT_BY_ISSUER_DISPLAYNAME = 12;

const int CERT_SELECT_BY_FRIENDLYNAME = 13;

const int CERT_SELECT_BY_THUMBPRINT = 14;

const int CERT_SELECT_LAST = 11;

const int CERT_SELECT_MAX = 33;

const int CERT_SELECT_ALLOW_EXPIRED = 1;

const int CERT_SELECT_TRUSTED_ROOT = 2;

const int CERT_SELECT_DISALLOW_SELFSIGNED = 4;

const int CERT_SELECT_HAS_PRIVATE_KEY = 8;

const int CERT_SELECT_HAS_KEY_FOR_SIGNATURE = 16;

const int CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE = 32;

const int CERT_SELECT_HARDWARE_ONLY = 64;

const int CERT_SELECT_ALLOW_DUPLICATES = 128;

const int CERT_SELECT_IGNORE_AUTOSELECT = 256;

const int TIMESTAMP_VERSION = 1;

const int TIMESTAMP_STATUS_GRANTED = 0;

const int TIMESTAMP_STATUS_GRANTED_WITH_MODS = 1;

const int TIMESTAMP_STATUS_REJECTED = 2;

const int TIMESTAMP_STATUS_WAITING = 3;

const int TIMESTAMP_STATUS_REVOCATION_WARNING = 4;

const int TIMESTAMP_STATUS_REVOKED = 5;

const int TIMESTAMP_FAILURE_BAD_ALG = 0;

const int TIMESTAMP_FAILURE_BAD_REQUEST = 2;

const int TIMESTAMP_FAILURE_BAD_FORMAT = 5;

const int TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE = 14;

const int TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED = 15;

const int TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED = 16;

const int TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE = 17;

const int TIMESTAMP_FAILURE_SYSTEM_FAILURE = 25;

const int TIMESTAMP_DONT_HASH_DATA = 1;

const int TIMESTAMP_VERIFY_CONTEXT_SIGNATURE = 32;

const int TIMESTAMP_NO_AUTH_RETRIEVAL = 131072;

const int CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE = 1;

const int CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE = 32;

const int CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE = 33;

const int CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE = 65535;

const String SSL_OBJECT_LOCATOR_PFX_FUNC = 'SslObjectLocatorInitializePfx';

const String SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC =
    'SslObjectLocatorInitializeIssuerList';

const String SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC =
    'SslObjectLocatorInitializeCertValidationConfig';

const int CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN = 1;

const int CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP = 2;

const int CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT = 3;

const int CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD = 4;

const int CERT_FILE_HASH_USE_TYPE = 1;

const int CERT_TIMESTAMP_HASH_USE_TYPE = 2;

const String szFORCE_KEY_PROTECTION = 'ForceKeyProtection';

const int dwFORCE_KEY_PROTECTION_DISABLED = 0;

const int dwFORCE_KEY_PROTECTION_USER_SELECT = 1;

const int dwFORCE_KEY_PROTECTION_HIGH = 2;

const int CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1;

const int CRYPTPROTECT_PROMPT_ON_PROTECT = 2;

const int CRYPTPROTECT_PROMPT_RESERVED = 4;

const int CRYPTPROTECT_PROMPT_STRONG = 8;

const int CRYPTPROTECT_PROMPT_REQUIRE_STRONG = 16;

const int CRYPTPROTECT_UI_FORBIDDEN = 1;

const int CRYPTPROTECT_LOCAL_MACHINE = 4;

const int CRYPTPROTECT_CRED_SYNC = 8;

const int CRYPTPROTECT_AUDIT = 16;

const int CRYPTPROTECT_NO_RECOVERY = 32;

const int CRYPTPROTECT_VERIFY_PROTECTION = 64;

const int CRYPTPROTECT_CRED_REGENERATE = 128;

const int CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 268435455;

const int CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 4294967295;

const int CRYPTPROTECTMEMORY_BLOCK_SIZE = 16;

const int CRYPTPROTECTMEMORY_SAME_PROCESS = 0;

const int CRYPTPROTECTMEMORY_CROSS_PROCESS = 1;

const int CRYPTPROTECTMEMORY_SAME_LOGON = 2;

const int WINEFS_SETUSERKEY_SET_CAPABILITIES = 1;

const int EFS_COMPATIBILITY_VERSION_NCRYPT_PROTECTOR = 5;

const int EFS_COMPATIBILITY_VERSION_PFILE_PROTECTOR = 6;

const int EFS_SUBVER_UNKNOWN = 0;

const int EFS_EFS_SUBVER_EFS_CERT = 1;

const int EFS_PFILE_SUBVER_RMS = 2;

const int EFS_PFILE_SUBVER_APPX = 3;

const int MAX_SID_SIZE = 256;

const int EFS_METADATA_ADD_USER = 1;

const int EFS_METADATA_REMOVE_USER = 2;

const int EFS_METADATA_REPLACE_USER = 4;

const int EFS_METADATA_GENERAL_OP = 8;

const int __REQUIRED_RPCNDR_H_VERSION__ = 501;

const int __REQUIRED_RPCSAL_H_VERSION__ = 100;

const int __RPCNDR_H_VERSION__ = 501;

const int __RPCSAL_H_VERSION__ = 100;

const int NDR_CHAR_REP_MASK = 15;

const int NDR_INT_REP_MASK = 240;

const int NDR_FLOAT_REP_MASK = 65280;

const int NDR_LITTLE_ENDIAN = 16;

const int NDR_BIG_ENDIAN = 0;

const int NDR_IEEE_FLOAT = 0;

const int NDR_VAX_FLOAT = 256;

const int NDR_IBM_FLOAT = 768;

const int NDR_ASCII_CHAR = 0;

const int NDR_EBCDIC_CHAR = 1;

const int NDR_LOCAL_DATA_REPRESENTATION = 16;

const int NDR_LOCAL_ENDIAN = 16;

const int TARGET_IS_NT1012_OR_LATER = 1;

const int TARGET_IS_NT102_OR_LATER = 1;

const int TARGET_IS_NT100_OR_LATER = 1;

const int TARGET_IS_NT63_OR_LATER = 1;

const int TARGET_IS_NT62_OR_LATER = 1;

const int TARGET_IS_NT61_OR_LATER = 1;

const int TARGET_IS_NT60_OR_LATER = 1;

const int TARGET_IS_NT51_OR_LATER = 1;

const int TARGET_IS_NT50_OR_LATER = 1;

const int TARGET_IS_NT40_OR_LATER = 1;

const int TARGET_IS_NT351_OR_WIN95_OR_LATER = 1;

const int cbNDRContext = 20;

const int USER_MARSHAL_CB_SIGNATURE = 1431523907;

const int USER_CALL_IS_ASYNC = 256;

const int USER_CALL_NEW_CORRELATION_DESC = 512;

const int MIDL_WINRT_TYPE_SERIALIZATION_INFO_CURRENT_VERSION = 1;

const int USER_MARSHAL_FC_BYTE = 1;

const int USER_MARSHAL_FC_CHAR = 2;

const int USER_MARSHAL_FC_SMALL = 3;

const int USER_MARSHAL_FC_USMALL = 4;

const int USER_MARSHAL_FC_WCHAR = 5;

const int USER_MARSHAL_FC_SHORT = 6;

const int USER_MARSHAL_FC_USHORT = 7;

const int USER_MARSHAL_FC_LONG = 8;

const int USER_MARSHAL_FC_ULONG = 9;

const int USER_MARSHAL_FC_FLOAT = 10;

const int USER_MARSHAL_FC_HYPER = 11;

const int USER_MARSHAL_FC_DOUBLE = 12;

const int ROTREGFLAGS_ALLOWANYCLIENT = 1;

const int APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP = 1;

const int APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND = 2;

const int APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY = 4;

const int APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN = 8;

const int APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION = 16;

const int APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY = 32;

const int APPIDREGFLAGS_RESERVED1 = 64;

const int APPIDREGFLAGS_RESERVED2 = 128;

const int APPIDREGFLAGS_RESERVED3 = 256;

const int APPIDREGFLAGS_RESERVED4 = 512;

const int APPIDREGFLAGS_RESERVED5 = 1024;

const int APPIDREGFLAGS_AAA_NO_IMPLICIT_ACTIVATE_AS_IU = 2048;

const int APPIDREGFLAGS_RESERVED7 = 4096;

const int APPIDREGFLAGS_RESERVED8 = 8192;

const int APPIDREGFLAGS_RESERVED9 = 16384;

const int DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES = 1;

const int DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL = 2;

const int DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES = 4;

const int DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL = 8;

const int DCOMSCM_PING_USE_MID_AUTHNSERVICE = 16;

const int DCOMSCM_PING_DISALLOW_UNSECURE_CALL = 32;

const int CLSCTX_VALID_MASK = -2015366113;

const int ROTFLAGS_REGISTRATIONKEEPSALIVE = 1;

const int ROTFLAGS_ALLOWANYCLIENT = 2;

const int ROT_COMPARE_MAX = 2048;

const int WDT_INPROC_CALL = 1215587415;

const int WDT_REMOTE_CALL = 1383359575;

const int WDT_INPROC64_CALL = 1349805143;

const int DECIMAL_NEG = 128;

const int VARIANT_TRUE = -1;

const int VARIANT_FALSE = 0;

const int FILE_DEVICE_BEEP = 1;

const int FILE_DEVICE_CD_ROM = 2;

const int FILE_DEVICE_CD_ROM_FILE_SYSTEM = 3;

const int FILE_DEVICE_CONTROLLER = 4;

const int FILE_DEVICE_DATALINK = 5;

const int FILE_DEVICE_DFS = 6;

const int FILE_DEVICE_DISK = 7;

const int FILE_DEVICE_DISK_FILE_SYSTEM = 8;

const int FILE_DEVICE_FILE_SYSTEM = 9;

const int FILE_DEVICE_INPORT_PORT = 10;

const int FILE_DEVICE_KEYBOARD = 11;

const int FILE_DEVICE_MAILSLOT = 12;

const int FILE_DEVICE_MIDI_IN = 13;

const int FILE_DEVICE_MIDI_OUT = 14;

const int FILE_DEVICE_MOUSE = 15;

const int FILE_DEVICE_MULTI_UNC_PROVIDER = 16;

const int FILE_DEVICE_NAMED_PIPE = 17;

const int FILE_DEVICE_NETWORK = 18;

const int FILE_DEVICE_NETWORK_BROWSER = 19;

const int FILE_DEVICE_NETWORK_FILE_SYSTEM = 20;

const int FILE_DEVICE_NULL = 21;

const int FILE_DEVICE_PARALLEL_PORT = 22;

const int FILE_DEVICE_PHYSICAL_NETCARD = 23;

const int FILE_DEVICE_PRINTER = 24;

const int FILE_DEVICE_SCANNER = 25;

const int FILE_DEVICE_SERIAL_MOUSE_PORT = 26;

const int FILE_DEVICE_SERIAL_PORT = 27;

const int FILE_DEVICE_SCREEN = 28;

const int FILE_DEVICE_SOUND = 29;

const int FILE_DEVICE_STREAMS = 30;

const int FILE_DEVICE_TAPE = 31;

const int FILE_DEVICE_TAPE_FILE_SYSTEM = 32;

const int FILE_DEVICE_TRANSPORT = 33;

const int FILE_DEVICE_UNKNOWN = 34;

const int FILE_DEVICE_VIDEO = 35;

const int FILE_DEVICE_VIRTUAL_DISK = 36;

const int FILE_DEVICE_WAVE_IN = 37;

const int FILE_DEVICE_WAVE_OUT = 38;

const int FILE_DEVICE_8042_PORT = 39;

const int FILE_DEVICE_NETWORK_REDIRECTOR = 40;

const int FILE_DEVICE_BATTERY = 41;

const int FILE_DEVICE_BUS_EXTENDER = 42;

const int FILE_DEVICE_MODEM = 43;

const int FILE_DEVICE_VDM = 44;

const int FILE_DEVICE_MASS_STORAGE = 45;

const int FILE_DEVICE_SMB = 46;

const int FILE_DEVICE_KS = 47;

const int FILE_DEVICE_CHANGER = 48;

const int FILE_DEVICE_SMARTCARD = 49;

const int FILE_DEVICE_ACPI = 50;

const int FILE_DEVICE_DVD = 51;

const int FILE_DEVICE_FULLSCREEN_VIDEO = 52;

const int FILE_DEVICE_DFS_FILE_SYSTEM = 53;

const int FILE_DEVICE_DFS_VOLUME = 54;

const int FILE_DEVICE_SERENUM = 55;

const int FILE_DEVICE_TERMSRV = 56;

const int FILE_DEVICE_KSEC = 57;

const int FILE_DEVICE_FIPS = 58;

const int FILE_DEVICE_INFINIBAND = 59;

const int FILE_DEVICE_VMBUS = 62;

const int FILE_DEVICE_CRYPT_PROVIDER = 63;

const int FILE_DEVICE_WPD = 64;

const int FILE_DEVICE_BLUETOOTH = 65;

const int FILE_DEVICE_MT_COMPOSITE = 66;

const int FILE_DEVICE_MT_TRANSPORT = 67;

const int FILE_DEVICE_BIOMETRIC = 68;

const int FILE_DEVICE_PMI = 69;

const int FILE_DEVICE_EHSTOR = 70;

const int FILE_DEVICE_DEVAPI = 71;

const int FILE_DEVICE_GPIO = 72;

const int FILE_DEVICE_USBEX = 73;

const int FILE_DEVICE_CONSOLE = 80;

const int FILE_DEVICE_NFP = 81;

const int FILE_DEVICE_SYSENV = 82;

const int FILE_DEVICE_VIRTUAL_BLOCK = 83;

const int FILE_DEVICE_POINT_OF_SERVICE = 84;

const int FILE_DEVICE_STORAGE_REPLICATION = 85;

const int FILE_DEVICE_TRUST_ENV = 86;

const int FILE_DEVICE_UCM = 87;

const int FILE_DEVICE_UCMTCPCI = 88;

const int FILE_DEVICE_PERSISTENT_MEMORY = 89;

const int FILE_DEVICE_NVDIMM = 90;

const int FILE_DEVICE_HOLOGRAPHIC = 91;

const int FILE_DEVICE_SDFXHCI = 92;

const int FILE_DEVICE_UCMUCSI = 93;

const int FILE_DEVICE_PRM = 94;

const int FILE_DEVICE_EVENT_COLLECTOR = 95;

const int FILE_DEVICE_USB4 = 96;

const int FILE_DEVICE_SOUNDWIRE = 97;

const int METHOD_BUFFERED = 0;

const int METHOD_IN_DIRECT = 1;

const int METHOD_OUT_DIRECT = 2;

const int METHOD_NEITHER = 3;

const int METHOD_DIRECT_TO_HARDWARE = 1;

const int METHOD_DIRECT_FROM_HARDWARE = 2;

const int FILE_ANY_ACCESS = 0;

const int FILE_SPECIAL_ACCESS = 0;

const int FILE_READ_ACCESS = 1;

const int FILE_WRITE_ACCESS = 2;

const int IOCTL_STORAGE_BASE = 45;

const int IOCTL_STORAGE_CHECK_VERIFY = 2967552;

const int IOCTL_STORAGE_CHECK_VERIFY2 = 2951168;

const int IOCTL_STORAGE_MEDIA_REMOVAL = 2967556;

const int IOCTL_STORAGE_EJECT_MEDIA = 2967560;

const int IOCTL_STORAGE_LOAD_MEDIA = 2967564;

const int IOCTL_STORAGE_LOAD_MEDIA2 = 2951180;

const int IOCTL_STORAGE_RESERVE = 2967568;

const int IOCTL_STORAGE_RELEASE = 2967572;

const int IOCTL_STORAGE_FIND_NEW_DEVICES = 2967576;

const int IOCTL_STORAGE_EJECTION_CONTROL = 2951488;

const int IOCTL_STORAGE_MCN_CONTROL = 2951492;

const int IOCTL_STORAGE_GET_MEDIA_TYPES = 2952192;

const int IOCTL_STORAGE_GET_MEDIA_TYPES_EX = 2952196;

const int IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER = 2952208;

const int IOCTL_STORAGE_GET_HOTPLUG_INFO = 2952212;

const int IOCTL_STORAGE_SET_HOTPLUG_INFO = 3001368;

const int IOCTL_STORAGE_RESET_BUS = 2969600;

const int IOCTL_STORAGE_RESET_DEVICE = 2969604;

const int IOCTL_STORAGE_BREAK_RESERVATION = 2969620;

const int IOCTL_STORAGE_PERSISTENT_RESERVE_IN = 2969624;

const int IOCTL_STORAGE_PERSISTENT_RESERVE_OUT = 3002396;

const int IOCTL_STORAGE_GET_DEVICE_NUMBER = 2953344;

const int IOCTL_STORAGE_GET_DEVICE_NUMBER_EX = 2953348;

const int IOCTL_STORAGE_PREDICT_FAILURE = 2953472;

const int IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG = 2953476;

const int IOCTL_STORAGE_GET_COUNTERS = 2953480;

const int IOCTL_STORAGE_READ_CAPACITY = 2969920;

const int IOCTL_STORAGE_GET_DEVICE_TELEMETRY = 3002816;

const int IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY = 3002820;

const int IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS = 3002824;

const int IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW = 3002828;

const int IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD = 3002880;

const int IOCTL_STORAGE_PROTOCOL_COMMAND = 3003328;

const int IOCTL_STORAGE_SET_PROPERTY = 2987004;

const int IOCTL_STORAGE_QUERY_PROPERTY = 2954240;

const int IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES = 2987012;

const int IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES = 2970632;

const int IOCTL_STORAGE_REINITIALIZE_MEDIA = 2987584;

const int IOCTL_STORAGE_GET_BC_PROPERTIES = 2971648;

const int IOCTL_STORAGE_ALLOCATE_BC_STREAM = 3004420;

const int IOCTL_STORAGE_FREE_BC_STREAM = 3004424;

const int IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT = 2955392;

const int IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK = 3004548;

const int IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK = 3004552;

const int OBSOLETE_IOCTL_STORAGE_RESET_BUS = 3002368;

const int OBSOLETE_IOCTL_STORAGE_RESET_DEVICE = 3002372;

const int IOCTL_STORAGE_FIRMWARE_GET_INFO = 2956288;

const int IOCTL_STORAGE_FIRMWARE_DOWNLOAD = 3005444;

const int IOCTL_STORAGE_FIRMWARE_ACTIVATE = 3005448;

const int IOCTL_STORAGE_ENABLE_IDLE_POWER = 2956416;

const int IOCTL_STORAGE_GET_IDLE_POWERUP_REASON = 2956420;

const int IOCTL_STORAGE_POWER_ACTIVE = 2956424;

const int IOCTL_STORAGE_POWER_IDLE = 2956428;

const int IOCTL_STORAGE_EVENT_NOTIFICATION = 2956432;

const int IOCTL_STORAGE_DEVICE_POWER_CAP = 2956436;

const int IOCTL_STORAGE_RPMB_COMMAND = 2956440;

const int IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT = 3005596;

const int IOCTL_STORAGE_DIAGNOSTIC = 2956448;

const int IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS = 2956452;

const int IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE = 2956480;

const int IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG = 2956484;

const int STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT = 1;

const int STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID = 2;

const int STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID = 4;

const int RECOVERED_WRITES_VALID = 1;

const int UNRECOVERED_WRITES_VALID = 2;

const int RECOVERED_READS_VALID = 4;

const int UNRECOVERED_READS_VALID = 8;

const int WRITE_COMPRESSION_INFO_VALID = 16;

const int READ_COMPRESSION_INFO_VALID = 32;

const int TAPE_RETURN_STATISTICS = 0;

const int TAPE_RETURN_ENV_INFO = 1;

const int TAPE_RESET_STATISTICS = 2;

const int MEDIA_ERASEABLE = 1;

const int MEDIA_WRITE_ONCE = 2;

const int MEDIA_READ_ONLY = 4;

const int MEDIA_READ_WRITE = 8;

const int MEDIA_WRITE_PROTECTED = 256;

const int MEDIA_CURRENTLY_MOUNTED = 2147483648;

const int STORAGE_FAILURE_PREDICTION_CONFIG_V1 = 1;

const int NO_SRBTYPE_ADAPTER_DESCRIPTOR_SIZE = 30;

const int SRB_TYPE_SCSI_REQUEST_BLOCK = 0;

const int SRB_TYPE_STORAGE_REQUEST_BLOCK = 1;

const int STORAGE_ADDRESS_TYPE_BTL8 = 0;

const int STORAGE_MINIPORT_DESCRIPTOR_V1_SIZE = 16;

const int StorageIdTypeNAA = 3;

const int DEVICE_LB_PROVISIONING_DESCRIPTOR_V1_SIZE = 32;

const int STORAGE_RPMB_DESCRIPTOR_VERSION_1 = 1;

const int STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE = 512;

const int STORAGE_CRYPTO_CAPABILITY_VERSION_1 = 1;

const int STORAGE_CRYPTO_DESCRIPTOR_VERSION_1 = 1;

const int STORAGE_TIER_NAME_LENGTH = 256;

const int STORAGE_TIER_DESCRIPTION_LENGTH = 512;

const int STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 131072;

const int STORAGE_TIER_FLAG_WRITE_BACK_CACHE = 2097152;

const int STORAGE_TIER_FLAG_READ_CACHE = 4194304;

const int STORAGE_TIER_FLAG_PARITY = 8388608;

const int STORAGE_TIER_FLAG_SMR = 16777216;

const int STORAGE_TEMPERATURE_VALUE_NOT_REPORTED = 32768;

const int STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST = 1;

const int STORAGE_COMPONENT_ROLE_CACHE = 1;

const int STORAGE_COMPONENT_ROLE_TIERING = 2;

const int STORAGE_COMPONENT_ROLE_DATA = 4;

const int STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO = 1;

const int STORAGE_ATTRIBUTE_BLOCK_IO = 2;

const int STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE = 4;

const int STORAGE_ATTRIBUTE_VOLATILE = 8;

const int STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION = 16;

const int STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT = 32;

const int STORAGE_DEVICE_MAX_OPERATIONAL_STATUS = 16;

const int STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH = 128;

const int STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION = 264;

const int STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE = 264;

const int STORAGE_DEVICE_NUMA_NODE_UNKNOWN = 4294967295;

const int DeviceDsmActionFlag_NonDestructive = 2147483648;

const int DeviceDsmAction_None = 0;

const int DeviceDsmAction_Trim = 1;

const int DeviceDsmAction_Notification = 2147483650;

const int DeviceDsmAction_OffloadRead = 2147483651;

const int DeviceDsmAction_OffloadWrite = 4;

const int DeviceDsmAction_Allocation = 2147483653;

const int DeviceDsmAction_Repair = 2147483654;

const int DeviceDsmAction_Scrub = 2147483655;

const int DeviceDsmAction_DrtQuery = 2147483656;

const int DeviceDsmAction_DrtClear = 2147483657;

const int DeviceDsmAction_DrtDisable = 2147483658;

const int DeviceDsmAction_TieringQuery = 2147483659;

const int DeviceDsmAction_Map = 2147483660;

const int DeviceDsmAction_RegenerateParity = 2147483661;

const int DeviceDsmAction_NvCache_Change_Priority = 2147483662;

const int DeviceDsmAction_NvCache_Evict = 2147483663;

const int DeviceDsmAction_TopologyIdQuery = 2147483664;

const int DeviceDsmAction_GetPhysicalAddresses = 2147483665;

const int DeviceDsmAction_ScopeRegen = 2147483666;

const int DeviceDsmAction_ReportZones = 2147483667;

const int DeviceDsmAction_OpenZone = 2147483668;

const int DeviceDsmAction_FinishZone = 2147483669;

const int DeviceDsmAction_CloseZone = 2147483670;

const int DeviceDsmAction_ResetWritePointer = 23;

const int DeviceDsmAction_GetRangeErrorInfo = 2147483672;

const int DeviceDsmAction_WriteZeroes = 25;

const int DeviceDsmAction_LostQuery = 2147483674;

const int DeviceDsmAction_GetFreeSpace = 2147483675;

const int DeviceDsmAction_ConversionQuery = 2147483676;

const int DeviceDsmAction_VdtSet = 29;

const int DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE = 1;

const int DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED = 2147483648;

const int DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT = 1073741824;

const int DEVICE_DSM_NOTIFY_FLAG_BEGIN = 1;

const int DEVICE_DSM_NOTIFY_FLAG_END = 2;

const int STORAGE_OFFLOAD_MAX_TOKEN_LENGTH = 512;

const int STORAGE_OFFLOAD_TOKEN_ID_LENGTH = 504;

const int STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA = 4294901761;

const int STORAGE_OFFLOAD_READ_RANGE_TRUNCATED = 1;

const int STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED = 1;

const int STORAGE_OFFLOAD_TOKEN_INVALID = 2;

const int DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY = 1073741824;

const int DEVICE_DSM_PARAMETERS_V1 = 1;

const int DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1 = 1;

const int DEVICE_DSM_ALLOCATION_OUTPUT_V1 = 32;

const int DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1 = 32;

const int DEVICE_DSM_ALLOCATION_OUTPUT_V2 = 40;

const int DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2 = 40;

const int DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT = 1073741824;

const int DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT = 536870912;

const int DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC = 268435456;

const int DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT = 536870912;

const int DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES = 268435456;

const int DEVICE_DSM_PHYSICAL_ADDRESS_HAS_MEMORY_ERROR = -1;

const int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1 = 1;

const int DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1 = 1;

const int DEVICE_STORAGE_NO_ERRORS = 1;

const int DEVICE_DSM_RANGE_ERROR_OUTPUT_V1 = 1;

const int DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1 = 1;

const int IOCTL_STORAGE_BC_VERSION = 1;

const int STORAGE_PRIORITY_HINT_SUPPORTED = 1;

const int STORAGE_DIAGNOSTIC_FLAG_ADAPTER_REQUEST = 1;

const int ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT = 8;

const int DEVICEDUMP_STRUCTURE_VERSION_V1 = 1;

const int DEVICEDUMP_MAX_IDSTRING = 32;

const int MAX_FW_BUCKET_ID_LENGTH = 132;

const String STORAGE_CRASH_TELEMETRY_REGKEY = '\\';

const String STORAGE_DEVICE_TELEMETRY_REGKEY = '\\';

const int DDUMP_FLAG_DATA_READ_FROM_DEVICE = 1;

const int FW_ISSUEID_NO_ISSUE = 0;

const int FW_ISSUEID_UNKNOWN = 4294967295;

const int TC_PUBLIC_DEVICEDUMP_CONTENT_SMART = 1;

const int TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG = 2;

const int TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX = 16;

const int TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH = 16;

const String TC_PUBLIC_DATA_TYPE_ATAGP = 'ATAGPLogPages';

const String TC_PUBLIC_DATA_TYPE_ATASMART = 'ATASMARTPages';

const int CDB_SIZE = 16;

const int TELEMETRY_COMMAND_SIZE = 16;

const int DEVICEDUMP_CAP_PRIVATE_SECTION = 1;

const int DEVICEDUMP_CAP_RESTRICTED_SECTION = 2;

const int STORAGE_IDLE_POWERUP_REASON_VERSION_V1 = 1;

const int STORAGE_DEVICE_POWER_CAP_VERSION_V1 = 1;

const int STORAGE_EVENT_NOTIFICATION_VERSION_V1 = 1;

const int STORAGE_EVENT_MEDIA_STATUS = 1;

const int STORAGE_EVENT_DEVICE_STATUS = 2;

const int STORAGE_EVENT_DEVICE_OPERATION = 4;

const int STORAGE_EVENT_ALL = 7;

const int READ_COPY_NUMBER_KEY = 1380142592;

const int READ_COPY_NUMBER_BYPASS_CACHE_FLAG = 256;

const int STORAGE_COUNTERS_VERSION_V1 = 32;

const int STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER = 1;

const int STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT = 2;

const int STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT = 4;

const int STORAGE_HW_FIRMWARE_REQUEST_FLAG_REPLACE_EXISTING_IMAGE = 1073741824;

const int STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE =
    2147483648;

const int STORAGE_HW_FIRMWARE_INVALID_SLOT = 255;

const int STORAGE_HW_FIRMWARE_REVISION_LENGTH = 16;

const int STORAGE_PROTOCOL_STRUCTURE_VERSION = 1;

const int STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST = 2147483648;

const int STORAGE_PROTOCOL_STATUS_PENDING = 0;

const int STORAGE_PROTOCOL_STATUS_SUCCESS = 1;

const int STORAGE_PROTOCOL_STATUS_ERROR = 2;

const int STORAGE_PROTOCOL_STATUS_INVALID_REQUEST = 3;

const int STORAGE_PROTOCOL_STATUS_NO_DEVICE = 4;

const int STORAGE_PROTOCOL_STATUS_BUSY = 5;

const int STORAGE_PROTOCOL_STATUS_DATA_OVERRUN = 6;

const int STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES = 7;

const int STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST = 8;

const int STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED = 255;

const int STORAGE_PROTOCOL_COMMAND_LENGTH_NVME = 64;

const int STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND = 1;

const int STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND = 2;

const int STORATTRIBUTE_NONE = 0;

const int STORATTRIBUTE_MANAGEMENT_STATE = 1;

const int IOCTL_SCMBUS_BASE = 89;

const int IOCTL_SCMBUS_DEVICE_FUNCTION_BASE = 0;

const int IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE = 768;

const int IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE = 1536;

const int IOCTL_SCM_BUS_GET_LOGICAL_DEVICES = 5832704;

const int IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES = 5832708;

const int IOCTL_SCM_BUS_GET_REGIONS = 5832712;

const int IOCTL_SCM_BUS_QUERY_PROPERTY = 5832716;

const int IOCTL_SCM_BUS_SET_PROPERTY = 5865492;

const int IOCTL_SCM_BUS_RUNTIME_FW_ACTIVATE = 5865488;

const int IOCTL_SCM_BUS_REFRESH_NAMESPACE = 5832728;

const int IOCTL_SCM_LD_GET_INTERLEAVE_SET = 5835776;

const int IOCTL_SCM_PD_QUERY_PROPERTY = 5838848;

const int IOCTL_SCM_PD_FIRMWARE_DOWNLOAD = 5871620;

const int IOCTL_SCM_PD_FIRMWARE_ACTIVATE = 5871624;

const int IOCTL_SCM_PD_PASSTHROUGH = 5888012;

const int IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS = 5838864;

const int IOCTL_SCM_PD_REINITIALIZE_MEDIA = 5871636;

const int IOCTL_SCM_PD_SET_PROPERTY = 5871640;

const int SCM_MAX_SYMLINK_LEN_IN_CHARS = 256;

const int SCM_REGION_SPA_UNKNOWN = -1;

const int MAX_INTERFACE_CODES = 8;

const int SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES = 32;

const int SCM_PD_MEMORY_SIZE_UNKNOWN = -1;

const int SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS = 128;

const int SCM_PD_MAX_OPERATIONAL_STATUS = 16;

const int SCM_PD_FIRMWARE_LAST_DOWNLOAD = 1;

const int IOCTL_DISK_BASE = 7;

const int IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752;

const int IOCTL_DISK_GET_PARTITION_INFO = 475140;

const int IOCTL_DISK_SET_PARTITION_INFO = 507912;

const int IOCTL_DISK_GET_DRIVE_LAYOUT = 475148;

const int IOCTL_DISK_SET_DRIVE_LAYOUT = 507920;

const int IOCTL_DISK_VERIFY = 458772;

const int IOCTL_DISK_FORMAT_TRACKS = 507928;

const int IOCTL_DISK_REASSIGN_BLOCKS = 507932;

const int IOCTL_DISK_PERFORMANCE = 458784;

const int IOCTL_DISK_IS_WRITABLE = 458788;

const int IOCTL_DISK_LOGGING = 458792;

const int IOCTL_DISK_FORMAT_TRACKS_EX = 507948;

const int IOCTL_DISK_HISTOGRAM_STRUCTURE = 458800;

const int IOCTL_DISK_HISTOGRAM_DATA = 458804;

const int IOCTL_DISK_HISTOGRAM_RESET = 458808;

const int IOCTL_DISK_REQUEST_STRUCTURE = 458812;

const int IOCTL_DISK_REQUEST_DATA = 458816;

const int IOCTL_DISK_PERFORMANCE_OFF = 458848;

const int IOCTL_DISK_CONTROLLER_NUMBER = 458820;

const int SMART_GET_VERSION = 475264;

const int SMART_SEND_DRIVE_COMMAND = 508036;

const int SMART_RCV_DRIVE_DATA = 508040;

const int SMART_RCV_DRIVE_DATA_EX = 458892;

const int IOCTL_DISK_GET_PARTITION_INFO_EX = 458824;

const int IOCTL_DISK_SET_PARTITION_INFO_EX = 507980;

const int IOCTL_DISK_GET_DRIVE_LAYOUT_EX = 458832;

const int IOCTL_DISK_SET_DRIVE_LAYOUT_EX = 507988;

const int IOCTL_DISK_CREATE_DISK = 507992;

const int IOCTL_DISK_GET_LENGTH_INFO = 475228;

const int IOCTL_DISK_GET_DRIVE_GEOMETRY_EX = 458912;

const int IOCTL_DISK_REASSIGN_BLOCKS_EX = 508068;

const int IOCTL_DISK_UPDATE_DRIVE_SIZE = 508104;

const int IOCTL_DISK_GROW_PARTITION = 508112;

const int IOCTL_DISK_GET_CACHE_INFORMATION = 475348;

const int IOCTL_DISK_SET_CACHE_INFORMATION = 508120;

const int OBSOLETE_DISK_GET_WRITE_CACHE_STATE = 475356;

const int IOCTL_DISK_DELETE_DRIVE_LAYOUT = 508160;

const int IOCTL_DISK_UPDATE_PROPERTIES = 459072;

const int IOCTL_DISK_FORMAT_DRIVE = 508876;

const int IOCTL_DISK_SENSE_DEVICE = 459744;

const int IOCTL_DISK_CHECK_VERIFY = 477184;

const int IOCTL_DISK_MEDIA_REMOVAL = 477188;

const int IOCTL_DISK_EJECT_MEDIA = 477192;

const int IOCTL_DISK_LOAD_MEDIA = 477196;

const int IOCTL_DISK_RESERVE = 477200;

const int IOCTL_DISK_RELEASE = 477204;

const int IOCTL_DISK_FIND_NEW_DEVICES = 477208;

const int IOCTL_DISK_GET_MEDIA_TYPES = 461824;

const int PARTITION_ENTRY_UNUSED = 0;

const int PARTITION_FAT_12 = 1;

const int PARTITION_XENIX_1 = 2;

const int PARTITION_XENIX_2 = 3;

const int PARTITION_FAT_16 = 4;

const int PARTITION_EXTENDED = 5;

const int PARTITION_HUGE = 6;

const int PARTITION_IFS = 7;

const int PARTITION_OS2BOOTMGR = 10;

const int PARTITION_FAT32 = 11;

const int PARTITION_FAT32_XINT13 = 12;

const int PARTITION_XINT13 = 14;

const int PARTITION_XINT13_EXTENDED = 15;

const int PARTITION_MSFT_RECOVERY = 39;

const int PARTITION_MAIN_OS = 40;

const int PARTIITON_OS_DATA = 41;

const int PARTITION_PRE_INSTALLED = 42;

const int PARTITION_BSP = 43;

const int PARTITION_DPP = 44;

const int PARTITION_WINDOWS_SYSTEM = 45;

const int PARTITION_PREP = 65;

const int PARTITION_LDM = 66;

const int PARTITION_DM = 84;

const int PARTITION_EZDRIVE = 85;

const int PARTITION_UNIX = 99;

const int PARTITION_SPACES_DATA = 215;

const int PARTITION_SPACES = 231;

const int PARTITION_GPT = 238;

const int PARTITION_SYSTEM = 239;

const int VALID_NTFT = 192;

const int PARTITION_NTFT = 128;

const int GPT_ATTRIBUTE_PLATFORM_REQUIRED = 1;

const int GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL = 2;

const int GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE = 4;

const int GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER = -9223372036854775808;

const int GPT_BASIC_DATA_ATTRIBUTE_HIDDEN = 4611686018427387904;

const int GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY = 2305843009213693952;

const int GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY = 1152921504606846976;

const int GPT_BASIC_DATA_ATTRIBUTE_OFFLINE = 576460752303423488;

const int GPT_BASIC_DATA_ATTRIBUTE_DAX = 288230376151711744;

const int GPT_BASIC_DATA_ATTRIBUTE_SERVICE = 144115188075855872;

const int GPT_SPACES_ATTRIBUTE_NO_METADATA = -9223372036854775808;

const int HIST_NO_OF_BUCKETS = 24;

const int HISTOGRAM_BUCKET_SIZE = 8;

const int DISK_HISTOGRAM_SIZE = 72;

const int DISK_LOGGING_START = 0;

const int DISK_LOGGING_STOP = 1;

const int DISK_LOGGING_DUMP = 2;

const int DISK_BINNING = 3;

const int CAP_ATA_ID_CMD = 1;

const int CAP_ATAPI_ID_CMD = 2;

const int CAP_SMART_CMD = 4;

const int ATAPI_ID_CMD = 161;

const int ID_CMD = 236;

const int SMART_CMD = 176;

const int SMART_CYL_LOW = 79;

const int SMART_CYL_HI = 194;

const int SMART_NO_ERROR = 0;

const int SMART_IDE_ERROR = 1;

const int SMART_INVALID_FLAG = 2;

const int SMART_INVALID_COMMAND = 3;

const int SMART_INVALID_BUFFER = 4;

const int SMART_INVALID_DRIVE = 5;

const int SMART_INVALID_IOCTL = 6;

const int SMART_ERROR_NO_MEM = 7;

const int SMART_INVALID_REGISTER = 8;

const int SMART_NOT_SUPPORTED = 9;

const int SMART_NO_IDE_DEVICE = 10;

const int SMART_OFFLINE_ROUTINE_OFFLINE = 0;

const int SMART_SHORT_SELFTEST_OFFLINE = 1;

const int SMART_EXTENDED_SELFTEST_OFFLINE = 2;

const int SMART_ABORT_OFFLINE_SELFTEST = 127;

const int SMART_SHORT_SELFTEST_CAPTIVE = 129;

const int SMART_EXTENDED_SELFTEST_CAPTIVE = 130;

const int READ_ATTRIBUTE_BUFFER_SIZE = 512;

const int IDENTIFY_BUFFER_SIZE = 512;

const int READ_THRESHOLD_BUFFER_SIZE = 512;

const int SMART_LOG_SECTOR_SIZE = 512;

const int READ_ATTRIBUTES = 208;

const int READ_THRESHOLDS = 209;

const int ENABLE_DISABLE_AUTOSAVE = 210;

const int SAVE_ATTRIBUTE_VALUES = 211;

const int EXECUTE_OFFLINE_DIAGS = 212;

const int SMART_READ_LOG = 213;

const int SMART_WRITE_LOG = 214;

const int ENABLE_SMART = 216;

const int DISABLE_SMART = 217;

const int RETURN_SMART_STATUS = 218;

const int ENABLE_DISABLE_AUTO_OFFLINE = 219;

const int IOCTL_DISK_GET_DISK_ATTRIBUTES = 458992;

const int IOCTL_DISK_SET_DISK_ATTRIBUTES = 508148;

const int DISK_ATTRIBUTE_OFFLINE = 1;

const int DISK_ATTRIBUTE_READ_ONLY = 2;

const int IOCTL_DISK_RESET_SNAPSHOT_INFO = 508432;

const int IOCTL_CHANGER_BASE = 48;

const int IOCTL_CHANGER_GET_PARAMETERS = 3162112;

const int IOCTL_CHANGER_GET_STATUS = 3162116;

const int IOCTL_CHANGER_GET_PRODUCT_DATA = 3162120;

const int IOCTL_CHANGER_SET_ACCESS = 3194896;

const int IOCTL_CHANGER_GET_ELEMENT_STATUS = 3194900;

const int IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = 3162136;

const int IOCTL_CHANGER_SET_POSITION = 3162140;

const int IOCTL_CHANGER_EXCHANGE_MEDIUM = 3162144;

const int IOCTL_CHANGER_MOVE_MEDIUM = 3162148;

const int IOCTL_CHANGER_REINITIALIZE_TRANSPORT = 3162152;

const int IOCTL_CHANGER_QUERY_VOLUME_TAGS = 3194924;

const int MAX_VOLUME_ID_SIZE = 36;

const int MAX_VOLUME_TEMPLATE_SIZE = 40;

const int VENDOR_ID_LENGTH = 8;

const int PRODUCT_ID_LENGTH = 16;

const int REVISION_LENGTH = 4;

const int SERIAL_NUMBER_LENGTH = 32;

const int CHANGER_BAR_CODE_SCANNER_INSTALLED = 1;

const int CHANGER_INIT_ELEM_STAT_WITH_RANGE = 2;

const int CHANGER_CLOSE_IEPORT = 4;

const int CHANGER_OPEN_IEPORT = 8;

const int CHANGER_STATUS_NON_VOLATILE = 16;

const int CHANGER_EXCHANGE_MEDIA = 32;

const int CHANGER_CLEANER_SLOT = 64;

const int CHANGER_LOCK_UNLOCK = 128;

const int CHANGER_CARTRIDGE_MAGAZINE = 256;

const int CHANGER_MEDIUM_FLIP = 512;

const int CHANGER_POSITION_TO_ELEMENT = 1024;

const int CHANGER_REPORT_IEPORT_STATE = 2048;

const int CHANGER_STORAGE_DRIVE = 4096;

const int CHANGER_STORAGE_IEPORT = 8192;

const int CHANGER_STORAGE_SLOT = 16384;

const int CHANGER_STORAGE_TRANSPORT = 32768;

const int CHANGER_DRIVE_CLEANING_REQUIRED = 65536;

const int CHANGER_PREDISMOUNT_EJECT_REQUIRED = 131072;

const int CHANGER_CLEANER_ACCESS_NOT_VALID = 262144;

const int CHANGER_PREMOUNT_EJECT_REQUIRED = 524288;

const int CHANGER_VOLUME_IDENTIFICATION = 1048576;

const int CHANGER_VOLUME_SEARCH = 2097152;

const int CHANGER_VOLUME_ASSERT = 4194304;

const int CHANGER_VOLUME_REPLACE = 8388608;

const int CHANGER_VOLUME_UNDEFINE = 16777216;

const int CHANGER_SERIAL_NUMBER_VALID = 67108864;

const int CHANGER_DEVICE_REINITIALIZE_CAPABLE = 134217728;

const int CHANGER_KEYPAD_ENABLE_DISABLE = 268435456;

const int CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 536870912;

const int CHANGER_RESERVED_BIT = 2147483648;

const int CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 2147483649;

const int CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 2147483650;

const int CHANGER_CLEANER_AUTODISMOUNT = 2147483652;

const int CHANGER_TRUE_EXCHANGE_CAPABLE = 2147483656;

const int CHANGER_SLOTS_USE_TRAYS = 2147483664;

const int CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 2147483680;

const int CHANGER_CLEANER_OPS_NOT_SUPPORTED = 2147483712;

const int CHANGER_IEPORT_USER_CONTROL_OPEN = 2147483776;

const int CHANGER_IEPORT_USER_CONTROL_CLOSE = 2147483904;

const int CHANGER_MOVE_EXTENDS_IEPORT = 2147484160;

const int CHANGER_MOVE_RETRACTS_IEPORT = 2147484672;

const int CHANGER_TO_TRANSPORT = 1;

const int CHANGER_TO_SLOT = 2;

const int CHANGER_TO_IEPORT = 4;

const int CHANGER_TO_DRIVE = 8;

const int LOCK_UNLOCK_IEPORT = 1;

const int LOCK_UNLOCK_DOOR = 2;

const int LOCK_UNLOCK_KEYPAD = 4;

const int LOCK_ELEMENT = 0;

const int UNLOCK_ELEMENT = 1;

const int EXTEND_IEPORT = 2;

const int RETRACT_IEPORT = 3;

const int ELEMENT_STATUS_FULL = 1;

const int ELEMENT_STATUS_IMPEXP = 2;

const int ELEMENT_STATUS_EXCEPT = 4;

const int ELEMENT_STATUS_ACCESS = 8;

const int ELEMENT_STATUS_EXENAB = 16;

const int ELEMENT_STATUS_INENAB = 32;

const int ELEMENT_STATUS_PRODUCT_DATA = 64;

const int ELEMENT_STATUS_LUN_VALID = 4096;

const int ELEMENT_STATUS_ID_VALID = 8192;

const int ELEMENT_STATUS_NOT_BUS = 32768;

const int ELEMENT_STATUS_INVERT = 4194304;

const int ELEMENT_STATUS_SVALID = 8388608;

const int ELEMENT_STATUS_PVOLTAG = 268435456;

const int ELEMENT_STATUS_AVOLTAG = 536870912;

const int ERROR_LABEL_UNREADABLE = 1;

const int ERROR_LABEL_QUESTIONABLE = 2;

const int ERROR_SLOT_NOT_PRESENT = 4;

const int ERROR_DRIVE_NOT_INSTALLED = 8;

const int ERROR_TRAY_MALFUNCTION = 16;

const int ERROR_INIT_STATUS_NEEDED = 17;

const int ERROR_UNHANDLED_ERROR = 4294967295;

const int SEARCH_ALL = 0;

const int SEARCH_PRIMARY = 1;

const int SEARCH_ALTERNATE = 2;

const int SEARCH_ALL_NO_SEQ = 4;

const int SEARCH_PRI_NO_SEQ = 5;

const int SEARCH_ALT_NO_SEQ = 6;

const int ASSERT_PRIMARY = 8;

const int ASSERT_ALTERNATE = 9;

const int REPLACE_PRIMARY = 10;

const int REPLACE_ALTERNATE = 11;

const int UNDEFINE_PRIMARY = 12;

const int UNDEFINE_ALTERNATE = 13;

const int IOCTL_SERIAL_LSRMST_INSERT = 1769596;

const int IOCTL_SERENUM_EXPOSE_HARDWARE = 3604992;

const int IOCTL_SERENUM_REMOVE_HARDWARE = 3604996;

const int IOCTL_SERENUM_PORT_DESC = 3605000;

const int IOCTL_SERENUM_GET_PORT_NAME = 3605004;

const int SERIAL_LSRMST_ESCAPE = 0;

const int SERIAL_LSRMST_LSR_DATA = 1;

const int SERIAL_LSRMST_LSR_NODATA = 2;

const int SERIAL_LSRMST_MST = 3;

const int SERIAL_IOC_FCR_FIFO_ENABLE = 1;

const int SERIAL_IOC_FCR_RCVR_RESET = 2;

const int SERIAL_IOC_FCR_XMIT_RESET = 4;

const int SERIAL_IOC_FCR_DMA_MODE = 8;

const int SERIAL_IOC_FCR_RES1 = 16;

const int SERIAL_IOC_FCR_RES2 = 32;

const int SERIAL_IOC_FCR_RCVR_TRIGGER_LSB = 64;

const int SERIAL_IOC_FCR_RCVR_TRIGGER_MSB = 128;

const int SERIAL_IOC_MCR_DTR = 1;

const int SERIAL_IOC_MCR_RTS = 2;

const int SERIAL_IOC_MCR_OUT1 = 4;

const int SERIAL_IOC_MCR_OUT2 = 8;

const int SERIAL_IOC_MCR_LOOP = 16;

const int FSCTL_REQUEST_OPLOCK_LEVEL_1 = 589824;

const int FSCTL_REQUEST_OPLOCK_LEVEL_2 = 589828;

const int FSCTL_REQUEST_BATCH_OPLOCK = 589832;

const int FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = 589836;

const int FSCTL_OPBATCH_ACK_CLOSE_PENDING = 589840;

const int FSCTL_OPLOCK_BREAK_NOTIFY = 589844;

const int FSCTL_LOCK_VOLUME = 589848;

const int FSCTL_UNLOCK_VOLUME = 589852;

const int FSCTL_DISMOUNT_VOLUME = 589856;

const int FSCTL_IS_VOLUME_MOUNTED = 589864;

const int FSCTL_IS_PATHNAME_VALID = 589868;

const int FSCTL_MARK_VOLUME_DIRTY = 589872;

const int FSCTL_QUERY_RETRIEVAL_POINTERS = 589883;

const int FSCTL_GET_COMPRESSION = 589884;

const int FSCTL_SET_COMPRESSION = 639040;

const int FSCTL_SET_BOOTLOADER_ACCESSED = 589903;

const int FSCTL_MARK_AS_SYSTEM_HIVE = 589903;

const int FSCTL_OPLOCK_BREAK_ACK_NO_2 = 589904;

const int FSCTL_INVALIDATE_VOLUMES = 589908;

const int FSCTL_QUERY_FAT_BPB = 589912;

const int FSCTL_REQUEST_FILTER_OPLOCK = 589916;

const int FSCTL_FILESYSTEM_GET_STATISTICS = 589920;

const int FSCTL_GET_NTFS_VOLUME_DATA = 589924;

const int FSCTL_GET_NTFS_FILE_RECORD = 589928;

const int FSCTL_GET_VOLUME_BITMAP = 589935;

const int FSCTL_GET_RETRIEVAL_POINTERS = 589939;

const int FSCTL_MOVE_FILE = 589940;

const int FSCTL_IS_VOLUME_DIRTY = 589944;

const int FSCTL_ALLOW_EXTENDED_DASD_IO = 589955;

const int FSCTL_FIND_FILES_BY_SID = 589967;

const int FSCTL_SET_OBJECT_ID = 589976;

const int FSCTL_GET_OBJECT_ID = 589980;

const int FSCTL_DELETE_OBJECT_ID = 589984;

const int FSCTL_SET_REPARSE_POINT = 589988;

const int FSCTL_GET_REPARSE_POINT = 589992;

const int FSCTL_DELETE_REPARSE_POINT = 589996;

const int FSCTL_ENUM_USN_DATA = 590003;

const int FSCTL_SECURITY_ID_CHECK = 606391;

const int FSCTL_READ_USN_JOURNAL = 590011;

const int FSCTL_SET_OBJECT_ID_EXTENDED = 590012;

const int FSCTL_CREATE_OR_GET_OBJECT_ID = 590016;

const int FSCTL_SET_SPARSE = 590020;

const int FSCTL_SET_ZERO_DATA = 622792;

const int FSCTL_QUERY_ALLOCATED_RANGES = 606415;

const int FSCTL_ENABLE_UPGRADE = 622800;

const int FSCTL_SET_ENCRYPTION = 590039;

const int FSCTL_ENCRYPTION_FSCTL_IO = 590043;

const int FSCTL_WRITE_RAW_ENCRYPTED = 590047;

const int FSCTL_READ_RAW_ENCRYPTED = 590051;

const int FSCTL_CREATE_USN_JOURNAL = 590055;

const int FSCTL_READ_FILE_USN_DATA = 590059;

const int FSCTL_WRITE_USN_CLOSE_RECORD = 590063;

const int FSCTL_EXTEND_VOLUME = 590064;

const int FSCTL_QUERY_USN_JOURNAL = 590068;

const int FSCTL_DELETE_USN_JOURNAL = 590072;

const int FSCTL_MARK_HANDLE = 590076;

const int FSCTL_SIS_COPYFILE = 590080;

const int FSCTL_SIS_LINK_FILES = 639236;

const int FSCTL_RECALL_FILE = 590103;

const int FSCTL_READ_FROM_PLEX = 606494;

const int FSCTL_FILE_PREFETCH = 590112;

const int FSCTL_MAKE_MEDIA_COMPATIBLE = 622896;

const int FSCTL_SET_DEFECT_MANAGEMENT = 622900;

const int FSCTL_QUERY_SPARING_INFO = 590136;

const int FSCTL_QUERY_ON_DISK_VOLUME_INFO = 590140;

const int FSCTL_SET_VOLUME_COMPRESSION_STATE = 590144;

const int FSCTL_TXFS_MODIFY_RM = 622916;

const int FSCTL_TXFS_QUERY_RM_INFORMATION = 606536;

const int FSCTL_TXFS_ROLLFORWARD_REDO = 622928;

const int FSCTL_TXFS_ROLLFORWARD_UNDO = 622932;

const int FSCTL_TXFS_START_RM = 622936;

const int FSCTL_TXFS_SHUTDOWN_RM = 622940;

const int FSCTL_TXFS_READ_BACKUP_INFORMATION = 606560;

const int FSCTL_TXFS_WRITE_BACKUP_INFORMATION = 622948;

const int FSCTL_TXFS_CREATE_SECONDARY_RM = 622952;

const int FSCTL_TXFS_GET_METADATA_INFO = 606572;

const int FSCTL_TXFS_GET_TRANSACTED_VERSION = 606576;

const int FSCTL_TXFS_SAVEPOINT_INFORMATION = 622968;

const int FSCTL_TXFS_CREATE_MINIVERSION = 622972;

const int FSCTL_TXFS_TRANSACTION_ACTIVE = 606604;

const int FSCTL_SET_ZERO_ON_DEALLOCATION = 590228;

const int FSCTL_SET_REPAIR = 590232;

const int FSCTL_GET_REPAIR = 590236;

const int FSCTL_WAIT_FOR_REPAIR = 590240;

const int FSCTL_INITIATE_REPAIR = 590248;

const int FSCTL_CSC_INTERNAL = 590255;

const int FSCTL_SHRINK_VOLUME = 590256;

const int FSCTL_SET_SHORT_NAME_BEHAVIOR = 590260;

const int FSCTL_DFSR_SET_GHOST_HANDLE_STATE = 590264;

const int FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES = 606688;

const int FSCTL_TXFS_LIST_TRANSACTIONS = 606692;

const int FSCTL_QUERY_PAGEFILE_ENCRYPTION = 590312;

const int FSCTL_RESET_VOLUME_ALLOCATION_HINTS = 590316;

const int FSCTL_QUERY_DEPENDENT_VOLUME = 590320;

const int FSCTL_SD_GLOBAL_CHANGE = 590324;

const int FSCTL_TXFS_READ_BACKUP_INFORMATION2 = 590328;

const int FSCTL_LOOKUP_STREAM_FROM_CLUSTER = 590332;

const int FSCTL_TXFS_WRITE_BACKUP_INFORMATION2 = 590336;

const int FSCTL_FILE_TYPE_NOTIFICATION = 590340;

const int FSCTL_FILE_LEVEL_TRIM = 623112;

const int FSCTL_GET_BOOT_AREA_INFO = 590384;

const int FSCTL_GET_RETRIEVAL_POINTER_BASE = 590388;

const int FSCTL_SET_PERSISTENT_VOLUME_STATE = 590392;

const int FSCTL_QUERY_PERSISTENT_VOLUME_STATE = 590396;

const int FSCTL_REQUEST_OPLOCK = 590400;

const int FSCTL_CSV_TUNNEL_REQUEST = 590404;

const int FSCTL_IS_CSV_FILE = 590408;

const int FSCTL_QUERY_FILE_SYSTEM_RECOGNITION = 590412;

const int FSCTL_CSV_GET_VOLUME_PATH_NAME = 590416;

const int FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT = 590420;

const int FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME = 590424;

const int FSCTL_IS_FILE_ON_CSV_VOLUME = 590428;

const int FSCTL_CORRUPTION_HANDLING = 590432;

const int FSCTL_OFFLOAD_READ = 606820;

const int FSCTL_OFFLOAD_WRITE = 623208;

const int FSCTL_CSV_INTERNAL = 590444;

const int FSCTL_SET_PURGE_FAILURE_MODE = 590448;

const int FSCTL_QUERY_FILE_LAYOUT = 590455;

const int FSCTL_IS_VOLUME_OWNED_BYCSVFS = 590456;

const int FSCTL_GET_INTEGRITY_INFORMATION = 590460;

const int FSCTL_SET_INTEGRITY_INFORMATION = 639616;

const int FSCTL_QUERY_FILE_REGIONS = 590468;

const int FSCTL_RKF_INTERNAL = 590511;

const int FSCTL_SCRUB_DATA = 590512;

const int FSCTL_REPAIR_COPIES = 639668;

const int FSCTL_DISABLE_LOCAL_BUFFERING = 590520;

const int FSCTL_CSV_MGMT_LOCK = 590524;

const int FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS = 590528;

const int FSCTL_ADVANCE_FILE_ID = 590532;

const int FSCTL_CSV_SYNC_TUNNEL_REQUEST = 590536;

const int FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO = 590540;

const int FSCTL_WRITE_USN_REASON = 590544;

const int FSCTL_CSV_CONTROL = 590548;

const int FSCTL_GET_REFS_VOLUME_DATA = 590552;

const int FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST = 590564;

const int FSCTL_QUERY_STORAGE_CLASSES = 590572;

const int FSCTL_QUERY_REGION_INFO = 590576;

const int FSCTL_USN_TRACK_MODIFIED_RANGES = 590580;

const int FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT = 590592;

const int FSCTL_SVHDX_SYNC_TUNNEL_REQUEST = 590596;

const int FSCTL_SVHDX_SET_INITIATOR_INFORMATION = 590600;

const int FSCTL_SET_EXTERNAL_BACKING = 590604;

const int FSCTL_GET_EXTERNAL_BACKING = 590608;

const int FSCTL_DELETE_EXTERNAL_BACKING = 590612;

const int FSCTL_ENUM_EXTERNAL_BACKING = 590616;

const int FSCTL_ENUM_OVERLAY = 590623;

const int FSCTL_ADD_OVERLAY = 623408;

const int FSCTL_REMOVE_OVERLAY = 623412;

const int FSCTL_UPDATE_OVERLAY = 623416;

const int FSCTL_SHUFFLE_FILE = 639808;

const int FSCTL_DUPLICATE_EXTENTS_TO_FILE = 623428;

const int FSCTL_SPARSE_OVERALLOCATE = 590668;

const int FSCTL_STORAGE_QOS_CONTROL = 590672;

const int FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION = 590684;

const int FSCTL_QUERY_FILE_METADATA_OPTIMIZATION = 590688;

const int FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST = 590692;

const int FSCTL_GET_WOF_VERSION = 590696;

const int FSCTL_HCS_SYNC_TUNNEL_REQUEST = 590700;

const int FSCTL_HCS_ASYNC_TUNNEL_REQUEST = 590704;

const int FSCTL_QUERY_EXTENT_READ_CACHE_INFO = 590711;

const int FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO = 590715;

const int FSCTL_CLEAN_VOLUME_METADATA = 590716;

const int FSCTL_SET_INTEGRITY_INFORMATION_EX = 590720;

const int FSCTL_SUSPEND_OVERLAY = 590724;

const int FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY = 590728;

const int FSCTL_FILESYSTEM_GET_STATISTICS_EX = 590732;

const int FSCTL_QUERY_VOLUME_CONTAINER_STATE = 590736;

const int FSCTL_SET_LAYER_ROOT = 590740;

const int FSCTL_QUERY_DIRECT_ACCESS_EXTENTS = 590747;

const int FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION = 590748;

const int FSCTL_SSDI_STORAGE_REQUEST = 590752;

const int FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE = 590756;

const int FSCTL_READ_UNPRIVILEGED_USN_JOURNAL = 590763;

const int FSCTL_GHOST_FILE_EXTENTS = 623532;

const int FSCTL_QUERY_GHOSTED_FILE_EXTENTS = 590768;

const int FSCTL_UNMAP_SPACE = 590772;

const int FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST = 590776;

const int FSCTL_START_VIRTUALIZATION_INSTANCE = 590784;

const int FSCTL_GET_FILTER_FILE_IDENTIFIER = 590788;

const int FSCTL_STREAMS_QUERY_PARAMETERS = 590788;

const int FSCTL_STREAMS_ASSOCIATE_ID = 590792;

const int FSCTL_STREAMS_QUERY_ID = 590796;

const int FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT = 590803;

const int FSCTL_QUERY_VOLUME_NUMA_INFO = 590804;

const int FSCTL_REFS_DEALLOCATE_RANGES = 590808;

const int FSCTL_QUERY_REFS_SMR_VOLUME_INFO = 590812;

const int FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS = 590816;

const int FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL = 590820;

const int FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX = 623592;

const int FSCTL_QUERY_BAD_RANGES = 590828;

const int FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT = 590832;

const int FSCTL_DELETE_CORRUPTED_REFS_CONTAINER = 590836;

const int FSCTL_SCRUB_UNDISCOVERABLE_ID = 590840;

const int FSCTL_NOTIFY_DATA_CHANGE = 590844;

const int FSCTL_START_VIRTUALIZATION_INSTANCE_EX = 590848;

const int FSCTL_ENCRYPTION_KEY_CONTROL = 590852;

const int FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR = 590856;

const int FSCTL_SET_REPARSE_POINT_EX = 590860;

const int FSCTL_REARRANGE_FILE = 640032;

const int FSCTL_VIRTUAL_STORAGE_PASSTHROUGH = 590884;

const int FSCTL_GET_RETRIEVAL_POINTER_COUNT = 590891;

const int FSCTL_ENABLE_PER_IO_FLAGS = 590892;

const int FSCTL_QUERY_ASYNC_DUPLICATE_EXTENTS_STATUS = 590896;

const int FSCTL_SMB_SHARE_FLUSH_AND_PURGE = 590908;

const int FSCTL_REFS_STREAM_SNAPSHOT_MANAGEMENT = 590912;

const int FSCTL_MANAGE_BYPASS_IO = 590920;

const int FSCTL_REFS_DEALLOCATE_RANGES_EX = 590924;

const int FSCTL_SET_CACHED_RUNS_STATE = 590928;

const int FSCTL_REFS_SET_VOLUME_COMPRESSION_INFO = 590932;

const int FSCTL_REFS_QUERY_VOLUME_COMPRESSION_INFO = 590936;

const int FSCTL_DUPLICATE_CLUSTER = 590940;

const int FSCTL_CREATE_LCN_WEAK_REFERENCE = 590944;

const int FSCTL_CLEAR_LCN_WEAK_REFERENCE = 590948;

const int FSCTL_QUERY_LCN_WEAK_REFERENCE = 590952;

const int FSCTL_CLEAR_ALL_LCN_WEAK_REFERENCES = 590956;

const int FSCTL_REFS_SET_VOLUME_DEDUP_INFO = 590960;

const int FSCTL_REFS_QUERY_VOLUME_DEDUP_INFO = 590964;

const int FSCTL_LMR_QUERY_INFO = 590968;

const int FSCTL_REFS_CHECKPOINT_VOLUME = 590972;

const int FSCTL_REFS_QUERY_VOLUME_TOTAL_SHARED_LCNS = 590976;

const int FSCTL_UPGRADE_VOLUME = 590980;

const int FSCTL_REFS_SET_VOLUME_IO_METRICS_INFO = 590984;

const int FSCTL_REFS_QUERY_VOLUME_IO_METRICS_INFO = 590988;

const int GET_VOLUME_BITMAP_FLAG_MASK_METADATA = 1;

const int FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE = 1;

const int USN_PAGE_SIZE = 4096;

const int USN_REASON_DATA_OVERWRITE = 1;

const int USN_REASON_DATA_EXTEND = 2;

const int USN_REASON_DATA_TRUNCATION = 4;

const int USN_REASON_NAMED_DATA_OVERWRITE = 16;

const int USN_REASON_NAMED_DATA_EXTEND = 32;

const int USN_REASON_NAMED_DATA_TRUNCATION = 64;

const int USN_REASON_FILE_CREATE = 256;

const int USN_REASON_FILE_DELETE = 512;

const int USN_REASON_EA_CHANGE = 1024;

const int USN_REASON_SECURITY_CHANGE = 2048;

const int USN_REASON_RENAME_OLD_NAME = 4096;

const int USN_REASON_RENAME_NEW_NAME = 8192;

const int USN_REASON_INDEXABLE_CHANGE = 16384;

const int USN_REASON_BASIC_INFO_CHANGE = 32768;

const int USN_REASON_HARD_LINK_CHANGE = 65536;

const int USN_REASON_COMPRESSION_CHANGE = 131072;

const int USN_REASON_ENCRYPTION_CHANGE = 262144;

const int USN_REASON_OBJECT_ID_CHANGE = 524288;

const int USN_REASON_REPARSE_POINT_CHANGE = 1048576;

const int USN_REASON_STREAM_CHANGE = 2097152;

const int USN_REASON_TRANSACTED_CHANGE = 4194304;

const int USN_REASON_INTEGRITY_CHANGE = 8388608;

const int USN_REASON_DESIRED_STORAGE_CLASS_CHANGE = 16777216;

const int USN_REASON_CLOSE = 2147483648;

const int USN_DELETE_FLAG_DELETE = 1;

const int USN_DELETE_FLAG_NOTIFY = 2;

const int USN_DELETE_VALID_FLAGS = 3;

const int USN_SOURCE_DATA_MANAGEMENT = 1;

const int USN_SOURCE_AUXILIARY_DATA = 2;

const int USN_SOURCE_REPLICATION_MANAGEMENT = 4;

const int USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT = 8;

const int USN_SOURCE_VALID_FLAGS = 15;

const int MARK_HANDLE_PROTECT_CLUSTERS = 1;

const int MARK_HANDLE_TXF_SYSTEM_LOG = 4;

const int MARK_HANDLE_NOT_TXF_SYSTEM_LOG = 8;

const int MARK_HANDLE_REALTIME = 32;

const int MARK_HANDLE_NOT_REALTIME = 64;

const int MARK_HANDLE_CLOUD_SYNC = 2048;

const int MARK_HANDLE_READ_COPY = 128;

const int MARK_HANDLE_NOT_READ_COPY = 256;

const int MARK_HANDLE_FILTER_METADATA = 512;

const int MARK_HANDLE_RETURN_PURGE_FAILURE = 1024;

const int MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION = 4096;

const int MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO = 8192;

const int MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES = 16384;

const int MARK_HANDLE_SUPPRESS_VOLUME_OPEN_FLUSH = 32768;

const int MARK_HANDLE_ENABLE_CPU_CACHE = 268435456;

const int VOLUME_IS_DIRTY = 1;

const int VOLUME_UPGRADE_SCHEDULED = 2;

const int VOLUME_SESSION_OPEN = 4;

const int FILE_PREFETCH_TYPE_FOR_CREATE = 1;

const int FILE_PREFETCH_TYPE_FOR_DIRENUM = 2;

const int FILE_PREFETCH_TYPE_FOR_CREATE_EX = 3;

const int FILE_PREFETCH_TYPE_FOR_DIRENUM_EX = 4;

const int FILE_PREFETCH_TYPE_MAX = 4;

const int FILESYSTEM_STATISTICS_TYPE_NTFS = 1;

const int FILESYSTEM_STATISTICS_TYPE_FAT = 2;

const int FILESYSTEM_STATISTICS_TYPE_EXFAT = 3;

const int FILESYSTEM_STATISTICS_TYPE_REFS = 4;

const int FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA = 1;

const int FILE_SET_ENCRYPTION = 1;

const int FILE_CLEAR_ENCRYPTION = 2;

const int STREAM_SET_ENCRYPTION = 3;

const int STREAM_CLEAR_ENCRYPTION = 4;

const int MAXIMUM_ENCRYPTION_VALUE = 4;

const int ENCRYPTION_FORMAT_DEFAULT = 1;

const int ENCRYPTED_DATA_INFO_SPARSE_FILE = 1;

const int COPYFILE_SIS_LINK = 1;

const int COPYFILE_SIS_REPLACE = 2;

const int COPYFILE_SIS_FLAGS = 3;

const int SET_REPAIR_ENABLED = 1;

const int SET_REPAIR_WARN_ABOUT_DATA_LOSS = 8;

const int SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT = 16;

const int SET_REPAIR_VALID_MASK = 25;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE = 1;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED = 2;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST = 4;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD = 8;

const int FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE = 16;

const int FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED = 32;

const int FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR = 64;

const int FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED = 128;

const int FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED = 256;

const int FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED = 512;

const int FILE_INITIATE_REPAIR_HINT1_REPAIRED = 1024;

const int FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG = 2048;

const int FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND = 4096;

const int FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK = 8192;

const int FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION = 16384;

const int FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE = 32768;

const int FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST = 65536;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH = 131072;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN = 262144;

const int FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD = 524288;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT = 1048576;

const int FILE_INITIATE_REPAIR_HINT1_SID_VALID = 2097152;

const int FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH = 4194304;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT = 8388608;

const int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE = 16777216;

const int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED = 33554432;

const int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST = 67108864;

const int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD =
    134217728;

const int FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX = 268435456;

const int FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY = 536870912;

const int FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES = 1073741824;

const int FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE = 2147483648;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_LCN = 4294967296;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_VCN = 8589934592;

const int FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT = 17179869184;

const int FILE_INITIATE_REPAIR_HINT1_ORPHAN = 34359738368;

const int FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL = 68719476736;

const int FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT = 137438953472;

const int FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG = 274877906944;

const int FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID = 549755813888;

const int FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH = 1099511627776;

const int FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME =
    2199023255552;

const int FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES =
    4398046511104;

const int TXFS_RM_FLAG_LOGGING_MODE = 1;

const int TXFS_RM_FLAG_RENAME_RM = 2;

const int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 4;

const int TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 8;

const int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 16;

const int TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 32;

const int TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 64;

const int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 128;

const int TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 256;

const int TXFS_RM_FLAG_GROW_LOG = 1024;

const int TXFS_RM_FLAG_SHRINK_LOG = 2048;

const int TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE = 4096;

const int TXFS_RM_FLAG_PRESERVE_CHANGES = 8192;

const int TXFS_RM_FLAG_RESET_RM_AT_NEXT_START = 16384;

const int TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START = 32768;

const int TXFS_RM_FLAG_PREFER_CONSISTENCY = 65536;

const int TXFS_RM_FLAG_PREFER_AVAILABILITY = 131072;

const int TXFS_LOGGING_MODE_SIMPLE = 1;

const int TXFS_LOGGING_MODE_FULL = 2;

const int TXFS_TRANSACTION_STATE_NONE = 0;

const int TXFS_TRANSACTION_STATE_ACTIVE = 1;

const int TXFS_TRANSACTION_STATE_PREPARED = 2;

const int TXFS_TRANSACTION_STATE_NOTACTIVE = 3;

const int TXFS_MODIFY_RM_VALID_FLAGS = 261631;

const int TXFS_RM_STATE_NOT_STARTED = 0;

const int TXFS_RM_STATE_STARTING = 1;

const int TXFS_RM_STATE_ACTIVE = 2;

const int TXFS_RM_STATE_SHUTTING_DOWN = 3;

const int TXFS_QUERY_RM_INFORMATION_VALID_FLAGS = 246192;

const int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN = 1;

const int TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK = 2;

const int TXFS_ROLLFORWARD_REDO_VALID_FLAGS = 3;

const int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX = 1;

const int TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN = 2;

const int TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE = 4;

const int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS = 8;

const int TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT = 16;

const int TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE = 32;

const int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX = 64;

const int TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN = 128;

const int TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT = 512;

const int TXFS_START_RM_FLAG_LOGGING_MODE = 1024;

const int TXFS_START_RM_FLAG_PRESERVE_CHANGES = 2048;

const int TXFS_START_RM_FLAG_PREFER_CONSISTENCY = 4096;

const int TXFS_START_RM_FLAG_PREFER_AVAILABILITY = 8192;

const int TXFS_START_RM_VALID_FLAGS = 15999;

const int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED = 1;

const int TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED = 2;

const int TXFS_TRANSACTED_VERSION_NONTRANSACTED = 4294967294;

const int TXFS_TRANSACTED_VERSION_UNCOMMITTED = 4294967295;

const int TXFS_SAVEPOINT_SET = 1;

const int TXFS_SAVEPOINT_ROLLBACK = 2;

const int TXFS_SAVEPOINT_CLEAR = 4;

const int TXFS_SAVEPOINT_CLEAR_ALL = 16;

const int PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED = 1;

const int PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED = 2;

const int PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY = 4;

const int PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY = 8;

const int PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING = 16;

const int PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM = 32;

const int PERSISTENT_VOLUME_STATE_BACKED_BY_WIM = 64;

const int PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING = 128;

const int PERSISTENT_VOLUME_STATE_TXF_DISABLED = 256;

const int PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES = 512;

const int PERSISTENT_VOLUME_STATE_CHKDSK_RAN_ONCE = 1024;

const int PERSISTENT_VOLUME_STATE_MODIFIED_BY_CHKDSK = 2048;

const int PERSISTENT_VOLUME_STATE_DAX_FORMATTED = 4096;

const int PERSISTENT_VOLUME_STATE_DEV_VOLUME = 8192;

const int PERSISTENT_VOLUME_STATE_TRUSTED_VOLUME = 16384;

const int OPLOCK_LEVEL_CACHE_READ = 1;

const int OPLOCK_LEVEL_CACHE_HANDLE = 2;

const int OPLOCK_LEVEL_CACHE_WRITE = 4;

const int REQUEST_OPLOCK_INPUT_FLAG_REQUEST = 1;

const int REQUEST_OPLOCK_INPUT_FLAG_ACK = 2;

const int REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE = 4;

const int REQUEST_OPLOCK_CURRENT_VERSION = 1;

const int REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED = 1;

const int REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED = 2;

const int REQUEST_OPLOCK_OUTPUT_FLAG_WRITABLE_SECTION_PRESENT = 4;

const int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES = 1;

const int QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES = 2;

const int SD_GLOBAL_CHANGE_TYPE_MACHINE_SID = 1;

const int SD_GLOBAL_CHANGE_TYPE_QUERY_STATS = 65536;

const int SD_GLOBAL_CHANGE_TYPE_ENUM_SDS = 131072;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE = 1;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET = 2;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE = 4;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE = 8;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK = 4278190080;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA = 16777216;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX = 33554432;

const int LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM = 50331648;

const int FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN = 1;

const int FILE_TYPE_NOTIFICATION_FLAG_USAGE_END = 2;

const int CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED = 1;

const int CSV_NAMESPACE_INFO_V1 = 24;

const int CSV_INVALID_DEVICE_NUMBER = 4294967295;

const int CSV_QUERY_MDS_PATH_V2_VERSION_1 = 1;

const int CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED = 1;

const int CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED = 2;

const int CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED = 4;

const int QUERY_FILE_LAYOUT_RESTART = 1;

const int QUERY_FILE_LAYOUT_INCLUDE_NAMES = 2;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAMS = 4;

const int QUERY_FILE_LAYOUT_INCLUDE_EXTENTS = 8;

const int QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO = 16;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED = 32;

const int QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES = 64;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION = 128;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE = 256;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE = 512;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE = 1024;

const int QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES = 2048;

const int QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE = 4096;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE =
    8192;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE =
    16384;

const int QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE = 32768;

const int QUERY_FILE_LAYOUT_SINGLE_INSTANCED = 1;

const int FILE_LAYOUT_NAME_ENTRY_PRIMARY = 1;

const int FILE_LAYOUT_NAME_ENTRY_DOS = 2;

const int STREAM_LAYOUT_ENTRY_IMMOVABLE = 1;

const int STREAM_LAYOUT_ENTRY_PINNED = 2;

const int STREAM_LAYOUT_ENTRY_RESIDENT = 4;

const int STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED = 8;

const int STREAM_LAYOUT_ENTRY_HAS_INFORMATION = 16;

const int STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS = 1;

const int STREAM_EXTENT_ENTRY_ALL_EXTENTS = 2;

const int CHECKSUM_TYPE_UNCHANGED = 65535;

const int CHECKSUM_TYPE_NONE = 0;

const int CHECKSUM_TYPE_CRC32 = 1;

const int CHECKSUM_TYPE_CRC64 = 2;

const int CHECKSUM_TYPE_ECC = 3;

const int CHECKSUM_TYPE_SHA256 = 4;

const int CHECKSUM_TYPE_FIRST_UNUSED_TYPE = 5;

const int FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF = 1;

const int OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE = 1;

const int SET_PURGE_FAILURE_MODE_ENABLED = 1;

const int SET_PURGE_FAILURE_MODE_DISABLED = 2;

const int FILE_REGION_USAGE_VALID_CACHED_DATA = 1;

const int FILE_REGION_USAGE_VALID_NONCACHED_DATA = 2;

const int FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT = 4;

const int FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT = 8;

const int FILE_REGION_USAGE_HUGE_PAGE_ALIGNMENT = 16;

const int FILE_REGION_USAGE_QUERY_ALIGNMENT = 24;

const int VALID_WRITE_USN_REASON_MASK = 2147483649;

const int FILE_STORAGE_TIER_NAME_LENGTH = 256;

const int FILE_STORAGE_TIER_DESCRIPTION_LENGTH = 512;

const int FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY = 131072;

const int FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE = 2097152;

const int FILE_STORAGE_TIER_FLAG_READ_CACHE = 4194304;

const int FILE_STORAGE_TIER_FLAG_PARITY = 8388608;

const int FILE_STORAGE_TIER_FLAG_SMR = 16777216;

const int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE = 2147483648;

const int QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ = 1073741824;

const int QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME = 536870912;

const int FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_VERSION = 1088;

const int QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID = 1;

const int QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID = 2;

const int FSCTL_QUERY_REGION_INFO_INPUT_VERSION = 32;

const int FSCTL_QUERY_REGION_INFO_OUTPUT_VERSION = 64;

const int DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC = 1;

const int DUPLICATE_EXTENTS_DATA_EX_ASYNC = 2;

const int ASYNC_DUPLICATE_EXTENTS_STATUS_V1 = 40;

const int REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V0 = 0;

const int REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1 = 1;

const int REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1 = 1;

const int STREAMS_INVALID_ID = 0;

const int STREAMS_MAX_ID = 65535;

const int STREAMS_ASSOCIATE_ID_CLEAR = 1;

const int STREAMS_ASSOCIATE_ID_SET = 2;

const int DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY = 1;

const int DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED = 2;

const int WOF_CURRENT_VERSION = 1;

const int WOF_PROVIDER_WIM = 1;

const int WOF_PROVIDER_FILE = 2;

const int WOF_PROVIDER_CLOUD = 3;

const int WIM_PROVIDER_HASH_SIZE = 20;

const int WIM_PROVIDER_CURRENT_VERSION = 1;

const int WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE = 1;

const int WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED = 2;

const int WIM_BOOT_OS_WIM = 1;

const int WIM_BOOT_NOT_OS_WIM = 0;

const int FILE_PROVIDER_CURRENT_VERSION = 1;

const int FILE_PROVIDER_SINGLE_FILE = 1;

const int FILE_PROVIDER_COMPRESSION_XPRESS4K = 0;

const int FILE_PROVIDER_COMPRESSION_LZX = 1;

const int FILE_PROVIDER_COMPRESSION_XPRESS8K = 2;

const int FILE_PROVIDER_COMPRESSION_XPRESS16K = 3;

const int FILE_PROVIDER_COMPRESSION_MAXIMUM = 4;

const int FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE = 1;

const int CONTAINER_VOLUME_STATE_HOSTING_CONTAINER = 1;

const int CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT = 1;

const int CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT = 2;

const int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT = 4;

const int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT = 8;

const int CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT = 16;

const int CONTAINER_ROOT_INFO_FLAG_BIND_ROOT = 32;

const int CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT = 64;

const int CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT = 128;

const int CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME = 256;

const int CONTAINER_ROOT_INFO_FLAG_UNION_LAYER_ROOT = 512;

const int CONTAINER_ROOT_INFO_VALID_FLAGS = 1023;

const int PROJFS_PROTOCOL_VERSION = 3;

const int FS_BPIO_OUTPUT_ENABLE_SIZE = 352;

const int FS_BPIO_OUTPUT_QUERY_SIZE = 352;

const int FS_BPIO_OUTPUT_DISABLE_SIZE = 24;

const int FS_BPIO_OUTPUT_VOLUME_STACK_PAUSE_SIZE = 24;

const int FS_BPIO_OUTPUT_VOLUME_STACK_RESUME_SIZE = 352;

const int FS_BPIO_OUTPUT_STREAM_PAUSE_SIZE = 24;

const int FS_BPIO_OUTPUT_STREAM_RESUME_SIZE = 352;

const int FS_BPIO_OUTPUT_GET_INFO_SIZE = 96;

const int IOCTL_VOLUME_BASE = 86;

const int IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096;

const int IOCTL_VOLUME_ONLINE = 5685256;

const int IOCTL_VOLUME_OFFLINE = 5685260;

const int IOCTL_VOLUME_IS_CLUSTERED = 5636144;

const int IOCTL_VOLUME_GET_GPT_ATTRIBUTES = 5636152;

const int IRP_EXT_TRACK_OFFSET_HEADER_VALIDATION_VALUE = 21583;

const int EFS_TRACKED_OFFSET_HEADER_FLAG = 1;

const int SPACES_TRACKED_OFFSET_HEADER_FLAG = 2;

const int SCARD_ATR_LENGTH = 33;

const int SCARD_PROTOCOL_UNDEFINED = 0;

const int SCARD_PROTOCOL_T0 = 1;

const int SCARD_PROTOCOL_T1 = 2;

const int SCARD_PROTOCOL_RAW = 65536;

const int SCARD_PROTOCOL_Tx = 3;

const int SCARD_PROTOCOL_DEFAULT = 2147483648;

const int SCARD_PROTOCOL_OPTIMAL = 0;

const int SCARD_POWER_DOWN = 0;

const int SCARD_COLD_RESET = 1;

const int SCARD_WARM_RESET = 2;

const int IOCTL_SMARTCARD_POWER = 3211268;

const int IOCTL_SMARTCARD_GET_ATTRIBUTE = 3211272;

const int IOCTL_SMARTCARD_SET_ATTRIBUTE = 3211276;

const int IOCTL_SMARTCARD_CONFISCATE = 3211280;

const int IOCTL_SMARTCARD_TRANSMIT = 3211284;

const int IOCTL_SMARTCARD_EJECT = 3211288;

const int IOCTL_SMARTCARD_SWALLOW = 3211292;

const int IOCTL_SMARTCARD_IS_PRESENT = 3211304;

const int IOCTL_SMARTCARD_IS_ABSENT = 3211308;

const int IOCTL_SMARTCARD_SET_PROTOCOL = 3211312;

const int IOCTL_SMARTCARD_GET_STATE = 3211320;

const int IOCTL_SMARTCARD_GET_LAST_ERROR = 3211324;

const int IOCTL_SMARTCARD_GET_PERF_CNTR = 3211328;

const int IOCTL_SMARTCARD_GET_FEATURE_REQUEST = 3224864;

const int MAXIMUM_ATTR_STRING_LENGTH = 32;

const int MAXIMUM_SMARTCARD_READERS = 10;

const int SCARD_CLASS_VENDOR_INFO = 1;

const int SCARD_CLASS_COMMUNICATIONS = 2;

const int SCARD_CLASS_PROTOCOL = 3;

const int SCARD_CLASS_POWER_MGMT = 4;

const int SCARD_CLASS_SECURITY = 5;

const int SCARD_CLASS_MECHANICAL = 6;

const int SCARD_CLASS_VENDOR_DEFINED = 7;

const int SCARD_CLASS_IFD_PROTOCOL = 8;

const int SCARD_CLASS_ICC_STATE = 9;

const int SCARD_CLASS_PERF = 32766;

const int SCARD_CLASS_SYSTEM = 32767;

const int SCARD_ATTR_VENDOR_NAME = 65792;

const int SCARD_ATTR_VENDOR_IFD_TYPE = 65793;

const int SCARD_ATTR_VENDOR_IFD_VERSION = 65794;

const int SCARD_ATTR_VENDOR_IFD_SERIAL_NO = 65795;

const int SCARD_ATTR_CHANNEL_ID = 131344;

const int SCARD_ATTR_PROTOCOL_TYPES = 196896;

const int SCARD_ATTR_DEFAULT_CLK = 196897;

const int SCARD_ATTR_MAX_CLK = 196898;

const int SCARD_ATTR_DEFAULT_DATA_RATE = 196899;

const int SCARD_ATTR_MAX_DATA_RATE = 196900;

const int SCARD_ATTR_MAX_IFSD = 196901;

const int SCARD_ATTR_POWER_MGMT_SUPPORT = 262449;

const int SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = 328000;

const int SCARD_ATTR_USER_AUTH_INPUT_DEVICE = 328002;

const int SCARD_ATTR_CHARACTERISTICS = 393552;

const int SCARD_ATTR_CURRENT_PROTOCOL_TYPE = 524801;

const int SCARD_ATTR_CURRENT_CLK = 524802;

const int SCARD_ATTR_CURRENT_F = 524803;

const int SCARD_ATTR_CURRENT_D = 524804;

const int SCARD_ATTR_CURRENT_N = 524805;

const int SCARD_ATTR_CURRENT_W = 524806;

const int SCARD_ATTR_CURRENT_IFSC = 524807;

const int SCARD_ATTR_CURRENT_IFSD = 524808;

const int SCARD_ATTR_CURRENT_BWT = 524809;

const int SCARD_ATTR_CURRENT_CWT = 524810;

const int SCARD_ATTR_CURRENT_EBC_ENCODING = 524811;

const int SCARD_ATTR_EXTENDED_BWT = 524812;

const int SCARD_ATTR_ICC_PRESENCE = 590592;

const int SCARD_ATTR_ICC_INTERFACE_STATUS = 590593;

const int SCARD_ATTR_CURRENT_IO_STATE = 590594;

const int SCARD_ATTR_ATR_STRING = 590595;

const int SCARD_ATTR_ICC_TYPE_PER_ATR = 590596;

const int SCARD_ATTR_ESC_RESET = 499712;

const int SCARD_ATTR_ESC_CANCEL = 499715;

const int SCARD_ATTR_ESC_AUTHREQUEST = 499717;

const int SCARD_ATTR_MAXINPUT = 499719;

const int SCARD_ATTR_VENDOR_SPECIFIC_INFO = 499720;

const int SCARD_ATTR_DEVICE_UNIT = 2147418113;

const int SCARD_ATTR_DEVICE_IN_USE = 2147418114;

const int SCARD_ATTR_DEVICE_FRIENDLY_NAME_A = 2147418115;

const int SCARD_ATTR_DEVICE_SYSTEM_NAME_A = 2147418116;

const int SCARD_ATTR_DEVICE_FRIENDLY_NAME_W = 2147418117;

const int SCARD_ATTR_DEVICE_SYSTEM_NAME_W = 2147418118;

const int SCARD_ATTR_SUPRESS_T1_IFS_REQUEST = 2147418119;

const int SCARD_PERF_NUM_TRANSMISSIONS = 2147352577;

const int SCARD_PERF_BYTES_TRANSMITTED = 2147352578;

const int SCARD_PERF_TRANSMISSION_TIME = 2147352579;

const int SCARD_ATTR_DEVICE_FRIENDLY_NAME = 2147418115;

const int SCARD_ATTR_DEVICE_SYSTEM_NAME = 2147418116;

const int SCARD_T0_HEADER_LENGTH = 7;

const int SCARD_T0_CMD_LENGTH = 5;

const int SCARD_T1_PROLOGUE_LENGTH = 3;

const int SCARD_T1_EPILOGUE_LENGTH = 2;

const int SCARD_T1_EPILOGUE_LENGTH_LRC = 1;

const int SCARD_T1_MAX_IFS = 254;

const int SCARD_UNKNOWN = 0;

const int SCARD_ABSENT = 1;

const int SCARD_PRESENT = 2;

const int SCARD_SWALLOWED = 3;

const int SCARD_POWERED = 4;

const int SCARD_NEGOTIABLE = 5;

const int SCARD_SPECIFIC = 6;

const int SCARD_READER_SWALLOWS = 1;

const int SCARD_READER_EJECTS = 2;

const int SCARD_READER_CONFISCATES = 4;

const int SCARD_READER_CONTACTLESS = 8;

const int SCARD_READER_TYPE_SERIAL = 1;

const int SCARD_READER_TYPE_PARALELL = 2;

const int SCARD_READER_TYPE_KEYBOARD = 4;

const int SCARD_READER_TYPE_SCSI = 8;

const int SCARD_READER_TYPE_IDE = 16;

const int SCARD_READER_TYPE_USB = 32;

const int SCARD_READER_TYPE_PCMCIA = 64;

const int SCARD_READER_TYPE_TPM = 128;

const int SCARD_READER_TYPE_NFC = 256;

const int SCARD_READER_TYPE_UICC = 512;

const int SCARD_READER_TYPE_NGC = 1024;

const int SCARD_READER_TYPE_EMBEDDEDSE = 2048;

const int SCARD_READER_TYPE_VENDOR = 240;

const int SCARD_AUTOALLOCATE = 4294967295;

const int SCARD_SCOPE_USER = 0;

const int SCARD_SCOPE_TERMINAL = 1;

const int SCARD_SCOPE_SYSTEM = 2;

const String SCARD_ALL_READERS = 'SCard\$AllReaders';

const String SCARD_DEFAULT_READERS = 'SCard\$DefaultReaders';

const String SCARD_LOCAL_READERS = 'SCard\$LocalReaders';

const String SCARD_SYSTEM_READERS = 'SCard\$SystemReaders';

const int SCARD_PROVIDER_PRIMARY = 1;

const int SCARD_PROVIDER_CSP = 2;

const int SCARD_PROVIDER_KSP = 3;

const int SCARD_STATE_UNAWARE = 0;

const int SCARD_STATE_IGNORE = 1;

const int SCARD_STATE_CHANGED = 2;

const int SCARD_STATE_UNKNOWN = 4;

const int SCARD_STATE_UNAVAILABLE = 8;

const int SCARD_STATE_EMPTY = 16;

const int SCARD_STATE_PRESENT = 32;

const int SCARD_STATE_ATRMATCH = 64;

const int SCARD_STATE_EXCLUSIVE = 128;

const int SCARD_STATE_INUSE = 256;

const int SCARD_STATE_MUTE = 512;

const int SCARD_STATE_UNPOWERED = 1024;

const int SCARD_SHARE_EXCLUSIVE = 1;

const int SCARD_SHARE_SHARED = 2;

const int SCARD_SHARE_DIRECT = 3;

const int SCARD_LEAVE_CARD = 0;

const int SCARD_RESET_CARD = 1;

const int SCARD_UNPOWER_CARD = 2;

const int SCARD_EJECT_CARD = 3;

const int SC_DLG_MINIMAL_UI = 1;

const int SC_DLG_NO_UI = 2;

const int SC_DLG_FORCE_UI = 4;

const int SCERR_NOCARDNAME = 16384;

const int SCERR_NOGUIDS = 32768;

const int SCARD_READER_SEL_AUTH_PACKAGE = 4294966667;

const int SCARD_AUDIT_CHV_FAILURE = 0;

const int SCARD_AUDIT_CHV_SUCCESS = 1;

const int MAXPROPPAGES = 100;

const int PSP_DEFAULT = 0;

const int PSP_DLGINDIRECT = 1;

const int PSP_USEHICON = 2;

const int PSP_USEICONID = 4;

const int PSP_USETITLE = 8;

const int PSP_RTLREADING = 16;

const int PSP_HASHELP = 32;

const int PSP_USEREFPARENT = 64;

const int PSP_USECALLBACK = 128;

const int PSP_PREMATURE = 1024;

const int PSP_HIDEHEADER = 2048;

const int PSP_USEHEADERTITLE = 4096;

const int PSP_USEHEADERSUBTITLE = 8192;

const int PSP_USEFUSIONCONTEXT = 16384;

const int PSPCB_ADDREF = 0;

const int PSPCB_RELEASE = 1;

const int PSPCB_CREATE = 2;

const int PROPSHEETPAGEA_V1_SIZE = 72;

const int PROPSHEETPAGEW_V1_SIZE = 72;

const int PROPSHEETPAGEA_V2_SIZE = 88;

const int PROPSHEETPAGEW_V2_SIZE = 88;

const int PROPSHEETPAGEA_V3_SIZE = 96;

const int PROPSHEETPAGEW_V3_SIZE = 96;

const int PROPSHEETPAGEA_V4_SIZE = 104;

const int PROPSHEETPAGEW_V4_SIZE = 104;

const int PROPSHEETPAGE_V1_SIZE = 72;

const int PROPSHEETPAGE_V2_SIZE = 88;

const int PSH_DEFAULT = 0;

const int PSH_PROPTITLE = 1;

const int PSH_USEHICON = 2;

const int PSH_USEICONID = 4;

const int PSH_PROPSHEETPAGE = 8;

const int PSH_WIZARDHASFINISH = 16;

const int PSH_WIZARD = 32;

const int PSH_USEPSTARTPAGE = 64;

const int PSH_NOAPPLYNOW = 128;

const int PSH_USECALLBACK = 256;

const int PSH_HASHELP = 512;

const int PSH_MODELESS = 1024;

const int PSH_RTLREADING = 2048;

const int PSH_WIZARDCONTEXTHELP = 4096;

const int PSH_WIZARD97 = 16777216;

const int PSH_WATERMARK = 32768;

const int PSH_USEHBMWATERMARK = 65536;

const int PSH_USEHPLWATERMARK = 131072;

const int PSH_STRETCHWATERMARK = 262144;

const int PSH_HEADER = 524288;

const int PSH_USEHBMHEADER = 1048576;

const int PSH_USEPAGELANG = 2097152;

const int PSH_WIZARD_LITE = 4194304;

const int PSH_NOCONTEXTHELP = 33554432;

const int PSH_AEROWIZARD = 16384;

const int PSH_RESIZABLE = 67108864;

const int PSH_HEADERBITMAP = 134217728;

const int PSH_NOMARGIN = 268435456;

const int PROPSHEETHEADERA_V1_SIZE = 72;

const int PROPSHEETHEADERW_V1_SIZE = 72;

const int PROPSHEETHEADERA_V2_SIZE = 96;

const int PROPSHEETHEADERW_V2_SIZE = 96;

const int PROPSHEETHEADER_V1_SIZE = 72;

const int PROPSHEETHEADER_V2_SIZE = 96;

const int PSCB_INITIALIZED = 1;

const int PSCB_PRECREATE = 2;

const int PSCB_BUTTONPRESSED = 3;

const int PSN_FIRST = 4294967096;

const int PSN_LAST = 4294966997;

const int PSN_SETACTIVE = 4294967096;

const int PSN_KILLACTIVE = 4294967095;

const int PSN_APPLY = 4294967094;

const int PSN_RESET = 4294967093;

const int PSN_HELP = 4294967091;

const int PSN_WIZBACK = 4294967090;

const int PSN_WIZNEXT = 4294967089;

const int PSN_WIZFINISH = 4294967088;

const int PSN_QUERYCANCEL = 4294967087;

const int PSN_GETOBJECT = 4294967086;

const int PSN_TRANSLATEACCELERATOR = 4294967084;

const int PSN_QUERYINITIALFOCUS = 4294967083;

const int PSNRET_NOERROR = 0;

const int PSNRET_INVALID = 1;

const int PSNRET_INVALID_NOCHANGEPAGE = 2;

const int PSNRET_MESSAGEHANDLED = 3;

const int PSM_SETCURSEL = 1125;

const int PSM_REMOVEPAGE = 1126;

const int PSM_ADDPAGE = 1127;

const int PSM_CHANGED = 1128;

const int PSM_RESTARTWINDOWS = 1129;

const int PSM_REBOOTSYSTEM = 1130;

const int PSM_CANCELTOCLOSE = 1131;

const int PSM_QUERYSIBLINGS = 1132;

const int PSM_UNCHANGED = 1133;

const int PSM_APPLY = 1134;

const int PSM_SETTITLEA = 1135;

const int PSM_SETTITLEW = 1144;

const int PSM_SETTITLE = 1135;

const int PSM_SETWIZBUTTONS = 1136;

const int PSWIZB_BACK = 1;

const int PSWIZB_NEXT = 2;

const int PSWIZB_FINISH = 4;

const int PSWIZB_DISABLEDFINISH = 8;

const int PSWIZBF_ELEVATIONREQUIRED = 1;

const int PSWIZB_CANCEL = 16;

const int PSM_PRESSBUTTON = 1137;

const int PSBTN_BACK = 0;

const int PSBTN_NEXT = 1;

const int PSBTN_FINISH = 2;

const int PSBTN_OK = 3;

const int PSBTN_APPLYNOW = 4;

const int PSBTN_CANCEL = 5;

const int PSBTN_HELP = 6;

const int PSBTN_MAX = 6;

const int PSM_SETCURSELID = 1138;

const int PSM_SETFINISHTEXTA = 1139;

const int PSM_SETFINISHTEXTW = 1145;

const int PSM_SETFINISHTEXT = 1139;

const int PSM_GETTABCONTROL = 1140;

const int PSM_ISDIALOGMESSAGE = 1141;

const int PSM_GETCURRENTPAGEHWND = 1142;

const int PSM_INSERTPAGE = 1143;

const int PSWIZF_SETCOLOR = 4294967295;

const int PSM_SETHEADERTITLEA = 1149;

const int PSM_SETHEADERTITLEW = 1150;

const int PSM_SETHEADERTITLE = 1149;

const int PSM_SETHEADERSUBTITLEA = 1151;

const int PSM_SETHEADERSUBTITLEW = 1152;

const int PSM_SETHEADERSUBTITLE = 1151;

const int PSM_HWNDTOINDEX = 1153;

const int PSM_INDEXTOHWND = 1154;

const int PSM_PAGETOINDEX = 1155;

const int PSM_INDEXTOPAGE = 1156;

const int PSM_IDTOINDEX = 1157;

const int PSM_INDEXTOID = 1158;

const int PSM_GETRESULT = 1159;

const int PSM_RECALCPAGESIZES = 1160;

const int PSM_SETNEXTTEXTW = 1161;

const int PSM_SETNEXTTEXT = 1161;

const int PSWIZB_SHOW = 0;

const int PSWIZB_RESTORE = 1;

const int PSM_SHOWWIZBUTTONS = 1162;

const int PSM_ENABLEWIZBUTTONS = 1163;

const int PSM_SETBUTTONTEXTW = 1164;

const int PSM_SETBUTTONTEXT = 1164;

const int ID_PSRESTARTWINDOWS = 2;

const int ID_PSREBOOTSYSTEM = 3;

const int WIZ_CXDLG = 276;

const int WIZ_CYDLG = 140;

const int WIZ_CXBMP = 80;

const int WIZ_BODYX = 92;

const int WIZ_BODYCX = 184;

const int PROP_SM_CXDLG = 212;

const int PROP_SM_CYDLG = 188;

const int PROP_MED_CXDLG = 227;

const int PROP_MED_CYDLG = 215;

const int PROP_LG_CXDLG = 252;

const int PROP_LG_CYDLG = 218;

const int DSPRINT_PUBLISH = 1;

const int DSPRINT_UPDATE = 2;

const int DSPRINT_UNPUBLISH = 4;

const int DSPRINT_REPUBLISH = 8;

const int DSPRINT_PENDING = 2147483648;

const int PRINTER_CONTROL_PAUSE = 1;

const int PRINTER_CONTROL_RESUME = 2;

const int PRINTER_CONTROL_PURGE = 3;

const int PRINTER_CONTROL_SET_STATUS = 4;

const int PRINTER_STATUS_PAUSED = 1;

const int PRINTER_STATUS_ERROR = 2;

const int PRINTER_STATUS_PENDING_DELETION = 4;

const int PRINTER_STATUS_PAPER_JAM = 8;

const int PRINTER_STATUS_PAPER_OUT = 16;

const int PRINTER_STATUS_MANUAL_FEED = 32;

const int PRINTER_STATUS_PAPER_PROBLEM = 64;

const int PRINTER_STATUS_OFFLINE = 128;

const int PRINTER_STATUS_IO_ACTIVE = 256;

const int PRINTER_STATUS_BUSY = 512;

const int PRINTER_STATUS_PRINTING = 1024;

const int PRINTER_STATUS_OUTPUT_BIN_FULL = 2048;

const int PRINTER_STATUS_NOT_AVAILABLE = 4096;

const int PRINTER_STATUS_WAITING = 8192;

const int PRINTER_STATUS_PROCESSING = 16384;

const int PRINTER_STATUS_INITIALIZING = 32768;

const int PRINTER_STATUS_WARMING_UP = 65536;

const int PRINTER_STATUS_TONER_LOW = 131072;

const int PRINTER_STATUS_NO_TONER = 262144;

const int PRINTER_STATUS_PAGE_PUNT = 524288;

const int PRINTER_STATUS_USER_INTERVENTION = 1048576;

const int PRINTER_STATUS_OUT_OF_MEMORY = 2097152;

const int PRINTER_STATUS_DOOR_OPEN = 4194304;

const int PRINTER_STATUS_SERVER_UNKNOWN = 8388608;

const int PRINTER_STATUS_POWER_SAVE = 16777216;

const int PRINTER_STATUS_SERVER_OFFLINE = 33554432;

const int PRINTER_STATUS_DRIVER_UPDATE_NEEDED = 67108864;

const int PRINTER_ATTRIBUTE_QUEUED = 1;

const int PRINTER_ATTRIBUTE_DIRECT = 2;

const int PRINTER_ATTRIBUTE_DEFAULT = 4;

const int PRINTER_ATTRIBUTE_SHARED = 8;

const int PRINTER_ATTRIBUTE_NETWORK = 16;

const int PRINTER_ATTRIBUTE_HIDDEN = 32;

const int PRINTER_ATTRIBUTE_LOCAL = 64;

const int PRINTER_ATTRIBUTE_ENABLE_DEVQ = 128;

const int PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 256;

const int PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 512;

const int PRINTER_ATTRIBUTE_WORK_OFFLINE = 1024;

const int PRINTER_ATTRIBUTE_ENABLE_BIDI = 2048;

const int PRINTER_ATTRIBUTE_RAW_ONLY = 4096;

const int PRINTER_ATTRIBUTE_PUBLISHED = 8192;

const int PRINTER_ATTRIBUTE_FAX = 16384;

const int PRINTER_ATTRIBUTE_TS = 32768;

const int PRINTER_ATTRIBUTE_PUSHED_USER = 131072;

const int PRINTER_ATTRIBUTE_PUSHED_MACHINE = 262144;

const int PRINTER_ATTRIBUTE_MACHINE = 524288;

const int PRINTER_ATTRIBUTE_FRIENDLY_NAME = 1048576;

const int PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER = 2097152;

const int PRINTER_ATTRIBUTE_PER_USER = 4194304;

const int PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD = 8388608;

const int NO_PRIORITY = 0;

const int MAX_PRIORITY = 99;

const int MIN_PRIORITY = 1;

const int DEF_PRIORITY = 1;

const int JOB_CONTROL_PAUSE = 1;

const int JOB_CONTROL_RESUME = 2;

const int JOB_CONTROL_CANCEL = 3;

const int JOB_CONTROL_RESTART = 4;

const int JOB_CONTROL_DELETE = 5;

const int JOB_CONTROL_SENT_TO_PRINTER = 6;

const int JOB_CONTROL_LAST_PAGE_EJECTED = 7;

const int JOB_CONTROL_RETAIN = 8;

const int JOB_CONTROL_RELEASE = 9;

const int JOB_CONTROL_SEND_TOAST = 10;

const int JOB_STATUS_PAUSED = 1;

const int JOB_STATUS_ERROR = 2;

const int JOB_STATUS_DELETING = 4;

const int JOB_STATUS_SPOOLING = 8;

const int JOB_STATUS_PRINTING = 16;

const int JOB_STATUS_OFFLINE = 32;

const int JOB_STATUS_PAPEROUT = 64;

const int JOB_STATUS_PRINTED = 128;

const int JOB_STATUS_DELETED = 256;

const int JOB_STATUS_BLOCKED_DEVQ = 512;

const int JOB_STATUS_USER_INTERVENTION = 1024;

const int JOB_STATUS_RESTART = 2048;

const int JOB_STATUS_COMPLETE = 4096;

const int JOB_STATUS_RETAINED = 8192;

const int JOB_STATUS_RENDERING_LOCALLY = 16384;

const int JOB_POSITION_UNSPECIFIED = 0;

const int PRINTER_DRIVER_PACKAGE_AWARE = 1;

const int PRINTER_DRIVER_XPS = 2;

const int PRINTER_DRIVER_SANDBOX_ENABLED = 4;

const int PRINTER_DRIVER_CLASS = 8;

const int PRINTER_DRIVER_DERIVED = 16;

const int PRINTER_DRIVER_NOT_SHAREABLE = 32;

const int PRINTER_DRIVER_CATEGORY_FAX = 64;

const int PRINTER_DRIVER_CATEGORY_FILE = 128;

const int PRINTER_DRIVER_CATEGORY_VIRTUAL = 256;

const int PRINTER_DRIVER_CATEGORY_SERVICE = 512;

const int PRINTER_DRIVER_SOFT_RESET_REQUIRED = 1024;

const int PRINTER_DRIVER_SANDBOX_DISABLED = 2048;

const int PRINTER_DRIVER_CATEGORY_3D = 4096;

const int PRINTER_DRIVER_CATEGORY_CLOUD = 8192;

const int DRIVER_KERNELMODE = 1;

const int DRIVER_USERMODE = 2;

const int DPD_DELETE_UNUSED_FILES = 1;

const int DPD_DELETE_SPECIFIC_VERSION = 2;

const int DPD_DELETE_ALL_FILES = 4;

const int APD_STRICT_UPGRADE = 1;

const int APD_STRICT_DOWNGRADE = 2;

const int APD_COPY_ALL_FILES = 4;

const int APD_COPY_NEW_FILES = 8;

const int APD_COPY_FROM_DIRECTORY = 16;

const int STRING_NONE = 1;

const int STRING_MUIDLL = 2;

const int STRING_LANGPAIR = 4;

const int MAX_FORM_KEYWORD_LENGTH = 64;

const int DI_CHANNEL = 1;

const int DI_READ_SPOOL_JOB = 3;

const int DI_MEMORYMAP_WRITE = 1;

const int FORM_USER = 0;

const int FORM_BUILTIN = 1;

const int FORM_PRINTER = 2;

const int NORMAL_PRINT = 0;

const int REVERSE_PRINT = 1;

const int PPCAPS_RIGHT_THEN_DOWN = 1;

const int PPCAPS_DOWN_THEN_RIGHT = 2;

const int PPCAPS_LEFT_THEN_DOWN = 4;

const int PPCAPS_DOWN_THEN_LEFT = 8;

const int PPCAPS_BORDER_PRINT = 1;

const int PPCAPS_BOOKLET_EDGE = 1;

const int PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX = 1;

const int PPCAPS_DONT_SEND_EXTRA_PAGES_FOR_DUPLEX = 2;

const int PPCAPS_SQUARE_SCALING = 1;

const int PORT_TYPE_WRITE = 1;

const int PORT_TYPE_READ = 2;

const int PORT_TYPE_REDIRECTED = 4;

const int PORT_TYPE_NET_ATTACHED = 8;

const int PORT_STATUS_TYPE_ERROR = 1;

const int PORT_STATUS_TYPE_WARNING = 2;

const int PORT_STATUS_TYPE_INFO = 3;

const int PORT_STATUS_OFFLINE = 1;

const int PORT_STATUS_PAPER_JAM = 2;

const int PORT_STATUS_PAPER_OUT = 3;

const int PORT_STATUS_OUTPUT_BIN_FULL = 4;

const int PORT_STATUS_PAPER_PROBLEM = 5;

const int PORT_STATUS_NO_TONER = 6;

const int PORT_STATUS_DOOR_OPEN = 7;

const int PORT_STATUS_USER_INTERVENTION = 8;

const int PORT_STATUS_OUT_OF_MEMORY = 9;

const int PORT_STATUS_TONER_LOW = 10;

const int PORT_STATUS_WARMING_UP = 11;

const int PORT_STATUS_POWER_SAVE = 12;

const int PRINTER_ENUM_DEFAULT = 1;

const int PRINTER_ENUM_LOCAL = 2;

const int PRINTER_ENUM_CONNECTIONS = 4;

const int PRINTER_ENUM_FAVORITE = 4;

const int PRINTER_ENUM_NAME = 8;

const int PRINTER_ENUM_REMOTE = 16;

const int PRINTER_ENUM_SHARED = 32;

const int PRINTER_ENUM_NETWORK = 64;

const int PRINTER_ENUM_EXPAND = 16384;

const int PRINTER_ENUM_CONTAINER = 32768;

const int PRINTER_ENUM_ICONMASK = 16711680;

const int PRINTER_ENUM_ICON1 = 65536;

const int PRINTER_ENUM_ICON2 = 131072;

const int PRINTER_ENUM_ICON3 = 262144;

const int PRINTER_ENUM_ICON4 = 524288;

const int PRINTER_ENUM_ICON5 = 1048576;

const int PRINTER_ENUM_ICON6 = 2097152;

const int PRINTER_ENUM_ICON7 = 4194304;

const int PRINTER_ENUM_ICON8 = 8388608;

const int PRINTER_ENUM_HIDE = 16777216;

const int PRINTER_ENUM_CATEGORY_ALL = 33554432;

const int PRINTER_ENUM_CATEGORY_3D = 67108864;

const int SPOOL_FILE_PERSISTENT = 1;

const int SPOOL_FILE_TEMPORARY = 2;

const int PRINTER_NOTIFY_TYPE = 0;

const int JOB_NOTIFY_TYPE = 1;

const int SERVER_NOTIFY_TYPE = 2;

const int PRINTER_NOTIFY_FIELD_SERVER_NAME = 0;

const int PRINTER_NOTIFY_FIELD_PRINTER_NAME = 1;

const int PRINTER_NOTIFY_FIELD_SHARE_NAME = 2;

const int PRINTER_NOTIFY_FIELD_PORT_NAME = 3;

const int PRINTER_NOTIFY_FIELD_DRIVER_NAME = 4;

const int PRINTER_NOTIFY_FIELD_COMMENT = 5;

const int PRINTER_NOTIFY_FIELD_LOCATION = 6;

const int PRINTER_NOTIFY_FIELD_DEVMODE = 7;

const int PRINTER_NOTIFY_FIELD_SEPFILE = 8;

const int PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 9;

const int PRINTER_NOTIFY_FIELD_PARAMETERS = 10;

const int PRINTER_NOTIFY_FIELD_DATATYPE = 11;

const int PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 12;

const int PRINTER_NOTIFY_FIELD_ATTRIBUTES = 13;

const int PRINTER_NOTIFY_FIELD_PRIORITY = 14;

const int PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 15;

const int PRINTER_NOTIFY_FIELD_START_TIME = 16;

const int PRINTER_NOTIFY_FIELD_UNTIL_TIME = 17;

const int PRINTER_NOTIFY_FIELD_STATUS = 18;

const int PRINTER_NOTIFY_FIELD_STATUS_STRING = 19;

const int PRINTER_NOTIFY_FIELD_CJOBS = 20;

const int PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 21;

const int PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 22;

const int PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 23;

const int PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 24;

const int PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 25;

const int PRINTER_NOTIFY_FIELD_OBJECT_GUID = 26;

const int PRINTER_NOTIFY_FIELD_FRIENDLY_NAME = 27;

const int PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING = 28;

const int JOB_NOTIFY_FIELD_PRINTER_NAME = 0;

const int JOB_NOTIFY_FIELD_MACHINE_NAME = 1;

const int JOB_NOTIFY_FIELD_PORT_NAME = 2;

const int JOB_NOTIFY_FIELD_USER_NAME = 3;

const int JOB_NOTIFY_FIELD_NOTIFY_NAME = 4;

const int JOB_NOTIFY_FIELD_DATATYPE = 5;

const int JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 6;

const int JOB_NOTIFY_FIELD_PARAMETERS = 7;

const int JOB_NOTIFY_FIELD_DRIVER_NAME = 8;

const int JOB_NOTIFY_FIELD_DEVMODE = 9;

const int JOB_NOTIFY_FIELD_STATUS = 10;

const int JOB_NOTIFY_FIELD_STATUS_STRING = 11;

const int JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 12;

const int JOB_NOTIFY_FIELD_DOCUMENT = 13;

const int JOB_NOTIFY_FIELD_PRIORITY = 14;

const int JOB_NOTIFY_FIELD_POSITION = 15;

const int JOB_NOTIFY_FIELD_SUBMITTED = 16;

const int JOB_NOTIFY_FIELD_START_TIME = 17;

const int JOB_NOTIFY_FIELD_UNTIL_TIME = 18;

const int JOB_NOTIFY_FIELD_TIME = 19;

const int JOB_NOTIFY_FIELD_TOTAL_PAGES = 20;

const int JOB_NOTIFY_FIELD_PAGES_PRINTED = 21;

const int JOB_NOTIFY_FIELD_TOTAL_BYTES = 22;

const int JOB_NOTIFY_FIELD_BYTES_PRINTED = 23;

const int JOB_NOTIFY_FIELD_REMOTE_JOB_ID = 24;

const int SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP = 0;

const int PRINTER_NOTIFY_CATEGORY_ALL = 4096;

const int PRINTER_NOTIFY_CATEGORY_3D = 8192;

const int PRINTER_NOTIFY_OPTIONS_REFRESH = 1;

const int PRINTER_NOTIFY_INFO_DISCARDED = 1;

const String BIDI_ACTION_ENUM_SCHEMA = 'E';

const String BIDI_ACTION_GET = 'G';

const String BIDI_ACTION_SET = 'S';

const String BIDI_ACTION_GET_ALL = 'G';

const String BIDI_ACTION_GET_WITH_ARGUMENT = 'G';

const int BIDI_ACCESS_ADMINISTRATOR = 1;

const int BIDI_ACCESS_USER = 2;

const int ERROR_BIDI_STATUS_OK = 0;

const int ERROR_BIDI_NOT_SUPPORTED = 50;

const int ERROR_BIDI_ERROR_BASE = 13000;

const int ERROR_BIDI_STATUS_WARNING = 13001;

const int ERROR_BIDI_SCHEMA_READ_ONLY = 13002;

const int ERROR_BIDI_SERVER_OFFLINE = 13003;

const int ERROR_BIDI_DEVICE_OFFLINE = 13004;

const int ERROR_BIDI_SCHEMA_NOT_SUPPORTED = 13005;

const int ERROR_BIDI_SET_DIFFERENT_TYPE = 13006;

const int ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH = 13007;

const int ERROR_BIDI_SET_INVALID_SCHEMAPATH = 13008;

const int ERROR_BIDI_SET_UNKNOWN_FAILURE = 13009;

const int ERROR_BIDI_SCHEMA_WRITE_ONLY = 13010;

const int ERROR_BIDI_GET_REQUIRES_ARGUMENT = 13011;

const int ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED = 13012;

const int ERROR_BIDI_GET_MISSING_ARGUMENT = 13013;

const int ERROR_BIDI_DEVICE_CONFIG_UNCHANGED = 13014;

const int ERROR_BIDI_NO_LOCALIZED_RESOURCES = 13015;

const int ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS = 13016;

const int ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE = 13017;

const int ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT = 13018;

const int PRINTER_CHANGE_ADD_PRINTER = 1;

const int PRINTER_CHANGE_SET_PRINTER = 2;

const int PRINTER_CHANGE_DELETE_PRINTER = 4;

const int PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 8;

const int PRINTER_CHANGE_PRINTER = 255;

const int PRINTER_CHANGE_ADD_JOB = 256;

const int PRINTER_CHANGE_SET_JOB = 512;

const int PRINTER_CHANGE_DELETE_JOB = 1024;

const int PRINTER_CHANGE_WRITE_JOB = 2048;

const int PRINTER_CHANGE_JOB = 65280;

const int PRINTER_CHANGE_ADD_FORM = 65536;

const int PRINTER_CHANGE_SET_FORM = 131072;

const int PRINTER_CHANGE_DELETE_FORM = 262144;

const int PRINTER_CHANGE_FORM = 458752;

const int PRINTER_CHANGE_ADD_PORT = 1048576;

const int PRINTER_CHANGE_CONFIGURE_PORT = 2097152;

const int PRINTER_CHANGE_DELETE_PORT = 4194304;

const int PRINTER_CHANGE_PORT = 7340032;

const int PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 16777216;

const int PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 67108864;

const int PRINTER_CHANGE_PRINT_PROCESSOR = 117440512;

const int PRINTER_CHANGE_SERVER = 134217728;

const int PRINTER_CHANGE_ADD_PRINTER_DRIVER = 268435456;

const int PRINTER_CHANGE_SET_PRINTER_DRIVER = 536870912;

const int PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 1073741824;

const int PRINTER_CHANGE_PRINTER_DRIVER = 1879048192;

const int PRINTER_CHANGE_TIMEOUT = 2147483648;

const int PRINTER_CHANGE_ALL = 2138570751;

const int PRINTER_ERROR_INFORMATION = 2147483648;

const int PRINTER_ERROR_WARNING = 1073741824;

const int PRINTER_ERROR_SEVERE = 536870912;

const int PRINTER_ERROR_OUTOFPAPER = 1;

const int PRINTER_ERROR_JAM = 2;

const int PRINTER_ERROR_OUTOFTONER = 4;

const String SPLREG_DEFAULT_SPOOL_DIRECTORY = 'DefaultSpoolDirectory';

const String SPLREG_PORT_THREAD_PRIORITY_DEFAULT = 'PortThreadPriorityDefault';

const String SPLREG_PORT_THREAD_PRIORITY = 'PortThreadPriority';

const String SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT =
    'SchedulerThreadPriorityDefault';

const String SPLREG_SCHEDULER_THREAD_PRIORITY = 'SchedulerThreadPriority';

const String SPLREG_BEEP_ENABLED = 'BeepEnabled';

const String SPLREG_NET_POPUP = 'NetPopup';

const String SPLREG_RETRY_POPUP = 'RetryPopup';

const String SPLREG_NET_POPUP_TO_COMPUTER = 'NetPopupToComputer';

const String SPLREG_EVENT_LOG = 'EventLog';

const String SPLREG_MAJOR_VERSION = 'MajorVersion';

const String SPLREG_MINOR_VERSION = 'MinorVersion';

const String SPLREG_ARCHITECTURE = 'Architecture';

const String SPLREG_OS_VERSION = 'OSVersion';

const String SPLREG_OS_VERSIONEX = 'OSVersionEx';

const String SPLREG_DS_PRESENT = 'DsPresent';

const String SPLREG_DS_PRESENT_FOR_USER = 'DsPresentForUser';

const String SPLREG_REMOTE_FAX = 'RemoteFax';

const String SPLREG_RESTART_JOB_ON_POOL_ERROR = 'RestartJobOnPoolError';

const String SPLREG_RESTART_JOB_ON_POOL_ENABLED = 'RestartJobOnPoolEnabled';

const String SPLREG_DNS_MACHINE_NAME = 'DNSMachineName';

const String SPLREG_ALLOW_USER_MANAGEFORMS = 'AllowUserManageForms';

const String SPLREG_WEBSHAREMGMT = 'WebShareMgmt';

const int SPLREG_PRINT_DRIVER_ISOLATION_GROUPS_SEPARATOR = 92;

const String SPLREG_PRINT_DRIVER_ISOLATION_GROUPS =
    'PrintDriverIsolationGroups';

const String SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE =
    'PrintDriverIsolationTimeBeforeRecycle';

const String SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE =
    'PrintDriverIsolationMaxobjsBeforeRecycle';

const String SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT =
    'PrintDriverIsolationIdleTimeout';

const String SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY =
    'PrintDriverIsolationExecutionPolicy';

const String SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY =
    'PrintDriverIsolationOverrideCompat';

const String SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY =
    'PrintQueueV4DriverDirectory';

const int SERVER_ACCESS_ADMINISTER = 1;

const int SERVER_ACCESS_ENUMERATE = 2;

const int PRINTER_ACCESS_ADMINISTER = 4;

const int PRINTER_ACCESS_USE = 8;

const int JOB_ACCESS_ADMINISTER = 16;

const int JOB_ACCESS_READ = 32;

const int PRINTER_ACCESS_MANAGE_LIMITED = 64;

const int SERVER_ALL_ACCESS = 983043;

const int SERVER_READ = 131074;

const int SERVER_WRITE = 131075;

const int SERVER_EXECUTE = 131074;

const int PRINTER_ALL_ACCESS = 983052;

const int PRINTER_READ = 131080;

const int PRINTER_WRITE = 131080;

const int PRINTER_EXECUTE = 131080;

const int JOB_ALL_ACCESS = 983088;

const int JOB_READ = 131104;

const int JOB_WRITE = 131088;

const int JOB_EXECUTE = 131088;

const String SPLDS_SPOOLER_KEY = 'DsSpooler';

const String SPLDS_DRIVER_KEY = 'DsDriver';

const String SPLDS_USER_KEY = 'DsUser';

const String SPLDS_ASSET_NUMBER = 'assetNumber';

const String SPLDS_BYTES_PER_MINUTE = 'bytesPerMinute';

const String SPLDS_DESCRIPTION = 'description';

const String SPLDS_DRIVER_NAME = 'driverName';

const String SPLDS_DRIVER_VERSION = 'driverVersion';

const String SPLDS_LOCATION = 'location';

const String SPLDS_PORT_NAME = 'portName';

const String SPLDS_PRINT_ATTRIBUTES = 'printAttributes';

const String SPLDS_PRINT_BIN_NAMES = 'printBinNames';

const String SPLDS_PRINT_COLLATE = 'printCollate';

const String SPLDS_PRINT_COLOR = 'printColor';

const String SPLDS_PRINT_DUPLEX_SUPPORTED = 'printDuplexSupported';

const String SPLDS_PRINT_END_TIME = 'printEndTime';

const String SPLDS_PRINTER_CLASS = 'printQueue';

const String SPLDS_PRINTER_NAME = 'printerName';

const String SPLDS_PRINT_KEEP_PRINTED_JOBS = 'printKeepPrintedJobs';

const String SPLDS_PRINT_LANGUAGE = 'printLanguage';

const String SPLDS_PRINT_MAC_ADDRESS = 'printMACAddress';

const String SPLDS_PRINT_MAX_X_EXTENT = 'printMaxXExtent';

const String SPLDS_PRINT_MAX_Y_EXTENT = 'printMaxYExtent';

const String SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED =
    'printMaxResolutionSupported';

const String SPLDS_PRINT_MEDIA_READY = 'printMediaReady';

const String SPLDS_PRINT_MEDIA_SUPPORTED = 'printMediaSupported';

const String SPLDS_PRINT_MEMORY = 'printMemory';

const String SPLDS_PRINT_MIN_X_EXTENT = 'printMinXExtent';

const String SPLDS_PRINT_MIN_Y_EXTENT = 'printMinYExtent';

const String SPLDS_PRINT_NETWORK_ADDRESS = 'printNetworkAddress';

const String SPLDS_PRINT_NOTIFY = 'printNotify';

const String SPLDS_PRINT_NUMBER_UP = 'printNumberUp';

const String SPLDS_PRINT_ORIENTATIONS_SUPPORTED = 'printOrientationsSupported';

const String SPLDS_PRINT_OWNER = 'printOwner';

const String SPLDS_PRINT_PAGES_PER_MINUTE = 'printPagesPerMinute';

const String SPLDS_PRINT_RATE = 'printRate';

const String SPLDS_PRINT_RATE_UNIT = 'printRateUnit';

const String SPLDS_PRINT_SEPARATOR_FILE = 'printSeparatorFile';

const String SPLDS_PRINT_SHARE_NAME = 'printShareName';

const String SPLDS_PRINT_SPOOLING = 'printSpooling';

const String SPLDS_PRINT_STAPLING_SUPPORTED = 'printStaplingSupported';

const String SPLDS_PRINT_START_TIME = 'printStartTime';

const String SPLDS_PRINT_STATUS = 'printStatus';

const String SPLDS_PRIORITY = 'priority';

const String SPLDS_SERVER_NAME = 'serverName';

const String SPLDS_SHORT_SERVER_NAME = 'shortServerName';

const String SPLDS_UNC_NAME = 'uNCName';

const String SPLDS_URL = 'url';

const String SPLDS_FLAGS = 'flags';

const String SPLDS_VERSION_NUMBER = 'versionNumber';

const String SPLDS_PRINTER_NAME_ALIASES = 'printerNameAliases';

const String SPLDS_PRINTER_LOCATIONS = 'printerLocations';

const String SPLDS_PRINTER_MODEL = 'printerModel';

const int PRINTER_CONNECTION_MISMATCH = 32;

const int PRINTER_CONNECTION_NO_UI = 64;

const int IPDFP_COPY_ALL_FILES = 1;

const int UPDP_SILENT_UPLOAD = 1;

const int UPDP_UPLOAD_ALWAYS = 2;

const int UPDP_CHECK_DRIVERSTORE = 4;

const String MS_PRINT_JOB_OUTPUT_FILE = 'M';

const int CLSCTX_INPROC = 3;

const int CLSCTX_ALL = 23;

const int CLSCTX_SERVER = 21;

const String _CRT_INTERNAL_COMBASE_SYMBOL_PREFIX = '';

const int COM_RIGHTS_EXECUTE = 1;

const int COM_RIGHTS_EXECUTE_LOCAL = 2;

const int COM_RIGHTS_EXECUTE_REMOTE = 4;

const int COM_RIGHTS_ACTIVATE_LOCAL = 8;

const int COM_RIGHTS_ACTIVATE_REMOTE = 16;

const int COM_RIGHTS_RESERVED1 = 32;

const int COM_RIGHTS_RESERVED2 = 64;

const int CWMO_MAX_HANDLES = 56;

const int FADF_AUTO = 1;

const int FADF_STATIC = 2;

const int FADF_EMBEDDED = 4;

const int FADF_FIXEDSIZE = 16;

const int FADF_RECORD = 32;

const int FADF_HAVEIID = 64;

const int FADF_HAVEVARTYPE = 128;

const int FADF_BSTR = 256;

const int FADF_UNKNOWN = 512;

const int FADF_DISPATCH = 1024;

const int FADF_VARIANT = 2048;

const int FADF_RESERVED = 61448;

const int PARAMFLAG_NONE = 0;

const int PARAMFLAG_FIN = 1;

const int PARAMFLAG_FOUT = 2;

const int PARAMFLAG_FLCID = 4;

const int PARAMFLAG_FRETVAL = 8;

const int PARAMFLAG_FOPT = 16;

const int PARAMFLAG_FHASDEFAULT = 32;

const int PARAMFLAG_FHASCUSTDATA = 64;

const int IDLFLAG_NONE = 0;

const int IDLFLAG_FIN = 1;

const int IDLFLAG_FOUT = 2;

const int IDLFLAG_FLCID = 4;

const int IDLFLAG_FRETVAL = 8;

const int IMPLTYPEFLAG_FDEFAULT = 1;

const int IMPLTYPEFLAG_FSOURCE = 2;

const int IMPLTYPEFLAG_FRESTRICTED = 4;

const int IMPLTYPEFLAG_FDEFAULTVTABLE = 8;

const int DISPID_UNKNOWN = -1;

const int DISPID_VALUE = 0;

const int DISPID_PROPERTYPUT = -3;

const int DISPID_NEWENUM = -4;

const int DISPID_EVALUATE = -5;

const int DISPID_CONSTRUCTOR = -6;

const int DISPID_DESTRUCTOR = -7;

const int DISPID_COLLECT = -8;

const int PROPSETFLAG_DEFAULT = 0;

const int PROPSETFLAG_NONSIMPLE = 1;

const int PROPSETFLAG_ANSI = 2;

const int PROPSETFLAG_UNBUFFERED = 4;

const int PROPSETFLAG_CASE_SENSITIVE = 8;

const int PROPSET_BEHAVIOR_CASE_SENSITIVE = 1;

const int PID_DICTIONARY = 0;

const int PID_CODEPAGE = 1;

const int PID_FIRST_USABLE = 2;

const int PID_FIRST_NAME_DEFAULT = 4095;

const int PID_LOCALE = 2147483648;

const int PID_MODIFY_TIME = 2147483649;

const int PID_SECURITY = 2147483650;

const int PID_BEHAVIOR = 2147483651;

const int PID_ILLEGAL = 4294967295;

const int PID_MIN_READONLY = 2147483648;

const int PID_MAX_READONLY = 3221225471;

const int PRSPEC_INVALID = 4294967295;

const int PRSPEC_LPWSTR = 0;

const int PRSPEC_PROPID = 1;

const int PROPSETHDR_OSVERSION_UNKNOWN = 4294967295;

const int CWCSTORAGENAME = 32;

const int STGM_DIRECT = 0;

const int STGM_TRANSACTED = 65536;

const int STGM_SIMPLE = 134217728;

const int STGM_READ = 0;

const int STGM_WRITE = 1;

const int STGM_READWRITE = 2;

const int STGM_SHARE_DENY_NONE = 64;

const int STGM_SHARE_DENY_READ = 48;

const int STGM_SHARE_DENY_WRITE = 32;

const int STGM_SHARE_EXCLUSIVE = 16;

const int STGM_PRIORITY = 262144;

const int STGM_DELETEONRELEASE = 67108864;

const int STGM_NOSCRATCH = 1048576;

const int STGM_CREATE = 4096;

const int STGM_CONVERT = 131072;

const int STGM_FAILIFTHERE = 0;

const int STGM_NOSNAPSHOT = 2097152;

const int STGM_DIRECT_SWMR = 4194304;

const int STGFMT_STORAGE = 0;

const int STGFMT_NATIVE = 1;

const int STGFMT_FILE = 3;

const int STGFMT_ANY = 4;

const int STGFMT_DOCFILE = 5;

const int STGFMT_DOCUMENT = 0;

const int STGOPTIONS_VERSION = 2;

const int CCH_MAX_PROPSTG_NAME = 31;

const int MARSHALINTERFACE_MIN = 500;

const int ASYNC_MODE_COMPATIBILITY = 1;

const int ASYNC_MODE_DEFAULT = 0;

const int STGTY_REPEAT = 256;

const int STG_TOEND = 4294967295;

const int STG_LAYOUT_SEQUENTIAL = 0;

const int STG_LAYOUT_INTERLEAVED = 1;

const int UPDFCACHE_NODATACACHE = 1;

const int UPDFCACHE_ONSAVECACHE = 2;

const int UPDFCACHE_ONSTOPCACHE = 4;

const int UPDFCACHE_NORMALCACHE = 8;

const int UPDFCACHE_IFBLANK = 16;

const int UPDFCACHE_ONLYIFBLANK = 2147483648;

const int UPDFCACHE_IFBLANKORONSAVECACHE = 18;

const int UPDFCACHE_ALL = 2147483647;

const int UPDFCACHE_ALLBUTNODATACACHE = 2147483646;

const int MK_ALT = 32;

const int DROPEFFECT_NONE = 0;

const int DROPEFFECT_COPY = 1;

const int DROPEFFECT_MOVE = 2;

const int DROPEFFECT_LINK = 4;

const int DROPEFFECT_SCROLL = 2147483648;

const int DD_DEFSCROLLINSET = 11;

const int DD_DEFSCROLLDELAY = 50;

const int DD_DEFSCROLLINTERVAL = 50;

const int DD_DEFDRAGDELAY = 200;

const int DD_DEFDRAGMINDIST = 2;

const int BINDF_DONTUSECACHE = 16;

const int BINDF_DONTPUTINCACHE = 32;

const int BINDF_NOCOPYDATA = 128;

const int PI_DOCFILECLSIDLOOKUP = 32;

const String SZ_URLCONTEXT = 'U';

const String SZ_ASYNC_CALLEE = 'A';

const int MKSYS_URLMONIKER = 6;

const int URL_MK_LEGACY = 0;

const int URL_MK_UNIFORM = 1;

const int URL_MK_NO_CANONICALIZE = 2;

const int FIEF_FLAG_FORCE_JITUI = 1;

const int FIEF_FLAG_PEEK = 2;

const int FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 4;

const int FIEF_FLAG_RESERVED_0 = 8;

const int FMFD_DEFAULT = 0;

const int FMFD_URLASFILENAME = 1;

const int FMFD_ENABLEMIMESNIFFING = 2;

const int FMFD_IGNOREMIMETEXTPLAIN = 4;

const int FMFD_SERVERMIME = 8;

const int FMFD_RESPECTTEXTPLAIN = 16;

const int FMFD_RETURNUPDATEDIMGMIMES = 32;

const int FMFD_RESERVED_1 = 64;

const int FMFD_RESERVED_2 = 128;

const int UAS_EXACTLEGACY = 4096;

const int URLMON_OPTION_USERAGENT = 268435457;

const int URLMON_OPTION_USERAGENT_REFRESH = 268435458;

const int URLMON_OPTION_URL_ENCODING = 268435460;

const int URLMON_OPTION_USE_BINDSTRINGCREDS = 268435464;

const int URLMON_OPTION_USE_BROWSERAPPSDOCUMENTS = 268435472;

const int CF_NULL = 0;

const int CFSTR_MIME_NULL = 0;

const int MK_S_ASYNCHRONOUS = 262632;

const int S_ASYNCHRONOUS = 262632;

const int INET_E_CANNOT_LOCK_REQUEST = -2146697194;

const int INET_E_USE_EXTEND_BINDING = -2146697193;

const int INET_E_TERMINATED_BIND = -2146697192;

const int INET_E_RESERVED_1 = -2146697190;

const int INET_E_BLOCKED_REDIRECT_XSECURITYID = -2146697189;

const int INET_E_DOMINJECTIONVALIDATION = -2146697188;

const int INET_E_VTAB_SWITCH_FORCE_ENGINE = -2146697187;

const int INET_E_HSTS_CERTIFICATE_ERROR = -2146697186;

const int INET_E_RESERVED_2 = -2146697185;

const int INET_E_RESERVED_3 = -2146697184;

const int INET_E_RESERVED_4 = -2146697183;

const int INET_E_RESERVED_5 = -2146697182;

const int INET_E_ERROR_FIRST = -2146697214;

const int INET_E_CODE_DOWNLOAD_DECLINED = -2146696960;

const int INET_E_RESULT_DISPATCHED = -2146696704;

const int INET_E_CANNOT_REPLACE_SFP_FILE = -2146696448;

const int INET_E_CODE_INSTALL_SUPPRESSED = -2146696192;

const int INET_E_CODE_INSTALL_BLOCKED_BY_HASH_POLICY = -2146695936;

const int INET_E_DOWNLOAD_BLOCKED_BY_INPRIVATE = -2146695935;

const int INET_E_CODE_INSTALL_BLOCKED_IMMERSIVE = -2146695934;

const int INET_E_FORBIDFRAMING = -2146695933;

const int INET_E_CODE_INSTALL_BLOCKED_ARM = -2146695932;

const int INET_E_BLOCKED_PLUGGABLE_PROTOCOL = -2146695931;

const int INET_E_BLOCKED_ENHANCEDPROTECTEDMODE = -2146695930;

const int INET_E_CODE_INSTALL_BLOCKED_BITNESS = -2146695929;

const int INET_E_DOWNLOAD_BLOCKED_BY_CSP = -2146695928;

const int INET_E_ERROR_LAST = -2146695928;

const int Uri_HAS_ABSOLUTE_URI = 1;

const int Uri_HAS_AUTHORITY = 2;

const int Uri_HAS_DISPLAY_URI = 4;

const int Uri_HAS_DOMAIN = 8;

const int Uri_HAS_EXTENSION = 16;

const int Uri_HAS_FRAGMENT = 32;

const int Uri_HAS_HOST = 64;

const int Uri_HAS_PASSWORD = 128;

const int Uri_HAS_PATH = 256;

const int Uri_HAS_QUERY = 1024;

const int Uri_HAS_RAW_URI = 2048;

const int Uri_HAS_SCHEME_NAME = 4096;

const int Uri_HAS_USER_NAME = 16384;

const int Uri_HAS_PATH_AND_QUERY = 512;

const int Uri_HAS_USER_INFO = 8192;

const int Uri_HAS_HOST_TYPE = 32768;

const int Uri_HAS_PORT = 65536;

const int Uri_HAS_SCHEME = 131072;

const int Uri_HAS_ZONE = 262144;

const int Uri_CREATE_ALLOW_RELATIVE = 1;

const int Uri_CREATE_ALLOW_IMPLICIT_WILDCARD_SCHEME = 2;

const int Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME = 4;

const int Uri_CREATE_NOFRAG = 8;

const int Uri_CREATE_NO_CANONICALIZE = 16;

const int Uri_CREATE_CANONICALIZE = 256;

const int Uri_CREATE_FILE_USE_DOS_PATH = 32;

const int Uri_CREATE_DECODE_EXTRA_INFO = 64;

const int Uri_CREATE_NO_DECODE_EXTRA_INFO = 128;

const int Uri_CREATE_CRACK_UNKNOWN_SCHEMES = 512;

const int Uri_CREATE_NO_CRACK_UNKNOWN_SCHEMES = 1024;

const int Uri_CREATE_PRE_PROCESS_HTML_URI = 2048;

const int Uri_CREATE_NO_PRE_PROCESS_HTML_URI = 4096;

const int Uri_CREATE_IE_SETTINGS = 8192;

const int Uri_CREATE_NO_IE_SETTINGS = 16384;

const int Uri_CREATE_NO_ENCODE_FORBIDDEN_CHARACTERS = 32768;

const int Uri_CREATE_NORMALIZE_INTL_CHARACTERS = 65536;

const int Uri_CREATE_CANONICALIZE_ABSOLUTE = 131072;

const int Uri_DISPLAY_NO_FRAGMENT = 1;

const int Uri_PUNYCODE_IDN_HOST = 2;

const int Uri_DISPLAY_IDN_HOST = 4;

const int Uri_DISPLAY_NO_PUNYCODE = 8;

const int Uri_ENCODING_USER_INFO_AND_PATH_IS_PERCENT_ENCODED_UTF8 = 1;

const int Uri_ENCODING_USER_INFO_AND_PATH_IS_CP = 2;

const int Uri_ENCODING_HOST_IS_IDN = 4;

const int Uri_ENCODING_HOST_IS_PERCENT_ENCODED_UTF8 = 8;

const int Uri_ENCODING_HOST_IS_PERCENT_ENCODED_CP = 16;

const int Uri_ENCODING_QUERY_AND_FRAGMENT_IS_PERCENT_ENCODED_UTF8 = 32;

const int Uri_ENCODING_QUERY_AND_FRAGMENT_IS_CP = 64;

const int Uri_ENCODING_RFC = 41;

const int UriBuilder_USE_ORIGINAL_FLAGS = 1;

const int WININETINFO_OPTION_LOCK_HANDLE = 65534;

const int URLOSTRM_USECACHEDCOPY_ONLY = 1;

const int URLOSTRM_USECACHEDCOPY = 2;

const int URLOSTRM_GETNEWESTVERSION = 3;

const int PARSE_ENCODE = 7;

const int PARSE_DECODE = 8;

const int SET_FEATURE_ON_THREAD = 1;

const int SET_FEATURE_ON_PROCESS = 2;

const int SET_FEATURE_IN_REGISTRY = 4;

const int SET_FEATURE_ON_THREAD_LOCALMACHINE = 8;

const int SET_FEATURE_ON_THREAD_INTRANET = 16;

const int SET_FEATURE_ON_THREAD_TRUSTED = 32;

const int SET_FEATURE_ON_THREAD_INTERNET = 64;

const int SET_FEATURE_ON_THREAD_RESTRICTED = 128;

const int GET_FEATURE_FROM_THREAD = 1;

const int GET_FEATURE_FROM_PROCESS = 2;

const int GET_FEATURE_FROM_REGISTRY = 4;

const int GET_FEATURE_FROM_THREAD_LOCALMACHINE = 8;

const int GET_FEATURE_FROM_THREAD_INTRANET = 16;

const int GET_FEATURE_FROM_THREAD_TRUSTED = 32;

const int GET_FEATURE_FROM_THREAD_INTERNET = 64;

const int GET_FEATURE_FROM_THREAD_RESTRICTED = 128;

const int INET_E_USE_DEFAULT_PROTOCOLHANDLER = -2146697199;

const int INET_E_USE_DEFAULT_SETTING = -2146697198;

const int INET_E_DEFAULT_ACTION = -2146697199;

const int INET_E_QUERYOPTION_UNKNOWN = -2146697197;

const int INET_E_REDIRECTING = -2146697196;

const int PROTOCOLFLAG_NO_PICS_CHECK = 1;

const int MUTZ_NOSAVEDFILECHECK = 1;

const int MUTZ_ISFILE = 2;

const int MUTZ_ACCEPT_WILDCARD_SCHEME = 128;

const int MUTZ_ENFORCERESTRICTED = 256;

const int MUTZ_RESERVED = 512;

const int MUTZ_REQUIRESAVEDFILECHECK = 1024;

const int MUTZ_DONT_UNESCAPE = 2048;

const int MUTZ_DONT_USE_CACHE = 4096;

const int MUTZ_FORCE_INTRANET_FLAGS = 8192;

const int MUTZ_IGNORE_ZONE_MAPPINGS = 16384;

const int MAX_SIZE_SECURITY_ID = 512;

const int URLACTION_MIN = 4096;

const int URLACTION_DOWNLOAD_MIN = 4096;

const int URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 4097;

const int URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 4100;

const int URLACTION_DOWNLOAD_CURR_MAX = 4100;

const int URLACTION_DOWNLOAD_MAX = 4607;

const int URLACTION_ACTIVEX_MIN = 4608;

const int URLACTION_ACTIVEX_RUN = 4608;

const int URLPOLICY_ACTIVEX_CHECK_LIST = 65536;

const int URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 4609;

const int URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 4610;

const int URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 4611;

const int URLACTION_SCRIPT_OVERRIDE_SAFETY = 5121;

const int URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 4612;

const int URLACTION_ACTIVEX_TREATASUNTRUSTED = 4613;

const int URLACTION_ACTIVEX_NO_WEBOC_SCRIPT = 4614;

const int URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION = 4615;

const int URLACTION_ACTIVEX_OVERRIDE_OPTIN = 4616;

const int URLACTION_ACTIVEX_SCRIPTLET_RUN = 4617;

const int URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION = 4618;

const int URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST = 4619;

const int URLACTION_ACTIVEX_ALLOW_TDC = 4620;

const int URLACTION_ACTIVEX_CURR_MAX = 4620;

const int URLACTION_ACTIVEX_MAX = 5119;

const int URLACTION_SCRIPT_MIN = 5120;

const int URLACTION_SCRIPT_RUN = 5120;

const int URLACTION_SCRIPT_JAVA_USE = 5122;

const int URLACTION_SCRIPT_SAFE_ACTIVEX = 5125;

const int URLACTION_CROSS_DOMAIN_DATA = 5126;

const int URLACTION_SCRIPT_PASTE = 5127;

const int URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE = 5128;

const int URLACTION_SCRIPT_XSSFILTER = 5129;

const int URLACTION_SCRIPT_NAVIGATE = 5130;

const int URLACTION_PLUGGABLE_PROTOCOL_XHR = 5131;

const int URLACTION_ALLOW_VBSCRIPT_IE = 5132;

const int URLACTION_ALLOW_JSCRIPT_IE = 5133;

const int URLACTION_SCRIPT_CURR_MAX = 5133;

const int URLACTION_SCRIPT_MAX = 5631;

const int URLACTION_HTML_MIN = 5632;

const int URLACTION_HTML_SUBMIT_FORMS = 5633;

const int URLACTION_HTML_SUBMIT_FORMS_FROM = 5634;

const int URLACTION_HTML_SUBMIT_FORMS_TO = 5635;

const int URLACTION_HTML_FONT_DOWNLOAD = 5636;

const int URLACTION_HTML_JAVA_RUN = 5637;

const int URLACTION_HTML_USERDATA_SAVE = 5638;

const int URLACTION_HTML_SUBFRAME_NAVIGATE = 5639;

const int URLACTION_HTML_META_REFRESH = 5640;

const int URLACTION_HTML_MIXED_CONTENT = 5641;

const int URLACTION_HTML_INCLUDE_FILE_PATH = 5642;

const int URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML = 5643;

const int URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE = 5644;

const int URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS = 5645;

const int URLACTION_HTML_ALLOW_WINDOW_CLOSE = 5646;

const int URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER = 5647;

const int URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK = 5648;

const int URLACTION_HTML_ALLOW_INDEXEDDB = 5649;

const int URLACTION_HTML_MAX = 6143;

const int URLACTION_SHELL_MIN = 6144;

const int URLACTION_SHELL_INSTALL_DTITEMS = 6144;

const int URLACTION_SHELL_MOVE_OR_COPY = 6146;

const int URLACTION_SHELL_FILE_DOWNLOAD = 6147;

const int URLACTION_SHELL_VERB = 6148;

const int URLACTION_SHELL_WEBVIEW_VERB = 6149;

const int URLACTION_SHELL_SHELLEXECUTE = 6150;

const int URLACTION_SHELL_EXECUTE_HIGHRISK = 6150;

const int URLACTION_SHELL_EXECUTE_MODRISK = 6151;

const int URLACTION_SHELL_EXECUTE_LOWRISK = 6152;

const int URLACTION_SHELL_POPUPMGR = 6153;

const int URLACTION_SHELL_RTF_OBJECTS_LOAD = 6154;

const int URLACTION_SHELL_ENHANCED_DRAGDROP_SECURITY = 6155;

const int URLACTION_SHELL_EXTENSIONSECURITY = 6156;

const int URLACTION_SHELL_SECURE_DRAGSOURCE = 6157;

const int URLACTION_SHELL_REMOTEQUERY = 6158;

const int URLACTION_SHELL_PREVIEW = 6159;

const int URLACTION_SHELL_SHARE = 6160;

const int URLACTION_SHELL_ALLOW_CROSS_SITE_SHARE = 6161;

const int URLACTION_SHELL_TOCTOU_RISK = 6162;

const int URLACTION_SHELL_CURR_MAX = 6162;

const int URLACTION_SHELL_MAX = 6655;

const int URLACTION_NETWORK_MIN = 6656;

const int URLACTION_CREDENTIALS_USE = 6656;

const int URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0;

const int URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 65536;

const int URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 131072;

const int URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 196608;

const int URLACTION_AUTHENTICATE_CLIENT = 6657;

const int URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0;

const int URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 65536;

const int URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 196608;

const int URLACTION_COOKIES = 6658;

const int URLACTION_COOKIES_SESSION = 6659;

const int URLACTION_CLIENT_CERT_PROMPT = 6660;

const int URLACTION_COOKIES_THIRD_PARTY = 6661;

const int URLACTION_COOKIES_SESSION_THIRD_PARTY = 6662;

const int URLACTION_COOKIES_ENABLED = 6672;

const int URLACTION_NETWORK_CURR_MAX = 6672;

const int URLACTION_NETWORK_MAX = 7167;

const int URLACTION_JAVA_MIN = 7168;

const int URLACTION_JAVA_PERMISSIONS = 7168;

const int URLPOLICY_JAVA_PROHIBIT = 0;

const int URLPOLICY_JAVA_HIGH = 65536;

const int URLPOLICY_JAVA_MEDIUM = 131072;

const int URLPOLICY_JAVA_LOW = 196608;

const int URLPOLICY_JAVA_CUSTOM = 8388608;

const int URLACTION_JAVA_CURR_MAX = 7168;

const int URLACTION_JAVA_MAX = 7423;

const int URLACTION_INFODELIVERY_MIN = 7424;

const int URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 7424;

const int URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 7425;

const int URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 7426;

const int URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 7427;

const int URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 7428;

const int URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 7429;

const int URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 7430;

const int URLACTION_INFODELIVERY_CURR_MAX = 7430;

const int URLACTION_INFODELIVERY_MAX = 7679;

const int URLACTION_CHANNEL_SOFTDIST_MIN = 7680;

const int URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 7685;

const int URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 65536;

const int URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 131072;

const int URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 196608;

const int URLACTION_CHANNEL_SOFTDIST_MAX = 7935;

const int URLACTION_DOTNET_USERCONTROLS = 8197;

const int URLACTION_BEHAVIOR_MIN = 8192;

const int URLACTION_BEHAVIOR_RUN = 8192;

const int URLPOLICY_BEHAVIOR_CHECK_LIST = 65536;

const int URLACTION_FEATURE_MIN = 8448;

const int URLACTION_FEATURE_MIME_SNIFFING = 8448;

const int URLACTION_FEATURE_ZONE_ELEVATION = 8449;

const int URLACTION_FEATURE_WINDOW_RESTRICTIONS = 8450;

const int URLACTION_FEATURE_SCRIPT_STATUS_BAR = 8451;

const int URLACTION_FEATURE_FORCE_ADDR_AND_STATUS = 8452;

const int URLACTION_FEATURE_BLOCK_INPUT_PROMPTS = 8453;

const int URLACTION_FEATURE_DATA_BINDING = 8454;

const int URLACTION_FEATURE_CROSSDOMAIN_FOCUS_CHANGE = 8455;

const int URLACTION_AUTOMATIC_DOWNLOAD_UI_MIN = 8704;

const int URLACTION_AUTOMATIC_DOWNLOAD_UI = 8704;

const int URLACTION_AUTOMATIC_ACTIVEX_UI = 8705;

const int URLACTION_ALLOW_RESTRICTEDPROTOCOLS = 8960;

const int URLACTION_ALLOW_APEVALUATION = 8961;

const int URLACTION_ALLOW_XHR_EVALUATION = 8962;

const int URLACTION_WINDOWS_BROWSER_APPLICATIONS = 9216;

const int URLACTION_XPS_DOCUMENTS = 9217;

const int URLACTION_LOOSE_XAML = 9218;

const int URLACTION_LOWRIGHTS = 9472;

const int URLACTION_WINFX_SETUP = 9728;

const int URLACTION_INPRIVATE_BLOCKING = 9984;

const int URLACTION_ALLOW_AUDIO_VIDEO = 9985;

const int URLACTION_ALLOW_ACTIVEX_FILTERING = 9986;

const int URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING = 9987;

const int URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS = 9988;

const int URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT = 9989;

const int URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION = 9990;

const int URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW = 9992;

const int URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS = 9993;

const int URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST = 9994;

const int URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS = 9995;

const int URLACTION_ALLOW_ANTIMALWARE_SCANNING_OF_ACTIVEX = 9996;

const int URLACTION_ALLOW_CSS_EXPRESSIONS = 9997;

const int URLPOLICY_ALLOW = 0;

const int URLPOLICY_QUERY = 1;

const int URLPOLICY_DISALLOW = 3;

const int URLPOLICY_NOTIFY_ON_ALLOW = 16;

const int URLPOLICY_NOTIFY_ON_DISALLOW = 32;

const int URLPOLICY_LOG_ON_ALLOW = 64;

const int URLPOLICY_LOG_ON_DISALLOW = 128;

const int URLPOLICY_MASK_PERMISSIONS = 15;

const int URLPOLICY_DONTCHECKDLGBOX = 256;

const int URLZONE_ESC_FLAG = 256;

const int SECURITY_IE_STATE_GREEN = 0;

const int SECURITY_IE_STATE_RED = 1;

const int SOFTDIST_FLAG_USAGE_EMAIL = 1;

const int SOFTDIST_FLAG_USAGE_PRECACHE = 2;

const int SOFTDIST_FLAG_USAGE_AUTOINSTALL = 4;

const int SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 8;

const int SOFTDIST_ADSTATE_NONE = 0;

const int SOFTDIST_ADSTATE_AVAILABLE = 1;

const int SOFTDIST_ADSTATE_DOWNLOADED = 2;

const int SOFTDIST_ADSTATE_INSTALLED = 3;

const int CONFIRMSAFETYACTION_LOADOBJECT = 1;

const int PIDDI_THUMBNAIL = 2;

const int PIDSI_TITLE = 2;

const int PIDSI_SUBJECT = 3;

const int PIDSI_AUTHOR = 4;

const int PIDSI_KEYWORDS = 5;

const int PIDSI_COMMENTS = 6;

const int PIDSI_TEMPLATE = 7;

const int PIDSI_LASTAUTHOR = 8;

const int PIDSI_REVNUMBER = 9;

const int PIDSI_EDITTIME = 10;

const int PIDSI_LASTPRINTED = 11;

const int PIDSI_CREATE_DTM = 12;

const int PIDSI_LASTSAVE_DTM = 13;

const int PIDSI_PAGECOUNT = 14;

const int PIDSI_WORDCOUNT = 15;

const int PIDSI_CHARCOUNT = 16;

const int PIDSI_THUMBNAIL = 17;

const int PIDSI_APPNAME = 18;

const int PIDSI_DOC_SECURITY = 19;

const int PIDDSI_CATEGORY = 2;

const int PIDDSI_PRESFORMAT = 3;

const int PIDDSI_BYTECOUNT = 4;

const int PIDDSI_LINECOUNT = 5;

const int PIDDSI_PARCOUNT = 6;

const int PIDDSI_SLIDECOUNT = 7;

const int PIDDSI_NOTECOUNT = 8;

const int PIDDSI_HIDDENCOUNT = 9;

const int PIDDSI_MMCLIPCOUNT = 10;

const int PIDDSI_SCALE = 11;

const int PIDDSI_HEADINGPAIR = 12;

const int PIDDSI_DOCPARTS = 13;

const int PIDDSI_MANAGER = 14;

const int PIDDSI_COMPANY = 15;

const int PIDDSI_LINKSDIRTY = 16;

const int PIDMSI_EDITOR = 2;

const int PIDMSI_SUPPLIER = 3;

const int PIDMSI_SOURCE = 4;

const int PIDMSI_SEQUENCE_NO = 5;

const int PIDMSI_PROJECT = 6;

const int PIDMSI_STATUS = 7;

const int PIDMSI_OWNER = 8;

const int PIDMSI_RATING = 9;

const int PIDMSI_PRODUCTION = 10;

const int PIDMSI_COPYRIGHT = 11;

const int STDOLE_MAJORVERNUM = 1;

const int STDOLE_MINORVERNUM = 0;

const int STDOLE_LCID = 0;

const int STDOLE2_MAJORVERNUM = 2;

const int STDOLE2_MINORVERNUM = 0;

const int STDOLE2_LCID = 0;

const int VARIANT_NOVALUEPROP = 1;

const int VARIANT_ALPHABOOL = 2;

const int VARIANT_NOUSEROVERRIDE = 4;

const int VARIANT_CALENDAR_HIJRI = 8;

const int VARIANT_LOCALBOOL = 16;

const int VARIANT_CALENDAR_THAI = 32;

const int VARIANT_CALENDAR_GREGORIAN = 64;

const int VARIANT_USE_NLS = 128;

const int VAR_TIMEVALUEONLY = 1;

const int VAR_DATEVALUEONLY = 2;

const int VAR_VALIDDATE = 4;

const int VAR_CALENDAR_HIJRI = 8;

const int VAR_LOCALBOOL = 16;

const int VAR_FORMAT_NOSUBSTITUTE = 32;

const int VAR_FOURDIGITYEARS = 64;

const int LOCALE_USE_NLS = 268435456;

const int VAR_CALENDAR_THAI = 128;

const int VAR_CALENDAR_GREGORIAN = 256;

const int VTDATEGRE_MAX = 2958465;

const int VTDATEGRE_MIN = -657434;

const int NUMPRS_LEADING_WHITE = 1;

const int NUMPRS_TRAILING_WHITE = 2;

const int NUMPRS_LEADING_PLUS = 4;

const int NUMPRS_TRAILING_PLUS = 8;

const int NUMPRS_LEADING_MINUS = 16;

const int NUMPRS_TRAILING_MINUS = 32;

const int NUMPRS_HEX_OCT = 64;

const int NUMPRS_PARENS = 128;

const int NUMPRS_DECIMAL = 256;

const int NUMPRS_THOUSANDS = 512;

const int NUMPRS_CURRENCY = 1024;

const int NUMPRS_EXPONENT = 2048;

const int NUMPRS_USE_ALL = 4096;

const int NUMPRS_STD = 8191;

const int NUMPRS_NEG = 65536;

const int NUMPRS_INEXACT = 131072;

const int VTBIT_I1 = 65536;

const int VTBIT_UI1 = 131072;

const int VTBIT_I2 = 4;

const int VTBIT_UI2 = 262144;

const int VTBIT_I4 = 8;

const int VTBIT_UI4 = 524288;

const int VTBIT_I8 = 1048576;

const int VTBIT_UI8 = 2097152;

const int VTBIT_R4 = 16;

const int VTBIT_R8 = 32;

const int VTBIT_CY = 64;

const int VTBIT_DECIMAL = 16384;

const int VARCMP_LT = 0;

const int VARCMP_EQ = 1;

const int VARCMP_GT = 2;

const int VARCMP_NULL = 3;

const int VT_HARDTYPE = 32768;

const int MEMBERID_NIL = -1;

const int ID_DEFAULTINST = -2;

const int DISPATCH_METHOD = 1;

const int DISPATCH_PROPERTYGET = 2;

const int DISPATCH_PROPERTYPUT = 4;

const int DISPATCH_PROPERTYPUTREF = 8;

const int LOAD_TLB_AS_32BIT = 32;

const int LOAD_TLB_AS_64BIT = 64;

const int MASK_TO_RESET_TLB_BITS = -97;

const int ACTIVEOBJECT_STRONG = 0;

const int ACTIVEOBJECT_WEAK = 1;

const int E_DRAW = -2147221184;

const int DATA_E_FORMATETC = -2147221404;

const int OLEIVERB_PRIMARY = 0;

const int OLEIVERB_SHOW = -1;

const int OLEIVERB_OPEN = -2;

const int OLEIVERB_HIDE = -3;

const int OLEIVERB_UIACTIVATE = -4;

const int OLEIVERB_INPLACEACTIVATE = -5;

const int OLEIVERB_DISCARDUNDOSTATE = -6;

const int EMBDHLP_INPROC_HANDLER = 0;

const int EMBDHLP_INPROC_SERVER = 1;

const int EMBDHLP_CREATENOW = 0;

const int EMBDHLP_DELAYCREATE = 65536;

const int OLECREATE_LEAVERUNNING = 1;

const int OLESTREAM_CONVERSION_DEFAULT = 0;

const int OLESTREAM_CONVERSION_DISABLEOLELINK = 1;

const int OPENFILENAME_SIZE_VERSION_400A = 136;

const int OPENFILENAME_SIZE_VERSION_400W = 136;

const int OPENFILENAME_SIZE_VERSION_400 = 136;

const int OFN_READONLY = 1;

const int OFN_OVERWRITEPROMPT = 2;

const int OFN_HIDEREADONLY = 4;

const int OFN_NOCHANGEDIR = 8;

const int OFN_SHOWHELP = 16;

const int OFN_ENABLEHOOK = 32;

const int OFN_ENABLETEMPLATE = 64;

const int OFN_ENABLETEMPLATEHANDLE = 128;

const int OFN_NOVALIDATE = 256;

const int OFN_ALLOWMULTISELECT = 512;

const int OFN_EXTENSIONDIFFERENT = 1024;

const int OFN_PATHMUSTEXIST = 2048;

const int OFN_FILEMUSTEXIST = 4096;

const int OFN_CREATEPROMPT = 8192;

const int OFN_SHAREAWARE = 16384;

const int OFN_NOREADONLYRETURN = 32768;

const int OFN_NOTESTFILECREATE = 65536;

const int OFN_NONETWORKBUTTON = 131072;

const int OFN_NOLONGNAMES = 262144;

const int OFN_EXPLORER = 524288;

const int OFN_NODEREFERENCELINKS = 1048576;

const int OFN_LONGNAMES = 2097152;

const int OFN_ENABLEINCLUDENOTIFY = 4194304;

const int OFN_ENABLESIZING = 8388608;

const int OFN_DONTADDTORECENT = 33554432;

const int OFN_FORCESHOWHIDDEN = 268435456;

const int OFN_EX_NOPLACESBAR = 1;

const int OFN_SHAREFALLTHROUGH = 2;

const int OFN_SHARENOWARN = 1;

const int OFN_SHAREWARN = 0;

const int CDN_FIRST = 4294966695;

const int CDN_LAST = 4294966597;

const int CDN_INITDONE = 4294966695;

const int CDN_SELCHANGE = 4294966694;

const int CDN_FOLDERCHANGE = 4294966693;

const int CDN_SHAREVIOLATION = 4294966692;

const int CDN_HELP = 4294966691;

const int CDN_FILEOK = 4294966690;

const int CDN_TYPECHANGE = 4294966689;

const int CDN_INCLUDEITEM = 4294966688;

const int CDM_FIRST = 1124;

const int CDM_LAST = 1224;

const int CDM_GETSPEC = 1124;

const int CDM_GETFILEPATH = 1125;

const int CDM_GETFOLDERPATH = 1126;

const int CDM_GETFOLDERIDLIST = 1127;

const int CDM_SETCONTROLTEXT = 1128;

const int CDM_HIDECONTROL = 1129;

const int CDM_SETDEFEXT = 1130;

const int CC_RGBINIT = 1;

const int CC_FULLOPEN = 2;

const int CC_PREVENTFULLOPEN = 4;

const int CC_SHOWHELP = 8;

const int CC_ENABLEHOOK = 16;

const int CC_ENABLETEMPLATE = 32;

const int CC_ENABLETEMPLATEHANDLE = 64;

const int CC_SOLIDCOLOR = 128;

const int CC_ANYCOLOR = 256;

const int FR_DOWN = 1;

const int FR_WHOLEWORD = 2;

const int FR_MATCHCASE = 4;

const int FR_FINDNEXT = 8;

const int FR_REPLACE = 16;

const int FR_REPLACEALL = 32;

const int FR_DIALOGTERM = 64;

const int FR_SHOWHELP = 128;

const int FR_ENABLEHOOK = 256;

const int FR_ENABLETEMPLATE = 512;

const int FR_NOUPDOWN = 1024;

const int FR_NOMATCHCASE = 2048;

const int FR_NOWHOLEWORD = 4096;

const int FR_ENABLETEMPLATEHANDLE = 8192;

const int FR_HIDEUPDOWN = 16384;

const int FR_HIDEMATCHCASE = 32768;

const int FR_HIDEWHOLEWORD = 65536;

const int FR_RAW = 131072;

const int FR_SHOWWRAPAROUND = 262144;

const int FR_NOWRAPAROUND = 524288;

const int FR_WRAPAROUND = 1048576;

const int FR_MATCHDIAC = 536870912;

const int FR_MATCHKASHIDA = 1073741824;

const int FR_MATCHALEFHAMZA = 2147483648;

const int FRM_FIRST = 1124;

const int FRM_LAST = 1224;

const int FRM_SETOPERATIONRESULT = 1124;

const int FRM_SETOPERATIONRESULTTEXT = 1125;

const int CF_SCREENFONTS = 1;

const int CF_PRINTERFONTS = 2;

const int CF_BOTH = 3;

const int CF_SHOWHELP = 4;

const int CF_ENABLEHOOK = 8;

const int CF_ENABLETEMPLATE = 16;

const int CF_ENABLETEMPLATEHANDLE = 32;

const int CF_INITTOLOGFONTSTRUCT = 64;

const int CF_USESTYLE = 128;

const int CF_EFFECTS = 256;

const int CF_APPLY = 512;

const int CF_ANSIONLY = 1024;

const int CF_SCRIPTSONLY = 1024;

const int CF_NOVECTORFONTS = 2048;

const int CF_NOOEMFONTS = 2048;

const int CF_NOSIMULATIONS = 4096;

const int CF_LIMITSIZE = 8192;

const int CF_FIXEDPITCHONLY = 16384;

const int CF_WYSIWYG = 32768;

const int CF_FORCEFONTEXIST = 65536;

const int CF_SCALABLEONLY = 131072;

const int CF_TTONLY = 262144;

const int CF_NOFACESEL = 524288;

const int CF_NOSTYLESEL = 1048576;

const int CF_NOSIZESEL = 2097152;

const int CF_SELECTSCRIPT = 4194304;

const int CF_NOSCRIPTSEL = 8388608;

const int CF_NOVERTFONTS = 16777216;

const int CF_INACTIVEFONTS = 33554432;

const int SIMULATED_FONTTYPE = 32768;

const int PRINTER_FONTTYPE = 16384;

const int SCREEN_FONTTYPE = 8192;

const int BOLD_FONTTYPE = 256;

const int ITALIC_FONTTYPE = 512;

const int REGULAR_FONTTYPE = 1024;

const int PS_OPENTYPE_FONTTYPE = 65536;

const int TT_OPENTYPE_FONTTYPE = 131072;

const int TYPE1_FONTTYPE = 262144;

const int SYMBOL_FONTTYPE = 524288;

const int WM_CHOOSEFONT_GETLOGFONT = 1025;

const int WM_CHOOSEFONT_SETLOGFONT = 1125;

const int WM_CHOOSEFONT_SETFLAGS = 1126;

const String LBSELCHSTRINGA = 'commdlg_LBSelChangedNotify';

const String SHAREVISTRINGA = 'commdlg_ShareViolation';

const String FILEOKSTRINGA = 'commdlg_FileNameOK';

const String COLOROKSTRINGA = 'commdlg_ColorOK';

const String SETRGBSTRINGA = 'commdlg_SetRGBColor';

const String HELPMSGSTRINGA = 'commdlg_help';

const String FINDMSGSTRINGA = 'commdlg_FindReplace';

const String LBSELCHSTRINGW = 'c';

const String SHAREVISTRINGW = 'c';

const String FILEOKSTRINGW = 'c';

const String COLOROKSTRINGW = 'c';

const String SETRGBSTRINGW = 'c';

const String HELPMSGSTRINGW = 'c';

const String FINDMSGSTRINGW = 'c';

const String LBSELCHSTRING = 'commdlg_LBSelChangedNotify';

const String SHAREVISTRING = 'commdlg_ShareViolation';

const String FILEOKSTRING = 'commdlg_FileNameOK';

const String COLOROKSTRING = 'commdlg_ColorOK';

const String SETRGBSTRING = 'commdlg_SetRGBColor';

const String HELPMSGSTRING = 'commdlg_help';

const String FINDMSGSTRING = 'commdlg_FindReplace';

const int CD_LBSELNOITEMS = -1;

const int CD_LBSELCHANGE = 0;

const int CD_LBSELSUB = 1;

const int CD_LBSELADD = 2;

const int PD_ALLPAGES = 0;

const int PD_SELECTION = 1;

const int PD_PAGENUMS = 2;

const int PD_NOSELECTION = 4;

const int PD_NOPAGENUMS = 8;

const int PD_COLLATE = 16;

const int PD_PRINTTOFILE = 32;

const int PD_PRINTSETUP = 64;

const int PD_NOWARNING = 128;

const int PD_RETURNDC = 256;

const int PD_RETURNIC = 512;

const int PD_RETURNDEFAULT = 1024;

const int PD_SHOWHELP = 2048;

const int PD_ENABLEPRINTHOOK = 4096;

const int PD_ENABLESETUPHOOK = 8192;

const int PD_ENABLEPRINTTEMPLATE = 16384;

const int PD_ENABLESETUPTEMPLATE = 32768;

const int PD_ENABLEPRINTTEMPLATEHANDLE = 65536;

const int PD_ENABLESETUPTEMPLATEHANDLE = 131072;

const int PD_USEDEVMODECOPIES = 262144;

const int PD_USEDEVMODECOPIESANDCOLLATE = 262144;

const int PD_DISABLEPRINTTOFILE = 524288;

const int PD_HIDEPRINTTOFILE = 1048576;

const int PD_NONETWORKBUTTON = 2097152;

const int PD_CURRENTPAGE = 4194304;

const int PD_NOCURRENTPAGE = 8388608;

const int PD_EXCLUSIONFLAGS = 16777216;

const int PD_USELARGETEMPLATE = 268435456;

const int PD_EXCL_COPIESANDCOLLATE = 33024;

const int START_PAGE_GENERAL = 4294967295;

const int PD_RESULT_CANCEL = 0;

const int PD_RESULT_PRINT = 1;

const int PD_RESULT_APPLY = 2;

const int DN_DEFAULTPRN = 1;

const int WM_PSD_PAGESETUPDLG = 1024;

const int WM_PSD_FULLPAGERECT = 1025;

const int WM_PSD_MINMARGINRECT = 1026;

const int WM_PSD_MARGINRECT = 1027;

const int WM_PSD_GREEKTEXTRECT = 1028;

const int WM_PSD_ENVSTAMPRECT = 1029;

const int WM_PSD_YAFULLPAGERECT = 1030;

const int PSD_DEFAULTMINMARGINS = 0;

const int PSD_INWININIINTLMEASURE = 0;

const int PSD_MINMARGINS = 1;

const int PSD_MARGINS = 2;

const int PSD_INTHOUSANDTHSOFINCHES = 4;

const int PSD_INHUNDREDTHSOFMILLIMETERS = 8;

const int PSD_DISABLEMARGINS = 16;

const int PSD_DISABLEPRINTER = 32;

const int PSD_NOWARNING = 128;

const int PSD_DISABLEORIENTATION = 256;

const int PSD_RETURNDEFAULT = 1024;

const int PSD_DISABLEPAPER = 512;

const int PSD_SHOWHELP = 2048;

const int PSD_ENABLEPAGESETUPHOOK = 8192;

const int PSD_ENABLEPAGESETUPTEMPLATE = 32768;

const int PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 131072;

const int PSD_ENABLEPAGEPAINTHOOK = 262144;

const int PSD_DISABLEPAGEPAINTING = 524288;

const int PSD_NONETWORKBUTTON = 2097152;

const int _STRALIGN_USE_SECURE_CRT = 1;

const String SERVICES_ACTIVE_DATABASEW = 'S';

const String SERVICES_FAILED_DATABASEW = 'S';

const String SERVICES_ACTIVE_DATABASEA = 'ServicesActive';

const String SERVICES_FAILED_DATABASEA = 'ServicesFailed';

const int SC_GROUP_IDENTIFIERW = 43;

const int SC_GROUP_IDENTIFIERA = 43;

const String SERVICES_ACTIVE_DATABASE = 'ServicesActive';

const String SERVICES_FAILED_DATABASE = 'ServicesFailed';

const int SC_GROUP_IDENTIFIER = 43;

const int SERVICE_NO_CHANGE = 4294967295;

const int SERVICE_ACTIVE = 1;

const int SERVICE_INACTIVE = 2;

const int SERVICE_STATE_ALL = 3;

const int SERVICE_CONTROL_STOP = 1;

const int SERVICE_CONTROL_PAUSE = 2;

const int SERVICE_CONTROL_CONTINUE = 3;

const int SERVICE_CONTROL_INTERROGATE = 4;

const int SERVICE_CONTROL_SHUTDOWN = 5;

const int SERVICE_CONTROL_PARAMCHANGE = 6;

const int SERVICE_CONTROL_NETBINDADD = 7;

const int SERVICE_CONTROL_NETBINDREMOVE = 8;

const int SERVICE_CONTROL_NETBINDENABLE = 9;

const int SERVICE_CONTROL_NETBINDDISABLE = 10;

const int SERVICE_CONTROL_DEVICEEVENT = 11;

const int SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;

const int SERVICE_CONTROL_POWEREVENT = 13;

const int SERVICE_CONTROL_SESSIONCHANGE = 14;

const int SERVICE_CONTROL_PRESHUTDOWN = 15;

const int SERVICE_CONTROL_TIMECHANGE = 16;

const int SERVICE_CONTROL_TRIGGEREVENT = 32;

const int SERVICE_CONTROL_LOWRESOURCES = 96;

const int SERVICE_CONTROL_SYSTEMLOWRESOURCES = 97;

const int SERVICE_STOPPED = 1;

const int SERVICE_START_PENDING = 2;

const int SERVICE_STOP_PENDING = 3;

const int SERVICE_RUNNING = 4;

const int SERVICE_CONTINUE_PENDING = 5;

const int SERVICE_PAUSE_PENDING = 6;

const int SERVICE_PAUSED = 7;

const int SERVICE_ACCEPT_STOP = 1;

const int SERVICE_ACCEPT_PAUSE_CONTINUE = 2;

const int SERVICE_ACCEPT_SHUTDOWN = 4;

const int SERVICE_ACCEPT_PARAMCHANGE = 8;

const int SERVICE_ACCEPT_NETBINDCHANGE = 16;

const int SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;

const int SERVICE_ACCEPT_POWEREVENT = 64;

const int SERVICE_ACCEPT_SESSIONCHANGE = 128;

const int SERVICE_ACCEPT_PRESHUTDOWN = 256;

const int SERVICE_ACCEPT_TIMECHANGE = 512;

const int SERVICE_ACCEPT_TRIGGEREVENT = 1024;

const int SERVICE_ACCEPT_USER_LOGOFF = 2048;

const int SERVICE_ACCEPT_LOWRESOURCES = 8192;

const int SERVICE_ACCEPT_SYSTEMLOWRESOURCES = 16384;

const int SC_MANAGER_CONNECT = 1;

const int SC_MANAGER_CREATE_SERVICE = 2;

const int SC_MANAGER_ENUMERATE_SERVICE = 4;

const int SC_MANAGER_LOCK = 8;

const int SC_MANAGER_QUERY_LOCK_STATUS = 16;

const int SC_MANAGER_MODIFY_BOOT_CONFIG = 32;

const int SC_MANAGER_ALL_ACCESS = 983103;

const int SERVICE_QUERY_CONFIG = 1;

const int SERVICE_CHANGE_CONFIG = 2;

const int SERVICE_QUERY_STATUS = 4;

const int SERVICE_ENUMERATE_DEPENDENTS = 8;

const int SERVICE_START = 16;

const int SERVICE_STOP = 32;

const int SERVICE_PAUSE_CONTINUE = 64;

const int SERVICE_INTERROGATE = 128;

const int SERVICE_USER_DEFINED_CONTROL = 256;

const int SERVICE_ALL_ACCESS = 983551;

const int SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;

const int SERVICE_CONFIG_DESCRIPTION = 1;

const int SERVICE_CONFIG_FAILURE_ACTIONS = 2;

const int SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;

const int SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;

const int SERVICE_CONFIG_SERVICE_SID_INFO = 5;

const int SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;

const int SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;

const int SERVICE_CONFIG_TRIGGER_INFO = 8;

const int SERVICE_CONFIG_PREFERRED_NODE = 9;

const int SERVICE_CONFIG_LAUNCH_PROTECTED = 12;

const int SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;

const int SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;

const int SERVICE_NOTIFY_STATUS_CHANGE = 2;

const int SERVICE_NOTIFY_STOPPED = 1;

const int SERVICE_NOTIFY_START_PENDING = 2;

const int SERVICE_NOTIFY_STOP_PENDING = 4;

const int SERVICE_NOTIFY_RUNNING = 8;

const int SERVICE_NOTIFY_CONTINUE_PENDING = 16;

const int SERVICE_NOTIFY_PAUSE_PENDING = 32;

const int SERVICE_NOTIFY_PAUSED = 64;

const int SERVICE_NOTIFY_CREATED = 128;

const int SERVICE_NOTIFY_DELETED = 256;

const int SERVICE_NOTIFY_DELETE_PENDING = 512;

const int SERVICE_STOP_REASON_FLAG_MIN = 0;

const int SERVICE_STOP_REASON_FLAG_UNPLANNED = 268435456;

const int SERVICE_STOP_REASON_FLAG_CUSTOM = 536870912;

const int SERVICE_STOP_REASON_FLAG_PLANNED = 1073741824;

const int SERVICE_STOP_REASON_FLAG_MAX = 2147483648;

const int SERVICE_STOP_REASON_MAJOR_MIN = 0;

const int SERVICE_STOP_REASON_MAJOR_OTHER = 65536;

const int SERVICE_STOP_REASON_MAJOR_HARDWARE = 131072;

const int SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 196608;

const int SERVICE_STOP_REASON_MAJOR_SOFTWARE = 262144;

const int SERVICE_STOP_REASON_MAJOR_APPLICATION = 327680;

const int SERVICE_STOP_REASON_MAJOR_NONE = 393216;

const int SERVICE_STOP_REASON_MAJOR_MAX = 458752;

const int SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 4194304;

const int SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 16711680;

const int SERVICE_STOP_REASON_MINOR_MIN = 0;

const int SERVICE_STOP_REASON_MINOR_OTHER = 1;

const int SERVICE_STOP_REASON_MINOR_MAINTENANCE = 2;

const int SERVICE_STOP_REASON_MINOR_INSTALLATION = 3;

const int SERVICE_STOP_REASON_MINOR_UPGRADE = 4;

const int SERVICE_STOP_REASON_MINOR_RECONFIG = 5;

const int SERVICE_STOP_REASON_MINOR_HUNG = 6;

const int SERVICE_STOP_REASON_MINOR_UNSTABLE = 7;

const int SERVICE_STOP_REASON_MINOR_DISK = 8;

const int SERVICE_STOP_REASON_MINOR_NETWORKCARD = 9;

const int SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 10;

const int SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 11;

const int SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 12;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK = 13;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 14;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX = 15;

const int SERVICE_STOP_REASON_MINOR_SECURITY = 16;

const int SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 17;

const int SERVICE_STOP_REASON_MINOR_WMI = 18;

const int SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 19;

const int SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 20;

const int SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 21;

const int SERVICE_STOP_REASON_MINOR_MMC = 22;

const int SERVICE_STOP_REASON_MINOR_NONE = 23;

const int SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT = 24;

const int SERVICE_STOP_REASON_MINOR_MAX = 25;

const int SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 256;

const int SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 65535;

const int SERVICE_CONTROL_STATUS_REASON_INFO = 1;

const int SERVICE_SID_TYPE_NONE = 0;

const int SERVICE_SID_TYPE_UNRESTRICTED = 1;

const int SERVICE_SID_TYPE_RESTRICTED = 3;

const int SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;

const int SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;

const int SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;

const int SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;

const int SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;

const int SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 6;

const int SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE = 7;

const int SERVICE_TRIGGER_TYPE_CUSTOM = 20;

const int SERVICE_TRIGGER_TYPE_AGGREGATE = 30;

const int SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;

const int SERVICE_TRIGGER_DATA_TYPE_STRING = 2;

const int SERVICE_TRIGGER_DATA_TYPE_LEVEL = 3;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 4;

const int SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 5;

const int SERVICE_START_REASON_DEMAND = 1;

const int SERVICE_START_REASON_AUTO = 2;

const int SERVICE_START_REASON_TRIGGER = 4;

const int SERVICE_START_REASON_RESTART_ON_FAILURE = 8;

const int SERVICE_START_REASON_DELAYEDAUTO = 16;

const int SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1;

const int SERVICE_LAUNCH_PROTECTED_NONE = 0;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS = 1;

const int SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT = 2;

const int SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT = 3;

const int SERVICE_TRIGGER_ACTION_SERVICE_START = 1;

const int SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;

const String SERVICE_TRIGGER_STARTED_ARGUMENT = 'T';

const String SC_AGGREGATE_STORAGE_KEY = 'S';

const int DIALOPTION_BILLING = 64;

const int DIALOPTION_QUIET = 128;

const int DIALOPTION_DIALTONE = 256;

const int MDMVOLFLAG_LOW = 1;

const int MDMVOLFLAG_MEDIUM = 2;

const int MDMVOLFLAG_HIGH = 4;

const int MDMVOL_LOW = 0;

const int MDMVOL_MEDIUM = 1;

const int MDMVOL_HIGH = 2;

const int MDMSPKRFLAG_OFF = 1;

const int MDMSPKRFLAG_DIAL = 2;

const int MDMSPKRFLAG_ON = 4;

const int MDMSPKRFLAG_CALLSETUP = 8;

const int MDMSPKR_OFF = 0;

const int MDMSPKR_DIAL = 1;

const int MDMSPKR_ON = 2;

const int MDMSPKR_CALLSETUP = 3;

const int MDM_COMPRESSION = 1;

const int MDM_ERROR_CONTROL = 2;

const int MDM_FORCED_EC = 4;

const int MDM_CELLULAR = 8;

const int MDM_FLOWCONTROL_HARD = 16;

const int MDM_FLOWCONTROL_SOFT = 32;

const int MDM_CCITT_OVERRIDE = 64;

const int MDM_SPEED_ADJUST = 128;

const int MDM_TONE_DIAL = 256;

const int MDM_BLIND_DIAL = 512;

const int MDM_V23_OVERRIDE = 1024;

const int MDM_DIAGNOSTICS = 2048;

const int MDM_MASK_BEARERMODE = 61440;

const int MDM_SHIFT_BEARERMODE = 12;

const int MDM_MASK_PROTOCOLID = 983040;

const int MDM_SHIFT_PROTOCOLID = 16;

const int MDM_MASK_PROTOCOLDATA = 267386880;

const int MDM_SHIFT_PROTOCOLDATA = 20;

const int MDM_MASK_PROTOCOLINFO = 268369920;

const int MDM_SHIFT_PROTOCOLINFO = 16;

const int MDM_MASK_EXTENDEDINFO = 268431360;

const int MDM_SHIFT_EXTENDEDINFO = 12;

const int MDM_BEARERMODE_ANALOG = 0;

const int MDM_BEARERMODE_ISDN = 1;

const int MDM_BEARERMODE_GSM = 2;

const int MDM_PROTOCOLID_DEFAULT = 0;

const int MDM_PROTOCOLID_HDLCPPP = 1;

const int MDM_PROTOCOLID_V128 = 2;

const int MDM_PROTOCOLID_X75 = 3;

const int MDM_PROTOCOLID_V110 = 4;

const int MDM_PROTOCOLID_V120 = 5;

const int MDM_PROTOCOLID_AUTO = 6;

const int MDM_PROTOCOLID_ANALOG = 7;

const int MDM_PROTOCOLID_GPRS = 8;

const int MDM_PROTOCOLID_PIAFS = 9;

const int MDM_SHIFT_HDLCPPP_SPEED = 0;

const int MDM_MASK_HDLCPPP_SPEED = 7;

const int MDM_HDLCPPP_SPEED_DEFAULT = 0;

const int MDM_HDLCPPP_SPEED_64K = 1;

const int MDM_HDLCPPP_SPEED_56K = 2;

const int MDM_SHIFT_HDLCPPP_AUTH = 3;

const int MDM_MASK_HDLCPPP_AUTH = 56;

const int MDM_HDLCPPP_AUTH_DEFAULT = 0;

const int MDM_HDLCPPP_AUTH_NONE = 1;

const int MDM_HDLCPPP_AUTH_PAP = 2;

const int MDM_HDLCPPP_AUTH_CHAP = 3;

const int MDM_HDLCPPP_AUTH_MSCHAP = 4;

const int MDM_SHIFT_HDLCPPP_ML = 6;

const int MDM_MASK_HDLCPPP_ML = 192;

const int MDM_HDLCPPP_ML_DEFAULT = 0;

const int MDM_HDLCPPP_ML_NONE = 1;

const int MDM_HDLCPPP_ML_2 = 2;

const int MDM_PROTOCOL_HDLCPPP_64K = 1114112;

const int MDM_PROTOCOL_HDLCPPP_56K = 2162688;

const int MDM_PROTOCOL_HDLCPPP_112K = 136380416;

const int MDM_PROTOCOL_HDLCPPP_112K_PAP = 153157632;

const int MDM_PROTOCOL_HDLCPPP_112K_CHAP = 161546240;

const int MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = 169934848;

const int MDM_PROTOCOL_HDLCPPP_128K = 135331840;

const int MDM_PROTOCOL_HDLCPPP_128K_PAP = 152109056;

const int MDM_PROTOCOL_HDLCPPP_128K_CHAP = 160497664;

const int MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = 168886272;

const int MDM_SHIFT_V120_SPEED = 0;

const int MDM_MASK_V120_SPEED = 7;

const int MDM_V120_SPEED_DEFAULT = 0;

const int MDM_V120_SPEED_64K = 1;

const int MDM_V120_SPEED_56K = 2;

const int MDM_SHIFT_V120_ML = 6;

const int MDM_MASK_V120_ML = 192;

const int MDM_V120_ML_DEFAULT = 0;

const int MDM_V120_ML_NONE = 1;

const int MDM_V120_ML_2 = 2;

const int MDM_PROTOCOL_V120_64K = 68485120;

const int MDM_PROTOCOL_V120_56K = 69533696;

const int MDM_PROTOCOL_V120_112K = 136642560;

const int MDM_PROTOCOL_V120_128K = 135593984;

const int MDM_SHIFT_X75_DATA = 0;

const int MDM_MASK_X75_DATA = 7;

const int MDM_X75_DATA_DEFAULT = 0;

const int MDM_X75_DATA_64K = 1;

const int MDM_X75_DATA_128K = 2;

const int MDM_X75_DATA_T_70 = 3;

const int MDM_X75_DATA_BTX = 4;

const int MDM_PROTOCOL_X75_64K = 1245184;

const int MDM_PROTOCOL_X75_128K = 2293760;

const int MDM_PROTOCOL_X75_T_70 = 3342336;

const int MDM_PROTOCOL_X75_BTX = 4390912;

const int MDM_SHIFT_V110_SPEED = 0;

const int MDM_MASK_V110_SPEED = 15;

const int MDM_V110_SPEED_DEFAULT = 0;

const int MDM_V110_SPEED_1DOT2K = 1;

const int MDM_V110_SPEED_2DOT4K = 2;

const int MDM_V110_SPEED_4DOT8K = 3;

const int MDM_V110_SPEED_9DOT6K = 4;

const int MDM_V110_SPEED_12DOT0K = 5;

const int MDM_V110_SPEED_14DOT4K = 6;

const int MDM_V110_SPEED_19DOT2K = 7;

const int MDM_V110_SPEED_28DOT8K = 8;

const int MDM_V110_SPEED_38DOT4K = 9;

const int MDM_V110_SPEED_57DOT6K = 10;

const int MDM_PROTOCOL_V110_1DOT2K = 1310720;

const int MDM_PROTOCOL_V110_2DOT4K = 2359296;

const int MDM_PROTOCOL_V110_4DOT8K = 3407872;

const int MDM_PROTOCOL_V110_9DOT6K = 4456448;

const int MDM_PROTOCOL_V110_12DOT0K = 5505024;

const int MDM_PROTOCOL_V110_14DOT4K = 6553600;

const int MDM_PROTOCOL_V110_19DOT2K = 7602176;

const int MDM_PROTOCOL_V110_28DOT8K = 8650752;

const int MDM_PROTOCOL_V110_38DOT4K = 9699328;

const int MDM_PROTOCOL_V110_57DOT6K = 10747904;

const int MDM_SHIFT_AUTO_SPEED = 0;

const int MDM_MASK_AUTO_SPEED = 7;

const int MDM_AUTO_SPEED_DEFAULT = 0;

const int MDM_SHIFT_AUTO_ML = 6;

const int MDM_MASK_AUTO_ML = 192;

const int MDM_AUTO_ML_DEFAULT = 0;

const int MDM_AUTO_ML_NONE = 1;

const int MDM_AUTO_ML_2 = 2;

const int MDM_PROTOCOL_AUTO_1CH = 67502080;

const int MDM_PROTOCOL_AUTO_2CH = 134610944;

const int MDM_ANALOG_RLP_ON = 0;

const int MDM_ANALOG_RLP_OFF = 1;

const int MDM_ANALOG_V34 = 2;

const int MDM_PROTOCOL_ANALOG_RLP = 458752;

const int MDM_PROTOCOL_ANALOG_NRLP = 1507328;

const int MDM_PROTOCOL_ANALOG_V34 = 2555904;

const int MDM_PROTOCOL_GPRS = 524288;

const int MDM_PIAFS_INCOMING = 0;

const int MDM_PIAFS_OUTGOING = 1;

const int MDM_PROTOCOL_PIAFS_INCOMING = 589824;

const int MDM_PROTOCOL_PIAFS_OUTGOING = 1638400;

const int STYLE_DESCRIPTION_SIZE = 32;

const int IMEMENUITEM_STRING_SIZE = 80;

const int IMC_GETCANDIDATEPOS = 7;

const int IMC_SETCANDIDATEPOS = 8;

const int IMC_GETCOMPOSITIONFONT = 9;

const int IMC_SETCOMPOSITIONFONT = 10;

const int IMC_GETCOMPOSITIONWINDOW = 11;

const int IMC_SETCOMPOSITIONWINDOW = 12;

const int IMC_GETSTATUSWINDOWPOS = 15;

const int IMC_SETSTATUSWINDOWPOS = 16;

const int IMC_CLOSESTATUSWINDOW = 33;

const int IMC_OPENSTATUSWINDOW = 34;

const int NI_OPENCANDIDATE = 16;

const int NI_CLOSECANDIDATE = 17;

const int NI_SELECTCANDIDATESTR = 18;

const int NI_CHANGECANDIDATELIST = 19;

const int NI_FINALIZECONVERSIONRESULT = 20;

const int NI_COMPOSITIONSTR = 21;

const int NI_SETCANDIDATE_PAGESTART = 22;

const int NI_SETCANDIDATE_PAGESIZE = 23;

const int NI_IMEMENUSELECTED = 24;

const int ISC_SHOWUICANDIDATEWINDOW = 1;

const int ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;

const int ISC_SHOWUIGUIDELINE = 1073741824;

const int ISC_SHOWUIALLCANDIDATEWINDOW = 15;

const int ISC_SHOWUIALL = 3221225487;

const int CPS_COMPLETE = 1;

const int CPS_CONVERT = 2;

const int CPS_REVERT = 3;

const int CPS_CANCEL = 4;

const int MOD_LEFT = 32768;

const int MOD_RIGHT = 16384;

const int MOD_ON_KEYUP = 2048;

const int MOD_IGNORE_ALL_MODIFIER = 1024;

const int IME_CHOTKEY_IME_NONIME_TOGGLE = 16;

const int IME_CHOTKEY_SHAPE_TOGGLE = 17;

const int IME_CHOTKEY_SYMBOL_TOGGLE = 18;

const int IME_JHOTKEY_CLOSE_OPEN = 48;

const int IME_KHOTKEY_SHAPE_TOGGLE = 80;

const int IME_KHOTKEY_HANJACONVERT = 81;

const int IME_KHOTKEY_ENGLISH = 82;

const int IME_THOTKEY_IME_NONIME_TOGGLE = 112;

const int IME_THOTKEY_SHAPE_TOGGLE = 113;

const int IME_THOTKEY_SYMBOL_TOGGLE = 114;

const int IME_HOTKEY_DSWITCH_FIRST = 256;

const int IME_HOTKEY_DSWITCH_LAST = 287;

const int IME_HOTKEY_PRIVATE_FIRST = 512;

const int IME_ITHOTKEY_RESEND_RESULTSTR = 512;

const int IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;

const int IME_ITHOTKEY_UISTYLE_TOGGLE = 514;

const int IME_ITHOTKEY_RECONVERTSTRING = 515;

const int IME_HOTKEY_PRIVATE_LAST = 543;

const int GCS_COMPREADSTR = 1;

const int GCS_COMPREADATTR = 2;

const int GCS_COMPREADCLAUSE = 4;

const int GCS_COMPSTR = 8;

const int GCS_COMPATTR = 16;

const int GCS_COMPCLAUSE = 32;

const int GCS_CURSORPOS = 128;

const int GCS_DELTASTART = 256;

const int GCS_RESULTREADSTR = 512;

const int GCS_RESULTREADCLAUSE = 1024;

const int GCS_RESULTSTR = 2048;

const int GCS_RESULTCLAUSE = 4096;

const int CS_INSERTCHAR = 8192;

const int CS_NOMOVECARET = 16384;

const int IMEVER_0310 = 196618;

const int IMEVER_0400 = 262144;

const int IME_PROP_AT_CARET = 65536;

const int IME_PROP_SPECIAL_UI = 131072;

const int IME_PROP_CANDLIST_START_FROM_1 = 262144;

const int IME_PROP_UNICODE = 524288;

const int IME_PROP_COMPLETE_ON_UNSELECT = 1048576;

const int UI_CAP_2700 = 1;

const int UI_CAP_ROT90 = 2;

const int UI_CAP_ROTANY = 4;

const int SCS_CAP_COMPSTR = 1;

const int SCS_CAP_MAKEREAD = 2;

const int SCS_CAP_SETRECONVERTSTRING = 4;

const int SELECT_CAP_CONVERSION = 1;

const int SELECT_CAP_SENTENCE = 2;

const int GGL_LEVEL = 1;

const int GGL_INDEX = 2;

const int GGL_STRING = 3;

const int GGL_PRIVATE = 4;

const int GL_LEVEL_NOGUIDELINE = 0;

const int GL_LEVEL_FATAL = 1;

const int GL_LEVEL_ERROR = 2;

const int GL_LEVEL_WARNING = 3;

const int GL_LEVEL_INFORMATION = 4;

const int GL_ID_UNKNOWN = 0;

const int GL_ID_NOMODULE = 1;

const int GL_ID_NODICTIONARY = 16;

const int GL_ID_CANNOTSAVE = 17;

const int GL_ID_NOCONVERT = 32;

const int GL_ID_TYPINGERROR = 33;

const int GL_ID_TOOMANYSTROKE = 34;

const int GL_ID_READINGCONFLICT = 35;

const int GL_ID_INPUTREADING = 36;

const int GL_ID_INPUTRADICAL = 37;

const int GL_ID_INPUTCODE = 38;

const int GL_ID_INPUTSYMBOL = 39;

const int GL_ID_CHOOSECANDIDATE = 40;

const int GL_ID_REVERSECONVERSION = 41;

const int GL_ID_PRIVATE_FIRST = 32768;

const int GL_ID_PRIVATE_LAST = 65535;

const int IGP_GETIMEVERSION = 4294967292;

const int IGP_PROPERTY = 4;

const int IGP_CONVERSION = 8;

const int IGP_SENTENCE = 12;

const int IGP_UI = 16;

const int IGP_SETCOMPSTR = 20;

const int IGP_SELECT = 24;

const int SCS_SETSTR = 9;

const int SCS_CHANGEATTR = 18;

const int SCS_CHANGECLAUSE = 36;

const int SCS_SETRECONVERTSTRING = 65536;

const int SCS_QUERYRECONVERTSTRING = 131072;

const int ATTR_INPUT = 0;

const int ATTR_TARGET_CONVERTED = 1;

const int ATTR_CONVERTED = 2;

const int ATTR_TARGET_NOTCONVERTED = 3;

const int ATTR_INPUT_ERROR = 4;

const int ATTR_FIXEDCONVERTED = 5;

const int CFS_DEFAULT = 0;

const int CFS_RECT = 1;

const int CFS_POINT = 2;

const int CFS_FORCE_POSITION = 32;

const int CFS_CANDIDATEPOS = 64;

const int CFS_EXCLUDE = 128;

const int GCL_CONVERSION = 1;

const int GCL_REVERSECONVERSION = 2;

const int GCL_REVERSE_LENGTH = 3;

const int IME_CMODE_ALPHANUMERIC = 0;

const int IME_CMODE_NATIVE = 1;

const int IME_CMODE_CHINESE = 1;

const int IME_CMODE_HANGUL = 1;

const int IME_CMODE_JAPANESE = 1;

const int IME_CMODE_KATAKANA = 2;

const int IME_CMODE_LANGUAGE = 3;

const int IME_CMODE_FULLSHAPE = 8;

const int IME_CMODE_ROMAN = 16;

const int IME_CMODE_CHARCODE = 32;

const int IME_CMODE_HANJACONVERT = 64;

const int IME_CMODE_NATIVESYMBOL = 128;

const int IME_CMODE_HANGEUL = 1;

const int IME_CMODE_SOFTKBD = 128;

const int IME_CMODE_NOCONVERSION = 256;

const int IME_CMODE_EUDC = 512;

const int IME_CMODE_SYMBOL = 1024;

const int IME_CMODE_FIXED = 2048;

const int IME_CMODE_RESERVED = 4026531840;

const int IME_SMODE_NONE = 0;

const int IME_SMODE_PLAURALCLAUSE = 1;

const int IME_SMODE_SINGLECONVERT = 2;

const int IME_SMODE_AUTOMATIC = 4;

const int IME_SMODE_PHRASEPREDICT = 8;

const int IME_SMODE_CONVERSATION = 16;

const int IME_SMODE_RESERVED = 61440;

const int IME_CAND_UNKNOWN = 0;

const int IME_CAND_READ = 1;

const int IME_CAND_CODE = 2;

const int IME_CAND_MEANING = 3;

const int IME_CAND_RADICAL = 4;

const int IME_CAND_STROKE = 5;

const int IMN_CLOSESTATUSWINDOW = 1;

const int IMN_OPENSTATUSWINDOW = 2;

const int IMN_CHANGECANDIDATE = 3;

const int IMN_CLOSECANDIDATE = 4;

const int IMN_OPENCANDIDATE = 5;

const int IMN_SETCONVERSIONMODE = 6;

const int IMN_SETSENTENCEMODE = 7;

const int IMN_SETOPENSTATUS = 8;

const int IMN_SETCANDIDATEPOS = 9;

const int IMN_SETCOMPOSITIONFONT = 10;

const int IMN_SETCOMPOSITIONWINDOW = 11;

const int IMN_SETSTATUSWINDOWPOS = 12;

const int IMN_GUIDELINE = 13;

const int IMN_PRIVATE = 14;

const int IMR_COMPOSITIONWINDOW = 1;

const int IMR_CANDIDATEWINDOW = 2;

const int IMR_COMPOSITIONFONT = 3;

const int IMR_RECONVERTSTRING = 4;

const int IMR_CONFIRMRECONVERTSTRING = 5;

const int IMR_QUERYCHARPOSITION = 6;

const int IMR_DOCUMENTFEED = 7;

const int IMM_ERROR_NODATA = -1;

const int IMM_ERROR_GENERAL = -2;

const int IME_CONFIG_GENERAL = 1;

const int IME_CONFIG_REGISTERWORD = 2;

const int IME_CONFIG_SELECTDICTIONARY = 3;

const int IME_ESC_QUERY_SUPPORT = 3;

const int IME_ESC_RESERVED_FIRST = 4;

const int IME_ESC_RESERVED_LAST = 2047;

const int IME_ESC_PRIVATE_FIRST = 2048;

const int IME_ESC_PRIVATE_LAST = 4095;

const int IME_ESC_SEQUENCE_TO_INTERNAL = 4097;

const int IME_ESC_GET_EUDC_DICTIONARY = 4099;

const int IME_ESC_SET_EUDC_DICTIONARY = 4100;

const int IME_ESC_MAX_KEY = 4101;

const int IME_ESC_IME_NAME = 4102;

const int IME_ESC_SYNC_HOTKEY = 4103;

const int IME_ESC_HANJA_MODE = 4104;

const int IME_ESC_AUTOMATA = 4105;

const int IME_ESC_PRIVATE_HOTKEY = 4106;

const int IME_ESC_GETHELPFILENAME = 4107;

const int IME_REGWORD_STYLE_EUDC = 1;

const int IME_REGWORD_STYLE_USER_FIRST = 2147483648;

const int IME_REGWORD_STYLE_USER_LAST = 4294967295;

const int IACE_CHILDREN = 1;

const int IACE_DEFAULT = 16;

const int IACE_IGNORENOCONTEXT = 32;

const int IGIMIF_RIGHTMENU = 1;

const int IGIMII_CMODE = 1;

const int IGIMII_SMODE = 2;

const int IGIMII_CONFIGURE = 4;

const int IGIMII_TOOLS = 8;

const int IGIMII_HELP = 16;

const int IGIMII_OTHER = 32;

const int IGIMII_INPUTTOOLS = 64;

const int IMFT_RADIOCHECK = 1;

const int IMFT_SEPARATOR = 2;

const int IMFT_SUBMENU = 4;

const int IMFS_GRAYED = 3;

const int IMFS_DISABLED = 3;

const int IMFS_CHECKED = 8;

const int IMFS_HILITE = 128;

const int IMFS_ENABLED = 0;

const int IMFS_UNCHECKED = 0;

const int IMFS_UNHILITE = 0;

const int IMFS_DEFAULT = 4096;

const int SOFTKEYBOARD_TYPE_T1 = 1;

const int SOFTKEYBOARD_TYPE_C1 = 2;

const int WINSOCK_VERSION = 514;

const int AF_UNSPEC = 0;

const int AF_UNIX = 1;

const int AF_INET = 2;

const int AF_IMPLINK = 3;

const int AF_PUP = 4;

const int AF_CHAOS = 5;

const int AF_NS = 6;

const int AF_IPX = 6;

const int AF_ISO = 7;

const int AF_OSI = 7;

const int AF_ECMA = 8;

const int AF_DATAKIT = 9;

const int AF_CCITT = 10;

const int AF_SNA = 11;

const int AF_DECnet = 12;

const int AF_DLI = 13;

const int AF_LAT = 14;

const int AF_HYLINK = 15;

const int AF_APPLETALK = 16;

const int AF_NETBIOS = 17;

const int AF_VOICEVIEW = 18;

const int AF_FIREFOX = 19;

const int AF_UNKNOWN1 = 20;

const int AF_BAN = 21;

const int AF_ATM = 22;

const int AF_INET6 = 23;

const int AF_CLUSTER = 24;

const int AF_12844 = 25;

const int AF_IRDA = 26;

const int AF_NETDES = 28;

const int AF_TCNPROCESS = 29;

const int AF_TCNMESSAGE = 30;

const int AF_ICLFXBM = 31;

const int AF_BTH = 32;

const int AF_LINK = 33;

const int AF_HYPERV = 34;

const int AF_MAX = 35;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOL_SOCKET = 65535;

const int SOL_IP = 65531;

const int SOL_IPV6 = 65530;

const int SO_DEBUG = 1;

const int SO_ACCEPTCONN = 2;

const int SO_REUSEADDR = 4;

const int SO_KEEPALIVE = 8;

const int SO_DONTROUTE = 16;

const int SO_BROADCAST = 32;

const int SO_USELOOPBACK = 64;

const int SO_LINGER = 128;

const int SO_OOBINLINE = 256;

const int SO_DONTLINGER = -129;

const int SO_EXCLUSIVEADDRUSE = -5;

const int SO_SNDBUF = 4097;

const int SO_RCVBUF = 4098;

const int SO_SNDLOWAT = 4099;

const int SO_RCVLOWAT = 4100;

const int SO_SNDTIMEO = 4101;

const int SO_RCVTIMEO = 4102;

const int SO_ERROR = 4103;

const int SO_TYPE = 4104;

const int SO_BSP_STATE = 4105;

const int SO_GROUP_ID = 8193;

const int SO_GROUP_PRIORITY = 8194;

const int SO_MAX_MSG_SIZE = 8195;

const int SO_CONDITIONAL_ACCEPT = 12290;

const int SO_PAUSE_ACCEPT = 12291;

const int SO_COMPARTMENT_ID = 12292;

const int SO_RANDOMIZE_PORT = 12293;

const int SO_PORT_SCALABILITY = 12294;

const int SO_REUSE_UNICASTPORT = 12295;

const int SO_REUSE_MULTICASTPORT = 12296;

const int SO_ORIGINAL_DST = 12303;

const int IP6T_SO_ORIGINAL_DST = 12303;

const int WSK_SO_BASE = 16384;

const int TCP_NODELAY = 1;

const int _SS_MAXSIZE = 128;

const int _SS_ALIGNSIZE = 8;

const int _SS_PAD1SIZE = 6;

const int _SS_PAD2SIZE = 112;

const int IOC_UNIX = 0;

const int IOC_WS2 = 134217728;

const int IOC_PROTOCOL = 268435456;

const int IOC_VENDOR = 402653184;

const int IOC_WSK = 251658240;

const int SIO_ASSOCIATE_HANDLE = 2281701377;

const int SIO_ENABLE_CIRCULAR_QUEUEING = 671088642;

const int SIO_FIND_ROUTE = 1207959555;

const int SIO_FLUSH = 671088644;

const int SIO_GET_BROADCAST_ADDRESS = 1207959557;

const int SIO_GET_EXTENSION_FUNCTION_POINTER = 3355443206;

const int SIO_GET_QOS = 3355443207;

const int SIO_GET_GROUP_QOS = 3355443208;

const int SIO_MULTIPOINT_LOOPBACK = 2281701385;

const int SIO_MULTICAST_SCOPE = 2281701386;

const int SIO_SET_QOS = 2281701387;

const int SIO_SET_GROUP_QOS = 2281701388;

const int SIO_TRANSLATE_HANDLE = 3355443213;

const int SIO_ROUTING_INTERFACE_QUERY = 3355443220;

const int SIO_ROUTING_INTERFACE_CHANGE = 2281701397;

const int SIO_ADDRESS_LIST_QUERY = 1207959574;

const int SIO_ADDRESS_LIST_CHANGE = 671088663;

const int SIO_QUERY_TARGET_PNP_HANDLE = 1207959576;

const int SIO_QUERY_RSS_PROCESSOR_INFO = 1207959589;

const int SIO_ADDRESS_LIST_SORT = 3355443225;

const int SIO_RESERVED_1 = 2281701402;

const int SIO_RESERVED_2 = 2281701409;

const int SIO_GET_MULTIPLE_EXTENSION_FUNCTION_POINTER = 3355443236;

const int IPPROTO_IP = 0;

const int IPPORT_TCPMUX = 1;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_QOTD = 17;

const int IPPORT_MSP = 18;

const int IPPORT_CHARGEN = 19;

const int IPPORT_FTP_DATA = 20;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_POP3 = 110;

const int IPPORT_NTP = 123;

const int IPPORT_EPMAP = 135;

const int IPPORT_NETBIOS_NS = 137;

const int IPPORT_NETBIOS_DGM = 138;

const int IPPORT_NETBIOS_SSN = 139;

const int IPPORT_IMAP = 143;

const int IPPORT_SNMP = 161;

const int IPPORT_SNMP_TRAP = 162;

const int IPPORT_IMAP3 = 220;

const int IPPORT_LDAP = 389;

const int IPPORT_HTTPS = 443;

const int IPPORT_MICROSOFT_DS = 445;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_REGISTERED_MIN = 1024;

const int IPPORT_REGISTERED_MAX = 49151;

const int IPPORT_DYNAMIC_MIN = 49152;

const int IPPORT_DYNAMIC_MAX = 65535;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int IN_CLASSD_NET = 4026531840;

const int IN_CLASSD_NSHIFT = 28;

const int IN_CLASSD_HOST = 268435455;

const int INADDR_ANY = 0;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int IOCPARM_MASK = 127;

const int IOC_VOID = 536870912;

const int IOC_OUT = 1073741824;

const int IOC_IN = 2147483648;

const int IOC_INOUT = 3221225472;

const int MSG_TRUNC = 256;

const int MSG_CTRUNC = 512;

const int MSG_BCAST = 1024;

const int MSG_MCAST = 2048;

const int MSG_ERRQUEUE = 4096;

const int AI_PASSIVE = 1;

const int AI_CANONNAME = 2;

const int AI_NUMERICHOST = 4;

const int AI_NUMERICSERV = 8;

const int AI_DNS_ONLY = 16;

const int AI_FORCE_CLEAR_TEXT = 32;

const int AI_BYPASS_DNS_CACHE = 64;

const int AI_RETURN_TTL = 128;

const int AI_ALL = 256;

const int AI_ADDRCONFIG = 1024;

const int AI_V4MAPPED = 2048;

const int AI_NON_AUTHORITATIVE = 16384;

const int AI_SECURE = 32768;

const int AI_RETURN_PREFERRED_NAMES = 65536;

const int AI_FQDN = 131072;

const int AI_FILESERVER = 262144;

const int AI_DISABLE_IDN_ENCODING = 524288;

const int AI_SECURE_WITH_FALLBACK = 1048576;

const int AI_EXCLUSIVE_CUSTOM_SERVERS = 2097152;

const int AI_RETURN_RESPONSE_FLAGS = 268435456;

const int AI_REQUIRE_SECURE = 536870912;

const int AI_RESOLUTION_HANDLE = 1073741824;

const int AI_EXTENDED = 2147483648;

const int ADDRINFOEX_VERSION_2 = 2;

const int ADDRINFOEX_VERSION_3 = 3;

const int ADDRINFOEX_VERSION_4 = 4;

const int ADDRINFOEX_VERSION_5 = 5;

const int ADDRINFOEX_VERSION_6 = 6;

const int AI_DNS_SERVER_TYPE_UDP = 1;

const int AI_DNS_SERVER_TYPE_DOH = 2;

const int AI_DNS_SERVER_UDP_FALLBACK = 1;

const int AI_DNS_RESPONSE_SECURE = 1;

const int AI_DNS_RESPONSE_HOSTFILE = 2;

const int NS_ALL = 0;

const int NS_SAP = 1;

const int NS_NDS = 2;

const int NS_PEER_BROWSE = 3;

const int NS_SLP = 5;

const int NS_DHCP = 6;

const int NS_TCPIP_LOCAL = 10;

const int NS_TCPIP_HOSTS = 11;

const int NS_DNS = 12;

const int NS_NETBT = 13;

const int NS_WINS = 14;

const int NS_NLA = 15;

const int NS_BTH = 16;

const int NS_NBP = 20;

const int NS_MS = 30;

const int NS_STDA = 31;

const int NS_NTDS = 32;

const int NS_EMAIL = 37;

const int NS_PNRPNAME = 38;

const int NS_PNRPCLOUD = 39;

const int NS_X500 = 40;

const int NS_NIS = 41;

const int NS_NISPLUS = 42;

const int NS_WRQ = 50;

const int NS_NETDES = 60;

const int NI_NOFQDN = 1;

const int NI_NUMERICHOST = 2;

const int NI_NAMEREQD = 4;

const int NI_NUMERICSERV = 8;

const int NI_DGRAM = 16;

const int NI_MAXHOST = 1025;

const int NI_MAXSERV = 32;

const int FD_SETSIZE = 64;

const int FIONREAD = 1074030207;

const int FIONBIO = 2147772030;

const int FIOASYNC = 2147772029;

const int SIOCSHIWAT = 2147775232;

const int SIOCGHIWAT = 1074033409;

const int SIOCSLOWAT = 2147775234;

const int SIOCGLOWAT = 1074033411;

const int SIOCATMARK = 1074033415;

const int IMPLINK_IP = 155;

const int IMPLINK_LOWEXPER = 156;

const int IMPLINK_HIGHEXPER = 158;

const int ADDR_ANY = 0;

const int WSADESCRIPTION_LEN = 256;

const int WSASYS_STATUS_LEN = 128;

const int INVALID_SOCKET = -1;

const int SOCKET_ERROR = -1;

const int FROM_PROTOCOL_INFO = -1;

const int SO_PROTOCOL_INFOA = 8196;

const int SO_PROTOCOL_INFOW = 8197;

const int SO_PROTOCOL_INFO = 8196;

const int PVD_CONFIG = 12289;

const int PF_UNSPEC = 0;

const int PF_UNIX = 1;

const int PF_INET = 2;

const int PF_IMPLINK = 3;

const int PF_PUP = 4;

const int PF_CHAOS = 5;

const int PF_NS = 6;

const int PF_IPX = 6;

const int PF_ISO = 7;

const int PF_OSI = 7;

const int PF_ECMA = 8;

const int PF_DATAKIT = 9;

const int PF_CCITT = 10;

const int PF_SNA = 11;

const int PF_DECnet = 12;

const int PF_DLI = 13;

const int PF_LAT = 14;

const int PF_HYLINK = 15;

const int PF_APPLETALK = 16;

const int PF_VOICEVIEW = 18;

const int PF_FIREFOX = 19;

const int PF_UNKNOWN1 = 20;

const int PF_BAN = 21;

const int PF_ATM = 22;

const int PF_INET6 = 23;

const int PF_BTH = 32;

const int PF_MAX = 35;

const int SOMAXCONN = 2147483647;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_WAITALL = 8;

const int MSG_PUSH_IMMEDIATE = 32;

const int MSG_PARTIAL = 32768;

const int MSG_INTERRUPT = 16;

const int MSG_MAXIOVLEN = 16;

const int MAXGETHOSTSTRUCT = 1024;

const int FD_READ_BIT = 0;

const int FD_READ = 1;

const int FD_WRITE_BIT = 1;

const int FD_WRITE = 2;

const int FD_OOB_BIT = 2;

const int FD_OOB = 4;

const int FD_ACCEPT_BIT = 3;

const int FD_ACCEPT = 8;

const int FD_CONNECT_BIT = 4;

const int FD_CONNECT = 16;

const int FD_CLOSE_BIT = 5;

const int FD_CLOSE = 32;

const int FD_QOS_BIT = 6;

const int FD_QOS = 64;

const int FD_GROUP_QOS_BIT = 7;

const int FD_GROUP_QOS = 128;

const int FD_ROUTING_INTERFACE_CHANGE_BIT = 8;

const int FD_ROUTING_INTERFACE_CHANGE = 256;

const int FD_ADDRESS_LIST_CHANGE_BIT = 9;

const int FD_ADDRESS_LIST_CHANGE = 512;

const int FD_MAX_EVENTS = 10;

const int FD_ALL_EVENTS = 1023;

const int HOST_NOT_FOUND = 11001;

const int TRY_AGAIN = 11002;

const int NO_RECOVERY = 11003;

const int NO_DATA = 11004;

const int WSANO_ADDRESS = 11004;

const int NO_ADDRESS = 11004;

const int WSA_IO_PENDING = 997;

const int WSA_IO_INCOMPLETE = 996;

const int WSA_INVALID_HANDLE = 6;

const int WSA_INVALID_PARAMETER = 87;

const int WSA_NOT_ENOUGH_MEMORY = 8;

const int WSA_OPERATION_ABORTED = 995;

const int WSA_MAXIMUM_WAIT_EVENTS = 64;

const int WSA_WAIT_FAILED = 4294967295;

const int WSA_WAIT_EVENT_0 = 0;

const int WSA_WAIT_IO_COMPLETION = 192;

const int WSA_WAIT_TIMEOUT = 258;

const int WSA_INFINITE = 4294967295;

const int SERVICETYPE_NOTRAFFIC = 0;

const int SERVICETYPE_BESTEFFORT = 1;

const int SERVICETYPE_CONTROLLEDLOAD = 2;

const int SERVICETYPE_GUARANTEED = 3;

const int SERVICETYPE_NETWORK_UNAVAILABLE = 4;

const int SERVICETYPE_GENERAL_INFORMATION = 5;

const int SERVICETYPE_NOCHANGE = 6;

const int SERVICETYPE_NONCONFORMING = 9;

const int SERVICETYPE_NETWORK_CONTROL = 10;

const int SERVICETYPE_QUALITATIVE = 13;

const int SERVICE_BESTEFFORT = 2147549184;

const int SERVICE_CONTROLLEDLOAD = 2147614720;

const int SERVICE_GUARANTEED = 2147745792;

const int SERVICE_QUALITATIVE = 2149580800;

const int SERVICE_NO_TRAFFIC_CONTROL = 2164260864;

const int SERVICE_NO_QOS_SIGNALING = 1073741824;

const int QOS_NOT_SPECIFIED = 4294967295;

const int POSITIVE_INFINITY_RATE = 4294967294;

const int QOS_GENERAL_ID_BASE = 2000;

const int QOS_OBJECT_END_OF_LIST = 2001;

const int QOS_OBJECT_SD_MODE = 2002;

const int QOS_OBJECT_SHAPING_RATE = 2003;

const int QOS_OBJECT_DESTADDR = 2004;

const int TC_NONCONF_BORROW = 0;

const int TC_NONCONF_SHAPE = 1;

const int TC_NONCONF_DISCARD = 2;

const int TC_NONCONF_BORROW_PLUS = 3;

const int CF_ACCEPT = 0;

const int CF_REJECT = 1;

const int CF_DEFER = 2;

const int SD_RECEIVE = 0;

const int SD_SEND = 1;

const int SD_BOTH = 2;

const int SG_UNCONSTRAINED_GROUP = 1;

const int SG_CONSTRAINED_GROUP = 2;

const int MAX_PROTOCOL_CHAIN = 7;

const int BASE_PROTOCOL = 1;

const int LAYERED_PROTOCOL = 0;

const int WSAPROTOCOL_LEN = 255;

const int PFL_MULTIPLE_PROTO_ENTRIES = 1;

const int PFL_RECOMMENDED_PROTO_ENTRY = 2;

const int PFL_HIDDEN = 4;

const int PFL_MATCHES_PROTOCOL_ZERO = 8;

const int PFL_NETWORKDIRECT_PROVIDER = 16;

const int XP1_CONNECTIONLESS = 1;

const int XP1_GUARANTEED_DELIVERY = 2;

const int XP1_GUARANTEED_ORDER = 4;

const int XP1_MESSAGE_ORIENTED = 8;

const int XP1_PSEUDO_STREAM = 16;

const int XP1_GRACEFUL_CLOSE = 32;

const int XP1_EXPEDITED_DATA = 64;

const int XP1_CONNECT_DATA = 128;

const int XP1_DISCONNECT_DATA = 256;

const int XP1_SUPPORT_BROADCAST = 512;

const int XP1_SUPPORT_MULTIPOINT = 1024;

const int XP1_MULTIPOINT_CONTROL_PLANE = 2048;

const int XP1_MULTIPOINT_DATA_PLANE = 4096;

const int XP1_QOS_SUPPORTED = 8192;

const int XP1_INTERRUPT = 16384;

const int XP1_UNI_SEND = 32768;

const int XP1_UNI_RECV = 65536;

const int XP1_IFS_HANDLES = 131072;

const int XP1_PARTIAL_MESSAGE = 262144;

const int XP1_SAN_SUPPORT_SDP = 524288;

const int BIGENDIAN = 0;

const int LITTLEENDIAN = 1;

const int SECURITY_PROTOCOL_NONE = 0;

const int JL_SENDER_ONLY = 1;

const int JL_RECEIVER_ONLY = 2;

const int JL_BOTH = 4;

const int WSA_FLAG_OVERLAPPED = 1;

const int WSA_FLAG_MULTIPOINT_C_ROOT = 2;

const int WSA_FLAG_MULTIPOINT_C_LEAF = 4;

const int WSA_FLAG_MULTIPOINT_D_ROOT = 8;

const int WSA_FLAG_MULTIPOINT_D_LEAF = 16;

const int WSA_FLAG_ACCESS_SYSTEM_SECURITY = 64;

const int WSA_FLAG_NO_HANDLE_INHERIT = 128;

const int WSA_FLAG_REGISTERED_IO = 256;

const int SIO_NSP_NOTIFY_CHANGE = 2281701401;

const int TH_NETDEV = 1;

const int TH_TAPI = 2;

const int SERVICE_MULTIPLE = 1;

const int NS_LOCALNAME = 19;

const int RES_UNUSED_1 = 1;

const int RES_FLUSH_CACHE = 2;

const int RES_SERVICE = 4;

const String SERVICE_TYPE_VALUE_IPXPORTA = 'IpxSocket';

const String SERVICE_TYPE_VALUE_IPXPORTW = 'I';

const String SERVICE_TYPE_VALUE_SAPIDA = 'SapId';

const String SERVICE_TYPE_VALUE_SAPIDW = 'S';

const String SERVICE_TYPE_VALUE_TCPPORTA = 'TcpPort';

const String SERVICE_TYPE_VALUE_TCPPORTW = 'T';

const String SERVICE_TYPE_VALUE_UDPPORTA = 'UdpPort';

const String SERVICE_TYPE_VALUE_UDPPORTW = 'U';

const String SERVICE_TYPE_VALUE_OBJECTIDA = 'ObjectId';

const String SERVICE_TYPE_VALUE_OBJECTIDW = 'O';

const String SERVICE_TYPE_VALUE_SAPID = 'SapId';

const String SERVICE_TYPE_VALUE_TCPPORT = 'TcpPort';

const String SERVICE_TYPE_VALUE_UDPPORT = 'UdpPort';

const String SERVICE_TYPE_VALUE_OBJECTID = 'ObjectId';

const int LUP_DEEP = 1;

const int LUP_CONTAINERS = 2;

const int LUP_NOCONTAINERS = 4;

const int LUP_NEAREST = 8;

const int LUP_RETURN_NAME = 16;

const int LUP_RETURN_TYPE = 32;

const int LUP_RETURN_VERSION = 64;

const int LUP_RETURN_COMMENT = 128;

const int LUP_RETURN_ADDR = 256;

const int LUP_RETURN_BLOB = 512;

const int LUP_RETURN_ALIASES = 1024;

const int LUP_RETURN_QUERY_STRING = 2048;

const int LUP_RETURN_ALL = 4080;

const int LUP_RES_SERVICE = 32768;

const int LUP_FLUSHCACHE = 4096;

const int LUP_FLUSHPREVIOUS = 8192;

const int LUP_NON_AUTHORITATIVE = 16384;

const int LUP_SECURE = 32768;

const int LUP_RETURN_PREFERRED_NAMES = 65536;

const int LUP_DNS_ONLY = 131072;

const int LUP_RETURN_RESPONSE_FLAGS = 262144;

const int LUP_ADDRCONFIG = 1048576;

const int LUP_DUAL_ADDR = 2097152;

const int LUP_FILESERVER = 4194304;

const int LUP_DISABLE_IDN_ENCODING = 8388608;

const int LUP_API_ANSI = 16777216;

const int LUP_EXTENDED_QUERYSET = 33554432;

const int LUP_SECURE_WITH_FALLBACK = 67108864;

const int LUP_EXCLUSIVE_CUSTOM_SERVERS = 134217728;

const int LUP_REQUIRE_SECURE = 268435456;

const int LUP_RETURN_TTL = 536870912;

const int LUP_FORCE_CLEAR_TEXT = 1073741824;

const int LUP_RESOLUTION_HANDLE = 2147483648;

const int RESULT_IS_ALIAS = 1;

const int RESULT_IS_ADDED = 16;

const int RESULT_IS_CHANGED = 32;

const int RESULT_IS_DELETED = 64;

const int POLLRDNORM = 256;

const int POLLRDBAND = 512;

const int POLLIN = 768;

const int POLLPRI = 1024;

const int POLLWRNORM = 16;

const int POLLOUT = 16;

const int POLLWRBAND = 32;

const int POLLERR = 1;

const int POLLHUP = 2;

const int POLLNVAL = 4;

const int SOCK_NOTIFY_REGISTER_EVENT_NONE = 0;

const int SOCK_NOTIFY_REGISTER_EVENT_IN = 1;

const int SOCK_NOTIFY_REGISTER_EVENT_OUT = 2;

const int SOCK_NOTIFY_REGISTER_EVENT_HANGUP = 4;

const int SOCK_NOTIFY_REGISTER_EVENTS_ALL = 7;

const int SOCK_NOTIFY_EVENT_IN = 1;

const int SOCK_NOTIFY_EVENT_OUT = 2;

const int SOCK_NOTIFY_EVENT_HANGUP = 4;

const int SOCK_NOTIFY_EVENT_ERR = 64;

const int SOCK_NOTIFY_EVENT_REMOVE = 128;

const int SOCK_NOTIFY_EVENTS_ALL = 199;

const int SOCK_NOTIFY_OP_NONE = 0;

const int SOCK_NOTIFY_OP_ENABLE = 1;

const int SOCK_NOTIFY_OP_DISABLE = 2;

const int SOCK_NOTIFY_OP_REMOVE = 4;

const int SOCK_NOTIFY_TRIGGER_ONESHOT = 1;

const int SOCK_NOTIFY_TRIGGER_PERSISTENT = 2;

const int SOCK_NOTIFY_TRIGGER_LEVEL = 4;

const int SOCK_NOTIFY_TRIGGER_EDGE = 8;

const int SOCK_NOTIFY_TRIGGER_ALL = 15;

const int IFF_UP = 1;

const int IFF_BROADCAST = 2;

const int IFF_LOOPBACK = 4;

const int IFF_POINTTOPOINT = 8;

const int IFF_MULTICAST = 16;

const int IP_OPTIONS = 1;

const int IP_HDRINCL = 2;

const int IP_TOS = 3;

const int IP_TTL = 4;

const int IP_MULTICAST_IF = 9;

const int IP_MULTICAST_TTL = 10;

const int IP_MULTICAST_LOOP = 11;

const int IP_ADD_MEMBERSHIP = 12;

const int IP_DROP_MEMBERSHIP = 13;

const int IP_DONTFRAGMENT = 14;

const int IP_ADD_SOURCE_MEMBERSHIP = 15;

const int IP_DROP_SOURCE_MEMBERSHIP = 16;

const int IP_BLOCK_SOURCE = 17;

const int IP_UNBLOCK_SOURCE = 18;

const int IP_PKTINFO = 19;

const int IP_HOPLIMIT = 21;

const int IP_RECVTTL = 21;

const int IP_RECEIVE_BROADCAST = 22;

const int IP_RECVIF = 24;

const int IP_RECVDSTADDR = 25;

const int IP_IFLIST = 28;

const int IP_ADD_IFLIST = 29;

const int IP_DEL_IFLIST = 30;

const int IP_UNICAST_IF = 31;

const int IP_RTHDR = 32;

const int IP_GET_IFLIST = 33;

const int IP_RECVRTHDR = 38;

const int IP_TCLASS = 39;

const int IP_RECVTCLASS = 40;

const int IP_RECVTOS = 40;

const int IP_ORIGINAL_ARRIVAL_IF = 47;

const int IP_ECN = 50;

const int IP_RECVECN = 50;

const int IP_PKTINFO_EX = 51;

const int IP_WFP_REDIRECT_RECORDS = 60;

const int IP_WFP_REDIRECT_CONTEXT = 70;

const int IP_MTU_DISCOVER = 71;

const int IP_MTU = 73;

const int IP_NRT_INTERFACE = 74;

const int IP_RECVERR = 75;

const int IP_USER_MTU = 76;

const int IP_UNSPECIFIED_TYPE_OF_SERVICE = -1;

const int IPV6_ADDRESS_BITS = 128;

const int IN6ADDR_LINKLOCALPREFIX_LENGTH = 64;

const int IN6ADDR_MULTICASTPREFIX_LENGTH = 8;

const int IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH = 104;

const int IN6ADDR_V4MAPPEDPREFIX_LENGTH = 96;

const int IN6ADDR_6TO4PREFIX_LENGTH = 16;

const int IN6ADDR_TEREDOPREFIX_LENGTH = 32;

const int SIO_GET_INTERFACE_LIST = 1074033791;

const int SIO_GET_INTERFACE_LIST_EX = 1074033790;

const int SIO_SET_MULTICAST_FILTER = 2147775613;

const int SIO_GET_MULTICAST_FILTER = 2147775612;

const int SIOCSIPMSFILTER = 2147775613;

const int SIOCGIPMSFILTER = 2147775612;

const int SIOCSMSFILTER = 2147775614;

const int SIOCGMSFILTER = 2147775615;

const int SIO_IDEAL_SEND_BACKLOG_QUERY = 1074033787;

const int SIO_IDEAL_SEND_BACKLOG_CHANGE = 536900730;

const int MCAST_JOIN_GROUP = 41;

const int MCAST_LEAVE_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_JOIN_SOURCE_GROUP = 45;

const int MCAST_LEAVE_SOURCE_GROUP = 46;

const int IPV6_HOPOPTS = 1;

const int IPV6_HDRINCL = 2;

const int IPV6_UNICAST_HOPS = 4;

const int IPV6_MULTICAST_IF = 9;

const int IPV6_MULTICAST_HOPS = 10;

const int IPV6_MULTICAST_LOOP = 11;

const int IPV6_ADD_MEMBERSHIP = 12;

const int IPV6_JOIN_GROUP = 12;

const int IPV6_DROP_MEMBERSHIP = 13;

const int IPV6_LEAVE_GROUP = 13;

const int IPV6_DONTFRAG = 14;

const int IPV6_PKTINFO = 19;

const int IPV6_HOPLIMIT = 21;

const int IPV6_PROTECTION_LEVEL = 23;

const int IPV6_RECVIF = 24;

const int IPV6_RECVDSTADDR = 25;

const int IPV6_CHECKSUM = 26;

const int IPV6_V6ONLY = 27;

const int IPV6_IFLIST = 28;

const int IPV6_ADD_IFLIST = 29;

const int IPV6_DEL_IFLIST = 30;

const int IPV6_UNICAST_IF = 31;

const int IPV6_RTHDR = 32;

const int IPV6_GET_IFLIST = 33;

const int IPV6_RECVRTHDR = 38;

const int IPV6_TCLASS = 39;

const int IPV6_RECVTCLASS = 40;

const int IPV6_ECN = 50;

const int IPV6_RECVECN = 50;

const int IPV6_PKTINFO_EX = 51;

const int IPV6_WFP_REDIRECT_RECORDS = 60;

const int IPV6_WFP_REDIRECT_CONTEXT = 70;

const int IPV6_MTU_DISCOVER = 71;

const int IPV6_MTU = 72;

const int IPV6_NRT_INTERFACE = 74;

const int IPV6_RECVERR = 75;

const int IPV6_USER_MTU = 76;

const int IP_UNSPECIFIED_HOP_LIMIT = -1;

const int IP_PROTECTION_LEVEL = 23;

const int PROTECTION_LEVEL_UNRESTRICTED = 10;

const int PROTECTION_LEVEL_EDGERESTRICTED = 20;

const int PROTECTION_LEVEL_RESTRICTED = 30;

const int PROTECTION_LEVEL_DEFAULT = 4294967295;

const int INET_ADDRSTRLEN = 22;

const int INET6_ADDRSTRLEN = 65;

const int TCP_OFFLOAD_NO_PREFERENCE = 0;

const int TCP_OFFLOAD_NOT_PREFERRED = 1;

const int TCP_OFFLOAD_PREFERRED = 2;

const int TCP_EXPEDITED_1122 = 2;

const int TCP_KEEPALIVE = 3;

const int TCP_MAXSEG = 4;

const int TCP_MAXRT = 5;

const int TCP_STDURG = 6;

const int TCP_NOURG = 7;

const int TCP_ATMARK = 8;

const int TCP_NOSYNRETRIES = 9;

const int TCP_TIMESTAMPS = 10;

const int TCP_OFFLOAD_PREFERENCE = 11;

const int TCP_CONGESTION_ALGORITHM = 12;

const int TCP_DELAY_FIN_ACK = 13;

const int TCP_MAXRTMS = 14;

const int TCP_FASTOPEN = 15;

const int TCP_KEEPCNT = 16;

const int TCP_KEEPIDLE = 3;

const int TCP_KEEPINTVL = 17;

const int TCP_FAIL_CONNECT_ON_ICMP_ERROR = 18;

const int TCP_ICMP_ERROR_INFO = 19;

const int UDP_SEND_MSG_SIZE = 2;

const int UDP_RECV_MAX_COALESCED_SIZE = 3;

const int UDP_COALESCED_INFO = 3;

const int UDP_NOCHECKSUM = 1;

const int UDP_CHECKSUM_COVERAGE = 20;

const int EAI_AGAIN = 11002;

const int EAI_BADFLAGS = 10022;

const int EAI_FAIL = 11003;

const int EAI_FAMILY = 10047;

const int EAI_MEMORY = 8;

const int EAI_NOSECURENAME = 11032;

const int EAI_NONAME = 11001;

const int EAI_SERVICE = 10109;

const int EAI_SOCKTYPE = 10044;

const int EAI_IPSECPOLICY = 11033;

const int EAI_NODATA = 11001;

const int GAI_STRERROR_BUFFER_SIZE = 1024;

const int _SH_DENYRW = 16;

const int _SH_DENYWR = 32;

const int _SH_DENYRD = 48;

const int _SH_DENYNO = 64;

const int _SH_SECURE = 128;

const int SH_DENYRW = 16;

const int SH_DENYWR = 32;

const int SH_DENYRD = 48;

const int SH_DENYNO = 64;

const int _A_NORMAL = 0;

const int _A_RDONLY = 1;

const int _A_HIDDEN = 2;

const int _A_SYSTEM = 4;

const int _A_SUBDIR = 16;

const int _A_ARCH = 32;

const int UA_IPV6 = 1;

const int UA_INVALID_SOCKET = -1;

const int UA_INTERRUPTED = 10004;

const int UA_AGAIN = 10035;

const int UA_EAGAIN = 11;

const int UA_WOULDBLOCK = 10035;

const int UA_ERR_CONNECTION_PROGRESS = 10035;

const int UA_POLLIN = 256;

const int UA_POLLOUT = 16;

const int CNLEN = 15;

const int LM20_CNLEN = 15;

const int DNLEN = 15;

const int LM20_DNLEN = 15;

const int UNCLEN = 17;

const int LM20_UNCLEN = 17;

const int NNLEN = 80;

const int LM20_NNLEN = 12;

const int RMLEN = 98;

const int LM20_RMLEN = 30;

const int SNLEN = 80;

const int LM20_SNLEN = 15;

const int STXTLEN = 256;

const int LM20_STXTLEN = 63;

const int PATHLEN = 256;

const int LM20_PATHLEN = 256;

const int DEVLEN = 80;

const int LM20_DEVLEN = 8;

const int EVLEN = 16;

const int UNLEN = 256;

const int LM20_UNLEN = 20;

const int GNLEN = 256;

const int LM20_GNLEN = 20;

const int PWLEN = 256;

const int LM20_PWLEN = 14;

const int SHPWLEN = 8;

const int CLTYPE_LEN = 12;

const int MAXCOMMENTSZ = 256;

const int LM20_MAXCOMMENTSZ = 48;

const int QNLEN = 80;

const int LM20_QNLEN = 12;

const int ALERTSZ = 128;

const int MAXDEVENTRIES = 32;

const int NETBIOS_NAME_LEN = 16;

const int MAX_PREFERRED_LENGTH = 4294967295;

const int CRYPT_KEY_LEN = 7;

const int CRYPT_TXT_LEN = 8;

const int ENCRYPTED_PWLEN = 16;

const int SESSION_PWLEN = 24;

const int SESSION_CRYPT_KLEN = 21;

const int PARMNUM_ALL = 0;

const int PARM_ERROR_UNKNOWN = 4294967295;

const int PARM_ERROR_NONE = 0;

const int PARMNUM_BASE_INFOLEVEL = 1000;

const String MESSAGE_FILENAME = 'NETMSG';

const String OS2MSG_FILENAME = 'BASE';

const String HELP_MSG_FILENAME = 'NETH';

const String BACKUP_MSG_FILENAME = 'BAK.MSG';

const int PLATFORM_ID_DOS = 300;

const int PLATFORM_ID_OS2 = 400;

const int PLATFORM_ID_NT = 500;

const int PLATFORM_ID_OSF = 600;

const int PLATFORM_ID_VMS = 700;

const int MAX_LANMAN_MESSAGE_ID = 5899;

const int MAX_INTERFACE_NAME_LEN = 256;

const int MAX_TRANSPORT_NAME_LEN = 40;

const int MAX_MEDIA_NAME = 16;

const int MAX_PORT_NAME = 16;

const int MAX_DEVICE_NAME = 128;

const int MAX_PHONE_NUMBER_LEN = 128;

const int MAX_DEVICETYPE_NAME = 16;

const int MIN_IF_TYPE = 1;

const int IF_TYPE_OTHER = 1;

const int IF_TYPE_REGULAR_1822 = 2;

const int IF_TYPE_HDH_1822 = 3;

const int IF_TYPE_DDN_X25 = 4;

const int IF_TYPE_RFC877_X25 = 5;

const int IF_TYPE_ETHERNET_CSMACD = 6;

const int IF_TYPE_IS088023_CSMACD = 7;

const int IF_TYPE_ISO88024_TOKENBUS = 8;

const int IF_TYPE_ISO88025_TOKENRING = 9;

const int IF_TYPE_ISO88026_MAN = 10;

const int IF_TYPE_STARLAN = 11;

const int IF_TYPE_PROTEON_10MBIT = 12;

const int IF_TYPE_PROTEON_80MBIT = 13;

const int IF_TYPE_HYPERCHANNEL = 14;

const int IF_TYPE_FDDI = 15;

const int IF_TYPE_LAP_B = 16;

const int IF_TYPE_SDLC = 17;

const int IF_TYPE_DS1 = 18;

const int IF_TYPE_E1 = 19;

const int IF_TYPE_BASIC_ISDN = 20;

const int IF_TYPE_PRIMARY_ISDN = 21;

const int IF_TYPE_PROP_POINT2POINT_SERIAL = 22;

const int IF_TYPE_PPP = 23;

const int IF_TYPE_SOFTWARE_LOOPBACK = 24;

const int IF_TYPE_EON = 25;

const int IF_TYPE_ETHERNET_3MBIT = 26;

const int IF_TYPE_NSIP = 27;

const int IF_TYPE_SLIP = 28;

const int IF_TYPE_ULTRA = 29;

const int IF_TYPE_DS3 = 30;

const int IF_TYPE_SIP = 31;

const int IF_TYPE_FRAMERELAY = 32;

const int IF_TYPE_RS232 = 33;

const int IF_TYPE_PARA = 34;

const int IF_TYPE_ARCNET = 35;

const int IF_TYPE_ARCNET_PLUS = 36;

const int IF_TYPE_ATM = 37;

const int IF_TYPE_MIO_X25 = 38;

const int IF_TYPE_SONET = 39;

const int IF_TYPE_X25_PLE = 40;

const int IF_TYPE_ISO88022_LLC = 41;

const int IF_TYPE_LOCALTALK = 42;

const int IF_TYPE_SMDS_DXI = 43;

const int IF_TYPE_FRAMERELAY_SERVICE = 44;

const int IF_TYPE_V35 = 45;

const int IF_TYPE_HSSI = 46;

const int IF_TYPE_HIPPI = 47;

const int IF_TYPE_MODEM = 48;

const int IF_TYPE_AAL5 = 49;

const int IF_TYPE_SONET_PATH = 50;

const int IF_TYPE_SONET_VT = 51;

const int IF_TYPE_SMDS_ICIP = 52;

const int IF_TYPE_PROP_VIRTUAL = 53;

const int IF_TYPE_PROP_MULTIPLEXOR = 54;

const int IF_TYPE_IEEE80212 = 55;

const int IF_TYPE_FIBRECHANNEL = 56;

const int IF_TYPE_HIPPIINTERFACE = 57;

const int IF_TYPE_FRAMERELAY_INTERCONNECT = 58;

const int IF_TYPE_AFLANE_8023 = 59;

const int IF_TYPE_AFLANE_8025 = 60;

const int IF_TYPE_CCTEMUL = 61;

const int IF_TYPE_FASTETHER = 62;

const int IF_TYPE_ISDN = 63;

const int IF_TYPE_V11 = 64;

const int IF_TYPE_V36 = 65;

const int IF_TYPE_G703_64K = 66;

const int IF_TYPE_G703_2MB = 67;

const int IF_TYPE_QLLC = 68;

const int IF_TYPE_FASTETHER_FX = 69;

const int IF_TYPE_CHANNEL = 70;

const int IF_TYPE_IEEE80211 = 71;

const int IF_TYPE_IBM370PARCHAN = 72;

const int IF_TYPE_ESCON = 73;

const int IF_TYPE_DLSW = 74;

const int IF_TYPE_ISDN_S = 75;

const int IF_TYPE_ISDN_U = 76;

const int IF_TYPE_LAP_D = 77;

const int IF_TYPE_IPSWITCH = 78;

const int IF_TYPE_RSRB = 79;

const int IF_TYPE_ATM_LOGICAL = 80;

const int IF_TYPE_DS0 = 81;

const int IF_TYPE_DS0_BUNDLE = 82;

const int IF_TYPE_BSC = 83;

const int IF_TYPE_ASYNC = 84;

const int IF_TYPE_CNR = 85;

const int IF_TYPE_ISO88025R_DTR = 86;

const int IF_TYPE_EPLRS = 87;

const int IF_TYPE_ARAP = 88;

const int IF_TYPE_PROP_CNLS = 89;

const int IF_TYPE_HOSTPAD = 90;

const int IF_TYPE_TERMPAD = 91;

const int IF_TYPE_FRAMERELAY_MPI = 92;

const int IF_TYPE_X213 = 93;

const int IF_TYPE_ADSL = 94;

const int IF_TYPE_RADSL = 95;

const int IF_TYPE_SDSL = 96;

const int IF_TYPE_VDSL = 97;

const int IF_TYPE_ISO88025_CRFPRINT = 98;

const int IF_TYPE_MYRINET = 99;

const int IF_TYPE_VOICE_EM = 100;

const int IF_TYPE_VOICE_FXO = 101;

const int IF_TYPE_VOICE_FXS = 102;

const int IF_TYPE_VOICE_ENCAP = 103;

const int IF_TYPE_VOICE_OVERIP = 104;

const int IF_TYPE_ATM_DXI = 105;

const int IF_TYPE_ATM_FUNI = 106;

const int IF_TYPE_ATM_IMA = 107;

const int IF_TYPE_PPPMULTILINKBUNDLE = 108;

const int IF_TYPE_IPOVER_CDLC = 109;

const int IF_TYPE_IPOVER_CLAW = 110;

const int IF_TYPE_STACKTOSTACK = 111;

const int IF_TYPE_VIRTUALIPADDRESS = 112;

const int IF_TYPE_MPC = 113;

const int IF_TYPE_IPOVER_ATM = 114;

const int IF_TYPE_ISO88025_FIBER = 115;

const int IF_TYPE_TDLC = 116;

const int IF_TYPE_GIGABITETHERNET = 117;

const int IF_TYPE_HDLC = 118;

const int IF_TYPE_LAP_F = 119;

const int IF_TYPE_V37 = 120;

const int IF_TYPE_X25_MLP = 121;

const int IF_TYPE_X25_HUNTGROUP = 122;

const int IF_TYPE_TRANSPHDLC = 123;

const int IF_TYPE_INTERLEAVE = 124;

const int IF_TYPE_FAST = 125;

const int IF_TYPE_IP = 126;

const int IF_TYPE_DOCSCABLE_MACLAYER = 127;

const int IF_TYPE_DOCSCABLE_DOWNSTREAM = 128;

const int IF_TYPE_DOCSCABLE_UPSTREAM = 129;

const int IF_TYPE_A12MPPSWITCH = 130;

const int IF_TYPE_TUNNEL = 131;

const int IF_TYPE_COFFEE = 132;

const int IF_TYPE_CES = 133;

const int IF_TYPE_ATM_SUBINTERFACE = 134;

const int IF_TYPE_L2_VLAN = 135;

const int IF_TYPE_L3_IPVLAN = 136;

const int IF_TYPE_L3_IPXVLAN = 137;

const int IF_TYPE_DIGITALPOWERLINE = 138;

const int IF_TYPE_MEDIAMAILOVERIP = 139;

const int IF_TYPE_DTM = 140;

const int IF_TYPE_DCN = 141;

const int IF_TYPE_IPFORWARD = 142;

const int IF_TYPE_MSDSL = 143;

const int IF_TYPE_IEEE1394 = 144;

const int IF_TYPE_IF_GSN = 145;

const int IF_TYPE_DVBRCC_MACLAYER = 146;

const int IF_TYPE_DVBRCC_DOWNSTREAM = 147;

const int IF_TYPE_DVBRCC_UPSTREAM = 148;

const int IF_TYPE_ATM_VIRTUAL = 149;

const int IF_TYPE_MPLS_TUNNEL = 150;

const int IF_TYPE_SRP = 151;

const int IF_TYPE_VOICEOVERATM = 152;

const int IF_TYPE_VOICEOVERFRAMERELAY = 153;

const int IF_TYPE_IDSL = 154;

const int IF_TYPE_COMPOSITELINK = 155;

const int IF_TYPE_SS7_SIGLINK = 156;

const int IF_TYPE_PROP_WIRELESS_P2P = 157;

const int IF_TYPE_FR_FORWARD = 158;

const int IF_TYPE_RFC1483 = 159;

const int IF_TYPE_USB = 160;

const int IF_TYPE_IEEE8023AD_LAG = 161;

const int IF_TYPE_BGP_POLICY_ACCOUNTING = 162;

const int IF_TYPE_FRF16_MFR_BUNDLE = 163;

const int IF_TYPE_H323_GATEKEEPER = 164;

const int IF_TYPE_H323_PROXY = 165;

const int IF_TYPE_MPLS = 166;

const int IF_TYPE_MF_SIGLINK = 167;

const int IF_TYPE_HDSL2 = 168;

const int IF_TYPE_SHDSL = 169;

const int IF_TYPE_DS1_FDL = 170;

const int IF_TYPE_POS = 171;

const int IF_TYPE_DVB_ASI_IN = 172;

const int IF_TYPE_DVB_ASI_OUT = 173;

const int IF_TYPE_PLC = 174;

const int IF_TYPE_NFAS = 175;

const int IF_TYPE_TR008 = 176;

const int IF_TYPE_GR303_RDT = 177;

const int IF_TYPE_GR303_IDT = 178;

const int IF_TYPE_ISUP = 179;

const int IF_TYPE_PROP_DOCS_WIRELESS_MACLAYER = 180;

const int IF_TYPE_PROP_DOCS_WIRELESS_DOWNSTREAM = 181;

const int IF_TYPE_PROP_DOCS_WIRELESS_UPSTREAM = 182;

const int IF_TYPE_HIPERLAN2 = 183;

const int IF_TYPE_PROP_BWA_P2MP = 184;

const int IF_TYPE_SONET_OVERHEAD_CHANNEL = 185;

const int IF_TYPE_DIGITAL_WRAPPER_OVERHEAD_CHANNEL = 186;

const int IF_TYPE_AAL2 = 187;

const int IF_TYPE_RADIO_MAC = 188;

const int IF_TYPE_ATM_RADIO = 189;

const int IF_TYPE_IMT = 190;

const int IF_TYPE_MVL = 191;

const int IF_TYPE_REACH_DSL = 192;

const int IF_TYPE_FR_DLCI_ENDPT = 193;

const int IF_TYPE_ATM_VCI_ENDPT = 194;

const int IF_TYPE_OPTICAL_CHANNEL = 195;

const int IF_TYPE_OPTICAL_TRANSPORT = 196;

const int IF_TYPE_IEEE80216_WMAN = 237;

const int IF_TYPE_WWANPP = 243;

const int IF_TYPE_WWANPP2 = 244;

const int IF_TYPE_IEEE802154 = 259;

const int IF_TYPE_XBOX_WIRELESS = 281;

const int MAX_IF_TYPE = 281;

const int IF_CHECK_NONE = 0;

const int IF_CHECK_MCAST = 1;

const int IF_CHECK_SEND = 2;

const int IF_CONNECTION_DEDICATED = 1;

const int IF_CONNECTION_PASSIVE = 2;

const int IF_CONNECTION_DEMAND = 3;

const int IF_ADMIN_STATUS_UP = 1;

const int IF_ADMIN_STATUS_DOWN = 2;

const int IF_ADMIN_STATUS_TESTING = 3;

const int MIB_IF_TYPE_OTHER = 1;

const int MIB_IF_TYPE_ETHERNET = 6;

const int MIB_IF_TYPE_TOKENRING = 9;

const int MIB_IF_TYPE_FDDI = 15;

const int MIB_IF_TYPE_PPP = 23;

const int MIB_IF_TYPE_LOOPBACK = 24;

const int MIB_IF_TYPE_SLIP = 28;

const int MIB_IF_ADMIN_STATUS_UP = 1;

const int MIB_IF_ADMIN_STATUS_DOWN = 2;

const int MIB_IF_ADMIN_STATUS_TESTING = 3;

const int MIB_IF_OPER_STATUS_NON_OPERATIONAL = 0;

const int MIB_IF_OPER_STATUS_UNREACHABLE = 1;

const int MIB_IF_OPER_STATUS_DISCONNECTED = 2;

const int MIB_IF_OPER_STATUS_CONNECTING = 3;

const int MIB_IF_OPER_STATUS_CONNECTED = 4;

const int MIB_IF_OPER_STATUS_OPERATIONAL = 5;

const int IPRTRMGR_PID = 10000;

const int ANY_SIZE = 1;

const int IF_NUMBER = 0;

const int IF_TABLE = 1;

const int IF_ROW = 2;

const int IP_STATS = 3;

const int IP_ADDRTABLE = 4;

const int IP_ADDRROW = 5;

const int IP_FORWARDNUMBER = 6;

const int IP_FORWARDTABLE = 7;

const int IP_FORWARDROW = 8;

const int IP_NETTABLE = 9;

const int IP_NETROW = 10;

const int ICMP_STATS = 11;

const int TCP_STATS = 12;

const int TCP_TABLE = 13;

const int TCP_ROW = 14;

const int UDP_STATS = 15;

const int UDP_TABLE = 16;

const int UDP_ROW = 17;

const int MCAST_MFE = 18;

const int MCAST_MFE_STATS = 19;

const int BEST_IF = 20;

const int BEST_ROUTE = 21;

const int PROXY_ARP = 22;

const int MCAST_IF_ENTRY = 23;

const int MCAST_GLOBAL = 24;

const int IF_STATUS = 25;

const int MCAST_BOUNDARY = 26;

const int MCAST_SCOPE = 27;

const int DEST_MATCHING = 28;

const int DEST_LONGER = 29;

const int DEST_SHORTER = 30;

const int ROUTE_MATCHING = 31;

const int ROUTE_LONGER = 32;

const int ROUTE_SHORTER = 33;

const int ROUTE_STATE = 34;

const int MCAST_MFE_STATS_EX = 35;

const int IP6_STATS = 36;

const int UDP6_STATS = 37;

const int TCP6_STATS = 38;

const int NUMBER_OF_EXPORTED_VARIABLES = 39;

const int NET_IF_COMPARTMENT_ID_UNSPECIFIED = 0;

const int NET_IF_COMPARTMENT_ID_PRIMARY = 1;

const int NET_IF_OPER_STATUS_DOWN_NOT_AUTHENTICATED = 1;

const int NET_IF_OPER_STATUS_DOWN_NOT_MEDIA_CONNECTED = 2;

const int NET_IF_OPER_STATUS_DORMANT_PAUSED = 4;

const int NET_IF_OPER_STATUS_DORMANT_LOW_POWER = 8;

const int NET_IF_COMPARTMENT_SCOPE_UNSPECIFIED = 0;

const int NET_IF_COMPARTMENT_SCOPE_ALL = 4294967295;

const int NET_IF_OID_IF_ALIAS = 1;

const int NET_IF_OID_COMPARTMENT_ID = 2;

const int NET_IF_OID_NETWORK_GUID = 3;

const int NET_IF_OID_IF_ENTRY = 4;

const int NET_SITEID_UNSPECIFIED = 0;

const int NET_SITEID_MAXUSER = 134217727;

const int NET_SITEID_MAXSYSTEM = 268435455;

const int NET_IFINDEX_UNSPECIFIED = 0;

const int NET_IFLUID_UNSPECIFIED = 0;

const int IFI_UNSPECIFIED = 0;

const int NIIF_HARDWARE_INTERFACE = 1;

const int NIIF_FILTER_INTERFACE = 2;

const int NIIF_NDIS_RESERVED1 = 4;

const int NIIF_NDIS_RESERVED2 = 8;

const int NIIF_NDIS_RESERVED3 = 16;

const int NIIF_NDIS_WDM_INTERFACE = 32;

const int NIIF_NDIS_ENDPOINT_INTERFACE = 64;

const int NIIF_NDIS_ISCSI_INTERFACE = 128;

const int NIIF_NDIS_RESERVED4 = 256;

const int NIIF_WAN_TUNNEL_TYPE_UNKNOWN = 4294967295;

const int NET_IF_LINK_SPEED_UNKNOWN = -1;

const int NIIF_BUS_NUMBER_UNKNOWN = 4294967295;

const int NIIF_SLOT_NUMBER_UNKNOWN = 4294967295;

const int NIIF_FUNCTION_NUMBER_UNKNOWN = 4294967295;

const int IF_MAX_STRING_SIZE = 256;

const int IF_MAX_PHYS_ADDRESS_LENGTH = 32;

const int MAXLEN_PHYSADDR = 8;

const int MAXLEN_IFDESCR = 256;

const int NlpoOther = 0;

const int NlpoManual = 1;

const int NlpoWellKnown = 2;

const int NlpoDhcp = 3;

const int NlpoRouterAdvertisement = 4;

const int NL_MAX_METRIC_COMPONENT = 2147483647;

const int NET_IF_CURRENT_SESSION = 4294967295;

const int MIB_IPADDR_PRIMARY = 1;

const int MIB_IPADDR_DYNAMIC = 4;

const int MIB_IPADDR_DISCONNECTED = 8;

const int MIB_IPADDR_DELETED = 64;

const int MIB_IPADDR_TRANSIENT = 128;

const int MIB_IPADDR_DNS_ELIGIBLE = 256;

const int MIB_IPROUTE_TYPE_OTHER = 1;

const int MIB_IPROUTE_TYPE_INVALID = 2;

const int MIB_IPROUTE_TYPE_DIRECT = 3;

const int MIB_IPROUTE_TYPE_INDIRECT = 4;

const int MIB_IPROUTE_METRIC_UNUSED = 4294967295;

const int MIB_USE_CURRENT_TTL = 4294967295;

const int MIB_USE_CURRENT_FORWARDING = 4294967295;

const int ICMP6_INFOMSG_MASK = 128;

const int SIZEOF_BASIC_MIB_MFE = 60;

const int SIZEOF_BASIC_MIB_MFE_STATS = 64;

const int SIZEOF_BASIC_MIB_MFE_STATS_EX = 84;

const int TCPIP_OWNING_MODULE_SIZE = 16;

const int MIB_TCP_MAXCONN_DYNAMIC = 4294967295;

const int MAX_SCOPE_NAME_LEN = 255;

const int MAX_MIB_OFFSET = 8;

const int IP_EXPORT_INCLUDED = 1;

const int MAX_ADAPTER_NAME = 128;

const int IP_STATUS_BASE = 11000;

const int IP_SUCCESS = 0;

const int IP_BUF_TOO_SMALL = 11001;

const int IP_DEST_NET_UNREACHABLE = 11002;

const int IP_DEST_HOST_UNREACHABLE = 11003;

const int IP_DEST_PROT_UNREACHABLE = 11004;

const int IP_DEST_PORT_UNREACHABLE = 11005;

const int IP_NO_RESOURCES = 11006;

const int IP_BAD_OPTION = 11007;

const int IP_HW_ERROR = 11008;

const int IP_PACKET_TOO_BIG = 11009;

const int IP_REQ_TIMED_OUT = 11010;

const int IP_BAD_REQ = 11011;

const int IP_BAD_ROUTE = 11012;

const int IP_TTL_EXPIRED_TRANSIT = 11013;

const int IP_TTL_EXPIRED_REASSEM = 11014;

const int IP_PARAM_PROBLEM = 11015;

const int IP_SOURCE_QUENCH = 11016;

const int IP_OPTION_TOO_BIG = 11017;

const int IP_BAD_DESTINATION = 11018;

const int IP_DEST_NO_ROUTE = 11002;

const int IP_DEST_ADDR_UNREACHABLE = 11003;

const int IP_DEST_PROHIBITED = 11004;

const int IP_HOP_LIMIT_EXCEEDED = 11013;

const int IP_REASSEMBLY_TIME_EXCEEDED = 11014;

const int IP_PARAMETER_PROBLEM = 11015;

const int IP_DEST_UNREACHABLE = 11040;

const int IP_TIME_EXCEEDED = 11041;

const int IP_BAD_HEADER = 11042;

const int IP_UNRECOGNIZED_NEXT_HEADER = 11043;

const int IP_ICMP_ERROR = 11044;

const int IP_DEST_SCOPE_MISMATCH = 11045;

const int IP_ADDR_DELETED = 11019;

const int IP_SPEC_MTU_CHANGE = 11020;

const int IP_MTU_CHANGE = 11021;

const int IP_UNLOAD = 11022;

const int IP_ADDR_ADDED = 11023;

const int IP_MEDIA_CONNECT = 11024;

const int IP_MEDIA_DISCONNECT = 11025;

const int IP_BIND_ADAPTER = 11026;

const int IP_UNBIND_ADAPTER = 11027;

const int IP_DEVICE_DOES_NOT_EXIST = 11028;

const int IP_DUPLICATE_ADDRESS = 11029;

const int IP_INTERFACE_METRIC_CHANGE = 11030;

const int IP_RECONFIG_SECFLTR = 11031;

const int IP_NEGOTIATING_IPSEC = 11032;

const int IP_INTERFACE_WOL_CAPABILITY_CHANGE = 11033;

const int IP_DUPLICATE_IPADD = 11034;

const int IP_GENERAL_FAILURE = 11050;

const int MAX_IP_STATUS = 11050;

const int IP_PENDING = 11255;

const int IP_FLAG_REVERSE = 1;

const int IP_FLAG_DF = 2;

const int IP_OPT_EOL = 0;

const int IP_OPT_NOP = 1;

const int IP_OPT_SECURITY = 130;

const int IP_OPT_LSRR = 131;

const int IP_OPT_SSRR = 137;

const int IP_OPT_RR = 7;

const int IP_OPT_TS = 68;

const int IP_OPT_SID = 136;

const int IP_OPT_ROUTER_ALERT = 148;

const int MAX_OPT_SIZE = 40;

const int _CRT_USE_CONFORMING_ANNEX_K_TIME = 0;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int MAX_ADAPTER_DESCRIPTION_LENGTH = 128;

const int MAX_ADAPTER_NAME_LENGTH = 256;

const int MAX_ADAPTER_ADDRESS_LENGTH = 8;

const int DEFAULT_MINIMUM_ENTITIES = 32;

const int MAX_HOSTNAME_LEN = 128;

const int MAX_DOMAIN_NAME_LEN = 128;

const int MAX_SCOPE_ID_LEN = 256;

const int MAX_DHCPV6_DUID_LENGTH = 130;

const int MAX_DNS_SUFFIX_STRING_LENGTH = 256;

const int BROADCAST_NODETYPE = 1;

const int PEER_TO_PEER_NODETYPE = 2;

const int MIXED_NODETYPE = 4;

const int HYBRID_NODETYPE = 8;

const int IP_ADAPTER_ADDRESS_DNS_ELIGIBLE = 1;

const int IP_ADAPTER_ADDRESS_TRANSIENT = 2;

const int IP_ADAPTER_DDNS_ENABLED = 1;

const int IP_ADAPTER_REGISTER_ADAPTER_SUFFIX = 2;

const int IP_ADAPTER_DHCP_ENABLED = 4;

const int IP_ADAPTER_RECEIVE_ONLY = 8;

const int IP_ADAPTER_NO_MULTICAST = 16;

const int IP_ADAPTER_IPV6_OTHER_STATEFUL_CONFIG = 32;

const int IP_ADAPTER_NETBIOS_OVER_TCPIP_ENABLED = 64;

const int IP_ADAPTER_IPV4_ENABLED = 128;

const int IP_ADAPTER_IPV6_ENABLED = 256;

const int IP_ADAPTER_IPV6_MANAGE_ADDRESS_CONFIG = 512;

const int GAA_FLAG_SKIP_UNICAST = 1;

const int GAA_FLAG_SKIP_ANYCAST = 2;

const int GAA_FLAG_SKIP_MULTICAST = 4;

const int GAA_FLAG_SKIP_DNS_SERVER = 8;

const int GAA_FLAG_INCLUDE_PREFIX = 16;

const int GAA_FLAG_SKIP_FRIENDLY_NAME = 32;

const int GAA_FLAG_INCLUDE_WINS_INFO = 64;

const int GAA_FLAG_INCLUDE_GATEWAYS = 128;

const int GAA_FLAG_INCLUDE_ALL_INTERFACES = 256;

const int GAA_FLAG_INCLUDE_ALL_COMPARTMENTS = 512;

const int GAA_FLAG_INCLUDE_TUNNEL_BINDINGORDER = 1024;

const int GAA_FLAG_SKIP_DNS_INFO = 2048;

const int NET_STRING_IPV4_ADDRESS = 1;

const int NET_STRING_IPV4_SERVICE = 2;

const int NET_STRING_IPV4_NETWORK = 4;

const int NET_STRING_IPV6_ADDRESS = 8;

const int NET_STRING_IPV6_ADDRESS_NO_SCOPE = 16;

const int NET_STRING_IPV6_SERVICE = 32;

const int NET_STRING_IPV6_SERVICE_NO_SCOPE = 64;

const int NET_STRING_IPV6_NETWORK = 128;

const int NET_STRING_NAMED_ADDRESS = 256;

const int NET_STRING_NAMED_SERVICE = 512;

const int NET_STRING_IP_ADDRESS = 9;

const int NET_STRING_IP_ADDRESS_NO_SCOPE = 17;

const int NET_STRING_IP_SERVICE = 34;

const int NET_STRING_IP_SERVICE_NO_SCOPE = 66;

const int NET_STRING_IP_NETWORK = 132;

const int NET_STRING_ANY_ADDRESS = 265;

const int NET_STRING_ANY_ADDRESS_NO_SCOPE = 273;

const int NET_STRING_ANY_SERVICE = 546;

const int NET_STRING_ANY_SERVICE_NO_SCOPE = 578;

const int DEVPROP_TYPEMOD_ARRAY = 4096;

const int DEVPROP_TYPEMOD_LIST = 8192;

const int DEVPROP_TYPE_EMPTY = 0;

const int DEVPROP_TYPE_NULL = 1;

const int DEVPROP_TYPE_SBYTE = 2;

const int DEVPROP_TYPE_BYTE = 3;

const int DEVPROP_TYPE_INT16 = 4;

const int DEVPROP_TYPE_UINT16 = 5;

const int DEVPROP_TYPE_INT32 = 6;

const int DEVPROP_TYPE_UINT32 = 7;

const int DEVPROP_TYPE_INT64 = 8;

const int DEVPROP_TYPE_UINT64 = 9;

const int DEVPROP_TYPE_FLOAT = 10;

const int DEVPROP_TYPE_DOUBLE = 11;

const int DEVPROP_TYPE_DECIMAL = 12;

const int DEVPROP_TYPE_GUID = 13;

const int DEVPROP_TYPE_CURRENCY = 14;

const int DEVPROP_TYPE_DATE = 15;

const int DEVPROP_TYPE_FILETIME = 16;

const int DEVPROP_TYPE_BOOLEAN = 17;

const int DEVPROP_TYPE_STRING = 18;

const int DEVPROP_TYPE_STRING_LIST = 8210;

const int DEVPROP_TYPE_SECURITY_DESCRIPTOR = 19;

const int DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING = 20;

const int DEVPROP_TYPE_DEVPROPKEY = 21;

const int DEVPROP_TYPE_DEVPROPTYPE = 22;

const int DEVPROP_TYPE_BINARY = 4099;

const int DEVPROP_TYPE_ERROR = 23;

const int DEVPROP_TYPE_NTSTATUS = 24;

const int DEVPROP_TYPE_STRING_INDIRECT = 25;

const int MAX_DEVPROP_TYPE = 25;

const int MAX_DEVPROP_TYPEMOD = 8192;

const int DEVPROP_MASK_TYPE = 4095;

const int DEVPROP_MASK_TYPEMOD = 61440;

const int DEVPROP_TRUE = -1;

const int DEVPROP_FALSE = 0;

const int DEVPROPID_FIRST_USABLE = 2;

const int DevProp_PciRootBus_SecondaryInterface_PciConventional = 0;

const int DevProp_PciRootBus_SecondaryInterface_PciXMode1 = 1;

const int DevProp_PciRootBus_SecondaryInterface_PciXMode2 = 2;

const int DevProp_PciRootBus_SecondaryInterface_PciExpress = 3;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_33Mhz = 0;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_Conventional_66Mhz = 1;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_66Mhz = 2;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_100Mhz = 3;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_133Mhz = 4;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_66Mhz = 5;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_100Mhz = 6;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_Mode1_ECC_133Mhz = 7;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_66Mhz = 8;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_100Mhz = 9;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_266_Mode2_133Mhz = 10;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_66Mhz = 11;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_100Mhz = 12;

const int DevProp_PciRootBus_CurrentSpeedAndMode_Pci_X_533_Mode2_133Mhz = 13;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_33Mhz = 1;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_Conventional_66Mhz = 2;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_66Mhz = 4;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_133Mhz = 8;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_266Mhz = 16;

const int DevProp_PciRootBus_SupportedSpeedsAndModes_Pci_X_533Mhz = 32;

const int DevProp_PciRootBus_BusWidth_32Bits = 0;

const int DevProp_PciRootBus_BusWidth_64Bits = 1;

const int DevProp_PciDevice_DeviceType_PciConventional = 0;

const int DevProp_PciDevice_DeviceType_PciX = 1;

const int DevProp_PciDevice_DeviceType_PciExpressEndpoint = 2;

const int DevProp_PciDevice_DeviceType_PciExpressLegacyEndpoint = 3;

const int DevProp_PciDevice_DeviceType_PciExpressRootComplexIntegratedEndpoint =
    4;

const int DevProp_PciDevice_DeviceType_PciExpressTreatedAsPci = 5;

const int DevProp_PciDevice_BridgeType_PciConventional = 6;

const int DevProp_PciDevice_BridgeType_PciX = 7;

const int DevProp_PciDevice_BridgeType_PciExpressRootPort = 8;

const int DevProp_PciDevice_BridgeType_PciExpressUpstreamSwitchPort = 9;

const int DevProp_PciDevice_BridgeType_PciExpressDownstreamSwitchPort = 10;

const int DevProp_PciDevice_BridgeType_PciExpressToPciXBridge = 11;

const int DevProp_PciDevice_BridgeType_PciXToExpressBridge = 12;

const int DevProp_PciDevice_BridgeType_PciExpressTreatedAsPci = 13;

const int DevProp_PciDevice_BridgeType_PciExpressEventCollector = 14;

const int DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_33MHz = 0;

const int DevProp_PciDevice_CurrentSpeedAndMode_Pci_Conventional_66MHz = 1;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode_Conventional_Pci = 0;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_66Mhz = 1;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_100Mhz = 2;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_133MHZ = 3;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_66Mhz = 5;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_100Mhz = 6;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode1_ECC_133Mhz = 7;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_66MHz = 9;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_100MHz = 10;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_266_133MHz = 11;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_66MHz = 13;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_100MHz = 14;

const int DevProp_PciDevice_CurrentSpeedAndMode_PciX_Mode2_533_133MHz = 15;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_128Bytes = 0;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_256Bytes = 1;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_512Bytes = 2;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_1024Bytes = 3;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_2048Bytes = 4;

const int DevProp_PciExpressDevice_PayloadOrRequestSize_4096Bytes = 5;

const int DevProp_PciExpressDevice_LinkSpeed_TwoAndHalf_Gbps = 1;

const int DevProp_PciExpressDevice_LinkSpeed_Five_Gbps = 2;

const int DevProp_PciExpressDevice_LinkWidth_By_1 = 1;

const int DevProp_PciExpressDevice_LinkWidth_By_2 = 2;

const int DevProp_PciExpressDevice_LinkWidth_By_4 = 4;

const int DevProp_PciExpressDevice_LinkWidth_By_8 = 8;

const int DevProp_PciExpressDevice_LinkWidth_By_12 = 12;

const int DevProp_PciExpressDevice_LinkWidth_By_16 = 16;

const int DevProp_PciExpressDevice_LinkWidth_By_32 = 32;

const int DevProp_PciExpressDevice_Spec_Version_10 = 1;

const int DevProp_PciExpressDevice_Spec_Version_11 = 2;

const int DevProp_PciDevice_InterruptType_LineBased = 1;

const int DevProp_PciDevice_InterruptType_Msi = 2;

const int DevProp_PciDevice_InterruptType_MsiX = 4;

const int DevProp_PciDevice_SriovSupport_Ok = 0;

const int DevProp_PciDevice_SriovSupport_MissingAcs = 1;

const int DevProp_PciDevice_SriovSupport_MissingPfDriver = 2;

const int DevProp_PciDevice_SriovSupport_NoBusResource = 3;

const int DevProp_PciDevice_SriovSupport_DidntGetVfBarSpace = 4;

const int DevProp_PciDevice_AcsSupport_Present = 0;

const int DevProp_PciDevice_AcsSupport_NotNeeded = 1;

const int DevProp_PciDevice_AcsSupport_Missing = 2;

const int DevProp_PciDevice_AcsCompatibleUpHierarchy_NotSupported = 0;

const int DevProp_PciDevice_AcsCompatibleUpHierarchy_SingleFunctionSupported =
    1;

const int DevProp_PciDevice_AcsCompatibleUpHierarchy_NoP2PSupported = 2;

const int DevProp_PciDevice_AcsCompatibleUpHierarchy_Supported = 3;

const int DevProp_PciDevice_AcsCompatibleUpHierarchy_Enhanced = 4;

const int NDIS_SUPPORT_NDIS687 = 0;

const int NDIS_SUPPORT_NDIS686 = 0;

const int NDIS_SUPPORT_NDIS685 = 0;

const int NDIS_SUPPORT_NDIS684 = 0;

const int NDIS_SUPPORT_NDIS683 = 0;

const int NDIS_SUPPORT_NDIS682 = 0;

const int NDIS_SUPPORT_NDIS681 = 0;

const int NDIS_SUPPORT_NDIS680 = 0;

const int NDIS_SUPPORT_NDIS670 = 0;

const int NDIS_SUPPORT_NDIS660 = 0;

const int NDIS_SUPPORT_NDIS651 = 0;

const int NDIS_SUPPORT_NDIS650 = 0;

const int NDIS_SUPPORT_NDIS640 = 0;

const int NDIS_SUPPORT_NDIS630 = 0;

const int NDIS_SUPPORT_NDIS620 = 0;

const int NDIS_SUPPORT_NDIS61 = 0;

const int NDIS_SUPPORT_NDIS6 = 0;

const String DD_NDIS_DEVICE_NAME = '\\';

const int IOCTL_NDIS_QUERY_GLOBAL_STATS = 1507330;

const int IOCTL_NDIS_QUERY_ALL_STATS = 1507334;

const int IOCTL_NDIS_DO_PNP_OPERATION = 1507336;

const int IOCTL_NDIS_QUERY_SELECTED_STATS = 1507342;

const int IOCTL_NDIS_ENUMERATE_INTERFACES = 1507344;

const int IOCTL_NDIS_ADD_TDI_DEVICE = 1507348;

const int IOCTL_NDIS_GET_LOG_DATA = 1507358;

const int IOCTL_NDIS_GET_VERSION = 1507360;

const int IOCTL_NDIS_RESERVED1 = 1507364;

const int IOCTL_NDIS_RESERVED2 = 1507368;

const int IOCTL_NDIS_RESERVED3 = 1507372;

const int IOCTL_NDIS_RESERVED4 = 1507376;

const int IOCTL_NDIS_RESERVED5 = 1507380;

const int IOCTL_NDIS_RESERVED6 = 1540152;

const int IOCTL_NDIS_RESERVED7 = 1507390;

const int IOCTL_NDIS_RESERVED8 = 1507392;

const int IOCTL_NDIS_RESERVED9 = 1507396;

const int IOCTL_NDIS_RESERVED10 = 1507400;

const int IOCTL_NDIS_RESERVED11 = 1507404;

const int IOCTL_NDIS_RESERVED12 = 1507408;

const int IOCTL_NDIS_RESERVED13 = 1507412;

const int IOCTL_NDIS_RESERVED14 = 1507416;

const int IOCTL_NDIS_RESERVED15 = 1507420;

const int IOCTL_NDIS_RESERVED16 = 1507424;

const int IOCTL_NDIS_RESERVED17 = 1507428;

const int IOCTL_NDIS_RESERVED18 = 1507432;

const int IOCTL_NDIS_RESERVED19 = 1507436;

const int IOCTL_NDIS_RESERVED20 = 1507440;

const int IOCTL_NDIS_RESERVED21 = 1507444;

const int IOCTL_NDIS_RESERVED22 = 1507448;

const int IOCTL_NDIS_RESERVED23 = 1507452;

const int IOCTL_NDIS_RESERVED24 = 1507456;

const int IOCTL_NDIS_RESERVED25 = 1507460;

const int IOCTL_NDIS_RESERVED26 = 1507464;

const int IOCTL_NDIS_RESERVED27 = 1507468;

const int IOCTL_NDIS_RESERVED28 = 1507472;

const int IOCTL_NDIS_RESERVED29 = 1507476;

const int IOCTL_NDIS_RESERVED30 = 1507480;

const int NDIS_OBJECT_TYPE_OID_REQUEST = 150;

const int NDIS_OBJECT_TYPE_DEFAULT = 128;

const int NDIS_OBJECT_TYPE_MINIPORT_INIT_PARAMETERS = 129;

const int NDIS_OBJECT_TYPE_SG_DMA_DESCRIPTION = 131;

const int NDIS_OBJECT_TYPE_MINIPORT_INTERRUPT = 132;

const int NDIS_OBJECT_TYPE_DEVICE_OBJECT_ATTRIBUTES = 133;

const int NDIS_OBJECT_TYPE_BIND_PARAMETERS = 134;

const int NDIS_OBJECT_TYPE_OPEN_PARAMETERS = 135;

const int NDIS_OBJECT_TYPE_RSS_CAPABILITIES = 136;

const int NDIS_OBJECT_TYPE_RSS_PARAMETERS = 137;

const int NDIS_OBJECT_TYPE_MINIPORT_DRIVER_CHARACTERISTICS = 138;

const int NDIS_OBJECT_TYPE_FILTER_DRIVER_CHARACTERISTICS = 139;

const int NDIS_OBJECT_TYPE_FILTER_PARTIAL_CHARACTERISTICS = 140;

const int NDIS_OBJECT_TYPE_FILTER_ATTRIBUTES = 141;

const int NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS = 142;

const int NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_GENERIC_CHARACTERISTICS =
    143;

const int NDIS_OBJECT_TYPE_CO_PROTOCOL_CHARACTERISTICS = 144;

const int NDIS_OBJECT_TYPE_CO_MINIPORT_CHARACTERISTICS = 145;

const int NDIS_OBJECT_TYPE_MINIPORT_PNP_CHARACTERISTICS = 146;

const int NDIS_OBJECT_TYPE_CLIENT_CHIMNEY_OFFLOAD_CHARACTERISTICS = 147;

const int NDIS_OBJECT_TYPE_PROVIDER_CHIMNEY_OFFLOAD_CHARACTERISTICS = 148;

const int NDIS_OBJECT_TYPE_PROTOCOL_DRIVER_CHARACTERISTICS = 149;

const int NDIS_OBJECT_TYPE_REQUEST_EX = 150;

const int NDIS_OBJECT_TYPE_TIMER_CHARACTERISTICS = 151;

const int NDIS_OBJECT_TYPE_STATUS_INDICATION = 152;

const int NDIS_OBJECT_TYPE_FILTER_ATTACH_PARAMETERS = 153;

const int NDIS_OBJECT_TYPE_FILTER_PAUSE_PARAMETERS = 154;

const int NDIS_OBJECT_TYPE_FILTER_RESTART_PARAMETERS = 155;

const int NDIS_OBJECT_TYPE_PORT_CHARACTERISTICS = 156;

const int NDIS_OBJECT_TYPE_PORT_STATE = 157;

const int NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_REGISTRATION_ATTRIBUTES = 158;

const int NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_GENERAL_ATTRIBUTES = 159;

const int NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_OFFLOAD_ATTRIBUTES = 160;

const int NDIS_OBJECT_TYPE_MINIPORT_ADAPTER_NATIVE_802_11_ATTRIBUTES = 161;

const int NDIS_OBJECT_TYPE_RESTART_GENERAL_ATTRIBUTES = 162;

const int NDIS_OBJECT_TYPE_PROTOCOL_RESTART_PARAMETERS = 163;

const int NDIS_OBJECT_TYPE_MINIPORT_ADD_DEVICE_REGISTRATION_ATTRIBUTES = 164;

const int NDIS_OBJECT_TYPE_CO_CALL_MANAGER_OPTIONAL_HANDLERS = 165;

const int NDIS_OBJECT_TYPE_CO_CLIENT_OPTIONAL_HANDLERS = 166;

const int NDIS_OBJECT_TYPE_OFFLOAD = 167;

const int NDIS_OBJECT_TYPE_OFFLOAD_ENCAPSULATION = 168;

const int NDIS_OBJECT_TYPE_CONFIGURATION_OBJECT = 169;

const int NDIS_OBJECT_TYPE_DRIVER_WRAPPER_OBJECT = 170;

const int NDIS_OBJECT_TYPE_NSI_NETWORK_RW_STRUCT = 172;

const int NDIS_OBJECT_TYPE_NSI_COMPARTMENT_RW_STRUCT = 173;

const int NDIS_OBJECT_TYPE_NSI_INTERFACE_PERSIST_RW_STRUCT = 174;

const int NDIS_OBJECT_TYPE_RSS_PARAMETERS_V2 = 200;

const int NDIS_OBJECT_TYPE_RSS_SET_INDIRECTION_ENTRIES = 201;

const int NDIS_OBJECT_REVISION_1 = 1;

const int NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_RCV = 1;

const int NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_RCV = 2;

const int NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_RCV = 4;

const int NDIS_STATISTICS_FLAGS_VALID_BYTES_RCV = 8;

const int NDIS_STATISTICS_FLAGS_VALID_RCV_DISCARDS = 16;

const int NDIS_STATISTICS_FLAGS_VALID_RCV_ERROR = 32;

const int NDIS_STATISTICS_FLAGS_VALID_DIRECTED_FRAMES_XMIT = 64;

const int NDIS_STATISTICS_FLAGS_VALID_MULTICAST_FRAMES_XMIT = 128;

const int NDIS_STATISTICS_FLAGS_VALID_BROADCAST_FRAMES_XMIT = 256;

const int NDIS_STATISTICS_FLAGS_VALID_BYTES_XMIT = 512;

const int NDIS_STATISTICS_FLAGS_VALID_XMIT_ERROR = 1024;

const int NDIS_STATISTICS_FLAGS_VALID_XMIT_DISCARDS = 32768;

const int NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_RCV = 65536;

const int NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_RCV = 131072;

const int NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_RCV = 262144;

const int NDIS_STATISTICS_FLAGS_VALID_DIRECTED_BYTES_XMIT = 524288;

const int NDIS_STATISTICS_FLAGS_VALID_MULTICAST_BYTES_XMIT = 1048576;

const int NDIS_STATISTICS_FLAGS_VALID_BROADCAST_BYTES_XMIT = 2097152;

const int NDIS_STATISTICS_INFO_REVISION_1 = 1;

const int NDIS_SIZEOF_STATISTICS_INFO_REVISION_1 = 152;

const int NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_RESET = 1;

const int NDIS_INTERRUPT_MODERATION_CHANGE_NEEDS_REINITIALIZE = 2;

const int NDIS_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_INTERRUPT_MODERATION_PARAMETERS_REVISION_1 = 12;

const int NDIS_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = 1;

const int NDIS_SIZEOF_TIMEOUT_DPC_REQUEST_CAPABILITIES_REVISION_1 = 16;

const int NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = 1;

const int NDIS_OBJECT_TYPE_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = 2;

const int NDIS_SIZEOF_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_1 = 40;

const int NDIS_SIZEOF_PCI_DEVICE_CUSTOM_PROPERTIES_REVISION_2 = 52;

const int OID_GEN_SUPPORTED_LIST = 65793;

const int OID_GEN_HARDWARE_STATUS = 65794;

const int OID_GEN_MEDIA_SUPPORTED = 65795;

const int OID_GEN_MEDIA_IN_USE = 65796;

const int OID_GEN_MAXIMUM_LOOKAHEAD = 65797;

const int OID_GEN_MAXIMUM_FRAME_SIZE = 65798;

const int OID_GEN_LINK_SPEED = 65799;

const int OID_GEN_TRANSMIT_BUFFER_SPACE = 65800;

const int OID_GEN_RECEIVE_BUFFER_SPACE = 65801;

const int OID_GEN_TRANSMIT_BLOCK_SIZE = 65802;

const int OID_GEN_RECEIVE_BLOCK_SIZE = 65803;

const int OID_GEN_VENDOR_ID = 65804;

const int OID_GEN_VENDOR_DESCRIPTION = 65805;

const int OID_GEN_CURRENT_PACKET_FILTER = 65806;

const int OID_GEN_CURRENT_LOOKAHEAD = 65807;

const int OID_GEN_DRIVER_VERSION = 65808;

const int OID_GEN_MAXIMUM_TOTAL_SIZE = 65809;

const int OID_GEN_PROTOCOL_OPTIONS = 65810;

const int OID_GEN_MAC_OPTIONS = 65811;

const int OID_GEN_MEDIA_CONNECT_STATUS = 65812;

const int OID_GEN_MAXIMUM_SEND_PACKETS = 65813;

const int OID_GEN_VENDOR_DRIVER_VERSION = 65814;

const int OID_GEN_SUPPORTED_GUIDS = 65815;

const int OID_GEN_NETWORK_LAYER_ADDRESSES = 65816;

const int OID_GEN_TRANSPORT_HEADER_OFFSET = 65817;

const int OID_GEN_MEDIA_CAPABILITIES = 66049;

const int OID_GEN_PHYSICAL_MEDIUM = 66050;

const int OID_GEN_RECEIVE_SCALE_CAPABILITIES = 66051;

const int OID_GEN_RECEIVE_SCALE_PARAMETERS = 66052;

const int OID_GEN_MAC_ADDRESS = 66053;

const int OID_GEN_MAX_LINK_SPEED = 66054;

const int OID_GEN_LINK_STATE = 66055;

const int OID_GEN_LINK_PARAMETERS = 66056;

const int OID_GEN_INTERRUPT_MODERATION = 66057;

const int OID_GEN_NDIS_RESERVED_3 = 66058;

const int OID_GEN_NDIS_RESERVED_4 = 66059;

const int OID_GEN_NDIS_RESERVED_5 = 66060;

const int OID_GEN_ENUMERATE_PORTS = 66061;

const int OID_GEN_PORT_STATE = 66062;

const int OID_GEN_PORT_AUTHENTICATION_PARAMETERS = 66063;

const int OID_GEN_TIMEOUT_DPC_REQUEST_CAPABILITIES = 66064;

const int OID_GEN_PCI_DEVICE_CUSTOM_PROPERTIES = 66065;

const int OID_GEN_NDIS_RESERVED_6 = 66066;

const int OID_GEN_PHYSICAL_MEDIUM_EX = 66067;

const int OID_GEN_RECEIVE_SCALE_PARAMETERS_V2 = 66068;

const int OID_GEN_MACHINE_NAME = 66074;

const int OID_GEN_RNDIS_CONFIG_PARAMETER = 66075;

const int OID_GEN_VLAN_ID = 66076;

const int OID_GEN_RECEIVE_HASH = 66079;

const int OID_GEN_MINIPORT_RESTART_ATTRIBUTES = 66077;

const int OID_GEN_PROMISCUOUS_MODE = 66176;

const int OID_GEN_LAST_CHANGE = 66177;

const int OID_GEN_DISCONTINUITY_TIME = 66178;

const int OID_GEN_OPERATIONAL_STATUS = 66179;

const int OID_GEN_XMIT_LINK_SPEED = 66180;

const int OID_GEN_RCV_LINK_SPEED = 66181;

const int OID_GEN_UNKNOWN_PROTOS = 66182;

const int OID_GEN_INTERFACE_INFO = 66183;

const int OID_GEN_ADMIN_STATUS = 66184;

const int OID_GEN_ALIAS = 66185;

const int OID_GEN_MEDIA_CONNECT_STATUS_EX = 66186;

const int OID_GEN_LINK_SPEED_EX = 66187;

const int OID_GEN_MEDIA_DUPLEX_STATE = 66188;

const int OID_GEN_IP_OPER_STATUS = 66189;

const int OID_WWAN_DRIVER_CAPS = 234946816;

const int OID_WWAN_DEVICE_CAPS = 234946817;

const int OID_WWAN_READY_INFO = 234946818;

const int OID_WWAN_RADIO_STATE = 234946819;

const int OID_WWAN_PIN = 234946820;

const int OID_WWAN_PIN_LIST = 234946821;

const int OID_WWAN_HOME_PROVIDER = 234946822;

const int OID_WWAN_PREFERRED_PROVIDERS = 234946823;

const int OID_WWAN_VISIBLE_PROVIDERS = 234946824;

const int OID_WWAN_REGISTER_STATE = 234946825;

const int OID_WWAN_PACKET_SERVICE = 234946826;

const int OID_WWAN_SIGNAL_STATE = 234946827;

const int OID_WWAN_CONNECT = 234946828;

const int OID_WWAN_PROVISIONED_CONTEXTS = 234946829;

const int OID_WWAN_SERVICE_ACTIVATION = 234946830;

const int OID_WWAN_SMS_CONFIGURATION = 234946831;

const int OID_WWAN_SMS_READ = 234946832;

const int OID_WWAN_SMS_SEND = 234946833;

const int OID_WWAN_SMS_DELETE = 234946834;

const int OID_WWAN_SMS_STATUS = 234946835;

const int OID_WWAN_VENDOR_SPECIFIC = 234946836;

const int OID_WWAN_AUTH_CHALLENGE = 234946837;

const int OID_WWAN_ENUMERATE_DEVICE_SERVICES = 234946838;

const int OID_WWAN_SUBSCRIBE_DEVICE_SERVICE_EVENTS = 234946839;

const int OID_WWAN_DEVICE_SERVICE_COMMAND = 234946840;

const int OID_WWAN_USSD = 234946841;

const int OID_WWAN_PIN_EX = 234946849;

const int OID_WWAN_ENUMERATE_DEVICE_SERVICE_COMMANDS = 234946850;

const int OID_WWAN_DEVICE_SERVICE_SESSION = 234946851;

const int OID_WWAN_DEVICE_SERVICE_SESSION_WRITE = 234946852;

const int OID_WWAN_PREFERRED_MULTICARRIER_PROVIDERS = 234946853;

const int OID_WWAN_CREATE_MAC = 234946854;

const int OID_WWAN_DELETE_MAC = 234946855;

const int OID_WWAN_UICC_FILE_STATUS = 234946856;

const int OID_WWAN_UICC_ACCESS_BINARY = 234946857;

const int OID_WWAN_UICC_ACCESS_RECORD = 234946858;

const int OID_WWAN_PIN_EX2 = 234946859;

const int OID_WWAN_MBIM_VERSION = 234946860;

const int OID_WWAN_SYS_CAPS = 234946861;

const int OID_WWAN_DEVICE_CAPS_EX = 234946862;

const int OID_WWAN_SYS_SLOTMAPPINGS = 234946863;

const int OID_WWAN_SLOT_INFO_STATUS = 234946864;

const int OID_WWAN_DEVICE_BINDINGS = 234946865;

const int OID_WWAN_REGISTER_STATE_EX = 234946866;

const int OID_WWAN_IMS_VOICE_STATE = 234946867;

const int OID_WWAN_SIGNAL_STATE_EX = 234946868;

const int OID_WWAN_LOCATION_STATE = 234946869;

const int OID_WWAN_NITZ = 234946870;

const int OID_WWAN_NETWORK_IDLE_HINT = 234946871;

const int OID_WWAN_PRESHUTDOWN = 234946872;

const int OID_WWAN_UICC_ATR = 234946873;

const int OID_WWAN_UICC_OPEN_CHANNEL = 234946874;

const int OID_WWAN_UICC_CLOSE_CHANNEL = 234946875;

const int OID_WWAN_UICC_APDU = 234946876;

const int OID_WWAN_UICC_TERMINAL_CAPABILITY = 234946877;

const int OID_WWAN_PS_MEDIA_CONFIG = 234946878;

const int OID_WWAN_SAR_CONFIG = 234946879;

const int OID_WWAN_SAR_TRANSMISSION_STATUS = 234946880;

const int OID_WWAN_NETWORK_BLACKLIST = 234946881;

const int OID_WWAN_LTE_ATTACH_CONFIG = 234946882;

const int OID_WWAN_LTE_ATTACH_STATUS = 234946883;

const int OID_WWAN_MODEM_CONFIG_INFO = 234946884;

const int OID_WWAN_PCO = 234946885;

const int OID_WWAN_UICC_RESET = 234946886;

const int OID_WWAN_DEVICE_RESET = 234946887;

const int OID_WWAN_BASE_STATIONS_INFO = 234946888;

const int OID_WWAN_MPDP = 234946889;

const int OID_WWAN_UICC_APP_LIST = 234946890;

const int OID_WWAN_MODEM_LOGGING_CONFIG = 234946891;

const int OID_WWAN_REGISTER_PARAMS = 234946892;

const int OID_WWAN_NETWORK_PARAMS = 234946893;

const int OID_WWAN_UE_POLICY = 234946894;

const int OID_GEN_XMIT_OK = 131329;

const int OID_GEN_RCV_OK = 131330;

const int OID_GEN_XMIT_ERROR = 131331;

const int OID_GEN_RCV_ERROR = 131332;

const int OID_GEN_RCV_NO_BUFFER = 131333;

const int OID_GEN_STATISTICS = 131334;

const int OID_GEN_DIRECTED_BYTES_XMIT = 131585;

const int OID_GEN_DIRECTED_FRAMES_XMIT = 131586;

const int OID_GEN_MULTICAST_BYTES_XMIT = 131587;

const int OID_GEN_MULTICAST_FRAMES_XMIT = 131588;

const int OID_GEN_BROADCAST_BYTES_XMIT = 131589;

const int OID_GEN_BROADCAST_FRAMES_XMIT = 131590;

const int OID_GEN_DIRECTED_BYTES_RCV = 131591;

const int OID_GEN_DIRECTED_FRAMES_RCV = 131592;

const int OID_GEN_MULTICAST_BYTES_RCV = 131593;

const int OID_GEN_MULTICAST_FRAMES_RCV = 131594;

const int OID_GEN_BROADCAST_BYTES_RCV = 131595;

const int OID_GEN_BROADCAST_FRAMES_RCV = 131596;

const int OID_GEN_RCV_CRC_ERROR = 131597;

const int OID_GEN_TRANSMIT_QUEUE_LENGTH = 131598;

const int OID_GEN_GET_TIME_CAPS = 131599;

const int OID_GEN_GET_NETCARD_TIME = 131600;

const int OID_GEN_NETCARD_LOAD = 131601;

const int OID_GEN_DEVICE_PROFILE = 131602;

const int OID_GEN_INIT_TIME_MS = 131603;

const int OID_GEN_RESET_COUNTS = 131604;

const int OID_GEN_MEDIA_SENSE_COUNTS = 131605;

const int OID_GEN_FRIENDLY_NAME = 131606;

const int OID_GEN_NDIS_RESERVED_1 = 131607;

const int OID_GEN_NDIS_RESERVED_2 = 131608;

const int OID_GEN_BYTES_RCV = 131609;

const int OID_GEN_BYTES_XMIT = 131610;

const int OID_GEN_RCV_DISCARDS = 131611;

const int OID_GEN_XMIT_DISCARDS = 131612;

const int OID_TCP_RSC_STATISTICS = 131613;

const int OID_GEN_NDIS_RESERVED_7 = 131614;

const int OID_GEN_CO_SUPPORTED_LIST = 65793;

const int OID_GEN_CO_HARDWARE_STATUS = 65794;

const int OID_GEN_CO_MEDIA_SUPPORTED = 65795;

const int OID_GEN_CO_MEDIA_IN_USE = 65796;

const int OID_GEN_CO_LINK_SPEED = 65799;

const int OID_GEN_CO_VENDOR_ID = 65804;

const int OID_GEN_CO_VENDOR_DESCRIPTION = 65805;

const int OID_GEN_CO_DRIVER_VERSION = 65808;

const int OID_GEN_CO_PROTOCOL_OPTIONS = 65810;

const int OID_GEN_CO_MAC_OPTIONS = 65811;

const int OID_GEN_CO_MEDIA_CONNECT_STATUS = 65812;

const int OID_GEN_CO_VENDOR_DRIVER_VERSION = 65814;

const int OID_GEN_CO_SUPPORTED_GUIDS = 65815;

const int OID_GEN_CO_GET_TIME_CAPS = 131599;

const int OID_GEN_CO_GET_NETCARD_TIME = 131600;

const int OID_GEN_CO_MINIMUM_LINK_SPEED = 131360;

const int OID_GEN_CO_XMIT_PDUS_OK = 131329;

const int OID_GEN_CO_RCV_PDUS_OK = 131330;

const int OID_GEN_CO_XMIT_PDUS_ERROR = 131331;

const int OID_GEN_CO_RCV_PDUS_ERROR = 131332;

const int OID_GEN_CO_RCV_PDUS_NO_BUFFER = 131333;

const int OID_GEN_CO_RCV_CRC_ERROR = 131597;

const int OID_GEN_CO_TRANSMIT_QUEUE_LENGTH = 131598;

const int OID_GEN_CO_BYTES_XMIT = 131585;

const int OID_GEN_CO_BYTES_RCV = 131591;

const int OID_GEN_CO_NETCARD_LOAD = 131601;

const int OID_GEN_CO_DEVICE_PROFILE = 131602;

const int OID_GEN_CO_BYTES_XMIT_OUTSTANDING = 131617;

const int OID_802_3_PERMANENT_ADDRESS = 16843009;

const int OID_802_3_CURRENT_ADDRESS = 16843010;

const int OID_802_3_MULTICAST_LIST = 16843011;

const int OID_802_3_MAXIMUM_LIST_SIZE = 16843012;

const int OID_802_3_MAC_OPTIONS = 16843013;

const int NDIS_802_3_MAC_OPTION_PRIORITY = 1;

const int OID_802_3_RCV_ERROR_ALIGNMENT = 16908545;

const int OID_802_3_XMIT_ONE_COLLISION = 16908546;

const int OID_802_3_XMIT_MORE_COLLISIONS = 16908547;

const int OID_802_3_XMIT_DEFERRED = 16908801;

const int OID_802_3_XMIT_MAX_COLLISIONS = 16908802;

const int OID_802_3_RCV_OVERRUN = 16908803;

const int OID_802_3_XMIT_UNDERRUN = 16908804;

const int OID_802_3_XMIT_HEARTBEAT_FAILURE = 16908805;

const int OID_802_3_XMIT_TIMES_CRS_LOST = 16908806;

const int OID_802_3_XMIT_LATE_COLLISIONS = 16908807;

const int OID_802_3_ADD_MULTICAST_ADDRESS = 16843272;

const int OID_802_3_DELETE_MULTICAST_ADDRESS = 16843273;

const int OID_802_5_PERMANENT_ADDRESS = 33620225;

const int OID_802_5_CURRENT_ADDRESS = 33620226;

const int OID_802_5_CURRENT_FUNCTIONAL = 33620227;

const int OID_802_5_CURRENT_GROUP = 33620228;

const int OID_802_5_LAST_OPEN_STATUS = 33620229;

const int OID_802_5_CURRENT_RING_STATUS = 33620230;

const int OID_802_5_CURRENT_RING_STATE = 33620231;

const int OID_802_5_LINE_ERRORS = 33685761;

const int OID_802_5_LOST_FRAMES = 33685762;

const int OID_802_5_BURST_ERRORS = 33686017;

const int OID_802_5_AC_ERRORS = 33686018;

const int OID_802_5_ABORT_DELIMETERS = 33686019;

const int OID_802_5_FRAME_COPIED_ERRORS = 33686020;

const int OID_802_5_FREQUENCY_ERRORS = 33686021;

const int OID_802_5_TOKEN_ERRORS = 33686022;

const int OID_802_5_INTERNAL_ERRORS = 33686023;

const int OID_FDDI_LONG_PERMANENT_ADDR = 50397441;

const int OID_FDDI_LONG_CURRENT_ADDR = 50397442;

const int OID_FDDI_LONG_MULTICAST_LIST = 50397443;

const int OID_FDDI_LONG_MAX_LIST_SIZE = 50397444;

const int OID_FDDI_SHORT_PERMANENT_ADDR = 50397445;

const int OID_FDDI_SHORT_CURRENT_ADDR = 50397446;

const int OID_FDDI_SHORT_MULTICAST_LIST = 50397447;

const int OID_FDDI_SHORT_MAX_LIST_SIZE = 50397448;

const int OID_FDDI_ATTACHMENT_TYPE = 50462977;

const int OID_FDDI_UPSTREAM_NODE_LONG = 50462978;

const int OID_FDDI_DOWNSTREAM_NODE_LONG = 50462979;

const int OID_FDDI_FRAME_ERRORS = 50462980;

const int OID_FDDI_FRAMES_LOST = 50462981;

const int OID_FDDI_RING_MGT_STATE = 50462982;

const int OID_FDDI_LCT_FAILURES = 50462983;

const int OID_FDDI_LEM_REJECTS = 50462984;

const int OID_FDDI_LCONNECTION_STATE = 50462985;

const int OID_FDDI_SMT_STATION_ID = 50528769;

const int OID_FDDI_SMT_OP_VERSION_ID = 50528770;

const int OID_FDDI_SMT_HI_VERSION_ID = 50528771;

const int OID_FDDI_SMT_LO_VERSION_ID = 50528772;

const int OID_FDDI_SMT_MANUFACTURER_DATA = 50528773;

const int OID_FDDI_SMT_USER_DATA = 50528774;

const int OID_FDDI_SMT_MIB_VERSION_ID = 50528775;

const int OID_FDDI_SMT_MAC_CT = 50528776;

const int OID_FDDI_SMT_NON_MASTER_CT = 50528777;

const int OID_FDDI_SMT_MASTER_CT = 50528778;

const int OID_FDDI_SMT_AVAILABLE_PATHS = 50528779;

const int OID_FDDI_SMT_CONFIG_CAPABILITIES = 50528780;

const int OID_FDDI_SMT_CONFIG_POLICY = 50528781;

const int OID_FDDI_SMT_CONNECTION_POLICY = 50528782;

const int OID_FDDI_SMT_T_NOTIFY = 50528783;

const int OID_FDDI_SMT_STAT_RPT_POLICY = 50528784;

const int OID_FDDI_SMT_TRACE_MAX_EXPIRATION = 50528785;

const int OID_FDDI_SMT_PORT_INDEXES = 50528786;

const int OID_FDDI_SMT_MAC_INDEXES = 50528787;

const int OID_FDDI_SMT_BYPASS_PRESENT = 50528788;

const int OID_FDDI_SMT_ECM_STATE = 50528789;

const int OID_FDDI_SMT_CF_STATE = 50528790;

const int OID_FDDI_SMT_HOLD_STATE = 50528791;

const int OID_FDDI_SMT_REMOTE_DISCONNECT_FLAG = 50528792;

const int OID_FDDI_SMT_STATION_STATUS = 50528793;

const int OID_FDDI_SMT_PEER_WRAP_FLAG = 50528794;

const int OID_FDDI_SMT_MSG_TIME_STAMP = 50528795;

const int OID_FDDI_SMT_TRANSITION_TIME_STAMP = 50528796;

const int OID_FDDI_SMT_SET_COUNT = 50528797;

const int OID_FDDI_SMT_LAST_SET_STATION_ID = 50528798;

const int OID_FDDI_MAC_FRAME_STATUS_FUNCTIONS = 50528799;

const int OID_FDDI_MAC_BRIDGE_FUNCTIONS = 50528800;

const int OID_FDDI_MAC_T_MAX_CAPABILITY = 50528801;

const int OID_FDDI_MAC_TVX_CAPABILITY = 50528802;

const int OID_FDDI_MAC_AVAILABLE_PATHS = 50528803;

const int OID_FDDI_MAC_CURRENT_PATH = 50528804;

const int OID_FDDI_MAC_UPSTREAM_NBR = 50528805;

const int OID_FDDI_MAC_DOWNSTREAM_NBR = 50528806;

const int OID_FDDI_MAC_OLD_UPSTREAM_NBR = 50528807;

const int OID_FDDI_MAC_OLD_DOWNSTREAM_NBR = 50528808;

const int OID_FDDI_MAC_DUP_ADDRESS_TEST = 50528809;

const int OID_FDDI_MAC_REQUESTED_PATHS = 50528810;

const int OID_FDDI_MAC_DOWNSTREAM_PORT_TYPE = 50528811;

const int OID_FDDI_MAC_INDEX = 50528812;

const int OID_FDDI_MAC_SMT_ADDRESS = 50528813;

const int OID_FDDI_MAC_LONG_GRP_ADDRESS = 50528814;

const int OID_FDDI_MAC_SHORT_GRP_ADDRESS = 50528815;

const int OID_FDDI_MAC_T_REQ = 50528816;

const int OID_FDDI_MAC_T_NEG = 50528817;

const int OID_FDDI_MAC_T_MAX = 50528818;

const int OID_FDDI_MAC_TVX_VALUE = 50528819;

const int OID_FDDI_MAC_T_PRI0 = 50528820;

const int OID_FDDI_MAC_T_PRI1 = 50528821;

const int OID_FDDI_MAC_T_PRI2 = 50528822;

const int OID_FDDI_MAC_T_PRI3 = 50528823;

const int OID_FDDI_MAC_T_PRI4 = 50528824;

const int OID_FDDI_MAC_T_PRI5 = 50528825;

const int OID_FDDI_MAC_T_PRI6 = 50528826;

const int OID_FDDI_MAC_FRAME_CT = 50528827;

const int OID_FDDI_MAC_COPIED_CT = 50528828;

const int OID_FDDI_MAC_TRANSMIT_CT = 50528829;

const int OID_FDDI_MAC_TOKEN_CT = 50528830;

const int OID_FDDI_MAC_ERROR_CT = 50528831;

const int OID_FDDI_MAC_LOST_CT = 50528832;

const int OID_FDDI_MAC_TVX_EXPIRED_CT = 50528833;

const int OID_FDDI_MAC_NOT_COPIED_CT = 50528834;

const int OID_FDDI_MAC_LATE_CT = 50528835;

const int OID_FDDI_MAC_RING_OP_CT = 50528836;

const int OID_FDDI_MAC_FRAME_ERROR_THRESHOLD = 50528837;

const int OID_FDDI_MAC_FRAME_ERROR_RATIO = 50528838;

const int OID_FDDI_MAC_NOT_COPIED_THRESHOLD = 50528839;

const int OID_FDDI_MAC_NOT_COPIED_RATIO = 50528840;

const int OID_FDDI_MAC_RMT_STATE = 50528841;

const int OID_FDDI_MAC_DA_FLAG = 50528842;

const int OID_FDDI_MAC_UNDA_FLAG = 50528843;

const int OID_FDDI_MAC_FRAME_ERROR_FLAG = 50528844;

const int OID_FDDI_MAC_NOT_COPIED_FLAG = 50528845;

const int OID_FDDI_MAC_MA_UNITDATA_AVAILABLE = 50528846;

const int OID_FDDI_MAC_HARDWARE_PRESENT = 50528847;

const int OID_FDDI_MAC_MA_UNITDATA_ENABLE = 50528848;

const int OID_FDDI_PATH_INDEX = 50528849;

const int OID_FDDI_PATH_RING_LATENCY = 50528850;

const int OID_FDDI_PATH_TRACE_STATUS = 50528851;

const int OID_FDDI_PATH_SBA_PAYLOAD = 50528852;

const int OID_FDDI_PATH_SBA_OVERHEAD = 50528853;

const int OID_FDDI_PATH_CONFIGURATION = 50528854;

const int OID_FDDI_PATH_T_R_MODE = 50528855;

const int OID_FDDI_PATH_SBA_AVAILABLE = 50528856;

const int OID_FDDI_PATH_TVX_LOWER_BOUND = 50528857;

const int OID_FDDI_PATH_T_MAX_LOWER_BOUND = 50528858;

const int OID_FDDI_PATH_MAX_T_REQ = 50528859;

const int OID_FDDI_PORT_MY_TYPE = 50528860;

const int OID_FDDI_PORT_NEIGHBOR_TYPE = 50528861;

const int OID_FDDI_PORT_CONNECTION_POLICIES = 50528862;

const int OID_FDDI_PORT_MAC_INDICATED = 50528863;

const int OID_FDDI_PORT_CURRENT_PATH = 50528864;

const int OID_FDDI_PORT_REQUESTED_PATHS = 50528865;

const int OID_FDDI_PORT_MAC_PLACEMENT = 50528866;

const int OID_FDDI_PORT_AVAILABLE_PATHS = 50528867;

const int OID_FDDI_PORT_MAC_LOOP_TIME = 50528868;

const int OID_FDDI_PORT_PMD_CLASS = 50528869;

const int OID_FDDI_PORT_CONNECTION_CAPABILITIES = 50528870;

const int OID_FDDI_PORT_INDEX = 50528871;

const int OID_FDDI_PORT_MAINT_LS = 50528872;

const int OID_FDDI_PORT_BS_FLAG = 50528873;

const int OID_FDDI_PORT_PC_LS = 50528874;

const int OID_FDDI_PORT_EB_ERROR_CT = 50528875;

const int OID_FDDI_PORT_LCT_FAIL_CT = 50528876;

const int OID_FDDI_PORT_LER_ESTIMATE = 50528877;

const int OID_FDDI_PORT_LEM_REJECT_CT = 50528878;

const int OID_FDDI_PORT_LEM_CT = 50528879;

const int OID_FDDI_PORT_LER_CUTOFF = 50528880;

const int OID_FDDI_PORT_LER_ALARM = 50528881;

const int OID_FDDI_PORT_CONNNECT_STATE = 50528882;

const int OID_FDDI_PORT_PCM_STATE = 50528883;

const int OID_FDDI_PORT_PC_WITHHOLD = 50528884;

const int OID_FDDI_PORT_LER_FLAG = 50528885;

const int OID_FDDI_PORT_HARDWARE_PRESENT = 50528886;

const int OID_FDDI_SMT_STATION_ACTION = 50528887;

const int OID_FDDI_PORT_ACTION = 50528888;

const int OID_FDDI_IF_DESCR = 50528889;

const int OID_FDDI_IF_TYPE = 50528890;

const int OID_FDDI_IF_MTU = 50528891;

const int OID_FDDI_IF_SPEED = 50528892;

const int OID_FDDI_IF_PHYS_ADDRESS = 50528893;

const int OID_FDDI_IF_ADMIN_STATUS = 50528894;

const int OID_FDDI_IF_OPER_STATUS = 50528895;

const int OID_FDDI_IF_LAST_CHANGE = 50528896;

const int OID_FDDI_IF_IN_OCTETS = 50528897;

const int OID_FDDI_IF_IN_UCAST_PKTS = 50528898;

const int OID_FDDI_IF_IN_NUCAST_PKTS = 50528899;

const int OID_FDDI_IF_IN_DISCARDS = 50528900;

const int OID_FDDI_IF_IN_ERRORS = 50528901;

const int OID_FDDI_IF_IN_UNKNOWN_PROTOS = 50528902;

const int OID_FDDI_IF_OUT_OCTETS = 50528903;

const int OID_FDDI_IF_OUT_UCAST_PKTS = 50528904;

const int OID_FDDI_IF_OUT_NUCAST_PKTS = 50528905;

const int OID_FDDI_IF_OUT_DISCARDS = 50528906;

const int OID_FDDI_IF_OUT_ERRORS = 50528907;

const int OID_FDDI_IF_OUT_QLEN = 50528908;

const int OID_FDDI_IF_SPECIFIC = 50528909;

const int OID_WAN_PERMANENT_ADDRESS = 67174657;

const int OID_WAN_CURRENT_ADDRESS = 67174658;

const int OID_WAN_QUALITY_OF_SERVICE = 67174659;

const int OID_WAN_PROTOCOL_TYPE = 67174660;

const int OID_WAN_MEDIUM_SUBTYPE = 67174661;

const int OID_WAN_HEADER_FORMAT = 67174662;

const int OID_WAN_GET_INFO = 67174663;

const int OID_WAN_SET_LINK_INFO = 67174664;

const int OID_WAN_GET_LINK_INFO = 67174665;

const int OID_WAN_LINE_COUNT = 67174666;

const int OID_WAN_PROTOCOL_CAPS = 67174667;

const int OID_WAN_GET_BRIDGE_INFO = 67174922;

const int OID_WAN_SET_BRIDGE_INFO = 67174923;

const int OID_WAN_GET_COMP_INFO = 67174924;

const int OID_WAN_SET_COMP_INFO = 67174925;

const int OID_WAN_GET_STATS_INFO = 67174926;

const int OID_WAN_CO_GET_INFO = 67174784;

const int OID_WAN_CO_SET_LINK_INFO = 67174785;

const int OID_WAN_CO_GET_LINK_INFO = 67174786;

const int OID_WAN_CO_GET_COMP_INFO = 67175040;

const int OID_WAN_CO_SET_COMP_INFO = 67175041;

const int OID_WAN_CO_GET_STATS_INFO = 67175042;

const int OID_LTALK_CURRENT_NODE_ID = 83951874;

const int OID_LTALK_IN_BROADCASTS = 84017409;

const int OID_LTALK_IN_LENGTH_ERRORS = 84017410;

const int OID_LTALK_OUT_NO_HANDLERS = 84017665;

const int OID_LTALK_COLLISIONS = 84017666;

const int OID_LTALK_DEFERS = 84017667;

const int OID_LTALK_NO_DATA_ERRORS = 84017668;

const int OID_LTALK_RANDOM_CTS_ERRORS = 84017669;

const int OID_LTALK_FCS_ERRORS = 84017670;

const int OID_ARCNET_PERMANENT_ADDRESS = 100729089;

const int OID_ARCNET_CURRENT_ADDRESS = 100729090;

const int OID_ARCNET_RECONFIGURATIONS = 100794881;

const int OID_TAPI_ACCEPT = 117637377;

const int OID_TAPI_ANSWER = 117637378;

const int OID_TAPI_CLOSE = 117637379;

const int OID_TAPI_CLOSE_CALL = 117637380;

const int OID_TAPI_CONDITIONAL_MEDIA_DETECTION = 117637381;

const int OID_TAPI_CONFIG_DIALOG = 117637382;

const int OID_TAPI_DEV_SPECIFIC = 117637383;

const int OID_TAPI_DIAL = 117637384;

const int OID_TAPI_DROP = 117637385;

const int OID_TAPI_GET_ADDRESS_CAPS = 117637386;

const int OID_TAPI_GET_ADDRESS_ID = 117637387;

const int OID_TAPI_GET_ADDRESS_STATUS = 117637388;

const int OID_TAPI_GET_CALL_ADDRESS_ID = 117637389;

const int OID_TAPI_GET_CALL_INFO = 117637390;

const int OID_TAPI_GET_CALL_STATUS = 117637391;

const int OID_TAPI_GET_DEV_CAPS = 117637392;

const int OID_TAPI_GET_DEV_CONFIG = 117637393;

const int OID_TAPI_GET_EXTENSION_ID = 117637394;

const int OID_TAPI_GET_ID = 117637395;

const int OID_TAPI_GET_LINE_DEV_STATUS = 117637396;

const int OID_TAPI_MAKE_CALL = 117637397;

const int OID_TAPI_NEGOTIATE_EXT_VERSION = 117637398;

const int OID_TAPI_OPEN = 117637399;

const int OID_TAPI_PROVIDER_INITIALIZE = 117637400;

const int OID_TAPI_PROVIDER_SHUTDOWN = 117637401;

const int OID_TAPI_SECURE_CALL = 117637402;

const int OID_TAPI_SELECT_EXT_VERSION = 117637403;

const int OID_TAPI_SEND_USER_USER_INFO = 117637404;

const int OID_TAPI_SET_APP_SPECIFIC = 117637405;

const int OID_TAPI_SET_CALL_PARAMS = 117637406;

const int OID_TAPI_SET_DEFAULT_MEDIA_DETECTION = 117637407;

const int OID_TAPI_SET_DEV_CONFIG = 117637408;

const int OID_TAPI_SET_MEDIA_MODE = 117637409;

const int OID_TAPI_SET_STATUS_MESSAGES = 117637410;

const int OID_TAPI_GATHER_DIGITS = 117637411;

const int OID_TAPI_MONITOR_DIGITS = 117637412;

const int OID_ATM_SUPPORTED_VC_RATES = 134283521;

const int OID_ATM_SUPPORTED_SERVICE_CATEGORY = 134283522;

const int OID_ATM_SUPPORTED_AAL_TYPES = 134283523;

const int OID_ATM_HW_CURRENT_ADDRESS = 134283524;

const int OID_ATM_MAX_ACTIVE_VCS = 134283525;

const int OID_ATM_MAX_ACTIVE_VCI_BITS = 134283526;

const int OID_ATM_MAX_ACTIVE_VPI_BITS = 134283527;

const int OID_ATM_MAX_AAL0_PACKET_SIZE = 134283528;

const int OID_ATM_MAX_AAL1_PACKET_SIZE = 134283529;

const int OID_ATM_MAX_AAL34_PACKET_SIZE = 134283530;

const int OID_ATM_MAX_AAL5_PACKET_SIZE = 134283531;

const int OID_ATM_SIGNALING_VPIVCI = 134283777;

const int OID_ATM_ASSIGNED_VPI = 134283778;

const int OID_ATM_ACQUIRE_ACCESS_NET_RESOURCES = 134283779;

const int OID_ATM_RELEASE_ACCESS_NET_RESOURCES = 134283780;

const int OID_ATM_ILMI_VPIVCI = 134283781;

const int OID_ATM_DIGITAL_BROADCAST_VPIVCI = 134283782;

const int OID_ATM_GET_NEAREST_FLOW = 134283783;

const int OID_ATM_ALIGNMENT_REQUIRED = 134283784;

const int OID_ATM_LECS_ADDRESS = 134283785;

const int OID_ATM_SERVICE_ADDRESS = 134283786;

const int OID_ATM_CALL_PROCEEDING = 134283787;

const int OID_ATM_CALL_ALERTING = 134283788;

const int OID_ATM_PARTY_ALERTING = 134283789;

const int OID_ATM_CALL_NOTIFY = 134283790;

const int OID_ATM_MY_IP_NM_ADDRESS = 134283791;

const int OID_ATM_RCV_CELLS_OK = 134349057;

const int OID_ATM_XMIT_CELLS_OK = 134349058;

const int OID_ATM_RCV_CELLS_DROPPED = 134349059;

const int OID_ATM_RCV_INVALID_VPI_VCI = 134349313;

const int OID_ATM_CELLS_HEC_ERROR = 134349314;

const int OID_ATM_RCV_REASSEMBLY_ERROR = 134349315;

const int OID_802_11_BSSID = 218169601;

const int OID_802_11_SSID = 218169602;

const int OID_802_11_NETWORK_TYPES_SUPPORTED = 218169859;

const int OID_802_11_NETWORK_TYPE_IN_USE = 218169860;

const int OID_802_11_TX_POWER_LEVEL = 218169861;

const int OID_802_11_RSSI = 218169862;

const int OID_802_11_RSSI_TRIGGER = 218169863;

const int OID_802_11_INFRASTRUCTURE_MODE = 218169608;

const int OID_802_11_FRAGMENTATION_THRESHOLD = 218169865;

const int OID_802_11_RTS_THRESHOLD = 218169866;

const int OID_802_11_NUMBER_OF_ANTENNAS = 218169867;

const int OID_802_11_RX_ANTENNA_SELECTED = 218169868;

const int OID_802_11_TX_ANTENNA_SELECTED = 218169869;

const int OID_802_11_SUPPORTED_RATES = 218169870;

const int OID_802_11_DESIRED_RATES = 218169872;

const int OID_802_11_CONFIGURATION = 218169873;

const int OID_802_11_STATISTICS = 218235410;

const int OID_802_11_ADD_WEP = 218169619;

const int OID_802_11_REMOVE_WEP = 218169620;

const int OID_802_11_DISASSOCIATE = 218169621;

const int OID_802_11_POWER_MODE = 218169878;

const int OID_802_11_BSSID_LIST = 218169879;

const int OID_802_11_AUTHENTICATION_MODE = 218169624;

const int OID_802_11_PRIVACY_FILTER = 218169625;

const int OID_802_11_BSSID_LIST_SCAN = 218169626;

const int OID_802_11_WEP_STATUS = 218169627;

const int OID_802_11_ENCRYPTION_STATUS = 218169627;

const int OID_802_11_RELOAD_DEFAULTS = 218169628;

const int OID_802_11_ADD_KEY = 218169629;

const int OID_802_11_REMOVE_KEY = 218169630;

const int OID_802_11_ASSOCIATION_INFORMATION = 218169631;

const int OID_802_11_TEST = 218169632;

const int OID_802_11_MEDIA_STREAM_MODE = 218169633;

const int OID_802_11_CAPABILITY = 218169634;

const int OID_802_11_PMKID = 218169635;

const int OID_802_11_NON_BCAST_SSID_LIST = 218169636;

const int OID_802_11_RADIO_STATUS = 218169637;

const int NDIS_ETH_TYPE_IPV4 = 2048;

const int NDIS_ETH_TYPE_ARP = 2054;

const int NDIS_ETH_TYPE_IPV6 = 34525;

const int NDIS_ETH_TYPE_802_1X = 34958;

const int NDIS_ETH_TYPE_802_1Q = 33024;

const int NDIS_ETH_TYPE_SLOW_PROTOCOL = 34825;

const int NDIS_802_11_LENGTH_SSID = 32;

const int NDIS_802_11_LENGTH_RATES = 8;

const int NDIS_802_11_LENGTH_RATES_EX = 16;

const int NDIS_802_11_AUTH_REQUEST_AUTH_FIELDS = 15;

const int NDIS_802_11_AUTH_REQUEST_REAUTH = 1;

const int NDIS_802_11_AUTH_REQUEST_KEYUPDATE = 2;

const int NDIS_802_11_AUTH_REQUEST_PAIRWISE_ERROR = 6;

const int NDIS_802_11_AUTH_REQUEST_GROUP_ERROR = 14;

const int NDIS_802_11_PMKID_CANDIDATE_PREAUTH_ENABLED = 1;

const int NDIS_802_11_AI_REQFI_CAPABILITIES = 1;

const int NDIS_802_11_AI_REQFI_LISTENINTERVAL = 2;

const int NDIS_802_11_AI_REQFI_CURRENTAPADDRESS = 4;

const int NDIS_802_11_AI_RESFI_CAPABILITIES = 1;

const int NDIS_802_11_AI_RESFI_STATUSCODE = 2;

const int NDIS_802_11_AI_RESFI_ASSOCIATIONID = 4;

const int OID_IRDA_RECEIVING = 167837952;

const int OID_IRDA_TURNAROUND_TIME = 167837953;

const int OID_IRDA_SUPPORTED_SPEEDS = 167837954;

const int OID_IRDA_LINK_SPEED = 167837955;

const int OID_IRDA_MEDIA_BUSY = 167837956;

const int OID_IRDA_EXTRA_RCV_BOFS = 167838208;

const int OID_IRDA_RATE_SNIFF = 167838209;

const int OID_IRDA_UNICAST_LIST = 167838210;

const int OID_IRDA_MAX_UNICAST_LIST_SIZE = 167838211;

const int OID_IRDA_MAX_RECEIVE_WINDOW_SIZE = 167838212;

const int OID_IRDA_MAX_SEND_WINDOW_SIZE = 167838213;

const int OID_IRDA_RESERVED1 = 167838218;

const int OID_IRDA_RESERVED2 = 167838223;

const int OID_1394_LOCAL_NODE_INFO = 201392385;

const int OID_1394_VC_INFO = 201392386;

const int OID_CO_ADD_PVC = 4261412865;

const int OID_CO_DELETE_PVC = 4261412866;

const int OID_CO_GET_CALL_INFORMATION = 4261412867;

const int OID_CO_ADD_ADDRESS = 4261412868;

const int OID_CO_DELETE_ADDRESS = 4261412869;

const int OID_CO_GET_ADDRESSES = 4261412870;

const int OID_CO_ADDRESS_CHANGE = 4261412871;

const int OID_CO_SIGNALING_ENABLED = 4261412872;

const int OID_CO_SIGNALING_DISABLED = 4261412873;

const int OID_CO_AF_CLOSE = 4261412874;

const int OID_CO_TAPI_CM_CAPS = 4261416961;

const int OID_CO_TAPI_LINE_CAPS = 4261416962;

const int OID_CO_TAPI_ADDRESS_CAPS = 4261416963;

const int OID_CO_TAPI_TRANSLATE_TAPI_CALLPARAMS = 4261416964;

const int OID_CO_TAPI_TRANSLATE_NDIS_CALLPARAMS = 4261416965;

const int OID_CO_TAPI_TRANSLATE_TAPI_SAP = 4261416966;

const int OID_CO_TAPI_GET_CALL_DIAGNOSTICS = 4261416967;

const int OID_CO_TAPI_REPORT_DIGITS = 4261416968;

const int OID_CO_TAPI_DONT_REPORT_DIGITS = 4261416969;

const int OID_PNP_CAPABILITIES = 4244701440;

const int OID_PNP_SET_POWER = 4244701441;

const int OID_PNP_QUERY_POWER = 4244701442;

const int OID_PNP_ADD_WAKE_UP_PATTERN = 4244701443;

const int OID_PNP_REMOVE_WAKE_UP_PATTERN = 4244701444;

const int OID_PNP_WAKE_UP_PATTERN_LIST = 4244701445;

const int OID_PNP_ENABLE_WAKE_UP = 4244701446;

const int OID_PNP_WAKE_UP_OK = 4244767232;

const int OID_PNP_WAKE_UP_ERROR = 4244767233;

const int OID_PM_CURRENT_CAPABILITIES = 4244701447;

const int OID_PM_HARDWARE_CAPABILITIES = 4244701448;

const int OID_PM_PARAMETERS = 4244701449;

const int OID_PM_ADD_WOL_PATTERN = 4244701450;

const int OID_PM_REMOVE_WOL_PATTERN = 4244701451;

const int OID_PM_WOL_PATTERN_LIST = 4244701452;

const int OID_PM_ADD_PROTOCOL_OFFLOAD = 4244701453;

const int OID_PM_GET_PROTOCOL_OFFLOAD = 4244701454;

const int OID_PM_REMOVE_PROTOCOL_OFFLOAD = 4244701455;

const int OID_PM_PROTOCOL_OFFLOAD_LIST = 4244701456;

const int OID_PM_RESERVED_1 = 4244701457;

const int OID_RECEIVE_FILTER_HARDWARE_CAPABILITIES = 66081;

const int OID_RECEIVE_FILTER_GLOBAL_PARAMETERS = 66082;

const int OID_RECEIVE_FILTER_ALLOCATE_QUEUE = 66083;

const int OID_RECEIVE_FILTER_FREE_QUEUE = 66084;

const int OID_RECEIVE_FILTER_ENUM_QUEUES = 66085;

const int OID_RECEIVE_FILTER_QUEUE_PARAMETERS = 66086;

const int OID_RECEIVE_FILTER_SET_FILTER = 66087;

const int OID_RECEIVE_FILTER_CLEAR_FILTER = 66088;

const int OID_RECEIVE_FILTER_ENUM_FILTERS = 66089;

const int OID_RECEIVE_FILTER_PARAMETERS = 66090;

const int OID_RECEIVE_FILTER_QUEUE_ALLOCATION_COMPLETE = 66091;

const int OID_RECEIVE_FILTER_CURRENT_CAPABILITIES = 66093;

const int OID_NIC_SWITCH_HARDWARE_CAPABILITIES = 66094;

const int OID_NIC_SWITCH_CURRENT_CAPABILITIES = 66095;

const int OID_VLAN_RESERVED1 = 66097;

const int OID_VLAN_RESERVED2 = 66098;

const int OID_VLAN_RESERVED3 = 66099;

const int OID_VLAN_RESERVED4 = 66100;

const int OID_NIC_SWITCH_CREATE_SWITCH = 66103;

const int OID_NIC_SWITCH_PARAMETERS = 66104;

const int OID_NIC_SWITCH_DELETE_SWITCH = 66105;

const int OID_NIC_SWITCH_ENUM_SWITCHES = 66112;

const int OID_NIC_SWITCH_CREATE_VPORT = 66113;

const int OID_NIC_SWITCH_VPORT_PARAMETERS = 66114;

const int OID_NIC_SWITCH_ENUM_VPORTS = 66115;

const int OID_NIC_SWITCH_DELETE_VPORT = 66116;

const int OID_NIC_SWITCH_ALLOCATE_VF = 66117;

const int OID_NIC_SWITCH_FREE_VF = 66118;

const int OID_NIC_SWITCH_VF_PARAMETERS = 66119;

const int OID_NIC_SWITCH_ENUM_VFS = 66120;

const int OID_SRIOV_HARDWARE_CAPABILITIES = 66121;

const int OID_SRIOV_CURRENT_CAPABILITIES = 66128;

const int OID_SRIOV_READ_VF_CONFIG_SPACE = 66129;

const int OID_SRIOV_WRITE_VF_CONFIG_SPACE = 66130;

const int OID_SRIOV_READ_VF_CONFIG_BLOCK = 66131;

const int OID_SRIOV_WRITE_VF_CONFIG_BLOCK = 66132;

const int OID_SRIOV_RESET_VF = 66133;

const int OID_SRIOV_SET_VF_POWER_STATE = 66134;

const int OID_SRIOV_VF_VENDOR_DEVICE_ID = 66135;

const int OID_SRIOV_PROBED_BARS = 66136;

const int OID_SRIOV_BAR_RESOURCES = 66137;

const int OID_SRIOV_PF_LUID = 66144;

const int OID_SRIOV_CONFIG_STATE = 66145;

const int OID_SRIOV_VF_SERIAL_NUMBER = 66146;

const int OID_SRIOV_VF_INVALIDATE_CONFIG_BLOCK = 66153;

const int OID_SWITCH_PROPERTY_ADD = 66147;

const int OID_SWITCH_PROPERTY_UPDATE = 66148;

const int OID_SWITCH_PROPERTY_DELETE = 66149;

const int OID_SWITCH_PROPERTY_ENUM = 66150;

const int OID_SWITCH_FEATURE_STATUS_QUERY = 66151;

const int OID_SWITCH_NIC_REQUEST = 66160;

const int OID_SWITCH_PORT_PROPERTY_ADD = 66161;

const int OID_SWITCH_PORT_PROPERTY_UPDATE = 66162;

const int OID_SWITCH_PORT_PROPERTY_DELETE = 66163;

const int OID_SWITCH_PORT_PROPERTY_ENUM = 66164;

const int OID_SWITCH_PARAMETERS = 66165;

const int OID_SWITCH_PORT_ARRAY = 66166;

const int OID_SWITCH_NIC_ARRAY = 66167;

const int OID_SWITCH_PORT_CREATE = 66168;

const int OID_SWITCH_PORT_DELETE = 66169;

const int OID_SWITCH_NIC_CREATE = 66170;

const int OID_SWITCH_NIC_CONNECT = 66171;

const int OID_SWITCH_NIC_DISCONNECT = 66172;

const int OID_SWITCH_NIC_DELETE = 66173;

const int OID_SWITCH_PORT_FEATURE_STATUS_QUERY = 66174;

const int OID_SWITCH_PORT_TEARDOWN = 66175;

const int OID_SWITCH_NIC_SAVE = 66192;

const int OID_SWITCH_NIC_SAVE_COMPLETE = 66193;

const int OID_SWITCH_NIC_RESTORE = 66194;

const int OID_SWITCH_NIC_RESTORE_COMPLETE = 66195;

const int OID_SWITCH_NIC_UPDATED = 66196;

const int OID_SWITCH_PORT_UPDATED = 66197;

const int OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_STARTED = 66201;

const int OID_SWITCH_NIC_SUSPENDED_LM_SOURCE_FINISHED = 66202;

const int OID_GEN_RSS_SET_INDIRECTION_TABLE_ENTRIES = 66240;

const int OID_GEN_ISOLATION_PARAMETERS = 66304;

const int NDIS_PNP_WAKE_UP_MAGIC_PACKET = 1;

const int NDIS_PNP_WAKE_UP_PATTERN_MATCH = 2;

const int NDIS_PNP_WAKE_UP_LINK_CHANGE = 4;

const int OID_TCP_TASK_OFFLOAD = 4227924481;

const int OID_TCP_TASK_IPSEC_ADD_SA = 4227924482;

const int OID_TCP_TASK_IPSEC_DELETE_SA = 4227924483;

const int OID_TCP_SAN_SUPPORT = 4227924484;

const int OID_TCP_TASK_IPSEC_ADD_UDPESP_SA = 4227924485;

const int OID_TCP_TASK_IPSEC_DELETE_UDPESP_SA = 4227924486;

const int OID_TCP4_OFFLOAD_STATS = 4227924487;

const int OID_TCP6_OFFLOAD_STATS = 4227924488;

const int OID_IP4_OFFLOAD_STATS = 4227924489;

const int OID_IP6_OFFLOAD_STATS = 4227924490;

const int OID_TCP_OFFLOAD_CURRENT_CONFIG = 4227924491;

const int OID_TCP_OFFLOAD_PARAMETERS = 4227924492;

const int OID_TCP_OFFLOAD_HARDWARE_CAPABILITIES = 4227924493;

const int OID_TCP_CONNECTION_OFFLOAD_CURRENT_CONFIG = 4227924494;

const int OID_TCP_CONNECTION_OFFLOAD_HARDWARE_CAPABILITIES = 4227924495;

const int OID_OFFLOAD_ENCAPSULATION = 16843018;

const int OID_FFP_SUPPORT = 4227924496;

const int OID_FFP_FLUSH = 4227924497;

const int OID_FFP_CONTROL = 4227924498;

const int OID_FFP_PARAMS = 4227924499;

const int OID_FFP_DATA = 4227924500;

const int OID_FFP_DRIVER_STATS = 4227990032;

const int OID_FFP_ADAPTER_STATS = 4227990033;

const int OID_TCP_CONNECTION_OFFLOAD_PARAMETERS = 4228055553;

const int OID_TUNNEL_INTERFACE_SET_OID = 251724038;

const int OID_TUNNEL_INTERFACE_RELEASE_OID = 251724039;

const int OID_QOS_RESERVED1 = 4211147008;

const int OID_QOS_RESERVED2 = 4211147009;

const int OID_QOS_RESERVED3 = 4211147010;

const int OID_QOS_RESERVED4 = 4211147011;

const int OID_QOS_RESERVED5 = 4211147012;

const int OID_QOS_RESERVED6 = 4211147013;

const int OID_QOS_RESERVED7 = 4211147014;

const int OID_QOS_RESERVED8 = 4211147015;

const int OID_QOS_RESERVED9 = 4211147016;

const int OID_QOS_RESERVED10 = 4211147017;

const int OID_QOS_RESERVED11 = 4211147018;

const int OID_QOS_RESERVED12 = 4211147019;

const int OID_QOS_RESERVED13 = 4211147020;

const int OID_QOS_RESERVED14 = 4211147021;

const int OID_QOS_RESERVED15 = 4211147022;

const int OID_QOS_RESERVED16 = 4211147023;

const int OID_QOS_RESERVED17 = 4211147024;

const int OID_QOS_RESERVED18 = 4211147025;

const int OID_QOS_RESERVED19 = 4211147026;

const int OID_QOS_RESERVED20 = 4211147027;

const int OID_XBOX_ACC_RESERVED0 = 4194304000;

const int OFFLOAD_MAX_SAS = 3;

const int OFFLOAD_INBOUND_SA = 1;

const int OFFLOAD_OUTBOUND_SA = 2;

const int NDIS_PROTOCOL_ID_DEFAULT = 0;

const int NDIS_PROTOCOL_ID_TCP_IP = 2;

const int NDIS_PROTOCOL_ID_IP6 = 3;

const int NDIS_PROTOCOL_ID_IPX = 6;

const int NDIS_PROTOCOL_ID_NBF = 7;

const int NDIS_PROTOCOL_ID_MAX = 15;

const int NDIS_PROTOCOL_ID_MASK = 15;

const int NETWORK_ADDRESS_LENGTH_IP = 16;

const int NETWORK_ADDRESS_LENGTH_IP6 = 28;

const int NETWORK_ADDRESS_LENGTH_IPX = 12;

const int READABLE_LOCAL_CLOCK = 1;

const int CLOCK_NETWORK_DERIVED = 2;

const int CLOCK_PRECISION = 4;

const int RECEIVE_TIME_INDICATION_CAPABLE = 8;

const int TIMED_SEND_CAPABLE = 16;

const int TIME_STAMP_CAPABLE = 32;

const int NDIS_DEVICE_WAKE_UP_ENABLE = 1;

const int NDIS_DEVICE_WAKE_ON_PATTERN_MATCH_ENABLE = 2;

const int NDIS_DEVICE_WAKE_ON_MAGIC_PACKET_ENABLE = 4;

const int WAN_PROTOCOL_KEEPS_STATS = 1;

const int NDIS_LINK_SPEED_UNKNOWN = -1;

const int DOT11_SSID_MAX_LENGTH = 32;

const int DOT11_AUTH_ALGORITHM_OPEN_SYSTEM = 1;

const int DOT11_AUTH_ALGORITHM_SHARED_KEY = 2;

const int DOT11_AUTH_ALGORITHM_WPA = 3;

const int DOT11_AUTH_ALGORITHM_WPA_PSK = 4;

const int DOT11_AUTH_ALGORITHM_WPA_NONE = 5;

const int DOT11_AUTH_ALGORITHM_RSNA = 6;

const int DOT11_AUTH_ALGORITHM_RSNA_PSK = 7;

const int DOT11_AUTH_ALGORITHM_WPA3 = 8;

const int DOT11_AUTH_ALGORITHM_WPA3_ENT_192 = 8;

const int DOT11_AUTH_ALGORITHM_WPA3_SAE = 9;

const int DOT11_AUTH_ALGORITHM_OWE = 10;

const int DOT11_AUTH_ALGORITHM_WPA3_ENT = 11;

const int DOT11_OI_MAX_LENGTH = 5;

const int DOT11_OI_MIN_LENGTH = 3;

const int DOT11_BSSID_LIST_REVISION_1 = 1;

const int DOT11_HESSID_LENGTH = 6;

const int DOT11_RATE_SET_MAX_LENGTH = 126;

const int DOT11_WFD_SERVICE_NAME_MAX_LENGTH = 255;

const int DOT11_WFD_APS2_SERVICE_TYPE_MAX_LENGTH = 21;

const int DOT11_WFD_ASP2_INSTANCE_NAME_MAX_LENGTH = 63;

const int DOT11_WFD_SERVICE_INFORMATION_MAX_LENGTH = 65535;

const int DOT11_MAX_REQUESTED_SERVICE_INFORMATION_LENGTH = 255;

const int DOT11_WFD_SESSION_INFO_MAX_LENGTH = 144;

const int NDIS_PACKET_TYPE_MEDIA_SPECIFIC_MASK = 268369920;

const int NDIS_PACKET_TYPE_802_11_DIRECTED_DATA = 1;

const int NDIS_PACKET_TYPE_802_11_BROADCAST_DATA = 8;

const int NDIS_PACKET_TYPE_802_11_MULTICAST_DATA = 2;

const int NDIS_PACKET_TYPE_802_11_ALL_MULTICAST_DATA = 4;

const int NDIS_PACKET_TYPE_802_11_PROMISCUOUS_DATA = 32;

const int NDIS_PACKET_TYPE_802_11_RAW_DATA = 65536;

const int NDIS_PACKET_TYPE_802_11_DIRECTED_MGMT = 131072;

const int NDIS_PACKET_TYPE_802_11_BROADCAST_MGMT = 262144;

const int NDIS_PACKET_TYPE_802_11_MULTICAST_MGMT = 524288;

const int NDIS_PACKET_TYPE_802_11_ALL_MULTICAST_MGMT = 1048576;

const int NDIS_PACKET_TYPE_802_11_PROMISCUOUS_MGMT = 2097152;

const int NDIS_PACKET_TYPE_802_11_RAW_MGMT = 4194304;

const int NDIS_PACKET_TYPE_802_11_DIRECTED_CTRL = 8388608;

const int NDIS_PACKET_TYPE_802_11_BROADCAST_CTRL = 16777216;

const int NDIS_PACKET_TYPE_802_11_PROMISCUOUS_CTRL = 33554432;

const int NDIS_PACKET_TYPE_ALL_802_11_FILTERS = 67043375;

const int DOT11_MAX_PDU_SIZE = 2346;

const int DOT11_MIN_PDU_SIZE = 256;

const int DOT11_MAX_NUM_DEFAULT_KEY = 4;

const int DOT11_MAX_NUM_DEFAULT_KEY_MFP = 6;

const int OID_DOT11_NDIS_START = 218170112;

const int NWF_MANDATORY_OID = 1;

const int NWF_OPTIONAL_OID = 2;

const int NWF_OPERATIONAL_OID = 1;

const int NWF_STATISTICS_OID = 2;

const int OID_DOT11_OFFLOAD_CAPABILITY = 218170112;

const int DOT11_HW_WEP_SUPPORTED_TX = 1;

const int DOT11_HW_WEP_SUPPORTED_RX = 2;

const int DOT11_HW_FRAGMENTATION_SUPPORTED = 4;

const int DOT11_HW_DEFRAGMENTATION_SUPPORTED = 8;

const int DOT11_HW_MSDU_AUTH_SUPPORTED_TX = 16;

const int DOT11_HW_MSDU_AUTH_SUPPORTED_RX = 32;

const int DOT11_CONF_ALGO_WEP_RC4 = 1;

const int DOT11_CONF_ALGO_TKIP = 2;

const int DOT11_AUTH_ALGO_MICHAEL = 1;

const int OID_DOT11_CURRENT_OFFLOAD_CAPABILITY = 218170113;

const int OID_DOT11_WEP_OFFLOAD = 218170114;

const int OID_DOT11_WEP_UPLOAD = 218170115;

const int OID_DOT11_DEFAULT_WEP_OFFLOAD = 218170116;

const int OID_DOT11_DEFAULT_WEP_UPLOAD = 218170117;

const int OID_DOT11_MPDU_MAX_LENGTH = 218170118;

const int OID_DOT11_OPERATION_MODE_CAPABILITY = 218170119;

const int DOT11_OPERATION_MODE_UNKNOWN = 0;

const int DOT11_OPERATION_MODE_STATION = 1;

const int DOT11_OPERATION_MODE_AP = 2;

const int DOT11_OPERATION_MODE_EXTENSIBLE_STATION = 4;

const int DOT11_OPERATION_MODE_EXTENSIBLE_AP = 8;

const int DOT11_OPERATION_MODE_WFD_DEVICE = 16;

const int DOT11_OPERATION_MODE_WFD_GROUP_OWNER = 32;

const int DOT11_OPERATION_MODE_WFD_CLIENT = 64;

const int DOT11_OPERATION_MODE_MANUFACTURING = 1073741824;

const int DOT11_OPERATION_MODE_NETWORK_MONITOR = 2147483648;

const int OID_DOT11_CURRENT_OPERATION_MODE = 218170120;

const int OID_DOT11_CURRENT_PACKET_FILTER = 218170121;

const int DOT11_PACKET_TYPE_DIRECTED_CTRL = 1;

const int DOT11_PACKET_TYPE_DIRECTED_MGMT = 2;

const int DOT11_PACKET_TYPE_DIRECTED_DATA = 4;

const int DOT11_PACKET_TYPE_MULTICAST_CTRL = 8;

const int DOT11_PACKET_TYPE_MULTICAST_MGMT = 16;

const int DOT11_PACKET_TYPE_MULTICAST_DATA = 32;

const int DOT11_PACKET_TYPE_BROADCAST_CTRL = 64;

const int DOT11_PACKET_TYPE_BROADCAST_MGMT = 128;

const int DOT11_PACKET_TYPE_BROADCAST_DATA = 256;

const int DOT11_PACKET_TYPE_PROMISCUOUS_CTRL = 512;

const int DOT11_PACKET_TYPE_PROMISCUOUS_MGMT = 1024;

const int DOT11_PACKET_TYPE_PROMISCUOUS_DATA = 2048;

const int DOT11_PACKET_TYPE_ALL_MULTICAST_CTRL = 4096;

const int DOT11_PACKET_TYPE_ALL_MULTICAST_MGMT = 8192;

const int DOT11_PACKET_TYPE_ALL_MULTICAST_DATA = 16384;

const int DOT11_PACKET_TYPE_RESERVED = -32768;

const int OID_DOT11_ATIM_WINDOW = 218170122;

const int OID_DOT11_SCAN_REQUEST = 218170123;

const int OID_DOT11_CURRENT_PHY_TYPE = 218170124;

const int DOT11_PHY_TYPE_LIST_REVISION_1 = 1;

const int OID_DOT11_JOIN_REQUEST = 218170125;

const int DOT11_CAPABILITY_INFO_ESS = 1;

const int DOT11_CAPABILITY_INFO_IBSS = 2;

const int DOT11_CAPABILITY_INFO_CF_POLLABLE = 4;

const int DOT11_CAPABILITY_INFO_CF_POLL_REQ = 8;

const int DOT11_CAPABILITY_INFO_PRIVACY = 16;

const int DOT11_CAPABILITY_SHORT_PREAMBLE = 32;

const int DOT11_CAPABILITY_PBCC = 64;

const int DOT11_CAPABILITY_CHANNEL_AGILITY = 128;

const int DOT11_CAPABILITY_SHORT_SLOT_TIME = 1024;

const int DOT11_CAPABILITY_DSSSOFDM = 8192;

const int OID_DOT11_START_REQUEST = 218170126;

const int OID_DOT11_UPDATE_IE = 218170127;

const int OID_DOT11_RESET_REQUEST = 218170128;

const int OID_DOT11_NIC_POWER_STATE = 218170129;

const int OID_DOT11_OPTIONAL_CAPABILITY = 218170130;

const int OID_DOT11_CURRENT_OPTIONAL_CAPABILITY = 218170131;

const int OID_DOT11_STATION_ID = 218170132;

const int OID_DOT11_MEDIUM_OCCUPANCY_LIMIT = 218170133;

const int OID_DOT11_CF_POLLABLE = 218170134;

const int OID_DOT11_CFP_PERIOD = 218170135;

const int OID_DOT11_CFP_MAX_DURATION = 218170136;

const int OID_DOT11_POWER_MGMT_MODE = 218170137;

const int DOT11_POWER_SAVE_LEVEL_MAX_PSP = 1;

const int DOT11_POWER_SAVE_LEVEL_FAST_PSP = 2;

const int OID_DOT11_OPERATIONAL_RATE_SET = 218170138;

const int OID_DOT11_BEACON_PERIOD = 218170139;

const int OID_DOT11_DTIM_PERIOD = 218170140;

const int OID_DOT11_WEP_ICV_ERROR_COUNT = 218170141;

const int OID_DOT11_MAC_ADDRESS = 218170142;

const int OID_DOT11_RTS_THRESHOLD = 218170143;

const int OID_DOT11_SHORT_RETRY_LIMIT = 218170144;

const int OID_DOT11_LONG_RETRY_LIMIT = 218170145;

const int OID_DOT11_FRAGMENTATION_THRESHOLD = 218170146;

const int OID_DOT11_MAX_TRANSMIT_MSDU_LIFETIME = 218170147;

const int OID_DOT11_MAX_RECEIVE_LIFETIME = 218170148;

const int OID_DOT11_COUNTERS_ENTRY = 218170149;

const int OID_DOT11_SUPPORTED_PHY_TYPES = 218170150;

const int OID_DOT11_CURRENT_REG_DOMAIN = 218170151;

const int DOT11_REG_DOMAIN_OTHER = 0;

const int DOT11_REG_DOMAIN_FCC = 16;

const int DOT11_REG_DOMAIN_DOC = 32;

const int DOT11_REG_DOMAIN_ETSI = 48;

const int DOT11_REG_DOMAIN_SPAIN = 49;

const int DOT11_REG_DOMAIN_FRANCE = 50;

const int DOT11_REG_DOMAIN_MKK = 64;

const int OID_DOT11_TEMP_TYPE = 218170152;

const int OID_DOT11_CURRENT_TX_ANTENNA = 218170153;

const int OID_DOT11_DIVERSITY_SUPPORT = 218170154;

const int OID_DOT11_CURRENT_RX_ANTENNA = 218170155;

const int OID_DOT11_SUPPORTED_POWER_LEVELS = 218170156;

const int OID_DOT11_CURRENT_TX_POWER_LEVEL = 218170157;

const int OID_DOT11_HOP_TIME = 218170158;

const int OID_DOT11_CURRENT_CHANNEL_NUMBER = 218170159;

const int OID_DOT11_MAX_DWELL_TIME = 218170160;

const int OID_DOT11_CURRENT_DWELL_TIME = 218170161;

const int OID_DOT11_CURRENT_SET = 218170162;

const int OID_DOT11_CURRENT_PATTERN = 218170163;

const int OID_DOT11_CURRENT_INDEX = 218170164;

const int OID_DOT11_CURRENT_CHANNEL = 218170165;

const int OID_DOT11_CCA_MODE_SUPPORTED = 218170166;

const int DOT11_CCA_MODE_ED_ONLY = 1;

const int DOT11_CCA_MODE_CS_ONLY = 2;

const int DOT11_CCA_MODE_ED_and_CS = 4;

const int DOT11_CCA_MODE_CS_WITH_TIMER = 8;

const int DOT11_CCA_MODE_HRCS_AND_ED = 16;

const int OID_DOT11_CURRENT_CCA_MODE = 218170167;

const int OID_DOT11_ED_THRESHOLD = 218170168;

const int OID_DOT11_CCA_WATCHDOG_TIMER_MAX = 218170169;

const int OID_DOT11_CCA_WATCHDOG_COUNT_MAX = 218170170;

const int OID_DOT11_CCA_WATCHDOG_TIMER_MIN = 218170171;

const int OID_DOT11_CCA_WATCHDOG_COUNT_MIN = 218170172;

const int OID_DOT11_REG_DOMAINS_SUPPORT_VALUE = 218170173;

const int OID_DOT11_SUPPORTED_TX_ANTENNA = 218170174;

const int OID_DOT11_SUPPORTED_RX_ANTENNA = 218170175;

const int OID_DOT11_DIVERSITY_SELECTION_RX = 218170176;

const int OID_DOT11_SUPPORTED_DATA_RATES_VALUE = 218170177;

const int MAX_NUM_SUPPORTED_RATES = 8;

const int MAX_NUM_SUPPORTED_RATES_V2 = 255;

const int OID_DOT11_CURRENT_FREQUENCY = 218170178;

const int OID_DOT11_TI_THRESHOLD = 218170179;

const int OID_DOT11_FREQUENCY_BANDS_SUPPORTED = 218170180;

const int DOT11_FREQUENCY_BANDS_LOWER = 1;

const int DOT11_FREQUENCY_BANDS_MIDDLE = 2;

const int DOT11_FREQUENCY_BANDS_UPPER = 4;

const int OID_DOT11_SHORT_PREAMBLE_OPTION_IMPLEMENTED = 218170181;

const int OID_DOT11_PBCC_OPTION_IMPLEMENTED = 218170182;

const int OID_DOT11_CHANNEL_AGILITY_PRESENT = 218170183;

const int OID_DOT11_CHANNEL_AGILITY_ENABLED = 218170184;

const int OID_DOT11_HR_CCA_MODE_SUPPORTED = 218170185;

const int DOT11_HR_CCA_MODE_ED_ONLY = 1;

const int DOT11_HR_CCA_MODE_CS_ONLY = 2;

const int DOT11_HR_CCA_MODE_CS_AND_ED = 4;

const int DOT11_HR_CCA_MODE_CS_WITH_TIMER = 8;

const int DOT11_HR_CCA_MODE_HRCS_AND_ED = 16;

const int OID_DOT11_MULTI_DOMAIN_CAPABILITY_IMPLEMENTED = 218170186;

const int OID_DOT11_MULTI_DOMAIN_CAPABILITY_ENABLED = 218170187;

const int OID_DOT11_COUNTRY_STRING = 218170188;

const int OID_DOT11_MULTI_DOMAIN_CAPABILITY = 218170189;

const int OID_DOT11_EHCC_PRIME_RADIX = 218170190;

const int OID_DOT11_EHCC_NUMBER_OF_CHANNELS_FAMILY_INDEX = 218170191;

const int OID_DOT11_EHCC_CAPABILITY_IMPLEMENTED = 218170192;

const int OID_DOT11_EHCC_CAPABILITY_ENABLED = 218170193;

const int OID_DOT11_HOP_ALGORITHM_ADOPTED = 218170194;

const int OID_DOT11_RANDOM_TABLE_FLAG = 218170195;

const int OID_DOT11_NUMBER_OF_HOPPING_SETS = 218170196;

const int OID_DOT11_HOP_MODULUS = 218170197;

const int OID_DOT11_HOP_OFFSET = 218170198;

const int OID_DOT11_HOPPING_PATTERN = 218170199;

const int OID_DOT11_RANDOM_TABLE_FIELD_NUMBER = 218170200;

const int OID_DOT11_WPA_TSC = 218170201;

const int OID_DOT11_RSSI_RANGE = 218170202;

const int OID_DOT11_RF_USAGE = 218170203;

const int OID_DOT11_NIC_SPECIFIC_EXTENSION = 218170204;

const int OID_DOT11_AP_JOIN_REQUEST = 218170205;

const int OID_DOT11_ERP_PBCC_OPTION_IMPLEMENTED = 218170206;

const int OID_DOT11_ERP_PBCC_OPTION_ENABLED = 218170207;

const int OID_DOT11_DSSS_OFDM_OPTION_IMPLEMENTED = 218170208;

const int OID_DOT11_DSSS_OFDM_OPTION_ENABLED = 218170209;

const int OID_DOT11_SHORT_SLOT_TIME_OPTION_IMPLEMENTED = 218170210;

const int OID_DOT11_SHORT_SLOT_TIME_OPTION_ENABLED = 218170211;

const int OID_DOT11_MAX_MAC_ADDRESS_STATES = 218170212;

const int OID_DOT11_RECV_SENSITIVITY_LIST = 218170213;

const int OID_DOT11_WME_IMPLEMENTED = 218170214;

const int OID_DOT11_WME_ENABLED = 218170215;

const int OID_DOT11_WME_AC_PARAMETERS = 218170216;

const int OID_DOT11_WME_UPDATE_IE = 218170217;

const int OID_DOT11_QOS_TX_QUEUES_SUPPORTED = 218170218;

const int OID_DOT11_QOS_TX_DURATION = 218170219;

const int OID_DOT11_QOS_TX_MEDIUM_TIME = 218170220;

const int OID_DOT11_SUPPORTED_OFDM_FREQUENCY_LIST = 218170221;

const int OID_DOT11_SUPPORTED_DSSS_CHANNEL_LIST = 218170222;

const int OID_DOT11_AUTO_CONFIG_ENABLED = 234946936;

const int DOT11_PHY_AUTO_CONFIG_ENABLED_FLAG = 1;

const int DOT11_MAC_AUTO_CONFIG_ENABLED_FLAG = 2;

const int OID_DOT11_ENUM_BSS_LIST = 234946937;

const int DOT11_BSS_ENTRY_BYTE_ARRAY_REVISION_1 = 1;

const int OID_DOT11_FLUSH_BSS_LIST = 234946938;

const int OID_DOT11_POWER_MGMT_REQUEST = 234946939;

const int DOT11_POWER_SAVING_NO_POWER_SAVING = 0;

const int DOT11_POWER_SAVING_FAST_PSP = 8;

const int DOT11_POWER_SAVING_MAX_PSP = 16;

const int DOT11_POWER_SAVING_MAXIMUM_LEVEL = 24;

const int OID_DOT11_DESIRED_SSID_LIST = 234946940;

const int DOT11_SSID_LIST_REVISION_1 = 1;

const int OID_DOT11_EXCLUDED_MAC_ADDRESS_LIST = 234946941;

const int DOT11_MAC_ADDRESS_LIST_REVISION_1 = 1;

const int OID_DOT11_DESIRED_BSSID_LIST = 234946942;

const int OID_DOT11_DESIRED_BSS_TYPE = 234946943;

const int OID_DOT11_PMKID_LIST = 234947200;

const int DOT11_PMKID_LIST_REVISION_1 = 1;

const int OID_DOT11_CONNECT_REQUEST = 234946945;

const int OID_DOT11_EXCLUDE_UNENCRYPTED = 234946946;

const int OID_DOT11_STATISTICS = 235012483;

const int DOT11_STATISTICS_UNKNOWN = -1;

const int DOT11_STATISTICS_REVISION_1 = 1;

const int OID_DOT11_PRIVACY_EXEMPTION_LIST = 234946948;

const int DOT11_EXEMPT_NO_EXEMPTION = 0;

const int DOT11_EXEMPT_ALWAYS = 1;

const int DOT11_EXEMPT_ON_KEY_MAPPING_KEY_UNAVAILABLE = 2;

const int DOT11_EXEMPT_UNICAST = 1;

const int DOT11_EXEMPT_MULTICAST = 2;

const int DOT11_EXEMPT_BOTH = 3;

const int DOT11_PRIVACY_EXEMPTION_LIST_REVISION_1 = 1;

const int OID_DOT11_ENABLED_AUTHENTICATION_ALGORITHM = 234946949;

const int DOT11_AUTH_ALGORITHM_LIST_REVISION_1 = 1;

const int OID_DOT11_SUPPORTED_UNICAST_ALGORITHM_PAIR = 234946950;

const int DOT11_AUTH_CIPHER_PAIR_LIST_REVISION_1 = 1;

const int OID_DOT11_ENABLED_UNICAST_CIPHER_ALGORITHM = 234946951;

const int DOT11_CIPHER_ALGORITHM_LIST_REVISION_1 = 1;

const int OID_DOT11_SUPPORTED_MULTICAST_ALGORITHM_PAIR = 234946952;

const int OID_DOT11_ENABLED_MULTICAST_CIPHER_ALGORITHM = 234946953;

const int OID_DOT11_CIPHER_DEFAULT_KEY_ID = 234946954;

const int OID_DOT11_CIPHER_DEFAULT_KEY = 234946955;

const int DOT11_CIPHER_DEFAULT_KEY_VALUE_REVISION_1 = 1;

const int OID_DOT11_CIPHER_KEY_MAPPING_KEY = 234946956;

const int DOT11_CIPHER_KEY_MAPPING_KEY_VALUE_BYTE_ARRAY_REVISION_1 = 1;

const int OID_DOT11_ENUM_ASSOCIATION_INFO = 234946957;

const int DOT11_ASSOCIATION_INFO_LIST_REVISION_1 = 1;

const int OID_DOT11_DISCONNECT_REQUEST = 234946958;

const int OID_DOT11_UNICAST_USE_GROUP_ENABLED = 234946959;

const int OID_DOT11_HARDWARE_PHY_STATE = 234946960;

const int OID_DOT11_DESIRED_PHY_LIST = 234946961;

const int DOT11_PHY_ID_LIST_REVISION_1 = 1;

const int DOT11_PHY_ID_ANY = 4294967295;

const int OID_DOT11_CURRENT_PHY_ID = 234946962;

const int OID_DOT11_MEDIA_STREAMING_ENABLED = 234946963;

const int OID_DOT11_UNREACHABLE_DETECTION_THRESHOLD = 234946964;

const int OID_DOT11_ACTIVE_PHY_LIST = 234946965;

const int OID_DOT11_EXTSTA_CAPABILITY = 234946966;

const int DOT11_EXTSTA_CAPABILITY_REVISION_1 = 1;

const int OID_DOT11_DATA_RATE_MAPPING_TABLE = 234946967;

const int DOT11_DATA_RATE_MAPPING_TABLE_REVISION_1 = 1;

const int DOT11_DATA_RATE_NON_STANDARD = 1;

const int DOT11_DATA_RATE_INDEX_MASK = 127;

const int OID_DOT11_SUPPORTED_COUNTRY_OR_REGION_STRING = 234946968;

const int DOT11_COUNTRY_OR_REGION_STRING_LIST_REVISION_1 = 1;

const int OID_DOT11_DESIRED_COUNTRY_OR_REGION_STRING = 234946969;

const int OID_DOT11_PORT_STATE_NOTIFICATION = 234947226;

const int DOT11_PORT_STATE_NOTIFICATION_REVISION_1 = 1;

const int OID_DOT11_IBSS_PARAMS = 234946971;

const int DOT11_IBSS_PARAMS_REVISION_1 = 1;

const int OID_DOT11_QOS_PARAMS = 234947228;

const int DOT11_QOS_PARAMS_REVISION_1 = 1;

const int DOT11_QOS_PROTOCOL_FLAG_WMM = 1;

const int DOT11_QOS_PROTOCOL_FLAG_11E = 2;

const int OID_DOT11_SAFE_MODE_ENABLED = 234946973;

const int OID_DOT11_HIDDEN_NETWORK_ENABLED = 234946974;

const int OID_DOT11_ASSOCIATION_PARAMS = 234946975;

const int DOT11_ASSOCIATION_PARAMS_REVISION_1 = 1;

const int OID_DOT11_SAFE_MODE_HT_ENABLED = 234946976;

const int DOT11_MAX_NUM_OF_FRAGMENTS = 16;

const int DOT11_PRIORITY_CONTENTION = 0;

const int DOT11_PRIORITY_CONTENTION_FREE = 1;

const int DOT11_SERVICE_CLASS_REORDERABLE_MULTICAST = 0;

const int DOT11_SERVICE_CLASS_STRICTLY_ORDERED = 1;

const int DOT11_FLAGS_80211B_SHORT_PREAMBLE = 1;

const int DOT11_FLAGS_80211B_PBCC = 2;

const int DOT11_FLAGS_80211B_CHANNEL_AGILITY = 4;

const int DOT11_FLAGS_PS_ON = 8;

const int DOT11_FLAGS_80211G_DSSS_OFDM = 16;

const int DOT11_FLAGS_80211G_USE_PROTECTION = 32;

const int DOT11_FLAGS_80211G_NON_ERP_PRESENT = 64;

const int DOT11_FLAGS_80211G_BARKER_PREAMBLE_MODE = 128;

const int DOT11_WME_PACKET = 256;

const int DOT11_PHY_ATTRIBUTES_REVISION_1 = 1;

const int DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_OID_SUPPORTED = 1;

const int DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_CERTIFIED = 2;

const int DOT11_EXTSTA_ATTRIBUTES_SAFEMODE_RESERVED = 12;

const int DOT11_EXTSTA_ATTRIBUTES_REVISION_1 = 1;

const int DOT11_EXTSTA_ATTRIBUTES_REVISION_2 = 2;

const int DOT11_EXTSTA_ATTRIBUTES_REVISION_3 = 3;

const int DOT11_EXTSTA_ATTRIBUTES_REVISION_4 = 4;

const int DOT11_STATUS_SUCCESS = 1;

const int DOT11_STATUS_RETRY_LIMIT_EXCEEDED = 2;

const int DOT11_STATUS_UNSUPPORTED_PRIORITY = 4;

const int DOT11_STATUS_UNSUPPORTED_SERVICE_CLASS = 8;

const int DOT11_STATUS_UNAVAILABLE_PRIORITY = 16;

const int DOT11_STATUS_UNAVAILABLE_SERVICE_CLASS = 32;

const int DOT11_STATUS_XMIT_MSDU_TIMER_EXPIRED = 64;

const int DOT11_STATUS_UNAVAILABLE_BSS = 128;

const int DOT11_STATUS_EXCESSIVE_DATA_LENGTH = 256;

const int DOT11_STATUS_ENCRYPTION_FAILED = 512;

const int DOT11_STATUS_WEP_KEY_UNAVAILABLE = 1024;

const int DOT11_STATUS_ICV_VERIFIED = 2048;

const int DOT11_STATUS_PACKET_REASSEMBLED = 4096;

const int DOT11_STATUS_PACKET_NOT_REASSEMBLED = 8192;

const int DOT11_STATUS_GENERATE_AUTH_FAILED = 16384;

const int DOT11_STATUS_AUTH_NOT_VERIFIED = 32768;

const int DOT11_STATUS_AUTH_VERIFIED = 65536;

const int DOT11_STATUS_AUTH_FAILED = 131072;

const int DOT11_STATUS_PS_LIFETIME_EXPIRED = 262144;

const int DOT11_STATUS_RESET_CONFIRM = 4;

const int DOT11_STATUS_SCAN_CONFIRM = 1;

const int DOT11_STATUS_JOIN_CONFIRM = 2;

const int DOT11_STATUS_START_CONFIRM = 3;

const int DOT11_STATUS_AP_JOIN_CONFIRM = 5;

const int DOT11_STATUS_MPDU_MAX_LENGTH_CHANGED = 6;

const int DOT11_MPDU_MAX_LENGTH_INDICATION_REVISION_1 = 1;

const int DOT11_ASSOCIATION_START_PARAMETERS_REVISION_1 = 1;

const int DOT11_ENCAP_RFC_1042 = 1;

const int DOT11_ENCAP_802_1H = 2;

const int DOT11_ASSOC_STATUS_SUCCESS = 0;

const int DOT11_ASSOC_STATUS_FAILURE = 1;

const int DOT11_ASSOC_STATUS_UNREACHABLE = 2;

const int DOT11_ASSOC_STATUS_RADIO_OFF = 3;

const int DOT11_ASSOC_STATUS_PHY_DISABLED = 4;

const int DOT11_ASSOC_STATUS_CANCELLED = 5;

const int DOT11_ASSOC_STATUS_CANDIDATE_LIST_EXHAUSTED = 6;

const int DOT11_ASSOC_STATUS_DISASSOCIATED_BY_OS = 7;

const int DOT11_ASSOC_STATUS_DISASSOCIATED_BY_ROAMING = 8;

const int DOT11_ASSOC_STATUS_DISASSOCIATED_BY_RESET = 9;

const int DOT11_ASSOC_STATUS_SYSTEM_ERROR = 10;

const int DOT11_ASSOC_STATUS_ROAMING_BETTER_AP_FOUND = 11;

const int DOT11_ASSOC_STATUS_ROAMING_ASSOCIATION_LOST = 12;

const int DOT11_ASSOC_STATUS_ROAMING_ADHOC = 13;

const int DOT11_ASSOC_STATUS_PEER_DEAUTHENTICATED = 65536;

const int DOT11_ASSOC_STATUS_PEER_DEAUTHENTICATED_START = 65536;

const int DOT11_ASSOC_STATUS_PEER_DEAUTHENTICATED_END = 131071;

const int DOT11_ASSOC_STATUS_PEER_DISASSOCIATED = 131072;

const int DOT11_ASSOC_STATUS_PEER_DISASSOCIATED_START = 131072;

const int DOT11_ASSOC_STATUS_PEER_DISASSOCIATED_END = 196607;

const int DOT11_ASSOC_STATUS_ASSOCIATION_RESPONSE = 196608;

const int DOT11_ASSOC_STATUS_ASSOCIATION_RESPONSE_START = 196608;

const int DOT11_ASSOC_STATUS_ASSOCIATION_RESPONSE_END = 262143;

const int DOT11_ASSOC_STATUS_REASON_CODE_MASK = 65535;

const int DOT11_ASSOC_STATUS_IHV_START = 2147483648;

const int DOT11_ASSOC_STATUS_IHV_END = 4294967295;

const int DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_1 = 1;

const int DOT11_ASSOCIATION_COMPLETION_PARAMETERS_REVISION_2 = 2;

const int DOT11_CONNECTION_START_PARAMETERS_REVISION_1 = 1;

const int DOT11_CONNECTION_STATUS_SUCCESS = 0;

const int DOT11_CONNECTION_STATUS_FAILURE = 1;

const int DOT11_CONNECTION_STATUS_CANDIDATE_LIST_EXHAUSTED = 6;

const int DOT11_CONNECTION_STATUS_PHY_POWER_DOWN = 3;

const int DOT11_CONNECTION_STATUS_CANCELLED = 5;

const int DOT11_CONNECTION_STATUS_IHV_START = 2147483648;

const int DOT11_CONNECTION_STATUS_IHV_END = 4294967295;

const int DOT11_CONNECTION_COMPLETION_PARAMETERS_REVISION_1 = 1;

const int DOT11_ROAMING_REASON_BETTER_AP_FOUND = 11;

const int DOT11_ROAMING_REASON_ASSOCIATION_LOST = 12;

const int DOT11_ROAMING_REASON_ADHOC = 13;

const int DOT11_ROAMING_REASON_IHV_START = 2147483648;

const int DOT11_ROAMING_REASON_IHV_END = 4294967295;

const int DOT11_ROAMING_START_PARAMETERS_REVISION_1 = 1;

const int DOT11_ROAMING_COMPLETION_PARAMETERS_REVISION_1 = 1;

const int DOT11_DISASSOC_REASON_OS = 7;

const int DOT11_DISASSOC_REASON_PEER_UNREACHABLE = 2;

const int DOT11_DISASSOC_REASON_PEER_DEAUTHENTICATED = 65536;

const int DOT11_DISASSOC_REASON_PEER_DISASSOCIATED = 131072;

const int DOT11_DISASSOC_REASON_RADIO_OFF = 3;

const int DOT11_DISASSOC_REASON_PHY_DISABLED = 4;

const int DOT11_DISASSOC_REASON_IHV_START = 2147483648;

const int DOT11_DISASSOC_REASON_IHV_END = 4294967295;

const int DOT11_DISASSOCIATION_PARAMETERS_REVISION_1 = 1;

const int DOT11_TKIPMIC_FAILURE_PARAMETERS_REVISION_1 = 1;

const int DOT11_PMKID_CANDIDATE_LIST_PARAMETERS_REVISION_1 = 1;

const int DOT11_PMKID_CANDIDATE_PREAUTH_ENABLED = 1;

const int DOT11_PHY_STATE_PARAMETERS_REVISION_1 = 1;

const int DOT11_LINK_QUALITY_PARAMETERS_REVISION_1 = 1;

const int DOT11_EXTSTA_SEND_CONTEXT_REVISION_1 = 1;

const int DOT11_RECV_FLAG_RAW_PACKET = 1;

const int DOT11_RECV_FLAG_RAW_PACKET_FCS_FAILURE = 2;

const int DOT11_RECV_FLAG_RAW_PACKET_TIMESTAMP = 4;

const int DOT11_EXTSTA_RECV_CONTEXT_REVISION_1 = 1;

const int OID_DOT11_PRIVATE_OIDS_START = 218171136;

const int OID_DOT11_CURRENT_ADDRESS = 218171138;

const int OID_DOT11_PERMANENT_ADDRESS = 218171139;

const int OID_DOT11_MULTICAST_LIST = 218171140;

const int OID_DOT11_MAXIMUM_LIST_SIZE = 218171141;

const int DOT11_EXTAP_ATTRIBUTES_REVISION_1 = 1;

const int NDIS_SIZEOF_DOT11_EXTAP_ATTRIBUTES_REVISION_1 = 80;

const int DOT11_INCOMING_ASSOC_STARTED_PARAMETERS_REVISION_1 = 1;

const int DOT11_INCOMING_ASSOC_REQUEST_RECEIVED_PARAMETERS_REVISION_1 = 1;

const int DOT11_ASSOC_ERROR_SOURCE_OS = 0;

const int DOT11_ASSOC_ERROR_SOURCE_REMOTE = 1;

const int DOT11_ASSOC_ERROR_SOURCE_OTHER = 255;

const int DOT11_INCOMING_ASSOC_COMPLETION_PARAMETERS_REVISION_1 = 1;

const int DOT11_STOP_AP_PARAMETERS_REVISION_1 = 1;

const int DOT11_STOP_AP_REASON_FREQUENCY_NOT_AVAILABLE = 1;

const int DOT11_STOP_AP_REASON_CHANNEL_NOT_AVAILABLE = 2;

const int DOT11_STOP_AP_REASON_AP_ACTIVE = 3;

const int DOT11_STOP_AP_REASON_IHV_START = 4278190080;

const int DOT11_STOP_AP_REASON_IHV_END = 4294967295;

const int DOT11_PHY_FREQUENCY_ADOPTED_PARAMETERS_REVISION_1 = 1;

const int DOT11_CAN_SUSTAIN_AP_PARAMETERS_REVISION_1 = 1;

const int DOT11_CAN_SUSTAIN_AP_REASON_IHV_START = 4278190080;

const int DOT11_CAN_SUSTAIN_AP_REASON_IHV_END = 4294967295;

const int NWF_EXTAP_OID = 3;

const int OID_DOT11_WPS_ENABLED = 235077889;

const int OID_DOT11_START_AP_REQUEST = 235077890;

const int OID_DOT11_AVAILABLE_CHANNEL_LIST = 235077891;

const int DOT11_AVAILABLE_CHANNEL_LIST_REVISION_1 = 1;

const int OID_DOT11_AVAILABLE_FREQUENCY_LIST = 235077892;

const int DOT11_AVAILABLE_FREQUENCY_LIST_REVISION_1 = 1;

const int OID_DOT11_DISASSOCIATE_PEER_REQUEST = 235077893;

const int DOT11_DISASSOCIATE_PEER_REQUEST_REVISION_1 = 1;

const int OID_DOT11_INCOMING_ASSOCIATION_DECISION = 235077894;

const int DOT11_INCOMING_ASSOC_DECISION_REVISION_1 = 1;

const int DOT11_SIZEOF_INCOMING_ASSOC_DECISION_REVISION_1 = 24;

const int DOT11_INCOMING_ASSOC_DECISION_REVISION_2 = 2;

const int DOT11_SIZEOF_INCOMING_ASSOC_DECISION_REVISION_2 = 28;

const int OID_DOT11_ADDITIONAL_IE = 235077895;

const int DOT11_ADDITIONAL_IE_REVISION_1 = 1;

const int DOT11_EXTAP_SEND_CONTEXT_REVISION_1 = 1;

const int DOT11_EXTAP_RECV_CONTEXT_REVISION_1 = 1;

const int OID_DOT11_ENUM_PEER_INFO = 235077896;

const int DOT11_PEER_INFO_LIST_REVISION_1 = 1;

const int DOT11_VWIFI_COMBINATION_REVISION_1 = 1;

const int DOT11_SIZEOF_VWIFI_COMBINATION_REVISION_1 = 16;

const int DOT11_VWIFI_COMBINATION_REVISION_2 = 2;

const int DOT11_SIZEOF_VWIFI_COMBINATION_REVISION_2 = 20;

const int DOT11_VWIFI_COMBINATION_REVISION_3 = 3;

const int DOT11_SIZEOF_VWIFI_COMBINATION_REVISION_3 = 24;

const int DOT11_VWIFI_ATTRIBUTES_REVISION_1 = 1;

const int NWF_VWIFI_OID = 4;

const int OID_DOT11_CREATE_MAC = 235143425;

const int DOT11_MAC_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_MAC_PARAMETERS_REVISION_1 = 8;

const int OID_DOT11_DELETE_MAC = 235143426;

const int OID_DOT11_PREFERRED_MAC = 235143427;

const int OID_DOT11_VIRTUAL_STATION_CAPABILITY = 235143684;

const int DOT11_WFD_ATTRIBUTES_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_ATTRIBUTES_REVISION_1 = 72;

const int DOT11_WFD_STATUS_SUCCESS = 0;

const int DOT11_WFD_STATUS_FAILED_INFORMATION_IS_UNAVAILABLE = 1;

const int DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PARAMETERS = 2;

const int DOT11_WFD_STATUS_FAILED_LIMIT_REACHED = 3;

const int DOT11_WFD_STATUS_FAILED_INVALID_PARAMETERS = 4;

const int DOT11_WFD_STATUS_FAILED_UNABLE_TO_ACCOMODATE_REQUEST = 5;

const int DOT11_WFD_STATUS_FAILED_PREVIOUS_PROTOCOL_ERROR = 6;

const int DOT11_WFD_STATUS_FAILED_NO_COMMON_CHANNELS = 7;

const int DOT11_WFD_STATUS_FAILED_UNKNOWN_WFD_GROUP = 8;

const int DOT11_WFD_STATUS_FAILED_MATCHING_MAX_INTENT = 9;

const int DOT11_WFD_STATUS_FAILED_INCOMPATIBLE_PROVISIONING_METHOD = 10;

const int DOT11_WFD_STATUS_FAILED_REJECTED_BY_USER = 11;

const int DOT11_WFD_STATUS_SUCCESS_ACCEPTED_BY_USER = 12;

const int DOT11_WFD_MINOR_REASON_SUCCESS = 0;

const int
    DOT11_WFD_MINOR_REASON_DISASSOCIATED_FROM_WLAN_CROSS_CONNECTION_POLICY = 1;

const int
    DOT11_WFD_MINOR_REASON_DISASSOCIATED_NOT_MANAGED_INFRASTRUCTURE_CAPABLE = 2;

const int DOT11_WFD_MINOR_REASON_DISASSOCIATED_WFD_COEXISTENCE_POLICY = 3;

const int DOT11_WFD_MINOR_REASON_DISASSOCIATED_INFRASTRUCTURE_MANAGED_POLICY =
    4;

const int DOT11_WPS_VERSION_1_0 = 1;

const int DOT11_WPS_VERSION_2_0 = 2;

const int DOT11_WFD_DEVICE_CAPABILITY_SERVICE_DISCOVERY = 1;

const int DOT11_WFD_DEVICE_CAPABILITY_P2P_CLIENT_DISCOVERABILITY = 2;

const int DOT11_WFD_DEVICE_CAPABILITY_CONCURRENT_OPERATION = 4;

const int DOT11_WFD_DEVICE_CAPABILITY_P2P_INFRASTRUCTURE_MANAGED = 8;

const int DOT11_WFD_DEVICE_CAPABILITY_P2P_DEVICE_LIMIT = 16;

const int DOT11_WFD_DEVICE_CAPABILITY_P2P_INVITATION_PROCEDURE = 32;

const int DOT11_WFD_DEVICE_CAPABILITY_RESERVED_6 = 64;

const int DOT11_WFD_DEVICE_CAPABILITY_RESERVED_7 = 128;

const int DOT11_WFD_GROUP_CAPABILITY_NONE = 0;

const int DOT11_WFD_GROUP_CAPABILITY_GROUP_OWNER = 1;

const int DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_GROUP = 2;

const int DOT11_WFD_GROUP_CAPABILITY_GROUP_LIMIT_REACHED = 4;

const int DOT11_WFD_GROUP_CAPABILITY_INTRABSS_DISTRIBUTION_SUPPORTED = 8;

const int DOT11_WFD_GROUP_CAPABILITY_CROSS_CONNECTION_SUPPORTED = 16;

const int DOT11_WFD_GROUP_CAPABILITY_PERSISTENT_RECONNECT_SUPPORTED = 32;

const int DOT11_WFD_GROUP_CAPABILITY_IN_GROUP_FORMATION = 64;

const int DOT11_WFD_GROUP_CAPABILITY_RESERVED_7 = 128;

const int DOT11_WFD_GROUP_CAPABILITY_EAPOL_KEY_IP_ADDRESS_ALLOCATION_SUPPORTED =
    128;

const int DOT11_WPS_DEVICE_NAME_MAX_LENGTH = 32;

const int DOT11_WPS_MAX_PASSKEY_LENGTH = 8;

const int DOT11_WPS_MAX_MODEL_NAME_LENGTH = 32;

const int DOT11_WPS_MAX_MODEL_NUMBER_LENGTH = 32;

const int WFDSVC_CONNECTION_CAPABILITY_NEW = 1;

const int WFDSVC_CONNECTION_CAPABILITY_CLIENT = 2;

const int WFDSVC_CONNECTION_CAPABILITY_GO = 4;

const int DOT11_WFD_DISCOVER_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int DOT11_WFD_DISCOVER_COMPLETE_MAX_LIST_SIZE = 128;

const int DOT11_SIZEOF_WFD_DISCOVER_COMPLETE_PARAMETERS_REVISION_1 = 24;

const int DOT11_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_GO_NEGOTIATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    24;

const int DOT11_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_RECEIVED_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 =
    32;

const int DOT11_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_GO_NEGOTIATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    24;

const int DOT11_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_RECEIVED_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 =
    32;

const int
    DOT11_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_GO_NEGOTIATION_CONFIRMATION_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    24;

const int DOT11_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_RECEIVED_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 =
    20;

const int DOT11_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_INVITATION_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    32;

const int DOT11_RECEIVED_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_RECEIVED_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 40;

const int DOT11_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_INVITATION_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    24;

const int DOT11_RECEIVED_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_RECEIVED_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 28;

const int
    DOT11_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_PROVISION_DISCOVERY_REQUEST_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    32;

const int DOT11_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_RECEIVED_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 =
    40;

const int
    DOT11_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_PROVISION_DISCOVERY_RESPONSE_SEND_COMPLETE_PARAMETERS_REVISION_1 =
    24;

const int DOT11_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int
    DOT11_SIZEOF_RECEIVED_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 =
    28;

const int DOT11_ANQP_QUERY_COMPLETE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_ANQP_QUERY_COMPLETE_PARAMETERS_REVISION_1 = 24;

const int NWF_WFD_DEVICE_OID = 5;

const int NWF_WFD_ROLE_OID = 6;

const int OID_DOT11_WFD_DEVICE_CAPABILITY = 235208961;

const int DOT11_WFD_DEVICE_CAPABILITY_CONFIG_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_DEVICE_CAPABILITY_CONFIG_1 = 16;

const int OID_DOT11_WFD_GROUP_OWNER_CAPABILITY = 235208962;

const int DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_GROUP_CAPABILITY_CONFIG_1 = 16;

const int DOT11_WFD_GROUP_OWNER_CAPABILITY_CONFIG_REVISION_2 = 2;

const int DOT11_SIZEOF_WFD_GROUP_CAPABILITY_CONFIG_2 = 20;

const int OID_DOT11_WFD_DEVICE_INFO = 235208963;

const int DOT11_WFD_DEVICE_INFO_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_DEVICE_INFO_REVISION_1 = 56;

const int OID_DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST = 235208964;

const int DOT11_WFD_SECONDARY_DEVICE_TYPE_LIST_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_SECONDARY_DEVICE_TYPE_LIST_REVISION_1 = 12;

const int OID_DOT11_WFD_DISCOVER_REQUEST = 235208965;

const int DISCOVERY_FILTER_BITMASK_DEVICE = 1;

const int DISCOVERY_FILTER_BITMASK_GO = 2;

const int DISCOVERY_FILTER_BITMASK_ANY = 15;

const int DOT11_WFD_DISCOVER_REQUEST_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_DISCOVER_REQUEST_REVISION_1 = 36;

const int OID_DOT11_WFD_ENUM_DEVICE_LIST = 235208966;

const int DOT11_DEVICE_ENTRY_BYTE_ARRAY_REVISION_1 = 1;

const int OID_DOT11_WFD_LISTEN_STATE_DISCOVERABILITY = 235208967;

const int DOT11_WFD_DEVICE_NOT_DISCOVERABLE = 0;

const int DOT11_WFD_DEVICE_AUTO_AVAILABILITY = 16;

const int DOT11_WFD_DEVICE_HIGH_AVAILABILITY = 24;

const int OID_DOT11_WFD_ADDITIONAL_IE = 235208968;

const int DOT11_WFD_ADDITIONAL_IE_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_ADDITIONAL_IE_REVISION_1 = 28;

const int OID_DOT11_WFD_FLUSH_DEVICE_LIST = 235208969;

const int OID_DOT11_WFD_SEND_GO_NEGOTIATION_REQUEST = 235208970;

const int DOT11_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_GO_NEGOTIATION_REQUEST_PARAMETERS_REVISION_1 = 36;

const int OID_DOT11_WFD_SEND_GO_NEGOTIATION_RESPONSE = 235208971;

const int DOT11_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_GO_NEGOTIATION_RESPONSE_PARAMETERS_REVISION_1 = 96;

const int OID_DOT11_WFD_SEND_GO_NEGOTIATION_CONFIRMATION = 235208972;

const int DOT11_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_GO_NEGOTIATION_CONFIRMATION_PARAMETERS_REVISION_1 =
    88;

const int OID_DOT11_WFD_SEND_INVITATION_REQUEST = 235208973;

const int DOT11_SEND_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_INVITATION_REQUEST_PARAMETERS_REVISION_1 = 88;

const int OID_DOT11_WFD_SEND_INVITATION_RESPONSE = 235208974;

const int DOT11_SEND_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_INVITATION_RESPONSE_PARAMETERS_REVISION_1 = 56;

const int OID_DOT11_WFD_SEND_PROVISION_DISCOVERY_REQUEST = 235208975;

const int DOT11_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_PROVISION_DISCOVERY_REQUEST_PARAMETERS_REVISION_1 =
    76;

const int OID_DOT11_WFD_SEND_PROVISION_DISCOVERY_RESPONSE = 235208976;

const int DOT11_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_SEND_PROVISION_DISCOVERY_RESPONSE_PARAMETERS_REVISION_1 =
    40;

const int OID_DOT11_WFD_GET_DIALOG_TOKEN = 235208977;

const int OID_DOT11_WFD_STOP_DISCOVERY = 235208978;

const int OID_DOT11_WFD_ENABLE_HRDSSS_DEVICES = 235209235;

const int OID_DOT11_WFD_DEVICE_LISTEN_CHANNEL = 235208980;

const int DOT11_WFD_DEVICE_LISTEN_CHANNEL_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_DEVICE_LISTEN_CHANNEL_REVISION_1 = 6;

const int OID_DOT11_WFD_DESIRED_GROUP_ID = 235274497;

const int OID_DOT11_WFD_START_GO_REQUEST = 235274498;

const int OID_DOT11_WFD_GROUP_START_PARAMETERS = 235274499;

const int DOT11_WFD_GROUP_START_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_GROUP_START_PARAMETERS_REVISION_1 = 10;

const int OID_DOT11_WFD_CONNECT_TO_GROUP_REQUEST = 235274500;

const int OID_DOT11_WFD_DISCONNECT_FROM_GROUP_REQUEST = 235274501;

const int OID_DOT11_WFD_GROUP_JOIN_PARAMETERS = 235274502;

const int DOT11_WFD_GROUP_JOIN_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_WFD_GROUP_JOIN_PARAMETERS_REVISION_1 = 20;

const int NWF_POWER_SAVE_OID = 7;

const int OID_DOT11_POWER_MGMT_MODE_AUTO_ENABLED = 235340033;

const int DOT11_POWER_MGMT_AUTO_MODE_ENABLED_REVISION_1 = 1;

const int DOT11_SIZEOF_POWER_MGMT_AUTO_MODE_ENABLE_INFO_REVISION_1 = 6;

const int OID_DOT11_POWER_MGMT_MODE_STATUS = 235340034;

const int DOT11_POWER_MGMT_MODE_STATUS_INFO_REVISION_1 = 1;

const int DOT11_SIZEOF_POWER_MGMT_MODE_STATUS_INFO_REVISION_1 = 16;

const int OID_DOT11_OFFLOAD_NETWORK_LIST = 235340035;

const int DOT11_MAX_CHANNEL_HINTS = 4;

const int DOT11_INVALID_CHANNEL_NUMBER = 0;

const int DOT11_NLO_FLAG_STOP_NLO_INDICATION = 1;

const int DOT11_NLO_FLAG_SCAN_ON_AOAC_PLATFORM = 2;

const int DOT11_NLO_FLAG_SCAN_AT_SYSTEM_RESUME = 4;

const int DOT11_OFFLOAD_NETWORK_LIST_REVISION_1 = 1;

const int DOT11_MIN_SIZEOF_OFFLOAD_NETWORK_LIST_INFO_REVISION_1 = 24;

const int DOT11_OFFLOAD_NETWORK_STATUS_PARAMETERS_REVISION_1 = 1;

const int DOT11_SIZEOF_OFFLOAD_NETWORK_STATUS_PARAMETERS_REVISION_1 = 8;

const int NWF_MANUFACTURING_OID = 8;

const int OID_DOT11_MANUFACTURING_TEST = 235405825;

const int DOT11_MANUFACTURING_TEST_REVISION_1 = 1;

const int DOT11_MANUFACTURING_CALLBACK_REVISION_1 = 1;

const int OID_DOT11_SET_FT_REASSOCIATION_PARAMETERS = 234946920;

const int OID_DOT11_SET_SAE_AUTH_PARAMS = 234946930;

const int OID_DOT11_SET_NWF_PMKID_LIST = 234946933;

const int fNDIS_GUID_TO_OID = 1;

const int fNDIS_GUID_TO_STATUS = 2;

const int fNDIS_GUID_ANSI_STRING = 4;

const int fNDIS_GUID_UNICODE_STRING = 8;

const int fNDIS_GUID_ARRAY = 16;

const int fNDIS_GUID_ALLOW_READ = 32;

const int fNDIS_GUID_ALLOW_WRITE = 64;

const int fNDIS_GUID_METHOD = 128;

const int fNDIS_GUID_NDIS_RESERVED = 256;

const int fNDIS_GUID_SUPPORT_COMMON_HEADER = 512;

const int NDIS_PACKET_TYPE_DIRECTED = 1;

const int NDIS_PACKET_TYPE_MULTICAST = 2;

const int NDIS_PACKET_TYPE_ALL_MULTICAST = 4;

const int NDIS_PACKET_TYPE_BROADCAST = 8;

const int NDIS_PACKET_TYPE_SOURCE_ROUTING = 16;

const int NDIS_PACKET_TYPE_PROMISCUOUS = 32;

const int NDIS_PACKET_TYPE_SMT = 64;

const int NDIS_PACKET_TYPE_ALL_LOCAL = 128;

const int NDIS_PACKET_TYPE_GROUP = 4096;

const int NDIS_PACKET_TYPE_ALL_FUNCTIONAL = 8192;

const int NDIS_PACKET_TYPE_FUNCTIONAL = 16384;

const int NDIS_PACKET_TYPE_MAC_FRAME = 32768;

const int NDIS_PACKET_TYPE_NO_LOCAL = 65536;

const int NDIS_RING_SIGNAL_LOSS = 32768;

const int NDIS_RING_HARD_ERROR = 16384;

const int NDIS_RING_SOFT_ERROR = 8192;

const int NDIS_RING_TRANSMIT_BEACON = 4096;

const int NDIS_RING_LOBE_WIRE_FAULT = 2048;

const int NDIS_RING_AUTO_REMOVAL_ERROR = 1024;

const int NDIS_RING_REMOVE_RECEIVED = 512;

const int NDIS_RING_COUNTER_OVERFLOW = 256;

const int NDIS_RING_SINGLE_STATION = 128;

const int NDIS_RING_RING_RECOVERY = 64;

const int NDIS_PROT_OPTION_ESTIMATED_LENGTH = 1;

const int NDIS_PROT_OPTION_NO_LOOPBACK = 2;

const int NDIS_PROT_OPTION_NO_RSVD_ON_RCVPKT = 4;

const int NDIS_PROT_OPTION_SEND_RESTRICTED = 8;

const int NDIS_MAC_OPTION_COPY_LOOKAHEAD_DATA = 1;

const int NDIS_MAC_OPTION_RECEIVE_SERIALIZED = 2;

const int NDIS_MAC_OPTION_TRANSFERS_NOT_PEND = 4;

const int NDIS_MAC_OPTION_NO_LOOPBACK = 8;

const int NDIS_MAC_OPTION_FULL_DUPLEX = 16;

const int NDIS_MAC_OPTION_EOTX_INDICATION = 32;

const int NDIS_MAC_OPTION_8021P_PRIORITY = 64;

const int NDIS_MAC_OPTION_SUPPORTS_MAC_ADDRESS_OVERWRITE = 128;

const int NDIS_MAC_OPTION_RECEIVE_AT_DPC = 256;

const int NDIS_MAC_OPTION_8021Q_VLAN = 512;

const int NDIS_MAC_OPTION_RESERVED = 2147483648;

const int NDIS_MEDIA_CAP_TRANSMIT = 1;

const int NDIS_MEDIA_CAP_RECEIVE = 2;

const int NDIS_CO_MAC_OPTION_DYNAMIC_LINK_SPEED = 1;

const int NDIS_IF_MAX_STRING_SIZE = 256;

const int NDIS_MAX_PHYS_ADDRESS_LENGTH = 32;

const int NDIS_LINK_STATE_XMIT_LINK_SPEED_AUTO_NEGOTIATED = 1;

const int NDIS_LINK_STATE_RCV_LINK_SPEED_AUTO_NEGOTIATED = 2;

const int NDIS_LINK_STATE_DUPLEX_AUTO_NEGOTIATED = 4;

const int NDIS_LINK_STATE_PAUSE_FUNCTIONS_AUTO_NEGOTIATED = 8;

const int NDIS_LINK_STATE_REVISION_1 = 1;

const int NDIS_SIZEOF_LINK_STATE_REVISION_1 = 40;

const int NDIS_LINK_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_LINK_PARAMETERS_REVISION_1 = 32;

const int NDIS_OPER_STATE_REVISION_1 = 1;

const int NDIS_SIZEOF_OPER_STATE_REVISION_1 = 12;

const int MAXIMUM_IP_OPER_STATUS_ADDRESS_FAMILIES_SUPPORTED = 32;

const int NDIS_IP_OPER_STATUS_INFO_REVISION_1 = 1;

const int NDIS_SIZEOF_IP_OPER_STATUS_INFO_REVISION_1 = 396;

const int NDIS_IP_OPER_STATE_REVISION_1 = 1;

const int NDIS_SIZEOF_IP_OPER_STATE_REVISION_1 = 20;

const int NDIS_OFFLOAD_PARAMETERS_NO_CHANGE = 0;

const int NDIS_OFFLOAD_PARAMETERS_TX_RX_DISABLED = 1;

const int NDIS_OFFLOAD_PARAMETERS_TX_ENABLED_RX_DISABLED = 2;

const int NDIS_OFFLOAD_PARAMETERS_RX_ENABLED_TX_DISABLED = 3;

const int NDIS_OFFLOAD_PARAMETERS_TX_RX_ENABLED = 4;

const int NDIS_OFFLOAD_PARAMETERS_LSOV1_DISABLED = 1;

const int NDIS_OFFLOAD_PARAMETERS_LSOV1_ENABLED = 2;

const int NDIS_OFFLOAD_PARAMETERS_IPSECV1_DISABLED = 1;

const int NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_ENABLED = 2;

const int NDIS_OFFLOAD_PARAMETERS_IPSECV1_ESP_ENABLED = 3;

const int NDIS_OFFLOAD_PARAMETERS_IPSECV1_AH_AND_ESP_ENABLED = 4;

const int NDIS_OFFLOAD_PARAMETERS_LSOV2_DISABLED = 1;

const int NDIS_OFFLOAD_PARAMETERS_LSOV2_ENABLED = 2;

const int NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_DISABLED = 1;

const int NDIS_OFFLOAD_PARAMETERS_CONNECTION_OFFLOAD_ENABLED = 2;

const int NDIS_OFFLOAD_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_OFFLOAD_PARAMETERS_REVISION_1 = 20;

const int NDIS_OFFLOAD_NOT_SUPPORTED = 0;

const int NDIS_OFFLOAD_SUPPORTED = 1;

const int NDIS_OFFLOAD_SET_NO_CHANGE = 0;

const int NDIS_OFFLOAD_SET_ON = 1;

const int NDIS_OFFLOAD_SET_OFF = 2;

const int NDIS_ENCAPSULATION_NOT_SUPPORTED = 0;

const int NDIS_ENCAPSULATION_NULL = 1;

const int NDIS_ENCAPSULATION_IEEE_802_3 = 2;

const int NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q = 4;

const int NDIS_ENCAPSULATION_IEEE_802_3_P_AND_Q_IN_OOB = 8;

const int NDIS_ENCAPSULATION_IEEE_LLC_SNAP_ROUTED = 16;

const int NDIS_OFFLOAD_FLAGS_GROUP_CHECKSUM_CAPABILITIES = 1;

const int NDIS_OFFLOAD_REVISION_1 = 1;

const int NDIS_SIZEOF_NDIS_OFFLOAD_REVISION_1 = 112;

const int NDIS_SIZEOF_NDIS_WMI_OFFLOAD_REVISION_1 = 224;

const int NDIS_TCP_CONNECTION_OFFLOAD_REVISION_1 = 1;

const int NDIS_SIZEOF_TCP_CONNECTION_OFFLOAD_REVISION_1 = 20;

const int NDIS_SIZEOF_WMI_TCP_CONNECTION_OFFLOAD_REVISION_1 = 32;

const int NDIS_DEFAULT_PORT_NUMBER = 0;

const int NDIS_MAXIMUM_PORTS = 16777216;

const int NDIS_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_PORT_AUTHENTICATION_PARAMETERS_REVISION_1 = 20;

const int NDIS_WMI_DEFAULT_METHOD_ID = 1;

const int NDIS_WMI_OBJECT_TYPE_SET = 1;

const int NDIS_WMI_OBJECT_TYPE_METHOD = 2;

const int NDIS_WMI_OBJECT_TYPE_EVENT = 3;

const int NDIS_WMI_OBJECT_TYPE_ENUM_ADAPTER = 4;

const int NDIS_WMI_OBJECT_TYPE_OUTPUT_INFO = 5;

const int NDIS_WMI_METHOD_HEADER_REVISION_1 = 1;

const int NDIS_SIZEOF_WMI_METHOD_HEADER_REVISION_1 = 32;

const int NDIS_WMI_SET_HEADER_REVISION_1 = 1;

const int NDIS_SIZEOF_WMI_SET_HEADER_REVISION_1 = 32;

const int NDIS_WMI_EVENT_HEADER_REVISION_1 = 1;

const int NDIS_SIZEOF_WMI_EVENT_HEADER_REVISION_1 = 40;

const int NDIS_WMI_ENUM_ADAPTER_REVISION_1 = 1;

const int NDIS_SIZEOF_WMI_ENUM_ADAPTER_REVISION_1 = 19;

const int NDIS_DEVICE_TYPE_ENDPOINT = 1;

const int NDIS_WMI_OUTPUT_INFO_REVISION_1 = 1;

const int NDIS_SIZEOF_WMI_OUTPUT_INFO_REVISION_1 = 16;

const int NDIS_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = 1;

const int NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV4 = 256;

const int NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6 = 512;

const int NDIS_RSS_CAPS_HASH_TYPE_TCP_IPV6_EX = 1024;

const int NDIS_RSS_CAPS_MESSAGE_SIGNALED_INTERRUPTS = 16777216;

const int NDIS_RSS_CAPS_CLASSIFICATION_AT_ISR = 33554432;

const int NDIS_RSS_CAPS_CLASSIFICATION_AT_DPC = 67108864;

const int NDIS_SIZEOF_RECEIVE_SCALE_CAPABILITIES_REVISION_1 = 16;

const int NdisHashFunctionToeplitz = 1;

const int NdisHashFunctionReserved1 = 2;

const int NdisHashFunctionReserved2 = 4;

const int NdisHashFunctionReserved3 = 8;

const int NDIS_HASH_FUNCTION_MASK = 255;

const int NDIS_HASH_TYPE_MASK = 16776960;

const int NDIS_HASH_IPV4 = 256;

const int NDIS_HASH_TCP_IPV4 = 512;

const int NDIS_HASH_IPV6 = 1024;

const int NDIS_HASH_IPV6_EX = 2048;

const int NDIS_HASH_TCP_IPV6 = 4096;

const int NDIS_HASH_TCP_IPV6_EX = 8192;

const int NDIS_RSS_PARAM_FLAG_BASE_CPU_UNCHANGED = 1;

const int NDIS_RSS_PARAM_FLAG_HASH_INFO_UNCHANGED = 2;

const int NDIS_RSS_PARAM_FLAG_ITABLE_UNCHANGED = 4;

const int NDIS_RSS_PARAM_FLAG_HASH_KEY_UNCHANGED = 8;

const int NDIS_RSS_PARAM_FLAG_DISABLE_RSS = 16;

const int NDIS_RSS_INDIRECTION_TABLE_SIZE_REVISION_1 = 128;

const int NDIS_RSS_HASH_SECRET_KEY_SIZE_REVISION_1 = 40;

const int NDIS_RECEIVE_SCALE_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_RECEIVE_SCALE_PARAMETERS_REVISION_1 = 28;

const int NDIS_RSS_INDIRECTION_TABLE_MAX_SIZE_REVISION_1 = 128;

const int NDIS_RSS_HASH_SECRET_KEY_MAX_SIZE_REVISION_1 = 40;

const int NDIS_RECEIVE_HASH_FLAG_ENABLE_HASH = 1;

const int NDIS_RECEIVE_HASH_FLAG_HASH_INFO_UNCHANGED = 2;

const int NDIS_RECEIVE_HASH_FLAG_HASH_KEY_UNCHANGED = 4;

const int NDIS_RECEIVE_HASH_PARAMETERS_REVISION_1 = 1;

const int NDIS_SIZEOF_RECEIVE_HASH_PARAMETERS_REVISION_1 = 20;

const int NDIS_PORT_STATE_REVISION_1 = 1;

const int NDIS_SIZEOF_PORT_STATE_REVISION_1 = 48;

const int NDIS_PORT_CHAR_USE_DEFAULT_AUTH_SETTINGS = 1;

const int NDIS_PORT_CHARACTERISTICS_REVISION_1 = 1;

const int NDIS_SIZEOF_PORT_CHARACTERISTICS_REVISION_1 = 60;

const int NDIS_PORT_ARRAY_REVISION_1 = 1;

const int NDIS_SIZEOF_PORT_ARRAY_REVISION_1 = 80;

const int NDIS_TIMESTAMP_CAPABILITIES_REVISION_1 = 1;

const int NDIS_SIZEOF_TIMESTAMP_CAPABILITIES_REVISION_1 = 54;

const int OID_TIMESTAMP_CAPABILITY = 10485761;

const int OID_TIMESTAMP_CURRENT_CONFIG = 10485762;

const int NDIS_HARDWARE_CROSSTIMESTAMP_REVISION_1 = 1;

const int NDIS_SIZEOF_HARDWARE_CROSSTIMESTAMP_REVISION_1 = 32;

const int OID_TIMESTAMP_GET_CROSSTIMESTAMP = 10485763;

const int MIB_INVALID_TEREDO_PORT_NUMBER = 0;

const int IF_NAMESIZE = 256;

const int DNS_SETTINGS_VERSION1 = 1;

const int DNS_SETTINGS_VERSION2 = 2;

const int DNS_INTERFACE_SETTINGS_VERSION1 = 1;

const int DNS_INTERFACE_SETTINGS_VERSION2 = 2;

const int DNS_INTERFACE_SETTINGS_VERSION3 = 3;

const int DNS_INTERFACE_SETTINGS_VERSION4 = 4;

const int DNS_SETTING_IPV6 = 1;

const int DNS_SETTING_NAMESERVER = 2;

const int DNS_SETTING_SEARCHLIST = 4;

const int DNS_SETTING_REGISTRATION_ENABLED = 8;

const int DNS_SETTING_REGISTER_ADAPTER_NAME = 16;

const int DNS_SETTING_DOMAIN = 32;

const int DNS_SETTING_HOSTNAME = 64;

const int DNS_SETTINGS_ENABLE_LLMNR = 128;

const int DNS_SETTINGS_QUERY_ADAPTER_NAME = 256;

const int DNS_SETTING_PROFILE_NAMESERVER = 512;

const int DNS_SETTING_DISABLE_UNCONSTRAINED_QUERIES = 1024;

const int DNS_SETTING_SUPPLEMENTAL_SEARCH_LIST = 2048;

const int DNS_SETTING_DOH = 4096;

const int DNS_SETTING_DOH_PROFILE = 8192;

const int DNS_SETTING_ENCRYPTED_DNS_ADAPTER_FLAGS = 16384;

const int DNS_SETTING_DDR = 32768;

const int DNS_ENABLE_DOH = 1;

const int DNS_DOH_POLICY_NOT_CONFIGURED = 4;

const int DNS_DOH_POLICY_DISABLE = 8;

const int DNS_DOH_POLICY_AUTO = 16;

const int DNS_DOH_POLICY_REQUIRED = 32;

const int DNS_ENABLE_DDR = 64;

const int DNS_SERVER_PROPERTY_VERSION1 = 1;

const int DNS_DOH_SERVER_SETTINGS_ENABLE_AUTO = 1;

const int DNS_DOH_SERVER_SETTINGS_ENABLE = 2;

const int DNS_DOH_SERVER_SETTINGS_FALLBACK_TO_UDP = 4;

const int DNS_DOH_AUTO_UPGRADE_SERVER = 8;

const int DNS_DOH_SERVER_SETTINGS_ENABLE_DDR = 16;

const int DNS_DDR_ADAPTER_ENABLE_DOH = 1;

const int DNS_DDR_ADAPTER_ENABLE_UDP_FALLBACK = 2;

const int UA_STATUSCODE_INFOTYPE_DATAVALUE = 1024;

const int UA_STATUSCODE_INFOBITS_OVERFLOW = 128;

const int UA_STATUSCODE_GOOD = 0;

const int UA_STATUSCODE_UNCERTAIN = 1073741824;

const int UA_STATUSCODE_BAD = 2147483648;

const int UA_STATUSCODE_BADUNEXPECTEDERROR = 2147549184;

const int UA_STATUSCODE_BADINTERNALERROR = 2147614720;

const int UA_STATUSCODE_BADOUTOFMEMORY = 2147680256;

const int UA_STATUSCODE_BADRESOURCEUNAVAILABLE = 2147745792;

const int UA_STATUSCODE_BADCOMMUNICATIONERROR = 2147811328;

const int UA_STATUSCODE_BADENCODINGERROR = 2147876864;

const int UA_STATUSCODE_BADDECODINGERROR = 2147942400;

const int UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED = 2148007936;

const int UA_STATUSCODE_BADREQUESTTOOLARGE = 2159542272;

const int UA_STATUSCODE_BADRESPONSETOOLARGE = 2159607808;

const int UA_STATUSCODE_BADUNKNOWNRESPONSE = 2148073472;

const int UA_STATUSCODE_BADTIMEOUT = 2148139008;

const int UA_STATUSCODE_BADSERVICEUNSUPPORTED = 2148204544;

const int UA_STATUSCODE_BADSHUTDOWN = 2148270080;

const int UA_STATUSCODE_BADSERVERNOTCONNECTED = 2148335616;

const int UA_STATUSCODE_BADSERVERHALTED = 2148401152;

const int UA_STATUSCODE_BADNOTHINGTODO = 2148466688;

const int UA_STATUSCODE_BADTOOMANYOPERATIONS = 2148532224;

const int UA_STATUSCODE_BADTOOMANYMONITOREDITEMS = 2161836032;

const int UA_STATUSCODE_BADDATATYPEIDUNKNOWN = 2148597760;

const int UA_STATUSCODE_BADCERTIFICATEINVALID = 2148663296;

const int UA_STATUSCODE_BADSECURITYCHECKSFAILED = 2148728832;

const int UA_STATUSCODE_BADCERTIFICATEPOLICYCHECKFAILED = 2165571584;

const int UA_STATUSCODE_BADCERTIFICATETIMEINVALID = 2148794368;

const int UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID = 2148859904;

const int UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID = 2148925440;

const int UA_STATUSCODE_BADCERTIFICATEURIINVALID = 2148990976;

const int UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED = 2149056512;

const int UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED = 2149122048;

const int UA_STATUSCODE_BADCERTIFICATEUNTRUSTED = 2149187584;

const int UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN = 2149253120;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN = 2149318656;

const int UA_STATUSCODE_BADCERTIFICATEREVOKED = 2149384192;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED = 2149449728;

const int UA_STATUSCODE_BADCERTIFICATECHAININCOMPLETE = 2165112832;

const int UA_STATUSCODE_BADUSERACCESSDENIED = 2149515264;

const int UA_STATUSCODE_BADIDENTITYTOKENINVALID = 2149580800;

const int UA_STATUSCODE_BADIDENTITYTOKENREJECTED = 2149646336;

const int UA_STATUSCODE_BADSECURECHANNELIDINVALID = 2149711872;

const int UA_STATUSCODE_BADINVALIDTIMESTAMP = 2149777408;

const int UA_STATUSCODE_BADNONCEINVALID = 2149842944;

const int UA_STATUSCODE_BADSESSIONIDINVALID = 2149908480;

const int UA_STATUSCODE_BADSESSIONCLOSED = 2149974016;

const int UA_STATUSCODE_BADSESSIONNOTACTIVATED = 2150039552;

const int UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID = 2150105088;

const int UA_STATUSCODE_BADREQUESTHEADERINVALID = 2150236160;

const int UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID = 2150301696;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT = 2150367232;

const int UA_STATUSCODE_BADTOOMANYARGUMENTS = 2162491392;

const int UA_STATUSCODE_BADLICENSEEXPIRED = 2165178368;

const int UA_STATUSCODE_BADLICENSELIMITSEXCEEDED = 2165243904;

const int UA_STATUSCODE_BADLICENSENOTAVAILABLE = 2165309440;

const int UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED = 2949120;

const int UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY = 3014656;

const int UA_STATUSCODE_GOODOVERLOAD = 3080192;

const int UA_STATUSCODE_GOODCLAMPED = 3145728;

const int UA_STATUSCODE_BADNOCOMMUNICATION = 2150694912;

const int UA_STATUSCODE_BADWAITINGFORINITIALDATA = 2150760448;

const int UA_STATUSCODE_BADNODEIDINVALID = 2150825984;

const int UA_STATUSCODE_BADNODEIDUNKNOWN = 2150891520;

const int UA_STATUSCODE_BADATTRIBUTEIDINVALID = 2150957056;

const int UA_STATUSCODE_BADINDEXRANGEINVALID = 2151022592;

const int UA_STATUSCODE_BADINDEXRANGENODATA = 2151088128;

const int UA_STATUSCODE_BADDATAENCODINGINVALID = 2151153664;

const int UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED = 2151219200;

const int UA_STATUSCODE_BADNOTREADABLE = 2151284736;

const int UA_STATUSCODE_BADNOTWRITABLE = 2151350272;

const int UA_STATUSCODE_BADOUTOFRANGE = 2151415808;

const int UA_STATUSCODE_BADNOTSUPPORTED = 2151481344;

const int UA_STATUSCODE_BADNOTFOUND = 2151546880;

const int UA_STATUSCODE_BADOBJECTDELETED = 2151612416;

const int UA_STATUSCODE_BADNOTIMPLEMENTED = 2151677952;

const int UA_STATUSCODE_BADMONITORINGMODEINVALID = 2151743488;

const int UA_STATUSCODE_BADMONITOREDITEMIDINVALID = 2151809024;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID = 2151874560;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED = 2151940096;

const int UA_STATUSCODE_BADFILTERNOTALLOWED = 2152005632;

const int UA_STATUSCODE_BADSTRUCTUREMISSING = 2152071168;

const int UA_STATUSCODE_BADEVENTFILTERINVALID = 2152136704;

const int UA_STATUSCODE_BADCONTENTFILTERINVALID = 2152202240;

const int UA_STATUSCODE_BADFILTEROPERATORINVALID = 2160132096;

const int UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED = 2160197632;

const int UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH = 2160263168;

const int UA_STATUSCODE_BADFILTEROPERANDINVALID = 2152267776;

const int UA_STATUSCODE_BADFILTERELEMENTINVALID = 2160328704;

const int UA_STATUSCODE_BADFILTERLITERALINVALID = 2160394240;

const int UA_STATUSCODE_BADCONTINUATIONPOINTINVALID = 2152333312;

const int UA_STATUSCODE_BADNOCONTINUATIONPOINTS = 2152398848;

const int UA_STATUSCODE_BADREFERENCETYPEIDINVALID = 2152464384;

const int UA_STATUSCODE_BADBROWSEDIRECTIONINVALID = 2152529920;

const int UA_STATUSCODE_BADNODENOTINVIEW = 2152595456;

const int UA_STATUSCODE_BADNUMERICOVERFLOW = 2165440512;

const int UA_STATUSCODE_BADSERVERURIINVALID = 2152660992;

const int UA_STATUSCODE_BADSERVERNAMEMISSING = 2152726528;

const int UA_STATUSCODE_BADDISCOVERYURLMISSING = 2152792064;

const int UA_STATUSCODE_BADSEMPAHOREFILEMISSING = 2152857600;

const int UA_STATUSCODE_BADREQUESTTYPEINVALID = 2152923136;

const int UA_STATUSCODE_BADSECURITYMODEREJECTED = 2152988672;

const int UA_STATUSCODE_BADSECURITYPOLICYREJECTED = 2153054208;

const int UA_STATUSCODE_BADTOOMANYSESSIONS = 2153119744;

const int UA_STATUSCODE_BADUSERSIGNATUREINVALID = 2153185280;

const int UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID = 2153250816;

const int UA_STATUSCODE_BADNOVALIDCERTIFICATES = 2153316352;

const int UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED = 2160459776;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST = 2153381888;

const int UA_STATUSCODE_BADPARENTNODEIDINVALID = 2153447424;

const int UA_STATUSCODE_BADREFERENCENOTALLOWED = 2153512960;

const int UA_STATUSCODE_BADNODEIDREJECTED = 2153578496;

const int UA_STATUSCODE_BADNODEIDEXISTS = 2153644032;

const int UA_STATUSCODE_BADNODECLASSINVALID = 2153709568;

const int UA_STATUSCODE_BADBROWSENAMEINVALID = 2153775104;

const int UA_STATUSCODE_BADBROWSENAMEDUPLICATED = 2153840640;

const int UA_STATUSCODE_BADNODEATTRIBUTESINVALID = 2153906176;

const int UA_STATUSCODE_BADTYPEDEFINITIONINVALID = 2153971712;

const int UA_STATUSCODE_BADSOURCENODEIDINVALID = 2154037248;

const int UA_STATUSCODE_BADTARGETNODEIDINVALID = 2154102784;

const int UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED = 2154168320;

const int UA_STATUSCODE_BADINVALIDSELFREFERENCE = 2154233856;

const int UA_STATUSCODE_BADREFERENCELOCALONLY = 2154299392;

const int UA_STATUSCODE_BADNODELETERIGHTS = 2154364928;

const int UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED = 1086062592;

const int UA_STATUSCODE_BADSERVERINDEXINVALID = 2154430464;

const int UA_STATUSCODE_BADVIEWIDUNKNOWN = 2154496000;

const int UA_STATUSCODE_BADVIEWTIMESTAMPINVALID = 2160656384;

const int UA_STATUSCODE_BADVIEWPARAMETERMISMATCH = 2160721920;

const int UA_STATUSCODE_BADVIEWVERSIONINVALID = 2160787456;

const int UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE = 1086324736;

const int UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE = 12189696;

const int UA_STATUSCODE_BADNOTTYPEDEFINITION = 2160590848;

const int UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER = 1080819712;

const int UA_STATUSCODE_BADTOOMANYMATCHES = 2154627072;

const int UA_STATUSCODE_BADQUERYTOOCOMPLEX = 2154692608;

const int UA_STATUSCODE_BADNOMATCH = 2154758144;

const int UA_STATUSCODE_BADMAXAGEINVALID = 2154823680;

const int UA_STATUSCODE_BADSECURITYMODEINSUFFICIENT = 2162556928;

const int UA_STATUSCODE_BADHISTORYOPERATIONINVALID = 2154889216;

const int UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED = 2154954752;

const int UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT = 2159869952;

const int UA_STATUSCODE_BADWRITENOTSUPPORTED = 2155020288;

const int UA_STATUSCODE_BADTYPEMISMATCH = 2155085824;

const int UA_STATUSCODE_BADMETHODINVALID = 2155151360;

const int UA_STATUSCODE_BADARGUMENTSMISSING = 2155216896;

const int UA_STATUSCODE_BADNOTEXECUTABLE = 2165374976;

const int UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS = 2155282432;

const int UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS = 2155347968;

const int UA_STATUSCODE_BADNOSUBSCRIPTION = 2155413504;

const int UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN = 2155479040;

const int UA_STATUSCODE_GOODRETRANSMISSIONQUEUENOTSUPPORTED = 14614528;

const int UA_STATUSCODE_BADMESSAGENOTAVAILABLE = 2155544576;

const int UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE = 2155610112;

const int UA_STATUSCODE_BADSTATENOTACTIVE = 2160001024;

const int UA_STATUSCODE_BADALREADYEXISTS = 2165637120;

const int UA_STATUSCODE_BADTCPSERVERTOOBUSY = 2155675648;

const int UA_STATUSCODE_BADTCPMESSAGETYPEINVALID = 2155741184;

const int UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN = 2155806720;

const int UA_STATUSCODE_BADTCPMESSAGETOOLARGE = 2155872256;

const int UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES = 2155937792;

const int UA_STATUSCODE_BADTCPINTERNALERROR = 2156003328;

const int UA_STATUSCODE_BADTCPENDPOINTURLINVALID = 2156068864;

const int UA_STATUSCODE_BADREQUESTINTERRUPTED = 2156134400;

const int UA_STATUSCODE_BADREQUESTTIMEOUT = 2156199936;

const int UA_STATUSCODE_BADSECURECHANNELCLOSED = 2156265472;

const int UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN = 2156331008;

const int UA_STATUSCODE_BADSEQUENCENUMBERINVALID = 2156396544;

const int UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED = 2159935488;

const int UA_STATUSCODE_BADCONFIGURATIONERROR = 2156462080;

const int UA_STATUSCODE_BADNOTCONNECTED = 2156527616;

const int UA_STATUSCODE_BADDEVICEFAILURE = 2156593152;

const int UA_STATUSCODE_BADSENSORFAILURE = 2156658688;

const int UA_STATUSCODE_BADOUTOFSERVICE = 2156724224;

const int UA_STATUSCODE_BADDEADBANDFILTERINVALID = 2156789760;

const int UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE = 1083113472;

const int UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE = 1083179008;

const int UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE = 1083244544;

const int UA_STATUSCODE_UNCERTAININITIALVALUE = 1083310080;

const int UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE = 1083375616;

const int UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED = 1083441152;

const int UA_STATUSCODE_UNCERTAINSUBNORMAL = 1083506688;

const int UA_STATUSCODE_GOODLOCALOVERRIDE = 9830400;

const int UA_STATUSCODE_BADREFRESHINPROGRESS = 2157379584;

const int UA_STATUSCODE_BADCONDITIONALREADYDISABLED = 2157445120;

const int UA_STATUSCODE_BADCONDITIONALREADYENABLED = 2160852992;

const int UA_STATUSCODE_BADCONDITIONDISABLED = 2157510656;

const int UA_STATUSCODE_BADEVENTIDUNKNOWN = 2157576192;

const int UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE = 2159738880;

const int UA_STATUSCODE_BADDIALOGNOTACTIVE = 2160918528;

const int UA_STATUSCODE_BADDIALOGRESPONSEINVALID = 2160984064;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED = 2161049600;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED = 2161115136;

const int UA_STATUSCODE_BADCONDITIONALREADYSHELVED = 2161180672;

const int UA_STATUSCODE_BADCONDITIONNOTSHELVED = 2161246208;

const int UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE = 2161311744;

const int UA_STATUSCODE_BADNODATA = 2157641728;

const int UA_STATUSCODE_BADBOUNDNOTFOUND = 2161573888;

const int UA_STATUSCODE_BADBOUNDNOTSUPPORTED = 2161639424;

const int UA_STATUSCODE_BADDATALOST = 2157772800;

const int UA_STATUSCODE_BADDATAUNAVAILABLE = 2157838336;

const int UA_STATUSCODE_BADENTRYEXISTS = 2157903872;

const int UA_STATUSCODE_BADNOENTRYEXISTS = 2157969408;

const int UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED = 2158034944;

const int UA_STATUSCODE_GOODENTRYINSERTED = 10616832;

const int UA_STATUSCODE_GOODENTRYREPLACED = 10682368;

const int UA_STATUSCODE_UNCERTAINDATASUBNORMAL = 1084489728;

const int UA_STATUSCODE_GOODNODATA = 10813440;

const int UA_STATUSCODE_GOODMOREDATA = 10878976;

const int UA_STATUSCODE_BADAGGREGATELISTMISMATCH = 2161377280;

const int UA_STATUSCODE_BADAGGREGATENOTSUPPORTED = 2161442816;

const int UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS = 2161508352;

const int UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED = 2161770496;

const int UA_STATUSCODE_GOODDATAIGNORED = 14221312;

const int UA_STATUSCODE_BADREQUESTNOTALLOWED = 2162425856;

const int UA_STATUSCODE_BADREQUESTNOTCOMPLETE = 2165506048;

const int UA_STATUSCODE_BADTICKETREQUIRED = 2166292480;

const int UA_STATUSCODE_BADTICKETINVALID = 2166358016;

const int UA_STATUSCODE_GOODEDITED = 14417920;

const int UA_STATUSCODE_GOODPOSTACTIONFAILED = 14483456;

const int UA_STATUSCODE_UNCERTAINDOMINANTVALUECHANGED = 1088290816;

const int UA_STATUSCODE_GOODDEPENDENTVALUECHANGED = 14680064;

const int UA_STATUSCODE_BADDOMINANTVALUECHANGED = 2162229248;

const int UA_STATUSCODE_UNCERTAINDEPENDENTVALUECHANGED = 1088552960;

const int UA_STATUSCODE_BADDEPENDENTVALUECHANGED = 2162360320;

const int UA_STATUSCODE_GOODEDITED_DEPENDENTVALUECHANGED = 18219008;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED = 18284544;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    18350080;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE = 2165899264;

const int UA_STATUSCODE_BADINITIALVALUE_OUTOFRANGE = 2165964800;

const int UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED = 2166030336;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED = 2166095872;

const int
    UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    2166161408;

const int
    UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    2166226944;

const int UA_STATUSCODE_GOODCOMMUNICATIONEVENT = 10944512;

const int UA_STATUSCODE_GOODSHUTDOWNEVENT = 11010048;

const int UA_STATUSCODE_GOODCALLAGAIN = 11075584;

const int UA_STATUSCODE_GOODNONCRITICALTIMEOUT = 11141120;

const int UA_STATUSCODE_BADINVALIDARGUMENT = 2158690304;

const int UA_STATUSCODE_BADCONNECTIONREJECTED = 2158755840;

const int UA_STATUSCODE_BADDISCONNECT = 2158821376;

const int UA_STATUSCODE_BADCONNECTIONCLOSED = 2158886912;

const int UA_STATUSCODE_BADINVALIDSTATE = 2158952448;

const int UA_STATUSCODE_BADENDOFSTREAM = 2159017984;

const int UA_STATUSCODE_BADNODATAAVAILABLE = 2159083520;

const int UA_STATUSCODE_BADWAITINGFORRESPONSE = 2159149056;

const int UA_STATUSCODE_BADOPERATIONABANDONED = 2159214592;

const int UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK = 2159280128;

const int UA_STATUSCODE_BADWOULDBLOCK = 2159345664;

const int UA_STATUSCODE_BADSYNTAXERROR = 2159411200;

const int UA_STATUSCODE_BADMAXCONNECTIONSREACHED = 2159476736;

const int UA_NS0ID_BOOLEAN = 1;

const int UA_NS0ID_SBYTE = 2;

const int UA_NS0ID_BYTE = 3;

const int UA_NS0ID_INT16 = 4;

const int UA_NS0ID_UINT16 = 5;

const int UA_NS0ID_INT32 = 6;

const int UA_NS0ID_UINT32 = 7;

const int UA_NS0ID_INT64 = 8;

const int UA_NS0ID_UINT64 = 9;

const int UA_NS0ID_FLOAT = 10;

const int UA_NS0ID_DOUBLE = 11;

const int UA_NS0ID_STRING = 12;

const int UA_NS0ID_DATETIME = 13;

const int UA_NS0ID_GUID = 14;

const int UA_NS0ID_BYTESTRING = 15;

const int UA_NS0ID_XMLELEMENT = 16;

const int UA_NS0ID_NODEID = 17;

const int UA_NS0ID_EXPANDEDNODEID = 18;

const int UA_NS0ID_STATUSCODE = 19;

const int UA_NS0ID_QUALIFIEDNAME = 20;

const int UA_NS0ID_LOCALIZEDTEXT = 21;

const int UA_NS0ID_STRUCTURE = 22;

const int UA_NS0ID_DATAVALUE = 23;

const int UA_NS0ID_BASEDATATYPE = 24;

const int UA_NS0ID_DIAGNOSTICINFO = 25;

const int UA_NS0ID_NUMBER = 26;

const int UA_NS0ID_INTEGER = 27;

const int UA_NS0ID_UINTEGER = 28;

const int UA_NS0ID_ENUMERATION = 29;

const int UA_NS0ID_IMAGE = 30;

const int UA_NS0ID_REFERENCES = 31;

const int UA_NS0ID_NONHIERARCHICALREFERENCES = 32;

const int UA_NS0ID_HIERARCHICALREFERENCES = 33;

const int UA_NS0ID_HASCHILD = 34;

const int UA_NS0ID_ORGANIZES = 35;

const int UA_NS0ID_HASEVENTSOURCE = 36;

const int UA_NS0ID_HASMODELLINGRULE = 37;

const int UA_NS0ID_HASENCODING = 38;

const int UA_NS0ID_HASDESCRIPTION = 39;

const int UA_NS0ID_HASTYPEDEFINITION = 40;

const int UA_NS0ID_GENERATESEVENT = 41;

const int UA_NS0ID_AGGREGATES = 44;

const int UA_NS0ID_HASSUBTYPE = 45;

const int UA_NS0ID_HASPROPERTY = 46;

const int UA_NS0ID_HASCOMPONENT = 47;

const int UA_NS0ID_HASNOTIFIER = 48;

const int UA_NS0ID_HASORDEREDCOMPONENT = 49;

const int UA_NS0ID_DECIMAL = 50;

const int UA_NS0ID_FROMSTATE = 51;

const int UA_NS0ID_TOSTATE = 52;

const int UA_NS0ID_HASCAUSE = 53;

const int UA_NS0ID_HASEFFECT = 54;

const int UA_NS0ID_HASHISTORICALCONFIGURATION = 56;

const int UA_NS0ID_BASEOBJECTTYPE = 58;

const int UA_NS0ID_FOLDERTYPE = 61;

const int UA_NS0ID_BASEVARIABLETYPE = 62;

const int UA_NS0ID_BASEDATAVARIABLETYPE = 63;

const int UA_NS0ID_PROPERTYTYPE = 68;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE = 69;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE = 72;

const int UA_NS0ID_DATATYPESYSTEMTYPE = 75;

const int UA_NS0ID_DATATYPEENCODINGTYPE = 76;

const int UA_NS0ID_MODELLINGRULETYPE = 77;

const int UA_NS0ID_MODELLINGRULE_MANDATORY = 78;

const int UA_NS0ID_MODELLINGRULE_OPTIONAL = 80;

const int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY = 83;

const int UA_NS0ID_ROOTFOLDER = 84;

const int UA_NS0ID_OBJECTSFOLDER = 85;

const int UA_NS0ID_TYPESFOLDER = 86;

const int UA_NS0ID_VIEWSFOLDER = 87;

const int UA_NS0ID_OBJECTTYPESFOLDER = 88;

const int UA_NS0ID_VARIABLETYPESFOLDER = 89;

const int UA_NS0ID_DATATYPESFOLDER = 90;

const int UA_NS0ID_REFERENCETYPESFOLDER = 91;

const int UA_NS0ID_XMLSCHEMA_TYPESYSTEM = 92;

const int UA_NS0ID_OPCBINARYSCHEMA_TYPESYSTEM = 93;

const int UA_NS0ID_PERMISSIONTYPE = 94;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE = 95;

const int UA_NS0ID_ROLEPERMISSIONTYPE = 96;

const int UA_NS0ID_DATATYPEDEFINITION = 97;

const int UA_NS0ID_STRUCTURETYPE = 98;

const int UA_NS0ID_STRUCTUREDEFINITION = 99;

const int UA_NS0ID_ENUMDEFINITION = 100;

const int UA_NS0ID_STRUCTUREFIELD = 101;

const int UA_NS0ID_ENUMFIELD = 102;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DATATYPEVERSION = 104;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DICTIONARYFRAGMENT = 105;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DATATYPEVERSION = 106;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_NAMESPACEURI = 107;

const int UA_NS0ID_MODELLINGRULETYPE_NAMINGRULE = 111;

const int UA_NS0ID_MODELLINGRULE_MANDATORY_NAMINGRULE = 112;

const int UA_NS0ID_MODELLINGRULE_OPTIONAL_NAMINGRULE = 113;

const int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY_NAMINGRULE = 114;

const int UA_NS0ID_HASSUBSTATEMACHINE = 117;

const int UA_NS0ID_NAMINGRULETYPE = 120;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTBINARY = 121;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTBINARY = 122;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTBINARY = 123;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTBINARY = 124;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 125;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTBINARY = 126;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTBINARY = 127;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTBINARY = 128;

const int UA_NS0ID_HASARGUMENTDESCRIPTION = 129;

const int UA_NS0ID_HASOPTIONALINPUTARGUMENTDESCRIPTION = 131;

const int UA_NS0ID_IDTYPE = 256;

const int UA_NS0ID_NODECLASS = 257;

const int UA_NS0ID_NODE = 258;

const int UA_NS0ID_NODE_ENCODING_DEFAULTXML = 259;

const int UA_NS0ID_NODE_ENCODING_DEFAULTBINARY = 260;

const int UA_NS0ID_OBJECTNODE = 261;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTXML = 262;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTBINARY = 263;

const int UA_NS0ID_OBJECTTYPENODE = 264;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTXML = 265;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTBINARY = 266;

const int UA_NS0ID_VARIABLENODE = 267;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTXML = 268;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTBINARY = 269;

const int UA_NS0ID_VARIABLETYPENODE = 270;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTXML = 271;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTBINARY = 272;

const int UA_NS0ID_REFERENCETYPENODE = 273;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTXML = 274;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTBINARY = 275;

const int UA_NS0ID_METHODNODE = 276;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTXML = 277;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTBINARY = 278;

const int UA_NS0ID_VIEWNODE = 279;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTXML = 280;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTBINARY = 281;

const int UA_NS0ID_DATATYPENODE = 282;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTXML = 283;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTBINARY = 284;

const int UA_NS0ID_REFERENCENODE = 285;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTXML = 286;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTBINARY = 287;

const int UA_NS0ID_INTEGERID = 288;

const int UA_NS0ID_COUNTER = 289;

const int UA_NS0ID_DURATION = 290;

const int UA_NS0ID_NUMERICRANGE = 291;

const int UA_NS0ID_UTCTIME = 294;

const int UA_NS0ID_LOCALEID = 295;

const int UA_NS0ID_ARGUMENT = 296;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTXML = 297;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTBINARY = 298;

const int UA_NS0ID_STATUSRESULT = 299;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTXML = 300;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTBINARY = 301;

const int UA_NS0ID_MESSAGESECURITYMODE = 302;

const int UA_NS0ID_USERTOKENTYPE = 303;

const int UA_NS0ID_USERTOKENPOLICY = 304;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTXML = 305;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTBINARY = 306;

const int UA_NS0ID_APPLICATIONTYPE = 307;

const int UA_NS0ID_APPLICATIONDESCRIPTION = 308;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTXML = 309;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTBINARY = 310;

const int UA_NS0ID_APPLICATIONINSTANCECERTIFICATE = 311;

const int UA_NS0ID_ENDPOINTDESCRIPTION = 312;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTXML = 313;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTBINARY = 314;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE = 315;

const int UA_NS0ID_USERIDENTITYTOKEN = 316;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTXML = 317;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 318;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN = 319;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTXML = 320;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 321;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN = 322;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTXML = 323;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 324;

const int UA_NS0ID_X509IDENTITYTOKEN = 325;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTXML = 326;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTBINARY = 327;

const int UA_NS0ID_ENDPOINTCONFIGURATION = 331;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTXML = 332;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTBINARY = 333;

const int UA_NS0ID_BUILDINFO = 338;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTXML = 339;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTBINARY = 340;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE = 344;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTXML = 345;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTBINARY = 346;

const int UA_NS0ID_ATTRIBUTEWRITEMASK = 347;

const int UA_NS0ID_NODEATTRIBUTESMASK = 348;

const int UA_NS0ID_NODEATTRIBUTES = 349;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTXML = 350;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTBINARY = 351;

const int UA_NS0ID_OBJECTATTRIBUTES = 352;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTXML = 353;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTBINARY = 354;

const int UA_NS0ID_VARIABLEATTRIBUTES = 355;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTXML = 356;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTBINARY = 357;

const int UA_NS0ID_METHODATTRIBUTES = 358;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTXML = 359;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTBINARY = 360;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES = 361;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTXML = 362;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 363;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES = 364;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTXML = 365;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 366;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES = 367;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTXML = 368;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 369;

const int UA_NS0ID_DATATYPEATTRIBUTES = 370;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTXML = 371;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 372;

const int UA_NS0ID_VIEWATTRIBUTES = 373;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTXML = 374;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTBINARY = 375;

const int UA_NS0ID_ADDNODESITEM = 376;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTXML = 377;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTBINARY = 378;

const int UA_NS0ID_ADDREFERENCESITEM = 379;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTXML = 380;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTBINARY = 381;

const int UA_NS0ID_DELETENODESITEM = 382;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTXML = 383;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTBINARY = 384;

const int UA_NS0ID_DELETEREFERENCESITEM = 385;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTXML = 386;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTBINARY = 387;

const int UA_NS0ID_SESSIONAUTHENTICATIONTOKEN = 388;

const int UA_NS0ID_REQUESTHEADER = 389;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTXML = 390;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTBINARY = 391;

const int UA_NS0ID_RESPONSEHEADER = 392;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTXML = 393;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTBINARY = 394;

const int UA_NS0ID_SERVICEFAULT = 395;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTXML = 396;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTBINARY = 397;

const int UA_NS0ID_FINDSERVERSREQUEST = 420;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTXML = 421;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTBINARY = 422;

const int UA_NS0ID_FINDSERVERSRESPONSE = 423;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTXML = 424;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTBINARY = 425;

const int UA_NS0ID_GETENDPOINTSREQUEST = 426;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTXML = 427;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTBINARY = 428;

const int UA_NS0ID_GETENDPOINTSRESPONSE = 429;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTXML = 430;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTBINARY = 431;

const int UA_NS0ID_REGISTEREDSERVER = 432;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTXML = 433;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTBINARY = 434;

const int UA_NS0ID_REGISTERSERVERREQUEST = 435;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTXML = 436;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTBINARY = 437;

const int UA_NS0ID_REGISTERSERVERRESPONSE = 438;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTXML = 439;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTBINARY = 440;

const int UA_NS0ID_CHANNELSECURITYTOKEN = 441;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTXML = 442;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTBINARY = 443;

const int UA_NS0ID_OPENSECURECHANNELREQUEST = 444;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTXML = 445;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 446;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE = 447;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 448;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 449;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST = 450;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTXML = 451;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 452;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE = 453;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 454;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 455;

const int UA_NS0ID_SIGNATUREDATA = 456;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTXML = 457;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTBINARY = 458;

const int UA_NS0ID_CREATESESSIONREQUEST = 459;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTXML = 460;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 461;

const int UA_NS0ID_CREATESESSIONRESPONSE = 462;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTXML = 463;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 464;

const int UA_NS0ID_ACTIVATESESSIONREQUEST = 465;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTXML = 466;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 467;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE = 468;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTXML = 469;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 470;

const int UA_NS0ID_CLOSESESSIONREQUEST = 471;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTXML = 472;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTBINARY = 473;

const int UA_NS0ID_CLOSESESSIONRESPONSE = 474;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTXML = 475;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 476;

const int UA_NS0ID_CANCELREQUEST = 477;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTXML = 478;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTBINARY = 479;

const int UA_NS0ID_CANCELRESPONSE = 480;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTXML = 481;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTBINARY = 482;

const int UA_NS0ID_ADDNODESRESULT = 483;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTXML = 484;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTBINARY = 485;

const int UA_NS0ID_ADDNODESREQUEST = 486;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTXML = 487;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTBINARY = 488;

const int UA_NS0ID_ADDNODESRESPONSE = 489;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTXML = 490;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTBINARY = 491;

const int UA_NS0ID_ADDREFERENCESREQUEST = 492;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTXML = 493;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 494;

const int UA_NS0ID_ADDREFERENCESRESPONSE = 495;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTXML = 496;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 497;

const int UA_NS0ID_DELETENODESREQUEST = 498;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTXML = 499;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTBINARY = 500;

const int UA_NS0ID_DELETENODESRESPONSE = 501;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTXML = 502;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTBINARY = 503;

const int UA_NS0ID_DELETEREFERENCESREQUEST = 504;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTXML = 505;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 506;

const int UA_NS0ID_DELETEREFERENCESRESPONSE = 507;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTXML = 508;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 509;

const int UA_NS0ID_BROWSEDIRECTION = 510;

const int UA_NS0ID_VIEWDESCRIPTION = 511;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTXML = 512;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTBINARY = 513;

const int UA_NS0ID_BROWSEDESCRIPTION = 514;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTXML = 515;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTBINARY = 516;

const int UA_NS0ID_BROWSERESULTMASK = 517;

const int UA_NS0ID_REFERENCEDESCRIPTION = 518;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTXML = 519;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTBINARY = 520;

const int UA_NS0ID_CONTINUATIONPOINT = 521;

const int UA_NS0ID_BROWSERESULT = 522;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTXML = 523;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTBINARY = 524;

const int UA_NS0ID_BROWSEREQUEST = 525;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTXML = 526;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTBINARY = 527;

const int UA_NS0ID_BROWSERESPONSE = 528;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTXML = 529;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTBINARY = 530;

const int UA_NS0ID_BROWSENEXTREQUEST = 531;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTXML = 532;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTBINARY = 533;

const int UA_NS0ID_BROWSENEXTRESPONSE = 534;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTXML = 535;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTBINARY = 536;

const int UA_NS0ID_RELATIVEPATHELEMENT = 537;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTXML = 538;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTBINARY = 539;

const int UA_NS0ID_RELATIVEPATH = 540;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTXML = 541;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTBINARY = 542;

const int UA_NS0ID_BROWSEPATH = 543;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTXML = 544;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTBINARY = 545;

const int UA_NS0ID_BROWSEPATHTARGET = 546;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTXML = 547;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTBINARY = 548;

const int UA_NS0ID_BROWSEPATHRESULT = 549;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTXML = 550;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTBINARY = 551;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 552;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTXML =
    553;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTBINARY =
    554;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 555;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTXML =
    556;

const int
    UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTBINARY = 557;

const int UA_NS0ID_REGISTERNODESREQUEST = 558;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTXML = 559;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 560;

const int UA_NS0ID_REGISTERNODESRESPONSE = 561;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 562;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 563;

const int UA_NS0ID_UNREGISTERNODESREQUEST = 564;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTXML = 565;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 566;

const int UA_NS0ID_UNREGISTERNODESRESPONSE = 567;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 568;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 569;

const int UA_NS0ID_QUERYDATADESCRIPTION = 570;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTXML = 571;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTBINARY = 572;

const int UA_NS0ID_NODETYPEDESCRIPTION = 573;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTXML = 574;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 575;

const int UA_NS0ID_FILTEROPERATOR = 576;

const int UA_NS0ID_QUERYDATASET = 577;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTXML = 578;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTBINARY = 579;

const int UA_NS0ID_NODEREFERENCE = 580;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTXML = 581;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTBINARY = 582;

const int UA_NS0ID_CONTENTFILTERELEMENT = 583;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTXML = 584;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTBINARY = 585;

const int UA_NS0ID_CONTENTFILTER = 586;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTXML = 587;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTBINARY = 588;

const int UA_NS0ID_FILTEROPERAND = 589;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTXML = 590;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTBINARY = 591;

const int UA_NS0ID_ELEMENTOPERAND = 592;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTXML = 593;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTBINARY = 594;

const int UA_NS0ID_LITERALOPERAND = 595;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTXML = 596;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTBINARY = 597;

const int UA_NS0ID_ATTRIBUTEOPERAND = 598;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 599;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 600;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND = 601;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 602;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 603;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT = 604;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTXML = 605;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTBINARY = 606;

const int UA_NS0ID_CONTENTFILTERRESULT = 607;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTXML = 608;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTBINARY = 609;

const int UA_NS0ID_PARSINGRESULT = 610;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTXML = 611;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTBINARY = 612;

const int UA_NS0ID_QUERYFIRSTREQUEST = 613;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTXML = 614;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTBINARY = 615;

const int UA_NS0ID_QUERYFIRSTRESPONSE = 616;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTXML = 617;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTBINARY = 618;

const int UA_NS0ID_QUERYNEXTREQUEST = 619;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTXML = 620;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTBINARY = 621;

const int UA_NS0ID_QUERYNEXTRESPONSE = 622;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTXML = 623;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTBINARY = 624;

const int UA_NS0ID_TIMESTAMPSTORETURN = 625;

const int UA_NS0ID_READVALUEID = 626;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTXML = 627;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTBINARY = 628;

const int UA_NS0ID_READREQUEST = 629;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTXML = 630;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTBINARY = 631;

const int UA_NS0ID_READRESPONSE = 632;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTXML = 633;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTBINARY = 634;

const int UA_NS0ID_HISTORYREADVALUEID = 635;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTXML = 636;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTBINARY = 637;

const int UA_NS0ID_HISTORYREADRESULT = 638;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTXML = 639;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTBINARY = 640;

const int UA_NS0ID_HISTORYREADDETAILS = 641;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTXML = 642;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTBINARY = 643;

const int UA_NS0ID_READEVENTDETAILS = 644;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTXML = 645;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTBINARY = 646;

const int UA_NS0ID_READRAWMODIFIEDDETAILS = 647;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 648;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 649;

const int UA_NS0ID_READPROCESSEDDETAILS = 650;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTXML = 651;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTBINARY = 652;

const int UA_NS0ID_READATTIMEDETAILS = 653;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTXML = 654;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTBINARY = 655;

const int UA_NS0ID_HISTORYDATA = 656;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTXML = 657;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTBINARY = 658;

const int UA_NS0ID_HISTORYEVENT = 659;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTXML = 660;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTBINARY = 661;

const int UA_NS0ID_HISTORYREADREQUEST = 662;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTXML = 663;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTBINARY = 664;

const int UA_NS0ID_HISTORYREADRESPONSE = 665;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTXML = 666;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTBINARY = 667;

const int UA_NS0ID_WRITEVALUE = 668;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTXML = 669;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTBINARY = 670;

const int UA_NS0ID_WRITEREQUEST = 671;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTXML = 672;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTBINARY = 673;

const int UA_NS0ID_WRITERESPONSE = 674;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTXML = 675;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTBINARY = 676;

const int UA_NS0ID_HISTORYUPDATEDETAILS = 677;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTXML = 678;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTBINARY = 679;

const int UA_NS0ID_UPDATEDATADETAILS = 680;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTXML = 681;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTBINARY = 682;

const int UA_NS0ID_UPDATEEVENTDETAILS = 683;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTXML = 684;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTBINARY = 685;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS = 686;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 687;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 688;

const int UA_NS0ID_DELETEATTIMEDETAILS = 689;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTXML = 690;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTBINARY = 691;

const int UA_NS0ID_DELETEEVENTDETAILS = 692;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTXML = 693;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTBINARY = 694;

const int UA_NS0ID_HISTORYUPDATERESULT = 695;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTXML = 696;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTBINARY = 697;

const int UA_NS0ID_HISTORYUPDATEREQUEST = 698;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTXML = 699;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTBINARY = 700;

const int UA_NS0ID_HISTORYUPDATERESPONSE = 701;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTXML = 702;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTBINARY = 703;

const int UA_NS0ID_CALLMETHODREQUEST = 704;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTXML = 705;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTBINARY = 706;

const int UA_NS0ID_CALLMETHODRESULT = 707;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTXML = 708;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTBINARY = 709;

const int UA_NS0ID_CALLREQUEST = 710;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTXML = 711;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTBINARY = 712;

const int UA_NS0ID_CALLRESPONSE = 713;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTXML = 714;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTBINARY = 715;

const int UA_NS0ID_MONITORINGMODE = 716;

const int UA_NS0ID_DATACHANGETRIGGER = 717;

const int UA_NS0ID_DEADBANDTYPE = 718;

const int UA_NS0ID_MONITORINGFILTER = 719;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTXML = 720;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTBINARY = 721;

const int UA_NS0ID_DATACHANGEFILTER = 722;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTXML = 723;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTBINARY = 724;

const int UA_NS0ID_EVENTFILTER = 725;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTXML = 726;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTBINARY = 727;

const int UA_NS0ID_AGGREGATEFILTER = 728;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTXML = 729;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTBINARY = 730;

const int UA_NS0ID_MONITORINGFILTERRESULT = 731;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTXML = 732;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTBINARY = 733;

const int UA_NS0ID_EVENTFILTERRESULT = 734;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTXML = 735;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTBINARY = 736;

const int UA_NS0ID_AGGREGATEFILTERRESULT = 737;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTXML = 738;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTBINARY = 739;

const int UA_NS0ID_MONITORINGPARAMETERS = 740;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTXML = 741;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTBINARY = 742;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST = 743;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTXML = 744;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTBINARY = 745;

const int UA_NS0ID_MONITOREDITEMCREATERESULT = 746;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTXML = 747;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTBINARY = 748;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST = 749;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 750;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 751;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE = 752;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 753;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 754;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST = 755;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTXML = 756;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTBINARY = 757;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT = 758;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTXML = 759;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTBINARY = 760;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST = 761;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 762;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 763;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE = 764;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 765;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 766;

const int UA_NS0ID_SETMONITORINGMODEREQUEST = 767;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTXML = 768;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTBINARY = 769;

const int UA_NS0ID_SETMONITORINGMODERESPONSE = 770;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTXML = 771;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTBINARY = 772;

const int UA_NS0ID_SETTRIGGERINGREQUEST = 773;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTXML = 774;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTBINARY = 775;

const int UA_NS0ID_SETTRIGGERINGRESPONSE = 776;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTXML = 777;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTBINARY = 778;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST = 779;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 780;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 781;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE = 782;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 783;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 784;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST = 785;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 786;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 787;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE = 788;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 789;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 790;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST = 791;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 792;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 793;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE = 794;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 795;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 796;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST = 797;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTXML = 798;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTBINARY = 799;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE = 800;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTXML = 801;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTBINARY = 802;

const int UA_NS0ID_NOTIFICATIONMESSAGE = 803;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTXML = 804;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTBINARY = 805;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION = 806;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTXML = 807;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTBINARY = 808;

const int UA_NS0ID_DATACHANGENOTIFICATION = 809;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTXML = 810;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 811;

const int UA_NS0ID_STATUSCHANGENOTIFICATION = 818;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTXML = 819;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 820;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT = 821;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTXML = 822;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTBINARY = 823;

const int UA_NS0ID_PUBLISHREQUEST = 824;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTXML = 825;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTBINARY = 826;

const int UA_NS0ID_PUBLISHRESPONSE = 827;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTXML = 828;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 829;

const int UA_NS0ID_REPUBLISHREQUEST = 830;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTXML = 831;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTBINARY = 832;

const int UA_NS0ID_REPUBLISHRESPONSE = 833;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTXML = 834;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 835;

const int UA_NS0ID_TRANSFERRESULT = 836;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTXML = 837;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTBINARY = 838;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST = 839;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 840;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 841;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE = 842;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 843;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 844;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST = 845;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 846;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 847;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE = 848;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 849;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 850;

const int UA_NS0ID_REDUNDANCYSUPPORT = 851;

const int UA_NS0ID_SERVERSTATE = 852;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE = 853;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTXML = 854;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTBINARY = 855;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 856;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML =
    857;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY =
    858;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE = 859;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTXML = 860;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTBINARY =
    861;

const int UA_NS0ID_SERVERSTATUSDATATYPE = 862;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTXML = 863;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTBINARY = 864;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE = 865;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 866;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 867;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE = 868;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 869;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY =
    870;

const int UA_NS0ID_SERVICECOUNTERDATATYPE = 871;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTXML = 872;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTBINARY = 873;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 874;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 875;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 876;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE = 877;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 878;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 879;

const int UA_NS0ID_RANGE = 884;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTXML = 885;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTBINARY = 886;

const int UA_NS0ID_EUINFORMATION = 887;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTXML = 888;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTBINARY = 889;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT = 890;

const int UA_NS0ID_ANNOTATION = 891;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTXML = 892;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTBINARY = 893;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE = 894;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTXML = 895;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTBINARY = 896;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE = 897;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 898;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 899;

const int UA_NS0ID_EVENTNOTIFICATIONLIST = 914;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTXML = 915;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTBINARY = 916;

const int UA_NS0ID_EVENTFIELDLIST = 917;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTXML = 918;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTBINARY = 919;

const int UA_NS0ID_HISTORYEVENTFIELDLIST = 920;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTXML = 921;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTBINARY = 922;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN = 938;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTXML = 939;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 940;

const int UA_NS0ID_NOTIFICATIONDATA = 945;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTXML = 946;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTBINARY = 947;

const int UA_NS0ID_AGGREGATECONFIGURATION = 948;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTXML = 949;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTBINARY = 950;

const int UA_NS0ID_IMAGEBMP = 2000;

const int UA_NS0ID_IMAGEGIF = 2001;

const int UA_NS0ID_IMAGEJPG = 2002;

const int UA_NS0ID_IMAGEPNG = 2003;

const int UA_NS0ID_SERVERTYPE = 2004;

const int UA_NS0ID_SERVERTYPE_SERVERARRAY = 2005;

const int UA_NS0ID_SERVERTYPE_NAMESPACEARRAY = 2006;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS = 2007;

const int UA_NS0ID_SERVERTYPE_SERVICELEVEL = 2008;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES = 2009;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS = 2010;

const int UA_NS0ID_SERVERTYPE_VENDORSERVERINFO = 2011;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY = 2012;

const int UA_NS0ID_SERVERCAPABILITIESTYPE = 2013;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SERVERPROFILEARRAY = 2014;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_LOCALEIDARRAY = 2016;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MINSUPPORTEDSAMPLERATE = 2017;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MODELLINGRULES = 2019;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE = 2020;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY = 2021;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    2022;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY = 2023;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_ENABLEDFLAG = 2025;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE = 2026;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONDIAGNOSTICSARRAY =
    2027;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONSECURITYDIAGNOSTICSARRAY =
    2028;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE = 2029;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS = 2030;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS =
    2031;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY =
    2032;

const int UA_NS0ID_VENDORSERVERINFOTYPE = 2033;

const int UA_NS0ID_SERVERREDUNDANCYTYPE = 2034;

const int UA_NS0ID_SERVERREDUNDANCYTYPE_REDUNDANCYSUPPORT = 2035;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE = 2036;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_CURRENTSERVERID = 2037;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANTSERVERARRAY = 2038;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE = 2039;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_SERVERURIARRAY = 2040;

const int UA_NS0ID_BASEEVENTTYPE = 2041;

const int UA_NS0ID_BASEEVENTTYPE_EVENTID = 2042;

const int UA_NS0ID_BASEEVENTTYPE_EVENTTYPE = 2043;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENODE = 2044;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENAME = 2045;

const int UA_NS0ID_BASEEVENTTYPE_TIME = 2046;

const int UA_NS0ID_BASEEVENTTYPE_RECEIVETIME = 2047;

const int UA_NS0ID_BASEEVENTTYPE_MESSAGE = 2050;

const int UA_NS0ID_BASEEVENTTYPE_SEVERITY = 2051;

const int UA_NS0ID_AUDITEVENTTYPE = 2052;

const int UA_NS0ID_AUDITEVENTTYPE_ACTIONTIMESTAMP = 2053;

const int UA_NS0ID_AUDITEVENTTYPE_STATUS = 2054;

const int UA_NS0ID_AUDITEVENTTYPE_SERVERID = 2055;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTAUDITENTRYID = 2056;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTUSERID = 2057;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE = 2058;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE = 2059;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE = 2060;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATE = 2061;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTTYPE = 2062;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYPOLICYURI = 2063;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYMODE = 2065;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTEDLIFETIME = 2066;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE = 2069;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SESSIONID = 2070;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE = 2071;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SECURECHANNELID = 2072;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATE = 2073;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_REVISEDSESSIONTIMEOUT = 2074;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE = 2075;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTSOFTWARECERTIFICATES =
    2076;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_USERIDENTITYTOKEN = 2077;

const int UA_NS0ID_AUDITCANCELEVENTTYPE = 2078;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_REQUESTHANDLE = 2079;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE = 2080;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CERTIFICATE = 2081;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE = 2082;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDHOSTNAME = 2083;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDURI = 2084;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE = 2085;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE = 2086;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE = 2087;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE = 2088;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE = 2089;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE = 2090;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE = 2091;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_NODESTOADD = 2092;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE = 2093;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_NODESTODELETE = 2094;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE = 2095;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_REFERENCESTOADD = 2096;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE = 2097;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_REFERENCESTODELETE = 2098;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE = 2099;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE = 2100;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_INDEXRANGE = 2101;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_OLDVALUE = 2102;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_NEWVALUE = 2103;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE = 2104;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE = 2127;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_METHODID = 2128;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_INPUTARGUMENTS = 2129;

const int UA_NS0ID_SYSTEMEVENTTYPE = 2130;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE = 2131;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE = 2132;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE = 2133;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CHANGES = 2134;

const int UA_NS0ID_SERVERVENDORCAPABILITYTYPE = 2137;

const int UA_NS0ID_SERVERSTATUSTYPE = 2138;

const int UA_NS0ID_SERVERSTATUSTYPE_STARTTIME = 2139;

const int UA_NS0ID_SERVERSTATUSTYPE_CURRENTTIME = 2140;

const int UA_NS0ID_SERVERSTATUSTYPE_STATE = 2141;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO = 2142;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE = 2150;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SERVERVIEWCOUNT = 2151;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSESSIONCOUNT = 2152;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSESSIONCOUNT = 2153;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDSESSIONCOUNT =
    2154;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDSESSIONCOUNT = 2155;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONTIMEOUTCOUNT = 2156;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONABORTCOUNT = 2157;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_PUBLISHINGINTERVALCOUNT = 2159;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSUBSCRIPTIONCOUNT = 2160;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSUBSCRIPTIONCOUNT =
    2161;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDREQUESTSCOUNT =
    2162;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDREQUESTSCOUNT = 2163;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE = 2164;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE = 2165;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLINGINTERVAL = 2166;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE = 2171;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE = 2172;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SESSIONID = 2173;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SUBSCRIPTIONID = 2174;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PRIORITY = 2175;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGINTERVAL = 2176;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXKEEPALIVECOUNT = 2177;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXNOTIFICATIONSPERPUBLISH =
    2179;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGENABLED = 2180;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MODIFYCOUNT = 2181;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_ENABLECOUNT = 2182;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLECOUNT = 2183;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHREQUESTCOUNT = 2184;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGEREQUESTCOUNT =
    2185;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGECOUNT = 2186;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREQUESTCOUNT = 2187;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOALTCLIENTCOUNT =
    2188;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOSAMECLIENTCOUNT =
    2189;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHREQUESTCOUNT = 2190;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DATACHANGENOTIFICATIONSCOUNT =
    2191;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NOTIFICATIONSCOUNT = 2193;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE = 2196;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE = 2197;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONID = 2198;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONNAME = 2199;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTDESCRIPTION = 2200;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SERVERURI = 2201;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ENDPOINTURL = 2202;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_LOCALEIDS = 2203;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ACTUALSESSIONTIMEOUT = 2204;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTCONNECTIONTIME = 2205;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTLASTCONTACTTIME = 2206;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTSUBSCRIPTIONSCOUNT =
    2207;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTMONITOREDITEMSCOUNT =
    2208;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTPUBLISHREQUESTSINQUEUE =
    2209;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_READCOUNT = 2217;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYREADCOUNT = 2218;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_WRITECOUNT = 2219;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYUPDATECOUNT = 2220;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CALLCOUNT = 2221;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATEMONITOREDITEMSCOUNT =
    2222;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYMONITOREDITEMSCOUNT =
    2223;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETMONITORINGMODECOUNT = 2224;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETTRIGGERINGCOUNT = 2225;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEMONITOREDITEMSCOUNT =
    2226;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATESUBSCRIPTIONCOUNT =
    2227;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYSUBSCRIPTIONCOUNT =
    2228;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETPUBLISHINGMODECOUNT = 2229;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_PUBLISHCOUNT = 2230;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REPUBLISHCOUNT = 2231;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSFERSUBSCRIPTIONSCOUNT =
    2232;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETESUBSCRIPTIONSCOUNT =
    2233;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDNODESCOUNT = 2234;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDREFERENCESCOUNT = 2235;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETENODESCOUNT = 2236;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEREFERENCESCOUNT = 2237;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSECOUNT = 2238;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSENEXTCOUNT = 2239;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    2240;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYFIRSTCOUNT = 2241;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYNEXTCOUNT = 2242;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE = 2243;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE = 2244;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SESSIONID = 2245;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDOFSESSION = 2246;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDHISTORY = 2247;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_AUTHENTICATIONMECHANISM =
    2248;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_ENCODING = 2249;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_TRANSPORTPROTOCOL = 2250;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYMODE = 2251;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYPOLICYURI = 2252;

const int UA_NS0ID_SERVER = 2253;

const int UA_NS0ID_SERVER_SERVERARRAY = 2254;

const int UA_NS0ID_SERVER_NAMESPACEARRAY = 2255;

const int UA_NS0ID_SERVER_SERVERSTATUS = 2256;

const int UA_NS0ID_SERVER_SERVERSTATUS_STARTTIME = 2257;

const int UA_NS0ID_SERVER_SERVERSTATUS_CURRENTTIME = 2258;

const int UA_NS0ID_SERVER_SERVERSTATUS_STATE = 2259;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO = 2260;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 2261;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTURI = 2262;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 2263;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 2264;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 2265;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDDATE = 2266;

const int UA_NS0ID_SERVER_SERVICELEVEL = 2267;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES = 2268;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SERVERPROFILEARRAY = 2269;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_LOCALEIDARRAY = 2271;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 2272;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS = 2274;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 2275;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    2276;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    2277;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    2278;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    2279;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    2281;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    2282;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    2284;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    2285;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    2286;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    2287;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    2288;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    2289;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY = 2290;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_ENABLEDFLAG = 2294;

const int UA_NS0ID_SERVER_VENDORSERVERINFO = 2295;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY = 2296;

const int UA_NS0ID_STATEMACHINETYPE = 2299;

const int UA_NS0ID_STATETYPE = 2307;

const int UA_NS0ID_STATETYPE_STATENUMBER = 2308;

const int UA_NS0ID_INITIALSTATETYPE = 2309;

const int UA_NS0ID_TRANSITIONTYPE = 2310;

const int UA_NS0ID_TRANSITIONEVENTTYPE = 2311;

const int UA_NS0ID_TRANSITIONTYPE_TRANSITIONNUMBER = 2312;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE = 2315;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE = 2318;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STEPPED = 2323;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_DEFINITION = 2324;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MAXTIMEINTERVAL = 2325;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MINTIMEINTERVAL = 2326;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATION = 2327;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATIONFORMAT =
    2328;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE = 2330;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYDATACAPABILITY =
    2331;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYEVENTSCAPABILITY =
    2332;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTDATACAPABILITY = 2334;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEDATACAPABILITY = 2335;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEDATACAPABILITY = 2336;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETERAWCAPABILITY = 2337;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEATTIMECAPABILITY = 2338;

const int UA_NS0ID_AGGREGATEFUNCTIONTYPE = 2340;

const int UA_NS0ID_AGGREGATEFUNCTION_INTERPOLATIVE = 2341;

const int UA_NS0ID_AGGREGATEFUNCTION_AVERAGE = 2342;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE = 2343;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL = 2344;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM = 2346;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM = 2347;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME = 2348;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME = 2349;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE = 2350;

const int UA_NS0ID_AGGREGATEFUNCTION_ANNOTATIONCOUNT = 2351;

const int UA_NS0ID_AGGREGATEFUNCTION_COUNT = 2352;

const int UA_NS0ID_AGGREGATEFUNCTION_NUMBEROFTRANSITIONS = 2355;

const int UA_NS0ID_AGGREGATEFUNCTION_START = 2357;

const int UA_NS0ID_AGGREGATEFUNCTION_END = 2358;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTA = 2359;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONGOOD = 2360;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONBAD = 2361;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTGOOD = 2362;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTBAD = 2363;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY = 2364;

const int UA_NS0ID_DATAITEMTYPE = 2365;

const int UA_NS0ID_DATAITEMTYPE_DEFINITION = 2366;

const int UA_NS0ID_DATAITEMTYPE_VALUEPRECISION = 2367;

const int UA_NS0ID_ANALOGITEMTYPE = 2368;

const int UA_NS0ID_ANALOGITEMTYPE_EURANGE = 2369;

const int UA_NS0ID_ANALOGITEMTYPE_INSTRUMENTRANGE = 2370;

const int UA_NS0ID_ANALOGITEMTYPE_ENGINEERINGUNITS = 2371;

const int UA_NS0ID_DISCRETEITEMTYPE = 2372;

const int UA_NS0ID_TWOSTATEDISCRETETYPE = 2373;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_FALSESTATE = 2374;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_TRUESTATE = 2375;

const int UA_NS0ID_MULTISTATEDISCRETETYPE = 2376;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_ENUMSTRINGS = 2377;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE = 2378;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_INTERMEDIATERESULT = 2379;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE = 2380;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATESESSIONID = 2381;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATECLIENTNAME = 2382;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_INVOCATIONCREATIONTIME = 2383;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTTRANSITIONTIME = 2384;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALL = 2385;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODSESSIONID = 2386;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODINPUTARGUMENTS = 2387;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODOUTPUTARGUMENTS = 2388;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALLTIME = 2389;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODRETURNSTATUS = 2390;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE = 2391;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CREATABLE = 2392;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_DELETABLE = 2393;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AUTODELETE = 2394;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RECYCLECOUNT = 2395;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_INSTANCECOUNT = 2396;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXINSTANCECOUNT = 2397;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXRECYCLECOUNT = 2398;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC = 2399;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY = 2400;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY_STATENUMBER = 2401;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING = 2402;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING_STATENUMBER = 2403;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED = 2404;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED_STATENUMBER = 2405;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED = 2406;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED_STATENUMBER = 2407;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY = 2408;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY_TRANSITIONNUMBER =
    2409;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING = 2410;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING_TRANSITIONNUMBER =
    2411;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED = 2412;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED_TRANSITIONNUMBER =
    2413;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY = 2414;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY_TRANSITIONNUMBER =
    2415;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED = 2416;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED_TRANSITIONNUMBER =
    2417;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING = 2418;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING_TRANSITIONNUMBER =
    2419;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED = 2420;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED_TRANSITIONNUMBER =
    2421;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY = 2422;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY_TRANSITIONNUMBER =
    2423;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED = 2424;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED_TRANSITIONNUMBER =
    2425;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_START = 2426;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPEND = 2427;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESUME = 2428;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALT = 2429;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESET = 2430;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REGISTERNODESCOUNT = 2730;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNREGISTERNODESCOUNT = 2731;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBROWSECONTINUATIONPOINTS = 2732;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXQUERYCONTINUATIONPOINTS = 2733;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXHISTORYCONTINUATIONPOINTS = 2734;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS = 2735;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS = 2736;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS =
    2737;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE = 2738;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CHANGES = 2739;

const int UA_NS0ID_SERVERTYPE_AUDITING = 2742;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY = 2744;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SECURECHANNELID = 2745;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT =
    2746;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT =
    2747;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE = 2748;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ENDPOINTURL = 2749;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ATTRIBUTEID = 2750;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_PARAMETERDATATYPEID = 2751;

const int UA_NS0ID_SERVERSTATUSTYPE_SECONDSTILLSHUTDOWN = 2752;

const int UA_NS0ID_SERVERSTATUSTYPE_SHUTDOWNREASON = 2753;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 2754;

const int UA_NS0ID_STATEVARIABLETYPE = 2755;

const int UA_NS0ID_STATEVARIABLETYPE_ID = 2756;

const int UA_NS0ID_STATEVARIABLETYPE_NAME = 2757;

const int UA_NS0ID_STATEVARIABLETYPE_NUMBER = 2758;

const int UA_NS0ID_STATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 2759;

const int UA_NS0ID_FINITESTATEVARIABLETYPE = 2760;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_ID = 2761;

const int UA_NS0ID_TRANSITIONVARIABLETYPE = 2762;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_ID = 2763;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NAME = 2764;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NUMBER = 2765;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_TRANSITIONTIME = 2766;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE = 2767;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_ID = 2768;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE = 2769;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION = 2770;

const int UA_NS0ID_FINITESTATEMACHINETYPE = 2771;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE = 2772;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION = 2773;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION = 2774;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE = 2775;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE = 2776;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_OLDSTATEID = 2777;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_NEWSTATEID = 2778;

const int UA_NS0ID_CONDITIONTYPE = 2782;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE = 2787;

const int UA_NS0ID_REFRESHENDEVENTTYPE = 2788;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE = 2789;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE = 2790;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE = 2803;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE = 2829;

const int UA_NS0ID_DIALOGCONDITIONTYPE = 2830;

const int UA_NS0ID_DIALOGCONDITIONTYPE_PROMPT = 2831;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE = 2881;

const int UA_NS0ID_ALARMCONDITIONTYPE = 2915;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE = 2929;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED = 2930;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED = 2932;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED = 2933;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED = 2935;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED = 2936;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED = 2940;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED = 2942;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED = 2943;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED = 2945;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVE = 2947;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVE = 2948;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE = 2949;

const int UA_NS0ID_LIMITALARMTYPE = 2955;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE_INPUTARGUMENTS = 2991;

const int UA_NS0ID_SERVER_SERVERSTATUS_SECONDSTILLSHUTDOWN = 2992;

const int UA_NS0ID_SERVER_SERVERSTATUS_SHUTDOWNREASON = 2993;

const int UA_NS0ID_SERVER_AUDITING = 2994;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MODELLINGRULES = 2996;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 2997;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTNOTIFICATIONSCOUNT = 2998;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE = 2999;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_FILTER = 3003;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE = 3006;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE = 3012;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE = 3014;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ISDELETEMODIFIED = 3015;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STARTTIME = 3016;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ENDTIME = 3017;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE = 3019;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_REQTIMES = 3020;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_OLDVALUES = 3021;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE = 3022;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTIDS = 3023;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_OLDVALUES = 3024;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_UPDATEDNODE = 3025;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_UPDATEDNODE = 3026;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_UPDATEDNODE = 3027;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3028;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_NEWVALUES = 3029;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_OLDVALUES = 3030;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3031;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_NEWVALUES = 3032;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_OLDVALUES = 3033;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_OLDVALUES = 3034;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE = 3035;

const int UA_NS0ID_EVENTTYPESFOLDER = 3048;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SOFTWARECERTIFICATES = 3049;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MAXRESPONSEMESSAGESIZE = 3050;

const int UA_NS0ID_BUILDINFOTYPE = 3051;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTURI = 3052;

const int UA_NS0ID_BUILDINFOTYPE_MANUFACTURERNAME = 3053;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTNAME = 3054;

const int UA_NS0ID_BUILDINFOTYPE_SOFTWAREVERSION = 3055;

const int UA_NS0ID_BUILDINFOTYPE_BUILDNUMBER = 3056;

const int UA_NS0ID_BUILDINFOTYPE_BUILDDATE = 3057;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTCERTIFICATE = 3058;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION =
    3059;

const int UA_NS0ID_DEFAULTBINARY = 3062;

const int UA_NS0ID_DEFAULTXML = 3063;

const int UA_NS0ID_ALWAYSGENERATESEVENT = 3065;

const int UA_NS0ID_ICON = 3067;

const int UA_NS0ID_NODEVERSION = 3068;

const int UA_NS0ID_LOCALTIME = 3069;

const int UA_NS0ID_ALLOWNULLS = 3070;

const int UA_NS0ID_ENUMVALUES = 3071;

const int UA_NS0ID_INPUTARGUMENTS = 3072;

const int UA_NS0ID_OUTPUTARGUMENTS = 3073;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STARTTIME = 3074;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_CURRENTTIME = 3075;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STATE = 3076;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO = 3077;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTURI = 3078;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 3079;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 3080;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 3081;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 3082;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDDATE = 3083;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SECONDSTILLSHUTDOWN = 3084;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SHUTDOWNREASON = 3085;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SERVERPROFILEARRAY = 3086;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_LOCALEIDARRAY = 3087;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 3088;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS =
    3089;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS =
    3090;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS =
    3091;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3092;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MODELLINGRULES = 3093;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 3094;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 3095;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    3096;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    3097;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    3098;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    3099;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3100;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    3101;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    3102;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    3104;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    3105;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    3106;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    3107;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    3108;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    3109;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY =
    3110;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY =
    3111;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3112;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3113;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_ENABLEDFLAG = 3114;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3115;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    3116;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    3117;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    3118;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    3119;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3120;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    3121;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    3122;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    3124;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    3125;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    3126;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    3127;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    3128;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3129;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3130;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONID =
    3131;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONNAME =
    3132;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    3133;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SERVERURI =
    3134;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL =
    3135;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_LOCALEIDS =
    3136;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    3137;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    3138;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    3139;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    3140;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    3141;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    3142;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    3143;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_READCOUNT =
    3151;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    3152;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_WRITECOUNT =
    3153;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    3154;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CALLCOUNT =
    3155;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    3156;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    3157;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    3158;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    3159;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    3160;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    3161;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    3162;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    3163;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    3164;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    3165;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    3166;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    3167;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    3168;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    3169;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    3170;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    3171;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT =
    3172;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    3173;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    3174;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    3175;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    3176;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    3177;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    3178;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    3179;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    3180;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    3181;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    3182;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    3183;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    3184;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    3185;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    3186;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    3187;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3188;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3189;

const int UA_NS0ID_BASEEVENTTYPE_LOCALTIME = 3190;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTID = 3191;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTTYPE = 3192;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENODE = 3193;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENAME = 3194;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_TIME = 3195;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_RECEIVETIME = 3196;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_LOCALTIME = 3197;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_MESSAGE = 3198;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SEVERITY = 3199;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTID = 3200;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTTYPE = 3201;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENODE = 3202;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENAME = 3203;

const int UA_NS0ID_AUDITEVENTTYPE_TIME = 3204;

const int UA_NS0ID_AUDITEVENTTYPE_RECEIVETIME = 3205;

const int UA_NS0ID_AUDITEVENTTYPE_LOCALTIME = 3206;

const int UA_NS0ID_AUDITEVENTTYPE_MESSAGE = 3207;

const int UA_NS0ID_AUDITEVENTTYPE_SEVERITY = 3208;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTID = 3209;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTTYPE = 3210;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENODE = 3211;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENAME = 3212;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_TIME = 3213;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_RECEIVETIME = 3214;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_LOCALTIME = 3215;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_MESSAGE = 3216;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SEVERITY = 3217;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_ACTIONTIMESTAMP = 3218;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUS = 3219;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SERVERID = 3220;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTAUDITENTRYID = 3221;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTUSERID = 3222;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTID = 3223;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTTYPE = 3224;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENODE = 3225;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENAME = 3226;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_TIME = 3227;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_RECEIVETIME = 3228;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_LOCALTIME = 3229;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_MESSAGE = 3230;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SEVERITY = 3231;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_ACTIONTIMESTAMP = 3232;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUS = 3233;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SERVERID = 3234;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3235;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTUSERID = 3236;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTID = 3237;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTTYPE = 3238;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENODE = 3239;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENAME = 3240;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_TIME = 3241;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_RECEIVETIME = 3242;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_LOCALTIME = 3243;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_MESSAGE = 3244;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SEVERITY = 3245;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_ACTIONTIMESTAMP = 3246;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUS = 3247;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SERVERID = 3248;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3249;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTUSERID = 3250;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURECHANNELID = 3251;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTID = 3252;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTTYPE = 3253;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENODE = 3254;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENAME = 3255;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_TIME = 3256;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_RECEIVETIME = 3257;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_LOCALTIME = 3258;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_MESSAGE = 3259;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SEVERITY = 3260;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_ACTIONTIMESTAMP = 3261;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUS = 3262;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SERVERID = 3263;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3264;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTUSERID = 3265;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTID = 3266;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTTYPE = 3267;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENODE = 3268;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENAME = 3269;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_TIME = 3270;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_RECEIVETIME = 3271;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_LOCALTIME = 3272;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_MESSAGE = 3273;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SEVERITY = 3274;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3275;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUS = 3276;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SERVERID = 3277;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3278;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTUSERID = 3279;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTID = 3281;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTTYPE = 3282;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENODE = 3283;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENAME = 3284;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_TIME = 3285;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_RECEIVETIME = 3286;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_LOCALTIME = 3287;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_MESSAGE = 3288;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SEVERITY = 3289;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3290;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUS = 3291;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SERVERID = 3292;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3293;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTUSERID = 3294;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SECURECHANNELID = 3296;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATE = 3297;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT = 3298;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_REVISEDSESSIONTIMEOUT = 3299;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTID = 3300;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTTYPE = 3301;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENODE = 3302;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENAME = 3303;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_TIME = 3304;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_RECEIVETIME = 3305;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_LOCALTIME = 3306;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_MESSAGE = 3307;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SEVERITY = 3308;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3309;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUS = 3310;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SERVERID = 3311;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3312;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTUSERID = 3313;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SESSIONID = 3314;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTID = 3315;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTTYPE = 3316;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENODE = 3317;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENAME = 3318;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_TIME = 3319;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_RECEIVETIME = 3320;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_LOCALTIME = 3321;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_MESSAGE = 3322;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SEVERITY = 3323;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_ACTIONTIMESTAMP = 3324;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUS = 3325;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SERVERID = 3326;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTAUDITENTRYID = 3327;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTUSERID = 3328;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SESSIONID = 3329;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTID = 3330;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTTYPE = 3331;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENODE = 3332;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENAME = 3333;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_TIME = 3334;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_RECEIVETIME = 3335;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_LOCALTIME = 3336;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_MESSAGE = 3337;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SEVERITY = 3338;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_ACTIONTIMESTAMP = 3339;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUS = 3340;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SERVERID = 3341;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTAUDITENTRYID = 3342;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTUSERID = 3343;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTID = 3344;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTTYPE = 3345;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENODE = 3346;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENAME = 3347;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_TIME = 3348;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_RECEIVETIME = 3349;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_LOCALTIME = 3350;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_MESSAGE = 3351;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SEVERITY = 3352;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3353;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUS = 3354;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SERVERID = 3355;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTAUDITENTRYID =
    3356;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTUSERID = 3357;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CERTIFICATE = 3358;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTID = 3359;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTTYPE = 3360;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENODE = 3361;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENAME = 3362;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_TIME = 3363;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_RECEIVETIME = 3364;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_LOCALTIME = 3365;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_MESSAGE = 3366;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SEVERITY = 3367;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_ACTIONTIMESTAMP = 3368;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUS = 3369;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SERVERID = 3370;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTAUDITENTRYID = 3371;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTUSERID = 3372;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CERTIFICATE = 3373;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTID = 3374;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTTYPE = 3375;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENODE = 3376;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENAME = 3377;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_TIME = 3378;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_RECEIVETIME = 3379;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_LOCALTIME = 3380;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_MESSAGE = 3381;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SEVERITY = 3382;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_ACTIONTIMESTAMP = 3383;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUS = 3384;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SERVERID = 3385;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTAUDITENTRYID = 3386;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTUSERID = 3387;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CERTIFICATE = 3388;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTID = 3389;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTTYPE = 3390;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENODE = 3391;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENAME = 3392;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_TIME = 3393;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_RECEIVETIME = 3394;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_LOCALTIME = 3395;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_MESSAGE = 3396;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SEVERITY = 3397;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_ACTIONTIMESTAMP = 3398;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUS = 3399;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SERVERID = 3400;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTAUDITENTRYID = 3401;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTUSERID = 3402;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CERTIFICATE = 3403;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTID = 3404;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTTYPE = 3405;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENODE = 3406;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENAME = 3407;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_TIME = 3408;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_RECEIVETIME = 3409;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_LOCALTIME = 3410;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_MESSAGE = 3411;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SEVERITY = 3412;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_ACTIONTIMESTAMP = 3413;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUS = 3414;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SERVERID = 3415;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTAUDITENTRYID = 3416;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTUSERID = 3417;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CERTIFICATE = 3418;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTID = 3419;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTTYPE = 3420;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENODE = 3421;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENAME = 3422;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_TIME = 3423;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_RECEIVETIME = 3424;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_LOCALTIME = 3425;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_MESSAGE = 3426;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SEVERITY = 3427;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3428;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUS = 3429;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SERVERID = 3430;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3431;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTUSERID = 3432;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CERTIFICATE = 3433;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTID = 3434;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTTYPE = 3435;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENODE = 3436;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENAME = 3437;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_TIME = 3438;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_RECEIVETIME = 3439;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_LOCALTIME = 3440;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_MESSAGE = 3441;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SEVERITY = 3442;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_ACTIONTIMESTAMP = 3443;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_STATUS = 3444;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SERVERID = 3445;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTAUDITENTRYID = 3446;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTUSERID = 3447;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTID = 3448;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTTYPE = 3449;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENODE = 3450;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENAME = 3451;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_TIME = 3452;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_RECEIVETIME = 3453;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_LOCALTIME = 3454;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_MESSAGE = 3455;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SEVERITY = 3456;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_ACTIONTIMESTAMP = 3457;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_STATUS = 3458;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SERVERID = 3459;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTAUDITENTRYID = 3460;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTUSERID = 3461;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTID = 3462;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTTYPE = 3463;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENODE = 3464;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENAME = 3465;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_TIME = 3466;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_RECEIVETIME = 3467;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_LOCALTIME = 3468;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_MESSAGE = 3469;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SEVERITY = 3470;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_ACTIONTIMESTAMP = 3471;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_STATUS = 3472;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SERVERID = 3473;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTAUDITENTRYID = 3474;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTUSERID = 3475;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTID = 3476;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTTYPE = 3477;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENODE = 3478;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENAME = 3479;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_TIME = 3480;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_RECEIVETIME = 3481;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_LOCALTIME = 3482;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_MESSAGE = 3483;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SEVERITY = 3484;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3485;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_STATUS = 3486;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SERVERID = 3487;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3488;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTUSERID = 3489;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTID = 3490;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTTYPE = 3491;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENODE = 3492;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENAME = 3493;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_TIME = 3494;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_RECEIVETIME = 3495;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_LOCALTIME = 3496;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_MESSAGE = 3497;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SEVERITY = 3498;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3499;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_STATUS = 3500;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SERVERID = 3501;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3502;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTUSERID = 3503;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTID = 3504;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTTYPE = 3505;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENODE = 3506;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENAME = 3507;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_TIME = 3508;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_RECEIVETIME = 3509;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_LOCALTIME = 3510;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_MESSAGE = 3511;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SEVERITY = 3512;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3513;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_STATUS = 3514;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SERVERID = 3515;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3516;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTUSERID = 3517;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTID = 3518;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTTYPE = 3519;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENODE = 3520;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENAME = 3521;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_TIME = 3522;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_RECEIVETIME = 3523;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_LOCALTIME = 3524;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_MESSAGE = 3525;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SEVERITY = 3526;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3527;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_STATUS = 3528;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SERVERID = 3529;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3530;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTUSERID = 3531;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTID = 3532;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTTYPE = 3533;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENODE = 3534;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENAME = 3535;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_TIME = 3536;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_RECEIVETIME = 3537;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_LOCALTIME = 3538;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_MESSAGE = 3539;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SEVERITY = 3540;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3541;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_STATUS = 3542;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SERVERID = 3543;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3544;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTUSERID = 3545;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTID = 3546;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTTYPE = 3547;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENODE = 3548;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENAME = 3549;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_TIME = 3550;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_RECEIVETIME = 3551;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_LOCALTIME = 3552;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_MESSAGE = 3553;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SEVERITY = 3554;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3555;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_STATUS = 3556;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SERVERID = 3557;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3558;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTUSERID = 3559;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3560;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTID = 3561;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTTYPE = 3562;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENODE = 3563;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENAME = 3564;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_TIME = 3565;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_RECEIVETIME = 3566;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_LOCALTIME = 3567;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_MESSAGE = 3568;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SEVERITY = 3569;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3570;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_STATUS = 3571;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SERVERID = 3572;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3573;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTUSERID = 3574;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3575;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTID = 3576;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTTYPE = 3577;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENODE = 3578;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENAME = 3579;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_TIME = 3580;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_RECEIVETIME = 3581;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_LOCALTIME = 3582;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_MESSAGE = 3583;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SEVERITY = 3584;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3585;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_STATUS = 3586;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SERVERID = 3587;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3588;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTUSERID = 3589;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_PARAMETERDATATYPEID = 3590;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTID = 3591;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTTYPE = 3592;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENODE = 3593;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENAME = 3594;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_TIME = 3595;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_RECEIVETIME = 3596;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_LOCALTIME = 3597;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_MESSAGE = 3598;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SEVERITY = 3599;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3600;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STATUS = 3601;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SERVERID = 3602;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTAUDITENTRYID =
    3603;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTUSERID = 3604;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_PARAMETERDATATYPEID =
    3605;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_UPDATEDNODE = 3606;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTID = 3607;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTTYPE = 3608;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENODE = 3609;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENAME = 3610;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_TIME = 3611;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_RECEIVETIME = 3612;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_LOCALTIME = 3613;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_MESSAGE = 3614;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SEVERITY = 3615;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_ACTIONTIMESTAMP = 3616;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_STATUS = 3617;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SERVERID = 3618;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3619;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTUSERID = 3620;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_PARAMETERDATATYPEID = 3621;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_UPDATEDNODE = 3622;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTID = 3623;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTTYPE = 3624;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENODE = 3625;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENAME = 3626;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_TIME = 3627;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_RECEIVETIME = 3628;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_LOCALTIME = 3629;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_MESSAGE = 3630;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SEVERITY = 3631;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_ACTIONTIMESTAMP = 3632;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_STATUS = 3633;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SERVERID = 3634;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3635;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTUSERID = 3636;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_PARAMETERDATATYPEID = 3637;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_UPDATEDNODE = 3638;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTID = 3639;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTTYPE = 3640;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENODE = 3641;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENAME = 3642;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_TIME = 3643;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_RECEIVETIME = 3644;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_LOCALTIME = 3645;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_MESSAGE = 3646;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SEVERITY = 3647;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_ACTIONTIMESTAMP = 3648;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_STATUS = 3649;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SERVERID = 3650;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTAUDITENTRYID = 3651;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTUSERID = 3652;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTID = 3653;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTTYPE = 3654;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENODE = 3655;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENAME = 3656;

const int UA_NS0ID_SYSTEMEVENTTYPE_TIME = 3657;

const int UA_NS0ID_SYSTEMEVENTTYPE_RECEIVETIME = 3658;

const int UA_NS0ID_SYSTEMEVENTTYPE_LOCALTIME = 3659;

const int UA_NS0ID_SYSTEMEVENTTYPE_MESSAGE = 3660;

const int UA_NS0ID_SYSTEMEVENTTYPE_SEVERITY = 3661;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTID = 3662;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTTYPE = 3663;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENODE = 3664;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENAME = 3665;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_TIME = 3666;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_RECEIVETIME = 3667;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_LOCALTIME = 3668;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_MESSAGE = 3669;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SEVERITY = 3670;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTID = 3671;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTTYPE = 3672;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENODE = 3673;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENAME = 3674;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_TIME = 3675;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_RECEIVETIME = 3676;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_LOCALTIME = 3677;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_MESSAGE = 3678;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SEVERITY = 3679;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTID = 3680;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTTYPE = 3681;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENODE = 3682;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENAME = 3683;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_TIME = 3684;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_RECEIVETIME = 3685;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_LOCALTIME = 3686;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_MESSAGE = 3687;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SEVERITY = 3688;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTID = 3689;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTTYPE = 3690;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENODE = 3691;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENAME = 3692;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_TIME = 3693;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_RECEIVETIME = 3694;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_LOCALTIME = 3695;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_MESSAGE = 3696;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SEVERITY = 3697;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTURI = 3698;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_MANUFACTURERNAME = 3699;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTNAME = 3700;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_SOFTWAREVERSION = 3701;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDNUMBER = 3702;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDDATE = 3703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3704;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3705;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY = 3706;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3707;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3708;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3709;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NAME = 3714;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NUMBER = 3715;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 3716;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NAME = 3717;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NUMBER = 3718;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_TRANSITIONTIME = 3719;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_ID = 3720;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NAME = 3721;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NUMBER = 3722;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 3723;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_ID = 3724;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NAME = 3725;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NUMBER = 3726;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3727;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_ID = 3728;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NAME = 3729;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3730;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    3731;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_ID = 3732;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NAME = 3733;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3734;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3735;

const int UA_NS0ID_INITIALSTATETYPE_STATENUMBER = 3736;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTID = 3737;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTTYPE = 3738;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENODE = 3739;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENAME = 3740;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TIME = 3741;

const int UA_NS0ID_TRANSITIONEVENTTYPE_RECEIVETIME = 3742;

const int UA_NS0ID_TRANSITIONEVENTTYPE_LOCALTIME = 3743;

const int UA_NS0ID_TRANSITIONEVENTTYPE_MESSAGE = 3744;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SEVERITY = 3745;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_ID = 3746;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NAME = 3747;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3748;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME = 3749;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_ID = 3750;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NAME = 3751;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3752;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME = 3753;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_ID = 3754;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NAME = 3755;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3756;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3757;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTID = 3758;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTTYPE = 3759;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENODE = 3760;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENAME = 3761;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_TIME = 3762;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_RECEIVETIME = 3763;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_LOCALTIME = 3764;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_MESSAGE = 3765;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SEVERITY = 3766;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_ACTIONTIMESTAMP = 3767;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_STATUS = 3768;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SERVERID = 3769;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTAUDITENTRYID = 3770;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTUSERID = 3771;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_METHODID = 3772;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_INPUTARGUMENTS = 3773;

const int UA_NS0ID_ANALOGITEMTYPE_DEFINITION = 3774;

const int UA_NS0ID_ANALOGITEMTYPE_VALUEPRECISION = 3775;

const int UA_NS0ID_DISCRETEITEMTYPE_DEFINITION = 3776;

const int UA_NS0ID_DISCRETEITEMTYPE_VALUEPRECISION = 3777;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_DEFINITION = 3778;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_VALUEPRECISION = 3779;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_DEFINITION = 3780;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_VALUEPRECISION = 3781;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTID = 3782;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 3783;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 3784;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 3785;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TIME = 3786;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 3787;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 3788;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_MESSAGE = 3789;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SEVERITY = 3790;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE = 3791;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_ID = 3792;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NAME = 3793;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3794;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME =
    3795;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE = 3796;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_ID = 3797;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NAME = 3798;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3799;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME =
    3800;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION = 3801;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_ID = 3802;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NAME = 3803;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3804;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3805;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE = 3806;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTID = 3807;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTTYPE = 3808;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENODE = 3809;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENAME = 3810;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TIME = 3811;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_RECEIVETIME = 3812;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_LOCALTIME = 3813;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_MESSAGE = 3814;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SEVERITY = 3815;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_ACTIONTIMESTAMP = 3816;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_STATUS = 3817;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SERVERID = 3818;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTAUDITENTRYID = 3819;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTUSERID = 3820;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_METHODID = 3821;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_INPUTARGUMENTS = 3822;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_OLDSTATEID = 3823;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_NEWSTATEID = 3824;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION = 3825;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_ID = 3826;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NAME = 3827;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NUMBER = 3828;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_TRANSITIONTIME =
    3829;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE = 3830;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_ID = 3831;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NAME = 3832;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3833;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    3834;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION = 3835;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_ID = 3836;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NAME = 3837;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3838;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3839;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATESESSIONID =
    3840;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATECLIENTNAME =
    3841;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_INVOCATIONCREATIONTIME =
    3842;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTTRANSITIONTIME =
    3843;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALL =
    3844;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODSESSIONID =
    3845;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTARGUMENTS =
    3846;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTARGUMENTS =
    3847;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALLTIME =
    3848;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODRETURNSTATUS =
    3849;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_FINALRESULTDATA = 3850;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE = 3863;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE_INPUTARGUMENTS = 3864;

const int UA_NS0ID_CONDITIONTYPE_EVENTID = 3865;

const int UA_NS0ID_CONDITIONTYPE_EVENTTYPE = 3866;

const int UA_NS0ID_CONDITIONTYPE_SOURCENODE = 3867;

const int UA_NS0ID_CONDITIONTYPE_SOURCENAME = 3868;

const int UA_NS0ID_CONDITIONTYPE_TIME = 3869;

const int UA_NS0ID_CONDITIONTYPE_RECEIVETIME = 3870;

const int UA_NS0ID_CONDITIONTYPE_LOCALTIME = 3871;

const int UA_NS0ID_CONDITIONTYPE_MESSAGE = 3872;

const int UA_NS0ID_CONDITIONTYPE_SEVERITY = 3873;

const int UA_NS0ID_CONDITIONTYPE_RETAIN = 3874;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH = 3875;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 3876;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTID = 3969;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTTYPE = 3970;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENODE = 3971;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENAME = 3972;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_TIME = 3973;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_RECEIVETIME = 3974;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_LOCALTIME = 3975;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_MESSAGE = 3976;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SEVERITY = 3977;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTID = 3978;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTTYPE = 3979;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENODE = 3980;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENAME = 3981;

const int UA_NS0ID_REFRESHENDEVENTTYPE_TIME = 3982;

const int UA_NS0ID_REFRESHENDEVENTTYPE_RECEIVETIME = 3983;

const int UA_NS0ID_REFRESHENDEVENTTYPE_LOCALTIME = 3984;

const int UA_NS0ID_REFRESHENDEVENTTYPE_MESSAGE = 3985;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SEVERITY = 3986;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTID = 3987;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTTYPE = 3988;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENODE = 3989;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENAME = 3990;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_TIME = 3991;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_RECEIVETIME = 3992;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_LOCALTIME = 3993;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_MESSAGE = 3994;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SEVERITY = 3995;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTID = 3996;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTTYPE = 3997;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENODE = 3998;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENAME = 3999;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_TIME = 4000;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_RECEIVETIME = 4001;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_LOCALTIME = 4002;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_MESSAGE = 4003;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SEVERITY = 4004;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_ACTIONTIMESTAMP = 4005;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_STATUS = 4006;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SERVERID = 4007;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTAUDITENTRYID = 4008;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTUSERID = 4009;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_METHODID = 4010;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_INPUTARGUMENTS = 4011;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTID = 4106;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTTYPE = 4107;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENODE = 4108;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENAME = 4109;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_TIME = 4110;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_RECEIVETIME = 4111;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_LOCALTIME = 4112;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_MESSAGE = 4113;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SEVERITY = 4114;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_ACTIONTIMESTAMP = 4115;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_STATUS = 4116;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SERVERID = 4117;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTAUDITENTRYID = 4118;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTUSERID = 4119;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_METHODID = 4120;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_INPUTARGUMENTS = 4121;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTID = 4170;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTTYPE = 4171;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENODE = 4172;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENAME = 4173;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_TIME = 4174;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_RECEIVETIME = 4175;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_LOCALTIME = 4176;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_MESSAGE = 4177;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SEVERITY = 4178;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_ACTIONTIMESTAMP = 4179;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_STATUS = 4180;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SERVERID = 4181;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTAUDITENTRYID = 4182;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTUSERID = 4183;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_METHODID = 4184;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_INPUTARGUMENTS = 4185;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTID = 4188;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTTYPE = 4189;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENODE = 4190;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENAME = 4191;

const int UA_NS0ID_DIALOGCONDITIONTYPE_TIME = 4192;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RECEIVETIME = 4193;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LOCALTIME = 4194;

const int UA_NS0ID_DIALOGCONDITIONTYPE_MESSAGE = 4195;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SEVERITY = 4196;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RETAIN = 4197;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH = 4198;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 4199;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTID = 5113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTTYPE = 5114;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENODE = 5115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENAME = 5116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_TIME = 5117;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RECEIVETIME = 5118;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LOCALTIME = 5119;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_MESSAGE = 5120;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SEVERITY = 5121;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RETAIN = 5122;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH = 5123;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    5124;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTID = 5540;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTTYPE = 5541;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENODE = 5542;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENAME = 5543;

const int UA_NS0ID_ALARMCONDITIONTYPE_TIME = 5544;

const int UA_NS0ID_ALARMCONDITIONTYPE_RECEIVETIME = 5545;

const int UA_NS0ID_ALARMCONDITIONTYPE_LOCALTIME = 5546;

const int UA_NS0ID_ALARMCONDITIONTYPE_MESSAGE = 5547;

const int UA_NS0ID_ALARMCONDITIONTYPE_SEVERITY = 5548;

const int UA_NS0ID_ALARMCONDITIONTYPE_RETAIN = 5549;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH = 5550;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 5551;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE = 6088;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_ID = 6089;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NAME = 6090;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 6091;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    6092;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION = 6093;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_ID = 6094;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NAME = 6095;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 6096;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 6097;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED_STATENUMBER = 6098;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED_STATENUMBER = 6100;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED_STATENUMBER = 6101;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE = 6102;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE_INPUTARGUMENTS = 6103;

const int UA_NS0ID_LIMITALARMTYPE_EVENTID = 6116;

const int UA_NS0ID_LIMITALARMTYPE_EVENTTYPE = 6117;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENODE = 6118;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENAME = 6119;

const int UA_NS0ID_LIMITALARMTYPE_TIME = 6120;

const int UA_NS0ID_LIMITALARMTYPE_RECEIVETIME = 6121;

const int UA_NS0ID_LIMITALARMTYPE_LOCALTIME = 6122;

const int UA_NS0ID_LIMITALARMTYPE_MESSAGE = 6123;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITY = 6124;

const int UA_NS0ID_LIMITALARMTYPE_RETAIN = 6125;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH = 6126;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 6127;

const int UA_NS0ID_IDTYPE_ENUMSTRINGS = 7591;

const int UA_NS0ID_ENUMVALUETYPE = 7594;

const int UA_NS0ID_MESSAGESECURITYMODE_ENUMSTRINGS = 7595;

const int UA_NS0ID_USERTOKENTYPE_ENUMSTRINGS = 7596;

const int UA_NS0ID_APPLICATIONTYPE_ENUMSTRINGS = 7597;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE_ENUMSTRINGS = 7598;

const int UA_NS0ID_BROWSEDIRECTION_ENUMSTRINGS = 7603;

const int UA_NS0ID_FILTEROPERATOR_ENUMSTRINGS = 7605;

const int UA_NS0ID_TIMESTAMPSTORETURN_ENUMSTRINGS = 7606;

const int UA_NS0ID_MONITORINGMODE_ENUMSTRINGS = 7608;

const int UA_NS0ID_DATACHANGETRIGGER_ENUMSTRINGS = 7609;

const int UA_NS0ID_DEADBANDTYPE_ENUMSTRINGS = 7610;

const int UA_NS0ID_REDUNDANCYSUPPORT_ENUMSTRINGS = 7611;

const int UA_NS0ID_SERVERSTATE_ENUMSTRINGS = 7612;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT_ENUMSTRINGS = 7614;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTXML = 7616;

const int UA_NS0ID_OPCUA_BINARYSCHEMA = 7617;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEVERSION = 7618;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NAMESPACEURI = 7619;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT = 7650;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DATATYPEVERSION = 7651;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 7652;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE = 7656;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 7657;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 7658;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT = 7659;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DATATYPEVERSION = 7660;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 7661;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY = 7662;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 7663;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 7664;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION = 7665;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION =
    7666;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT =
    7667;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION = 7668;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION =
    7669;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT =
    7670;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN = 7671;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 7672;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7673;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN = 7674;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION =
    7675;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7676;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN = 7677;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION =
    7678;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7679;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN = 7680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 7681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT =
    7682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN = 7683;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION =
    7684;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7685;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION = 7686;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION =
    7687;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT =
    7688;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO = 7692;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DATATYPEVERSION = 7693;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 7694;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE = 7698;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION =
    7699;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT =
    7700;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM = 7728;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DATATYPEVERSION = 7729;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 7730;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM = 7731;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 7732;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT =
    7733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM = 7734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DATATYPEVERSION = 7735;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 7736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM = 7737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION =
    7738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT =
    7739;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER = 7782;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 7783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT =
    7784;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT = 7929;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION =
    7930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT =
    7931;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER = 7932;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DATATYPEVERSION = 7933;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 7934;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND = 7935;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DATATYPEVERSION = 7936;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 7937;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND = 7938;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 7939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 7940;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND = 7941;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DATATYPEVERSION = 7942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 7943;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND = 7944;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 7945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    7946;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND = 7947;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION =
    7948;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    7949;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT = 8004;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8005;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8006;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER = 8067;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8068;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT =
    8069;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER = 8073;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DATATYPEVERSION = 8074;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8075;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION = 8076;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION =
    8077;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT =
    8078;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST = 8172;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION =
    8173;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT =
    8174;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE = 8208;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION =
    8209;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT =
    8210;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE =
    8211;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8212;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8214;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION =
    8215;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT =
    8216;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE = 8217;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION =
    8218;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT =
    8219;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8220;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8221;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8222;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8223;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8224;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8225;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE = 8226;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION =
    8227;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT =
    8228;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8229;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8230;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8231;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8232;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8233;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8234;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8235;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8236;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8237;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE = 8238;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DATATYPEVERSION = 8239;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DICTIONARYFRAGMENT = 8240;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION = 8241;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DATATYPEVERSION = 8242;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8243;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION = 8244;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DATATYPEVERSION = 8245;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8246;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8247;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION =
    8248;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT =
    8249;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTBINARY = 8251;

const int UA_NS0ID_OPCUA_XMLSCHEMA = 8252;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEVERSION = 8253;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NAMESPACEURI = 8254;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT = 8285;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DATATYPEVERSION = 8286;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 8287;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE = 8291;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 8292;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 8293;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT = 8294;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DATATYPEVERSION = 8295;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 8296;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY = 8297;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 8298;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 8299;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION = 8300;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION =
    8301;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT =
    8302;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION = 8303;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION = 8304;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT =
    8305;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN = 8306;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 8307;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT = 8308;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN = 8309;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION =
    8310;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8311;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN = 8312;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION = 8313;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8314;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN = 8315;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 8316;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT = 8317;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN = 8318;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION = 8319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION = 8321;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION = 8322;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT =
    8323;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO = 8327;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DATATYPEVERSION = 8328;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 8329;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE = 8333;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION =
    8334;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT =
    8335;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM = 8363;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DATATYPEVERSION = 8364;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 8365;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM = 8366;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 8367;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT = 8368;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM = 8369;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DATATYPEVERSION = 8370;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 8371;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM = 8372;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION = 8373;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT =
    8374;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER = 8417;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 8418;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT = 8419;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT = 8564;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION = 8565;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT =
    8566;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER = 8567;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DATATYPEVERSION = 8568;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 8569;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND = 8570;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DATATYPEVERSION = 8571;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 8572;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND = 8573;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 8574;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 8575;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND = 8576;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DATATYPEVERSION = 8577;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 8578;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND = 8579;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 8580;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 8581;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND = 8582;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION =
    8583;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    8584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT = 8639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8640;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8641;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER = 8702;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8703;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT = 8704;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER = 8708;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DATATYPEVERSION = 8709;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION = 8711;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION =
    8712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT =
    8713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST = 8807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION = 8808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT =
    8809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE = 8843;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION =
    8844;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT =
    8845;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 8846;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8847;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8848;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8849;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION =
    8850;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT =
    8851;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE = 8852;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION = 8853;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT =
    8854;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8855;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8856;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8857;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8858;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8859;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE = 8861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION =
    8862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT =
    8863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8864;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8865;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8867;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8868;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8870;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8871;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8872;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE = 8873;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DATATYPEVERSION = 8874;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DICTIONARYFRAGMENT = 8875;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION = 8876;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DATATYPEVERSION = 8877;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8878;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION = 8879;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DATATYPEVERSION = 8880;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8881;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8882;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION =
    8883;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT =
    8884;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXLIFETIMECOUNT = 8888;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_LATEPUBLISHREQUESTCOUNT = 8889;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTKEEPALIVECOUNT = 8890;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTLIFETIMECOUNT = 8891;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_UNACKNOWLEDGEDMESSAGECOUNT =
    8892;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISCARDEDMESSAGECOUNT = 8893;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITOREDITEMCOUNT = 8894;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMCOUNT =
    8895;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITORINGQUEUEOVERFLOWCOUNT =
    8896;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NEXTSEQUENCENUMBER = 8897;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    8898;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TOTALREQUESTCOUNT = 8900;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTQUEUEOVERFLOWCOUNT = 8902;

const int UA_NS0ID_TIMEZONEDATATYPE = 8912;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTXML = 8913;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE = 8914;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8915;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT =
    8916;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTBINARY = 8917;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE = 8918;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8919;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT = 8920;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE = 8927;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTID = 8928;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTTYPE = 8929;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENODE = 8930;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENAME = 8931;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_TIME = 8932;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_RECEIVETIME = 8933;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_LOCALTIME = 8934;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_MESSAGE = 8935;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SEVERITY = 8936;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_ACTIONTIMESTAMP = 8937;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_STATUS = 8938;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SERVERID = 8939;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTAUDITENTRYID = 8940;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTUSERID = 8941;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_METHODID = 8942;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_INPUTARGUMENTS = 8943;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE = 8944;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTID = 8945;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTTYPE = 8946;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENODE = 8947;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENAME = 8948;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_TIME = 8949;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_RECEIVETIME = 8950;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_LOCALTIME = 8951;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_MESSAGE = 8952;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SEVERITY = 8953;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_ACTIONTIMESTAMP = 8954;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_STATUS = 8955;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SERVERID = 8956;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTAUDITENTRYID = 8957;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTUSERID = 8958;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_METHODID = 8959;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_INPUTARGUMENTS = 8960;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE = 8961;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTID = 8962;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTTYPE = 8963;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENODE = 8964;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENAME = 8965;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_TIME = 8966;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_RECEIVETIME = 8967;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_LOCALTIME = 8968;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_MESSAGE = 8969;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SEVERITY = 8970;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_ACTIONTIMESTAMP = 8971;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_STATUS = 8972;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SERVERID = 8973;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTAUDITENTRYID = 8974;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTUSERID = 8975;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_METHODID = 8976;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_INPUTARGUMENTS = 8977;

const int UA_NS0ID_TWOSTATEVARIABLETYPE = 8995;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_ID = 8996;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NAME = 8997;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NUMBER = 8998;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 8999;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRANSITIONTIME = 9000;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVETRANSITIONTIME = 9001;

const int UA_NS0ID_CONDITIONVARIABLETYPE = 9002;

const int UA_NS0ID_CONDITIONVARIABLETYPE_SOURCETIMESTAMP = 9003;

const int UA_NS0ID_HASTRUESUBSTATE = 9004;

const int UA_NS0ID_HASFALSESUBSTATE = 9005;

const int UA_NS0ID_HASCONDITION = 9006;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE = 9007;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE_INPUTARGUMENTS = 9008;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONNAME = 9009;

const int UA_NS0ID_CONDITIONTYPE_BRANCHID = 9010;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE = 9011;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_ID = 9012;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NAME = 9013;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NUMBER = 9014;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9015;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9016;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9017;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9018;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9019;

const int UA_NS0ID_CONDITIONTYPE_QUALITY = 9020;

const int UA_NS0ID_CONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9021;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY = 9022;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9023;

const int UA_NS0ID_CONDITIONTYPE_COMMENT = 9024;

const int UA_NS0ID_CONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9025;

const int UA_NS0ID_CONDITIONTYPE_CLIENTUSERID = 9026;

const int UA_NS0ID_CONDITIONTYPE_ENABLE = 9027;

const int UA_NS0ID_CONDITIONTYPE_DISABLE = 9028;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT = 9029;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9030;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE = 9031;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE_INPUTARGUMENTS = 9032;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONNAME = 9033;

const int UA_NS0ID_DIALOGCONDITIONTYPE_BRANCHID = 9034;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE = 9035;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_ID = 9036;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NAME = 9037;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9038;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9039;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9040;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9041;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9042;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9043;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY = 9044;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9045;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY = 9046;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9047;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT = 9048;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9049;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CLIENTUSERID = 9050;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLE = 9051;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DISABLE = 9052;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT = 9053;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9054;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE = 9055;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_ID = 9056;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NAME = 9057;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NUMBER = 9058;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVEDISPLAYNAME = 9059;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRANSITIONTIME = 9060;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVETRANSITIONTIME =
    9061;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRUESTATE = 9062;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_FALSESTATE = 9063;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPONSEOPTIONSET = 9064;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DEFAULTRESPONSE = 9065;

const int UA_NS0ID_DIALOGCONDITIONTYPE_OKRESPONSE = 9066;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CANCELRESPONSE = 9067;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTRESPONSE = 9068;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND = 9069;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND_INPUTARGUMENTS = 9070;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONNAME = 9071;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_BRANCHID = 9072;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE = 9073;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_ID = 9074;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NAME = 9075;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NUMBER = 9076;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9077;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9078;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9079;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9080;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9081;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY = 9082;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9083;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY = 9084;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9085;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT = 9086;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9087;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CLIENTUSERID = 9088;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLE = 9089;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_DISABLE = 9090;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT = 9091;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS =
    9092;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE = 9093;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_ID = 9094;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NAME = 9095;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NUMBER = 9096;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9097;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME =
    9098;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9099;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9100;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9101;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE = 9102;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_ID = 9103;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NAME = 9104;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9105;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9106;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9107;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9108;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9109;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE =
    9110;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE = 9111;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9112;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM = 9113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9114;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVETIME = 9115;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONNAME = 9116;

const int UA_NS0ID_ALARMCONDITIONTYPE_BRANCHID = 9117;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE = 9118;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_ID = 9119;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NAME = 9120;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9121;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9122;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9123;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9124;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9125;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9126;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY = 9127;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9128;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY = 9129;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9130;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT = 9131;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9132;

const int UA_NS0ID_ALARMCONDITIONTYPE_CLIENTUSERID = 9133;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLE = 9134;

const int UA_NS0ID_ALARMCONDITIONTYPE_DISABLE = 9135;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT = 9136;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9137;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE = 9138;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_ID = 9139;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NAME = 9140;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NUMBER = 9141;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9142;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME = 9143;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9144;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9145;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9146;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE = 9147;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_ID = 9148;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NAME = 9149;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9150;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9151;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9152;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9153;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9154;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE = 9155;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE = 9156;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9157;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM = 9158;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9159;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE = 9160;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_ID = 9161;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NAME = 9162;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NUMBER = 9163;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9164;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRANSITIONTIME = 9165;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9166;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRUESTATE = 9167;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_FALSESTATE = 9168;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE = 9169;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_ID = 9170;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NAME = 9171;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NUMBER = 9172;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9173;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9174;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9175;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRUESTATE = 9176;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_FALSESTATE = 9177;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE = 9178;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE = 9179;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9180;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9181;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9182;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9183;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION = 9184;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9185;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9186;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9187;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9188;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVETIME = 9189;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVE = 9211;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9212;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE = 9213;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9214;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDORSHELVED = 9215;

const int UA_NS0ID_ALARMCONDITIONTYPE_MAXTIMESHELVED = 9216;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONNAME = 9217;

const int UA_NS0ID_LIMITALARMTYPE_BRANCHID = 9218;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE = 9219;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_ID = 9220;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NAME = 9221;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9222;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9223;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9224;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9225;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9226;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9227;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY = 9228;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9229;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY = 9230;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9231;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT = 9232;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9233;

const int UA_NS0ID_LIMITALARMTYPE_CLIENTUSERID = 9234;

const int UA_NS0ID_LIMITALARMTYPE_ENABLE = 9235;

const int UA_NS0ID_LIMITALARMTYPE_DISABLE = 9236;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT = 9237;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9238;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE = 9239;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_ID = 9240;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NAME = 9241;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NUMBER = 9242;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9243;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9244;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9245;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9246;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9247;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE = 9248;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_ID = 9249;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9250;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9251;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9252;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9253;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9254;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9255;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9256;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE = 9257;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9258;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM = 9259;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9260;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE = 9261;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_ID = 9262;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NAME = 9263;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NUMBER = 9264;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9265;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9266;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9267;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9268;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9269;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE = 9270;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9271;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9272;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9273;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9274;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9275;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9276;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9277;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9278;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE = 9279;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9280;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9281;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9282;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9283;

const int
    UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9284;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9285;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9286;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9287;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9288;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9289;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9290;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9312;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9313;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9314;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9315;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDORSHELVED = 9316;

const int UA_NS0ID_LIMITALARMTYPE_MAXTIMESHELVED = 9317;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE = 9318;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE = 9319;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_ID = 9320;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NAME = 9321;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 9322;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9323;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION = 9324;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_ID = 9325;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NAME = 9326;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 9327;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME =
    9328;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH = 9329;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH_STATENUMBER = 9330;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH = 9331;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH_STATENUMBER = 9332;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW = 9333;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW_STATENUMBER = 9334;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW = 9335;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW_STATENUMBER = 9336;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW = 9337;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW = 9338;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH = 9339;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH = 9340;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE = 9341;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTID = 9342;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9343;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENODE = 9344;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENAME = 9345;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_TIME = 9346;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9347;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOCALTIME = 9348;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MESSAGE = 9349;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITY = 9350;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9351;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BRANCHID = 9352;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RETAIN = 9353;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9354;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9355;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9356;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9357;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9358;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9359;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9360;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9361;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9362;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY = 9363;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9364;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9365;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9366;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT = 9367;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9368;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9369;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLE = 9370;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_DISABLE = 9371;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9372;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9373;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9374;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9375;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9376;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9377;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9378;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9379;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9380;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9381;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9382;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9383;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9384;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9385;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9386;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9387;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9388;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9389;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9390;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9391;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9392;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9393;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9394;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9395;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM = 9396;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9397;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9398;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9399;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9400;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9401;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9402;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9403;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9404;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9405;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9406;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9407;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9408;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9409;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9410;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9411;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9412;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9413;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9414;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9415;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9416;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9417;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9418;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9419;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9420;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9421;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9422;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9423;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9424;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9425;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9426;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9427;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9449;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9450;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9451;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9452;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 9453;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 9454;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE = 9455;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE = 9456;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9457;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9458;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9459;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9460;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION = 9461;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9462;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9463;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9464;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9465;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 9478;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 9479;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLIMIT = 9480;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 9481;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE = 9482;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTID = 9483;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTTYPE = 9484;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENODE = 9485;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENAME = 9486;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_TIME = 9487;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RECEIVETIME = 9488;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOCALTIME = 9489;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MESSAGE = 9490;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITY = 9491;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 9492;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BRANCHID = 9493;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RETAIN = 9494;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 9495;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 9496;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 9497;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 9498;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9499;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9500;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9501;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 9502;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 9503;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY = 9504;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 9505;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 9506;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9507;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT = 9508;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 9509;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 9510;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLE = 9511;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_DISABLE = 9512;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 9513;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9514;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 9515;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9516;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 9517;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 9518;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 9519;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 9520;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9521;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9522;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9523;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 9524;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 9525;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 9526;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 9527;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 9528;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 9529;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9530;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9531;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9532;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9533;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9534;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 9535;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9536;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM = 9537;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 9538;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 9539;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 9540;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 9541;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 9542;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9543;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9544;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9545;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 9546;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 9547;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 9548;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 9549;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 9550;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9551;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9552;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9553;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9554;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9555;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9556;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 9557;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9558;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9559;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9560;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9561;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9562;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9563;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9564;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9565;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9566;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9567;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9568;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 9590;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9591;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9592;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9593;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 9594;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 9595;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE = 9596;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE = 9597;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9598;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9599;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9600;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9601;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION = 9602;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9603;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9604;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9605;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9606;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 9619;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 9620;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLIMIT = 9621;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 9622;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE = 9623;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 9624;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 9625;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 9626;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 9627;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 9628;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 9629;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 9630;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 9631;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 9632;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 9633;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 9634;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 9635;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 9636;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 9637;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 9638;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER = 9639;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9640;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9641;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9642;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE = 9643;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE =
    9644;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 9645;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP =
    9646;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 9647;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9648;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 9649;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP =
    9650;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 9651;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 9652;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 9653;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 9654;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    9655;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 9656;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9657;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 9658;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 9659;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 9660;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 9661;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9662;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    9663;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9664;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE = 9665;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE = 9666;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 9667;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 9668;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME = 9669;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER = 9670;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9671;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9672;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9673;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    9674;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    9675;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 9676;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9677;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 9678;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS = 9679;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 9680;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 9681;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 9682;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 9683;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9684;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    9685;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9686;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE = 9687;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE = 9688;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 9689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 9690;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME = 9691;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9692;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9693;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9694;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9695;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    9696;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    9697;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 9698;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    9699;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9700;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9701;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9702;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9703;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9704;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9705;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9706;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9707;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9708;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    9709;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE = 9731;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    9732;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    9733;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9734;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED = 9735;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 9736;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE = 9737;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE =
    9738;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_ID =
    9739;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME =
    9740;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9741;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9742;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION =
    9743;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_ID =
    9744;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9745;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9746;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9747;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 9760;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 9761;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 9762;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 9763;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE = 9764;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 9765;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 9766;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 9767;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 9768;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_TIME = 9769;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 9770;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 9771;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 9772;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 9773;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 9774;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 9775;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 9776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 9777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 9778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 9779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 9780;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9782;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9783;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE = 9784;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE = 9785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 9786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP = 9787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 9788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 9790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP = 9791;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 9792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 9793;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 9794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 9795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 9797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9798;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 9799;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 9800;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 9801;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 9802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9804;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 9806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 9807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 9808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 9809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 9810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 9811;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9813;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 9817;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9818;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 9819;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS = 9820;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 9821;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 9822;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 9823;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 9824;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9825;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    9826;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9827;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 9828;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE = 9829;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 9830;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 9831;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 9832;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9833;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9834;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9835;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9836;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9837;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    9838;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 9839;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    9840;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9841;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9842;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9843;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9844;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9845;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9846;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9847;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9848;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9849;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    9850;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE = 9872;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    9873;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9874;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9875;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 9876;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 9877;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE = 9878;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE = 9879;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_ID =
    9880;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME =
    9881;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9882;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9883;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION = 9884;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_ID =
    9885;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9886;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9887;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9888;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 9901;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 9902;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 9903;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 9904;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 9905;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE = 9906;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTID = 9907;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9908;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENODE = 9909;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENAME = 9910;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_TIME = 9911;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9912;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOCALTIME = 9913;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MESSAGE = 9914;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITY = 9915;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9916;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BRANCHID = 9917;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RETAIN = 9918;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9919;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9920;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9921;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9922;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9923;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9924;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9925;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9926;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9927;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY = 9928;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9929;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9930;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9931;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT = 9932;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9933;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9934;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLE = 9935;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_DISABLE = 9936;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9937;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9938;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9939;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9940;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9941;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9942;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9943;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9944;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9945;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9946;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9947;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9948;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9949;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9950;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9951;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9952;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9953;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9954;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9955;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9956;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9957;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9958;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9959;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9960;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM = 9961;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9962;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9963;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9964;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9965;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9966;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9967;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9968;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9969;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9970;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9971;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9972;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9973;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9974;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9975;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9976;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9977;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9978;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9979;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9980;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9981;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9982;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9983;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9984;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9985;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9986;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9987;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9988;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9989;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9990;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9991;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9992;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 10014;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10015;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10016;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10017;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 10018;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 10019;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE = 10020;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_ID = 10021;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NAME = 10022;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NUMBER = 10023;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10024;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10025;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10026;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10027;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10028;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE = 10029;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_ID = 10030;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NAME = 10031;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NUMBER = 10032;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10033;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10034;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10035;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRUESTATE = 10036;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_FALSESTATE = 10037;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE = 10038;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_ID = 10039;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NAME = 10040;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NUMBER = 10041;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10042;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRANSITIONTIME = 10043;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10044;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRUESTATE = 10045;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_FALSESTATE = 10046;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE = 10047;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_ID = 10048;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NAME = 10049;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NUMBER = 10050;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10051;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10052;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10053;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRUESTATE = 10054;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_FALSESTATE = 10055;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 10056;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 10057;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLIMIT = 10058;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 10059;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE = 10060;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTID = 10061;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTTYPE = 10062;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENODE = 10063;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENAME = 10064;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_TIME = 10065;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RECEIVETIME = 10066;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOCALTIME = 10067;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MESSAGE = 10068;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITY = 10069;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 10070;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BRANCHID = 10071;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RETAIN = 10072;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 10073;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 10074;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 10075;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 10076;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10077;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10078;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10079;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 10080;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 10081;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY = 10082;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 10083;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 10084;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10085;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT = 10086;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 10087;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 10088;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLE = 10089;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_DISABLE = 10090;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 10091;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10092;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 10093;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10094;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 10095;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 10096;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 10097;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 10098;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10099;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10100;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10101;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 10102;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 10103;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 10104;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 10105;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 10106;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 10107;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10108;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10109;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10110;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10111;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10112;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 10113;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10114;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM = 10115;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 10116;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 10117;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 10118;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 10119;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 10120;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10121;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10122;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10123;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 10124;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 10125;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 10126;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 10127;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 10128;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10129;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10130;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10131;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10132;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10133;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10134;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 10135;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10136;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10137;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10138;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10139;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10140;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10141;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10142;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10143;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10144;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10145;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10146;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 10168;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10169;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10170;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10171;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 10172;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 10173;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE = 10174;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_ID = 10175;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NAME = 10176;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NUMBER = 10177;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10178;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10179;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10180;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10181;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10182;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE = 10183;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_ID = 10184;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NAME = 10185;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NUMBER = 10186;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10187;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10188;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10189;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRUESTATE = 10190;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_FALSESTATE = 10191;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE = 10192;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_ID = 10193;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NAME = 10194;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NUMBER = 10195;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10196;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRANSITIONTIME = 10197;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10198;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRUESTATE = 10199;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_FALSESTATE = 10200;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE = 10201;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_ID = 10202;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NAME = 10203;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NUMBER = 10204;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10205;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10206;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10207;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRUESTATE = 10208;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_FALSESTATE = 10209;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 10210;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 10211;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLIMIT = 10212;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 10213;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE = 10214;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 10215;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 10216;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 10217;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 10218;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 10219;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 10220;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 10221;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 10222;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 10223;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 10224;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 10225;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 10226;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 10227;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 10228;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 10229;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER =
    10230;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10231;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10232;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10233;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE =
    10234;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE =
    10235;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 10236;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP =
    10237;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 10238;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10239;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 10240;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP =
    10241;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 10242;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 10243;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 10244;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 10245;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    10246;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 10247;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10248;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 10249;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 10250;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 10251;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 10252;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10253;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    10254;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10255;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE =
    10256;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE =
    10257;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 10258;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 10259;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME =
    10260;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER =
    10261;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10262;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10263;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10264;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    10265;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    10266;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 10267;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10268;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 10269;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS =
    10270;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 10271;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 10272;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 10273;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 10274;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10275;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10276;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE =
    10278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE =
    10279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 10280;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 10281;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME =
    10282;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    10283;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10284;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10285;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10286;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    10287;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10288;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 10289;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10290;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10291;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10292;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10293;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10294;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10295;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10296;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10297;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10298;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10299;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10300;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE =
    10322;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10323;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    10324;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10325;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED =
    10326;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 10327;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE = 10328;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_ID = 10329;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NAME = 10330;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NUMBER =
    10331;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10332;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10333;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10334;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRUESTATE =
    10335;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_FALSESTATE =
    10336;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE = 10337;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_ID = 10338;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NAME = 10339;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NUMBER = 10340;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10341;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRANSITIONTIME =
    10342;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10343;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRUESTATE =
    10344;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_FALSESTATE =
    10345;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE = 10346;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_ID = 10347;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NAME = 10348;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NUMBER = 10349;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10350;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRANSITIONTIME =
    10351;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10352;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRUESTATE = 10353;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_FALSESTATE =
    10354;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE = 10355;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_ID = 10356;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NAME = 10357;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NUMBER = 10358;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10359;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10360;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10361;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRUESTATE =
    10362;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_FALSESTATE =
    10363;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 10364;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 10365;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 10366;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 10367;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE = 10368;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 10369;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 10370;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 10371;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 10372;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_TIME = 10373;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 10374;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 10375;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 10376;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 10377;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 10378;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 10379;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 10380;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 10381;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 10382;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 10383;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 10384;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10385;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10386;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10387;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE =
    10388;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE =
    10389;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 10390;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP =
    10391;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 10392;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10393;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 10394;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP =
    10395;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 10396;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 10397;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 10398;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 10399;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    10400;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 10401;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10402;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 10403;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 10404;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 10405;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 10406;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10407;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    10408;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10409;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 10410;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 10411;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 10412;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 10413;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 10414;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 10415;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10416;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10417;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10418;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    10419;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    10420;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 10421;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10422;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 10423;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS =
    10424;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 10425;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 10426;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 10427;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 10428;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10429;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10430;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10431;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 10432;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE =
    10433;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 10434;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 10435;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 10436;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    10437;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10438;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10439;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10440;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    10441;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10442;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 10443;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10444;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10445;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10446;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10447;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10448;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10449;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10450;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10451;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10452;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10453;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10454;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE =
    10476;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10477;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    10478;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10479;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 10480;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 10481;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE = 10482;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_ID = 10483;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NAME = 10484;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NUMBER = 10485;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10486;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10487;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10488;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRUESTATE =
    10489;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_FALSESTATE =
    10490;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE = 10491;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_ID = 10492;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NAME = 10493;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NUMBER = 10494;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10495;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRANSITIONTIME =
    10496;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10497;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRUESTATE = 10498;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_FALSESTATE = 10499;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE = 10500;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_ID = 10501;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NAME = 10502;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NUMBER = 10503;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10504;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRANSITIONTIME =
    10505;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10506;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRUESTATE = 10507;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_FALSESTATE = 10508;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE = 10509;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_ID = 10510;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NAME = 10511;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NUMBER = 10512;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10513;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10514;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10515;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRUESTATE = 10516;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_FALSESTATE =
    10517;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 10518;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 10519;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 10520;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 10521;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 10522;

const int UA_NS0ID_DISCRETEALARMTYPE = 10523;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTID = 10524;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTTYPE = 10525;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENODE = 10526;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENAME = 10527;

const int UA_NS0ID_DISCRETEALARMTYPE_TIME = 10528;

const int UA_NS0ID_DISCRETEALARMTYPE_RECEIVETIME = 10529;

const int UA_NS0ID_DISCRETEALARMTYPE_LOCALTIME = 10530;

const int UA_NS0ID_DISCRETEALARMTYPE_MESSAGE = 10531;

const int UA_NS0ID_DISCRETEALARMTYPE_SEVERITY = 10532;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONNAME = 10533;

const int UA_NS0ID_DISCRETEALARMTYPE_BRANCHID = 10534;

const int UA_NS0ID_DISCRETEALARMTYPE_RETAIN = 10535;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE = 10536;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_ID = 10537;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NAME = 10538;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NUMBER = 10539;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10540;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10541;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10542;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRUESTATE = 10543;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_FALSESTATE = 10544;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY = 10545;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY_SOURCETIMESTAMP = 10546;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY = 10547;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10548;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT = 10549;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT_SOURCETIMESTAMP = 10550;

const int UA_NS0ID_DISCRETEALARMTYPE_CLIENTUSERID = 10551;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLE = 10552;

const int UA_NS0ID_DISCRETEALARMTYPE_DISABLE = 10553;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT = 10554;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10555;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH = 10556;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10557;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE = 10558;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_ID = 10559;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NAME = 10560;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NUMBER = 10561;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10562;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10563;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10564;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRUESTATE = 10565;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_FALSESTATE = 10566;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE = 10567;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_ID = 10568;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NAME = 10569;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NUMBER = 10570;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10571;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10572;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10573;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10574;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10575;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE = 10576;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10577;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM = 10578;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM_INPUTARGUMENTS = 10579;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE = 10580;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_ID = 10581;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NAME = 10582;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NUMBER = 10583;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10584;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10585;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10586;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRUESTATE = 10587;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_FALSESTATE = 10588;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE = 10589;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_ID = 10590;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NAME = 10591;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10592;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10593;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10594;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10595;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10596;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10597;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE = 10598;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10599;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10600;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10601;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10602;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10603;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10604;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10605;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10606;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10607;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10608;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10609;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVE = 10631;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10632;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10633;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10634;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDORSHELVED = 10635;

const int UA_NS0ID_DISCRETEALARMTYPE_MAXTIMESHELVED = 10636;

const int UA_NS0ID_OFFNORMALALARMTYPE = 10637;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTID = 10638;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTTYPE = 10639;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENODE = 10640;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENAME = 10641;

const int UA_NS0ID_OFFNORMALALARMTYPE_TIME = 10642;

const int UA_NS0ID_OFFNORMALALARMTYPE_RECEIVETIME = 10643;

const int UA_NS0ID_OFFNORMALALARMTYPE_LOCALTIME = 10644;

const int UA_NS0ID_OFFNORMALALARMTYPE_MESSAGE = 10645;

const int UA_NS0ID_OFFNORMALALARMTYPE_SEVERITY = 10646;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONNAME = 10647;

const int UA_NS0ID_OFFNORMALALARMTYPE_BRANCHID = 10648;

const int UA_NS0ID_OFFNORMALALARMTYPE_RETAIN = 10649;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE = 10650;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_ID = 10651;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 10652;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 10653;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10654;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10655;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10656;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 10657;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 10658;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY = 10659;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 10660;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY = 10661;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10662;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT = 10663;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 10664;

const int UA_NS0ID_OFFNORMALALARMTYPE_CLIENTUSERID = 10665;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLE = 10666;

const int UA_NS0ID_OFFNORMALALARMTYPE_DISABLE = 10667;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT = 10668;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10669;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH = 10670;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10671;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE = 10672;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_ID = 10673;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NAME = 10674;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 10675;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10676;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10677;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10678;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 10679;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 10680;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE = 10681;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 10682;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 10683;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 10684;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10685;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10686;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10687;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10688;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10689;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE = 10690;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10691;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM = 10692;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 10693;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE = 10694;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_ID = 10695;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NAME = 10696;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 10697;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10698;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10699;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10700;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 10701;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 10702;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE = 10703;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 10704;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 10705;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10706;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10707;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10708;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10709;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10710;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10711;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE = 10712;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10713;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10714;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10715;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10716;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10717;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10718;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10719;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10720;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10721;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10722;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10723;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 10745;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10746;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10747;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10748;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 10749;

const int UA_NS0ID_OFFNORMALALARMTYPE_MAXTIMESHELVED = 10750;

const int UA_NS0ID_TRIPALARMTYPE = 10751;

const int UA_NS0ID_TRIPALARMTYPE_EVENTID = 10752;

const int UA_NS0ID_TRIPALARMTYPE_EVENTTYPE = 10753;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENODE = 10754;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENAME = 10755;

const int UA_NS0ID_TRIPALARMTYPE_TIME = 10756;

const int UA_NS0ID_TRIPALARMTYPE_RECEIVETIME = 10757;

const int UA_NS0ID_TRIPALARMTYPE_LOCALTIME = 10758;

const int UA_NS0ID_TRIPALARMTYPE_MESSAGE = 10759;

const int UA_NS0ID_TRIPALARMTYPE_SEVERITY = 10760;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONNAME = 10761;

const int UA_NS0ID_TRIPALARMTYPE_BRANCHID = 10762;

const int UA_NS0ID_TRIPALARMTYPE_RETAIN = 10763;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE = 10764;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_ID = 10765;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NAME = 10766;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NUMBER = 10767;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10768;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10769;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10770;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRUESTATE = 10771;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_FALSESTATE = 10772;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY = 10773;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY_SOURCETIMESTAMP = 10774;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY = 10775;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10776;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT = 10777;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT_SOURCETIMESTAMP = 10778;

const int UA_NS0ID_TRIPALARMTYPE_CLIENTUSERID = 10779;

const int UA_NS0ID_TRIPALARMTYPE_ENABLE = 10780;

const int UA_NS0ID_TRIPALARMTYPE_DISABLE = 10781;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT = 10782;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10783;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH = 10784;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10785;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE = 10786;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_ID = 10787;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NAME = 10788;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NUMBER = 10789;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10790;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10791;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10792;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRUESTATE = 10793;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_FALSESTATE = 10794;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE = 10795;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_ID = 10796;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NAME = 10797;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NUMBER = 10798;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10799;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10800;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10801;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10802;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10803;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE = 10804;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10805;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM = 10806;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM_INPUTARGUMENTS = 10807;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE = 10808;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_ID = 10809;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NAME = 10810;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NUMBER = 10811;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10812;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10813;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10814;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRUESTATE = 10815;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_FALSESTATE = 10816;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE = 10817;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_ID = 10818;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NAME = 10819;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10820;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10821;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10822;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10823;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10824;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10825;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE = 10826;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10827;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10828;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10829;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10830;

const int
    UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10831;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10832;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10833;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10834;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10835;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10836;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10837;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVE = 10859;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10860;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10861;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10862;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDORSHELVED = 10863;

const int UA_NS0ID_TRIPALARMTYPE_MAXTIMESHELVED = 10864;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE = 11093;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTID = 11094;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTTYPE = 11095;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENODE = 11096;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENAME = 11097;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_TIME = 11098;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_RECEIVETIME = 11099;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_LOCALTIME = 11100;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_MESSAGE = 11101;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SEVERITY = 11102;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_ACTIONTIMESTAMP = 11103;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_STATUS = 11104;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SERVERID = 11105;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTAUDITENTRYID = 11106;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTUSERID = 11107;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_METHODID = 11108;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_INPUTARGUMENTS = 11109;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRUESTATE = 11110;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_FALSESTATE = 11111;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSID = 11112;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSNAME = 11113;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSID = 11114;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSNAME = 11115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSID = 11116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSNAME = 11117;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSID = 11118;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSNAME = 11119;

const int UA_NS0ID_ALARMCONDITIONTYPE_INPUTNODE = 11120;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSID = 11121;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSNAME = 11122;

const int UA_NS0ID_LIMITALARMTYPE_INPUTNODE = 11123;

const int UA_NS0ID_LIMITALARMTYPE_HIGHHIGHLIMIT = 11124;

const int UA_NS0ID_LIMITALARMTYPE_HIGHLIMIT = 11125;

const int UA_NS0ID_LIMITALARMTYPE_LOWLIMIT = 11126;

const int UA_NS0ID_LIMITALARMTYPE_LOWLOWLIMIT = 11127;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11128;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11129;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_INPUTNODE = 11130;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11131;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11132;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_INPUTNODE = 11133;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11134;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11135;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11136;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11137;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11138;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11139;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11140;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11141;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_INPUTNODE = 11142;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11143;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11144;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_INPUTNODE = 11145;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11146;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11147;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11148;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11149;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11150;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11151;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSID = 11152;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSNAME = 11153;

const int UA_NS0ID_DISCRETEALARMTYPE_INPUTNODE = 11154;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSID = 11155;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11156;

const int UA_NS0ID_OFFNORMALALARMTYPE_INPUTNODE = 11157;

const int UA_NS0ID_OFFNORMALALARMTYPE_NORMALSTATE = 11158;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSID = 11159;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSNAME = 11160;

const int UA_NS0ID_TRIPALARMTYPE_INPUTNODE = 11161;

const int UA_NS0ID_TRIPALARMTYPE_NORMALSTATE = 11162;

const int UA_NS0ID_BASECONDITIONCLASSTYPE = 11163;

const int UA_NS0ID_PROCESSCONDITIONCLASSTYPE = 11164;

const int UA_NS0ID_MAINTENANCECONDITIONCLASSTYPE = 11165;

const int UA_NS0ID_SYSTEMCONDITIONCLASSTYPE = 11166;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD =
    11168;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATABAD =
    11169;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATAGOOD =
    11170;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION =
    11171;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 11172;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE = 11187;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_TREATUNCERTAINASBAD = 11188;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATABAD = 11189;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATAGOOD = 11190;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_USESLOPEDEXTRAPOLATION = 11191;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES = 11192;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYDATACAPABILITY =
    11193;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTDATACAPABILITY = 11196;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEDATACAPABILITY = 11197;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEDATACAPABILITY = 11198;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETERAWCAPABILITY = 11199;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEATTIMECAPABILITY = 11200;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_AGGREGATEFUNCTIONS = 11201;

const int UA_NS0ID_HACONFIGURATION = 11202;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION = 11203;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD =
    11204;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATABAD =
    11205;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATAGOOD =
    11206;

const int
    UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION =
    11207;

const int UA_NS0ID_HACONFIGURATION_STEPPED = 11208;

const int UA_NS0ID_HACONFIGURATION_DEFINITION = 11209;

const int UA_NS0ID_HACONFIGURATION_MAXTIMEINTERVAL = 11210;

const int UA_NS0ID_HACONFIGURATION_MINTIMEINTERVAL = 11211;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATION = 11212;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATIONFORMAT = 11213;

const int UA_NS0ID_ANNOTATIONS = 11214;

const int UA_NS0ID_HISTORICALEVENTFILTER = 11215;

const int UA_NS0ID_MODIFICATIONINFO = 11216;

const int UA_NS0ID_HISTORYMODIFIEDDATA = 11217;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTXML = 11218;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTXML = 11219;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTBINARY = 11226;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTBINARY = 11227;

const int UA_NS0ID_HISTORYUPDATETYPE = 11234;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE = 11238;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_DEFINITION = 11239;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEPRECISION = 11240;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_ENUMVALUES = 11241;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYEVENTSCAPABILITY =
    11242;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNDATAVALUES = 11268;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNEVENTVALUES = 11269;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTANNOTATIONCAPABILITY =
    11270;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNDATAVALUES = 11273;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNEVENTVALUES = 11274;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTANNOTATIONCAPABILITY = 11275;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTEVENTCAPABILITY = 11278;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEEVENTCAPABILITY = 11279;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEEVENTCAPABILITY = 11280;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTEVENTCAPABILITY = 11281;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEEVENTCAPABILITY = 11282;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEEVENTCAPABILITY = 11283;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE2 = 11285;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM2 = 11286;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM2 = 11287;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE2 = 11288;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY2 = 11292;

const int UA_NS0ID_PERFORMUPDATETYPE = 11293;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS = 11295;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTXML = 11296;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTBINARY = 11300;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL2 = 11304;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME2 = 11305;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME2 = 11306;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATEZERO = 11307;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATENONZERO = 11308;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_CURRENTSERVERID = 11312;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANTSERVERARRAY = 11313;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERURIARRAY = 11314;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER =
    11322;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER =
    11323;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED_TRANSITIONNUMBER =
    11324;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER =
    11325;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED_TRANSITIONNUMBER =
    11326;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER =
    11327;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW_TRANSITIONNUMBER =
    11340;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW_TRANSITIONNUMBER =
    11341;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH_TRANSITIONNUMBER =
    11342;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH_TRANSITIONNUMBER =
    11343;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONSAMPLE = 11426;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONPOPULATION = 11427;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCESAMPLE = 11428;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCEPOPULATION = 11429;

const int UA_NS0ID_ENUMSTRINGS = 11432;

const int UA_NS0ID_VALUEASTEXT = 11433;

const int UA_NS0ID_PROGRESSEVENTTYPE = 11436;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTID = 11437;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTTYPE = 11438;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENODE = 11439;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENAME = 11440;

const int UA_NS0ID_PROGRESSEVENTTYPE_TIME = 11441;

const int UA_NS0ID_PROGRESSEVENTTYPE_RECEIVETIME = 11442;

const int UA_NS0ID_PROGRESSEVENTTYPE_LOCALTIME = 11443;

const int UA_NS0ID_PROGRESSEVENTTYPE_MESSAGE = 11444;

const int UA_NS0ID_PROGRESSEVENTTYPE_SEVERITY = 11445;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE = 11446;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTID = 11447;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTTYPE = 11448;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENODE = 11449;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENAME = 11450;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_TIME = 11451;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_RECEIVETIME = 11452;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_LOCALTIME = 11453;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_MESSAGE = 11454;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SEVERITY = 11455;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11456;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11457;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11458;

const int
    UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11459;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11460;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEASTEXT = 11461;

const int
    UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11462;

const int
    UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11463;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11464;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11465;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11466;

const int
    UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11467;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11468;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11469;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11470;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11471;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11472;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11473;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11474;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11475;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11476;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11477;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11478;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11479;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11480;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11481;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11482;

const int
    UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11483;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SECURECHANNELID = 11485;

const int UA_NS0ID_OPTIONSETTYPE = 11487;

const int UA_NS0ID_OPTIONSETTYPE_OPTIONSETVALUES = 11488;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS = 11489;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_INPUTARGUMENTS = 11490;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11491;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS = 11492;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_INPUTARGUMENTS = 11493;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11494;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE = 11495;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_INPUTARGUMENTS = 11496;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_OUTPUTARGUMENTS = 11497;

const int UA_NS0ID_MAXSTRINGLENGTH = 11498;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFARCHIVE = 11499;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFONLINEARCHIVE = 11500;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEEVENTCAPABILITY = 11501;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEEVENTCAPABILITY = 11502;

const int UA_NS0ID_HACONFIGURATION_STARTOFARCHIVE = 11503;

const int UA_NS0ID_HACONFIGURATION_STARTOFONLINEARCHIVE = 11504;

const int UA_NS0ID_AGGREGATEFUNCTION_STARTBOUND = 11505;

const int UA_NS0ID_AGGREGATEFUNCTION_ENDBOUND = 11506;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTABOUNDS = 11507;

const int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER = 11508;

const int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER_NAMINGRULE = 11509;

const int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER = 11510;

const int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER_NAMINGRULE = 11511;

const int UA_NS0ID_MAXARRAYLENGTH = 11512;

const int UA_NS0ID_ENGINEERINGUNITS = 11513;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXARRAYLENGTH = 11514;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11515;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS = 11516;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD =
    11517;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE =
    11519;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11521;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11522;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11523;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11524;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11525;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11526;

const int UA_NS0ID_SERVERTYPE_NAMESPACES = 11527;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXARRAYLENGTH = 11549;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSTRINGLENGTH = 11550;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS = 11551;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREAD =
    11552;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERWRITE =
    11554;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11556;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11557;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11558;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11559;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11560;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11561;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_VENDORCAPABILITY_PLACEHOLDER = 11562;

const int UA_NS0ID_OPERATIONLIMITSTYPE = 11564;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREAD = 11565;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERWRITE = 11567;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERMETHODCALL = 11569;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERBROWSE = 11570;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREGISTERNODES = 11571;

const int
    UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11572;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERNODEMANAGEMENT = 11573;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXMONITOREDITEMSPERCALL = 11574;

const int UA_NS0ID_FILETYPE = 11575;

const int UA_NS0ID_FILETYPE_SIZE = 11576;

const int UA_NS0ID_FILETYPE_OPENCOUNT = 11579;

const int UA_NS0ID_FILETYPE_OPEN = 11580;

const int UA_NS0ID_FILETYPE_OPEN_INPUTARGUMENTS = 11581;

const int UA_NS0ID_FILETYPE_OPEN_OUTPUTARGUMENTS = 11582;

const int UA_NS0ID_FILETYPE_CLOSE = 11583;

const int UA_NS0ID_FILETYPE_CLOSE_INPUTARGUMENTS = 11584;

const int UA_NS0ID_FILETYPE_READ = 11585;

const int UA_NS0ID_FILETYPE_READ_INPUTARGUMENTS = 11586;

const int UA_NS0ID_FILETYPE_READ_OUTPUTARGUMENTS = 11587;

const int UA_NS0ID_FILETYPE_WRITE = 11588;

const int UA_NS0ID_FILETYPE_WRITE_INPUTARGUMENTS = 11589;

const int UA_NS0ID_FILETYPE_GETPOSITION = 11590;

const int UA_NS0ID_FILETYPE_GETPOSITION_INPUTARGUMENTS = 11591;

const int UA_NS0ID_FILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11592;

const int UA_NS0ID_FILETYPE_SETPOSITION = 11593;

const int UA_NS0ID_FILETYPE_SETPOSITION_INPUTARGUMENTS = 11594;

const int UA_NS0ID_ADDRESSSPACEFILETYPE = 11595;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SIZE = 11596;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPENCOUNT = 11599;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN = 11600;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_INPUTARGUMENTS = 11601;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_OUTPUTARGUMENTS = 11602;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE = 11603;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE_INPUTARGUMENTS = 11604;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ = 11605;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_INPUTARGUMENTS = 11606;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_OUTPUTARGUMENTS = 11607;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE = 11608;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE_INPUTARGUMENTS = 11609;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION = 11610;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_INPUTARGUMENTS = 11611;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11612;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION = 11613;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION_INPUTARGUMENTS = 11614;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_EXPORTNAMESPACE = 11615;

const int UA_NS0ID_NAMESPACEMETADATATYPE = 11616;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEURI = 11617;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEVERSION = 11618;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEPUBLICATIONDATE = 11619;

const int UA_NS0ID_NAMESPACEMETADATATYPE_ISNAMESPACESUBSET = 11620;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNODEIDTYPES = 11621;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNUMERICNODEIDRANGE = 11622;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICSTRINGNODEIDPATTERN = 11623;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE = 11624;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SIZE = 11625;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPENCOUNT = 11628;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN = 11629;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    11630;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    11631;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE = 11632;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    11633;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ = 11634;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_INPUTARGUMENTS =
    11635;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    11636;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE = 11637;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    11638;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION = 11639;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    11640;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    11641;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION = 11642;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    11643;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_EXPORTNAMESPACE = 11644;

const int UA_NS0ID_NAMESPACESTYPE = 11645;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER = 11646;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEURI =
    11647;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEVERSION =
    11648;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEPUBLICATIONDATE =
    11649;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_ISNAMESPACESUBSET =
    11650;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNODEIDTYPES =
    11651;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNUMERICNODEIDRANGE =
    11652;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICSTRINGNODEIDPATTERN =
    11653;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE =
    11654;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SIZE =
    11655;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPENCOUNT =
    11658;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN =
    11659;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    11660;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    11661;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE =
    11662;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    11663;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ =
    11664;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_INPUTARGUMENTS =
    11665;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    11666;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE =
    11667;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    11668;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION =
    11669;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    11670;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    11671;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION =
    11672;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    11673;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_EXPORTNAMESPACE =
    11674;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SYSTEMSTATE = 11696;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLEDMONITOREDITEMSCOUNT =
    11697;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_MAXSAMPLEDMONITOREDITEMSCOUNT =
    11698;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMSSAMPLINGCOUNT =
    11699;

const int UA_NS0ID_OPTIONSETTYPE_BITMASK = 11701;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXARRAYLENGTH = 11702;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS = 11704;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD =
    11705;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE =
    11707;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11709;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11710;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11711;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11712;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11713;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11714;

const int UA_NS0ID_SERVER_NAMESPACES = 11715;

const int UA_NS0ID_BITFIELDMASKDATATYPE = 11737;

const int UA_NS0ID_OPENMETHODTYPE = 11738;

const int UA_NS0ID_OPENMETHODTYPE_INPUTARGUMENTS = 11739;

const int UA_NS0ID_OPENMETHODTYPE_OUTPUTARGUMENTS = 11740;

const int UA_NS0ID_CLOSEMETHODTYPE = 11741;

const int UA_NS0ID_CLOSEMETHODTYPE_INPUTARGUMENTS = 11742;

const int UA_NS0ID_READMETHODTYPE = 11743;

const int UA_NS0ID_READMETHODTYPE_INPUTARGUMENTS = 11744;

const int UA_NS0ID_READMETHODTYPE_OUTPUTARGUMENTS = 11745;

const int UA_NS0ID_WRITEMETHODTYPE = 11746;

const int UA_NS0ID_WRITEMETHODTYPE_INPUTARGUMENTS = 11747;

const int UA_NS0ID_GETPOSITIONMETHODTYPE = 11748;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11749;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_OUTPUTARGUMENTS = 11750;

const int UA_NS0ID_SETPOSITIONMETHODTYPE = 11751;

const int UA_NS0ID_SETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11752;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE = 11753;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTID = 11754;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTTYPE = 11755;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENODE = 11756;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENAME = 11757;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_TIME = 11758;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RECEIVETIME = 11759;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LOCALTIME = 11760;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MESSAGE = 11761;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SEVERITY = 11762;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSID = 11763;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11764;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONNAME = 11765;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_BRANCHID = 11766;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RETAIN = 11767;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE = 11768;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_ID = 11769;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 11770;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 11771;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    11772;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 11773;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    11774;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 11775;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 11776;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY = 11777;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 11778;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY = 11779;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    11780;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT = 11781;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 11782;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CLIENTUSERID = 11783;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_DISABLE = 11784;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLE = 11785;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT = 11786;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 11787;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH = 11788;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    11789;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE = 11790;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_ID = 11791;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NAME = 11792;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 11793;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    11794;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 11795;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    11796;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 11797;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 11798;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE = 11799;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 11800;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 11801;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 11802;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    11803;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    11804;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    11805;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 11806;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 11807;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE = 11808;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 11809;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM = 11810;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 11811;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE = 11812;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_ID = 11813;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NAME = 11814;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 11815;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    11816;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 11817;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    11818;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 11819;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 11820;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_INPUTNODE = 11821;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE = 11822;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 11823;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 11824;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 11825;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    11826;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    11827;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    11828;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 11829;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 11830;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE = 11831;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 11832;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    11833;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    11834;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    11835;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    11836;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    11837;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    11838;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    11839;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    11840;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    11841;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11842;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 11843;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 11844;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 11845;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 11846;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    11847;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 11848;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MAXTIMESHELVED = 11849;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_NORMALSTATE = 11850;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_COMMENT = 11851;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SELECTEDRESPONSE = 11852;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_COMMENT = 11853;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_COMMENT = 11854;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SHELVINGTIME = 11855;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE = 11856;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTID = 11857;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 11858;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 11859;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 11860;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TIME = 11861;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 11862;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 11863;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_MESSAGE = 11864;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SEVERITY = 11865;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_ACTIONTIMESTAMP = 11866;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_STATUS = 11867;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SERVERID = 11868;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTAUDITENTRYID = 11869;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTUSERID = 11870;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_METHODID = 11871;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_INPUTARGUMENTS = 11872;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_OLDSTATEID = 11873;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_NEWSTATEID = 11874;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TRANSITIONNUMBER = 11875;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATEFUNCTIONS = 11876;

const int UA_NS0ID_HACONFIGURATION_AGGREGATEFUNCTIONS = 11877;

const int UA_NS0ID_NODECLASS_ENUMVALUES = 11878;

const int UA_NS0ID_INSTANCENODE = 11879;

const int UA_NS0ID_TYPENODE = 11880;

const int UA_NS0ID_NODEATTRIBUTESMASK_ENUMVALUES = 11881;

const int UA_NS0ID_BROWSERESULTMASK_ENUMVALUES = 11883;

const int UA_NS0ID_HISTORYUPDATETYPE_ENUMVALUES = 11884;

const int UA_NS0ID_PERFORMUPDATETYPE_ENUMVALUES = 11885;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTXML = 11887;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTXML = 11888;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTBINARY = 11889;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTBINARY = 11890;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    11891;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNAUTHORIZEDREQUESTCOUNT =
    11892;

const int UA_NS0ID_OPENFILEMODE = 11939;

const int UA_NS0ID_OPENFILEMODE_ENUMVALUES = 11940;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK = 11941;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK_ENUMVALUES = 11942;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE = 11943;

const int UA_NS0ID_NETWORKGROUPDATATYPE = 11944;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE = 11945;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_REDUNDANCYSUPPORT =
    11946;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERURIARRAY = 11947;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERNETWORKGROUPS =
    11948;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTXML = 11949;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTXML = 11950;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE = 11951;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION =
    11952;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT =
    11953;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE = 11954;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION = 11955;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT =
    11956;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTBINARY = 11957;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTBINARY = 11958;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE = 11959;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION =
    11960;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT =
    11961;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE = 11962;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION =
    11963;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT =
    11964;

const int UA_NS0ID_ARRAYITEMTYPE = 12021;

const int UA_NS0ID_ARRAYITEMTYPE_DEFINITION = 12022;

const int UA_NS0ID_ARRAYITEMTYPE_VALUEPRECISION = 12023;

const int UA_NS0ID_ARRAYITEMTYPE_INSTRUMENTRANGE = 12024;

const int UA_NS0ID_ARRAYITEMTYPE_EURANGE = 12025;

const int UA_NS0ID_ARRAYITEMTYPE_ENGINEERINGUNITS = 12026;

const int UA_NS0ID_ARRAYITEMTYPE_TITLE = 12027;

const int UA_NS0ID_ARRAYITEMTYPE_AXISSCALETYPE = 12028;

const int UA_NS0ID_YARRAYITEMTYPE = 12029;

const int UA_NS0ID_YARRAYITEMTYPE_DEFINITION = 12030;

const int UA_NS0ID_YARRAYITEMTYPE_VALUEPRECISION = 12031;

const int UA_NS0ID_YARRAYITEMTYPE_INSTRUMENTRANGE = 12032;

const int UA_NS0ID_YARRAYITEMTYPE_EURANGE = 12033;

const int UA_NS0ID_YARRAYITEMTYPE_ENGINEERINGUNITS = 12034;

const int UA_NS0ID_YARRAYITEMTYPE_TITLE = 12035;

const int UA_NS0ID_YARRAYITEMTYPE_AXISSCALETYPE = 12036;

const int UA_NS0ID_YARRAYITEMTYPE_XAXISDEFINITION = 12037;

const int UA_NS0ID_XYARRAYITEMTYPE = 12038;

const int UA_NS0ID_XYARRAYITEMTYPE_DEFINITION = 12039;

const int UA_NS0ID_XYARRAYITEMTYPE_VALUEPRECISION = 12040;

const int UA_NS0ID_XYARRAYITEMTYPE_INSTRUMENTRANGE = 12041;

const int UA_NS0ID_XYARRAYITEMTYPE_EURANGE = 12042;

const int UA_NS0ID_XYARRAYITEMTYPE_ENGINEERINGUNITS = 12043;

const int UA_NS0ID_XYARRAYITEMTYPE_TITLE = 12044;

const int UA_NS0ID_XYARRAYITEMTYPE_AXISSCALETYPE = 12045;

const int UA_NS0ID_XYARRAYITEMTYPE_XAXISDEFINITION = 12046;

const int UA_NS0ID_IMAGEITEMTYPE = 12047;

const int UA_NS0ID_IMAGEITEMTYPE_DEFINITION = 12048;

const int UA_NS0ID_IMAGEITEMTYPE_VALUEPRECISION = 12049;

const int UA_NS0ID_IMAGEITEMTYPE_INSTRUMENTRANGE = 12050;

const int UA_NS0ID_IMAGEITEMTYPE_EURANGE = 12051;

const int UA_NS0ID_IMAGEITEMTYPE_ENGINEERINGUNITS = 12052;

const int UA_NS0ID_IMAGEITEMTYPE_TITLE = 12053;

const int UA_NS0ID_IMAGEITEMTYPE_AXISSCALETYPE = 12054;

const int UA_NS0ID_IMAGEITEMTYPE_XAXISDEFINITION = 12055;

const int UA_NS0ID_IMAGEITEMTYPE_YAXISDEFINITION = 12056;

const int UA_NS0ID_CUBEITEMTYPE = 12057;

const int UA_NS0ID_CUBEITEMTYPE_DEFINITION = 12058;

const int UA_NS0ID_CUBEITEMTYPE_VALUEPRECISION = 12059;

const int UA_NS0ID_CUBEITEMTYPE_INSTRUMENTRANGE = 12060;

const int UA_NS0ID_CUBEITEMTYPE_EURANGE = 12061;

const int UA_NS0ID_CUBEITEMTYPE_ENGINEERINGUNITS = 12062;

const int UA_NS0ID_CUBEITEMTYPE_TITLE = 12063;

const int UA_NS0ID_CUBEITEMTYPE_AXISSCALETYPE = 12064;

const int UA_NS0ID_CUBEITEMTYPE_XAXISDEFINITION = 12065;

const int UA_NS0ID_CUBEITEMTYPE_YAXISDEFINITION = 12066;

const int UA_NS0ID_CUBEITEMTYPE_ZAXISDEFINITION = 12067;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE = 12068;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_DEFINITION = 12069;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_VALUEPRECISION = 12070;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_INSTRUMENTRANGE = 12071;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_EURANGE = 12072;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_ENGINEERINGUNITS = 12073;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_TITLE = 12074;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISSCALETYPE = 12075;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISDEFINITION = 12076;

const int UA_NS0ID_AXISSCALEENUMERATION = 12077;

const int UA_NS0ID_AXISSCALEENUMERATION_ENUMSTRINGS = 12078;

const int UA_NS0ID_AXISINFORMATION = 12079;

const int UA_NS0ID_XVTYPE = 12080;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTXML = 12081;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTXML = 12082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION = 12083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT = 12085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE = 12086;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DATATYPEVERSION = 12087;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12088;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTBINARY = 12089;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTBINARY = 12090;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION = 12091;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12092;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT =
    12093;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE = 12094;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DATATYPEVERSION = 12095;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12096;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER =
    12097;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS =
    12098;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONID =
    12099;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONNAME =
    12100;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    12101;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SERVERURI =
    12102;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ENDPOINTURL =
    12103;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_LOCALEIDS =
    12104;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    12105;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    12106;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    12107;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    12108;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    12109;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    12110;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    12111;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    12112;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    12113;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_READCOUNT =
    12114;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    12115;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_WRITECOUNT =
    12116;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    12117;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CALLCOUNT =
    12118;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    12119;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    12120;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    12121;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    12122;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    12123;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    12124;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    12125;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    12126;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    12127;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    12128;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    12129;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    12130;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    12131;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    12132;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    12133;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    12134;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSECOUNT =
    12135;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    12136;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    12137;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    12138;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    12139;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    12140;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    12141;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS =
    12142;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    12143;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    12144;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    12145;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    12146;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    12147;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    12148;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    12149;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    12150;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    12151;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SUBSCRIPTIONDIAGNOSTICSARRAY =
    12152;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12153;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12154;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12155;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12156;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12157;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12158;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12159;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12160;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADDATA = 12161;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADEVENTS = 12162;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEDATA = 12163;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEEVENTS = 12164;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12165;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12166;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12167;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12168;

const int UA_NS0ID_NAMINGRULETYPE_ENUMVALUES = 12169;

const int UA_NS0ID_VIEWVERSION = 12170;

const int UA_NS0ID_COMPLEXNUMBERTYPE = 12171;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE = 12172;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12173;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE = 12175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12177;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12178;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION =
    12179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12180;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12181;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE = 12183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION =
    12187;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12188;

const int UA_NS0ID_SERVERONNETWORK = 12189;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST = 12190;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE = 12191;

const int UA_NS0ID_REGISTERSERVER2REQUEST = 12193;

const int UA_NS0ID_REGISTERSERVER2RESPONSE = 12194;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTXML = 12195;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTXML = 12196;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTXML = 12197;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTXML = 12199;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTXML = 12200;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK = 12201;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12202;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT = 12203;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTBINARY = 12207;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTBINARY = 12208;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTBINARY = 12209;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTBINARY = 12211;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTBINARY = 12212;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK = 12213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12214;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT =
    12215;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONTEXT = 12502;

const int UA_NS0ID_PROGRESSEVENTTYPE_PROGRESS = 12503;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE = 12513;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_INPUTARGUMENTS = 12514;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_OUTPUTARGUMENTS = 12515;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE = 12516;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_OUTPUTARGUMENTS = 12517;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE = 12518;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12519;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE = 12520;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12521;

const int UA_NS0ID_TRUSTLISTTYPE = 12522;

const int UA_NS0ID_TRUSTLISTTYPE_SIZE = 12523;

const int UA_NS0ID_TRUSTLISTTYPE_OPENCOUNT = 12526;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN = 12527;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_INPUTARGUMENTS = 12528;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_OUTPUTARGUMENTS = 12529;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE = 12530;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE_INPUTARGUMENTS = 12531;

const int UA_NS0ID_TRUSTLISTTYPE_READ = 12532;

const int UA_NS0ID_TRUSTLISTTYPE_READ_INPUTARGUMENTS = 12533;

const int UA_NS0ID_TRUSTLISTTYPE_READ_OUTPUTARGUMENTS = 12534;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE = 12535;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE_INPUTARGUMENTS = 12536;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION = 12537;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_INPUTARGUMENTS = 12538;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_OUTPUTARGUMENTS = 12539;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION = 12540;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION_INPUTARGUMENTS = 12541;

const int UA_NS0ID_TRUSTLISTTYPE_LASTUPDATETIME = 12542;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS = 12543;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_INPUTARGUMENTS = 12544;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_OUTPUTARGUMENTS = 12545;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE = 12546;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_OUTPUTARGUMENTS = 12547;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE = 12548;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE_INPUTARGUMENTS = 12549;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE = 12550;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE_INPUTARGUMENTS = 12551;

const int UA_NS0ID_TRUSTLISTMASKS = 12552;

const int UA_NS0ID_TRUSTLISTMASKS_ENUMVALUES = 12553;

const int UA_NS0ID_TRUSTLISTDATATYPE = 12554;

const int UA_NS0ID_CERTIFICATEGROUPTYPE = 12555;

const int UA_NS0ID_CERTIFICATETYPE = 12556;

const int UA_NS0ID_APPLICATIONCERTIFICATETYPE = 12557;

const int UA_NS0ID_HTTPSCERTIFICATETYPE = 12558;

const int UA_NS0ID_RSAMINAPPLICATIONCERTIFICATETYPE = 12559;

const int UA_NS0ID_RSASHA256APPLICATIONCERTIFICATETYPE = 12560;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE = 12561;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTID = 12562;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12563;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENODE = 12564;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENAME = 12565;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_TIME = 12566;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12567;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_LOCALTIME = 12568;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_MESSAGE = 12569;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SEVERITY = 12570;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12571;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_STATUS = 12572;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SERVERID = 12573;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12574;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12575;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_METHODID = 12576;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 12577;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE = 12578;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12579;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_OUTPUTARGUMENTS = 12580;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE = 12581;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SUPPORTEDPRIVATEKEYFORMATS = 12583;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MAXTRUSTLISTSIZE = 12584;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MULTICASTDNSENABLED = 12585;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE = 12616;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_INPUTARGUMENTS =
    12617;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_OUTPUTARGUMENTS =
    12618;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE = 12620;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTID = 12621;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12622;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENODE = 12623;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENAME = 12624;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_TIME = 12625;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12626;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_LOCALTIME = 12627;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_MESSAGE = 12628;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SEVERITY = 12629;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12630;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_STATUS = 12631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SERVERID = 12632;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12633;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12634;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_METHODID = 12635;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 12636;

const int UA_NS0ID_SERVERCONFIGURATION = 12637;

const int UA_NS0ID_SERVERCONFIGURATION_SUPPORTEDPRIVATEKEYFORMATS = 12639;

const int UA_NS0ID_SERVERCONFIGURATION_MAXTRUSTLISTSIZE = 12640;

const int UA_NS0ID_SERVERCONFIGURATION_MULTICASTDNSENABLED = 12641;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    12642;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    12643;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    12646;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    12647;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    12648;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    12649;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    12650;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    12651;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    12652;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    12653;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    12654;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    12655;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    12656;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    12657;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    12658;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    12659;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    12660;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    12661;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    12662;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    12663;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    12664;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    12665;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    12666;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    12667;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    12668;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    12669;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    12670;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    12671;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTXML = 12676;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE = 12677;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12678;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT = 12679;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTBINARY = 12680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE = 12681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT =
    12683;

const int UA_NS0ID_FILETYPE_WRITABLE = 12686;

const int UA_NS0ID_FILETYPE_USERWRITABLE = 12687;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITABLE = 12688;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_USERWRITABLE = 12689;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITABLE = 12690;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_USERWRITABLE = 12691;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITABLE =
    12692;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_USERWRITABLE =
    12693;

const int UA_NS0ID_TRUSTLISTTYPE_WRITABLE = 12698;

const int UA_NS0ID_TRUSTLISTTYPE_USERWRITABLE = 12699;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_INPUTARGUMENTS = 12704;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_INPUTARGUMENTS = 12705;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SERVERCAPABILITIES = 12708;

const int UA_NS0ID_SERVERCONFIGURATION_SERVERCAPABILITIES = 12710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT = 12712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION = 12713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT =
    12714;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH = 12715;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12716;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12717;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT = 12718;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION =
    12719;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT =
    12720;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH = 12721;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12722;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12723;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST = 12731;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_INPUTARGUMENTS =
    12732;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_OUTPUTARGUMENTS =
    12733;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_APPLYCHANGES = 12734;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST = 12737;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_INPUTARGUMENTS =
    12738;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_OUTPUTARGUMENTS =
    12739;

const int UA_NS0ID_SERVERCONFIGURATION_APPLYCHANGES = 12740;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE = 12741;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_INPUTARGUMENTS = 12742;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_OUTPUTARGUMENTS = 12743;

const int UA_NS0ID_OPTIONSETVALUES = 12745;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE = 12746;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12747;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12748;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE = 12749;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12750;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12751;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE = 12752;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_INPUTARGUMENTS = 12753;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_OUTPUTARGUMENTS = 12754;

const int UA_NS0ID_OPTIONSET = 12755;

const int UA_NS0ID_UNION = 12756;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTXML = 12757;

const int UA_NS0ID_UNION_ENCODING_DEFAULTXML = 12758;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET = 12759;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DATATYPEVERSION = 12760;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12761;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION = 12762;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DATATYPEVERSION = 12763;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DICTIONARYFRAGMENT = 12764;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTBINARY = 12765;

const int UA_NS0ID_UNION_ENCODING_DEFAULTBINARY = 12766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET = 12767;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DATATYPEVERSION = 12768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12769;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION = 12770;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DATATYPEVERSION = 12771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DICTIONARYFRAGMENT = 12772;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE = 12773;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE_OUTPUTARGUMENTS = 12774;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST = 12775;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS =
    12776;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST = 12777;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST_OUTPUTARGUMENTS = 12778;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS =
    12779;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLINGINTERVAL =
    12780;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLEDMONITOREDITEMSCOUNT =
    12781;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_MAXSAMPLEDMONITOREDITEMSCOUNT =
    12782;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_DISABLEDMONITOREDITEMSSAMPLINGCOUNT =
    12783;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS =
    12784;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SESSIONID =
    12785;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SUBSCRIPTIONID =
    12786;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PRIORITY =
    12787;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGINTERVAL =
    12788;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXKEEPALIVECOUNT =
    12789;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXLIFETIMECOUNT =
    12790;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXNOTIFICATIONSPERPUBLISH =
    12791;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGENABLED =
    12792;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MODIFYCOUNT =
    12793;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_ENABLECOUNT =
    12794;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLECOUNT =
    12795;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHREQUESTCOUNT =
    12796;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGEREQUESTCOUNT =
    12797;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGECOUNT =
    12798;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREQUESTCOUNT =
    12799;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOALTCLIENTCOUNT =
    12800;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOSAMECLIENTCOUNT =
    12801;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHREQUESTCOUNT =
    12802;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DATACHANGENOTIFICATIONSCOUNT =
    12803;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTNOTIFICATIONSCOUNT =
    12804;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NOTIFICATIONSCOUNT =
    12805;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_LATEPUBLISHREQUESTCOUNT =
    12806;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTKEEPALIVECOUNT =
    12807;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTLIFETIMECOUNT =
    12808;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_UNACKNOWLEDGEDMESSAGECOUNT =
    12809;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISCARDEDMESSAGECOUNT =
    12810;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITOREDITEMCOUNT =
    12811;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLEDMONITOREDITEMCOUNT =
    12812;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITORINGQUEUEOVERFLOWCOUNT =
    12813;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NEXTSEQUENCENUMBER =
    12814;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTQUEUEOVERFLOWCOUNT =
    12815;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS = 12816;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONID =
    12817;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONNAME =
    12818;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    12819;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SERVERURI =
    12820;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL =
    12821;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_LOCALEIDS =
    12822;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    12823;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    12824;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    12825;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    12826;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    12827;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    12828;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    12829;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    12830;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    12831;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_READCOUNT =
    12832;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    12833;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_WRITECOUNT =
    12834;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    12835;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CALLCOUNT =
    12836;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    12837;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    12838;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    12839;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    12840;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    12841;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    12842;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    12843;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    12844;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    12845;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    12846;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    12847;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    12848;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    12849;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    12850;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    12851;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    12852;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT =
    12853;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    12854;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    12855;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    12856;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    12857;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    12858;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    12859;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS =
    12860;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    12861;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    12862;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    12863;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    12864;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    12865;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    12866;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    12867;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    12868;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    12869;

const int UA_NS0ID_SERVERTYPE_RESENDDATA = 12871;

const int UA_NS0ID_SERVERTYPE_RESENDDATA_INPUTARGUMENTS = 12872;

const int UA_NS0ID_SERVER_RESENDDATA = 12873;

const int UA_NS0ID_SERVER_RESENDDATA_INPUTARGUMENTS = 12874;

const int UA_NS0ID_RESENDDATAMETHODTYPE = 12875;

const int UA_NS0ID_RESENDDATAMETHODTYPE_INPUTARGUMENTS = 12876;

const int UA_NS0ID_NORMALIZEDSTRING = 12877;

const int UA_NS0ID_DECIMALSTRING = 12878;

const int UA_NS0ID_DURATIONSTRING = 12879;

const int UA_NS0ID_TIMESTRING = 12880;

const int UA_NS0ID_DATESTRING = 12881;

const int UA_NS0ID_SERVERTYPE_ESTIMATEDRETURNTIME = 12882;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE = 12883;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12884;

const int UA_NS0ID_SERVER_ESTIMATEDRETURNTIME = 12885;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE = 12886;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12887;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE = 12888;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE_INPUTARGUMENTS = 12889;

const int UA_NS0ID_DISCOVERYCONFIGURATION = 12890;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION = 12891;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12892;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12893;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION = 12894;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION =
    12895;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12896;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION = 12897;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION =
    12898;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12899;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12900;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12901;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION = 12902;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION =
    12903;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12904;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION = 12905;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION =
    12906;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12907;

const int UA_NS0ID_MAXBYTESTRINGLENGTH = 12908;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12909;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBYTESTRINGLENGTH = 12910;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12911;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2 = 12912;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12913;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE = 12914;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE_INPUTARGUMENTS = 12915;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2 = 12916;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12917;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2 = 12918;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12919;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2 = 12984;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12985;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2 = 12986;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12987;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12988;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12989;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12990;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12991;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12992;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12993;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12994;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12995;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12996;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12997;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12998;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12999;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13000;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13001;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13002;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13003;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2 = 13004;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13005;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13006;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13007;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13008;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13009;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2 = 13010;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13011;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE = 13225;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTID = 13226;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTTYPE = 13227;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENODE = 13228;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENAME = 13229;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_TIME = 13230;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RECEIVETIME = 13231;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LOCALTIME = 13232;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MESSAGE = 13233;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SEVERITY = 13234;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSID = 13235;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSNAME = 13236;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONNAME = 13237;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_BRANCHID = 13238;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RETAIN = 13239;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE = 13240;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_ID = 13241;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NAME = 13242;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NUMBER = 13243;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    13244;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    13245;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    13246;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRUESTATE =
    13247;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_FALSESTATE =
    13248;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY = 13249;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY_SOURCETIMESTAMP =
    13250;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY = 13251;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    13252;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT = 13253;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT_SOURCETIMESTAMP =
    13254;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CLIENTUSERID = 13255;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_DISABLE = 13256;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLE = 13257;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT = 13258;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    13259;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH = 13260;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    13261;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2 = 13262;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13263;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE = 13264;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_ID = 13265;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NAME = 13266;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NUMBER = 13267;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    13268;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    13269;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    13270;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 13271;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 13272;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE = 13273;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_ID = 13274;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NAME = 13275;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 13276;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    13277;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    13278;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    13279;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    13280;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    13281;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE = 13282;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    13283;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM = 13284;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM_INPUTARGUMENTS =
    13285;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE = 13286;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_ID = 13287;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NAME = 13288;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NUMBER = 13289;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    13290;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    13291;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    13292;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 13293;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_FALSESTATE =
    13294;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_INPUTNODE = 13295;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE = 13296;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_ID = 13297;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 13298;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    13299;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    13300;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    13301;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    13302;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    13303;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    13304;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE = 13305;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    13306;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    13307;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    13308;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    13309;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    13310;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    13311;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    13312;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    13313;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    13314;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    13315;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    13316;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    13317;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVE =
    13318;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    13319;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    13320;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    13321;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDORSHELVED = 13322;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MAXTIMESHELVED = 13323;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_NORMALSTATE = 13324;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONDATE = 13325;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATETYPE = 13326;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATE = 13327;

const int UA_NS0ID_FILETYPE_MIMETYPE = 13341;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE = 13342;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_INPUTARGUMENTS = 13343;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_OUTPUTARGUMENTS = 13344;

const int UA_NS0ID_CREATEFILEMETHODTYPE = 13345;

const int UA_NS0ID_CREATEFILEMETHODTYPE_INPUTARGUMENTS = 13346;

const int UA_NS0ID_CREATEFILEMETHODTYPE_OUTPUTARGUMENTS = 13347;

const int UA_NS0ID_DELETEFILEMETHODTYPE = 13348;

const int UA_NS0ID_DELETEFILEMETHODTYPE_INPUTARGUMENTS = 13349;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE = 13350;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_INPUTARGUMENTS = 13351;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_OUTPUTARGUMENTS = 13352;

const int UA_NS0ID_FILEDIRECTORYTYPE = 13353;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER = 13354;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY =
    13355;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS =
    13356;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS =
    13357;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE =
    13358;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS =
    13359;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS =
    13360;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY =
    13363;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS =
    13364;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS =
    13365;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER = 13366;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SIZE = 13367;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITABLE = 13368;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_USERWRITABLE = 13369;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPENCOUNT = 13370;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_MIMETYPE = 13371;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN = 13372;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS =
    13373;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS =
    13374;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE = 13375;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS =
    13376;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ = 13377;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS =
    13378;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS =
    13379;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE = 13380;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS =
    13381;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION = 13382;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS =
    13383;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS =
    13384;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION = 13385;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS =
    13386;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY = 13387;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_INPUTARGUMENTS = 13388;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_OUTPUTARGUMENTS = 13389;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE = 13390;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_INPUTARGUMENTS = 13391;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_OUTPUTARGUMENTS = 13392;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT = 13393;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    13394;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY = 13395;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_INPUTARGUMENTS = 13396;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_OUTPUTARGUMENTS = 13397;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_MIMETYPE = 13398;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_MIMETYPE = 13399;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_MIMETYPE =
    13400;

const int UA_NS0ID_TRUSTLISTTYPE_MIMETYPE = 13403;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST = 13599;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SIZE = 13600;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITABLE = 13601;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_USERWRITABLE = 13602;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENCOUNT = 13603;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_MIMETYPE = 13604;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN = 13605;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_INPUTARGUMENTS = 13606;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13607;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE = 13608;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13609;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ = 13610;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_INPUTARGUMENTS = 13611;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_OUTPUTARGUMENTS = 13612;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE = 13613;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE_INPUTARGUMENTS = 13614;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION = 13615;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13616;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13617;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION = 13618;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13619;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_LASTUPDATETIME = 13620;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS = 13621;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13622;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13623;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE = 13624;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13625;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13626;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE = 13627;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13628;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE = 13629;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13630;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATETYPES = 13631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATEGROUP = 13735;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATETYPE = 13736;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE = 13737;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_INPUTARGUMENTS = 13738;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_OUTPUTARGUMENTS =
    13739;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE = 13813;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP = 13814;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    13815;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    13816;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    13817;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    13818;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    13819;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    13820;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    13821;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13822;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13823;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    13824;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13825;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    13826;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13827;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13828;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    13829;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13830;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    13831;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13832;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13833;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    13834;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13835;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    13836;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    13837;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13838;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13839;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13840;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13841;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13842;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    13843;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13844;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13845;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13846;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    13847;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP = 13848;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST =
    13849;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    13850;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    13851;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    13852;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    13853;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    13854;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    13855;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13856;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13857;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    13858;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13859;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    13860;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13861;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13862;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    13863;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13864;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    13865;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13866;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13867;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    13868;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13869;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    13870;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    13871;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13872;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13873;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13874;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13875;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13876;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    13877;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13878;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13879;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13880;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    13881;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP = 13882;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    13883;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    13884;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    13885;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    13886;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    13887;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    13888;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    13889;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13890;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13891;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    13892;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13893;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    13894;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13895;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13896;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    13897;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13898;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    13899;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13900;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13901;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    13902;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13903;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    13904;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    13905;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13906;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13907;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13908;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13909;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13910;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    13911;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13912;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13913;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13914;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    13915;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER =
    13916;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST =
    13917;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SIZE =
    13918;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITABLE =
    13919;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_USERWRITABLE =
    13920;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENCOUNT =
    13921;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_MIMETYPE =
    13922;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN =
    13923;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13924;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13925;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE =
    13926;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13927;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ =
    13928;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_INPUTARGUMENTS =
    13929;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13930;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE =
    13931;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13932;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION =
    13933;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13934;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13935;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION =
    13936;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13937;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_LASTUPDATETIME =
    13938;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS =
    13939;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13940;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13941;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE =
    13942;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13943;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13944;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE =
    13945;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13946;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE =
    13947;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13948;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATETYPES =
    13949;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS = 13950;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP =
    13951;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    13952;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    13953;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    13954;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    13955;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    13956;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    13957;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    13958;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13959;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13960;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    13961;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13962;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    13963;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13964;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13965;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    13966;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13967;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    13968;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13969;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13970;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    13971;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13972;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    13973;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    13974;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13975;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13976;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13977;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13978;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13979;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    13980;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13981;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13982;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13983;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    13984;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP =
    13985;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    13986;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    13987;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    13988;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    13989;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    13990;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    13991;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    13992;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13993;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13994;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    13995;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13996;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    13997;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13998;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13999;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    14000;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14001;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    14002;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14003;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14004;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    14005;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14006;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    14007;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    14008;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14009;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14010;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14011;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14012;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14013;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    14014;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14015;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14016;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14017;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    14018;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP =
    14019;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    14020;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    14021;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    14022;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    14023;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    14024;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    14025;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    14026;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14027;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14028;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    14029;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14030;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    14031;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14032;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14033;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    14034;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14035;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    14036;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14037;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14038;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    14039;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14040;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    14041;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    14042;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14043;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14044;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14045;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14046;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14047;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    14048;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14049;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14050;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14051;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    14052;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS = 14053;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP =
    14088;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    14089;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    14090;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    14091;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    14092;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    14093;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    14094;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    14095;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14096;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14097;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    14098;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14099;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    14100;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14101;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14102;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    14103;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14104;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    14105;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14106;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14107;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    14108;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14109;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    14110;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    14111;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14112;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14113;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14114;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14115;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14116;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    14117;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14118;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14119;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14120;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    14121;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP =
    14122;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    14123;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    14124;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    14125;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    14126;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    14127;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    14128;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    14129;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14130;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14131;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    14132;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14133;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    14134;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14135;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14136;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    14137;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14138;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    14139;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14140;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14141;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    14142;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14143;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    14144;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    14145;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14146;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14147;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14148;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14149;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14150;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    14151;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14152;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14153;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14154;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    14155;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP =
    14156;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    14157;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    14158;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    14159;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14160;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    14161;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE = 14183;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE_INPUTARGUMENTS = 14184;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE = 14209;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS = 14221;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP = 14225;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP_INPUTARGUMENTS = 14226;

const int UA_NS0ID_PUBSUBGROUPTYPE = 14232;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE = 14273;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTXML = 14319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION =
    14321;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT =
    14322;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTBINARY = 14323;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14324;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION =
    14325;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT =
    14326;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SESSIONID = 14413;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SESSIONID = 14414;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERNETWORKGROUPS = 14415;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE = 14416;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER = 14417;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID =
    14418;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS =
    14419;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE =
    14420;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE =
    14421;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE =
    14422;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS =
    14423;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP =
    14424;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS =
    14425;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION = 14432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION_INPUTARGUMENTS = 14433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS = 14434;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS =
    14435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS =
    14438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    14439;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    14440;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET =
    14441;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14442;

const int UA_NS0ID_PUBLISHSUBSCRIBE = 14443;

const int UA_NS0ID_HASPUBSUBCONNECTION = 14476;

const int UA_NS0ID_DATASETFOLDERTYPE = 14477;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER = 14478;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS =
    14479;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14480;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14481;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS =
    14482;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    14483;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    14484;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET =
    14485;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14486;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER = 14487;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_CONFIGURATIONVERSION =
    14489;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS = 14493;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14494;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14495;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS = 14496;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 14497;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 14498;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET = 14499;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14500;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE = 14501;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_INPUTARGUMENTS = 14502;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_OUTPUTARGUMENTS = 14503;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE = 14504;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_INPUTARGUMENTS = 14505;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_OUTPUTARGUMENTS = 14506;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE = 14507;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE_INPUTARGUMENTS = 14508;

const int UA_NS0ID_PUBLISHEDDATASETTYPE = 14509;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_CONFIGURATIONVERSION = 14519;

const int UA_NS0ID_DATASETMETADATATYPE = 14523;

const int UA_NS0ID_FIELDMETADATA = 14524;

const int UA_NS0ID_DATATYPEDESCRIPTION = 14525;

const int UA_NS0ID_STRUCTURETYPE_ENUMSTRINGS = 14528;

const int UA_NS0ID_KEYVALUEPAIR = 14533;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE = 14534;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_CONFIGURATIONVERSION = 14544;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_PUBLISHEDDATA = 14548;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES = 14555;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_INPUTARGUMENTS = 14556;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_OUTPUTARGUMENTS = 14557;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES = 14558;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_INPUTARGUMENTS =
    14559;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_OUTPUTARGUMENTS =
    14560;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE = 14564;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_INPUTARGUMENTS =
    14565;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    14566;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE = 14567;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_INPUTARGUMENTS =
    14568;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    14569;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE = 14572;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_CONFIGURATIONVERSION = 14582;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_PUBSUBEVENTNOTIFIER = 14586;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_SELECTEDFIELDS = 14587;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_FILTER = 14588;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE = 14593;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_PUBLISHERID = 14595;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS = 14600;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_STATE = 14601;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_ENABLE = 14602;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_DISABLE = 14603;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE = 14604;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE_INPUTARGUMENTS =
    14605;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE = 14623;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE_INPUTARGUMENTS = 14624;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE = 14625;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE_INPUTARGUMENTS = 14626;

const int UA_NS0ID_PUBSUBSTATUSTYPE = 14643;

const int UA_NS0ID_PUBSUBSTATUSTYPE_STATE = 14644;

const int UA_NS0ID_PUBSUBSTATUSTYPE_ENABLE = 14645;

const int UA_NS0ID_PUBSUBSTATUSTYPE_DISABLE = 14646;

const int UA_NS0ID_PUBSUBSTATE = 14647;

const int UA_NS0ID_PUBSUBSTATE_ENUMSTRINGS = 14648;

const int UA_NS0ID_FIELDTARGETDATATYPE = 14744;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTXML = 14794;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTXML = 14795;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTXML = 14796;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTXML = 14797;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTXML = 14798;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTXML = 14799;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTXML = 14800;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTXML = 14801;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTXML = 14802;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTXML = 14803;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTXML = 14804;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE = 14805;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION = 14806;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT =
    14807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA = 14808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14810;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION = 14811;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION = 14812;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT =
    14813;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD = 14826;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DATATYPEVERSION = 14827;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14828;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR = 14829;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14830;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14831;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14832;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION =
    14833;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT =
    14834;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE = 14835;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION = 14836;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT =
    14837;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTBINARY = 14839;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTBINARY = 14844;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTBINARY = 14845;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTBINARY = 14846;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTBINARY = 14847;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTBINARY = 14848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE = 14849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION =
    14850;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT =
    14851;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA = 14852;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14854;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION = 14855;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION =
    14856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT =
    14857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD = 14870;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DATATYPEVERSION = 14871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR = 14873;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14874;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14876;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION =
    14877;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT =
    14878;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION =
    14880;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT =
    14881;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONLIMIT = 14900;

const int UA_NS0ID_DATASETTOWRITER = 14936;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DEPRECATED = 15001;

const int UA_NS0ID_MAXCHARACTERS = 15002;

const int UA_NS0ID_SERVERTYPE_URISVERSION = 15003;

const int UA_NS0ID_SERVER_URISVERSION = 15004;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION = 15005;

const int UA_NS0ID_UABINARYFILEDATATYPE = 15006;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE = 15007;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE = 15008;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE_ENUMSTRINGS = 15009;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_KEYLIFETIME =
    15010;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYPOLICYURI =
    15011;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXFUTUREKEYCOUNT =
    15012;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE = 15013;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTID = 15014;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTTYPE = 15015;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENODE = 15016;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENAME = 15017;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_TIME = 15018;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_RECEIVETIME = 15019;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_LOCALTIME = 15020;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_MESSAGE = 15021;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SEVERITY = 15022;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_ACTIONTIMESTAMP = 15023;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_STATUS = 15024;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SERVERID = 15025;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTAUDITENTRYID = 15026;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTUSERID = 15027;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_METHODID = 15028;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_INPUTARGUMENTS = 15029;

const int UA_NS0ID_PERMISSIONTYPE_OPTIONSETVALUES = 15030;

const int UA_NS0ID_ACCESSLEVELTYPE = 15031;

const int UA_NS0ID_ACCESSLEVELTYPE_OPTIONSETVALUES = 15032;

const int UA_NS0ID_EVENTNOTIFIERTYPE = 15033;

const int UA_NS0ID_EVENTNOTIFIERTYPE_OPTIONSETVALUES = 15034;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE_OPTIONSETVALUES = 15035;

const int UA_NS0ID_ATTRIBUTEWRITEMASK_OPTIONSETVALUES = 15036;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DEPRECATED = 15037;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTVALUES =
    15038;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DEPRECATED = 15039;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTVALUES =
    15040;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTJSON = 15041;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTJSON = 15042;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXPASTKEYCOUNT =
    15043;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTJSON = 15044;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTJSON = 15045;

const int UA_NS0ID_SECURITYGROUPTYPE_KEYLIFETIME = 15046;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYPOLICYURI = 15047;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXFUTUREKEYCOUNT = 15048;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTJSON = 15049;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTJSON = 15050;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTJSON = 15051;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION = 15052;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_INPUTARGUMENTS =
    15053;

const int UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE = 15054;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_INPUTARGUMENTS =
    15055;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXPASTKEYCOUNT = 15056;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15057;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTJSON = 15058;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTJSON = 15059;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTJSON = 15060;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTJSON = 15061;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTJSON = 15062;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTJSON = 15063;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE = 15064;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTJSON = 15065;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTJSON = 15066;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTJSON = 15067;

const int UA_NS0ID_NODE_ENCODING_DEFAULTJSON = 15068;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTJSON = 15069;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTJSON = 15070;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTJSON = 15071;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS = 15072;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTJSON = 15073;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTJSON = 15074;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTJSON = 15075;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTJSON = 15076;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTJSON = 15077;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTJSON = 15078;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTJSON = 15079;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTJSON = 15080;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTJSON = 15081;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTJSON = 15082;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTJSON = 15083;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTJSON = 15084;

const int UA_NS0ID_UNION_ENCODING_DEFAULTJSON = 15085;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTJSON = 15086;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTJSON = 15087;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTJSON = 15088;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTJSON = 15089;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTJSON = 15090;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTJSON = 15091;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTJSON = 15092;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTJSON = 15093;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTJSON = 15094;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTJSON = 15095;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTJSON = 15096;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTJSON = 15097;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTJSON = 15098;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTJSON = 15099;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTJSON = 15100;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTJSON = 15101;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTJSON = 15102;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTJSON = 15103;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTJSON = 15104;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15105;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15106;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTJSON = 15107;

const int UA_NS0ID_SUBSCRIBEDDATASETTYPE = 15108;

const int UA_NS0ID_CHOICESTATETYPE = 15109;

const int UA_NS0ID_CHOICESTATETYPE_STATENUMBER = 15110;

const int UA_NS0ID_TARGETVARIABLESTYPE = 15111;

const int UA_NS0ID_HASGUARD = 15112;

const int UA_NS0ID_GUARDVARIABLETYPE = 15113;

const int UA_NS0ID_TARGETVARIABLESTYPE_TARGETVARIABLES = 15114;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES = 15115;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_INPUTARGUMENTS =
    15116;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_OUTPUTARGUMENTS =
    15117;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES = 15118;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_INPUTARGUMENTS =
    15119;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_OUTPUTARGUMENTS =
    15120;

const int UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE = 15121;

const int
    UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    15122;

const int
    UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    15123;

const int UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE = 15124;

const int
    UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    15125;

const int
    UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    15126;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORTYPE = 15127;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE = 15128;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE_EXPRESSION = 15129;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTJSON = 15130;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTJSON = 15131;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15132;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15133;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15134;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15135;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTJSON = 15136;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTJSON = 15137;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15138;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15139;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15140;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15141;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15142;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTJSON = 15143;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15144;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15145;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15146;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTJSON = 15147;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15148;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTJSON = 15149;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTJSON = 15150;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTJSON = 15151;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTJSON = 15152;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTJSON = 15153;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE =
    15154;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE = 15155;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_RESOURCEURI = 15156;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTJSON = 15157;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15158;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15159;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15160;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15161;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTJSON = 15162;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTJSON = 15163;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTJSON = 15164;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTJSON = 15165;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTJSON = 15166;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTJSON = 15167;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTJSON = 15168;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTJSON = 15169;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15170;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15171;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTJSON = 15172;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTJSON = 15173;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTJSON = 15174;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTJSON = 15175;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15176;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15177;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15178;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTJSON = 15179;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTJSON = 15180;

const int UA_NS0ID_USERCREDENTIALCERTIFICATETYPE = 15181;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTJSON = 15182;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTJSON = 15183;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTJSON = 15184;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTJSON = 15185;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTJSON = 15186;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTJSON = 15187;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTJSON = 15188;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTJSON = 15189;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTJSON = 15190;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTJSON = 15191;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTJSON = 15192;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTJSON =
    15193;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTJSON =
    15194;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15195;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15196;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15197;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15198;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTJSON = 15199;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTJSON = 15200;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15201;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTJSON = 15202;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTJSON = 15203;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTJSON = 15204;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTJSON = 15205;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTJSON = 15206;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTJSON = 15207;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTJSON = 15208;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15209;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15210;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTJSON = 15211;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS = 15212;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15213;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15214;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS = 15215;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_INPUTARGUMENTS = 15216;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15217;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE = 15218;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 15219;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_OUTPUTARGUMENTS = 15220;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETMETADATA =
    15221;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER = 15222;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15223;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15224;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15225;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15226;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15227;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTJSON = 15228;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETMETADATA = 15229;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15230;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15231;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15232;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15233;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15234;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15235;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTJSON = 15236;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETMETADATA = 15237;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15238;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15239;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15240;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15241;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15242;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15243;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTJSON = 15244;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETMETADATA = 15245;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_RESOURCEURI = 15246;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15247;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE = 15248;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15249;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_RESOURCEURI = 15250;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15251;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTJSON = 15252;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_INPUTARGUMENTS = 15253;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTJSON = 15254;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTJSON = 15255;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTJSON = 15256;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTJSON = 15257;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTJSON = 15258;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTJSON = 15259;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTJSON = 15260;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTJSON = 15261;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTJSON = 15262;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15263;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTJSON = 15264;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS = 15265;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_STATE = 15266;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_ENABLE = 15267;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_DISABLE = 15268;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTJSON = 15269;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTJSON = 15270;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTJSON = 15271;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTJSON = 15272;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTJSON = 15273;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTJSON = 15274;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTJSON = 15275;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTJSON = 15276;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTJSON = 15277;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTJSON = 15278;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTJSON = 15279;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTJSON = 15280;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTJSON = 15281;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTJSON = 15282;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15283;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTJSON = 15284;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTJSON = 15285;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTJSON = 15286;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTJSON = 15287;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTJSON = 15288;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTJSON = 15289;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTJSON = 15290;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTJSON = 15291;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTJSON = 15292;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTJSON = 15293;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTJSON = 15294;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTJSON = 15295;

const int UA_NS0ID_HASDATASETWRITER = 15296;

const int UA_NS0ID_HASDATASETREADER = 15297;

const int UA_NS0ID_DATASETWRITERTYPE = 15298;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS = 15299;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_STATE = 15300;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_ENABLE = 15301;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_DISABLE = 15302;

const int UA_NS0ID_DATASETWRITERTYPE_TRANSPORTSETTINGS = 15303;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTJSON = 15304;

const int UA_NS0ID_DATASETWRITERTRANSPORTTYPE = 15305;

const int UA_NS0ID_DATASETREADERTYPE = 15306;

const int UA_NS0ID_DATASETREADERTYPE_STATUS = 15307;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_STATE = 15308;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_ENABLE = 15309;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_DISABLE = 15310;

const int UA_NS0ID_DATASETREADERTYPE_TRANSPORTSETTINGS = 15311;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTJSON = 15312;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTJSON = 15313;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTJSON = 15314;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTJSON = 15315;

const int UA_NS0ID_DATASETREADERTYPE_SUBSCRIBEDDATASET = 15316;

const int UA_NS0ID_ELSEGUARDVARIABLETYPE = 15317;

const int UA_NS0ID_BASEANALOGTYPE = 15318;

const int UA_NS0ID_DATASETREADERTRANSPORTTYPE = 15319;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTJSON = 15320;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTJSON = 15321;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTJSON = 15322;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15323;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15324;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTJSON = 15325;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTJSON = 15326;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15327;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15328;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTJSON = 15329;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15330;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTJSON = 15331;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTJSON = 15332;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTJSON = 15333;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_RESOURCEURI = 15334;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15335;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15336;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15337;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15338;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15339;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15340;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTJSON = 15341;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTJSON = 15342;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTJSON = 15343;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTJSON = 15344;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15345;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTJSON = 15346;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTJSON = 15347;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTJSON = 15348;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTJSON = 15349;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15350;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTJSON = 15351;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTJSON = 15352;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15353;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTJSON = 15354;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15355;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTJSON = 15356;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15357;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15358;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15359;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15360;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTJSON = 15361;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTJSON = 15362;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTJSON = 15363;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTJSON = 15364;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON =
    15365;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTJSON =
    15366;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTJSON = 15367;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15368;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON =
    15369;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTJSON = 15370;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTJSON = 15371;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15372;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15373;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15374;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTJSON = 15375;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTJSON = 15376;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15377;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15378;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTJSON = 15379;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTJSON = 15380;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTJSON = 15381;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTJSON = 15382;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE = 15383;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATESESSIONID = 15384;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATECLIENTNAME = 15385;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_INVOCATIONCREATIONTIME = 15386;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTTRANSITIONTIME = 15387;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALL = 15388;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODSESSIONID = 15389;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTARGUMENTS = 15390;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTARGUMENTS = 15391;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTVALUES = 15392;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTVALUES = 15393;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALLTIME = 15394;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODRETURNSTATUS = 15395;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE = 15396;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTBINARY = 15397;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 15398;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION =
    15399;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT =
    15400;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTXML = 15401;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 15402;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION =
    15403;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT =
    15404;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTJSON = 15405;

const int UA_NS0ID_ACCESSLEVELEXTYPE = 15406;

const int UA_NS0ID_ACCESSLEVELEXTYPE_OPTIONSETVALUES = 15407;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONSEXCLUDE = 15408;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTSEXCLUDE = 15409;

const int UA_NS0ID_ROLETYPE_APPLICATIONSEXCLUDE = 15410;

const int UA_NS0ID_ROLETYPE_ENDPOINTSEXCLUDE = 15411;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONSEXCLUDE = 15412;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTSEXCLUDE = 15413;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONSEXCLUDE = 15414;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTSEXCLUDE = 15415;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONSEXCLUDE = 15416;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTSEXCLUDE = 15417;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONSEXCLUDE = 15418;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15419;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15420;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 15421;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTBINARY = 15422;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTSEXCLUDE = 15423;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONSEXCLUDE = 15424;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTSEXCLUDE = 15425;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONSEXCLUDE = 15426;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTSEXCLUDE = 15427;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONSEXCLUDE = 15428;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTSEXCLUDE = 15429;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONSEXCLUDE = 15430;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP = 15431;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS =
    15433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS = 15434;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP =
    15438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15439;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP = 15440;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_INPUTARGUMENTS = 15441;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_OUTPUTARGUMENTS = 15442;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS = 15443;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP = 15444;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15445;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15446;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP = 15447;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15448;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE = 15449;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15450;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15451;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE = 15452;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER =
    15453;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP =
    15454;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_INPUTARGUMENTS =
    15455;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15456;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP =
    15457;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15458;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER =
    15459;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    15460;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP = 15461;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_INPUTARGUMENTS =
    15462;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15463;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP = 15464;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15465;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE = 15466;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15467;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15468;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE = 15469;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15470;

const int UA_NS0ID_SECURITYGROUPTYPE = 15471;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYGROUPID = 15472;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS =
    15473;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15474;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15475;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15476;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15477;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15478;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15479;

const int UA_NS0ID_WRITERGROUPDATATYPE = 15480;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS = 15481;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15482;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15483;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15484;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15485;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15486;

const int UA_NS0ID_STRUCTUREDESCRIPTION = 15487;

const int UA_NS0ID_ENUMDESCRIPTION = 15488;

const int UA_NS0ID_EXTENSIONFIELDSTYPE = 15489;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_EXTENSIONFIELDNAME_PLACEHOLDER = 15490;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD = 15491;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15492;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15493;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD = 15494;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15495;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE = 15496;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15497;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_OUTPUTARGUMENTS = 15498;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE = 15499;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15500;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION = 15501;

const int UA_NS0ID_NETWORKADDRESSDATATYPE = 15502;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS = 15503;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15504;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15505;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15506;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15507;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15508;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION =
    15509;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE = 15510;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS = 15511;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15512;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15513;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15514;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15515;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15516;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_OUTPUTARGUMENTS =
    15517;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_OUTPUTARGUMENTS =
    15518;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT =
    15519;

const int UA_NS0ID_READERGROUPDATATYPE = 15520;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE = 15521;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION =
    15522;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT =
    15523;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15524;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15525;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15526;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTSEXCLUDE = 15527;

const int UA_NS0ID_ENDPOINTTYPE = 15528;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTXML = 15529;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE = 15530;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTXML = 15531;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 15532;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE =
    15533;

const int UA_NS0ID_DATATYPESCHEMAHEADER = 15534;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE = 15535;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTID = 15536;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTTYPE = 15537;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENODE = 15538;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENAME = 15539;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_TIME = 15540;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_RECEIVETIME = 15541;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_LOCALTIME = 15542;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_MESSAGE = 15543;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SEVERITY = 15544;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONNECTIONID = 15545;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_GROUPID = 15546;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_STATE = 15547;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE = 15548;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTID = 15549;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTTYPE = 15550;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENODE = 15551;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENAME = 15552;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_TIME = 15553;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_RECEIVETIME = 15554;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_LOCALTIME = 15555;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MESSAGE = 15556;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SEVERITY = 15557;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONNECTIONID = 15558;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_GROUPID = 15559;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_STATE = 15560;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_ACTUAL = 15561;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MAXIMUM = 15562;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE = 15563;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTID = 15564;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTTYPE = 15565;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENODE = 15566;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENAME = 15567;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_TIME = 15568;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_RECEIVETIME = 15569;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_LOCALTIME = 15570;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_MESSAGE = 15571;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SEVERITY = 15572;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONNECTIONID = 15573;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_GROUPID = 15574;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_STATE = 15575;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_ERROR = 15576;

const int UA_NS0ID_DATASETFIELDFLAGS_OPTIONSETVALUES = 15577;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE = 15578;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    15579;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE = 15580;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE = 15581;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE = 15582;

const int UA_NS0ID_DATASETFIELDCONTENTMASK = 15583;

const int UA_NS0ID_DATASETFIELDCONTENTMASK_OPTIONSETVALUES = 15584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION = 15585;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION =
    15586;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT =
    15587;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE = 15588;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTXML = 15589;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTXML = 15590;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION = 15591;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION = 15592;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT =
    15593;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION = 15594;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15595;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT = 15596;

const int UA_NS0ID_DATASETWRITERDATATYPE = 15597;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE = 15598;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION = 15599;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION =
    15600;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT =
    15601;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION = 15602;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15603;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT =
    15604;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE = 15605;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET = 15606;

const int UA_NS0ID_ROLESETTYPE = 15607;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER = 15608;

const int UA_NS0ID_PUBSUBGROUPDATATYPE = 15609;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION = 15610;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE = 15611;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY = 15612;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY_INPUTARGUMENTS =
    15613;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY = 15614;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY_INPUTARGUMENTS =
    15615;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE = 15616;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE = 15617;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE = 15618;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT =
    15619;

const int UA_NS0ID_ROLETYPE = 15620;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE = 15621;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE = 15622;

const int UA_NS0ID_DATASETREADERDATATYPE = 15623;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY = 15624;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY_INPUTARGUMENTS = 15625;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY = 15626;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY_INPUTARGUMENTS = 15627;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE = 15628;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE = 15629;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE = 15630;

const int UA_NS0ID_TARGETVARIABLESDATATYPE = 15631;

const int UA_NS0ID_IDENTITYCRITERIATYPE = 15632;

const int UA_NS0ID_IDENTITYCRITERIATYPE_ENUMVALUES = 15633;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE = 15634;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE = 15635;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE = 15636;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE_INPUTARGUMENTS = 15637;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE = 15638;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE_INPUTARGUMENTS = 15639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15640;

const int UA_NS0ID_DATASETORDERINGTYPE_ENUMSTRINGS = 15641;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK = 15642;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15643;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS = 15644;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE = 15645;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK = 15646;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15647;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY = 15648;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY_INPUTARGUMENTS = 15649;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY = 15650;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY_INPUTARGUMENTS =
    15651;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE = 15652;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE = 15653;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK = 15654;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15655;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER = 15656;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE = 15657;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK = 15658;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15659;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY = 15660;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY_INPUTARGUMENTS =
    15661;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY = 15662;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY_INPUTARGUMENTS =
    15663;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE = 15664;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE = 15665;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15666;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE = 15667;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER = 15668;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE = 15669;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE = 15670;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTBINARY = 15671;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY = 15672;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY_INPUTARGUMENTS = 15673;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY = 15674;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY_INPUTARGUMENTS = 15675;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTBINARY = 15676;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15677;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTBINARY =
    15678;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTBINARY = 15679;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR = 15680;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTBINARY = 15681;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTBINARY = 15682;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15683;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY = 15684;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY_INPUTARGUMENTS = 15685;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY = 15686;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY_INPUTARGUMENTS = 15687;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15688;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTBINARY = 15689;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15690;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15691;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR = 15692;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15693;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTBINARY = 15694;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15695;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY = 15696;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY_INPUTARGUMENTS = 15697;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY = 15698;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY_INPUTARGUMENTS =
    15699;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15700;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15701;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15702;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTBINARY = 15703;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN = 15704;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15705;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15706;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15707;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY = 15708;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY_INPUTARGUMENTS =
    15709;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY = 15710;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY_INPUTARGUMENTS =
    15711;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTBINARY = 15712;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTBINARY =
    15713;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTJSON = 15714;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15715;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN = 15716;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15717;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15718;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15719;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY = 15720;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY_INPUTARGUMENTS =
    15721;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY = 15722;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY_INPUTARGUMENTS =
    15723;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15724;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15725;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    15726;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15727;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTXML = 15728;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15729;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE = 15730;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION =
    15731;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT =
    15732;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE = 15734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 15735;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTBINARY = 15736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 15737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE = 15738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION =
    15739;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT =
    15740;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER = 15741;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION =
    15742;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT =
    15743;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE = 15744;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLIENTPROCESSINGTIMEOUT = 15745;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD = 15746;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_INPUTARGUMENTS =
    15747;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_OUTPUTARGUMENTS =
    15748;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE = 15749;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_OUTPUTARGUMENTS =
    15750;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT = 15751;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_INPUTARGUMENTS =
    15752;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_OUTPUTARGUMENTS =
    15753;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER = 15754;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE =
    15755;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_ID =
    15756;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NAME =
    15757;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NUMBER =
    15758;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    15759;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION =
    15760;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_ID =
    15761;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NAME =
    15762;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NUMBER =
    15763;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_TRANSITIONTIME =
    15764;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    15765;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE = 15766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION =
    15767;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    15768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 15769;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION =
    15770;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT =
    15771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 15772;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION =
    15773;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT =
    15774;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE = 15775;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION =
    15776;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT =
    15777;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE = 15778;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION =
    15779;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT =
    15780;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 15781;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    15782;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE = 15784;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15785;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15786;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE = 15787;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION =
    15788;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT =
    15789;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER = 15790;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID =
    15791;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI =
    15792;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 15793;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_RESET =
    15794;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE = 15795;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_INPUTARGUMENTS = 15796;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_OUTPUTARGUMENTS = 15797;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE = 15798;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_OUTPUTARGUMENTS = 15799;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE = 15800;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_INPUTARGUMENTS = 15801;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_OUTPUTARGUMENTS = 15802;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE = 15803;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE = 15804;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_ID = 15805;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NAME = 15806;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 15807;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    15808;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION = 15809;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_ID = 15810;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NAME = 15811;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 15812;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME =
    15813;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    15814;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE = 15815;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE_STATENUMBER = 15816;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE = 15817;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE_STATENUMBER = 15818;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER = 15819;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER_STATENUMBER =
    15820;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE = 15821;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE_STATENUMBER = 15822;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR = 15823;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR_STATENUMBER = 15824;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE = 15825;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE_TRANSITIONNUMBER =
    15826;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER =
    15827;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER_TRANSITIONNUMBER =
    15828;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE = 15829;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE_TRANSITIONNUMBER =
    15830;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE = 15831;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE_TRANSITIONNUMBER =
    15832;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE = 15833;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE_TRANSITIONNUMBER =
    15834;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR = 15835;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR_TRANSITIONNUMBER =
    15836;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR = 15837;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR_TRANSITIONNUMBER =
    15838;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR = 15839;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR_TRANSITIONNUMBER =
    15840;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE = 15841;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE_TRANSITIONNUMBER =
    15842;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_RESET = 15843;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS = 15844;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_STATE = 15845;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_ENABLE = 15846;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_DISABLE = 15847;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS =
    15848;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    15849;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    15850;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS = 15851;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15852;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE = 15854;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15855;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE = 15857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION =
    15858;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT =
    15859;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE = 15860;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15861;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15862;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE =
    15863;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15864;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS = 15865;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE = 15866;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15867;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15868;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE = 15869;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15870;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE = 15872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION =
    15873;

const int UA_NS0ID_OVERRIDEVALUEHANDLING = 15874;

const int UA_NS0ID_OVERRIDEVALUEHANDLING_ENUMSTRINGS = 15875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT =
    15876;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE = 15877;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    15878;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15879;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE = 15880;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15881;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15882;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE = 15883;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION =
    15884;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    15885;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE = 15886;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION =
    15887;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT =
    15888;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 15889;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION =
    15890;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT =
    15891;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE =
    15892;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE =
    15893;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE =
    15894;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 15895;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15896;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15897;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 15898;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15899;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15900;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE = 15901;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTXML = 15902;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTBINARY = 15903;

const int UA_NS0ID_DATASETFIELDFLAGS = 15904;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15905;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE = 15906;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS = 15907;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15908;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15909;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP = 15910;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15911;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS =
    15912;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS = 15913;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15914;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15915;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15916;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP =
    15917;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15918;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 15919;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15920;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15921;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 15922;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15923;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15924;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 15925;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYMODE = 15926;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYGROUPID = 15927;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYKEYSERVICES = 15928;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15929;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 15931;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYMODE = 15932;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYGROUPID = 15933;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYKEYSERVICES = 15934;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15935;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15936;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS =
    15937;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    15938;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    15939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE =
    15940;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15941;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE =
    15943;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    15944;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE =
    15946;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    15947;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15948;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTXML = 15949;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTXML = 15950;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTXML = 15951;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTXML = 15952;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTXML = 15953;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTXML = 15954;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTXML = 15955;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15956;

const int UA_NS0ID_OPCUANAMESPACEMETADATA = 15957;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEURI = 15958;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEVERSION = 15959;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEPUBLICATIONDATE = 15960;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_ISNAMESPACESUBSET = 15961;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNODEIDTYPES = 15962;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNUMERICNODEIDRANGE = 15963;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICSTRINGNODEIDPATTERN = 15964;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE = 15965;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SIZE = 15966;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITABLE = 15967;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_USERWRITABLE = 15968;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPENCOUNT = 15969;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_MIMETYPE = 15970;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN = 15971;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    15972;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    15973;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE = 15974;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    15975;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ = 15976;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_INPUTARGUMENTS =
    15977;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    15978;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE = 15979;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    15980;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION = 15981;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    15982;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    15983;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION = 15984;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    15985;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_EXPORTNAMESPACE = 15986;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15987;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTXML = 15988;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    15989;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15990;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15991;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTXML = 15992;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15993;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    15994;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15995;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15996;

const int UA_NS0ID_ROLESETTYPE_ADDROLE = 15997;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_INPUTARGUMENTS = 15998;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_OUTPUTARGUMENTS = 15999;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE = 16000;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE_INPUTARGUMENTS = 16001;

const int UA_NS0ID_ADDROLEMETHODTYPE = 16002;

const int UA_NS0ID_ADDROLEMETHODTYPE_INPUTARGUMENTS = 16003;

const int UA_NS0ID_ADDROLEMETHODTYPE_OUTPUTARGUMENTS = 16004;

const int UA_NS0ID_REMOVEROLEMETHODTYPE = 16005;

const int UA_NS0ID_REMOVEROLEMETHODTYPE_INPUTARGUMENTS = 16006;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTXML = 16007;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16008;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16009;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTXML = 16010;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTXML = 16011;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTXML = 16012;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    16013;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16014;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16015;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16016;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16017;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16018;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16019;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    16020;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16021;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16022;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16023;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE = 16024;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 16025;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 16026;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER = 16027;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION = 16028;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT =
    16029;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE = 16030;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION =
    16031;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    16032;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 16033;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION =
    16034;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT =
    16035;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER = 16036;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 16037;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION =
    16038;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT =
    16039;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE = 16040;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY = 16041;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY_INPUTARGUMENTS = 16042;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY = 16043;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY_INPUTARGUMENTS = 16044;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION =
    16045;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT =
    16046;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE = 16047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION =
    16048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT =
    16049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 16050;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    16051;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE = 16053;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16054;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE = 16056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION = 16057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT =
    16058;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    16059;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    16060;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    16061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 16062;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16063;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16064;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE = 16065;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16066;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16067;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE = 16068;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION =
    16069;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT =
    16070;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE = 16071;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    16072;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16073;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    16074;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    16075;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    16076;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE = 16077;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16078;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16079;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE = 16080;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16081;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE = 16083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION =
    16084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT =
    16085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE = 16086;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    16087;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16088;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE = 16089;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16090;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16091;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE = 16092;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION =
    16093;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    16094;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE = 16095;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION =
    16096;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT =
    16097;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 16098;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION =
    16099;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT =
    16100;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    16101;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    16102;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    16103;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 16104;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16105;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16106;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 16107;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16108;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16109;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 16110;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16111;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16112;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 16113;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16114;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16115;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 16116;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16117;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16118;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 16119;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16120;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16121;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    16122;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    16123;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    16124;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE = 16125;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTXML = 16126;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE = 16127;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION = 16128;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT =
    16129;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16130;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE = 16131;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION =
    16132;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT =
    16133;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTROLEPERMISSIONS = 16134;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTUSERROLEPERMISSIONS = 16135;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTACCESSRESTRICTIONS = 16136;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTROLEPERMISSIONS = 16137;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTUSERROLEPERMISSIONS = 16138;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTACCESSRESTRICTIONS = 16139;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTROLEPERMISSIONS =
    16140;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTUSERROLEPERMISSIONS =
    16141;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTACCESSRESTRICTIONS =
    16142;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16143;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE = 16144;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    16145;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16146;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE = 16147;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    16148;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16149;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTJSON = 16150;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTJSON = 16151;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16152;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTJSON = 16153;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTJSON = 16154;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTJSON = 16155;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTJSON = 16156;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16157;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16158;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTJSON = 16159;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    16160;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16161;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_IDENTITIES = 16162;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONS = 16163;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTS = 16164;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION = 16165;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION_INPUTARGUMENTS =
    16166;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION = 16167;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16168;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT = 16169;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT_INPUTARGUMENTS =
    16170;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT = 16171;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT_INPUTARGUMENTS =
    16172;

const int UA_NS0ID_ROLETYPE_IDENTITIES = 16173;

const int UA_NS0ID_ROLETYPE_APPLICATIONS = 16174;

const int UA_NS0ID_ROLETYPE_ENDPOINTS = 16175;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION = 16176;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION_INPUTARGUMENTS = 16177;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION = 16178;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION_INPUTARGUMENTS = 16179;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT = 16180;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT_INPUTARGUMENTS = 16181;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT = 16182;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT_INPUTARGUMENTS = 16183;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE = 16184;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16185;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE = 16186;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16187;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE = 16188;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE_INPUTARGUMENTS = 16189;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE = 16190;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE_INPUTARGUMENTS = 16191;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_IDENTITIES = 16192;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONS = 16193;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTS = 16194;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION = 16195;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION_INPUTARGUMENTS =
    16196;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION = 16197;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION_INPUTARGUMENTS =
    16198;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT = 16199;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT_INPUTARGUMENTS = 16200;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT = 16201;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT_INPUTARGUMENTS =
    16202;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_IDENTITIES = 16203;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONS = 16204;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTS = 16205;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION = 16206;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION_INPUTARGUMENTS =
    16207;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION = 16208;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16209;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT = 16210;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT_INPUTARGUMENTS =
    16211;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT = 16212;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT_INPUTARGUMENTS =
    16213;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_IDENTITIES = 16214;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONS = 16215;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTS = 16216;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION = 16217;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION_INPUTARGUMENTS = 16218;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION = 16219;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16220;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT = 16221;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT_INPUTARGUMENTS = 16222;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT = 16223;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT_INPUTARGUMENTS = 16224;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_IDENTITIES = 16225;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONS = 16226;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTS = 16227;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION = 16228;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION_INPUTARGUMENTS = 16229;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION = 16230;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION_INPUTARGUMENTS =
    16231;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT = 16232;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT_INPUTARGUMENTS = 16233;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT = 16234;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT_INPUTARGUMENTS = 16235;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_IDENTITIES = 16236;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONS = 16237;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTS = 16238;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION = 16239;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION_INPUTARGUMENTS = 16240;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION = 16241;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16242;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT = 16243;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT_INPUTARGUMENTS = 16244;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT = 16245;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT_INPUTARGUMENTS = 16246;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_IDENTITIES = 16247;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONS = 16248;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTS = 16249;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION = 16250;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION_INPUTARGUMENTS =
    16251;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION = 16252;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION_INPUTARGUMENTS =
    16253;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT = 16254;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT_INPUTARGUMENTS = 16255;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT = 16256;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT_INPUTARGUMENTS =
    16257;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_IDENTITIES = 16258;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONS = 16259;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTS = 16260;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION = 16261;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION_INPUTARGUMENTS =
    16262;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION = 16263;

const int
    UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION_INPUTARGUMENTS =
    16264;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT = 16265;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT_INPUTARGUMENTS =
    16266;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT = 16267;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT_INPUTARGUMENTS =
    16268;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_IDENTITIES = 16269;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONS = 16270;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTS = 16271;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION = 16272;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION_INPUTARGUMENTS =
    16273;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION = 16274;

const int
    UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION_INPUTARGUMENTS =
    16275;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT = 16276;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT_INPUTARGUMENTS =
    16277;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT = 16278;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT_INPUTARGUMENTS =
    16279;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16280;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTJSON = 16281;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16282;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    16283;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16284;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16285;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTJSON = 16286;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16287;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16288;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET = 16289;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE = 16290;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS =
    16291;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16292;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16293;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16294;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET = 16295;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE = 16296;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_INPUTARGUMENTS =
    16297;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16298;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE = 16299;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16300;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE = 16301;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS =
    16302;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16303;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16304;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16305;

const int UA_NS0ID_AUDIODATATYPE = 16307;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16308;

const int UA_NS0ID_SELECTIONLISTTYPE = 16309;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTJSON = 16310;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTJSON = 16311;

const int UA_NS0ID_SELECTIONLISTTYPE_RESTRICTTOLIST = 16312;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE = 16313;

const int UA_NS0ID_FILESYSTEM = 16314;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER = 16315;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY =
    16316;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS =
    16317;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS =
    16318;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE = 16319;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS =
    16320;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS =
    16321;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    16322;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16323;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY = 16324;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS =
    16325;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS =
    16326;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER = 16327;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SIZE = 16328;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITABLE = 16329;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_USERWRITABLE = 16330;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPENCOUNT = 16331;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_MIMETYPE = 16332;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN = 16333;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS = 16334;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS = 16335;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE = 16336;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS = 16337;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ = 16338;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS = 16339;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS = 16340;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE = 16341;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS = 16342;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION = 16343;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS =
    16344;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS =
    16345;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION = 16346;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS =
    16347;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY = 16348;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_INPUTARGUMENTS = 16349;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_OUTPUTARGUMENTS = 16350;

const int UA_NS0ID_FILESYSTEM_CREATEFILE = 16351;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_INPUTARGUMENTS = 16352;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_OUTPUTARGUMENTS = 16353;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT = 16354;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 16355;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY = 16356;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_INPUTARGUMENTS = 16357;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_OUTPUTARGUMENTS = 16358;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_INPUTARGUMENTS =
    16359;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_INPUTARGUMENTS = 16360;

const int UA_NS0ID_HASALARMSUPPRESSIONGROUP = 16361;

const int UA_NS0ID_ALARMGROUPMEMBER = 16362;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSID = 16363;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSNAME = 16364;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSID = 16365;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16366;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSID = 16367;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSNAME = 16368;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSID = 16369;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16370;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE = 16371;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_ID = 16372;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NAME = 16373;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NUMBER = 16374;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16375;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16376;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16377;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRUESTATE = 16378;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_FALSESTATE = 16379;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE = 16380;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_ID = 16381;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NAME = 16382;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NUMBER = 16383;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16384;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRANSITIONTIME = 16385;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16386;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRUESTATE = 16387;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_FALSESTATE = 16388;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLEENABLED = 16389;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND = 16390;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16391;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16392;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16393;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16394;

const int UA_NS0ID_ALARMCONDITIONTYPE_ONDELAY = 16395;

const int UA_NS0ID_ALARMCONDITIONTYPE_OFFDELAY = 16396;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUPFLAG = 16397;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUP = 16398;

const int UA_NS0ID_ALARMCONDITIONTYPE_ALARMGROUP_PLACEHOLDER = 16399;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMTIME = 16400;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMREPEATCOUNT = 16401;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCE = 16402;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESS = 16403;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16404;

const int UA_NS0ID_ALARMGROUPTYPE = 16405;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER = 16406;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTID =
    16407;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTTYPE =
    16408;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENODE =
    16409;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENAME =
    16410;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_TIME =
    16411;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RECEIVETIME =
    16412;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LOCALTIME =
    16413;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MESSAGE =
    16414;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SEVERITY =
    16415;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSID =
    16416;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSNAME =
    16417;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSID =
    16418;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSNAME =
    16419;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONNAME =
    16420;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_BRANCHID =
    16421;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RETAIN =
    16422;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE =
    16423;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_ID =
    16424;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NAME =
    16425;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NUMBER =
    16426;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    16427;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRANSITIONTIME =
    16428;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    16429;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRUESTATE =
    16430;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_FALSESTATE =
    16431;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY =
    16432;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY_SOURCETIMESTAMP =
    16433;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY =
    16434;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY_SOURCETIMESTAMP =
    16435;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT =
    16436;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT_SOURCETIMESTAMP =
    16437;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CLIENTUSERID =
    16438;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_DISABLE =
    16439;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLE =
    16440;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT =
    16441;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT_INPUTARGUMENTS =
    16442;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE =
    16443;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_ID =
    16444;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NAME =
    16445;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NUMBER =
    16446;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    16447;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRANSITIONTIME =
    16448;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    16449;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRUESTATE =
    16450;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_FALSESTATE =
    16451;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE =
    16452;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_ID =
    16453;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NAME =
    16454;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NUMBER =
    16455;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    16456;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRANSITIONTIME =
    16457;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    16458;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRUESTATE =
    16459;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_FALSESTATE =
    16460;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE =
    16461;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE_INPUTARGUMENTS =
    16462;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM =
    16463;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM_INPUTARGUMENTS =
    16464;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE =
    16465;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_ID =
    16466;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NAME =
    16467;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NUMBER =
    16468;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    16469;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRANSITIONTIME =
    16470;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    16471;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRUESTATE =
    16472;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_FALSESTATE =
    16473;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_INPUTNODE =
    16474;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE =
    16475;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_ID =
    16476;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NAME =
    16477;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NUMBER =
    16478;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    16479;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRANSITIONTIME =
    16480;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    16481;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRUESTATE =
    16482;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_FALSESTATE =
    16483;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE =
    16484;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_ID =
    16485;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NAME =
    16486;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NUMBER =
    16487;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16488;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRANSITIONTIME =
    16489;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16490;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRUESTATE =
    16491;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_FALSESTATE =
    16492;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE =
    16493;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_ID =
    16494;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NAME =
    16495;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NUMBER =
    16496;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16497;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRANSITIONTIME =
    16498;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16499;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRUESTATE =
    16500;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_FALSESTATE =
    16501;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE =
    16502;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE =
    16503;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_ID =
    16504;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NAME =
    16505;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    16506;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    16507;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION =
    16508;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_ID =
    16509;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NAME =
    16510;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    16511;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    16512;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    16513;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVETIME =
    16514;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE =
    16515;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE =
    16516;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE =
    16517;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    16518;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDORSHELVED =
    16519;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MAXTIMESHELVED =
    16520;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLEENABLED =
    16521;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND =
    16522;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    16523;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16524;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16525;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16526;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ONDELAY =
    16527;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OFFDELAY =
    16528;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUPFLAG =
    16529;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUP =
    16530;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMTIME =
    16531;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMREPEATCOUNT =
    16532;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCE =
    16533;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS =
    16534;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP =
    16535;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSID = 16536;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16537;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE = 16538;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16539;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16540;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16541;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16542;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16543;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16544;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16545;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16546;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE = 16547;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_ID = 16548;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NAME = 16549;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NUMBER = 16550;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16551;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16552;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16553;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16554;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16555;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLEENABLED = 16556;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND = 16557;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS =
    16558;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS =
    16559;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP =
    16560;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS =
    16561;

const int UA_NS0ID_LIMITALARMTYPE_ONDELAY = 16562;

const int UA_NS0ID_LIMITALARMTYPE_OFFDELAY = 16563;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUPFLAG = 16564;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUP = 16565;

const int UA_NS0ID_LIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16566;

const int UA_NS0ID_LIMITALARMTYPE_REALARMTIME = 16567;

const int UA_NS0ID_LIMITALARMTYPE_REALARMREPEATCOUNT = 16568;

const int UA_NS0ID_LIMITALARMTYPE_SILENCE = 16569;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESS = 16570;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS =
    16571;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16572;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHLIMIT = 16573;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLIMIT = 16574;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLOWLIMIT = 16575;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16576;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16577;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16578;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16579;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16580;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16581;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16582;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16583;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16584;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16585;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16586;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16587;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16588;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16589;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16590;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16591;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16592;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16593;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16594;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16595;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16596;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16597;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION = 16598;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_INPUTARGUMENTS = 16599;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_OUTPUTARGUMENTS = 16600;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE =
    16601;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ONDELAY = 16602;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OFFDELAY = 16603;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16604;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16605;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16606;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMTIME = 16607;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16608;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCE = 16609;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESS = 16610;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16611;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16612;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16613;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16614;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16615;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16616;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16617;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16618;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16619;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16620;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16621;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16622;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16623;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16624;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16625;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16626;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16627;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16628;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16629;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16630;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16631;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16632;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16633;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16634;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16635;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16636;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16637;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16638;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE =
    16639;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16640;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16641;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ONDELAY = 16642;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OFFDELAY = 16643;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16644;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16645;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16646;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMTIME = 16647;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16648;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCE = 16649;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESS = 16650;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER =
    16651;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16652;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16653;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16654;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16655;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16656;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16657;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16658;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16659;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16660;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16661;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16662;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16663;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16664;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16665;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16666;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16667;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16668;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16669;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16670;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16671;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16672;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16674;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16675;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16676;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16677;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS =
    16678;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    16679;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER =
    16680;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    16681;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ONDELAY = 16682;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OFFDELAY = 16683;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16684;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16685;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16686;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMTIME = 16687;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16688;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCE = 16689;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESS = 16690;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE = 16691;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16692;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16693;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16694;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16695;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16696;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16697;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16698;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16699;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16700;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16701;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16702;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16703;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16704;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16705;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16706;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16707;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16708;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16709;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16710;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16711;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16712;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16713;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16714;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16715;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16716;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16717;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_INPUTARGUMENTS = 16718;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_OUTPUTARGUMENTS = 16719;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16720;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16721;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ONDELAY = 16722;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OFFDELAY = 16723;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16724;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16725;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16726;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMTIME = 16727;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16728;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCE = 16729;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESS = 16730;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16731;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16732;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16733;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16734;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16735;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16736;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16737;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16738;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16739;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME =
    16740;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16741;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16742;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16743;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16744;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16745;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16746;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16747;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16748;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16749;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16750;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16751;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16752;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16753;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE =
    16754;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE =
    16755;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16756;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16757;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16758;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETCLASSID = 16759;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16760;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16761;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16762;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16763;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16764;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16765;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16766;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16767;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16768;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16769;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16770;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16771;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16772;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16773;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16774;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16775;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16780;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME = 16781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16782;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16783;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16784;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16791;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16793;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE = 16795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE = 16796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16798;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16799;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETCLASSID = 16800;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16801;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16804;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER = 16807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16811;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16813;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16817;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID =
    16818;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME =
    16819;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16820;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID =
    16821;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME =
    16822;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16823;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16824;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16825;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16826;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16827;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16828;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16829;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16830;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16831;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER =
    16832;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16833;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16834;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16835;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE =
    16836;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE =
    16837;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16838;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16839;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16840;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETCLASSID = 16841;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE =
    16842;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16843;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16844;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16845;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16846;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16847;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16848;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16849;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16850;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16851;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16852;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16853;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16854;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16855;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16856;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16857;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16858;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID = 16859;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME = 16860;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16861;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID = 16862;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME =
    16863;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16864;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16865;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16866;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16867;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16868;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16869;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16870;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16871;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16872;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER = 16873;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16874;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16875;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16876;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE =
    16877;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE =
    16878;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16879;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16880;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE =
    16881;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16882;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16883;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER =
    16884;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16885;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16886;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16887;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16888;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16889;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16890;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16891;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16892;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16893;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_INPUTARGUMENTS =
    16894;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16895;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16896;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16897;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16898;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16899;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSID = 16900;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSNAME = 16901;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE = 16902;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_ID = 16903;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NAME = 16904;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16905;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16906;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16907;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16908;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16909;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16910;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE = 16911;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_ID = 16912;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NAME = 16913;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NUMBER = 16914;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16915;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16916;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16917;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRUESTATE = 16918;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_FALSESTATE = 16919;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLEENABLED = 16920;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND = 16921;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    16922;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER =
    16923;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    16924;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETCLASSID =
    16925;

const int UA_NS0ID_DISCRETEALARMTYPE_ONDELAY = 16926;

const int UA_NS0ID_DISCRETEALARMTYPE_OFFDELAY = 16927;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUPFLAG = 16928;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUP = 16929;

const int UA_NS0ID_DISCRETEALARMTYPE_ALARMGROUP_PLACEHOLDER = 16930;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMTIME = 16931;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMREPEATCOUNT = 16932;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCE = 16933;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESS = 16934;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE = 16935;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16936;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16937;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16938;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16939;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16940;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16941;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16942;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16943;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16944;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16945;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16946;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE = 16947;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_ID = 16948;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NAME = 16949;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16950;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16951;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16952;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16953;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16954;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16955;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLEENABLED = 16956;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND = 16957;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16958;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16959;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE = 16960;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16961;

const int UA_NS0ID_OFFNORMALALARMTYPE_ONDELAY = 16962;

const int UA_NS0ID_OFFNORMALALARMTYPE_OFFDELAY = 16963;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 16964;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUP = 16965;

const int UA_NS0ID_OFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 16966;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMTIME = 16967;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMREPEATCOUNT = 16968;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCE = 16969;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESS = 16970;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16971;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16972;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16973;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16974;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16975;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16976;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16977;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16978;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16979;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16980;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16981;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16982;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE = 16983;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_ID = 16984;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NAME = 16985;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16986;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16987;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16988;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16989;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16990;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16991;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLEENABLED = 16992;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND = 16993;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER = 16994;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_INPUTARGUMENTS = 16995;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_OUTPUTARGUMENTS = 16996;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER = 16997;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ONDELAY = 16998;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OFFDELAY = 16999;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 17000;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUP = 17001;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 17002;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMTIME = 17003;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMREPEATCOUNT = 17004;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCE = 17005;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESS = 17006;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER_INPUTARGUMENTS = 17007;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSID = 17008;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSNAME = 17009;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE = 17010;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_ID = 17011;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NAME = 17012;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17013;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 17014;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 17015;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17016;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17017;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17018;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE = 17019;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_ID = 17020;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NAME = 17021;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NUMBER = 17022;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 17023;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17024;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 17025;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRUESTATE = 17026;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_FALSESTATE = 17027;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLEENABLED = 17028;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND = 17029;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE = 17030;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_INPUTARGUMENTS =
    17031;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS =
    17032;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE = 17033;

const int UA_NS0ID_TRIPALARMTYPE_ONDELAY = 17034;

const int UA_NS0ID_TRIPALARMTYPE_OFFDELAY = 17035;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUPFLAG = 17036;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUP = 17037;

const int UA_NS0ID_TRIPALARMTYPE_ALARMGROUP_PLACEHOLDER = 17038;

const int UA_NS0ID_TRIPALARMTYPE_REALARMTIME = 17039;

const int UA_NS0ID_TRIPALARMTYPE_REALARMREPEATCOUNT = 17040;

const int UA_NS0ID_TRIPALARMTYPE_SILENCE = 17041;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESS = 17042;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_INPUTARGUMENTS = 17043;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSID = 17044;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSNAME = 17045;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE = 17046;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_ID = 17047;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NAME =
    17048;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    17049;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    17050;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    17051;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17052;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    17053;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    17054;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE = 17055;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_ID = 17056;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NAME = 17057;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NUMBER = 17058;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    17059;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    17060;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    17061;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRUESTATE =
    17062;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_FALSESTATE =
    17063;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLEENABLED = 17064;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND = 17065;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS = 17066;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE = 17067;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17068;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_OUTPUTARGUMENTS = 17069;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ONDELAY = 17070;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OFFDELAY = 17071;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUPFLAG = 17072;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUP = 17073;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ALARMGROUP_PLACEHOLDER =
    17074;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMTIME = 17075;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMREPEATCOUNT = 17076;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCE = 17077;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESS = 17078;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE = 17079;

const int UA_NS0ID_DISCREPANCYALARMTYPE = 17080;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTID = 17081;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTTYPE = 17082;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENODE = 17083;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENAME = 17084;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TIME = 17085;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RECEIVETIME = 17086;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LOCALTIME = 17087;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MESSAGE = 17088;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SEVERITY = 17089;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSID = 17090;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSNAME = 17091;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSID = 17092;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSNAME = 17093;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONNAME = 17094;

const int UA_NS0ID_DISCREPANCYALARMTYPE_BRANCHID = 17095;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RETAIN = 17096;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE = 17097;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_ID = 17098;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NAME = 17099;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NUMBER = 17100;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    17101;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 17102;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    17103;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRUESTATE = 17104;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_FALSESTATE = 17105;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY = 17106;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY_SOURCETIMESTAMP = 17107;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY = 17108;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 17109;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT = 17110;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT_SOURCETIMESTAMP = 17111;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CLIENTUSERID = 17112;

const int UA_NS0ID_DISCREPANCYALARMTYPE_DISABLE = 17113;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLE = 17114;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT = 17115;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 17116;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH = 17117;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 17118;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2 = 17119;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    17120;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE = 17121;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_ID = 17122;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NAME = 17123;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NUMBER = 17124;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 17125;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 17126;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    17127;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRUESTATE = 17128;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_FALSESTATE = 17129;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE = 17130;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_ID = 17131;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NAME = 17132;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NUMBER = 17133;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    17134;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 17135;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    17136;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 17137;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 17138;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE = 17139;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 17140;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM = 17141;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM_INPUTARGUMENTS = 17142;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE = 17143;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_ID = 17144;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NAME = 17145;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NUMBER = 17146;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    17147;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 17148;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    17149;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRUESTATE = 17150;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_FALSESTATE = 17151;

const int UA_NS0ID_DISCREPANCYALARMTYPE_INPUTNODE = 17152;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE = 17153;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_ID = 17154;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NAME = 17155;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NUMBER = 17156;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    17157;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 17158;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    17159;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 17160;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 17161;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE = 17162;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_ID = 17163;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NAME = 17164;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17165;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    17166;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    17167;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17168;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17169;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17170;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE = 17171;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_ID = 17172;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NAME = 17173;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NUMBER = 17174;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    17175;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17176;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    17177;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRUESTATE = 17178;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_FALSESTATE = 17179;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE = 17180;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 17181;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 17182;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 17183;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    17184;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    17185;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 17186;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 17187;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    17188;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    17189;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    17190;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    17191;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 17192;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVE = 17193;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 17194;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 17195;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    17196;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDORSHELVED = 17197;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MAXTIMESHELVED = 17198;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLEENABLED = 17199;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND = 17200;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17201;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE = 17202;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTSETTINGS = 17203;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE =
    17204;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ONDELAY = 17205;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OFFDELAY = 17206;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUPFLAG = 17207;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUP = 17208;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ALARMGROUP_PLACEHOLDER = 17209;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMTIME = 17210;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMREPEATCOUNT = 17211;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCE = 17212;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESS = 17213;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_WRITERGROUPID =
    17214;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TARGETVALUENODE = 17215;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EXPECTEDTIME = 17216;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TOLERANCE = 17217;

const int UA_NS0ID_SAFETYCONDITIONCLASSTYPE = 17218;

const int UA_NS0ID_HIGHLYMANAGEDALARMCONDITIONCLASSTYPE = 17219;

const int UA_NS0ID_TRAININGCONDITIONCLASSTYPE = 17220;

const int UA_NS0ID_TESTINGCONDITIONSUBCLASSTYPE = 17221;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONEVENTID = 17222;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONEVENTID = 17223;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONEVENTID = 17224;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE = 17225;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTID = 17226;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTTYPE = 17227;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENODE = 17228;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENAME = 17229;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_TIME = 17230;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_RECEIVETIME = 17231;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_LOCALTIME = 17232;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_MESSAGE = 17233;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SEVERITY = 17234;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_ACTIONTIMESTAMP = 17235;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_STATUS = 17236;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SERVERID = 17237;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTAUDITENTRYID =
    17238;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTUSERID = 17239;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_METHODID = 17240;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_INPUTARGUMENTS = 17241;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE = 17242;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTID = 17243;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTTYPE = 17244;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENODE = 17245;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENAME = 17246;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_TIME = 17247;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_RECEIVETIME = 17248;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_LOCALTIME = 17249;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_MESSAGE = 17250;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SEVERITY = 17251;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_ACTIONTIMESTAMP = 17252;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_STATUS = 17253;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SERVERID = 17254;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTAUDITENTRYID = 17255;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTUSERID = 17256;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_METHODID = 17257;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_INPUTARGUMENTS = 17258;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE = 17259;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTID = 17260;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTTYPE = 17261;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENODE = 17262;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENAME = 17263;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_TIME = 17264;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_RECEIVETIME = 17265;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_LOCALTIME = 17266;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_MESSAGE = 17267;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SEVERITY = 17268;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_ACTIONTIMESTAMP = 17269;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_STATUS = 17270;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SERVERID = 17271;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTAUDITENTRYID =
    17272;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTUSERID = 17273;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_METHODID = 17274;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_INPUTARGUMENTS = 17275;

const int UA_NS0ID_HASEFFECTDISABLE = 17276;

const int UA_NS0ID_ALARMRATEVARIABLETYPE = 17277;

const int UA_NS0ID_ALARMRATEVARIABLETYPE_RATE = 17278;

const int UA_NS0ID_ALARMMETRICSTYPE = 17279;

const int UA_NS0ID_ALARMMETRICSTYPE_ALARMCOUNT = 17280;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMACTIVESTATE = 17281;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMUNACK = 17282;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMREALARMCOUNT = 17283;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE = 17284;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE_RATE = 17285;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE = 17286;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE_RATE = 17287;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE = 17288;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE_RATE = 17289;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17290;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS =
    17291;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI =
    17292;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER =
    17293;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_INPUTARGUMENTS =
    17294;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    17295;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS = 17296;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS_INPUTARGUMENTS = 17297;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE = 17298;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 17299;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17300;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_OUTPUTARGUMENTS =
    17301;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE =
    17302;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17303;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17304;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17305;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI = 17306;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17307;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS =
    17308;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    17309;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER = 17310;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYMODE =
    17311;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    17312;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    17313;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS =
    17314;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_STATE =
    17315;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_ENABLE =
    17316;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_DISABLE =
    17317;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PUBLISHINGINTERVAL =
    17318;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_KEEPALIVETIME =
    17319;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17320;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PRIORITY =
    17321;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_LOCALEIDS =
    17322;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER =
    17323;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER_INPUTARGUMENTS =
    17324;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER = 17325;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYMODE =
    17326;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    17327;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    17328;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS =
    17329;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_STATE =
    17330;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_ENABLE =
    17331;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_DISABLE =
    17332;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER =
    17333;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER_INPUTARGUMENTS =
    17334;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17335;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17336;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17337;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17338;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17339;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17340;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17341;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17342;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17343;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17344;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17345;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17346;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17347;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17348;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17349;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17350;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17351;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    17352;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    17353;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    17354;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER =
    17355;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP =
    17356;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS =
    17357;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS =
    17358;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP =
    17359;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS =
    17360;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS =
    17361;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP =
    17362;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS =
    17363;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS = 17364;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS_INPUTARGUMENTS = 17365;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION = 17366;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_INPUTARGUMENTS = 17367;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_OUTPUTARGUMENTS = 17368;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION = 17369;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION_INPUTARGUMENTS = 17370;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS = 17371;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS =
    17372;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    17373;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    17374;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS =
    17375;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    17376;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    17377;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE =
    17378;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    17379;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    17380;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE =
    17381;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    17382;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    17383;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET =
    17384;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    17385;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES = 17386;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_INPUTARGUMENTS =
    17387;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_OUTPUTARGUMENTS =
    17388;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR = 17389;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_INPUTARGUMENTS = 17390;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_OUTPUTARGUMENTS =
    17391;

const int UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE = 17392;

const int
    UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    17393;

const int
    UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    17394;

const int UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE = 17395;

const int
    UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_INPUTARGUMENTS =
    17396;

const int
    UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_OUTPUTARGUMENTS =
    17397;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER = 17398;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_INPUTARGUMENTS =
    17399;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_OUTPUTARGUMENTS =
    17400;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS =
    17401;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    17402;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER =
    17403;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    17404;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS = 17405;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_STATE = 17406;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_ENABLE = 17407;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_DISABLE = 17408;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS = 17409;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17410;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION = 17411;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17412;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17413;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17414;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17415;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR = 17416;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17417;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17418;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17419;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17420;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_RESET = 17421;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_SUBERROR = 17422;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS = 17423;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR = 17424;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17425;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17426;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP = 17427;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_INPUTARGUMENTS = 17428;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17429;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17430;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17431;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17432;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17433;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17434;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17437;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17439;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17440;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17441;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17442;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17443;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17444;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17445;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17446;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17447;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17448;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17449;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17450;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17451;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17452;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17453;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17454;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17455;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_OUTPUTARGUMENTS = 17456;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES = 17457;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    17458;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    17459;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    17460;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    17461;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    17462;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    17463;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    17464;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP = 17465;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    17466;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17467;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    17468;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE =
    17469;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    17470;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    17471;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    17472;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17473;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    17474;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    17475;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    17476;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETOFFSET = 17477;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES =
    17478;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUPPORTEDTRANSPORTPROFILES = 17479;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES =
    17480;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUPPORTEDTRANSPORTPROFILES = 17481;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17482;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17483;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17484;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_CONNECTIONPROPERTIES = 17485;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES =
    17486;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES =
    17487;

const int UA_NS0ID_PUBSUBGROUPTYPE_GROUPPROPERTIES = 17488;

const int UA_NS0ID_WRITERGROUPTYPE_GROUPPROPERTIES = 17489;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17490;

const int UA_NS0ID_READERGROUPTYPE_GROUPPROPERTIES = 17491;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETREADERPROPERTIES =
    17492;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERPROPERTIES = 17493;

const int UA_NS0ID_DATASETREADERTYPE_DATASETREADERPROPERTIES = 17494;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_OUTPUTARGUMENTS = 17495;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE = 17496;

const int UA_NS0ID_ANALOGUNITTYPE = 17497;

const int UA_NS0ID_ANALOGUNITTYPE_DEFINITION = 17498;

const int UA_NS0ID_ANALOGUNITTYPE_VALUEPRECISION = 17499;

const int UA_NS0ID_ANALOGUNITTYPE_INSTRUMENTRANGE = 17500;

const int UA_NS0ID_ANALOGUNITTYPE_EURANGE = 17501;

const int UA_NS0ID_ANALOGUNITTYPE_ENGINEERINGUNITS = 17502;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17503;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17504;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17505;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17506;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_INPUTARGUMENTS = 17507;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_OUTPUTARGUMENTS = 17508;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17509;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17510;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER =
    17511;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_RESOURCEURI =
    17512;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_PROFILEURI =
    17513;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ENDPOINTURLS =
    17514;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICESTATUS =
    17515;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY =
    17516;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17517;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17518;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL =
    17519;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS =
    17520;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL =
    17521;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL =
    17522;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_INPUTARGUMENTS =
    17523;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_OUTPUTARGUMENTS =
    17524;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY =
    17525;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17526;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17527;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL = 17528;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_INPUTARGUMENTS =
    17529;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_OUTPUTARGUMENTS =
    17530;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE = 17531;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_INPUTARGUMENTS = 17532;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_OUTPUTARGUMENTS = 17533;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY = 17534;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17535;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17536;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTBINARY = 17537;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE = 17538;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION =
    17539;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT =
    17540;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTXML = 17541;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE = 17542;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION =
    17543;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT =
    17544;

const int UA_NS0ID_RSAENCRYPTEDSECRET = 17545;

const int UA_NS0ID_ECCENCRYPTEDSECRET = 17546;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTJSON = 17547;

const int UA_NS0ID_EPHEMERALKEYTYPE = 17548;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTBINARY = 17549;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE = 17550;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17551;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT =
    17552;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTXML = 17553;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE = 17554;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17555;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT = 17556;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTJSON = 17557;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_HEADERLAYOUTURI =
    17558;

const int UA_NS0ID_WRITERGROUPTYPE_HEADERLAYOUTURI = 17559;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    17560;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE = 17561;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_HEADERLAYOUTURI =
    17562;

const int UA_NS0ID_DATASETREADERTYPE_KEYFRAMECOUNT = 17563;

const int UA_NS0ID_DATASETREADERTYPE_HEADERLAYOUTURI = 17564;

const int UA_NS0ID_BASEANALOGTYPE_DEFINITION = 17565;

const int UA_NS0ID_BASEANALOGTYPE_VALUEPRECISION = 17566;

const int UA_NS0ID_BASEANALOGTYPE_INSTRUMENTRANGE = 17567;

const int UA_NS0ID_BASEANALOGTYPE_EURANGE = 17568;

const int UA_NS0ID_BASEANALOGTYPE_ENGINEERINGUNITS = 17569;

const int UA_NS0ID_ANALOGUNITRANGETYPE = 17570;

const int UA_NS0ID_ANALOGUNITRANGETYPE_DEFINITION = 17571;

const int UA_NS0ID_ANALOGUNITRANGETYPE_VALUEPRECISION = 17572;

const int UA_NS0ID_ANALOGUNITRANGETYPE_INSTRUMENTRANGE = 17573;

const int UA_NS0ID_ANALOGUNITRANGETYPE_EURANGE = 17574;

const int UA_NS0ID_ANALOGUNITRANGETYPE_ENGINEERINGUNITS = 17575;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17576;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17577;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17578;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONS =
    17579;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17580;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17581;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONS = 17582;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17583;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_RESTRICTTOLIST = 17584;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONS = 17585;

const int
    UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17586;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_RESTRICTTOLIST =
    17587;

const int UA_NS0ID_INDEX = 17588;

const int UA_NS0ID_DICTIONARYENTRYTYPE = 17589;

const int UA_NS0ID_DICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17590;

const int UA_NS0ID_DICTIONARYFOLDERTYPE = 17591;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYFOLDERNAME_PLACEHOLDER =
    17592;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17593;

const int UA_NS0ID_DICTIONARIES = 17594;

const int UA_NS0ID_DICTIONARIES_DICTIONARYFOLDERNAME_PLACEHOLDER = 17595;

const int UA_NS0ID_DICTIONARIES_DICTIONARYENTRYNAME_PLACEHOLDER = 17596;

const int UA_NS0ID_HASDICTIONARYENTRY = 17597;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE = 17598;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER =
    17599;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE = 17600;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER =
    17601;

const int UA_NS0ID_BASEINTERFACETYPE = 17602;

const int UA_NS0ID_HASINTERFACE = 17603;

const int UA_NS0ID_HASADDIN = 17604;

const int UA_NS0ID_DEFAULTINSTANCEBROWSENAME = 17605;

const int UA_NS0ID_GENERICATTRIBUTEVALUE = 17606;

const int UA_NS0ID_GENERICATTRIBUTES = 17607;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTXML = 17608;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTXML = 17609;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTBINARY = 17610;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTBINARY = 17611;

const int UA_NS0ID_SERVERTYPE_LOCALTIME = 17612;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_INPUTARGUMENTS =
    17613;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_OUTPUTARGUMENTS =
    17614;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUSCODEID = 17615;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUSCODEID = 17616;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUSCODEID = 17617;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUSCODEID = 17618;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUSCODEID = 17619;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUSCODEID = 17620;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUSCODEID = 17621;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUSCODEID = 17622;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUSCODEID = 17623;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUSCODEID = 17624;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUSCODEID = 17625;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUSCODEID = 17626;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUSCODEID = 17627;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUSCODEID = 17628;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUSCODEID = 17629;

const int UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE = 17630;

const int
    UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_INPUTARGUMENTS =
    17631;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONS = 17632;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONDESCRIPTIONS = 17633;

const int UA_NS0ID_SERVER_LOCALTIME = 17634;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLESTATES = 17635;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLETRANSITIONS = 17636;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLESTATES =
    17637;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLETRANSITIONS =
    17638;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLESTATES = 17639;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17640;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE = 17641;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTID = 17642;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTTYPE = 17643;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENODE = 17644;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENAME = 17645;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_TIME = 17646;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_RECEIVETIME = 17647;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_LOCALTIME = 17648;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_MESSAGE = 17649;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SEVERITY = 17650;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 17651;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_STATUS = 17652;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SERVERID = 17653;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    17654;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTUSERID = 17655;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_METHODID = 17656;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_INPUTARGUMENTS = 17657;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLESTATES = 17658;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17659;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLESTATES =
    17660;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17661;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLESTATES = 17662;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17663;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17664;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17665;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLESTATES = 17666;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17667;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17668;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17669;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17670;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17671;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17672;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17674;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17675;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17676;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17677;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17678;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17679;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17680;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17681;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17682;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17683;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLESTATES =
    17684;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17685;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17686;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17687;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17688;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLESTATES =
    17690;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17691;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17692;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17693;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17694;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17695;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17696;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17697;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17698;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17699;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17700;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17701;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17702;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17703;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLESTATES = 17704;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17705;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS =
    17706;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    17707;

const int UA_NS0ID_INTERFACETYPES = 17708;

const int UA_NS0ID_RATIONALNUMBERTYPE = 17709;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONS = 17710;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    17711;

const int UA_NS0ID_RATIONALNUMBERTYPE_NUMERATOR = 17712;

const int UA_NS0ID_RATIONALNUMBERTYPE_DENOMINATOR = 17713;

const int UA_NS0ID_VECTORTYPE = 17714;

const int UA_NS0ID_VECTORTYPE_VECTORUNIT = 17715;

const int UA_NS0ID_THREEDVECTORTYPE = 17716;

const int UA_NS0ID_THREEDVECTORTYPE_VECTORUNIT = 17717;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT =
    17718;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    17719;

const int
    UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_OUTPUTARGUMENTS =
    17720;

const int UA_NS0ID_CONNECTIONTRANSPORTTYPE = 17721;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT =
    17722;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    17723;

const int UA_NS0ID_PUBSUBGROUPTYPE_MAXNETWORKMESSAGESIZE = 17724;

const int UA_NS0ID_WRITERGROUPTYPE = 17725;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYMODE = 17726;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYGROUPID = 17727;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYKEYSERVICES = 17728;

const int UA_NS0ID_WRITERGROUPTYPE_MAXNETWORKMESSAGESIZE = 17729;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS = 17730;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_STATE = 17731;

const int UA_NS0ID_AUTHORIZATIONSERVICES = 17732;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_ENABLE = 17734;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_DISABLE = 17735;

const int UA_NS0ID_WRITERGROUPTYPE_WRITERGROUPID = 17736;

const int UA_NS0ID_WRITERGROUPTYPE_PUBLISHINGINTERVAL = 17737;

const int UA_NS0ID_WRITERGROUPTYPE_KEEPALIVETIME = 17738;

const int UA_NS0ID_WRITERGROUPTYPE_PRIORITY = 17739;

const int UA_NS0ID_WRITERGROUPTYPE_LOCALEIDS = 17740;

const int UA_NS0ID_WRITERGROUPTYPE_TRANSPORTSETTINGS = 17741;

const int UA_NS0ID_WRITERGROUPTYPE_MESSAGESETTINGS = 17742;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER = 17743;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    17744;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    17745;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    17746;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17747;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    17748;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 17749;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    17750;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    17751;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    17752;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    17753;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    17754;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    17755;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    17756;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17757;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17758;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17759;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    17760;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    17761;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17762;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17763;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17764;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    17765;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    17766;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    17767;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    17768;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17769;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17770;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17771;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17772;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17773;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17774;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17775;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17776;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17777;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17778;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17779;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17780;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17781;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17782;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17783;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17784;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17785;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17786;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17787;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17788;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17789;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17790;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17791;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17792;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17793;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17794;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17795;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17796;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17797;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    17798;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    17799;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    17800;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    17801;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    17802;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    17803;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    17804;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    17805;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    17806;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    17807;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    17808;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    17809;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    17810;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    17811;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS = 17812;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17813;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 17814;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17815;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17816;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17817;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17818;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 17819;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17820;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17821;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17822;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17823;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_RESET = 17824;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_SUBERROR = 17825;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS = 17826;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 17827;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17828;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17829;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17830;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17831;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17832;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17833;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17834;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17835;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17836;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17837;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17838;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17839;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17840;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17841;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17842;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17843;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17844;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17845;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17846;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17847;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17848;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17849;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17850;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17851;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE = 17852;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17853;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17854;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17855;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17856;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17857;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 17858;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES =
    17859;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICECERTIFICATE =
    17860;

const int UA_NS0ID_DECIMALDATATYPE = 17861;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTXML = 17862;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTBINARY = 17863;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    17864;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_LISTID = 17865;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_AGENCYID = 17866;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_VERSIONID = 17867;

const int UA_NS0ID_ALARMCONDITIONTYPE_UNSUPPRESS = 17868;

const int UA_NS0ID_ALARMCONDITIONTYPE_REMOVEFROMSERVICE = 17869;

const int UA_NS0ID_ALARMCONDITIONTYPE_PLACEINSERVICE = 17870;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    17871;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    17872;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    17873;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS =
    17874;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS =
    17875;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE =
    17876;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE =
    17877;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    17878;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_LISTID = 17879;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17880;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17881;

const int UA_NS0ID_LIMITALARMTYPE_UNSUPPRESS = 17882;

const int UA_NS0ID_LIMITALARMTYPE_REMOVEFROMSERVICE = 17883;

const int UA_NS0ID_LIMITALARMTYPE_PLACEINSERVICE = 17884;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    17885;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17886;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17887;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17888;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17889;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17890;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17891;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    17892;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17893;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17894;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17895;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17896;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17897;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17898;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    17899;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS =
    17900;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    17901;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    17902;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    17903;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17904;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17905;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    17906;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 17907;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 17908;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 17909;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 17910;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17911;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17912;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    17913;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17914;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17915;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID =
    17916;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17917;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17918;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17919;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    17920;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID =
    17921;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID =
    17922;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID =
    17923;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17924;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17925;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17926;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    17927;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17928;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17929;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID = 17930;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17931;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17932;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17933;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    17934;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID = 17935;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID = 17936;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID =
    17937;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17938;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17939;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17940;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    17941;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_LISTID = 17942;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_AGENCYID = 17943;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_VERSIONID = 17944;

const int UA_NS0ID_DISCRETEALARMTYPE_UNSUPPRESS = 17945;

const int UA_NS0ID_DISCRETEALARMTYPE_REMOVEFROMSERVICE = 17946;

const int UA_NS0ID_DISCRETEALARMTYPE_PLACEINSERVICE = 17947;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    17948;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17949;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17950;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17951;

const int UA_NS0ID_OFFNORMALALARMTYPE_UNSUPPRESS = 17952;

const int UA_NS0ID_OFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17953;

const int UA_NS0ID_OFFNORMALALARMTYPE_PLACEINSERVICE = 17954;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    17955;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17956;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17957;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17958;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_UNSUPPRESS = 17959;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17960;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_PLACEINSERVICE = 17961;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    17962;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_LISTID = 17963;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_AGENCYID = 17964;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_VERSIONID = 17965;

const int UA_NS0ID_TRIPALARMTYPE_UNSUPPRESS = 17966;

const int UA_NS0ID_TRIPALARMTYPE_REMOVEFROMSERVICE = 17967;

const int UA_NS0ID_TRIPALARMTYPE_PLACEINSERVICE = 17968;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER = 17969;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_LISTID = 17970;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17971;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_VERSIONID =
    17972;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_UNSUPPRESS = 17973;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REMOVEFROMSERVICE = 17974;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_PLACEINSERVICE = 17975;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_INPUTARGUMENTS = 17976;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_LISTID = 17977;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_AGENCYID = 17978;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_VERSIONID = 17979;

const int UA_NS0ID_DISCREPANCYALARMTYPE_UNSUPPRESS = 17980;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REMOVEFROMSERVICE = 17981;

const int UA_NS0ID_DISCREPANCYALARMTYPE_PLACEINSERVICE = 17982;

const int UA_NS0ID_HASEFFECTENABLE = 17983;

const int UA_NS0ID_HASEFFECTSUPPRESSED = 17984;

const int UA_NS0ID_HASEFFECTUNSUPPRESSED = 17985;

const int UA_NS0ID_AUDIOVARIABLETYPE = 17986;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_OUTPUTARGUMENTS = 17987;

const int UA_NS0ID_AUDIOVARIABLETYPE_LISTID = 17988;

const int UA_NS0ID_AUDIOVARIABLETYPE_AGENCYID = 17989;

const int UA_NS0ID_AUDIOVARIABLETYPE_VERSIONID = 17990;

const int UA_NS0ID_ALARMMETRICSTYPE_STARTTIME = 17991;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER = 17992;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER_INPUTARGUMENTS = 17993;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE = 17994;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE_INPUTARGUMENTS = 17995;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE_OUTPUTARGUMENTS = 17996;

const int UA_NS0ID_WRITERGROUPTRANSPORTTYPE = 17997;

const int UA_NS0ID_WRITERGROUPMESSAGETYPE = 17998;

const int UA_NS0ID_READERGROUPTYPE = 17999;

const int UA_NS0ID_READERGROUPTYPE_SECURITYMODE = 18000;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE = 18001;

const int UA_NS0ID_READERGROUPTYPE_SECURITYGROUPID = 18002;

const int UA_NS0ID_READERGROUPTYPE_SECURITYKEYSERVICES = 18003;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_ENDPOINTURLS = 18004;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_SERVICESTATUS = 18005;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL = 18006;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL_INPUTARGUMENTS =
    18007;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_DELETECREDENTIAL = 18008;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE = 18009;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE_INPUTARGUMENTS = 18010;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE = 18011;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTID = 18012;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTTYPE = 18013;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENODE = 18014;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENAME = 18015;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_TIME = 18016;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RECEIVETIME = 18017;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_LOCALTIME = 18018;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_MESSAGE = 18019;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SEVERITY = 18020;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_ACTIONTIMESTAMP = 18021;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_STATUS = 18022;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SERVERID = 18023;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTAUDITENTRYID = 18024;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTUSERID = 18025;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_METHODID = 18026;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_INPUTARGUMENTS = 18027;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RESOURCEURI = 18028;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE = 18029;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTID = 18030;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTTYPE = 18031;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENODE = 18032;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENAME = 18033;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_TIME = 18034;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RECEIVETIME = 18035;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_LOCALTIME = 18036;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_MESSAGE = 18037;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SEVERITY = 18038;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18039;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_STATUS = 18040;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SERVERID = 18041;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    18042;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 18043;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_METHODID = 18044;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 18045;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RESOURCEURI = 18046;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE = 18047;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTID = 18048;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTTYPE = 18049;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENODE = 18050;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENAME = 18051;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_TIME = 18052;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RECEIVETIME = 18053;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_LOCALTIME = 18054;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_MESSAGE = 18055;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SEVERITY = 18056;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18057;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_STATUS = 18058;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SERVERID = 18059;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    18060;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTUSERID = 18061;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_METHODID = 18062;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_INPUTARGUMENTS = 18063;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RESOURCEURI = 18064;

const int UA_NS0ID_READERGROUPTYPE_MAXNETWORKMESSAGESIZE = 18065;

const int UA_NS0ID_READERGROUPTYPE_STATUS = 18067;

const int UA_NS0ID_READERGROUPTYPE_STATUS_STATE = 18068;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_RESOURCEURI = 18069;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICEURI = 18072;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_ISSUERENDPOINTURL =
    18073;

const int UA_NS0ID_READERGROUPTYPE_STATUS_ENABLE = 18074;

const int UA_NS0ID_READERGROUPTYPE_STATUS_DISABLE = 18075;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER = 18076;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_PUBLISHERID =
    18077;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_WRITERGROUPID =
    18078;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETWRITERID =
    18079;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETMETADATA =
    18080;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    18081;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGERECEIVETIMEOUT =
    18082;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYMODE =
    18083;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYGROUPID =
    18084;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    18085;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    18086;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGESETTINGS =
    18087;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS = 18088;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_STATE =
    18089;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_ENABLE =
    18090;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_DISABLE =
    18091;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS =
    18092;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18093;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18094;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18095;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18096;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18097;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18098;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18099;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18100;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18101;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18102;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18103;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18104;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18105;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18106;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18107;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18108;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18109;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18110;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18111;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18112;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18113;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18114;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18115;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18116;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18117;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18118;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18119;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18120;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18121;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18122;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18123;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18124;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18125;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18126;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18127;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18128;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18129;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18130;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18131;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18132;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18133;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18134;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18135;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18136;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18137;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18138;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18139;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18140;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18141;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18142;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    18143;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    18144;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    18145;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    18146;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    18147;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18148;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18149;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18150;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18151;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18152;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18153;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18154;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION = 18155;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER = 18156;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_RESOURCEURI =
    18157;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18158;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_ENDPOINTURLS =
    18159;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_SERVICESTATUS =
    18160;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL =
    18161;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS =
    18162;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL =
    18163;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_PROFILEURI =
    18164;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_PROFILEURI = 18165;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION = 18166;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION = 18167;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT =
    18168;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD = 18169;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18170;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18171;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION = 18172;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION = 18173;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT =
    18174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION = 18175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18177;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION = 18178;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION =
    18179;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT =
    18180;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD = 18181;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION = 18184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION =
    18185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT =
    18186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION = 18187;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18188;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18189;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE = 18190;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_ID = 18191;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NAME = 18192;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NUMBER = 18193;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18194;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRANSITIONTIME = 18195;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18196;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRUESTATE = 18197;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_FALSESTATE = 18198;

const int UA_NS0ID_ALARMCONDITIONTYPE_RESET = 18199;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_LISTID =
    18200;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_AGENCYID =
    18201;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_VERSIONID =
    18202;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE =
    18203;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_ID =
    18204;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NAME =
    18205;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NUMBER =
    18206;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18207;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRANSITIONTIME =
    18208;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18209;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRUESTATE =
    18210;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_FALSESTATE =
    18211;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET =
    18212;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE = 18213;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_ID = 18214;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NAME = 18215;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18216;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18217;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18218;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18219;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18220;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18221;

const int UA_NS0ID_LIMITALARMTYPE_RESET = 18222;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18223;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18224;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18225;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18226;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18227;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18228;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18229;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18230;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18231;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RESET = 18232;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18233;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18234;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18235;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18236;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18237;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18238;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18239;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18240;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18241;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RESET = 18242;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 18243;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 18244;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 18245;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18246;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18247;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18248;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18249;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18250;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18251;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18252;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18253;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18254;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 18255;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RESET = 18256;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18257;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18258;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18259;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18260;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18261;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18262;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18263;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18264;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18265;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RESET = 18266;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18267;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18268;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18269;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18270;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18271;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18272;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18273;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18274;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18275;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RESET = 18276;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER =
    18280;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18281;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18282;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18283;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18284;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18285;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18286;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18287;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18288;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18289;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18290;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18291;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18292;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18293;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE = 18294;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE = 18295;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RESET = 18296;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18297;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18298;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18299;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER = 18300;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18301;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18302;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18303;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18304;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18305;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18306;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE = 18307;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_ID = 18308;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NAME = 18309;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NUMBER = 18310;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18311;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18312;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18313;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRUESTATE = 18314;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_FALSESTATE = 18315;

const int UA_NS0ID_DISCRETEALARMTYPE_RESET = 18316;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE = 18317;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18318;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18319;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18320;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18321;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18322;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18323;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18324;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18325;

const int UA_NS0ID_OFFNORMALALARMTYPE_RESET = 18326;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE = 18327;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18328;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18329;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18330;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18331;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18332;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18333;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18334;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18335;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RESET = 18336;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE = 18337;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_ID = 18338;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NAME = 18339;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NUMBER = 18340;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18341;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18342;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18343;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRUESTATE = 18344;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_FALSESTATE = 18345;

const int UA_NS0ID_TRIPALARMTYPE_RESET = 18346;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE = 18347;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTID = 18348;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTTYPE = 18349;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENODE = 18350;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENAME = 18351;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_TIME = 18352;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RECEIVETIME = 18353;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LOCALTIME = 18354;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MESSAGE = 18355;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SEVERITY = 18356;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18357;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18358;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18359;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18360;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONNAME = 18361;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_BRANCHID = 18362;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RETAIN = 18363;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18364;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18365;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18366;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18367;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    18368;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    18369;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    18370;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18371;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE =
    18372;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY = 18373;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP =
    18374;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY = 18375;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    18376;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT = 18377;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP =
    18378;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CLIENTUSERID = 18379;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_DISABLE = 18380;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLE = 18381;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT = 18382;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    18383;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18384;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    18385;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18386;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    18387;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE = 18388;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18389;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18390;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18391;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    18392;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    18393;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    18394;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18395;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18396;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18397;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18398;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18399;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18400;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    18401;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    18402;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    18403;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    18404;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    18405;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18406;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    18407;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM = 18408;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18409;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE = 18410;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18411;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18412;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18413;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    18414;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    18415;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    18416;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18417;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18418;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_INPUTNODE = 18419;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18420;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18421;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18422;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18423;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    18424;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    18425;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    18426;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    18427;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    18428;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18429;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18430;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18431;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    18432;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    18433;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    18434;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    18435;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    18436;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    18437;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18438;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    18439;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    18440;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    18441;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    18442;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    18443;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    18444;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    18445;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    18446;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    18447;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    18448;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    18449;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    18450;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    18451;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    18452;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    18453;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    18454;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18455;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    18456;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18457;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18458;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18459;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18460;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18461;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18462;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18463;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE = 18464;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18465;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18466;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18467;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    18468;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    18469;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    18470;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18471;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE =
    18472;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ONDELAY = 18473;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OFFDELAY = 18474;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18475;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18476;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18477;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18478;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18479;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18480;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18481;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18482;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18483;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18484;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18485;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18486;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMTIME = 18487;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18488;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCE = 18489;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESS = 18490;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_UNSUPPRESS = 18491;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18492;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18493;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RESET = 18494;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_NORMALSTATE = 18495;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE = 18496;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTID = 18497;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTTYPE = 18498;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENODE = 18499;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENAME = 18500;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_TIME = 18501;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RECEIVETIME = 18502;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LOCALTIME = 18503;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MESSAGE = 18504;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SEVERITY = 18505;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18506;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18507;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18508;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18509;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONNAME = 18510;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_BRANCHID = 18511;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RETAIN = 18512;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18513;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18514;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18515;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18516;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    18517;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    18518;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    18519;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18520;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE = 18521;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY = 18522;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP = 18523;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY = 18524;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    18525;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT = 18526;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP = 18527;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CLIENTUSERID = 18528;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_DISABLE = 18529;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLE = 18530;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT = 18531;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 18532;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18533;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    18534;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18535;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    18536;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE = 18537;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18538;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18539;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18540;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    18541;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 18542;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    18543;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18544;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18545;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18546;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18547;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18548;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18549;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    18550;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    18551;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    18552;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 18553;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 18554;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18555;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 18556;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM = 18557;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18558;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE = 18559;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18560;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18561;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18562;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    18563;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 18564;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    18565;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18566;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18567;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_INPUTNODE = 18568;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18569;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18570;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18571;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18572;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    18573;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    18574;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    18575;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 18576;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 18577;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18578;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18579;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18580;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER = 18581;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    18582;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    18583;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    18584;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    18585;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    18586;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18587;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 18588;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    18589;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    18590;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    18591;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    18592;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    18593;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    18594;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    18595;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    18596;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    18597;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    18598;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    18599;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    18600;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 18601;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 18602;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    18603;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18604;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    18605;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18606;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18607;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18608;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18609;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18610;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18611;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18612;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE = 18613;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18614;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18615;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18616;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    18617;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    18618;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    18619;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18620;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE = 18621;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ONDELAY = 18622;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OFFDELAY = 18623;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18624;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18625;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18626;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18627;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18628;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18629;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18630;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18631;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18632;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18633;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE = 18634;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18635;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMTIME = 18636;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18637;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCE = 18638;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESS = 18639;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_UNSUPPRESS = 18640;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18641;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18642;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RESET = 18643;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_NORMALSTATE = 18644;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE = 18645;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_ID = 18646;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NAME = 18647;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18648;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18649;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18650;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18651;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18652;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18653;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RESET = 18654;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE = 18655;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_ID = 18656;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NAME = 18657;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NUMBER = 18658;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18659;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18660;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18661;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRUESTATE = 18662;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_FALSESTATE = 18663;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RESET = 18664;

const int UA_NS0ID_STATISTICALCONDITIONCLASSTYPE = 18665;

const int UA_NS0ID_ALARMMETRICSTYPE_RESET = 18666;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS =
    18667;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18668;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18669;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18670;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18671;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18672;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18673;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18674;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18675;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18676;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18677;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18678;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18679;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18680;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18681;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18682;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18683;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18684;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18685;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18686;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18687;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18688;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18689;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18690;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18691;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18692;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18693;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18694;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18695;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18696;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18697;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18698;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18699;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18700;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18701;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18702;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18703;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18704;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18705;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18706;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18707;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18708;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18709;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18710;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18711;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18712;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    18713;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    18714;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS = 18715;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18716;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION = 18717;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18718;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18719;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18720;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18721;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR = 18722;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 18723;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18724;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18725;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18726;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_RESET = 18727;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_SUBERROR = 18728;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS = 18729;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 18730;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18731;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18732;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18733;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18734;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18735;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18736;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18737;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18738;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18739;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18740;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18741;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18742;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18743;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18744;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18745;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18746;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18747;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18748;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18749;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18750;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18751;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18752;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18753;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18754;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18755;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18756;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18757;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18758;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18759;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES = 18760;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    18761;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    18762;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    18763;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    18764;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    18765;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    18766;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    18767;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    18768;

const int UA_NS0ID_THREEDVECTORTYPE_X = 18769;

const int UA_NS0ID_THREEDVECTORTYPE_Y = 18770;

const int UA_NS0ID_THREEDVECTORTYPE_Z = 18771;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE = 18772;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE_LENGTHUNIT = 18773;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE = 18774;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_LENGTHUNIT = 18775;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_X = 18776;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Y = 18777;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Z = 18778;

const int UA_NS0ID_ORIENTATIONTYPE = 18779;

const int UA_NS0ID_ORIENTATIONTYPE_ANGLEUNIT = 18780;

const int UA_NS0ID_THREEDORIENTATIONTYPE = 18781;

const int UA_NS0ID_THREEDORIENTATIONTYPE_ANGLEUNIT = 18782;

const int UA_NS0ID_THREEDORIENTATIONTYPE_A = 18783;

const int UA_NS0ID_THREEDORIENTATIONTYPE_B = 18784;

const int UA_NS0ID_THREEDORIENTATIONTYPE_C = 18785;

const int UA_NS0ID_FRAMETYPE = 18786;

const int UA_NS0ID_FRAMETYPE_ORIENTATION = 18787;

const int UA_NS0ID_FRAMETYPE_CONSTANT = 18788;

const int UA_NS0ID_FRAMETYPE_BASEFRAME = 18789;

const int UA_NS0ID_FRAMETYPE_FIXEDBASE = 18790;

const int UA_NS0ID_THREEDFRAMETYPE = 18791;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION = 18792;

const int UA_NS0ID_THREEDFRAMETYPE_CONSTANT = 18793;

const int UA_NS0ID_THREEDFRAMETYPE_BASEFRAME = 18794;

const int UA_NS0ID_THREEDFRAMETYPE_FIXEDBASE = 18795;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES = 18796;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18797;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_X = 18798;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Y = 18799;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Z = 18800;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES = 18801;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18802;

const int UA_NS0ID_FRAMETYPE_ORIENTATION_ANGLEUNIT = 18803;

const int UA_NS0ID_HASWRITERGROUP = 18804;

const int UA_NS0ID_HASREADERGROUP = 18805;

const int UA_NS0ID_RATIONALNUMBER = 18806;

const int UA_NS0ID_VECTOR = 18807;

const int UA_NS0ID_THREEDVECTOR = 18808;

const int UA_NS0ID_CARTESIANCOORDINATES = 18809;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES = 18810;

const int UA_NS0ID_ORIENTATION = 18811;

const int UA_NS0ID_THREEDORIENTATION = 18812;

const int UA_NS0ID_FRAME = 18813;

const int UA_NS0ID_THREEDFRAME = 18814;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTBINARY = 18815;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTBINARY = 18816;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTBINARY = 18817;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18818;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18819;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTBINARY = 18820;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTBINARY = 18821;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTBINARY = 18822;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTBINARY = 18823;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER = 18824;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18825;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18826;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR = 18827;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DATATYPEVERSION = 18828;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18829;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR = 18830;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18831;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18832;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES = 18833;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION =
    18834;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    18835;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES = 18836;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION =
    18837;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    18838;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION = 18839;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DATATYPEVERSION = 18840;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 18841;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION = 18842;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 18843;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT =
    18844;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME = 18845;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DATATYPEVERSION = 18846;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DICTIONARYFRAGMENT = 18847;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME = 18848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DATATYPEVERSION = 18849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 18850;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTXML = 18851;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTXML = 18852;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTXML = 18853;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18854;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18855;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTXML = 18856;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTXML = 18857;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTXML = 18858;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTXML = 18859;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER = 18860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR = 18863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DATATYPEVERSION = 18864;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18865;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR = 18866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18867;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18868;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES = 18869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION = 18870;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18871;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18872;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18873;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18874;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18875;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18876;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18877;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18878;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18879;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18880;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18881;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18882;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18883;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18884;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18885;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18886;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18887;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18888;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18889;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18890;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18891;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18892;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18893;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18894;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18895;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18896;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18897;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18898;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18899;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18900;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18901;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18902;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18903;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18904;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18905;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18906;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18907;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18908;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18909;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18910;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18911;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18912;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18913;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18914;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18915;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18916;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18917;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18918;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18919;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18920;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18921;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18922;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18923;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18924;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18925;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18926;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18927;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18928;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18929;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18930;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18931;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18932;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18933;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18934;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18935;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18936;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18937;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18938;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18939;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18940;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18941;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18942;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18943;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18944;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18945;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18946;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18947;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18948;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18949;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18950;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18951;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18952;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18953;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18954;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18955;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18956;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18957;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18958;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18959;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18960;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18961;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18962;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18963;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18964;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18965;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18966;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18967;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18968;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18969;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18970;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18971;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18972;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18973;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18974;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18975;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18976;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18977;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18978;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18979;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18980;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18981;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18982;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18983;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18984;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18985;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18986;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18987;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18988;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18989;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18990;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18991;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18992;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18993;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18994;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18995;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18996;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18997;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18998;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18999;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19000;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19001;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19002;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19003;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19004;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19005;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19006;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19007;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19008;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19009;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19010;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19011;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19012;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19013;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19014;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19015;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19016;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19017;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19018;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19019;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19020;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19021;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19022;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19023;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19024;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19025;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19026;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19027;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19028;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19029;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19030;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19031;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19032;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19033;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19034;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19035;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19036;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19037;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19038;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19039;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19040;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19041;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    19042;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19043;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19044;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19045;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19046;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    19048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES = 19049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION =
    19050;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    19051;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION = 19052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DATATYPEVERSION = 19053;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 19054;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION = 19055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 19056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT = 19057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME = 19058;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DATATYPEVERSION = 19059;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DICTIONARYFRAGMENT = 19060;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME = 19061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DATATYPEVERSION = 19062;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 19063;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTJSON = 19064;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTJSON = 19065;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTJSON = 19066;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19067;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19068;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTJSON = 19069;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTJSON = 19070;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTJSON = 19071;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTJSON = 19072;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_ANGLEUNIT = 19073;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_A = 19074;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_B = 19075;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_C = 19076;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE = 19077;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_DEFINITION = 19078;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEPRECISION =
    19079;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMVALUES = 19080;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASTEXT =
    19081;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMDICTIONARYENTRIES =
    19082;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASDICTIONARYENTRIES =
    19083;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE = 19084;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_DEFINITION = 19085;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEPRECISION = 19086;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMVALUES = 19087;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASTEXT = 19088;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMDICTIONARYENTRIES =
    19089;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASDICTIONARYENTRIES =
    19090;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_SERVERTIMESTAMPSUPPORTED = 19091;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_SERVERTIMESTAMPSUPPORTED =
    19092;

const int UA_NS0ID_HACONFIGURATION_SERVERTIMESTAMPSUPPORTED = 19093;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_SERVERTIMESTAMPSUPPORTED =
    19094;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE = 19095;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTID = 19096;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTTYPE = 19097;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENODE = 19098;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENAME = 19099;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_TIME = 19100;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_RECEIVETIME = 19101;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_LOCALTIME = 19102;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_MESSAGE = 19103;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SEVERITY = 19104;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_ACTIONTIMESTAMP =
    19105;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_STATUS = 19106;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS =
    19107;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    19108;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    19109;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19110;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19111;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19112;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19113;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    19114;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    19115;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19116;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19117;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19118;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19119;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19120;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19121;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19122;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19123;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19124;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19125;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19126;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19127;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19128;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19129;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19130;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19131;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19132;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19133;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19134;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19135;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19136;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19137;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19138;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19139;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19140;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19141;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19142;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19143;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19144;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19145;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19146;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19147;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19148;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19149;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19150;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19151;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19152;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES =
    19153;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    19154;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    19155;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19156;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19157;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS =
    19158;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    19159;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    19160;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    19161;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    19162;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS =
    19163;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    19164;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    19165;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19166;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    19167;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19168;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19169;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19170;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19171;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    19172;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19173;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    19174;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19175;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS =
    19176;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    19177;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    19178;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19179;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19180;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19181;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19182;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    19183;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    19184;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19185;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19186;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19187;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19188;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19189;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19190;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19191;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19192;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19193;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19194;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19195;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19196;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19197;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19198;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19199;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19200;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19201;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19202;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19203;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19204;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19205;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19206;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19207;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19208;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19209;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19210;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19211;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19212;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19213;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19214;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19215;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19216;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19217;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19218;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19219;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19220;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19221;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES =
    19222;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    19223;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    19224;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19225;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19226;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    19227;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    19228;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    19229;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19230;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19231;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    19232;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19233;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19234;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19235;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19236;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19237;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19238;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    19239;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19240;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS = 19241;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19242;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION = 19243;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19244;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19245;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19246;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19247;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR = 19248;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19249;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19250;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19251;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19252;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_RESET = 19253;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_SUBERROR = 19254;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS = 19255;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19256;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19257;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19258;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19259;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19260;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19261;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19262;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19263;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19264;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19265;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19266;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19267;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19268;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19269;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19270;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19271;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19272;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19273;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19274;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19275;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19276;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19277;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19278;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19279;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19280;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19281;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19282;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19283;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19284;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19285;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES = 19286;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    19287;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    19288;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SERVERID = 19289;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTAUDITENTRYID =
    19290;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTUSERID = 19291;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PARAMETERDATATYPEID =
    19292;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PERFORMINSERTREPLACE =
    19293;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_NEWVALUES = 19294;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_OLDVALUES = 19295;

const int UA_NS0ID_TRUSTLISTTYPE_UPDATEFREQUENCY = 19296;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE = 19297;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTID = 19298;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTTYPE = 19299;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENODE = 19300;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENAME = 19301;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TIME = 19302;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RECEIVETIME = 19303;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LOCALTIME = 19304;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MESSAGE = 19305;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SEVERITY = 19306;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSID = 19307;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSNAME = 19308;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSID = 19309;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSNAME = 19310;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONNAME = 19311;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_BRANCHID = 19312;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RETAIN = 19313;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE = 19314;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_ID = 19315;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NAME = 19316;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NUMBER = 19317;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    19318;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    19319;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    19320;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRUESTATE = 19321;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_FALSESTATE = 19322;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY = 19323;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY_SOURCETIMESTAMP = 19324;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY = 19325;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    19326;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT = 19327;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT_SOURCETIMESTAMP = 19328;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CLIENTUSERID = 19329;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_DISABLE = 19330;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLE = 19331;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT = 19332;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    19333;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH = 19334;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    19335;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2 = 19336;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    19337;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE = 19338;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_ID = 19339;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NAME = 19340;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NUMBER = 19341;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    19342;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    19343;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    19344;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRUESTATE = 19345;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_FALSESTATE = 19346;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE = 19347;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_ID = 19348;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NAME = 19349;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NUMBER = 19350;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    19351;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    19352;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    19353;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 19354;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    19355;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE = 19356;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    19357;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM = 19358;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM_INPUTARGUMENTS = 19359;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE = 19360;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_ID = 19361;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NAME = 19362;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NUMBER = 19363;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    19364;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    19365;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    19366;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRUESTATE = 19367;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_FALSESTATE = 19368;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_INPUTNODE = 19369;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE = 19370;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_ID = 19371;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NAME = 19372;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 19373;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    19374;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    19375;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    19376;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    19377;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    19378;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE = 19379;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_ID = 19380;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NAME = 19381;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 19382;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    19383;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    19384;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    19385;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    19386;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    19387;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE = 19388;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    19389;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    19390;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    19391;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    19392;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    19393;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    19394;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    19395;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    19396;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    19397;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    19398;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    19399;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    19400;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    19401;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    19402;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    19403;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    19404;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVE = 19405;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    19406;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDORSHELVED = 19407;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MAXTIMESHELVED = 19408;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLEENABLED = 19409;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND = 19410;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_LISTID = 19411;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_AGENCYID = 19412;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_VERSIONID = 19413;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE = 19414;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_ID = 19415;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NAME = 19416;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NUMBER = 19417;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    19418;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    19419;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    19420;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRUESTATE = 19421;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_FALSESTATE = 19422;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ONDELAY = 19423;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OFFDELAY = 19424;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUPFLAG = 19425;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUP = 19426;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE = 19427;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_ID = 19428;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NAME = 19429;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NUMBER = 19430;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    19431;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    19432;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    19433;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRUESTATE = 19434;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_FALSESTATE = 19435;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ALARMGROUP_PLACEHOLDER = 19436;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMTIME = 19437;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMREPEATCOUNT = 19438;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCE = 19439;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESS = 19440;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UNSUPPRESS = 19441;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REMOVEFROMSERVICE = 19442;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_PLACEINSERVICE = 19443;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RESET = 19444;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_NORMALSTATE = 19445;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TRUSTLISTID = 19446;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTUPDATETIME = 19447;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UPDATEFREQUENCY = 19448;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_UPDATEFREQUENCY = 19449;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS = 19550;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19551;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19552;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19553;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19554;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19555;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19556;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR = 19557;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19558;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19559;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19560;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19561;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_RESET = 19562;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_SUBERROR = 19563;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS = 19564;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19565;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19566;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19567;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19568;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19569;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19570;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19571;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19572;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19573;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19574;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19575;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19576;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19577;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19578;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19579;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19580;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19581;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19582;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19583;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19584;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19585;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19586;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19587;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19588;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19589;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19590;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19591;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19592;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19593;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19594;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES = 19595;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19596;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19597;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19598;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19599;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19600;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19601;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19602;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19603;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19604;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19605;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19606;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19607;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19608;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS = 19609;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19610;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19611;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19612;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19613;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19614;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19615;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR = 19616;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19617;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19618;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19619;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19620;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_RESET = 19621;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_SUBERROR = 19622;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS = 19623;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19624;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19625;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19626;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19627;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19628;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19629;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19630;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19631;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19632;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19633;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19634;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19635;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19636;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19637;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19638;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19639;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19640;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19641;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19642;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19643;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19644;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19645;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19646;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19647;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19648;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19649;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19650;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19651;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19652;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19653;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES = 19654;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19655;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19656;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19657;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19658;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19659;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    19660;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19661;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19662;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19663;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19664;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19665;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19666;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19667;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19668;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19669;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19670;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19671;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19672;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    19673;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19674;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    19675;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19676;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE = 19677;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_DIAGNOSTICSLEVEL = 19678;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION = 19679;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_ACTIVE = 19680;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_CLASSIFICATION =
    19681;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19682;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19683;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR = 19684;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_ACTIVE = 19685;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_CLASSIFICATION = 19686;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19687;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19688;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_RESET = 19689;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_SUBERROR = 19690;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS = 19691;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR = 19692;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_ACTIVE = 19693;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19694;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19695;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19696;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19697;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19698;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19699;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19700;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19701;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19702;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19703;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19704;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19705;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19706;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19707;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19708;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19709;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19710;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19711;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19712;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19713;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19714;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19715;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19716;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19717;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19718;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19719;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19720;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19721;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_LIVEVALUES = 19722;

const int UA_NS0ID_DIAGNOSTICSLEVEL = 19723;

const int UA_NS0ID_DIAGNOSTICSLEVEL_ENUMSTRINGS = 19724;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE = 19725;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_ACTIVE = 19726;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_CLASSIFICATION = 19727;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_DIAGNOSTICSLEVEL = 19728;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_TIMEFIRSTCHANGE = 19729;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION = 19730;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_ENUMSTRINGS = 19731;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE = 19732;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_DIAGNOSTICSLEVEL = 19733;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION = 19734;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_ACTIVE = 19735;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_CLASSIFICATION =
    19736;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19737;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19738;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR = 19739;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_ACTIVE = 19740;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_CLASSIFICATION = 19741;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19742;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19743;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_RESET = 19744;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_SUBERROR = 19745;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS = 19746;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR = 19747;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_ACTIVE = 19748;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19749;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19750;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19751;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19752;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19753;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19754;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19755;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19756;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19757;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19758;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19759;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19760;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19761;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19762;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19763;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19764;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19765;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19766;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19767;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19768;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19769;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19770;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19771;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19772;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19773;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19774;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19775;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19776;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES = 19777;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19778;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19779;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19780;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19781;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19782;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19783;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS =
    19784;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19785;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE = 19786;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_DIAGNOSTICSLEVEL = 19787;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION = 19788;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_ACTIVE =
    19789;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_CLASSIFICATION =
    19790;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19791;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19792;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR = 19793;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_ACTIVE = 19794;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_CLASSIFICATION =
    19795;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19796;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19797;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_RESET = 19798;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_SUBERROR = 19799;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS = 19800;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR = 19801;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_ACTIVE =
    19802;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19803;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19804;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19805;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19806;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19807;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19808;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19809;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19810;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19811;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19812;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19813;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19814;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19815;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19816;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19817;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19818;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19819;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19820;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19821;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19822;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19823;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19824;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19825;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19826;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19827;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19828;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19829;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19830;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES = 19831;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS =
    19832;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    19833;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE = 19834;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_DIAGNOSTICSLEVEL = 19835;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION = 19836;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_ACTIVE =
    19837;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION =
    19838;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19839;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19840;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR = 19841;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_ACTIVE = 19842;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_CLASSIFICATION =
    19843;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19844;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19845;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_RESET = 19846;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_SUBERROR = 19847;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS = 19848;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR = 19849;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE =
    19850;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19851;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19852;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19853;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19854;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19855;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19856;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19857;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19858;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19859;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19860;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19861;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19862;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19863;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19864;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19865;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19866;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19867;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19868;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19869;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19870;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19871;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19872;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19873;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19874;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19875;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19876;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19877;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19878;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES = 19879;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES =
    19880;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    19881;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    19882;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19883;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19884;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS =
    19885;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    19886;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    19887;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    19888;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    19889;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS =
    19890;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    19891;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    19892;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19893;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    19894;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19895;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19896;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19897;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19898;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID =
    19899;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19900;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID =
    19901;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19902;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE = 19903;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_DIAGNOSTICSLEVEL = 19904;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION = 19905;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_ACTIVE =
    19906;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION =
    19907;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19908;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19909;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR = 19910;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_ACTIVE = 19911;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_CLASSIFICATION =
    19912;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19913;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19914;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_RESET = 19915;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_SUBERROR = 19916;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS = 19917;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR = 19918;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE =
    19919;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19920;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19921;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19922;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19923;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19924;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19925;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19926;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19927;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19928;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19929;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19930;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19931;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19932;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19933;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19934;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19935;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19936;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19937;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19938;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19939;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19940;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19941;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19942;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19943;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19944;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19945;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19946;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19947;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES = 19948;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES =
    19949;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    19950;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    19951;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19952;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19953;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    19954;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    19955;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    19956;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19957;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19958;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS =
    19959;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19960;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19961;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19962;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19963;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19964;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19965;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS =
    19966;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19967;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE = 19968;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_DIAGNOSTICSLEVEL = 19969;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION = 19970;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_ACTIVE =
    19971;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_CLASSIFICATION =
    19972;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19973;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19974;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR = 19975;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_ACTIVE = 19976;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_CLASSIFICATION =
    19977;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19978;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19979;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_RESET = 19980;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_SUBERROR = 19981;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS = 19982;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR =
    19983;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_ACTIVE =
    19984;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19985;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19986;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19987;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19988;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19989;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19990;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19991;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19992;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19993;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19994;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19995;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19996;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19997;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19998;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19999;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    20000;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    20001;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    20002;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    20003;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    20004;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    20005;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    20006;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    20007;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    20008;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    20009;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    20010;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    20011;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    20012;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES = 20013;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES =
    20014;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    20015;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    20016;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    20017;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    20018;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER =
    20019;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    20020;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE =
    20021;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    20022;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION =
    20023;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    20024;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION =
    20025;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    20026;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE = 20027;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_DIAGNOSTICSLEVEL = 20028;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION = 20029;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_ACTIVE =
    20030;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_CLASSIFICATION =
    20031;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    20032;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    20033;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR = 20034;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_ACTIVE = 20035;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_CLASSIFICATION =
    20036;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    20037;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    20038;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_RESET = 20039;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_SUBERROR = 20040;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS = 20041;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR =
    20042;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_ACTIVE =
    20043;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    20044;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    20045;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    20046;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    20047;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    20048;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    20049;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    20050;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    20051;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    20052;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    20053;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    20054;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    20055;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    20056;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    20057;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    20058;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    20059;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    20060;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    20061;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    20062;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    20063;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    20064;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    20065;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    20066;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    20067;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    20068;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    20069;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    20070;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    20071;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES = 20072;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES =
    20073;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    20074;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    20075;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    20076;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    20077;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS =
    20078;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    20079;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    20080;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    20081;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    20082;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER =
    20083;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    20084;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE =
    20085;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    20086;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION =
    20087;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    20088;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION =
    20089;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    20090;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID =
    20091;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    20092;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID =
    20093;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    20094;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20290;

const int UA_NS0ID_DATASETORDERINGTYPE = 20408;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    20409;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20588;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20884;

const int UA_NS0ID_VERSIONTIME = 20998;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE = 20999;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTXML = 21000;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTBINARY = 21001;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE = 21002;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    21003;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    21004;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    21005;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SUBSCRIBEDDATASET =
    21006;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES =
    21009;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_INPUTARGUMENTS =
    21010;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_OUTPUTARGUMENTS =
    21011;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR =
    21012;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_INPUTARGUMENTS =
    21013;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_OUTPUTARGUMENTS =
    21014;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS = 21015;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 21016;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 21017;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 21018;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    21019;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    21020;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    21021;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 21022;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 21023;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    21024;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    21025;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    21026;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_RESET = 21027;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_SUBERROR = 21028;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS = 21029;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 21030;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    21031;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    21032;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    21033;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    21034;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    21035;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    21036;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    21037;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    21038;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    21039;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    21040;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    21041;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    21042;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    21043;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    21044;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    21045;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    21046;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    21047;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    21048;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    21049;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    21050;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    21051;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    21052;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    21053;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    21054;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    21055;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    21056;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    21057;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    21058;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    21059;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 21060;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES =
    21061;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    21062;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    21063;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    21064;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    21065;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    21066;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    21067;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    21068;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    21069;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    21070;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    21071;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    21072;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    21073;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    21074;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    21075;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    21076;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    21077;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    21078;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    21079;

const int UA_NS0ID_READERGROUPTYPE_TRANSPORTSETTINGS = 21080;

const int UA_NS0ID_READERGROUPTYPE_MESSAGESETTINGS = 21081;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER = 21082;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_INPUTARGUMENTS = 21083;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_OUTPUTARGUMENTS = 21084;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER = 21085;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER_INPUTARGUMENTS = 21086;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE = 21087;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_INPUTARGUMENTS = 21088;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_OUTPUTARGUMENTS = 21089;

const int UA_NS0ID_READERGROUPTRANSPORTTYPE = 21090;

const int UA_NS0ID_READERGROUPMESSAGETYPE = 21091;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERID = 21092;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETFIELDCONTENTMASK = 21093;

const int UA_NS0ID_DATASETWRITERTYPE_KEYFRAMECOUNT = 21094;

const int UA_NS0ID_DATASETWRITERTYPE_MESSAGESETTINGS = 21095;

const int UA_NS0ID_DATASETWRITERMESSAGETYPE = 21096;

const int UA_NS0ID_DATASETREADERTYPE_PUBLISHERID = 21097;

const int UA_NS0ID_DATASETREADERTYPE_WRITERGROUPID = 21098;

const int UA_NS0ID_DATASETREADERTYPE_DATASETWRITERID = 21099;

const int UA_NS0ID_DATASETREADERTYPE_DATASETMETADATA = 21100;

const int UA_NS0ID_DATASETREADERTYPE_DATASETFIELDCONTENTMASK = 21101;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGERECEIVETIMEOUT = 21102;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGESETTINGS = 21103;

const int UA_NS0ID_DATASETREADERMESSAGETYPE = 21104;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE = 21105;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_GROUPVERSION = 21106;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_DATASETORDERING = 21107;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21108;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_SAMPLINGOFFSET = 21109;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_PUBLISHINGOFFSET = 21110;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE = 21111;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21112;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_CONFIGUREDSIZE = 21113;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_NETWORKMESSAGENUMBER = 21114;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETOFFSET = 21115;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE = 21116;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_GROUPVERSION = 21117;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGENUMBER = 21119;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETCLASSID = 21120;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK =
    21121;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21122;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PUBLISHINGINTERVAL = 21123;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PROCESSINGOFFSET = 21124;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_RECEIVEOFFSET = 21125;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE = 21126;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21127;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE = 21128;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21129;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE = 21130;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK =
    21131;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21132;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE = 21133;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATCOUNT = 21134;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATDELAY = 21135;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE = 21136;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_QUEUENAME = 21137;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE = 21138;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_QUEUENAME = 21139;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAQUEUENAME = 21140;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAUPDATETIME = 21141;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE = 21142;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_QUEUENAME = 21143;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_METADATAQUEUENAME = 21144;

const int UA_NS0ID_NETWORKADDRESSTYPE = 21145;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE = 21146;

const int UA_NS0ID_NETWORKADDRESSURLTYPE = 21147;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE = 21148;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_URL = 21149;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21150;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTBINARY = 21151;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTBINARY = 21152;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21153;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTBINARY = 21154;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    21155;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE = 21156;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION =
    21157;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21158;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE = 21159;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION =
    21160;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT =
    21161;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE = 21162;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION =
    21163;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT =
    21164;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE = 21165;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION =
    21166;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21167;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21168;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION =
    21169;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT =
    21170;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE =
    21171;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    21172;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    21173;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTXML = 21174;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTXML = 21175;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTXML = 21176;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTXML = 21177;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTXML = 21178;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    21179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE = 21180;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION = 21181;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21182;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE = 21183;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION =
    21184;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT =
    21185;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE = 21186;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION =
    21187;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT =
    21188;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE = 21189;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION = 21190;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21191;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21192;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION =
    21193;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT =
    21194;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 21195;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    21196;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    21197;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21198;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTJSON = 21199;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTJSON = 21200;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21201;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTJSON = 21202;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    21203;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_UPDATEFREQUENCY =
    21383;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    21679;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    21975;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22271;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22567;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22863;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    23159;

const int UA_NS0ID_ALIASNAMETYPE = 23455;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE = 23456;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_ALIAS_PLACEHOLDER = 23457;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER =
    23458;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS =
    23459;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23460;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23461;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS = 23462;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_INPUTARGUMENTS = 23463;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_OUTPUTARGUMENTS = 23464;

const int UA_NS0ID_FINDALIASMETHODTYPE = 23465;

const int UA_NS0ID_FINDALIASMETHODTYPE_INPUTARGUMENTS = 23466;

const int UA_NS0ID_FINDALIASMETHODTYPE_OUTPUTARGUMENTS = 23467;

const int UA_NS0ID_ALIASNAMEDATATYPE = 23468;

const int UA_NS0ID_ALIASFOR = 23469;

const int UA_NS0ID_ALIASES = 23470;

const int UA_NS0ID_ALIASES_ALIAS_PLACEHOLDER = 23471;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23472;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23473;

const int
    UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23474;

const int
    UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23475;

const int UA_NS0ID_ALIASES_FINDALIAS = 23476;

const int UA_NS0ID_ALIASES_FINDALIAS_INPUTARGUMENTS = 23477;

const int UA_NS0ID_ALIASES_FINDALIAS_OUTPUTARGUMENTS = 23478;

const int UA_NS0ID_TAGVARIABLES = 23479;

const int UA_NS0ID_TAGVARIABLES_ALIAS_PLACEHOLDER = 23480;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23481;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS =
    23482;

const int
    UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23483;

const int
    UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23484;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS = 23485;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_INPUTARGUMENTS = 23486;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_OUTPUTARGUMENTS = 23487;

const int UA_NS0ID_TOPICS = 23488;

const int UA_NS0ID_TOPICS_ALIAS_PLACEHOLDER = 23489;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23490;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23491;

const int
    UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23492;

const int
    UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23493;

const int UA_NS0ID_TOPICS_FINDALIAS = 23494;

const int UA_NS0ID_TOPICS_FINDALIAS_INPUTARGUMENTS = 23495;

const int UA_NS0ID_TOPICS_FINDALIAS_OUTPUTARGUMENTS = 23496;

const int UA_NS0ID_READANNOTATIONDATADETAILS = 23497;

const int UA_NS0ID_CURRENCYUNITTYPE = 23498;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTBINARY = 23499;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTBINARY = 23500;

const int UA_NS0ID_CURRENCYUNIT = 23501;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE = 23502;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23503;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT =
    23504;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTXML = 23505;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTXML = 23506;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTBINARY = 23507;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE = 23508;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23509;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT = 23510;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTJSON = 23511;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTJSON = 23512;

const int UA_NS0ID_IORDEREDOBJECTTYPE = 23513;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE = 23514;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23515;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT =
    23516;

const int UA_NS0ID_IORDEREDOBJECTTYPE_NUMBERINLIST = 23517;

const int UA_NS0ID_ORDEREDLISTTYPE = 23518;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER = 23519;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTXML = 23520;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER_NUMBERINLIST =
    23521;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE = 23522;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23523;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT = 23524;

const int UA_NS0ID_ORDEREDLISTTYPE_NODEVERSION = 23525;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST = 23526;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS = 23527;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTJSON = 23528;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23529;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23530;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23531;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23532;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23533;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23534;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST =
    23535;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23536;

const int UA_NS0ID_ECCAPPLICATIONCERTIFICATETYPE = 23537;

const int UA_NS0ID_ECCNISTP256APPLICATIONCERTIFICATETYPE = 23538;

const int UA_NS0ID_ECCNISTP384APPLICATIONCERTIFICATETYPE = 23539;

const int UA_NS0ID_ECCBRAINPOOLP256R1APPLICATIONCERTIFICATETYPE = 23540;

const int UA_NS0ID_ECCBRAINPOOLP384R1APPLICATIONCERTIFICATETYPE = 23541;

const int UA_NS0ID_ECCCURVE25519APPLICATIONCERTIFICATETYPE = 23542;

const int UA_NS0ID_ECCCURVE448APPLICATIONCERTIFICATETYPE = 23543;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23544;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23545;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23546;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23547;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23548;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23549;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23550;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23551;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23552;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23553;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23554;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23555;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE = 23556;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER =
    23557;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICEURI =
    23558;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICECERTIFICATE =
    23559;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ISSUERENDPOINTURL =
    23560;

const int UA_ACCESSLEVELMASK_READ = 1;

const int UA_ACCESSLEVELMASK_WRITE = 2;

const int UA_ACCESSLEVELMASK_HISTORYREAD = 4;

const int UA_ACCESSLEVELMASK_HISTORYWRITE = 8;

const int UA_ACCESSLEVELMASK_SEMANTICCHANGE = 16;

const int UA_ACCESSLEVELMASK_STATUSWRITE = 32;

const int UA_ACCESSLEVELMASK_TIMESTAMPWRITE = 64;

const int UA_WRITEMASK_ACCESSLEVEL = 1;

const int UA_WRITEMASK_ARRRAYDIMENSIONS = 2;

const int UA_WRITEMASK_BROWSENAME = 4;

const int UA_WRITEMASK_CONTAINSNOLOOPS = 8;

const int UA_WRITEMASK_DATATYPE = 16;

const int UA_WRITEMASK_DESCRIPTION = 32;

const int UA_WRITEMASK_DISPLAYNAME = 64;

const int UA_WRITEMASK_EVENTNOTIFIER = 128;

const int UA_WRITEMASK_EXECUTABLE = 256;

const int UA_WRITEMASK_HISTORIZING = 512;

const int UA_WRITEMASK_INVERSENAME = 1024;

const int UA_WRITEMASK_ISABSTRACT = 2048;

const int UA_WRITEMASK_MINIMUMSAMPLINGINTERVAL = 4096;

const int UA_WRITEMASK_NODECLASS = 8192;

const int UA_WRITEMASK_NODEID = 16384;

const int UA_WRITEMASK_SYMMETRIC = 32768;

const int UA_WRITEMASK_USERACCESSLEVEL = 65536;

const int UA_WRITEMASK_USEREXECUTABLE = 131072;

const int UA_WRITEMASK_USERWRITEMASK = 262144;

const int UA_WRITEMASK_VALUERANK = 524288;

const int UA_WRITEMASK_WRITEMASK = 1048576;

const int UA_WRITEMASK_VALUEFORVARIABLETYPE = 2097152;

const int UA_VALUERANK_SCALAR_OR_ONE_DIMENSION = -3;

const int UA_VALUERANK_ANY = -2;

const int UA_VALUERANK_SCALAR = -1;

const int UA_VALUERANK_ONE_OR_MORE_DIMENSIONS = 0;

const int UA_VALUERANK_ONE_DIMENSION = 1;

const int UA_VALUERANK_TWO_DIMENSIONS = 2;

const int UA_VALUERANK_THREE_DIMENSIONS = 3;

const int UA_EVENTNOTIFIER_SUBSCRIBE_TO_EVENT = 1;

const int UA_EVENTNOTIFIER_HISTORY_READ = 4;

const int UA_EVENTNOTIFIER_HISTORY_WRITE = 8;

const int UA_TRUE = 1;

const int UA_FALSE = 0;

const int UA_SBYTE_MIN = -128;

const int UA_SBYTE_MAX = 127;

const int UA_BYTE_MIN = 0;

const int UA_BYTE_MAX = 255;

const int UA_INT16_MIN = -32768;

const int UA_INT16_MAX = 32767;

const int UA_UINT16_MIN = 0;

const int UA_UINT16_MAX = 65535;

const int UA_INT32_MIN = -2147483648;

const int UA_INT32_MAX = 2147483647;

const int UA_UINT32_MIN = 0;

const int UA_UINT32_MAX = 4294967295;

const int UA_INT64_MAX = 9223372036854775807;

const int UA_INT64_MIN = -9223372036854775808;

const int UA_UINT64_MIN = 0;

const int UA_UINT64_MAX = -1;

const int UA_DATETIME_USEC = 10;

const int UA_DATETIME_MSEC = 10000;

const int UA_DATETIME_SEC = 10000000;

const int UA_DATETIME_UNIX_EPOCH = 116444736000000000;

const int UA_DATATYPEKINDS = 31;

const int UA_TYPES_COUNT = 236;

const int UA_TYPES_BOOLEAN = 0;

const int UA_TYPES_SBYTE = 1;

const int UA_TYPES_BYTE = 2;

const int UA_TYPES_INT16 = 3;

const int UA_TYPES_UINT16 = 4;

const int UA_TYPES_INT32 = 5;

const int UA_TYPES_UINT32 = 6;

const int UA_TYPES_INT64 = 7;

const int UA_TYPES_UINT64 = 8;

const int UA_TYPES_FLOAT = 9;

const int UA_TYPES_DOUBLE = 10;

const int UA_TYPES_STRING = 11;

const int UA_TYPES_DATETIME = 12;

const int UA_TYPES_GUID = 13;

const int UA_TYPES_BYTESTRING = 14;

const int UA_TYPES_XMLELEMENT = 15;

const int UA_TYPES_NODEID = 16;

const int UA_TYPES_EXPANDEDNODEID = 17;

const int UA_TYPES_STATUSCODE = 18;

const int UA_TYPES_QUALIFIEDNAME = 19;

const int UA_TYPES_LOCALIZEDTEXT = 20;

const int UA_TYPES_EXTENSIONOBJECT = 21;

const int UA_TYPES_DATAVALUE = 22;

const int UA_TYPES_VARIANT = 23;

const int UA_TYPES_DIAGNOSTICINFO = 24;

const int UA_TYPES_KEYVALUEPAIR = 25;

const int UA_TYPES_SIMPLETYPEDESCRIPTION = 26;

const int UA_TYPES_PUBSUBSTATE = 27;

const int UA_DATASETFIELDFLAGS_NONE = 0;

const int UA_DATASETFIELDFLAGS_PROMOTEDFIELD = 1;

const int UA_TYPES_DATASETFIELDFLAGS = 28;

const int UA_TYPES_CONFIGURATIONVERSIONDATATYPE = 29;

const int UA_TYPES_PUBLISHEDVARIABLEDATATYPE = 30;

const int UA_TYPES_PUBLISHEDDATAITEMSDATATYPE = 31;

const int UA_DATASETFIELDCONTENTMASK_NONE = 0;

const int UA_DATASETFIELDCONTENTMASK_STATUSCODE = 1;

const int UA_DATASETFIELDCONTENTMASK_SOURCETIMESTAMP = 2;

const int UA_DATASETFIELDCONTENTMASK_SERVERTIMESTAMP = 4;

const int UA_DATASETFIELDCONTENTMASK_SOURCEPICOSECONDS = 8;

const int UA_DATASETFIELDCONTENTMASK_SERVERPICOSECONDS = 16;

const int UA_DATASETFIELDCONTENTMASK_RAWDATA = 32;

const int UA_TYPES_DATASETFIELDCONTENTMASK = 32;

const int UA_TYPES_DATASETWRITERDATATYPE = 33;

const int UA_TYPES_NETWORKADDRESSURLDATATYPE = 34;

const int UA_TYPES_OVERRIDEVALUEHANDLING = 35;

const int UA_TYPES_DATASETORDERINGTYPE = 36;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PUBLISHERID = 1;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPHEADER = 2;

const int UA_UADPNETWORKMESSAGECONTENTMASK_WRITERGROUPID = 4;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPVERSION = 8;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NETWORKMESSAGENUMBER = 16;

const int UA_UADPNETWORKMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PAYLOADHEADER = 64;

const int UA_UADPNETWORKMESSAGECONTENTMASK_TIMESTAMP = 128;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PICOSECONDS = 256;

const int UA_UADPNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 512;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PROMOTEDFIELDS = 1024;

const int UA_TYPES_UADPNETWORKMESSAGECONTENTMASK = 37;

const int UA_TYPES_UADPWRITERGROUPMESSAGEDATATYPE = 38;

const int UA_UADPDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPDATASETMESSAGECONTENTMASK_TIMESTAMP = 1;

const int UA_UADPDATASETMESSAGECONTENTMASK_PICOSECONDS = 2;

const int UA_UADPDATASETMESSAGECONTENTMASK_STATUS = 4;

const int UA_UADPDATASETMESSAGECONTENTMASK_MAJORVERSION = 8;

const int UA_UADPDATASETMESSAGECONTENTMASK_MINORVERSION = 16;

const int UA_UADPDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_TYPES_UADPDATASETMESSAGECONTENTMASK = 39;

const int UA_TYPES_UADPDATASETWRITERMESSAGEDATATYPE = 40;

const int UA_TYPES_UADPDATASETREADERMESSAGEDATATYPE = 41;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NETWORKMESSAGEHEADER = 1;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETMESSAGEHEADER = 2;

const int UA_JSONNETWORKMESSAGECONTENTMASK_SINGLEDATASETMESSAGE = 4;

const int UA_JSONNETWORKMESSAGECONTENTMASK_PUBLISHERID = 8;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 16;

const int UA_JSONNETWORKMESSAGECONTENTMASK_REPLYTO = 32;

const int UA_TYPES_JSONNETWORKMESSAGECONTENTMASK = 42;

const int UA_TYPES_JSONWRITERGROUPMESSAGEDATATYPE = 43;

const int UA_JSONDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONDATASETMESSAGECONTENTMASK_DATASETWRITERID = 1;

const int UA_JSONDATASETMESSAGECONTENTMASK_METADATAVERSION = 2;

const int UA_JSONDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 4;

const int UA_JSONDATASETMESSAGECONTENTMASK_TIMESTAMP = 8;

const int UA_JSONDATASETMESSAGECONTENTMASK_STATUS = 16;

const int UA_TYPES_JSONDATASETMESSAGECONTENTMASK = 44;

const int UA_TYPES_JSONDATASETWRITERMESSAGEDATATYPE = 45;

const int UA_TYPES_JSONDATASETREADERMESSAGEDATATYPE = 46;

const int UA_TYPES_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 47;

const int UA_TYPES_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 48;

const int UA_TYPES_BROKERCONNECTIONTRANSPORTDATATYPE = 49;

const int UA_TYPES_BROKERTRANSPORTQUALITYOFSERVICE = 50;

const int UA_TYPES_BROKERWRITERGROUPTRANSPORTDATATYPE = 51;

const int UA_TYPES_BROKERDATASETWRITERTRANSPORTDATATYPE = 52;

const int UA_TYPES_BROKERDATASETREADERTRANSPORTDATATYPE = 53;

const int UA_TYPES_NODECLASS = 54;

const int UA_PERMISSIONTYPE_NONE = 0;

const int UA_PERMISSIONTYPE_BROWSE = 1;

const int UA_PERMISSIONTYPE_READROLEPERMISSIONS = 2;

const int UA_PERMISSIONTYPE_WRITEATTRIBUTE = 4;

const int UA_PERMISSIONTYPE_WRITEROLEPERMISSIONS = 8;

const int UA_PERMISSIONTYPE_WRITEHISTORIZING = 16;

const int UA_PERMISSIONTYPE_READ = 32;

const int UA_PERMISSIONTYPE_WRITE = 64;

const int UA_PERMISSIONTYPE_READHISTORY = 128;

const int UA_PERMISSIONTYPE_INSERTHISTORY = 256;

const int UA_PERMISSIONTYPE_MODIFYHISTORY = 512;

const int UA_PERMISSIONTYPE_DELETEHISTORY = 1024;

const int UA_PERMISSIONTYPE_RECEIVEEVENTS = 2048;

const int UA_PERMISSIONTYPE_CALL = 4096;

const int UA_PERMISSIONTYPE_ADDREFERENCE = 8192;

const int UA_PERMISSIONTYPE_REMOVEREFERENCE = 16384;

const int UA_PERMISSIONTYPE_DELETENODE = 32768;

const int UA_PERMISSIONTYPE_ADDNODE = 65536;

const int UA_TYPES_PERMISSIONTYPE = 55;

const int UA_TYPES_ROLEPERMISSIONTYPE = 56;

const int UA_TYPES_STRUCTURETYPE = 57;

const int UA_TYPES_STRUCTUREFIELD = 58;

const int UA_TYPES_STRUCTUREDEFINITION = 59;

const int UA_TYPES_ARGUMENT = 60;

const int UA_TYPES_ENUMVALUETYPE = 61;

const int UA_TYPES_ENUMFIELD = 62;

const int UA_TYPES_DURATION = 63;

const int UA_TYPES_UTCTIME = 64;

const int UA_TYPES_LOCALEID = 65;

const int UA_TYPES_TIMEZONEDATATYPE = 66;

const int UA_TYPES_APPLICATIONTYPE = 67;

const int UA_TYPES_APPLICATIONDESCRIPTION = 68;

const int UA_TYPES_REQUESTHEADER = 69;

const int UA_TYPES_RESPONSEHEADER = 70;

const int UA_TYPES_SERVICEFAULT = 71;

const int UA_TYPES_FINDSERVERSREQUEST = 72;

const int UA_TYPES_FINDSERVERSRESPONSE = 73;

const int UA_TYPES_MESSAGESECURITYMODE = 74;

const int UA_TYPES_USERTOKENTYPE = 75;

const int UA_TYPES_USERTOKENPOLICY = 76;

const int UA_TYPES_ENDPOINTDESCRIPTION = 77;

const int UA_TYPES_GETENDPOINTSREQUEST = 78;

const int UA_TYPES_GETENDPOINTSRESPONSE = 79;

const int UA_TYPES_SECURITYTOKENREQUESTTYPE = 80;

const int UA_TYPES_CHANNELSECURITYTOKEN = 81;

const int UA_TYPES_OPENSECURECHANNELREQUEST = 82;

const int UA_TYPES_OPENSECURECHANNELRESPONSE = 83;

const int UA_TYPES_CLOSESECURECHANNELREQUEST = 84;

const int UA_TYPES_CLOSESECURECHANNELRESPONSE = 85;

const int UA_TYPES_SIGNEDSOFTWARECERTIFICATE = 86;

const int UA_TYPES_SIGNATUREDATA = 87;

const int UA_TYPES_CREATESESSIONREQUEST = 88;

const int UA_TYPES_CREATESESSIONRESPONSE = 89;

const int UA_TYPES_USERIDENTITYTOKEN = 90;

const int UA_TYPES_ANONYMOUSIDENTITYTOKEN = 91;

const int UA_TYPES_USERNAMEIDENTITYTOKEN = 92;

const int UA_TYPES_X509IDENTITYTOKEN = 93;

const int UA_TYPES_ISSUEDIDENTITYTOKEN = 94;

const int UA_TYPES_ACTIVATESESSIONREQUEST = 95;

const int UA_TYPES_ACTIVATESESSIONRESPONSE = 96;

const int UA_TYPES_CLOSESESSIONREQUEST = 97;

const int UA_TYPES_CLOSESESSIONRESPONSE = 98;

const int UA_TYPES_NODEATTRIBUTESMASK = 99;

const int UA_TYPES_NODEATTRIBUTES = 100;

const int UA_TYPES_OBJECTATTRIBUTES = 101;

const int UA_TYPES_VARIABLEATTRIBUTES = 102;

const int UA_TYPES_METHODATTRIBUTES = 103;

const int UA_TYPES_OBJECTTYPEATTRIBUTES = 104;

const int UA_TYPES_VARIABLETYPEATTRIBUTES = 105;

const int UA_TYPES_REFERENCETYPEATTRIBUTES = 106;

const int UA_TYPES_DATATYPEATTRIBUTES = 107;

const int UA_TYPES_VIEWATTRIBUTES = 108;

const int UA_TYPES_ADDNODESITEM = 109;

const int UA_TYPES_ADDNODESRESULT = 110;

const int UA_TYPES_ADDNODESREQUEST = 111;

const int UA_TYPES_ADDNODESRESPONSE = 112;

const int UA_TYPES_ADDREFERENCESITEM = 113;

const int UA_TYPES_ADDREFERENCESREQUEST = 114;

const int UA_TYPES_ADDREFERENCESRESPONSE = 115;

const int UA_TYPES_DELETENODESITEM = 116;

const int UA_TYPES_DELETENODESREQUEST = 117;

const int UA_TYPES_DELETENODESRESPONSE = 118;

const int UA_TYPES_DELETEREFERENCESITEM = 119;

const int UA_TYPES_DELETEREFERENCESREQUEST = 120;

const int UA_TYPES_DELETEREFERENCESRESPONSE = 121;

const int UA_TYPES_BROWSEDIRECTION = 122;

const int UA_TYPES_VIEWDESCRIPTION = 123;

const int UA_TYPES_BROWSEDESCRIPTION = 124;

const int UA_TYPES_BROWSERESULTMASK = 125;

const int UA_TYPES_REFERENCEDESCRIPTION = 126;

const int UA_TYPES_BROWSERESULT = 127;

const int UA_TYPES_BROWSEREQUEST = 128;

const int UA_TYPES_BROWSERESPONSE = 129;

const int UA_TYPES_BROWSENEXTREQUEST = 130;

const int UA_TYPES_BROWSENEXTRESPONSE = 131;

const int UA_TYPES_RELATIVEPATHELEMENT = 132;

const int UA_TYPES_RELATIVEPATH = 133;

const int UA_TYPES_BROWSEPATH = 134;

const int UA_TYPES_BROWSEPATHTARGET = 135;

const int UA_TYPES_BROWSEPATHRESULT = 136;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 137;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 138;

const int UA_TYPES_REGISTERNODESREQUEST = 139;

const int UA_TYPES_REGISTERNODESRESPONSE = 140;

const int UA_TYPES_UNREGISTERNODESREQUEST = 141;

const int UA_TYPES_UNREGISTERNODESRESPONSE = 142;

const int UA_TYPES_FILTEROPERATOR = 143;

const int UA_TYPES_CONTENTFILTERELEMENT = 144;

const int UA_TYPES_CONTENTFILTER = 145;

const int UA_TYPES_ELEMENTOPERAND = 146;

const int UA_TYPES_LITERALOPERAND = 147;

const int UA_TYPES_ATTRIBUTEOPERAND = 148;

const int UA_TYPES_SIMPLEATTRIBUTEOPERAND = 149;

const int UA_TYPES_CONTENTFILTERELEMENTRESULT = 150;

const int UA_TYPES_CONTENTFILTERRESULT = 151;

const int UA_TYPES_TIMESTAMPSTORETURN = 152;

const int UA_TYPES_READVALUEID = 153;

const int UA_TYPES_READREQUEST = 154;

const int UA_TYPES_READRESPONSE = 155;

const int UA_TYPES_WRITEVALUE = 156;

const int UA_TYPES_WRITEREQUEST = 157;

const int UA_TYPES_WRITERESPONSE = 158;

const int UA_TYPES_CALLMETHODREQUEST = 159;

const int UA_TYPES_CALLMETHODRESULT = 160;

const int UA_TYPES_CALLREQUEST = 161;

const int UA_TYPES_CALLRESPONSE = 162;

const int UA_TYPES_MONITORINGMODE = 163;

const int UA_TYPES_DATACHANGETRIGGER = 164;

const int UA_TYPES_DEADBANDTYPE = 165;

const int UA_TYPES_DATACHANGEFILTER = 166;

const int UA_TYPES_EVENTFILTER = 167;

const int UA_TYPES_AGGREGATECONFIGURATION = 168;

const int UA_TYPES_AGGREGATEFILTER = 169;

const int UA_TYPES_EVENTFILTERRESULT = 170;

const int UA_TYPES_MONITORINGPARAMETERS = 171;

const int UA_TYPES_MONITOREDITEMCREATEREQUEST = 172;

const int UA_TYPES_MONITOREDITEMCREATERESULT = 173;

const int UA_TYPES_CREATEMONITOREDITEMSREQUEST = 174;

const int UA_TYPES_CREATEMONITOREDITEMSRESPONSE = 175;

const int UA_TYPES_MONITOREDITEMMODIFYREQUEST = 176;

const int UA_TYPES_MONITOREDITEMMODIFYRESULT = 177;

const int UA_TYPES_MODIFYMONITOREDITEMSREQUEST = 178;

const int UA_TYPES_MODIFYMONITOREDITEMSRESPONSE = 179;

const int UA_TYPES_SETMONITORINGMODEREQUEST = 180;

const int UA_TYPES_SETMONITORINGMODERESPONSE = 181;

const int UA_TYPES_SETTRIGGERINGREQUEST = 182;

const int UA_TYPES_SETTRIGGERINGRESPONSE = 183;

const int UA_TYPES_DELETEMONITOREDITEMSREQUEST = 184;

const int UA_TYPES_DELETEMONITOREDITEMSRESPONSE = 185;

const int UA_TYPES_CREATESUBSCRIPTIONREQUEST = 186;

const int UA_TYPES_CREATESUBSCRIPTIONRESPONSE = 187;

const int UA_TYPES_MODIFYSUBSCRIPTIONREQUEST = 188;

const int UA_TYPES_MODIFYSUBSCRIPTIONRESPONSE = 189;

const int UA_TYPES_SETPUBLISHINGMODEREQUEST = 190;

const int UA_TYPES_SETPUBLISHINGMODERESPONSE = 191;

const int UA_TYPES_NOTIFICATIONMESSAGE = 192;

const int UA_TYPES_MONITOREDITEMNOTIFICATION = 193;

const int UA_TYPES_EVENTFIELDLIST = 194;

const int UA_TYPES_STATUSCHANGENOTIFICATION = 195;

const int UA_TYPES_SUBSCRIPTIONACKNOWLEDGEMENT = 196;

const int UA_TYPES_PUBLISHREQUEST = 197;

const int UA_TYPES_PUBLISHRESPONSE = 198;

const int UA_TYPES_REPUBLISHREQUEST = 199;

const int UA_TYPES_REPUBLISHRESPONSE = 200;

const int UA_TYPES_TRANSFERRESULT = 201;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSREQUEST = 202;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSRESPONSE = 203;

const int UA_TYPES_DELETESUBSCRIPTIONSREQUEST = 204;

const int UA_TYPES_DELETESUBSCRIPTIONSRESPONSE = 205;

const int UA_TYPES_BUILDINFO = 206;

const int UA_TYPES_REDUNDANCYSUPPORT = 207;

const int UA_TYPES_SERVERSTATE = 208;

const int UA_TYPES_SERVERDIAGNOSTICSSUMMARYDATATYPE = 209;

const int UA_TYPES_SERVERSTATUSDATATYPE = 210;

const int UA_TYPES_RANGE = 211;

const int UA_TYPES_EUINFORMATION = 212;

const int UA_TYPES_AXISSCALEENUMERATION = 213;

const int UA_TYPES_COMPLEXNUMBERTYPE = 214;

const int UA_TYPES_DOUBLECOMPLEXNUMBERTYPE = 215;

const int UA_TYPES_AXISINFORMATION = 216;

const int UA_TYPES_XVTYPE = 217;

const int UA_TYPES_STRUCTUREDESCRIPTION = 218;

const int UA_TYPES_FIELDMETADATA = 219;

const int UA_TYPES_PUBLISHEDEVENTSDATATYPE = 220;

const int UA_TYPES_WRITERGROUPDATATYPE = 221;

const int UA_TYPES_FIELDTARGETDATATYPE = 222;

const int UA_TYPES_SUBSCRIBEDDATASETMIRRORDATATYPE = 223;

const int UA_TYPES_ENUMDEFINITION = 224;

const int UA_TYPES_DATACHANGENOTIFICATION = 225;

const int UA_TYPES_EVENTNOTIFICATIONLIST = 226;

const int UA_TYPES_ENUMDESCRIPTION = 227;

const int UA_TYPES_UABINARYFILEDATATYPE = 228;

const int UA_TYPES_DATASETMETADATATYPE = 229;

const int UA_TYPES_PUBLISHEDDATASETDATATYPE = 230;

const int UA_TYPES_DATASETREADERDATATYPE = 231;

const int UA_TYPES_TARGETVARIABLESDATATYPE = 232;

const int UA_TYPES_READERGROUPDATATYPE = 233;

const int UA_TYPES_PUBSUBCONNECTIONDATATYPE = 234;

const int UA_TYPES_PUBSUBCONFIGURATIONDATATYPE = 235;

const String UA_PRINTF_GUID_FORMAT =
    '%08x-%04hx-%04hx-%02hhx%02hhx-%02hhx%02hhx%02hhx%02hhx%02hhx%02hhx';

const String UA_PRINTF_STRING_FORMAT = '"%.*s"';

const int UA_REFERENCETYPEINDEX_REFERENCES = 0;

const int UA_REFERENCETYPEINDEX_HASSUBTYPE = 1;

const int UA_REFERENCETYPEINDEX_AGGREGATES = 2;

const int UA_REFERENCETYPEINDEX_HIERARCHICALREFERENCES = 3;

const int UA_REFERENCETYPEINDEX_NONHIERARCHICALREFERENCES = 4;

const int UA_REFERENCETYPEINDEX_HASCHILD = 5;

const int UA_REFERENCETYPEINDEX_ORGANIZES = 6;

const int UA_REFERENCETYPEINDEX_HASEVENTSOURCE = 7;

const int UA_REFERENCETYPEINDEX_HASMODELLINGRULE = 8;

const int UA_REFERENCETYPEINDEX_HASENCODING = 9;

const int UA_REFERENCETYPEINDEX_HASDESCRIPTION = 10;

const int UA_REFERENCETYPEINDEX_HASTYPEDEFINITION = 11;

const int UA_REFERENCETYPEINDEX_GENERATESEVENT = 12;

const int UA_REFERENCETYPEINDEX_HASPROPERTY = 13;

const int UA_REFERENCETYPEINDEX_HASCOMPONENT = 14;

const int UA_REFERENCETYPEINDEX_HASNOTIFIER = 15;

const int UA_REFERENCETYPEINDEX_HASORDEREDCOMPONENT = 16;

const int UA_REFERENCETYPEINDEX_HASINTERFACE = 17;

const int UA_REFERENCETYPESET_MAX = 128;
