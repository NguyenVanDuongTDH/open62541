// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> UA_atomic_xchg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> addr,
    ffi.Pointer<ffi.Void> newptr,
  ) {
    return _UA_atomic_xchg(
      addr,
      newptr,
    );
  }

  late final _UA_atomic_xchgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('UA_atomic_xchg');
  late final _UA_atomic_xchg = _UA_atomic_xchgPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> UA_atomic_cmpxchg(
    ffi.Pointer<ffi.Pointer<ffi.Void>> addr,
    ffi.Pointer<ffi.Void> expected,
    ffi.Pointer<ffi.Void> newptr,
  ) {
    return _UA_atomic_cmpxchg(
      addr,
      expected,
      newptr,
    );
  }

  late final _UA_atomic_cmpxchgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('UA_atomic_cmpxchg');
  late final _UA_atomic_cmpxchg = _UA_atomic_cmpxchgPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int UA_atomic_addUInt32(
    ffi.Pointer<ffi.Uint32> addr,
    int increase,
  ) {
    return _UA_atomic_addUInt32(
      addr,
      increase,
    );
  }

  late final _UA_atomic_addUInt32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('UA_atomic_addUInt32');
  late final _UA_atomic_addUInt32 = _UA_atomic_addUInt32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int UA_atomic_addSize(
    ffi.Pointer<ffi.Size> addr,
    int increase,
  ) {
    return _UA_atomic_addSize(
      addr,
      increase,
    );
  }

  late final _UA_atomic_addSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Size>, ffi.Size)>>(
      'UA_atomic_addSize');
  late final _UA_atomic_addSize = _UA_atomic_addSizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, int)>();

  int UA_atomic_subUInt32(
    ffi.Pointer<ffi.Uint32> addr,
    int decrease,
  ) {
    return _UA_atomic_subUInt32(
      addr,
      decrease,
    );
  }

  late final _UA_atomic_subUInt32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(
              ffi.Pointer<ffi.Uint32>, ffi.Uint32)>>('UA_atomic_subUInt32');
  late final _UA_atomic_subUInt32 = _UA_atomic_subUInt32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint32>, int)>();

  int UA_atomic_subSize(
    ffi.Pointer<ffi.Size> addr,
    int decrease,
  ) {
    return _UA_atomic_subSize(
      addr,
      decrease,
    );
  }

  late final _UA_atomic_subSizePtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Size>, ffi.Size)>>(
      'UA_atomic_subSize');
  late final _UA_atomic_subSize = _UA_atomic_subSizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, int)>();

  void UA_LOCK_INIT(
    ffi.Pointer<UA_Lock> lock,
  ) {
    return _UA_LOCK_INIT(
      lock,
    );
  }

  late final _UA_LOCK_INITPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Lock>)>>(
          'UA_LOCK_INIT');
  late final _UA_LOCK_INIT =
      _UA_LOCK_INITPtr.asFunction<void Function(ffi.Pointer<UA_Lock>)>();

  void UA_LOCK_DESTROY(
    ffi.Pointer<UA_Lock> lock,
  ) {
    return _UA_LOCK_DESTROY(
      lock,
    );
  }

  late final _UA_LOCK_DESTROYPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Lock>)>>(
          'UA_LOCK_DESTROY');
  late final _UA_LOCK_DESTROY =
      _UA_LOCK_DESTROYPtr.asFunction<void Function(ffi.Pointer<UA_Lock>)>();

  void UA_LOCK(
    ffi.Pointer<UA_Lock> lock,
  ) {
    return _UA_LOCK(
      lock,
    );
  }

  late final _UA_LOCKPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Lock>)>>(
          'UA_LOCK');
  late final _UA_LOCK =
      _UA_LOCKPtr.asFunction<void Function(ffi.Pointer<UA_Lock>)>();

  void UA_UNLOCK(
    ffi.Pointer<UA_Lock> lock,
  ) {
    return _UA_UNLOCK(
      lock,
    );
  }

  late final _UA_UNLOCKPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Lock>)>>(
          'UA_UNLOCK');
  late final _UA_UNLOCK =
      _UA_UNLOCKPtr.asFunction<void Function(ffi.Pointer<UA_Lock>)>();

  void UA_LOCK_ASSERT(
    ffi.Pointer<UA_Lock> lock,
    int num,
  ) {
    return _UA_LOCK_ASSERT(
      lock,
      num,
    );
  }

  late final _UA_LOCK_ASSERTPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Lock>, ffi.Int)>>(
      'UA_LOCK_ASSERT');
  late final _UA_LOCK_ASSERT =
      _UA_LOCK_ASSERTPtr.asFunction<void Function(ffi.Pointer<UA_Lock>, int)>();

  ffi.Pointer<ffi.Char> UA_StatusCode_name(
    int code,
  ) {
    return _UA_StatusCode_name(
      code,
    );
  }

  late final _UA_StatusCode_namePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(UA_StatusCode)>>(
      'UA_StatusCode_name');
  late final _UA_StatusCode_name =
      _UA_StatusCode_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool UA_StatusCode_isBad(
    int code,
  ) {
    return _UA_StatusCode_isBad(
      code,
    );
  }

  late final _UA_StatusCode_isBadPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isBad');
  late final _UA_StatusCode_isBad =
      _UA_StatusCode_isBadPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isUncertain(
    int code,
  ) {
    return _UA_StatusCode_isUncertain(
      code,
    );
  }

  late final _UA_StatusCode_isUncertainPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isUncertain');
  late final _UA_StatusCode_isUncertain =
      _UA_StatusCode_isUncertainPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isGood(
    int code,
  ) {
    return _UA_StatusCode_isGood(
      code,
    );
  }

  late final _UA_StatusCode_isGoodPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_StatusCode)>>(
          'UA_StatusCode_isGood');
  late final _UA_StatusCode_isGood =
      _UA_StatusCode_isGoodPtr.asFunction<bool Function(int)>();

  bool UA_StatusCode_isEqualTop(
    int s1,
    int s2,
  ) {
    return _UA_StatusCode_isEqualTop(
      s1,
      s2,
    );
  }

  late final _UA_StatusCode_isEqualTopPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(UA_StatusCode, UA_StatusCode)>>(
      'UA_StatusCode_isEqualTop');
  late final _UA_StatusCode_isEqualTop =
      _UA_StatusCode_isEqualTopPtr.asFunction<bool Function(int, int)>();

  UA_String UA_String_fromChars(
    ffi.Pointer<ffi.Char> src,
  ) {
    return _UA_String_fromChars(
      src,
    );
  }

  late final _UA_String_fromCharsPtr =
      _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>(
          'UA_String_fromChars');
  late final _UA_String_fromChars = _UA_String_fromCharsPtr.asFunction<
      UA_String Function(ffi.Pointer<ffi.Char>)>();

  bool UA_String_equal(
    ffi.Pointer<UA_String> s1,
    ffi.Pointer<UA_String> s2,
  ) {
    return _UA_String_equal(
      s1,
      s2,
    );
  }

  late final _UA_String_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>)>>('UA_String_equal');
  late final _UA_String_equal = _UA_String_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  late final ffi.Pointer<UA_String> _UA_STRING_NULL =
      _lookup<UA_String>('UA_STRING_NULL');

  UA_String get UA_STRING_NULL => _UA_STRING_NULL.ref;

  /// ``UA_STRING`` returns a string pointing to the original char-array.
  /// ``UA_STRING_ALLOC`` is shorthand for ``UA_String_fromChars`` and makes a copy
  /// of the char-array.
  UA_String UA_STRING(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_STRING(
      chars,
    );
  }

  late final _UA_STRINGPtr =
      _lookup<ffi.NativeFunction<UA_String Function(ffi.Pointer<ffi.Char>)>>(
          'UA_STRING');
  late final _UA_STRING =
      _UA_STRINGPtr.asFunction<UA_String Function(ffi.Pointer<ffi.Char>)>();

  int UA_DateTime_now() {
    return _UA_DateTime_now();
  }

  late final _UA_DateTime_nowPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function()>>('UA_DateTime_now');
  late final _UA_DateTime_now =
      _UA_DateTime_nowPtr.asFunction<int Function()>();

  int UA_DateTime_localTimeUtcOffset() {
    return _UA_DateTime_localTimeUtcOffset();
  }

  late final _UA_DateTime_localTimeUtcOffsetPtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function()>>(
          'UA_DateTime_localTimeUtcOffset');
  late final _UA_DateTime_localTimeUtcOffset =
      _UA_DateTime_localTimeUtcOffsetPtr.asFunction<int Function()>();

  int UA_DateTime_nowMonotonic() {
    return _UA_DateTime_nowMonotonic();
  }

  late final _UA_DateTime_nowMonotonicPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function()>>(
          'UA_DateTime_nowMonotonic');
  late final _UA_DateTime_nowMonotonic =
      _UA_DateTime_nowMonotonicPtr.asFunction<int Function()>();

  UA_DateTimeStruct UA_DateTime_toStruct(
    int t,
  ) {
    return _UA_DateTime_toStruct(
      t,
    );
  }

  late final _UA_DateTime_toStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTimeStruct Function(UA_DateTime)>>(
          'UA_DateTime_toStruct');
  late final _UA_DateTime_toStruct =
      _UA_DateTime_toStructPtr.asFunction<UA_DateTimeStruct Function(int)>();

  int UA_DateTime_fromStruct(
    UA_DateTimeStruct ts,
  ) {
    return _UA_DateTime_fromStruct(
      ts,
    );
  }

  late final _UA_DateTime_fromStructPtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_DateTimeStruct)>>(
          'UA_DateTime_fromStruct');
  late final _UA_DateTime_fromStruct =
      _UA_DateTime_fromStructPtr.asFunction<int Function(UA_DateTimeStruct)>();

  int UA_DateTime_toUnixTime(
    int date,
  ) {
    return _UA_DateTime_toUnixTime(
      date,
    );
  }

  late final _UA_DateTime_toUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_Int64 Function(UA_DateTime)>>(
          'UA_DateTime_toUnixTime');
  late final _UA_DateTime_toUnixTime =
      _UA_DateTime_toUnixTimePtr.asFunction<int Function(int)>();

  int UA_DateTime_fromUnixTime(
    int unixDate,
  ) {
    return _UA_DateTime_fromUnixTime(
      unixDate,
    );
  }

  late final _UA_DateTime_fromUnixTimePtr =
      _lookup<ffi.NativeFunction<UA_DateTime Function(UA_Int64)>>(
          'UA_DateTime_fromUnixTime');
  late final _UA_DateTime_fromUnixTime =
      _UA_DateTime_fromUnixTimePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<UA_Guid> _UA_GUID_NULL =
      _lookup<UA_Guid>('UA_GUID_NULL');

  UA_Guid get UA_GUID_NULL => _UA_GUID_NULL.ref;

  bool UA_Guid_equal(
    ffi.Pointer<UA_Guid> g1,
    ffi.Pointer<UA_Guid> g2,
  ) {
    return _UA_Guid_equal(
      g1,
      g2,
    );
  }

  late final _UA_Guid_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_equal');
  late final _UA_Guid_equal = _UA_Guid_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  int UA_Guid_parse(
    ffi.Pointer<UA_Guid> guid,
    UA_String str,
  ) {
    return _UA_Guid_parse(
      guid,
      str,
    );
  }

  late final _UA_Guid_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Guid>, UA_String)>>('UA_Guid_parse');
  late final _UA_Guid_parse = _UA_Guid_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>, UA_String)>();

  UA_Guid UA_GUID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_GUID(
      chars,
    );
  }

  late final _UA_GUIDPtr =
      _lookup<ffi.NativeFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>>(
          'UA_GUID');
  late final _UA_GUID =
      _UA_GUIDPtr.asFunction<UA_Guid Function(ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<UA_ByteString> _UA_BYTESTRING_NULL =
      _lookup<UA_ByteString>('UA_BYTESTRING_NULL');

  UA_ByteString get UA_BYTESTRING_NULL => _UA_BYTESTRING_NULL.ref;

  int UA_ByteString_allocBuffer(
    ffi.Pointer<UA_ByteString> bs,
    int length,
  ) {
    return _UA_ByteString_allocBuffer(
      bs,
      length,
    );
  }

  late final _UA_ByteString_allocBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Size)>>('UA_ByteString_allocBuffer');
  late final _UA_ByteString_allocBuffer = _UA_ByteString_allocBufferPtr
      .asFunction<int Function(ffi.Pointer<UA_ByteString>, int)>();

  int UA_ByteString_toBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ByteString_toBase64(
      bs,
      output,
    );
  }

  late final _UA_ByteString_toBase64Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_String>)>>('UA_ByteString_toBase64');
  late final _UA_ByteString_toBase64 = _UA_ByteString_toBase64Ptr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  int UA_ByteString_fromBase64(
    ffi.Pointer<UA_ByteString> bs,
    ffi.Pointer<UA_String> input,
  ) {
    return _UA_ByteString_fromBase64(
      bs,
      input,
    );
  }

  late final _UA_ByteString_fromBase64Ptr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_String>)>>('UA_ByteString_fromBase64');
  late final _UA_ByteString_fromBase64 =
      _UA_ByteString_fromBase64Ptr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_String>)>();

  UA_ByteString UA_BYTESTRING(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_BYTESTRING(
      chars,
    );
  }

  late final _UA_BYTESTRINGPtr = _lookup<
          ffi.NativeFunction<UA_ByteString Function(ffi.Pointer<ffi.Char>)>>(
      'UA_BYTESTRING');
  late final _UA_BYTESTRING = _UA_BYTESTRINGPtr.asFunction<
      UA_ByteString Function(ffi.Pointer<ffi.Char>)>();

  UA_ByteString UA_BYTESTRING_ALLOC(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_BYTESTRING_ALLOC(
      chars,
    );
  }

  late final _UA_BYTESTRING_ALLOCPtr = _lookup<
          ffi.NativeFunction<UA_ByteString Function(ffi.Pointer<ffi.Char>)>>(
      'UA_BYTESTRING_ALLOC');
  late final _UA_BYTESTRING_ALLOC = _UA_BYTESTRING_ALLOCPtr.asFunction<
      UA_ByteString Function(ffi.Pointer<ffi.Char>)>();

  bool UA_ByteString_equal(
    ffi.Pointer<UA_ByteString> string1,
    ffi.Pointer<UA_ByteString> string2,
  ) {
    return _UA_ByteString_equal(
      string1,
      string2,
    );
  }

  late final _UA_ByteString_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ByteString_equal');
  late final _UA_ByteString_equal = _UA_ByteString_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  int UA_ByteString_hash(
    int initialHashValue,
    ffi.Pointer<UA_Byte> data,
    int size,
  ) {
    return _UA_ByteString_hash(
      initialHashValue,
      data,
      size,
    );
  }

  late final _UA_ByteString_hashPtr = _lookup<
      ffi.NativeFunction<
          UA_UInt32 Function(UA_UInt32, ffi.Pointer<UA_Byte>,
              ffi.Size)>>('UA_ByteString_hash');
  late final _UA_ByteString_hash = _UA_ByteString_hashPtr.asFunction<
      int Function(int, ffi.Pointer<UA_Byte>, int)>();

  late final ffi.Pointer<UA_NodeId> _UA_NODEID_NULL =
      _lookup<UA_NodeId>('UA_NODEID_NULL');

  UA_NodeId get UA_NODEID_NULL => _UA_NODEID_NULL.ref;

  bool UA_NodeId_isNull(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_isNull(
      p,
    );
  }

  late final _UA_NodeId_isNullPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_isNull');
  late final _UA_NodeId_isNull =
      _UA_NodeId_isNullPtr.asFunction<bool Function(ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_print(
    ffi.Pointer<UA_NodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_NodeId_print(
      id,
      output,
    );
  }

  late final _UA_NodeId_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_String>)>>('UA_NodeId_print');
  late final _UA_NodeId_print = _UA_NodeId_printPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_String>)>();

  int UA_NodeId_parse(
    ffi.Pointer<UA_NodeId> id,
    UA_String str,
  ) {
    return _UA_NodeId_parse(
      id,
      str,
    );
  }

  late final _UA_NodeId_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NodeId>, UA_String)>>('UA_NodeId_parse');
  late final _UA_NodeId_parse = _UA_NodeId_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, UA_String)>();

  UA_NodeId UA_NODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID(
      chars,
    );
  }

  late final _UA_NODEIDPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>>(
          'UA_NODEID');
  late final _UA_NODEID =
      _UA_NODEIDPtr.asFunction<UA_NodeId Function(ffi.Pointer<ffi.Char>)>();

  /// The following functions are shorthand for creating NodeIds.
  UA_NodeId UA_NODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_NODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_NODEID_NUMERICPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_UInt32)>>(
          'UA_NODEID_NUMERIC');
  late final _UA_NODEID_NUMERIC =
      _UA_NODEID_NUMERICPtr.asFunction<UA_NodeId Function(int, int)>();

  UA_NodeId UA_NODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING');
  late final _UA_NODEID_STRING = _UA_NODEID_STRINGPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_STRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_STRING_ALLOC');
  late final _UA_NODEID_STRING_ALLOC = _UA_NODEID_STRING_ALLOCPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_NODEID_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_NODEID_GUIDPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_UInt16, UA_Guid)>>(
          'UA_NODEID_GUID');
  late final _UA_NODEID_GUID =
      _UA_NODEID_GUIDPtr.asFunction<UA_NodeId Function(int, UA_Guid)>();

  UA_NodeId UA_NODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING');
  late final _UA_NODEID_BYTESTRING = _UA_NODEID_BYTESTRINGPtr.asFunction<
      UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_NodeId UA_NODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_NODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_NODEID_BYTESTRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_NodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_NODEID_BYTESTRING_ALLOC');
  late final _UA_NODEID_BYTESTRING_ALLOC = _UA_NODEID_BYTESTRING_ALLOCPtr
      .asFunction<UA_NodeId Function(int, ffi.Pointer<ffi.Char>)>();

  int UA_NodeId_order(
    ffi.Pointer<UA_NodeId> n1,
    ffi.Pointer<UA_NodeId> n2,
  ) {
    return _UA_NodeId_order(
      n1,
      n2,
    );
  }

  late final _UA_NodeId_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_order');
  late final _UA_NodeId_order = _UA_NodeId_orderPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  bool UA_NodeId_equal(
    ffi.Pointer<UA_NodeId> n1,
    ffi.Pointer<UA_NodeId> n2,
  ) {
    return _UA_NodeId_equal(
      n1,
      n2,
    );
  }

  late final _UA_NodeId_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_equal');
  late final _UA_NodeId_equal = _UA_NodeId_equalPtr.asFunction<
      bool Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_hash(
    ffi.Pointer<UA_NodeId> n,
  ) {
    return _UA_NodeId_hash(
      n,
    );
  }

  late final _UA_NodeId_hashPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_hash');
  late final _UA_NodeId_hash =
      _UA_NodeId_hashPtr.asFunction<int Function(ffi.Pointer<UA_NodeId>)>();

  late final ffi.Pointer<UA_ExpandedNodeId> _UA_EXPANDEDNODEID_NULL =
      _lookup<UA_ExpandedNodeId>('UA_EXPANDEDNODEID_NULL');

  UA_ExpandedNodeId get UA_EXPANDEDNODEID_NULL => _UA_EXPANDEDNODEID_NULL.ref;

  int UA_ExpandedNodeId_print(
    ffi.Pointer<UA_ExpandedNodeId> id,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_ExpandedNodeId_print(
      id,
      output,
    );
  }

  late final _UA_ExpandedNodeId_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_String>)>>('UA_ExpandedNodeId_print');
  late final _UA_ExpandedNodeId_print = _UA_ExpandedNodeId_printPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_String>)>();

  int UA_ExpandedNodeId_parse(
    ffi.Pointer<UA_ExpandedNodeId> id,
    UA_String str,
  ) {
    return _UA_ExpandedNodeId_parse(
      id,
      str,
    );
  }

  late final _UA_ExpandedNodeId_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              UA_String)>>('UA_ExpandedNodeId_parse');
  late final _UA_ExpandedNodeId_parse = _UA_ExpandedNodeId_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>, UA_String)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID(
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID(
      chars,
    );
  }

  late final _UA_EXPANDEDNODEIDPtr = _lookup<
          ffi
          .NativeFunction<UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>>(
      'UA_EXPANDEDNODEID');
  late final _UA_EXPANDEDNODEID = _UA_EXPANDEDNODEIDPtr.asFunction<
      UA_ExpandedNodeId Function(ffi.Pointer<ffi.Char>)>();

  /// The following functions are shorthand for creating ExpandedNodeIds.
  UA_ExpandedNodeId UA_EXPANDEDNODEID_NUMERIC(
    int nsIndex,
    int identifier,
  ) {
    return _UA_EXPANDEDNODEID_NUMERIC(
      nsIndex,
      identifier,
    );
  }

  late final _UA_EXPANDEDNODEID_NUMERICPtr = _lookup<
          ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_UInt32)>>(
      'UA_EXPANDEDNODEID_NUMERIC');
  late final _UA_EXPANDEDNODEID_NUMERIC = _UA_EXPANDEDNODEID_NUMERICPtr
      .asFunction<UA_ExpandedNodeId Function(int, int)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_STRING');
  late final _UA_EXPANDEDNODEID_STRING = _UA_EXPANDEDNODEID_STRINGPtr
      .asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_STRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_STRING_ALLOC');
  late final _UA_EXPANDEDNODEID_STRING_ALLOC =
      _UA_EXPANDEDNODEID_STRING_ALLOCPtr.asFunction<
          UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_STRING_GUID(
    int nsIndex,
    UA_Guid guid,
  ) {
    return _UA_EXPANDEDNODEID_STRING_GUID(
      nsIndex,
      guid,
    );
  }

  late final _UA_EXPANDEDNODEID_STRING_GUIDPtr = _lookup<
          ffi.NativeFunction<UA_ExpandedNodeId Function(UA_UInt16, UA_Guid)>>(
      'UA_EXPANDEDNODEID_STRING_GUID');
  late final _UA_EXPANDEDNODEID_STRING_GUID = _UA_EXPANDEDNODEID_STRING_GUIDPtr
      .asFunction<UA_ExpandedNodeId Function(int, UA_Guid)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRINGPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_BYTESTRING');
  late final _UA_EXPANDEDNODEID_BYTESTRING = _UA_EXPANDEDNODEID_BYTESTRINGPtr
      .asFunction<UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_EXPANDEDNODEID_BYTESTRING_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_ExpandedNodeId Function(UA_UInt16,
              ffi.Pointer<ffi.Char>)>>('UA_EXPANDEDNODEID_BYTESTRING_ALLOC');
  late final _UA_EXPANDEDNODEID_BYTESTRING_ALLOC =
      _UA_EXPANDEDNODEID_BYTESTRING_ALLOCPtr.asFunction<
          UA_ExpandedNodeId Function(int, ffi.Pointer<ffi.Char>)>();

  UA_ExpandedNodeId UA_EXPANDEDNODEID_NODEID(
    UA_NodeId nodeId,
  ) {
    return _UA_EXPANDEDNODEID_NODEID(
      nodeId,
    );
  }

  late final _UA_EXPANDEDNODEID_NODEIDPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodeId)>>(
          'UA_EXPANDEDNODEID_NODEID');
  late final _UA_EXPANDEDNODEID_NODEID = _UA_EXPANDEDNODEID_NODEIDPtr
      .asFunction<UA_ExpandedNodeId Function(UA_NodeId)>();

  bool UA_ExpandedNodeId_isLocal(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_isLocal(
      n,
    );
  }

  late final _UA_ExpandedNodeId_isLocalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_isLocal');
  late final _UA_ExpandedNodeId_isLocal = _UA_ExpandedNodeId_isLocalPtr
      .asFunction<bool Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_order(
    ffi.Pointer<UA_ExpandedNodeId> n1,
    ffi.Pointer<UA_ExpandedNodeId> n2,
  ) {
    return _UA_ExpandedNodeId_order(
      n1,
      n2,
    );
  }

  late final _UA_ExpandedNodeId_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_order');
  late final _UA_ExpandedNodeId_order = _UA_ExpandedNodeId_orderPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_ExpandedNodeId_equal(
    ffi.Pointer<UA_ExpandedNodeId> n1,
    ffi.Pointer<UA_ExpandedNodeId> n2,
  ) {
    return _UA_ExpandedNodeId_equal(
      n1,
      n2,
    );
  }

  late final _UA_ExpandedNodeId_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_equal');
  late final _UA_ExpandedNodeId_equal = _UA_ExpandedNodeId_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_hash(
    ffi.Pointer<UA_ExpandedNodeId> n,
  ) {
    return _UA_ExpandedNodeId_hash(
      n,
    );
  }

  late final _UA_ExpandedNodeId_hashPtr = _lookup<
          ffi
          .NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_hash');
  late final _UA_ExpandedNodeId_hash = _UA_ExpandedNodeId_hashPtr.asFunction<
      int Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  bool UA_QualifiedName_isNull(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_isNull(
      q,
    );
  }

  late final _UA_QualifiedName_isNullPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_isNull');
  late final _UA_QualifiedName_isNull = _UA_QualifiedName_isNullPtr.asFunction<
      bool Function(ffi.Pointer<UA_QualifiedName>)>();

  int UA_QualifiedName_hash(
    ffi.Pointer<UA_QualifiedName> q,
  ) {
    return _UA_QualifiedName_hash(
      q,
    );
  }

  late final _UA_QualifiedName_hashPtr = _lookup<
          ffi
          .NativeFunction<UA_UInt32 Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_hash');
  late final _UA_QualifiedName_hash = _UA_QualifiedName_hashPtr.asFunction<
      int Function(ffi.Pointer<UA_QualifiedName>)>();

  UA_QualifiedName UA_QUALIFIEDNAME(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAMEPtr = _lookup<
      ffi.NativeFunction<
          UA_QualifiedName Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_QUALIFIEDNAME');
  late final _UA_QUALIFIEDNAME = _UA_QUALIFIEDNAMEPtr.asFunction<
      UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  UA_QualifiedName UA_QUALIFIEDNAME_ALLOC(
    int nsIndex,
    ffi.Pointer<ffi.Char> chars,
  ) {
    return _UA_QUALIFIEDNAME_ALLOC(
      nsIndex,
      chars,
    );
  }

  late final _UA_QUALIFIEDNAME_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_QualifiedName Function(
              UA_UInt16, ffi.Pointer<ffi.Char>)>>('UA_QUALIFIEDNAME_ALLOC');
  late final _UA_QUALIFIEDNAME_ALLOC = _UA_QUALIFIEDNAME_ALLOCPtr.asFunction<
      UA_QualifiedName Function(int, ffi.Pointer<ffi.Char>)>();

  bool UA_QualifiedName_equal(
    ffi.Pointer<UA_QualifiedName> qn1,
    ffi.Pointer<UA_QualifiedName> qn2,
  ) {
    return _UA_QualifiedName_equal(
      qn1,
      qn2,
    );
  }

  late final _UA_QualifiedName_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_equal');
  late final _UA_QualifiedName_equal = _UA_QualifiedName_equalPtr.asFunction<
      bool Function(
          ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXTPtr = _lookup<
      ffi.NativeFunction<
          UA_LocalizedText Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_LOCALIZEDTEXT');
  late final _UA_LOCALIZEDTEXT = _UA_LOCALIZEDTEXTPtr.asFunction<
      UA_LocalizedText Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  UA_LocalizedText UA_LOCALIZEDTEXT_ALLOC(
    ffi.Pointer<ffi.Char> locale,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UA_LOCALIZEDTEXT_ALLOC(
      locale,
      text,
    );
  }

  late final _UA_LOCALIZEDTEXT_ALLOCPtr = _lookup<
      ffi.NativeFunction<
          UA_LocalizedText Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_LOCALIZEDTEXT_ALLOC');
  late final _UA_LOCALIZEDTEXT_ALLOC = _UA_LOCALIZEDTEXT_ALLOCPtr.asFunction<
      UA_LocalizedText Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_NumericRange_parse(
    ffi.Pointer<UA_NumericRange> range,
    UA_String str,
  ) {
    return _UA_NumericRange_parse(
      range,
      str,
    );
  }

  late final _UA_NumericRange_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NumericRange>,
              UA_String)>>('UA_NumericRange_parse');
  late final _UA_NumericRange_parse = _UA_NumericRange_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_NumericRange>, UA_String)>();

  UA_NumericRange UA_NUMERICRANGE(
    ffi.Pointer<ffi.Char> s,
  ) {
    return _UA_NUMERICRANGE(
      s,
    );
  }

  late final _UA_NUMERICRANGEPtr = _lookup<
          ffi.NativeFunction<UA_NumericRange Function(ffi.Pointer<ffi.Char>)>>(
      'UA_NUMERICRANGE');
  late final _UA_NUMERICRANGE = _UA_NUMERICRANGEPtr.asFunction<
      UA_NumericRange Function(ffi.Pointer<ffi.Char>)>();

  bool UA_Variant_isEmpty(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isEmpty(
      v,
    );
  }

  late final _UA_Variant_isEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_isEmpty');
  late final _UA_Variant_isEmpty = _UA_Variant_isEmptyPtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_isScalar(
    ffi.Pointer<UA_Variant> v,
  ) {
    return _UA_Variant_isScalar(
      v,
    );
  }

  late final _UA_Variant_isScalarPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_isScalar');
  late final _UA_Variant_isScalar = _UA_Variant_isScalarPtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>)>();

  bool UA_Variant_hasScalarType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasScalarType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasScalarTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_hasScalarType');
  late final _UA_Variant_hasScalarType =
      _UA_Variant_hasScalarTypePtr.asFunction<
          bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  bool UA_Variant_hasArrayType(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_hasArrayType(
      v,
      type,
    );
  }

  late final _UA_Variant_hasArrayTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_hasArrayType');
  late final _UA_Variant_hasArrayType = _UA_Variant_hasArrayTypePtr.asFunction<
      bool Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setScalar(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalar(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setScalar');
  late final _UA_Variant_setScalar = _UA_Variant_setScalarPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setScalarCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setScalarCopy(
      v,
      p,
      type,
    );
  }

  late final _UA_Variant_setScalarCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Variant_setScalarCopy');
  late final _UA_Variant_setScalarCopy =
      _UA_Variant_setScalarCopyPtr.asFunction<
          int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  void UA_Variant_setArray(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArray(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Variant_setArray');
  late final _UA_Variant_setArray = _UA_Variant_setArrayPtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_setArrayCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Variant_setArrayCopy(
      v,
      array,
      arraySize,
      type,
    );
  }

  late final _UA_Variant_setArrayCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Variant_setArrayCopy');
  late final _UA_Variant_setArrayCopy = _UA_Variant_setArrayCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<UA_DataType>)>();

  int UA_Variant_copyRange(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
    UA_NumericRange range,
  ) {
    return _UA_Variant_copyRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_Variant_copyRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_Variant>,
              UA_NumericRange)>>('UA_Variant_copyRange');
  late final _UA_Variant_copyRange = _UA_Variant_copyRangePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>, UA_NumericRange)>();

  int UA_Variant_setRange(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRange(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, UA_NumericRange)>>('UA_Variant_setRange');
  late final _UA_Variant_setRange = _UA_Variant_setRangePtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          UA_NumericRange)>();

  int UA_Variant_setRangeCopy(
    ffi.Pointer<UA_Variant> v,
    ffi.Pointer<ffi.Void> array,
    int arraySize,
    UA_NumericRange range,
  ) {
    return _UA_Variant_setRangeCopy(
      v,
      array,
      arraySize,
      range,
    );
  }

  late final _UA_Variant_setRangeCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>,
              ffi.Size, UA_NumericRange)>>('UA_Variant_setRangeCopy');
  late final _UA_Variant_setRangeCopy = _UA_Variant_setRangeCopyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Void>, int,
          UA_NumericRange)>();

  void UA_ExtensionObject_setValue(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValue(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValue');
  late final _UA_ExtensionObject_setValue =
      _UA_ExtensionObject_setValuePtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  void UA_ExtensionObject_setValueNoDelete(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueNoDelete(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueNoDeletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ExtensionObject>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_ExtensionObject_setValueNoDelete');
  late final _UA_ExtensionObject_setValueNoDelete =
      _UA_ExtensionObject_setValueNoDeletePtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  int UA_ExtensionObject_setValueCopy(
    ffi.Pointer<UA_ExtensionObject> eo,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_ExtensionObject_setValueCopy(
      eo,
      p,
      type,
    );
  }

  late final _UA_ExtensionObject_setValueCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_ExtensionObject_setValueCopy');
  late final _UA_ExtensionObject_setValueCopy =
      _UA_ExtensionObject_setValueCopyPtr.asFunction<
          int Function(ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  int UA_DataValue_copyVariantRange(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
    UA_NumericRange range,
  ) {
    return _UA_DataValue_copyVariantRange(
      src,
      dst,
      range,
    );
  }

  late final _UA_DataValue_copyVariantRangePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataValue>,
              ffi.Pointer<UA_DataValue>,
              UA_NumericRange)>>('UA_DataValue_copyVariantRange');
  late final _UA_DataValue_copyVariantRange =
      _UA_DataValue_copyVariantRangePtr.asFunction<
          int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>,
              UA_NumericRange)>();

  bool UA_DataType_getStructMember(
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Char> memberName,
    ffi.Pointer<ffi.Size> outOffset,
    ffi.Pointer<ffi.Pointer<UA_DataType>> outMemberType,
    ffi.Pointer<ffi.Bool> outIsArray,
  ) {
    return _UA_DataType_getStructMember(
      type,
      memberName,
      outOffset,
      outMemberType,
      outIsArray,
    );
  }

  late final _UA_DataType_getStructMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_DataType>>,
              ffi.Pointer<ffi.Bool>)>>('UA_DataType_getStructMember');
  late final _UA_DataType_getStructMember =
      _UA_DataType_getStructMemberPtr.asFunction<
          bool Function(
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_DataType>>,
              ffi.Pointer<ffi.Bool>)>();

  bool UA_DataType_isNumeric(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_DataType_isNumeric(
      type,
    );
  }

  late final _UA_DataType_isNumericPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_DataType>)>>(
          'UA_DataType_isNumeric');
  late final _UA_DataType_isNumeric = _UA_DataType_isNumericPtr.asFunction<
      bool Function(ffi.Pointer<UA_DataType>)>();

  int UA_DataType_getPrecedence(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_DataType_getPrecedence(
      type,
    );
  }

  late final _UA_DataType_getPrecedencePtr =
      _lookup<ffi.NativeFunction<UA_Int16 Function(ffi.Pointer<UA_DataType>)>>(
          'UA_DataType_getPrecedence');
  late final _UA_DataType_getPrecedence = _UA_DataType_getPrecedencePtr
      .asFunction<int Function(ffi.Pointer<UA_DataType>)>();

  /// Builtin data types can be accessed as UA_TYPES[UA_TYPES_XXX], where XXX is
  /// the name of the data type. If only the NodeId of a type is known, use the
  /// following method to retrieve the data type description.
  ffi.Pointer<UA_DataType> UA_findDataType(
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_findDataType(
      typeId,
    );
  }

  late final _UA_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(
              ffi.Pointer<UA_NodeId>)>>('UA_findDataType');
  late final _UA_findDataType = _UA_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<ffi.Void> UA_new(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_new(
      type,
    );
  }

  late final _UA_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>>('UA_new');
  late final _UA_new = _UA_newPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_DataType>)>();

  void UA_init(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_init(
      p,
      type,
    );
  }

  late final _UA_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_init');
  late final _UA_init = _UA_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_copy(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_copy(
      src,
      dst,
      type,
    );
  }

  late final _UA_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_copy');
  late final _UA_copy = _UA_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  void UA_clear(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_clear(
      p,
      type,
    );
  }

  late final _UA_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_clear');
  late final _UA_clear = _UA_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_delete(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_delete(
      p,
      type,
    );
  }

  late final _UA_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>('UA_delete');
  late final _UA_delete = _UA_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_print(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_String> output,
  ) {
    return _UA_print(
      p,
      type,
      output,
    );
  }

  late final _UA_printPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>, ffi.Pointer<UA_String>)>>('UA_print');
  late final _UA_print = _UA_printPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_String>)>();

  int UA_order(
    ffi.Pointer<ffi.Void> p1,
    ffi.Pointer<ffi.Void> p2,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_order(
      p1,
      p2,
      type,
    );
  }

  late final _UA_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_order');
  late final _UA_order = _UA_orderPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  /// Encoding/Decoding
  /// ^^^^^^^^^^^^^^^^^^
  /// Encoding and decoding routines for the available formats. For all formats
  /// the _calcSize, _encode and _decode methods are provided.
  int UA_calcSizeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_calcSizeBinary(
      p,
      type,
    );
  }

  late final _UA_calcSizeBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_calcSizeBinary');
  late final _UA_calcSizeBinary = _UA_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_encodeBinary(
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_ByteString> outBuf,
  ) {
    return _UA_encodeBinary(
      p,
      type,
      outBuf,
    );
  }

  late final _UA_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_ByteString>)>>('UA_encodeBinary');
  late final _UA_encodeBinary = _UA_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_ByteString>)>();

  int UA_decodeBinary(
    ffi.Pointer<UA_ByteString> inBuf,
    ffi.Pointer<ffi.Void> p,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_DecodeBinaryOptions> options,
  ) {
    return _UA_decodeBinary(
      inBuf,
      p,
      type,
      options,
    );
  }

  late final _UA_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_DecodeBinaryOptions>)>>('UA_decodeBinary');
  late final _UA_decodeBinary = _UA_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>, ffi.Pointer<UA_DecodeBinaryOptions>)>();

  ffi.Pointer<ffi.Void> UA_Array_new(
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_new(
      size,
      type,
    );
  }

  late final _UA_Array_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<UA_DataType>)>>('UA_Array_new');
  late final _UA_Array_new = _UA_Array_newPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_copy(
    ffi.Pointer<ffi.Void> src,
    int size,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dst,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_copy(
      src,
      size,
      dst,
      type,
    );
  }

  late final _UA_Array_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_copy');
  late final _UA_Array_copy = _UA_Array_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<UA_DataType>)>();

  int UA_Array_resize(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    int newSize,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_resize(
      p,
      size,
      newSize,
      type,
    );
  }

  late final _UA_Array_resizePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Array_resize');
  late final _UA_Array_resize = _UA_Array_resizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<UA_DataType>)>();

  int UA_Array_append(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_append(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_append');
  late final _UA_Array_append = _UA_Array_appendPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Array_appendCopy(
    ffi.Pointer<ffi.Pointer<ffi.Void>> p,
    ffi.Pointer<ffi.Size> size,
    ffi.Pointer<ffi.Void> newElem,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_appendCopy(
      p,
      size,
      newElem,
      type,
    );
  }

  late final _UA_Array_appendCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Array_appendCopy');
  late final _UA_Array_appendCopy = _UA_Array_appendCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  void UA_Array_delete(
    ffi.Pointer<ffi.Void> p,
    int size,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Array_delete(
      p,
      size,
      type,
    );
  }

  late final _UA_Array_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<UA_DataType>)>>('UA_Array_delete');
  late final _UA_Array_delete = _UA_Array_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_DataType>)>();

  /// Random Number Generator
  /// -----------------------
  /// If UA_MULTITHREADING is defined, then the seed is stored in thread
  /// local storage. The seed is initialized for every thread in the
  /// server/client.
  void UA_random_seed(
    int seed,
  ) {
    return _UA_random_seed(
      seed,
    );
  }

  late final _UA_random_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UA_UInt64)>>(
          'UA_random_seed');
  late final _UA_random_seed =
      _UA_random_seedPtr.asFunction<void Function(int)>();

  int UA_UInt32_random() {
    return _UA_UInt32_random();
  }

  late final _UA_UInt32_randomPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function()>>('UA_UInt32_random');
  late final _UA_UInt32_random =
      _UA_UInt32_randomPtr.asFunction<int Function()>();

  UA_Guid UA_Guid_random() {
    return _UA_Guid_random();
  }

  late final _UA_Guid_randomPtr =
      _lookup<ffi.NativeFunction<UA_Guid Function()>>('UA_Guid_random');
  late final _UA_Guid_random =
      _UA_Guid_randomPtr.asFunction<UA_Guid Function()>();

  late final ffi.Pointer<ffi.Pointer<UA_DataType>> _UA_TYPES =
      _lookup<ffi.Pointer<UA_DataType>>('UA_TYPES');

  ffi.Pointer<UA_DataType> get UA_TYPES => _UA_TYPES.value;

  set UA_TYPES(ffi.Pointer<UA_DataType> value) => _UA_TYPES.value = value;

  void UA_Boolean_init(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_init(
      p,
    );
  }

  late final _UA_Boolean_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_init');
  late final _UA_Boolean_init =
      _UA_Boolean_initPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  ffi.Pointer<ffi.Bool> UA_Boolean_new() {
    return _UA_Boolean_new();
  }

  late final _UA_Boolean_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function()>>(
          'UA_Boolean_new');
  late final _UA_Boolean_new =
      _UA_Boolean_newPtr.asFunction<ffi.Pointer<ffi.Bool> Function()>();

  int UA_Boolean_copy(
    ffi.Pointer<ffi.Bool> src,
    ffi.Pointer<ffi.Bool> dst,
  ) {
    return _UA_Boolean_copy(
      src,
      dst,
    );
  }

  late final _UA_Boolean_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Bool>)>>('UA_Boolean_copy');
  late final _UA_Boolean_copy = _UA_Boolean_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_deleteMembers(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_deleteMembers(
      p,
    );
  }

  late final _UA_Boolean_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_deleteMembers');
  late final _UA_Boolean_deleteMembers = _UA_Boolean_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_clear(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_clear(
      p,
    );
  }

  late final _UA_Boolean_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_clear');
  late final _UA_Boolean_clear =
      _UA_Boolean_clearPtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_Boolean_delete(
    ffi.Pointer<ffi.Bool> p,
  ) {
    return _UA_Boolean_delete(
      p,
    );
  }

  late final _UA_Boolean_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_delete');
  late final _UA_Boolean_delete =
      _UA_Boolean_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Bool>)>();

  void UA_SByte_init(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_init(
      p,
    );
  }

  late final _UA_SByte_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_init');
  late final _UA_SByte_init =
      _UA_SByte_initPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  ffi.Pointer<UA_SByte> UA_SByte_new() {
    return _UA_SByte_new();
  }

  late final _UA_SByte_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SByte> Function()>>(
          'UA_SByte_new');
  late final _UA_SByte_new =
      _UA_SByte_newPtr.asFunction<ffi.Pointer<UA_SByte> Function()>();

  int UA_SByte_copy(
    ffi.Pointer<UA_SByte> src,
    ffi.Pointer<UA_SByte> dst,
  ) {
    return _UA_SByte_copy(
      src,
      dst,
    );
  }

  late final _UA_SByte_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>>('UA_SByte_copy');
  late final _UA_SByte_copy = _UA_SByte_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_SByte>, ffi.Pointer<UA_SByte>)>();

  void UA_SByte_deleteMembers(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_deleteMembers(
      p,
    );
  }

  late final _UA_SByte_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_deleteMembers');
  late final _UA_SByte_deleteMembers = _UA_SByte_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_SByte>)>();

  void UA_SByte_clear(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_clear(
      p,
    );
  }

  late final _UA_SByte_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_clear');
  late final _UA_SByte_clear =
      _UA_SByte_clearPtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  void UA_SByte_delete(
    ffi.Pointer<UA_SByte> p,
  ) {
    return _UA_SByte_delete(
      p,
    );
  }

  late final _UA_SByte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_delete');
  late final _UA_SByte_delete =
      _UA_SByte_deletePtr.asFunction<void Function(ffi.Pointer<UA_SByte>)>();

  void UA_Byte_init(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_init(
      p,
    );
  }

  late final _UA_Byte_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_init');
  late final _UA_Byte_init =
      _UA_Byte_initPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  ffi.Pointer<UA_Byte> UA_Byte_new() {
    return _UA_Byte_new();
  }

  late final _UA_Byte_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Byte> Function()>>(
          'UA_Byte_new');
  late final _UA_Byte_new =
      _UA_Byte_newPtr.asFunction<ffi.Pointer<UA_Byte> Function()>();

  int UA_Byte_copy(
    ffi.Pointer<UA_Byte> src,
    ffi.Pointer<UA_Byte> dst,
  ) {
    return _UA_Byte_copy(
      src,
      dst,
    );
  }

  late final _UA_Byte_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>>('UA_Byte_copy');
  late final _UA_Byte_copy = _UA_Byte_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, ffi.Pointer<UA_Byte>)>();

  void UA_Byte_deleteMembers(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_deleteMembers(
      p,
    );
  }

  late final _UA_Byte_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_deleteMembers');
  late final _UA_Byte_deleteMembers = _UA_Byte_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Byte_clear(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_clear(
      p,
    );
  }

  late final _UA_Byte_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_clear');
  late final _UA_Byte_clear =
      _UA_Byte_clearPtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Byte_delete(
    ffi.Pointer<UA_Byte> p,
  ) {
    return _UA_Byte_delete(
      p,
    );
  }

  late final _UA_Byte_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_delete');
  late final _UA_Byte_delete =
      _UA_Byte_deletePtr.asFunction<void Function(ffi.Pointer<UA_Byte>)>();

  void UA_Int16_init(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_init(
      p,
    );
  }

  late final _UA_Int16_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_init');
  late final _UA_Int16_init =
      _UA_Int16_initPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  ffi.Pointer<UA_Int16> UA_Int16_new() {
    return _UA_Int16_new();
  }

  late final _UA_Int16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int16> Function()>>(
          'UA_Int16_new');
  late final _UA_Int16_new =
      _UA_Int16_newPtr.asFunction<ffi.Pointer<UA_Int16> Function()>();

  int UA_Int16_copy(
    ffi.Pointer<UA_Int16> src,
    ffi.Pointer<UA_Int16> dst,
  ) {
    return _UA_Int16_copy(
      src,
      dst,
    );
  }

  late final _UA_Int16_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>>('UA_Int16_copy');
  late final _UA_Int16_copy = _UA_Int16_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int16>, ffi.Pointer<UA_Int16>)>();

  void UA_Int16_deleteMembers(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_deleteMembers(
      p,
    );
  }

  late final _UA_Int16_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_deleteMembers');
  late final _UA_Int16_deleteMembers = _UA_Int16_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int16>)>();

  void UA_Int16_clear(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_clear(
      p,
    );
  }

  late final _UA_Int16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_clear');
  late final _UA_Int16_clear =
      _UA_Int16_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  void UA_Int16_delete(
    ffi.Pointer<UA_Int16> p,
  ) {
    return _UA_Int16_delete(
      p,
    );
  }

  late final _UA_Int16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_delete');
  late final _UA_Int16_delete =
      _UA_Int16_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int16>)>();

  void UA_UInt16_init(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_init(
      p,
    );
  }

  late final _UA_UInt16_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_init');
  late final _UA_UInt16_init =
      _UA_UInt16_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  ffi.Pointer<UA_UInt16> UA_UInt16_new() {
    return _UA_UInt16_new();
  }

  late final _UA_UInt16_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt16> Function()>>(
          'UA_UInt16_new');
  late final _UA_UInt16_new =
      _UA_UInt16_newPtr.asFunction<ffi.Pointer<UA_UInt16> Function()>();

  int UA_UInt16_copy(
    ffi.Pointer<UA_UInt16> src,
    ffi.Pointer<UA_UInt16> dst,
  ) {
    return _UA_UInt16_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt16_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_UInt16>)>>('UA_UInt16_copy');
  late final _UA_UInt16_copy = _UA_UInt16_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_deleteMembers(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_deleteMembers(
      p,
    );
  }

  late final _UA_UInt16_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_deleteMembers');
  late final _UA_UInt16_deleteMembers = _UA_UInt16_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_clear(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_clear(
      p,
    );
  }

  late final _UA_UInt16_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_clear');
  late final _UA_UInt16_clear =
      _UA_UInt16_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_UInt16_delete(
    ffi.Pointer<UA_UInt16> p,
  ) {
    return _UA_UInt16_delete(
      p,
    );
  }

  late final _UA_UInt16_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_delete');
  late final _UA_UInt16_delete =
      _UA_UInt16_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt16>)>();

  void UA_Int32_init(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_init(
      p,
    );
  }

  late final _UA_Int32_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_init');
  late final _UA_Int32_init =
      _UA_Int32_initPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  ffi.Pointer<UA_Int32> UA_Int32_new() {
    return _UA_Int32_new();
  }

  late final _UA_Int32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int32> Function()>>(
          'UA_Int32_new');
  late final _UA_Int32_new =
      _UA_Int32_newPtr.asFunction<ffi.Pointer<UA_Int32> Function()>();

  int UA_Int32_copy(
    ffi.Pointer<UA_Int32> src,
    ffi.Pointer<UA_Int32> dst,
  ) {
    return _UA_Int32_copy(
      src,
      dst,
    );
  }

  late final _UA_Int32_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>>('UA_Int32_copy');
  late final _UA_Int32_copy = _UA_Int32_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int32>, ffi.Pointer<UA_Int32>)>();

  void UA_Int32_deleteMembers(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_deleteMembers(
      p,
    );
  }

  late final _UA_Int32_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_deleteMembers');
  late final _UA_Int32_deleteMembers = _UA_Int32_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int32>)>();

  void UA_Int32_clear(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_clear(
      p,
    );
  }

  late final _UA_Int32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_clear');
  late final _UA_Int32_clear =
      _UA_Int32_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  void UA_Int32_delete(
    ffi.Pointer<UA_Int32> p,
  ) {
    return _UA_Int32_delete(
      p,
    );
  }

  late final _UA_Int32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_delete');
  late final _UA_Int32_delete =
      _UA_Int32_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int32>)>();

  void UA_UInt32_init(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_init(
      p,
    );
  }

  late final _UA_UInt32_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_init');
  late final _UA_UInt32_init =
      _UA_UInt32_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  ffi.Pointer<UA_UInt32> UA_UInt32_new() {
    return _UA_UInt32_new();
  }

  late final _UA_UInt32_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt32> Function()>>(
          'UA_UInt32_new');
  late final _UA_UInt32_new =
      _UA_UInt32_newPtr.asFunction<ffi.Pointer<UA_UInt32> Function()>();

  int UA_UInt32_copy(
    ffi.Pointer<UA_UInt32> src,
    ffi.Pointer<UA_UInt32> dst,
  ) {
    return _UA_UInt32_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt32_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt32>,
              ffi.Pointer<UA_UInt32>)>>('UA_UInt32_copy');
  late final _UA_UInt32_copy = _UA_UInt32_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_deleteMembers(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_deleteMembers(
      p,
    );
  }

  late final _UA_UInt32_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_deleteMembers');
  late final _UA_UInt32_deleteMembers = _UA_UInt32_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_clear(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_clear(
      p,
    );
  }

  late final _UA_UInt32_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_clear');
  late final _UA_UInt32_clear =
      _UA_UInt32_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_UInt32_delete(
    ffi.Pointer<UA_UInt32> p,
  ) {
    return _UA_UInt32_delete(
      p,
    );
  }

  late final _UA_UInt32_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_delete');
  late final _UA_UInt32_delete =
      _UA_UInt32_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt32>)>();

  void UA_Int64_init(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_init(
      p,
    );
  }

  late final _UA_Int64_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_init');
  late final _UA_Int64_init =
      _UA_Int64_initPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  ffi.Pointer<UA_Int64> UA_Int64_new() {
    return _UA_Int64_new();
  }

  late final _UA_Int64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Int64> Function()>>(
          'UA_Int64_new');
  late final _UA_Int64_new =
      _UA_Int64_newPtr.asFunction<ffi.Pointer<UA_Int64> Function()>();

  int UA_Int64_copy(
    ffi.Pointer<UA_Int64> src,
    ffi.Pointer<UA_Int64> dst,
  ) {
    return _UA_Int64_copy(
      src,
      dst,
    );
  }

  late final _UA_Int64_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>>('UA_Int64_copy');
  late final _UA_Int64_copy = _UA_Int64_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Int64>, ffi.Pointer<UA_Int64>)>();

  void UA_Int64_deleteMembers(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_deleteMembers(
      p,
    );
  }

  late final _UA_Int64_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_deleteMembers');
  late final _UA_Int64_deleteMembers = _UA_Int64_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Int64>)>();

  void UA_Int64_clear(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_clear(
      p,
    );
  }

  late final _UA_Int64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_clear');
  late final _UA_Int64_clear =
      _UA_Int64_clearPtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  void UA_Int64_delete(
    ffi.Pointer<UA_Int64> p,
  ) {
    return _UA_Int64_delete(
      p,
    );
  }

  late final _UA_Int64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_delete');
  late final _UA_Int64_delete =
      _UA_Int64_deletePtr.asFunction<void Function(ffi.Pointer<UA_Int64>)>();

  void UA_UInt64_init(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_init(
      p,
    );
  }

  late final _UA_UInt64_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_init');
  late final _UA_UInt64_init =
      _UA_UInt64_initPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  ffi.Pointer<UA_UInt64> UA_UInt64_new() {
    return _UA_UInt64_new();
  }

  late final _UA_UInt64_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UInt64> Function()>>(
          'UA_UInt64_new');
  late final _UA_UInt64_new =
      _UA_UInt64_newPtr.asFunction<ffi.Pointer<UA_UInt64> Function()>();

  int UA_UInt64_copy(
    ffi.Pointer<UA_UInt64> src,
    ffi.Pointer<UA_UInt64> dst,
  ) {
    return _UA_UInt64_copy(
      src,
      dst,
    );
  }

  late final _UA_UInt64_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UInt64>,
              ffi.Pointer<UA_UInt64>)>>('UA_UInt64_copy');
  late final _UA_UInt64_copy = _UA_UInt64_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_deleteMembers(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_deleteMembers(
      p,
    );
  }

  late final _UA_UInt64_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_deleteMembers');
  late final _UA_UInt64_deleteMembers = _UA_UInt64_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_clear(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_clear(
      p,
    );
  }

  late final _UA_UInt64_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_clear');
  late final _UA_UInt64_clear =
      _UA_UInt64_clearPtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_UInt64_delete(
    ffi.Pointer<UA_UInt64> p,
  ) {
    return _UA_UInt64_delete(
      p,
    );
  }

  late final _UA_UInt64_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_delete');
  late final _UA_UInt64_delete =
      _UA_UInt64_deletePtr.asFunction<void Function(ffi.Pointer<UA_UInt64>)>();

  void UA_Float_init(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_init(
      p,
    );
  }

  late final _UA_Float_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_init');
  late final _UA_Float_init =
      _UA_Float_initPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  ffi.Pointer<UA_Float> UA_Float_new() {
    return _UA_Float_new();
  }

  late final _UA_Float_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Float> Function()>>(
          'UA_Float_new');
  late final _UA_Float_new =
      _UA_Float_newPtr.asFunction<ffi.Pointer<UA_Float> Function()>();

  int UA_Float_copy(
    ffi.Pointer<UA_Float> src,
    ffi.Pointer<UA_Float> dst,
  ) {
    return _UA_Float_copy(
      src,
      dst,
    );
  }

  late final _UA_Float_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>>('UA_Float_copy');
  late final _UA_Float_copy = _UA_Float_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Float>, ffi.Pointer<UA_Float>)>();

  void UA_Float_deleteMembers(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_deleteMembers(
      p,
    );
  }

  late final _UA_Float_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_deleteMembers');
  late final _UA_Float_deleteMembers = _UA_Float_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Float>)>();

  void UA_Float_clear(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_clear(
      p,
    );
  }

  late final _UA_Float_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_clear');
  late final _UA_Float_clear =
      _UA_Float_clearPtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  void UA_Float_delete(
    ffi.Pointer<UA_Float> p,
  ) {
    return _UA_Float_delete(
      p,
    );
  }

  late final _UA_Float_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_delete');
  late final _UA_Float_delete =
      _UA_Float_deletePtr.asFunction<void Function(ffi.Pointer<UA_Float>)>();

  void UA_Double_init(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_init(
      p,
    );
  }

  late final _UA_Double_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_init');
  late final _UA_Double_init =
      _UA_Double_initPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  ffi.Pointer<UA_Double> UA_Double_new() {
    return _UA_Double_new();
  }

  late final _UA_Double_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Double> Function()>>(
          'UA_Double_new');
  late final _UA_Double_new =
      _UA_Double_newPtr.asFunction<ffi.Pointer<UA_Double> Function()>();

  int UA_Double_copy(
    ffi.Pointer<UA_Double> src,
    ffi.Pointer<UA_Double> dst,
  ) {
    return _UA_Double_copy(
      src,
      dst,
    );
  }

  late final _UA_Double_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Double>,
              ffi.Pointer<UA_Double>)>>('UA_Double_copy');
  late final _UA_Double_copy = _UA_Double_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Double>, ffi.Pointer<UA_Double>)>();

  void UA_Double_deleteMembers(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_deleteMembers(
      p,
    );
  }

  late final _UA_Double_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_deleteMembers');
  late final _UA_Double_deleteMembers = _UA_Double_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Double>)>();

  void UA_Double_clear(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_clear(
      p,
    );
  }

  late final _UA_Double_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_clear');
  late final _UA_Double_clear =
      _UA_Double_clearPtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  void UA_Double_delete(
    ffi.Pointer<UA_Double> p,
  ) {
    return _UA_Double_delete(
      p,
    );
  }

  late final _UA_Double_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_delete');
  late final _UA_Double_delete =
      _UA_Double_deletePtr.asFunction<void Function(ffi.Pointer<UA_Double>)>();

  void UA_String_init(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_init(
      p,
    );
  }

  late final _UA_String_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_init');
  late final _UA_String_init =
      _UA_String_initPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  ffi.Pointer<UA_String> UA_String_new() {
    return _UA_String_new();
  }

  late final _UA_String_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_String> Function()>>(
          'UA_String_new');
  late final _UA_String_new =
      _UA_String_newPtr.asFunction<ffi.Pointer<UA_String> Function()>();

  int UA_String_copy(
    ffi.Pointer<UA_String> src,
    ffi.Pointer<UA_String> dst,
  ) {
    return _UA_String_copy(
      src,
      dst,
    );
  }

  late final _UA_String_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>)>>('UA_String_copy');
  late final _UA_String_copy = _UA_String_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  void UA_String_deleteMembers(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_deleteMembers(
      p,
    );
  }

  late final _UA_String_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_deleteMembers');
  late final _UA_String_deleteMembers = _UA_String_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_String>)>();

  void UA_String_clear(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_clear(
      p,
    );
  }

  late final _UA_String_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_clear');
  late final _UA_String_clear =
      _UA_String_clearPtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  void UA_String_delete(
    ffi.Pointer<UA_String> p,
  ) {
    return _UA_String_delete(
      p,
    );
  }

  late final _UA_String_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_String>)>>(
          'UA_String_delete');
  late final _UA_String_delete =
      _UA_String_deletePtr.asFunction<void Function(ffi.Pointer<UA_String>)>();

  void UA_DateTime_init(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_init(
      p,
    );
  }

  late final _UA_DateTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_init');
  late final _UA_DateTime_init = _UA_DateTime_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  ffi.Pointer<UA_DateTime> UA_DateTime_new() {
    return _UA_DateTime_new();
  }

  late final _UA_DateTime_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DateTime> Function()>>(
          'UA_DateTime_new');
  late final _UA_DateTime_new =
      _UA_DateTime_newPtr.asFunction<ffi.Pointer<UA_DateTime> Function()>();

  int UA_DateTime_copy(
    ffi.Pointer<UA_DateTime> src,
    ffi.Pointer<UA_DateTime> dst,
  ) {
    return _UA_DateTime_copy(
      src,
      dst,
    );
  }

  late final _UA_DateTime_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DateTime>,
              ffi.Pointer<UA_DateTime>)>>('UA_DateTime_copy');
  late final _UA_DateTime_copy = _UA_DateTime_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DateTime>, ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_deleteMembers(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_deleteMembers(
      p,
    );
  }

  late final _UA_DateTime_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_deleteMembers');
  late final _UA_DateTime_deleteMembers = _UA_DateTime_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_clear(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_clear(
      p,
    );
  }

  late final _UA_DateTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_clear');
  late final _UA_DateTime_clear = _UA_DateTime_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_DateTime_delete(
    ffi.Pointer<UA_DateTime> p,
  ) {
    return _UA_DateTime_delete(
      p,
    );
  }

  late final _UA_DateTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_delete');
  late final _UA_DateTime_delete = _UA_DateTime_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DateTime>)>();

  void UA_Guid_init(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_init(
      p,
    );
  }

  late final _UA_Guid_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_init');
  late final _UA_Guid_init =
      _UA_Guid_initPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  ffi.Pointer<UA_Guid> UA_Guid_new() {
    return _UA_Guid_new();
  }

  late final _UA_Guid_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Guid> Function()>>(
          'UA_Guid_new');
  late final _UA_Guid_new =
      _UA_Guid_newPtr.asFunction<ffi.Pointer<UA_Guid> Function()>();

  int UA_Guid_copy(
    ffi.Pointer<UA_Guid> src,
    ffi.Pointer<UA_Guid> dst,
  ) {
    return _UA_Guid_copy(
      src,
      dst,
    );
  }

  late final _UA_Guid_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>>('UA_Guid_copy');
  late final _UA_Guid_copy = _UA_Guid_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>, ffi.Pointer<UA_Guid>)>();

  void UA_Guid_deleteMembers(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_deleteMembers(
      p,
    );
  }

  late final _UA_Guid_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_deleteMembers');
  late final _UA_Guid_deleteMembers = _UA_Guid_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Guid>)>();

  void UA_Guid_clear(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_clear(
      p,
    );
  }

  late final _UA_Guid_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_clear');
  late final _UA_Guid_clear =
      _UA_Guid_clearPtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  void UA_Guid_delete(
    ffi.Pointer<UA_Guid> p,
  ) {
    return _UA_Guid_delete(
      p,
    );
  }

  late final _UA_Guid_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_delete');
  late final _UA_Guid_delete =
      _UA_Guid_deletePtr.asFunction<void Function(ffi.Pointer<UA_Guid>)>();

  void UA_ByteString_init(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_init(
      p,
    );
  }

  late final _UA_ByteString_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_init');
  late final _UA_ByteString_init = _UA_ByteString_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  ffi.Pointer<UA_ByteString> UA_ByteString_new() {
    return _UA_ByteString_new();
  }

  late final _UA_ByteString_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ByteString> Function()>>(
          'UA_ByteString_new');
  late final _UA_ByteString_new =
      _UA_ByteString_newPtr.asFunction<ffi.Pointer<UA_ByteString> Function()>();

  int UA_ByteString_copy(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<UA_ByteString> dst,
  ) {
    return _UA_ByteString_copy(
      src,
      dst,
    );
  }

  late final _UA_ByteString_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>)>>('UA_ByteString_copy');
  late final _UA_ByteString_copy = _UA_ByteString_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_deleteMembers(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_deleteMembers(
      p,
    );
  }

  late final _UA_ByteString_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_deleteMembers');
  late final _UA_ByteString_deleteMembers = _UA_ByteString_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_clear(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_clear(
      p,
    );
  }

  late final _UA_ByteString_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_clear');
  late final _UA_ByteString_clear = _UA_ByteString_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_ByteString_delete(
    ffi.Pointer<UA_ByteString> p,
  ) {
    return _UA_ByteString_delete(
      p,
    );
  }

  late final _UA_ByteString_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_delete');
  late final _UA_ByteString_delete = _UA_ByteString_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ByteString>)>();

  void UA_XmlElement_init(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_init(
      p,
    );
  }

  late final _UA_XmlElement_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_init');
  late final _UA_XmlElement_init = _UA_XmlElement_initPtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  ffi.Pointer<UA_XmlElement> UA_XmlElement_new() {
    return _UA_XmlElement_new();
  }

  late final _UA_XmlElement_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_XmlElement> Function()>>(
          'UA_XmlElement_new');
  late final _UA_XmlElement_new =
      _UA_XmlElement_newPtr.asFunction<ffi.Pointer<UA_XmlElement> Function()>();

  int UA_XmlElement_copy(
    ffi.Pointer<UA_XmlElement> src,
    ffi.Pointer<UA_XmlElement> dst,
  ) {
    return _UA_XmlElement_copy(
      src,
      dst,
    );
  }

  late final _UA_XmlElement_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_XmlElement>,
              ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_copy');
  late final _UA_XmlElement_copy = _UA_XmlElement_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_XmlElement>, ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_deleteMembers(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_deleteMembers(
      p,
    );
  }

  late final _UA_XmlElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_deleteMembers');
  late final _UA_XmlElement_deleteMembers = _UA_XmlElement_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_clear(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_clear(
      p,
    );
  }

  late final _UA_XmlElement_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_clear');
  late final _UA_XmlElement_clear = _UA_XmlElement_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_XmlElement_delete(
    ffi.Pointer<UA_XmlElement> p,
  ) {
    return _UA_XmlElement_delete(
      p,
    );
  }

  late final _UA_XmlElement_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_delete');
  late final _UA_XmlElement_delete = _UA_XmlElement_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_XmlElement>)>();

  void UA_NodeId_init(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_init(
      p,
    );
  }

  late final _UA_NodeId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_init');
  late final _UA_NodeId_init =
      _UA_NodeId_initPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  ffi.Pointer<UA_NodeId> UA_NodeId_new() {
    return _UA_NodeId_new();
  }

  late final _UA_NodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeId> Function()>>(
          'UA_NodeId_new');
  late final _UA_NodeId_new =
      _UA_NodeId_newPtr.asFunction<ffi.Pointer<UA_NodeId> Function()>();

  int UA_NodeId_copy(
    ffi.Pointer<UA_NodeId> src,
    ffi.Pointer<UA_NodeId> dst,
  ) {
    return _UA_NodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_copy');
  late final _UA_NodeId_copy = _UA_NodeId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_deleteMembers(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_deleteMembers(
      p,
    );
  }

  late final _UA_NodeId_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_deleteMembers');
  late final _UA_NodeId_deleteMembers = _UA_NodeId_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_clear(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_clear(
      p,
    );
  }

  late final _UA_NodeId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_clear');
  late final _UA_NodeId_clear =
      _UA_NodeId_clearPtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_NodeId_delete(
    ffi.Pointer<UA_NodeId> p,
  ) {
    return _UA_NodeId_delete(
      p,
    );
  }

  late final _UA_NodeId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_delete');
  late final _UA_NodeId_delete =
      _UA_NodeId_deletePtr.asFunction<void Function(ffi.Pointer<UA_NodeId>)>();

  void UA_ExpandedNodeId_init(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_init(
      p,
    );
  }

  late final _UA_ExpandedNodeId_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_init');
  late final _UA_ExpandedNodeId_init = _UA_ExpandedNodeId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  ffi.Pointer<UA_ExpandedNodeId> UA_ExpandedNodeId_new() {
    return _UA_ExpandedNodeId_new();
  }

  late final _UA_ExpandedNodeId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExpandedNodeId> Function()>>(
          'UA_ExpandedNodeId_new');
  late final _UA_ExpandedNodeId_new = _UA_ExpandedNodeId_newPtr.asFunction<
      ffi.Pointer<UA_ExpandedNodeId> Function()>();

  int UA_ExpandedNodeId_copy(
    ffi.Pointer<UA_ExpandedNodeId> src,
    ffi.Pointer<UA_ExpandedNodeId> dst,
  ) {
    return _UA_ExpandedNodeId_copy(
      src,
      dst,
    );
  }

  late final _UA_ExpandedNodeId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_ExpandedNodeId_copy');
  late final _UA_ExpandedNodeId_copy = _UA_ExpandedNodeId_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExpandedNodeId>, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_deleteMembers(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_deleteMembers(
      p,
    );
  }

  late final _UA_ExpandedNodeId_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_deleteMembers');
  late final _UA_ExpandedNodeId_deleteMembers =
      _UA_ExpandedNodeId_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_clear(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_clear(
      p,
    );
  }

  late final _UA_ExpandedNodeId_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_clear');
  late final _UA_ExpandedNodeId_clear = _UA_ExpandedNodeId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_ExpandedNodeId_delete(
    ffi.Pointer<UA_ExpandedNodeId> p,
  ) {
    return _UA_ExpandedNodeId_delete(
      p,
    );
  }

  late final _UA_ExpandedNodeId_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_delete');
  late final _UA_ExpandedNodeId_delete = _UA_ExpandedNodeId_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_StatusCode_init(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_init(
      p,
    );
  }

  late final _UA_StatusCode_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_init');
  late final _UA_StatusCode_init = _UA_StatusCode_initPtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_StatusCode> UA_StatusCode_new() {
    return _UA_StatusCode_new();
  }

  late final _UA_StatusCode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StatusCode> Function()>>(
          'UA_StatusCode_new');
  late final _UA_StatusCode_new =
      _UA_StatusCode_newPtr.asFunction<ffi.Pointer<UA_StatusCode> Function()>();

  int UA_StatusCode_copy(
    ffi.Pointer<UA_StatusCode> src,
    ffi.Pointer<UA_StatusCode> dst,
  ) {
    return _UA_StatusCode_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusCode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StatusCode>,
              ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_copy');
  late final _UA_StatusCode_copy = _UA_StatusCode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_StatusCode>, ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_deleteMembers(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_deleteMembers(
      p,
    );
  }

  late final _UA_StatusCode_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_deleteMembers');
  late final _UA_StatusCode_deleteMembers = _UA_StatusCode_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_clear(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_clear(
      p,
    );
  }

  late final _UA_StatusCode_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_clear');
  late final _UA_StatusCode_clear = _UA_StatusCode_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_StatusCode_delete(
    ffi.Pointer<UA_StatusCode> p,
  ) {
    return _UA_StatusCode_delete(
      p,
    );
  }

  late final _UA_StatusCode_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_delete');
  late final _UA_StatusCode_delete = _UA_StatusCode_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_StatusCode>)>();

  void UA_QualifiedName_init(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_init(
      p,
    );
  }

  late final _UA_QualifiedName_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_init');
  late final _UA_QualifiedName_init = _UA_QualifiedName_initPtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  ffi.Pointer<UA_QualifiedName> UA_QualifiedName_new() {
    return _UA_QualifiedName_new();
  }

  late final _UA_QualifiedName_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_QualifiedName> Function()>>(
          'UA_QualifiedName_new');
  late final _UA_QualifiedName_new = _UA_QualifiedName_newPtr.asFunction<
      ffi.Pointer<UA_QualifiedName> Function()>();

  int UA_QualifiedName_copy(
    ffi.Pointer<UA_QualifiedName> src,
    ffi.Pointer<UA_QualifiedName> dst,
  ) {
    return _UA_QualifiedName_copy(
      src,
      dst,
    );
  }

  late final _UA_QualifiedName_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_copy');
  late final _UA_QualifiedName_copy = _UA_QualifiedName_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_QualifiedName>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_deleteMembers(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_deleteMembers(
      p,
    );
  }

  late final _UA_QualifiedName_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_deleteMembers');
  late final _UA_QualifiedName_deleteMembers =
      _UA_QualifiedName_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_clear(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_clear(
      p,
    );
  }

  late final _UA_QualifiedName_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_clear');
  late final _UA_QualifiedName_clear = _UA_QualifiedName_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_QualifiedName_delete(
    ffi.Pointer<UA_QualifiedName> p,
  ) {
    return _UA_QualifiedName_delete(
      p,
    );
  }

  late final _UA_QualifiedName_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_delete');
  late final _UA_QualifiedName_delete = _UA_QualifiedName_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_QualifiedName>)>();

  void UA_LocalizedText_init(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_init(
      p,
    );
  }

  late final _UA_LocalizedText_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_init');
  late final _UA_LocalizedText_init = _UA_LocalizedText_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  ffi.Pointer<UA_LocalizedText> UA_LocalizedText_new() {
    return _UA_LocalizedText_new();
  }

  late final _UA_LocalizedText_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocalizedText> Function()>>(
          'UA_LocalizedText_new');
  late final _UA_LocalizedText_new = _UA_LocalizedText_newPtr.asFunction<
      ffi.Pointer<UA_LocalizedText> Function()>();

  int UA_LocalizedText_copy(
    ffi.Pointer<UA_LocalizedText> src,
    ffi.Pointer<UA_LocalizedText> dst,
  ) {
    return _UA_LocalizedText_copy(
      src,
      dst,
    );
  }

  late final _UA_LocalizedText_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LocalizedText>,
              ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_copy');
  late final _UA_LocalizedText_copy = _UA_LocalizedText_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_LocalizedText>, ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_deleteMembers(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_deleteMembers(
      p,
    );
  }

  late final _UA_LocalizedText_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_deleteMembers');
  late final _UA_LocalizedText_deleteMembers =
      _UA_LocalizedText_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_clear(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_clear(
      p,
    );
  }

  late final _UA_LocalizedText_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_clear');
  late final _UA_LocalizedText_clear = _UA_LocalizedText_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_LocalizedText_delete(
    ffi.Pointer<UA_LocalizedText> p,
  ) {
    return _UA_LocalizedText_delete(
      p,
    );
  }

  late final _UA_LocalizedText_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_delete');
  late final _UA_LocalizedText_delete = _UA_LocalizedText_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_LocalizedText>)>();

  void UA_ExtensionObject_init(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_init(
      p,
    );
  }

  late final _UA_ExtensionObject_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_init');
  late final _UA_ExtensionObject_init = _UA_ExtensionObject_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ExtensionObject>)>();

  ffi.Pointer<UA_ExtensionObject> UA_ExtensionObject_new() {
    return _UA_ExtensionObject_new();
  }

  late final _UA_ExtensionObject_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ExtensionObject> Function()>>(
          'UA_ExtensionObject_new');
  late final _UA_ExtensionObject_new = _UA_ExtensionObject_newPtr.asFunction<
      ffi.Pointer<UA_ExtensionObject> Function()>();

  int UA_ExtensionObject_copy(
    ffi.Pointer<UA_ExtensionObject> src,
    ffi.Pointer<UA_ExtensionObject> dst,
  ) {
    return _UA_ExtensionObject_copy(
      src,
      dst,
    );
  }

  late final _UA_ExtensionObject_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<UA_ExtensionObject>)>>('UA_ExtensionObject_copy');
  late final _UA_ExtensionObject_copy = _UA_ExtensionObject_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_deleteMembers(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_deleteMembers(
      p,
    );
  }

  late final _UA_ExtensionObject_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_deleteMembers');
  late final _UA_ExtensionObject_deleteMembers =
      _UA_ExtensionObject_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_clear(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_clear(
      p,
    );
  }

  late final _UA_ExtensionObject_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_clear');
  late final _UA_ExtensionObject_clear = _UA_ExtensionObject_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_ExtensionObject_delete(
    ffi.Pointer<UA_ExtensionObject> p,
  ) {
    return _UA_ExtensionObject_delete(
      p,
    );
  }

  late final _UA_ExtensionObject_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_delete');
  late final _UA_ExtensionObject_delete = _UA_ExtensionObject_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ExtensionObject>)>();

  void UA_DataValue_init(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_init(
      p,
    );
  }

  late final _UA_DataValue_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_init');
  late final _UA_DataValue_init = _UA_DataValue_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  ffi.Pointer<UA_DataValue> UA_DataValue_new() {
    return _UA_DataValue_new();
  }

  late final _UA_DataValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataValue> Function()>>(
          'UA_DataValue_new');
  late final _UA_DataValue_new =
      _UA_DataValue_newPtr.asFunction<ffi.Pointer<UA_DataValue> Function()>();

  int UA_DataValue_copy(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<UA_DataValue> dst,
  ) {
    return _UA_DataValue_copy(
      src,
      dst,
    );
  }

  late final _UA_DataValue_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataValue>,
              ffi.Pointer<UA_DataValue>)>>('UA_DataValue_copy');
  late final _UA_DataValue_copy = _UA_DataValue_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_DataValue>, ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_deleteMembers(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_deleteMembers(
      p,
    );
  }

  late final _UA_DataValue_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_deleteMembers');
  late final _UA_DataValue_deleteMembers = _UA_DataValue_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_clear(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_clear(
      p,
    );
  }

  late final _UA_DataValue_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_clear');
  late final _UA_DataValue_clear = _UA_DataValue_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_DataValue_delete(
    ffi.Pointer<UA_DataValue> p,
  ) {
    return _UA_DataValue_delete(
      p,
    );
  }

  late final _UA_DataValue_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_delete');
  late final _UA_DataValue_delete = _UA_DataValue_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_DataValue>)>();

  void UA_Variant_init(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_init(
      p,
    );
  }

  late final _UA_Variant_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_init');
  late final _UA_Variant_init =
      _UA_Variant_initPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  ffi.Pointer<UA_Variant> UA_Variant_new() {
    return _UA_Variant_new();
  }

  late final _UA_Variant_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Variant> Function()>>(
          'UA_Variant_new');
  late final _UA_Variant_new =
      _UA_Variant_newPtr.asFunction<ffi.Pointer<UA_Variant> Function()>();

  int UA_Variant_copy(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<UA_Variant> dst,
  ) {
    return _UA_Variant_copy(
      src,
      dst,
    );
  }

  late final _UA_Variant_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Variant>,
              ffi.Pointer<UA_Variant>)>>('UA_Variant_copy');
  late final _UA_Variant_copy = _UA_Variant_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<UA_Variant>)>();

  void UA_Variant_deleteMembers(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_deleteMembers(
      p,
    );
  }

  late final _UA_Variant_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_deleteMembers');
  late final _UA_Variant_deleteMembers = _UA_Variant_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  void UA_Variant_clear(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_clear(
      p,
    );
  }

  late final _UA_Variant_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_clear');
  late final _UA_Variant_clear =
      _UA_Variant_clearPtr.asFunction<void Function(ffi.Pointer<UA_Variant>)>();

  void UA_Variant_delete(
    ffi.Pointer<UA_Variant> p,
  ) {
    return _UA_Variant_delete(
      p,
    );
  }

  late final _UA_Variant_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_delete');
  late final _UA_Variant_delete = _UA_Variant_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Variant>)>();

  void UA_DiagnosticInfo_init(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_init(
      p,
    );
  }

  late final _UA_DiagnosticInfo_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_init');
  late final _UA_DiagnosticInfo_init = _UA_DiagnosticInfo_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  ffi.Pointer<UA_DiagnosticInfo> UA_DiagnosticInfo_new() {
    return _UA_DiagnosticInfo_new();
  }

  late final _UA_DiagnosticInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DiagnosticInfo> Function()>>(
          'UA_DiagnosticInfo_new');
  late final _UA_DiagnosticInfo_new = _UA_DiagnosticInfo_newPtr.asFunction<
      ffi.Pointer<UA_DiagnosticInfo> Function()>();

  int UA_DiagnosticInfo_copy(
    ffi.Pointer<UA_DiagnosticInfo> src,
    ffi.Pointer<UA_DiagnosticInfo> dst,
  ) {
    return _UA_DiagnosticInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_DiagnosticInfo_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DiagnosticInfo>,
              ffi.Pointer<UA_DiagnosticInfo>)>>('UA_DiagnosticInfo_copy');
  late final _UA_DiagnosticInfo_copy = _UA_DiagnosticInfo_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DiagnosticInfo>, ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_deleteMembers(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_deleteMembers(
      p,
    );
  }

  late final _UA_DiagnosticInfo_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_deleteMembers');
  late final _UA_DiagnosticInfo_deleteMembers =
      _UA_DiagnosticInfo_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_clear(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_clear(
      p,
    );
  }

  late final _UA_DiagnosticInfo_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_clear');
  late final _UA_DiagnosticInfo_clear = _UA_DiagnosticInfo_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_DiagnosticInfo_delete(
    ffi.Pointer<UA_DiagnosticInfo> p,
  ) {
    return _UA_DiagnosticInfo_delete(
      p,
    );
  }

  late final _UA_DiagnosticInfo_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_delete');
  late final _UA_DiagnosticInfo_delete = _UA_DiagnosticInfo_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  void UA_KeyValuePair_init(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_init(
      p,
    );
  }

  late final _UA_KeyValuePair_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_init');
  late final _UA_KeyValuePair_init = _UA_KeyValuePair_initPtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  ffi.Pointer<UA_KeyValuePair> UA_KeyValuePair_new() {
    return _UA_KeyValuePair_new();
  }

  late final _UA_KeyValuePair_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_KeyValuePair> Function()>>(
          'UA_KeyValuePair_new');
  late final _UA_KeyValuePair_new = _UA_KeyValuePair_newPtr.asFunction<
      ffi.Pointer<UA_KeyValuePair> Function()>();

  int UA_KeyValuePair_copy(
    ffi.Pointer<UA_KeyValuePair> src,
    ffi.Pointer<UA_KeyValuePair> dst,
  ) {
    return _UA_KeyValuePair_copy(
      src,
      dst,
    );
  }

  late final _UA_KeyValuePair_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_KeyValuePair>,
              ffi.Pointer<UA_KeyValuePair>)>>('UA_KeyValuePair_copy');
  late final _UA_KeyValuePair_copy = _UA_KeyValuePair_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_KeyValuePair>, ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_deleteMembers(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_deleteMembers(
      p,
    );
  }

  late final _UA_KeyValuePair_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_deleteMembers');
  late final _UA_KeyValuePair_deleteMembers = _UA_KeyValuePair_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_clear(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_clear(
      p,
    );
  }

  late final _UA_KeyValuePair_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_clear');
  late final _UA_KeyValuePair_clear = _UA_KeyValuePair_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_KeyValuePair_delete(
    ffi.Pointer<UA_KeyValuePair> p,
  ) {
    return _UA_KeyValuePair_delete(
      p,
    );
  }

  late final _UA_KeyValuePair_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_KeyValuePair>)>>(
      'UA_KeyValuePair_delete');
  late final _UA_KeyValuePair_delete = _UA_KeyValuePair_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_KeyValuePair>)>();

  void UA_SimpleTypeDescription_init(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_init(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_init');
  late final _UA_SimpleTypeDescription_init = _UA_SimpleTypeDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  ffi.Pointer<UA_SimpleTypeDescription> UA_SimpleTypeDescription_new() {
    return _UA_SimpleTypeDescription_new();
  }

  late final _UA_SimpleTypeDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>>(
      'UA_SimpleTypeDescription_new');
  late final _UA_SimpleTypeDescription_new = _UA_SimpleTypeDescription_newPtr
      .asFunction<ffi.Pointer<UA_SimpleTypeDescription> Function()>();

  int UA_SimpleTypeDescription_copy(
    ffi.Pointer<UA_SimpleTypeDescription> src,
    ffi.Pointer<UA_SimpleTypeDescription> dst,
  ) {
    return _UA_SimpleTypeDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleTypeDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SimpleTypeDescription>,
                  ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_copy');
  late final _UA_SimpleTypeDescription_copy =
      _UA_SimpleTypeDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SimpleTypeDescription>,
              ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_deleteMembers(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_deleteMembers(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_deleteMembers');
  late final _UA_SimpleTypeDescription_deleteMembers =
      _UA_SimpleTypeDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_clear(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_clear(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_clear');
  late final _UA_SimpleTypeDescription_clear =
      _UA_SimpleTypeDescription_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_SimpleTypeDescription_delete(
    ffi.Pointer<UA_SimpleTypeDescription> p,
  ) {
    return _UA_SimpleTypeDescription_delete(
      p,
    );
  }

  late final _UA_SimpleTypeDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleTypeDescription>)>>(
      'UA_SimpleTypeDescription_delete');
  late final _UA_SimpleTypeDescription_delete =
      _UA_SimpleTypeDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleTypeDescription>)>();

  void UA_PubSubState_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_init(
      p,
    );
  }

  late final _UA_PubSubState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_init');
  late final _UA_PubSubState_init = _UA_PubSubState_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_PubSubState_new() {
    return _UA_PubSubState_new();
  }

  late final _UA_PubSubState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_PubSubState_new');
  late final _UA_PubSubState_new =
      _UA_PubSubState_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_PubSubState_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_PubSubState_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubState_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_PubSubState_copy');
  late final _UA_PubSubState_copy = _UA_PubSubState_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubState_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_deleteMembers');
  late final _UA_PubSubState_deleteMembers = _UA_PubSubState_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_clear(
      p,
    );
  }

  late final _UA_PubSubState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_clear');
  late final _UA_PubSubState_clear = _UA_PubSubState_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PubSubState_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_PubSubState_delete(
      p,
    );
  }

  late final _UA_PubSubState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_PubSubState_delete');
  late final _UA_PubSubState_delete = _UA_PubSubState_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetFieldFlags_init(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_init(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_init');
  late final _UA_DataSetFieldFlags_init = _UA_DataSetFieldFlags_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  ffi.Pointer<UA_DataSetFieldFlags> UA_DataSetFieldFlags_new() {
    return _UA_DataSetFieldFlags_new();
  }

  late final _UA_DataSetFieldFlags_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>>(
          'UA_DataSetFieldFlags_new');
  late final _UA_DataSetFieldFlags_new = _UA_DataSetFieldFlags_newPtr
      .asFunction<ffi.Pointer<UA_DataSetFieldFlags> Function()>();

  int UA_DataSetFieldFlags_copy(
    ffi.Pointer<UA_DataSetFieldFlags> src,
    ffi.Pointer<UA_DataSetFieldFlags> dst,
  ) {
    return _UA_DataSetFieldFlags_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldFlags_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldFlags>,
              ffi.Pointer<UA_DataSetFieldFlags>)>>('UA_DataSetFieldFlags_copy');
  late final _UA_DataSetFieldFlags_copy =
      _UA_DataSetFieldFlags_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetFieldFlags>,
              ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_deleteMembers(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_deleteMembers');
  late final _UA_DataSetFieldFlags_deleteMembers =
      _UA_DataSetFieldFlags_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_clear(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_clear(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_clear');
  late final _UA_DataSetFieldFlags_clear = _UA_DataSetFieldFlags_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_DataSetFieldFlags_delete(
    ffi.Pointer<UA_DataSetFieldFlags> p,
  ) {
    return _UA_DataSetFieldFlags_delete(
      p,
    );
  }

  late final _UA_DataSetFieldFlags_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldFlags>)>>(
      'UA_DataSetFieldFlags_delete');
  late final _UA_DataSetFieldFlags_delete = _UA_DataSetFieldFlags_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldFlags>)>();

  void UA_ConfigurationVersionDataType_init(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_init(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_init');
  late final _UA_ConfigurationVersionDataType_init =
      _UA_ConfigurationVersionDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  ffi.Pointer<UA_ConfigurationVersionDataType>
      UA_ConfigurationVersionDataType_new() {
    return _UA_ConfigurationVersionDataType_new();
  }

  late final _UA_ConfigurationVersionDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ConfigurationVersionDataType>
              Function()>>('UA_ConfigurationVersionDataType_new');
  late final _UA_ConfigurationVersionDataType_new =
      _UA_ConfigurationVersionDataType_newPtr.asFunction<
          ffi.Pointer<UA_ConfigurationVersionDataType> Function()>();

  int UA_ConfigurationVersionDataType_copy(
    ffi.Pointer<UA_ConfigurationVersionDataType> src,
    ffi.Pointer<UA_ConfigurationVersionDataType> dst,
  ) {
    return _UA_ConfigurationVersionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ConfigurationVersionDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ConfigurationVersionDataType>,
                  ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_copy');
  late final _UA_ConfigurationVersionDataType_copy =
      _UA_ConfigurationVersionDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ConfigurationVersionDataType>,
              ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_deleteMembers(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_deleteMembers');
  late final _UA_ConfigurationVersionDataType_deleteMembers =
      _UA_ConfigurationVersionDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_clear(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_clear(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_clear');
  late final _UA_ConfigurationVersionDataType_clear =
      _UA_ConfigurationVersionDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_ConfigurationVersionDataType_delete(
    ffi.Pointer<UA_ConfigurationVersionDataType> p,
  ) {
    return _UA_ConfigurationVersionDataType_delete(
      p,
    );
  }

  late final _UA_ConfigurationVersionDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>>(
      'UA_ConfigurationVersionDataType_delete');
  late final _UA_ConfigurationVersionDataType_delete =
      _UA_ConfigurationVersionDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ConfigurationVersionDataType>)>();

  void UA_PublishedVariableDataType_init(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_init(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_init');
  late final _UA_PublishedVariableDataType_init =
      _UA_PublishedVariableDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  ffi.Pointer<UA_PublishedVariableDataType> UA_PublishedVariableDataType_new() {
    return _UA_PublishedVariableDataType_new();
  }

  late final _UA_PublishedVariableDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishedVariableDataType>
              Function()>>('UA_PublishedVariableDataType_new');
  late final _UA_PublishedVariableDataType_new =
      _UA_PublishedVariableDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedVariableDataType> Function()>();

  int UA_PublishedVariableDataType_copy(
    ffi.Pointer<UA_PublishedVariableDataType> src,
    ffi.Pointer<UA_PublishedVariableDataType> dst,
  ) {
    return _UA_PublishedVariableDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedVariableDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedVariableDataType>,
                  ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_copy');
  late final _UA_PublishedVariableDataType_copy =
      _UA_PublishedVariableDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedVariableDataType>,
              ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_deleteMembers(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_deleteMembers');
  late final _UA_PublishedVariableDataType_deleteMembers =
      _UA_PublishedVariableDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_clear(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_clear(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_clear');
  late final _UA_PublishedVariableDataType_clear =
      _UA_PublishedVariableDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedVariableDataType_delete(
    ffi.Pointer<UA_PublishedVariableDataType> p,
  ) {
    return _UA_PublishedVariableDataType_delete(
      p,
    );
  }

  late final _UA_PublishedVariableDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedVariableDataType>)>>(
      'UA_PublishedVariableDataType_delete');
  late final _UA_PublishedVariableDataType_delete =
      _UA_PublishedVariableDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedVariableDataType>)>();

  void UA_PublishedDataItemsDataType_init(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_init');
  late final _UA_PublishedDataItemsDataType_init =
      _UA_PublishedDataItemsDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  ffi.Pointer<UA_PublishedDataItemsDataType>
      UA_PublishedDataItemsDataType_new() {
    return _UA_PublishedDataItemsDataType_new();
  }

  late final _UA_PublishedDataItemsDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishedDataItemsDataType>
              Function()>>('UA_PublishedDataItemsDataType_new');
  late final _UA_PublishedDataItemsDataType_new =
      _UA_PublishedDataItemsDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedDataItemsDataType> Function()>();

  int UA_PublishedDataItemsDataType_copy(
    ffi.Pointer<UA_PublishedDataItemsDataType> src,
    ffi.Pointer<UA_PublishedDataItemsDataType> dst,
  ) {
    return _UA_PublishedDataItemsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataItemsDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
                  ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_copy');
  late final _UA_PublishedDataItemsDataType_copy =
      _UA_PublishedDataItemsDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataItemsDataType>,
              ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_deleteMembers(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_deleteMembers');
  late final _UA_PublishedDataItemsDataType_deleteMembers =
      _UA_PublishedDataItemsDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_clear(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_clear');
  late final _UA_PublishedDataItemsDataType_clear =
      _UA_PublishedDataItemsDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_PublishedDataItemsDataType_delete(
    ffi.Pointer<UA_PublishedDataItemsDataType> p,
  ) {
    return _UA_PublishedDataItemsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataItemsDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>>(
      'UA_PublishedDataItemsDataType_delete');
  late final _UA_PublishedDataItemsDataType_delete =
      _UA_PublishedDataItemsDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataItemsDataType>)>();

  void UA_DataSetFieldContentMask_init(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_init(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_init');
  late final _UA_DataSetFieldContentMask_init =
      _UA_DataSetFieldContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  ffi.Pointer<UA_DataSetFieldContentMask> UA_DataSetFieldContentMask_new() {
    return _UA_DataSetFieldContentMask_new();
  }

  late final _UA_DataSetFieldContentMask_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DataSetFieldContentMask> Function()>>(
      'UA_DataSetFieldContentMask_new');
  late final _UA_DataSetFieldContentMask_new =
      _UA_DataSetFieldContentMask_newPtr.asFunction<
          ffi.Pointer<UA_DataSetFieldContentMask> Function()>();

  int UA_DataSetFieldContentMask_copy(
    ffi.Pointer<UA_DataSetFieldContentMask> src,
    ffi.Pointer<UA_DataSetFieldContentMask> dst,
  ) {
    return _UA_DataSetFieldContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldContentMask>,
                  ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_copy');
  late final _UA_DataSetFieldContentMask_copy =
      _UA_DataSetFieldContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetFieldContentMask>,
              ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_deleteMembers(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_deleteMembers');
  late final _UA_DataSetFieldContentMask_deleteMembers =
      _UA_DataSetFieldContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_clear(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_clear(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_clear');
  late final _UA_DataSetFieldContentMask_clear =
      _UA_DataSetFieldContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetFieldContentMask_delete(
    ffi.Pointer<UA_DataSetFieldContentMask> p,
  ) {
    return _UA_DataSetFieldContentMask_delete(
      p,
    );
  }

  late final _UA_DataSetFieldContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>>(
      'UA_DataSetFieldContentMask_delete');
  late final _UA_DataSetFieldContentMask_delete =
      _UA_DataSetFieldContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetFieldContentMask>)>();

  void UA_DataSetWriterDataType_init(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_init(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_init');
  late final _UA_DataSetWriterDataType_init = _UA_DataSetWriterDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  ffi.Pointer<UA_DataSetWriterDataType> UA_DataSetWriterDataType_new() {
    return _UA_DataSetWriterDataType_new();
  }

  late final _UA_DataSetWriterDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>>(
      'UA_DataSetWriterDataType_new');
  late final _UA_DataSetWriterDataType_new = _UA_DataSetWriterDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetWriterDataType> Function()>();

  int UA_DataSetWriterDataType_copy(
    ffi.Pointer<UA_DataSetWriterDataType> src,
    ffi.Pointer<UA_DataSetWriterDataType> dst,
  ) {
    return _UA_DataSetWriterDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetWriterDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetWriterDataType>,
                  ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_copy');
  late final _UA_DataSetWriterDataType_copy =
      _UA_DataSetWriterDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetWriterDataType>,
              ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_deleteMembers(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_deleteMembers');
  late final _UA_DataSetWriterDataType_deleteMembers =
      _UA_DataSetWriterDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_clear(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_clear(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_clear');
  late final _UA_DataSetWriterDataType_clear =
      _UA_DataSetWriterDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_DataSetWriterDataType_delete(
    ffi.Pointer<UA_DataSetWriterDataType> p,
  ) {
    return _UA_DataSetWriterDataType_delete(
      p,
    );
  }

  late final _UA_DataSetWriterDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterDataType>)>>(
      'UA_DataSetWriterDataType_delete');
  late final _UA_DataSetWriterDataType_delete =
      _UA_DataSetWriterDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetWriterDataType>)>();

  void UA_NetworkAddressUrlDataType_init(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_init(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_init');
  late final _UA_NetworkAddressUrlDataType_init =
      _UA_NetworkAddressUrlDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  ffi.Pointer<UA_NetworkAddressUrlDataType> UA_NetworkAddressUrlDataType_new() {
    return _UA_NetworkAddressUrlDataType_new();
  }

  late final _UA_NetworkAddressUrlDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_NetworkAddressUrlDataType>
              Function()>>('UA_NetworkAddressUrlDataType_new');
  late final _UA_NetworkAddressUrlDataType_new =
      _UA_NetworkAddressUrlDataType_newPtr.asFunction<
          ffi.Pointer<UA_NetworkAddressUrlDataType> Function()>();

  int UA_NetworkAddressUrlDataType_copy(
    ffi.Pointer<UA_NetworkAddressUrlDataType> src,
    ffi.Pointer<UA_NetworkAddressUrlDataType> dst,
  ) {
    return _UA_NetworkAddressUrlDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_NetworkAddressUrlDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
                  ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_copy');
  late final _UA_NetworkAddressUrlDataType_copy =
      _UA_NetworkAddressUrlDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkAddressUrlDataType>,
              ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_deleteMembers(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_deleteMembers(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_deleteMembers');
  late final _UA_NetworkAddressUrlDataType_deleteMembers =
      _UA_NetworkAddressUrlDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_clear(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_clear(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_clear');
  late final _UA_NetworkAddressUrlDataType_clear =
      _UA_NetworkAddressUrlDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_NetworkAddressUrlDataType_delete(
    ffi.Pointer<UA_NetworkAddressUrlDataType> p,
  ) {
    return _UA_NetworkAddressUrlDataType_delete(
      p,
    );
  }

  late final _UA_NetworkAddressUrlDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>>(
      'UA_NetworkAddressUrlDataType_delete');
  late final _UA_NetworkAddressUrlDataType_delete =
      _UA_NetworkAddressUrlDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkAddressUrlDataType>)>();

  void UA_OverrideValueHandling_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_init(
      p,
    );
  }

  late final _UA_OverrideValueHandling_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_init');
  late final _UA_OverrideValueHandling_init = _UA_OverrideValueHandling_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_OverrideValueHandling_new() {
    return _UA_OverrideValueHandling_new();
  }

  late final _UA_OverrideValueHandling_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_OverrideValueHandling_new');
  late final _UA_OverrideValueHandling_new = _UA_OverrideValueHandling_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_OverrideValueHandling_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_OverrideValueHandling_copy(
      src,
      dst,
    );
  }

  late final _UA_OverrideValueHandling_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_OverrideValueHandling_copy');
  late final _UA_OverrideValueHandling_copy =
      _UA_OverrideValueHandling_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_deleteMembers(
      p,
    );
  }

  late final _UA_OverrideValueHandling_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_deleteMembers');
  late final _UA_OverrideValueHandling_deleteMembers =
      _UA_OverrideValueHandling_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_clear(
      p,
    );
  }

  late final _UA_OverrideValueHandling_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_clear');
  late final _UA_OverrideValueHandling_clear =
      _UA_OverrideValueHandling_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_OverrideValueHandling_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_OverrideValueHandling_delete(
      p,
    );
  }

  late final _UA_OverrideValueHandling_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_OverrideValueHandling_delete');
  late final _UA_OverrideValueHandling_delete =
      _UA_OverrideValueHandling_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_init(
      p,
    );
  }

  late final _UA_DataSetOrderingType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_init');
  late final _UA_DataSetOrderingType_init = _UA_DataSetOrderingType_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DataSetOrderingType_new() {
    return _UA_DataSetOrderingType_new();
  }

  late final _UA_DataSetOrderingType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DataSetOrderingType_new');
  late final _UA_DataSetOrderingType_new = _UA_DataSetOrderingType_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DataSetOrderingType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DataSetOrderingType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetOrderingType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DataSetOrderingType_copy');
  late final _UA_DataSetOrderingType_copy =
      _UA_DataSetOrderingType_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetOrderingType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_deleteMembers');
  late final _UA_DataSetOrderingType_deleteMembers =
      _UA_DataSetOrderingType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_clear(
      p,
    );
  }

  late final _UA_DataSetOrderingType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_clear');
  late final _UA_DataSetOrderingType_clear = _UA_DataSetOrderingType_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataSetOrderingType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataSetOrderingType_delete(
      p,
    );
  }

  late final _UA_DataSetOrderingType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataSetOrderingType_delete');
  late final _UA_DataSetOrderingType_delete = _UA_DataSetOrderingType_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UadpNetworkMessageContentMask_init(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_init');
  late final _UA_UadpNetworkMessageContentMask_init =
      _UA_UadpNetworkMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  ffi.Pointer<UA_UadpNetworkMessageContentMask>
      UA_UadpNetworkMessageContentMask_new() {
    return _UA_UadpNetworkMessageContentMask_new();
  }

  late final _UA_UadpNetworkMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpNetworkMessageContentMask>
              Function()>>('UA_UadpNetworkMessageContentMask_new');
  late final _UA_UadpNetworkMessageContentMask_new =
      _UA_UadpNetworkMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_UadpNetworkMessageContentMask> Function()>();

  int UA_UadpNetworkMessageContentMask_copy(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> src,
    ffi.Pointer<UA_UadpNetworkMessageContentMask> dst,
  ) {
    return _UA_UadpNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>,
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_copy');
  late final _UA_UadpNetworkMessageContentMask_copy =
      _UA_UadpNetworkMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>,
              ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_deleteMembers(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_deleteMembers');
  late final _UA_UadpNetworkMessageContentMask_deleteMembers =
      _UA_UadpNetworkMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_clear(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_clear');
  late final _UA_UadpNetworkMessageContentMask_clear =
      _UA_UadpNetworkMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpNetworkMessageContentMask_delete(
    ffi.Pointer<UA_UadpNetworkMessageContentMask> p,
  ) {
    return _UA_UadpNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpNetworkMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpNetworkMessageContentMask>)>>(
      'UA_UadpNetworkMessageContentMask_delete');
  late final _UA_UadpNetworkMessageContentMask_delete =
      _UA_UadpNetworkMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpNetworkMessageContentMask>)>();

  void UA_UadpWriterGroupMessageDataType_init(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_init');
  late final _UA_UadpWriterGroupMessageDataType_init =
      _UA_UadpWriterGroupMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_UadpWriterGroupMessageDataType>
      UA_UadpWriterGroupMessageDataType_new() {
    return _UA_UadpWriterGroupMessageDataType_new();
  }

  late final _UA_UadpWriterGroupMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpWriterGroupMessageDataType>
              Function()>>('UA_UadpWriterGroupMessageDataType_new');
  late final _UA_UadpWriterGroupMessageDataType_new =
      _UA_UadpWriterGroupMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpWriterGroupMessageDataType> Function()>();

  int UA_UadpWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> src,
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> dst,
  ) {
    return _UA_UadpWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_copy');
  late final _UA_UadpWriterGroupMessageDataType_copy =
      _UA_UadpWriterGroupMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>,
              ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_deleteMembers');
  late final _UA_UadpWriterGroupMessageDataType_deleteMembers =
      _UA_UadpWriterGroupMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_clear');
  late final _UA_UadpWriterGroupMessageDataType_clear =
      _UA_UadpWriterGroupMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_UadpWriterGroupMessageDataType> p,
  ) {
    return _UA_UadpWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpWriterGroupMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>>(
      'UA_UadpWriterGroupMessageDataType_delete');
  late final _UA_UadpWriterGroupMessageDataType_delete =
      _UA_UadpWriterGroupMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpWriterGroupMessageDataType>)>();

  void UA_UadpDataSetMessageContentMask_init(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_init');
  late final _UA_UadpDataSetMessageContentMask_init =
      _UA_UadpDataSetMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  ffi.Pointer<UA_UadpDataSetMessageContentMask>
      UA_UadpDataSetMessageContentMask_new() {
    return _UA_UadpDataSetMessageContentMask_new();
  }

  late final _UA_UadpDataSetMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetMessageContentMask>
              Function()>>('UA_UadpDataSetMessageContentMask_new');
  late final _UA_UadpDataSetMessageContentMask_new =
      _UA_UadpDataSetMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetMessageContentMask> Function()>();

  int UA_UadpDataSetMessageContentMask_copy(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> src,
    ffi.Pointer<UA_UadpDataSetMessageContentMask> dst,
  ) {
    return _UA_UadpDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>,
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_copy');
  late final _UA_UadpDataSetMessageContentMask_copy =
      _UA_UadpDataSetMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>,
              ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_deleteMembers(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_deleteMembers');
  late final _UA_UadpDataSetMessageContentMask_deleteMembers =
      _UA_UadpDataSetMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_clear(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_clear');
  late final _UA_UadpDataSetMessageContentMask_clear =
      _UA_UadpDataSetMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetMessageContentMask_delete(
    ffi.Pointer<UA_UadpDataSetMessageContentMask> p,
  ) {
    return _UA_UadpDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_UadpDataSetMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetMessageContentMask>)>>(
      'UA_UadpDataSetMessageContentMask_delete');
  late final _UA_UadpDataSetMessageContentMask_delete =
      _UA_UadpDataSetMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetMessageContentMask>)>();

  void UA_UadpDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_init');
  late final _UA_UadpDataSetWriterMessageDataType_init =
      _UA_UadpDataSetWriterMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>
      UA_UadpDataSetWriterMessageDataType_new() {
    return _UA_UadpDataSetWriterMessageDataType_new();
  }

  late final _UA_UadpDataSetWriterMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType>
              Function()>>('UA_UadpDataSetWriterMessageDataType_new');
  late final _UA_UadpDataSetWriterMessageDataType_new =
      _UA_UadpDataSetWriterMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetWriterMessageDataType> Function()>();

  int UA_UadpDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> dst,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_copy');
  late final _UA_UadpDataSetWriterMessageDataType_copy =
      _UA_UadpDataSetWriterMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>,
              ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_deleteMembers');
  late final _UA_UadpDataSetWriterMessageDataType_deleteMembers =
      _UA_UadpDataSetWriterMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_clear');
  late final _UA_UadpDataSetWriterMessageDataType_clear =
      _UA_UadpDataSetWriterMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetWriterMessageDataType> p,
  ) {
    return _UA_UadpDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetWriterMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>>(
      'UA_UadpDataSetWriterMessageDataType_delete');
  late final _UA_UadpDataSetWriterMessageDataType_delete =
      _UA_UadpDataSetWriterMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetWriterMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_init');
  late final _UA_UadpDataSetReaderMessageDataType_init =
      _UA_UadpDataSetReaderMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>
      UA_UadpDataSetReaderMessageDataType_new() {
    return _UA_UadpDataSetReaderMessageDataType_new();
  }

  late final _UA_UadpDataSetReaderMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType>
              Function()>>('UA_UadpDataSetReaderMessageDataType_new');
  late final _UA_UadpDataSetReaderMessageDataType_new =
      _UA_UadpDataSetReaderMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_UadpDataSetReaderMessageDataType> Function()>();

  int UA_UadpDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> dst,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_copy');
  late final _UA_UadpDataSetReaderMessageDataType_copy =
      _UA_UadpDataSetReaderMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>,
              ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_deleteMembers(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_deleteMembers');
  late final _UA_UadpDataSetReaderMessageDataType_deleteMembers =
      _UA_UadpDataSetReaderMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_clear');
  late final _UA_UadpDataSetReaderMessageDataType_clear =
      _UA_UadpDataSetReaderMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_UadpDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_UadpDataSetReaderMessageDataType> p,
  ) {
    return _UA_UadpDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_UadpDataSetReaderMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>>(
      'UA_UadpDataSetReaderMessageDataType_delete');
  late final _UA_UadpDataSetReaderMessageDataType_delete =
      _UA_UadpDataSetReaderMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UadpDataSetReaderMessageDataType>)>();

  void UA_JsonNetworkMessageContentMask_init(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_init');
  late final _UA_JsonNetworkMessageContentMask_init =
      _UA_JsonNetworkMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  ffi.Pointer<UA_JsonNetworkMessageContentMask>
      UA_JsonNetworkMessageContentMask_new() {
    return _UA_JsonNetworkMessageContentMask_new();
  }

  late final _UA_JsonNetworkMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonNetworkMessageContentMask>
              Function()>>('UA_JsonNetworkMessageContentMask_new');
  late final _UA_JsonNetworkMessageContentMask_new =
      _UA_JsonNetworkMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_JsonNetworkMessageContentMask> Function()>();

  int UA_JsonNetworkMessageContentMask_copy(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> src,
    ffi.Pointer<UA_JsonNetworkMessageContentMask> dst,
  ) {
    return _UA_JsonNetworkMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>,
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_copy');
  late final _UA_JsonNetworkMessageContentMask_copy =
      _UA_JsonNetworkMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>,
              ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_deleteMembers(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_deleteMembers');
  late final _UA_JsonNetworkMessageContentMask_deleteMembers =
      _UA_JsonNetworkMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_clear(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_clear');
  late final _UA_JsonNetworkMessageContentMask_clear =
      _UA_JsonNetworkMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonNetworkMessageContentMask_delete(
    ffi.Pointer<UA_JsonNetworkMessageContentMask> p,
  ) {
    return _UA_JsonNetworkMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonNetworkMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonNetworkMessageContentMask>)>>(
      'UA_JsonNetworkMessageContentMask_delete');
  late final _UA_JsonNetworkMessageContentMask_delete =
      _UA_JsonNetworkMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonNetworkMessageContentMask>)>();

  void UA_JsonWriterGroupMessageDataType_init(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_init');
  late final _UA_JsonWriterGroupMessageDataType_init =
      _UA_JsonWriterGroupMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  ffi.Pointer<UA_JsonWriterGroupMessageDataType>
      UA_JsonWriterGroupMessageDataType_new() {
    return _UA_JsonWriterGroupMessageDataType_new();
  }

  late final _UA_JsonWriterGroupMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonWriterGroupMessageDataType>
              Function()>>('UA_JsonWriterGroupMessageDataType_new');
  late final _UA_JsonWriterGroupMessageDataType_new =
      _UA_JsonWriterGroupMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonWriterGroupMessageDataType> Function()>();

  int UA_JsonWriterGroupMessageDataType_copy(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> src,
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> dst,
  ) {
    return _UA_JsonWriterGroupMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_copy');
  late final _UA_JsonWriterGroupMessageDataType_copy =
      _UA_JsonWriterGroupMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>,
              ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_deleteMembers');
  late final _UA_JsonWriterGroupMessageDataType_deleteMembers =
      _UA_JsonWriterGroupMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_clear(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_clear');
  late final _UA_JsonWriterGroupMessageDataType_clear =
      _UA_JsonWriterGroupMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonWriterGroupMessageDataType_delete(
    ffi.Pointer<UA_JsonWriterGroupMessageDataType> p,
  ) {
    return _UA_JsonWriterGroupMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonWriterGroupMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>>(
      'UA_JsonWriterGroupMessageDataType_delete');
  late final _UA_JsonWriterGroupMessageDataType_delete =
      _UA_JsonWriterGroupMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonWriterGroupMessageDataType>)>();

  void UA_JsonDataSetMessageContentMask_init(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_init(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_init');
  late final _UA_JsonDataSetMessageContentMask_init =
      _UA_JsonDataSetMessageContentMask_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  ffi.Pointer<UA_JsonDataSetMessageContentMask>
      UA_JsonDataSetMessageContentMask_new() {
    return _UA_JsonDataSetMessageContentMask_new();
  }

  late final _UA_JsonDataSetMessageContentMask_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetMessageContentMask>
              Function()>>('UA_JsonDataSetMessageContentMask_new');
  late final _UA_JsonDataSetMessageContentMask_new =
      _UA_JsonDataSetMessageContentMask_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetMessageContentMask> Function()>();

  int UA_JsonDataSetMessageContentMask_copy(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> src,
    ffi.Pointer<UA_JsonDataSetMessageContentMask> dst,
  ) {
    return _UA_JsonDataSetMessageContentMask_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>,
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_copy');
  late final _UA_JsonDataSetMessageContentMask_copy =
      _UA_JsonDataSetMessageContentMask_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>,
              ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_deleteMembers(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_deleteMembers');
  late final _UA_JsonDataSetMessageContentMask_deleteMembers =
      _UA_JsonDataSetMessageContentMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_clear(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_clear(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_clear');
  late final _UA_JsonDataSetMessageContentMask_clear =
      _UA_JsonDataSetMessageContentMask_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetMessageContentMask_delete(
    ffi.Pointer<UA_JsonDataSetMessageContentMask> p,
  ) {
    return _UA_JsonDataSetMessageContentMask_delete(
      p,
    );
  }

  late final _UA_JsonDataSetMessageContentMask_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetMessageContentMask>)>>(
      'UA_JsonDataSetMessageContentMask_delete');
  late final _UA_JsonDataSetMessageContentMask_delete =
      _UA_JsonDataSetMessageContentMask_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetMessageContentMask>)>();

  void UA_JsonDataSetWriterMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_init');
  late final _UA_JsonDataSetWriterMessageDataType_init =
      _UA_JsonDataSetWriterMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>
      UA_JsonDataSetWriterMessageDataType_new() {
    return _UA_JsonDataSetWriterMessageDataType_new();
  }

  late final _UA_JsonDataSetWriterMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType>
              Function()>>('UA_JsonDataSetWriterMessageDataType_new');
  late final _UA_JsonDataSetWriterMessageDataType_new =
      _UA_JsonDataSetWriterMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetWriterMessageDataType> Function()>();

  int UA_JsonDataSetWriterMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> dst,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_copy');
  late final _UA_JsonDataSetWriterMessageDataType_copy =
      _UA_JsonDataSetWriterMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>,
              ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_deleteMembers');
  late final _UA_JsonDataSetWriterMessageDataType_deleteMembers =
      _UA_JsonDataSetWriterMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_clear');
  late final _UA_JsonDataSetWriterMessageDataType_clear =
      _UA_JsonDataSetWriterMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetWriterMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetWriterMessageDataType> p,
  ) {
    return _UA_JsonDataSetWriterMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetWriterMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>>(
      'UA_JsonDataSetWriterMessageDataType_delete');
  late final _UA_JsonDataSetWriterMessageDataType_delete =
      _UA_JsonDataSetWriterMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetWriterMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_init(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_init(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_init');
  late final _UA_JsonDataSetReaderMessageDataType_init =
      _UA_JsonDataSetReaderMessageDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>
      UA_JsonDataSetReaderMessageDataType_new() {
    return _UA_JsonDataSetReaderMessageDataType_new();
  }

  late final _UA_JsonDataSetReaderMessageDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType>
              Function()>>('UA_JsonDataSetReaderMessageDataType_new');
  late final _UA_JsonDataSetReaderMessageDataType_new =
      _UA_JsonDataSetReaderMessageDataType_newPtr.asFunction<
          ffi.Pointer<UA_JsonDataSetReaderMessageDataType> Function()>();

  int UA_JsonDataSetReaderMessageDataType_copy(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> src,
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> dst,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_copy');
  late final _UA_JsonDataSetReaderMessageDataType_copy =
      _UA_JsonDataSetReaderMessageDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>,
              ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_deleteMembers(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_deleteMembers(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_deleteMembers');
  late final _UA_JsonDataSetReaderMessageDataType_deleteMembers =
      _UA_JsonDataSetReaderMessageDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_clear(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_clear(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_clear');
  late final _UA_JsonDataSetReaderMessageDataType_clear =
      _UA_JsonDataSetReaderMessageDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_JsonDataSetReaderMessageDataType_delete(
    ffi.Pointer<UA_JsonDataSetReaderMessageDataType> p,
  ) {
    return _UA_JsonDataSetReaderMessageDataType_delete(
      p,
    );
  }

  late final _UA_JsonDataSetReaderMessageDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>>(
      'UA_JsonDataSetReaderMessageDataType_delete');
  late final _UA_JsonDataSetReaderMessageDataType_delete =
      _UA_JsonDataSetReaderMessageDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_JsonDataSetReaderMessageDataType>)>();

  void UA_DatagramConnectionTransportDataType_init(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_init');
  late final _UA_DatagramConnectionTransportDataType_init =
      _UA_DatagramConnectionTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  ffi.Pointer<UA_DatagramConnectionTransportDataType>
      UA_DatagramConnectionTransportDataType_new() {
    return _UA_DatagramConnectionTransportDataType_new();
  }

  late final _UA_DatagramConnectionTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DatagramConnectionTransportDataType>
              Function()>>('UA_DatagramConnectionTransportDataType_new');
  late final _UA_DatagramConnectionTransportDataType_new =
      _UA_DatagramConnectionTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_DatagramConnectionTransportDataType> Function()>();

  int UA_DatagramConnectionTransportDataType_copy(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> src,
    ffi.Pointer<UA_DatagramConnectionTransportDataType> dst,
  ) {
    return _UA_DatagramConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>,
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_copy');
  late final _UA_DatagramConnectionTransportDataType_copy =
      _UA_DatagramConnectionTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>,
              ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_deleteMembers(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_deleteMembers');
  late final _UA_DatagramConnectionTransportDataType_deleteMembers =
      _UA_DatagramConnectionTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_clear(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_clear');
  late final _UA_DatagramConnectionTransportDataType_clear =
      _UA_DatagramConnectionTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramConnectionTransportDataType_delete(
    ffi.Pointer<UA_DatagramConnectionTransportDataType> p,
  ) {
    return _UA_DatagramConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramConnectionTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramConnectionTransportDataType>)>>(
      'UA_DatagramConnectionTransportDataType_delete');
  late final _UA_DatagramConnectionTransportDataType_delete =
      _UA_DatagramConnectionTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DatagramConnectionTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_init(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_init');
  late final _UA_DatagramWriterGroupTransportDataType_init =
      _UA_DatagramWriterGroupTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>
      UA_DatagramWriterGroupTransportDataType_new() {
    return _UA_DatagramWriterGroupTransportDataType_new();
  }

  late final _UA_DatagramWriterGroupTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DatagramWriterGroupTransportDataType>
              Function()>>('UA_DatagramWriterGroupTransportDataType_new');
  late final _UA_DatagramWriterGroupTransportDataType_new =
      _UA_DatagramWriterGroupTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_DatagramWriterGroupTransportDataType> Function()>();

  int UA_DatagramWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> src,
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> dst,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_copy');
  late final _UA_DatagramWriterGroupTransportDataType_copy =
      _UA_DatagramWriterGroupTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DatagramWriterGroupTransportDataType>,
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_deleteMembers(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
          'UA_DatagramWriterGroupTransportDataType_deleteMembers');
  late final _UA_DatagramWriterGroupTransportDataType_deleteMembers =
      _UA_DatagramWriterGroupTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_clear');
  late final _UA_DatagramWriterGroupTransportDataType_clear =
      _UA_DatagramWriterGroupTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_DatagramWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_DatagramWriterGroupTransportDataType> p,
  ) {
    return _UA_DatagramWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_DatagramWriterGroupTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>>(
      'UA_DatagramWriterGroupTransportDataType_delete');
  late final _UA_DatagramWriterGroupTransportDataType_delete =
      _UA_DatagramWriterGroupTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_DatagramWriterGroupTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_init(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_init');
  late final _UA_BrokerConnectionTransportDataType_init =
      _UA_BrokerConnectionTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  ffi.Pointer<UA_BrokerConnectionTransportDataType>
      UA_BrokerConnectionTransportDataType_new() {
    return _UA_BrokerConnectionTransportDataType_new();
  }

  late final _UA_BrokerConnectionTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerConnectionTransportDataType>
              Function()>>('UA_BrokerConnectionTransportDataType_new');
  late final _UA_BrokerConnectionTransportDataType_new =
      _UA_BrokerConnectionTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerConnectionTransportDataType> Function()>();

  int UA_BrokerConnectionTransportDataType_copy(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> src,
    ffi.Pointer<UA_BrokerConnectionTransportDataType> dst,
  ) {
    return _UA_BrokerConnectionTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>,
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_copy');
  late final _UA_BrokerConnectionTransportDataType_copy =
      _UA_BrokerConnectionTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>,
              ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_deleteMembers');
  late final _UA_BrokerConnectionTransportDataType_deleteMembers =
      _UA_BrokerConnectionTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_clear(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_clear');
  late final _UA_BrokerConnectionTransportDataType_clear =
      _UA_BrokerConnectionTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerConnectionTransportDataType_delete(
    ffi.Pointer<UA_BrokerConnectionTransportDataType> p,
  ) {
    return _UA_BrokerConnectionTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerConnectionTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerConnectionTransportDataType>)>>(
      'UA_BrokerConnectionTransportDataType_delete');
  late final _UA_BrokerConnectionTransportDataType_delete =
      _UA_BrokerConnectionTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerConnectionTransportDataType>)>();

  void UA_BrokerTransportQualityOfService_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_init(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_init');
  late final _UA_BrokerTransportQualityOfService_init =
      _UA_BrokerTransportQualityOfService_initPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrokerTransportQualityOfService_new() {
    return _UA_BrokerTransportQualityOfService_new();
  }

  late final _UA_BrokerTransportQualityOfService_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrokerTransportQualityOfService_new');
  late final _UA_BrokerTransportQualityOfService_new =
      _UA_BrokerTransportQualityOfService_newPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrokerTransportQualityOfService_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrokerTransportQualityOfService_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerTransportQualityOfService_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>(
      'UA_BrokerTransportQualityOfService_copy');
  late final _UA_BrokerTransportQualityOfService_copy =
      _UA_BrokerTransportQualityOfService_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_deleteMembers');
  late final _UA_BrokerTransportQualityOfService_deleteMembers =
      _UA_BrokerTransportQualityOfService_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_clear(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_clear');
  late final _UA_BrokerTransportQualityOfService_clear =
      _UA_BrokerTransportQualityOfService_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerTransportQualityOfService_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrokerTransportQualityOfService_delete(
      p,
    );
  }

  late final _UA_BrokerTransportQualityOfService_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrokerTransportQualityOfService_delete');
  late final _UA_BrokerTransportQualityOfService_delete =
      _UA_BrokerTransportQualityOfService_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrokerWriterGroupTransportDataType_init(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_init');
  late final _UA_BrokerWriterGroupTransportDataType_init =
      _UA_BrokerWriterGroupTransportDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>
      UA_BrokerWriterGroupTransportDataType_new() {
    return _UA_BrokerWriterGroupTransportDataType_new();
  }

  late final _UA_BrokerWriterGroupTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType>
              Function()>>('UA_BrokerWriterGroupTransportDataType_new');
  late final _UA_BrokerWriterGroupTransportDataType_new =
      _UA_BrokerWriterGroupTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerWriterGroupTransportDataType> Function()>();

  int UA_BrokerWriterGroupTransportDataType_copy(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> src,
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> dst,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_copy');
  late final _UA_BrokerWriterGroupTransportDataType_copy =
      _UA_BrokerWriterGroupTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>,
              ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_deleteMembers');
  late final _UA_BrokerWriterGroupTransportDataType_deleteMembers =
      _UA_BrokerWriterGroupTransportDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_clear(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_clear');
  late final _UA_BrokerWriterGroupTransportDataType_clear =
      _UA_BrokerWriterGroupTransportDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerWriterGroupTransportDataType_delete(
    ffi.Pointer<UA_BrokerWriterGroupTransportDataType> p,
  ) {
    return _UA_BrokerWriterGroupTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerWriterGroupTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>>(
      'UA_BrokerWriterGroupTransportDataType_delete');
  late final _UA_BrokerWriterGroupTransportDataType_delete =
      _UA_BrokerWriterGroupTransportDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_BrokerWriterGroupTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_init');
  late final _UA_BrokerDataSetWriterTransportDataType_init =
      _UA_BrokerDataSetWriterTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>
      UA_BrokerDataSetWriterTransportDataType_new() {
    return _UA_BrokerDataSetWriterTransportDataType_new();
  }

  late final _UA_BrokerDataSetWriterTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>
              Function()>>('UA_BrokerDataSetWriterTransportDataType_new');
  late final _UA_BrokerDataSetWriterTransportDataType_new =
      _UA_BrokerDataSetWriterTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> Function()>();

  int UA_BrokerDataSetWriterTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_copy');
  late final _UA_BrokerDataSetWriterTransportDataType_copy =
      _UA_BrokerDataSetWriterTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
          'UA_BrokerDataSetWriterTransportDataType_deleteMembers');
  late final _UA_BrokerDataSetWriterTransportDataType_deleteMembers =
      _UA_BrokerDataSetWriterTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_clear');
  late final _UA_BrokerDataSetWriterTransportDataType_clear =
      _UA_BrokerDataSetWriterTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetWriterTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetWriterTransportDataType> p,
  ) {
    return _UA_BrokerDataSetWriterTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetWriterTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>>(
      'UA_BrokerDataSetWriterTransportDataType_delete');
  late final _UA_BrokerDataSetWriterTransportDataType_delete =
      _UA_BrokerDataSetWriterTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetWriterTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_init(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_init(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_init');
  late final _UA_BrokerDataSetReaderTransportDataType_init =
      _UA_BrokerDataSetReaderTransportDataType_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>
      UA_BrokerDataSetReaderTransportDataType_new() {
    return _UA_BrokerDataSetReaderTransportDataType_new();
  }

  late final _UA_BrokerDataSetReaderTransportDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>
              Function()>>('UA_BrokerDataSetReaderTransportDataType_new');
  late final _UA_BrokerDataSetReaderTransportDataType_new =
      _UA_BrokerDataSetReaderTransportDataType_newPtr.asFunction<
          ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> Function()>();

  int UA_BrokerDataSetReaderTransportDataType_copy(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> src,
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> dst,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_copy');
  late final _UA_BrokerDataSetReaderTransportDataType_copy =
      _UA_BrokerDataSetReaderTransportDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>,
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_deleteMembers(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_deleteMembers(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
          'UA_BrokerDataSetReaderTransportDataType_deleteMembers');
  late final _UA_BrokerDataSetReaderTransportDataType_deleteMembers =
      _UA_BrokerDataSetReaderTransportDataType_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_clear(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_clear(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_clear');
  late final _UA_BrokerDataSetReaderTransportDataType_clear =
      _UA_BrokerDataSetReaderTransportDataType_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_BrokerDataSetReaderTransportDataType_delete(
    ffi.Pointer<UA_BrokerDataSetReaderTransportDataType> p,
  ) {
    return _UA_BrokerDataSetReaderTransportDataType_delete(
      p,
    );
  }

  late final _UA_BrokerDataSetReaderTransportDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>>(
      'UA_BrokerDataSetReaderTransportDataType_delete');
  late final _UA_BrokerDataSetReaderTransportDataType_delete =
      _UA_BrokerDataSetReaderTransportDataType_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_BrokerDataSetReaderTransportDataType>)>();

  void UA_NodeClass_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_init(
      p,
    );
  }

  late final _UA_NodeClass_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_init');
  late final _UA_NodeClass_init =
      _UA_NodeClass_initPtr.asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_NodeClass_new() {
    return _UA_NodeClass_new();
  }

  late final _UA_NodeClass_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_NodeClass_new');
  late final _UA_NodeClass_new =
      _UA_NodeClass_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_NodeClass_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_NodeClass_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeClass_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_NodeClass_copy');
  late final _UA_NodeClass_copy = _UA_NodeClass_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_deleteMembers(
      p,
    );
  }

  late final _UA_NodeClass_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_deleteMembers');
  late final _UA_NodeClass_deleteMembers = _UA_NodeClass_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_clear(
      p,
    );
  }

  late final _UA_NodeClass_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_clear');
  late final _UA_NodeClass_clear = _UA_NodeClass_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeClass_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeClass_delete(
      p,
    );
  }

  late final _UA_NodeClass_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeClass_delete');
  late final _UA_NodeClass_delete = _UA_NodeClass_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_PermissionType_init(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_init(
      p,
    );
  }

  late final _UA_PermissionType_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_init');
  late final _UA_PermissionType_init = _UA_PermissionType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PermissionType>)>();

  ffi.Pointer<UA_PermissionType> UA_PermissionType_new() {
    return _UA_PermissionType_new();
  }

  late final _UA_PermissionType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PermissionType> Function()>>(
          'UA_PermissionType_new');
  late final _UA_PermissionType_new = _UA_PermissionType_newPtr.asFunction<
      ffi.Pointer<UA_PermissionType> Function()>();

  int UA_PermissionType_copy(
    ffi.Pointer<UA_PermissionType> src,
    ffi.Pointer<UA_PermissionType> dst,
  ) {
    return _UA_PermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_PermissionType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PermissionType>,
              ffi.Pointer<UA_PermissionType>)>>('UA_PermissionType_copy');
  late final _UA_PermissionType_copy = _UA_PermissionType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PermissionType>, ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_deleteMembers(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_deleteMembers(
      p,
    );
  }

  late final _UA_PermissionType_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_deleteMembers');
  late final _UA_PermissionType_deleteMembers =
      _UA_PermissionType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_clear(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_clear(
      p,
    );
  }

  late final _UA_PermissionType_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_clear');
  late final _UA_PermissionType_clear = _UA_PermissionType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_PermissionType_delete(
    ffi.Pointer<UA_PermissionType> p,
  ) {
    return _UA_PermissionType_delete(
      p,
    );
  }

  late final _UA_PermissionType_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PermissionType>)>>(
      'UA_PermissionType_delete');
  late final _UA_PermissionType_delete = _UA_PermissionType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PermissionType>)>();

  void UA_RolePermissionType_init(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_init(
      p,
    );
  }

  late final _UA_RolePermissionType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_init');
  late final _UA_RolePermissionType_init = _UA_RolePermissionType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  ffi.Pointer<UA_RolePermissionType> UA_RolePermissionType_new() {
    return _UA_RolePermissionType_new();
  }

  late final _UA_RolePermissionType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RolePermissionType> Function()>>(
      'UA_RolePermissionType_new');
  late final _UA_RolePermissionType_new = _UA_RolePermissionType_newPtr
      .asFunction<ffi.Pointer<UA_RolePermissionType> Function()>();

  int UA_RolePermissionType_copy(
    ffi.Pointer<UA_RolePermissionType> src,
    ffi.Pointer<UA_RolePermissionType> dst,
  ) {
    return _UA_RolePermissionType_copy(
      src,
      dst,
    );
  }

  late final _UA_RolePermissionType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RolePermissionType>,
                  ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_copy');
  late final _UA_RolePermissionType_copy =
      _UA_RolePermissionType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RolePermissionType>,
              ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_deleteMembers(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_deleteMembers(
      p,
    );
  }

  late final _UA_RolePermissionType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_deleteMembers');
  late final _UA_RolePermissionType_deleteMembers =
      _UA_RolePermissionType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_clear(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_clear(
      p,
    );
  }

  late final _UA_RolePermissionType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_clear');
  late final _UA_RolePermissionType_clear = _UA_RolePermissionType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_RolePermissionType_delete(
    ffi.Pointer<UA_RolePermissionType> p,
  ) {
    return _UA_RolePermissionType_delete(
      p,
    );
  }

  late final _UA_RolePermissionType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RolePermissionType>)>>(
      'UA_RolePermissionType_delete');
  late final _UA_RolePermissionType_delete = _UA_RolePermissionType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RolePermissionType>)>();

  void UA_StructureType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_init(
      p,
    );
  }

  late final _UA_StructureType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_init');
  late final _UA_StructureType_init = _UA_StructureType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_StructureType_new() {
    return _UA_StructureType_new();
  }

  late final _UA_StructureType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_StructureType_new');
  late final _UA_StructureType_new =
      _UA_StructureType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_StructureType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_StructureType_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_StructureType_copy');
  late final _UA_StructureType_copy = _UA_StructureType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_deleteMembers(
      p,
    );
  }

  late final _UA_StructureType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_deleteMembers');
  late final _UA_StructureType_deleteMembers =
      _UA_StructureType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_clear(
      p,
    );
  }

  late final _UA_StructureType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_clear');
  late final _UA_StructureType_clear = _UA_StructureType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_StructureType_delete(
      p,
    );
  }

  late final _UA_StructureType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_StructureType_delete');
  late final _UA_StructureType_delete = _UA_StructureType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_StructureField_init(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_init(
      p,
    );
  }

  late final _UA_StructureField_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_init');
  late final _UA_StructureField_init = _UA_StructureField_initPtr.asFunction<
      void Function(ffi.Pointer<UA_StructureField>)>();

  ffi.Pointer<UA_StructureField> UA_StructureField_new() {
    return _UA_StructureField_new();
  }

  late final _UA_StructureField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_StructureField> Function()>>(
          'UA_StructureField_new');
  late final _UA_StructureField_new = _UA_StructureField_newPtr.asFunction<
      ffi.Pointer<UA_StructureField> Function()>();

  int UA_StructureField_copy(
    ffi.Pointer<UA_StructureField> src,
    ffi.Pointer<UA_StructureField> dst,
  ) {
    return _UA_StructureField_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureField_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_StructureField>,
              ffi.Pointer<UA_StructureField>)>>('UA_StructureField_copy');
  late final _UA_StructureField_copy = _UA_StructureField_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_StructureField>, ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_deleteMembers(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_deleteMembers(
      p,
    );
  }

  late final _UA_StructureField_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_deleteMembers');
  late final _UA_StructureField_deleteMembers =
      _UA_StructureField_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_clear(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_clear(
      p,
    );
  }

  late final _UA_StructureField_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_clear');
  late final _UA_StructureField_clear = _UA_StructureField_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureField_delete(
    ffi.Pointer<UA_StructureField> p,
  ) {
    return _UA_StructureField_delete(
      p,
    );
  }

  late final _UA_StructureField_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_StructureField>)>>(
      'UA_StructureField_delete');
  late final _UA_StructureField_delete = _UA_StructureField_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StructureField>)>();

  void UA_StructureDefinition_init(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_init(
      p,
    );
  }

  late final _UA_StructureDefinition_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_init');
  late final _UA_StructureDefinition_init = _UA_StructureDefinition_initPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  ffi.Pointer<UA_StructureDefinition> UA_StructureDefinition_new() {
    return _UA_StructureDefinition_new();
  }

  late final _UA_StructureDefinition_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_StructureDefinition> Function()>>(
      'UA_StructureDefinition_new');
  late final _UA_StructureDefinition_new = _UA_StructureDefinition_newPtr
      .asFunction<ffi.Pointer<UA_StructureDefinition> Function()>();

  int UA_StructureDefinition_copy(
    ffi.Pointer<UA_StructureDefinition> src,
    ffi.Pointer<UA_StructureDefinition> dst,
  ) {
    return _UA_StructureDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDefinition_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StructureDefinition>,
                  ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_copy');
  late final _UA_StructureDefinition_copy =
      _UA_StructureDefinition_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StructureDefinition>,
              ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_deleteMembers(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_deleteMembers(
      p,
    );
  }

  late final _UA_StructureDefinition_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_deleteMembers');
  late final _UA_StructureDefinition_deleteMembers =
      _UA_StructureDefinition_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_clear(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_clear(
      p,
    );
  }

  late final _UA_StructureDefinition_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_clear');
  late final _UA_StructureDefinition_clear = _UA_StructureDefinition_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_StructureDefinition_delete(
    ffi.Pointer<UA_StructureDefinition> p,
  ) {
    return _UA_StructureDefinition_delete(
      p,
    );
  }

  late final _UA_StructureDefinition_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDefinition>)>>(
      'UA_StructureDefinition_delete');
  late final _UA_StructureDefinition_delete = _UA_StructureDefinition_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDefinition>)>();

  void UA_Argument_init(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_init(
      p,
    );
  }

  late final _UA_Argument_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_init');
  late final _UA_Argument_init = _UA_Argument_initPtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  ffi.Pointer<UA_Argument> UA_Argument_new() {
    return _UA_Argument_new();
  }

  late final _UA_Argument_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Argument> Function()>>(
          'UA_Argument_new');
  late final _UA_Argument_new =
      _UA_Argument_newPtr.asFunction<ffi.Pointer<UA_Argument> Function()>();

  int UA_Argument_copy(
    ffi.Pointer<UA_Argument> src,
    ffi.Pointer<UA_Argument> dst,
  ) {
    return _UA_Argument_copy(
      src,
      dst,
    );
  }

  late final _UA_Argument_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Argument>,
              ffi.Pointer<UA_Argument>)>>('UA_Argument_copy');
  late final _UA_Argument_copy = _UA_Argument_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Argument>, ffi.Pointer<UA_Argument>)>();

  void UA_Argument_deleteMembers(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_deleteMembers(
      p,
    );
  }

  late final _UA_Argument_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_deleteMembers');
  late final _UA_Argument_deleteMembers = _UA_Argument_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Argument>)>();

  void UA_Argument_clear(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_clear(
      p,
    );
  }

  late final _UA_Argument_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_clear');
  late final _UA_Argument_clear = _UA_Argument_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  void UA_Argument_delete(
    ffi.Pointer<UA_Argument> p,
  ) {
    return _UA_Argument_delete(
      p,
    );
  }

  late final _UA_Argument_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Argument>)>>(
          'UA_Argument_delete');
  late final _UA_Argument_delete = _UA_Argument_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Argument>)>();

  void UA_EnumValueType_init(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_init(
      p,
    );
  }

  late final _UA_EnumValueType_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_init');
  late final _UA_EnumValueType_init = _UA_EnumValueType_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  ffi.Pointer<UA_EnumValueType> UA_EnumValueType_new() {
    return _UA_EnumValueType_new();
  }

  late final _UA_EnumValueType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumValueType> Function()>>(
          'UA_EnumValueType_new');
  late final _UA_EnumValueType_new = _UA_EnumValueType_newPtr.asFunction<
      ffi.Pointer<UA_EnumValueType> Function()>();

  int UA_EnumValueType_copy(
    ffi.Pointer<UA_EnumValueType> src,
    ffi.Pointer<UA_EnumValueType> dst,
  ) {
    return _UA_EnumValueType_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumValueType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumValueType>,
              ffi.Pointer<UA_EnumValueType>)>>('UA_EnumValueType_copy');
  late final _UA_EnumValueType_copy = _UA_EnumValueType_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumValueType>, ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_deleteMembers(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_deleteMembers(
      p,
    );
  }

  late final _UA_EnumValueType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_deleteMembers');
  late final _UA_EnumValueType_deleteMembers =
      _UA_EnumValueType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_clear(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_clear(
      p,
    );
  }

  late final _UA_EnumValueType_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_clear');
  late final _UA_EnumValueType_clear = _UA_EnumValueType_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumValueType_delete(
    ffi.Pointer<UA_EnumValueType> p,
  ) {
    return _UA_EnumValueType_delete(
      p,
    );
  }

  late final _UA_EnumValueType_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumValueType>)>>(
      'UA_EnumValueType_delete');
  late final _UA_EnumValueType_delete = _UA_EnumValueType_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EnumValueType>)>();

  void UA_EnumField_init(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_init(
      p,
    );
  }

  late final _UA_EnumField_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_init');
  late final _UA_EnumField_init = _UA_EnumField_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  ffi.Pointer<UA_EnumField> UA_EnumField_new() {
    return _UA_EnumField_new();
  }

  late final _UA_EnumField_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumField> Function()>>(
          'UA_EnumField_new');
  late final _UA_EnumField_new =
      _UA_EnumField_newPtr.asFunction<ffi.Pointer<UA_EnumField> Function()>();

  int UA_EnumField_copy(
    ffi.Pointer<UA_EnumField> src,
    ffi.Pointer<UA_EnumField> dst,
  ) {
    return _UA_EnumField_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumField_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumField>,
              ffi.Pointer<UA_EnumField>)>>('UA_EnumField_copy');
  late final _UA_EnumField_copy = _UA_EnumField_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EnumField>, ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_deleteMembers(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_deleteMembers(
      p,
    );
  }

  late final _UA_EnumField_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_deleteMembers');
  late final _UA_EnumField_deleteMembers = _UA_EnumField_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_clear(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_clear(
      p,
    );
  }

  late final _UA_EnumField_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_clear');
  late final _UA_EnumField_clear = _UA_EnumField_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_EnumField_delete(
    ffi.Pointer<UA_EnumField> p,
  ) {
    return _UA_EnumField_delete(
      p,
    );
  }

  late final _UA_EnumField_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumField>)>>(
          'UA_EnumField_delete');
  late final _UA_EnumField_delete = _UA_EnumField_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EnumField>)>();

  void UA_Duration_init(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_init(
      p,
    );
  }

  late final _UA_Duration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_init');
  late final _UA_Duration_init = _UA_Duration_initPtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  ffi.Pointer<UA_Duration> UA_Duration_new() {
    return _UA_Duration_new();
  }

  late final _UA_Duration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Duration> Function()>>(
          'UA_Duration_new');
  late final _UA_Duration_new =
      _UA_Duration_newPtr.asFunction<ffi.Pointer<UA_Duration> Function()>();

  int UA_Duration_copy(
    ffi.Pointer<UA_Duration> src,
    ffi.Pointer<UA_Duration> dst,
  ) {
    return _UA_Duration_copy(
      src,
      dst,
    );
  }

  late final _UA_Duration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Duration>,
              ffi.Pointer<UA_Duration>)>>('UA_Duration_copy');
  late final _UA_Duration_copy = _UA_Duration_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Duration>, ffi.Pointer<UA_Duration>)>();

  void UA_Duration_deleteMembers(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_deleteMembers(
      p,
    );
  }

  late final _UA_Duration_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_deleteMembers');
  late final _UA_Duration_deleteMembers = _UA_Duration_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_Duration>)>();

  void UA_Duration_clear(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_clear(
      p,
    );
  }

  late final _UA_Duration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_clear');
  late final _UA_Duration_clear = _UA_Duration_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  void UA_Duration_delete(
    ffi.Pointer<UA_Duration> p,
  ) {
    return _UA_Duration_delete(
      p,
    );
  }

  late final _UA_Duration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Duration>)>>(
          'UA_Duration_delete');
  late final _UA_Duration_delete = _UA_Duration_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Duration>)>();

  void UA_UtcTime_init(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_init(
      p,
    );
  }

  late final _UA_UtcTime_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_init');
  late final _UA_UtcTime_init =
      _UA_UtcTime_initPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  ffi.Pointer<UA_UtcTime> UA_UtcTime_new() {
    return _UA_UtcTime_new();
  }

  late final _UA_UtcTime_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UtcTime> Function()>>(
          'UA_UtcTime_new');
  late final _UA_UtcTime_new =
      _UA_UtcTime_newPtr.asFunction<ffi.Pointer<UA_UtcTime> Function()>();

  int UA_UtcTime_copy(
    ffi.Pointer<UA_UtcTime> src,
    ffi.Pointer<UA_UtcTime> dst,
  ) {
    return _UA_UtcTime_copy(
      src,
      dst,
    );
  }

  late final _UA_UtcTime_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UtcTime>,
              ffi.Pointer<UA_UtcTime>)>>('UA_UtcTime_copy');
  late final _UA_UtcTime_copy = _UA_UtcTime_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_UtcTime>, ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_deleteMembers(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_deleteMembers(
      p,
    );
  }

  late final _UA_UtcTime_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_deleteMembers');
  late final _UA_UtcTime_deleteMembers = _UA_UtcTime_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_clear(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_clear(
      p,
    );
  }

  late final _UA_UtcTime_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_clear');
  late final _UA_UtcTime_clear =
      _UA_UtcTime_clearPtr.asFunction<void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_UtcTime_delete(
    ffi.Pointer<UA_UtcTime> p,
  ) {
    return _UA_UtcTime_delete(
      p,
    );
  }

  late final _UA_UtcTime_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_UtcTime>)>>(
          'UA_UtcTime_delete');
  late final _UA_UtcTime_delete = _UA_UtcTime_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_UtcTime>)>();

  void UA_LocaleId_init(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_init(
      p,
    );
  }

  late final _UA_LocaleId_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_init');
  late final _UA_LocaleId_init = _UA_LocaleId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  ffi.Pointer<UA_LocaleId> UA_LocaleId_new() {
    return _UA_LocaleId_new();
  }

  late final _UA_LocaleId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LocaleId> Function()>>(
          'UA_LocaleId_new');
  late final _UA_LocaleId_new =
      _UA_LocaleId_newPtr.asFunction<ffi.Pointer<UA_LocaleId> Function()>();

  int UA_LocaleId_copy(
    ffi.Pointer<UA_LocaleId> src,
    ffi.Pointer<UA_LocaleId> dst,
  ) {
    return _UA_LocaleId_copy(
      src,
      dst,
    );
  }

  late final _UA_LocaleId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LocaleId>,
              ffi.Pointer<UA_LocaleId>)>>('UA_LocaleId_copy');
  late final _UA_LocaleId_copy = _UA_LocaleId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_LocaleId>, ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_deleteMembers(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_deleteMembers(
      p,
    );
  }

  late final _UA_LocaleId_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_deleteMembers');
  late final _UA_LocaleId_deleteMembers = _UA_LocaleId_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_clear(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_clear(
      p,
    );
  }

  late final _UA_LocaleId_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_clear');
  late final _UA_LocaleId_clear = _UA_LocaleId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_LocaleId_delete(
    ffi.Pointer<UA_LocaleId> p,
  ) {
    return _UA_LocaleId_delete(
      p,
    );
  }

  late final _UA_LocaleId_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_LocaleId>)>>(
          'UA_LocaleId_delete');
  late final _UA_LocaleId_delete = _UA_LocaleId_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_LocaleId>)>();

  void UA_TimeZoneDataType_init(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_init(
      p,
    );
  }

  late final _UA_TimeZoneDataType_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_init');
  late final _UA_TimeZoneDataType_init = _UA_TimeZoneDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  ffi.Pointer<UA_TimeZoneDataType> UA_TimeZoneDataType_new() {
    return _UA_TimeZoneDataType_new();
  }

  late final _UA_TimeZoneDataType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TimeZoneDataType> Function()>>(
          'UA_TimeZoneDataType_new');
  late final _UA_TimeZoneDataType_new = _UA_TimeZoneDataType_newPtr.asFunction<
      ffi.Pointer<UA_TimeZoneDataType> Function()>();

  int UA_TimeZoneDataType_copy(
    ffi.Pointer<UA_TimeZoneDataType> src,
    ffi.Pointer<UA_TimeZoneDataType> dst,
  ) {
    return _UA_TimeZoneDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TimeZoneDataType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TimeZoneDataType>,
              ffi.Pointer<UA_TimeZoneDataType>)>>('UA_TimeZoneDataType_copy');
  late final _UA_TimeZoneDataType_copy =
      _UA_TimeZoneDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TimeZoneDataType>,
              ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_deleteMembers(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_deleteMembers(
      p,
    );
  }

  late final _UA_TimeZoneDataType_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_deleteMembers');
  late final _UA_TimeZoneDataType_deleteMembers =
      _UA_TimeZoneDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_clear(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_clear(
      p,
    );
  }

  late final _UA_TimeZoneDataType_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_clear');
  late final _UA_TimeZoneDataType_clear = _UA_TimeZoneDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_TimeZoneDataType_delete(
    ffi.Pointer<UA_TimeZoneDataType> p,
  ) {
    return _UA_TimeZoneDataType_delete(
      p,
    );
  }

  late final _UA_TimeZoneDataType_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TimeZoneDataType>)>>(
      'UA_TimeZoneDataType_delete');
  late final _UA_TimeZoneDataType_delete = _UA_TimeZoneDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TimeZoneDataType>)>();

  void UA_ApplicationType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_init(
      p,
    );
  }

  late final _UA_ApplicationType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_init');
  late final _UA_ApplicationType_init = _UA_ApplicationType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_ApplicationType_new() {
    return _UA_ApplicationType_new();
  }

  late final _UA_ApplicationType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_ApplicationType_new');
  late final _UA_ApplicationType_new = _UA_ApplicationType_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_ApplicationType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_ApplicationType_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_ApplicationType_copy');
  late final _UA_ApplicationType_copy = _UA_ApplicationType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_deleteMembers(
      p,
    );
  }

  late final _UA_ApplicationType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_deleteMembers');
  late final _UA_ApplicationType_deleteMembers =
      _UA_ApplicationType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_clear(
      p,
    );
  }

  late final _UA_ApplicationType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_clear');
  late final _UA_ApplicationType_clear = _UA_ApplicationType_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ApplicationType_delete(
      p,
    );
  }

  late final _UA_ApplicationType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ApplicationType_delete');
  late final _UA_ApplicationType_delete = _UA_ApplicationType_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ApplicationDescription_init(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_init(
      p,
    );
  }

  late final _UA_ApplicationDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_init');
  late final _UA_ApplicationDescription_init =
      _UA_ApplicationDescription_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  ffi.Pointer<UA_ApplicationDescription> UA_ApplicationDescription_new() {
    return _UA_ApplicationDescription_new();
  }

  late final _UA_ApplicationDescription_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ApplicationDescription> Function()>>(
      'UA_ApplicationDescription_new');
  late final _UA_ApplicationDescription_new = _UA_ApplicationDescription_newPtr
      .asFunction<ffi.Pointer<UA_ApplicationDescription> Function()>();

  int UA_ApplicationDescription_copy(
    ffi.Pointer<UA_ApplicationDescription> src,
    ffi.Pointer<UA_ApplicationDescription> dst,
  ) {
    return _UA_ApplicationDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ApplicationDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ApplicationDescription>,
                  ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_copy');
  late final _UA_ApplicationDescription_copy =
      _UA_ApplicationDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ApplicationDescription>,
              ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_deleteMembers(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ApplicationDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_deleteMembers');
  late final _UA_ApplicationDescription_deleteMembers =
      _UA_ApplicationDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_clear(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_clear(
      p,
    );
  }

  late final _UA_ApplicationDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_clear');
  late final _UA_ApplicationDescription_clear =
      _UA_ApplicationDescription_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_ApplicationDescription_delete(
    ffi.Pointer<UA_ApplicationDescription> p,
  ) {
    return _UA_ApplicationDescription_delete(
      p,
    );
  }

  late final _UA_ApplicationDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ApplicationDescription>)>>(
      'UA_ApplicationDescription_delete');
  late final _UA_ApplicationDescription_delete =
      _UA_ApplicationDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ApplicationDescription>)>();

  void UA_RequestHeader_init(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_init(
      p,
    );
  }

  late final _UA_RequestHeader_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_init');
  late final _UA_RequestHeader_init = _UA_RequestHeader_initPtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  ffi.Pointer<UA_RequestHeader> UA_RequestHeader_new() {
    return _UA_RequestHeader_new();
  }

  late final _UA_RequestHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RequestHeader> Function()>>(
          'UA_RequestHeader_new');
  late final _UA_RequestHeader_new = _UA_RequestHeader_newPtr.asFunction<
      ffi.Pointer<UA_RequestHeader> Function()>();

  int UA_RequestHeader_copy(
    ffi.Pointer<UA_RequestHeader> src,
    ffi.Pointer<UA_RequestHeader> dst,
  ) {
    return _UA_RequestHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_RequestHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RequestHeader>,
              ffi.Pointer<UA_RequestHeader>)>>('UA_RequestHeader_copy');
  late final _UA_RequestHeader_copy = _UA_RequestHeader_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_RequestHeader>, ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_deleteMembers(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_deleteMembers(
      p,
    );
  }

  late final _UA_RequestHeader_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_deleteMembers');
  late final _UA_RequestHeader_deleteMembers =
      _UA_RequestHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_clear(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_clear(
      p,
    );
  }

  late final _UA_RequestHeader_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_clear');
  late final _UA_RequestHeader_clear = _UA_RequestHeader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_RequestHeader_delete(
    ffi.Pointer<UA_RequestHeader> p,
  ) {
    return _UA_RequestHeader_delete(
      p,
    );
  }

  late final _UA_RequestHeader_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RequestHeader>)>>(
      'UA_RequestHeader_delete');
  late final _UA_RequestHeader_delete = _UA_RequestHeader_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_RequestHeader>)>();

  void UA_ResponseHeader_init(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_init(
      p,
    );
  }

  late final _UA_ResponseHeader_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_init');
  late final _UA_ResponseHeader_init = _UA_ResponseHeader_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ResponseHeader>)>();

  ffi.Pointer<UA_ResponseHeader> UA_ResponseHeader_new() {
    return _UA_ResponseHeader_new();
  }

  late final _UA_ResponseHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ResponseHeader> Function()>>(
          'UA_ResponseHeader_new');
  late final _UA_ResponseHeader_new = _UA_ResponseHeader_newPtr.asFunction<
      ffi.Pointer<UA_ResponseHeader> Function()>();

  int UA_ResponseHeader_copy(
    ffi.Pointer<UA_ResponseHeader> src,
    ffi.Pointer<UA_ResponseHeader> dst,
  ) {
    return _UA_ResponseHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_ResponseHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ResponseHeader>,
              ffi.Pointer<UA_ResponseHeader>)>>('UA_ResponseHeader_copy');
  late final _UA_ResponseHeader_copy = _UA_ResponseHeader_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ResponseHeader>, ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_deleteMembers(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_deleteMembers(
      p,
    );
  }

  late final _UA_ResponseHeader_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_deleteMembers');
  late final _UA_ResponseHeader_deleteMembers =
      _UA_ResponseHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_clear(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_clear(
      p,
    );
  }

  late final _UA_ResponseHeader_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_clear');
  late final _UA_ResponseHeader_clear = _UA_ResponseHeader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ResponseHeader_delete(
    ffi.Pointer<UA_ResponseHeader> p,
  ) {
    return _UA_ResponseHeader_delete(
      p,
    );
  }

  late final _UA_ResponseHeader_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ResponseHeader>)>>(
      'UA_ResponseHeader_delete');
  late final _UA_ResponseHeader_delete = _UA_ResponseHeader_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ResponseHeader>)>();

  void UA_ServiceFault_init(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_init(
      p,
    );
  }

  late final _UA_ServiceFault_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_init');
  late final _UA_ServiceFault_init = _UA_ServiceFault_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  ffi.Pointer<UA_ServiceFault> UA_ServiceFault_new() {
    return _UA_ServiceFault_new();
  }

  late final _UA_ServiceFault_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ServiceFault> Function()>>(
          'UA_ServiceFault_new');
  late final _UA_ServiceFault_new = _UA_ServiceFault_newPtr.asFunction<
      ffi.Pointer<UA_ServiceFault> Function()>();

  int UA_ServiceFault_copy(
    ffi.Pointer<UA_ServiceFault> src,
    ffi.Pointer<UA_ServiceFault> dst,
  ) {
    return _UA_ServiceFault_copy(
      src,
      dst,
    );
  }

  late final _UA_ServiceFault_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServiceFault>,
              ffi.Pointer<UA_ServiceFault>)>>('UA_ServiceFault_copy');
  late final _UA_ServiceFault_copy = _UA_ServiceFault_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ServiceFault>, ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_deleteMembers(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_deleteMembers(
      p,
    );
  }

  late final _UA_ServiceFault_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_deleteMembers');
  late final _UA_ServiceFault_deleteMembers = _UA_ServiceFault_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_clear(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_clear(
      p,
    );
  }

  late final _UA_ServiceFault_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_clear');
  late final _UA_ServiceFault_clear = _UA_ServiceFault_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_ServiceFault_delete(
    ffi.Pointer<UA_ServiceFault> p,
  ) {
    return _UA_ServiceFault_delete(
      p,
    );
  }

  late final _UA_ServiceFault_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServiceFault>)>>(
      'UA_ServiceFault_delete');
  late final _UA_ServiceFault_delete = _UA_ServiceFault_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ServiceFault>)>();

  void UA_FindServersRequest_init(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_init(
      p,
    );
  }

  late final _UA_FindServersRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_init');
  late final _UA_FindServersRequest_init = _UA_FindServersRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  ffi.Pointer<UA_FindServersRequest> UA_FindServersRequest_new() {
    return _UA_FindServersRequest_new();
  }

  late final _UA_FindServersRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FindServersRequest> Function()>>(
      'UA_FindServersRequest_new');
  late final _UA_FindServersRequest_new = _UA_FindServersRequest_newPtr
      .asFunction<ffi.Pointer<UA_FindServersRequest> Function()>();

  int UA_FindServersRequest_copy(
    ffi.Pointer<UA_FindServersRequest> src,
    ffi.Pointer<UA_FindServersRequest> dst,
  ) {
    return _UA_FindServersRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FindServersRequest>,
                  ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_copy');
  late final _UA_FindServersRequest_copy =
      _UA_FindServersRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FindServersRequest>,
              ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_deleteMembers(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_deleteMembers(
      p,
    );
  }

  late final _UA_FindServersRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_deleteMembers');
  late final _UA_FindServersRequest_deleteMembers =
      _UA_FindServersRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_clear(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_clear(
      p,
    );
  }

  late final _UA_FindServersRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_clear');
  late final _UA_FindServersRequest_clear = _UA_FindServersRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersRequest_delete(
    ffi.Pointer<UA_FindServersRequest> p,
  ) {
    return _UA_FindServersRequest_delete(
      p,
    );
  }

  late final _UA_FindServersRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersRequest>)>>(
      'UA_FindServersRequest_delete');
  late final _UA_FindServersRequest_delete = _UA_FindServersRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersRequest>)>();

  void UA_FindServersResponse_init(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_init(
      p,
    );
  }

  late final _UA_FindServersResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_init');
  late final _UA_FindServersResponse_init = _UA_FindServersResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  ffi.Pointer<UA_FindServersResponse> UA_FindServersResponse_new() {
    return _UA_FindServersResponse_new();
  }

  late final _UA_FindServersResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FindServersResponse> Function()>>(
      'UA_FindServersResponse_new');
  late final _UA_FindServersResponse_new = _UA_FindServersResponse_newPtr
      .asFunction<ffi.Pointer<UA_FindServersResponse> Function()>();

  int UA_FindServersResponse_copy(
    ffi.Pointer<UA_FindServersResponse> src,
    ffi.Pointer<UA_FindServersResponse> dst,
  ) {
    return _UA_FindServersResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_FindServersResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FindServersResponse>,
                  ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_copy');
  late final _UA_FindServersResponse_copy =
      _UA_FindServersResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FindServersResponse>,
              ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_deleteMembers(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_deleteMembers(
      p,
    );
  }

  late final _UA_FindServersResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_deleteMembers');
  late final _UA_FindServersResponse_deleteMembers =
      _UA_FindServersResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_clear(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_clear(
      p,
    );
  }

  late final _UA_FindServersResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_clear');
  late final _UA_FindServersResponse_clear = _UA_FindServersResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_FindServersResponse_delete(
    ffi.Pointer<UA_FindServersResponse> p,
  ) {
    return _UA_FindServersResponse_delete(
      p,
    );
  }

  late final _UA_FindServersResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FindServersResponse>)>>(
      'UA_FindServersResponse_delete');
  late final _UA_FindServersResponse_delete = _UA_FindServersResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FindServersResponse>)>();

  void UA_MessageSecurityMode_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_init(
      p,
    );
  }

  late final _UA_MessageSecurityMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_init');
  late final _UA_MessageSecurityMode_init = _UA_MessageSecurityMode_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_MessageSecurityMode_new() {
    return _UA_MessageSecurityMode_new();
  }

  late final _UA_MessageSecurityMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_MessageSecurityMode_new');
  late final _UA_MessageSecurityMode_new = _UA_MessageSecurityMode_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_MessageSecurityMode_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_MessageSecurityMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MessageSecurityMode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_MessageSecurityMode_copy');
  late final _UA_MessageSecurityMode_copy =
      _UA_MessageSecurityMode_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_deleteMembers(
      p,
    );
  }

  late final _UA_MessageSecurityMode_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_deleteMembers');
  late final _UA_MessageSecurityMode_deleteMembers =
      _UA_MessageSecurityMode_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_clear(
      p,
    );
  }

  late final _UA_MessageSecurityMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_clear');
  late final _UA_MessageSecurityMode_clear = _UA_MessageSecurityMode_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageSecurityMode_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageSecurityMode_delete(
      p,
    );
  }

  late final _UA_MessageSecurityMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageSecurityMode_delete');
  late final _UA_MessageSecurityMode_delete = _UA_MessageSecurityMode_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_init(
      p,
    );
  }

  late final _UA_UserTokenType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_init');
  late final _UA_UserTokenType_init = _UA_UserTokenType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_UserTokenType_new() {
    return _UA_UserTokenType_new();
  }

  late final _UA_UserTokenType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_UserTokenType_new');
  late final _UA_UserTokenType_new =
      _UA_UserTokenType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_UserTokenType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_UserTokenType_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_UserTokenType_copy');
  late final _UA_UserTokenType_copy = _UA_UserTokenType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_deleteMembers(
      p,
    );
  }

  late final _UA_UserTokenType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_deleteMembers');
  late final _UA_UserTokenType_deleteMembers =
      _UA_UserTokenType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_clear(
      p,
    );
  }

  late final _UA_UserTokenType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_clear');
  late final _UA_UserTokenType_clear = _UA_UserTokenType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_UserTokenType_delete(
      p,
    );
  }

  late final _UA_UserTokenType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_UserTokenType_delete');
  late final _UA_UserTokenType_delete = _UA_UserTokenType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_UserTokenPolicy_init(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_init(
      p,
    );
  }

  late final _UA_UserTokenPolicy_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_init');
  late final _UA_UserTokenPolicy_init = _UA_UserTokenPolicy_initPtr.asFunction<
      void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  ffi.Pointer<UA_UserTokenPolicy> UA_UserTokenPolicy_new() {
    return _UA_UserTokenPolicy_new();
  }

  late final _UA_UserTokenPolicy_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserTokenPolicy> Function()>>(
          'UA_UserTokenPolicy_new');
  late final _UA_UserTokenPolicy_new = _UA_UserTokenPolicy_newPtr.asFunction<
      ffi.Pointer<UA_UserTokenPolicy> Function()>();

  int UA_UserTokenPolicy_copy(
    ffi.Pointer<UA_UserTokenPolicy> src,
    ffi.Pointer<UA_UserTokenPolicy> dst,
  ) {
    return _UA_UserTokenPolicy_copy(
      src,
      dst,
    );
  }

  late final _UA_UserTokenPolicy_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserTokenPolicy>,
              ffi.Pointer<UA_UserTokenPolicy>)>>('UA_UserTokenPolicy_copy');
  late final _UA_UserTokenPolicy_copy = _UA_UserTokenPolicy_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_UserTokenPolicy>, ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_deleteMembers(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_deleteMembers(
      p,
    );
  }

  late final _UA_UserTokenPolicy_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_deleteMembers');
  late final _UA_UserTokenPolicy_deleteMembers =
      _UA_UserTokenPolicy_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_clear(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_clear(
      p,
    );
  }

  late final _UA_UserTokenPolicy_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_clear');
  late final _UA_UserTokenPolicy_clear = _UA_UserTokenPolicy_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_UserTokenPolicy_delete(
    ffi.Pointer<UA_UserTokenPolicy> p,
  ) {
    return _UA_UserTokenPolicy_delete(
      p,
    );
  }

  late final _UA_UserTokenPolicy_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_UserTokenPolicy>)>>(
      'UA_UserTokenPolicy_delete');
  late final _UA_UserTokenPolicy_delete = _UA_UserTokenPolicy_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_UserTokenPolicy>)>();

  void UA_EndpointDescription_init(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_init(
      p,
    );
  }

  late final _UA_EndpointDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_init');
  late final _UA_EndpointDescription_init = _UA_EndpointDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  ffi.Pointer<UA_EndpointDescription> UA_EndpointDescription_new() {
    return _UA_EndpointDescription_new();
  }

  late final _UA_EndpointDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_EndpointDescription> Function()>>(
      'UA_EndpointDescription_new');
  late final _UA_EndpointDescription_new = _UA_EndpointDescription_newPtr
      .asFunction<ffi.Pointer<UA_EndpointDescription> Function()>();

  int UA_EndpointDescription_copy(
    ffi.Pointer<UA_EndpointDescription> src,
    ffi.Pointer<UA_EndpointDescription> dst,
  ) {
    return _UA_EndpointDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EndpointDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_EndpointDescription>,
                  ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_copy');
  late final _UA_EndpointDescription_copy =
      _UA_EndpointDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EndpointDescription>,
              ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_deleteMembers(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_deleteMembers(
      p,
    );
  }

  late final _UA_EndpointDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_deleteMembers');
  late final _UA_EndpointDescription_deleteMembers =
      _UA_EndpointDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_clear(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_clear(
      p,
    );
  }

  late final _UA_EndpointDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_clear');
  late final _UA_EndpointDescription_clear = _UA_EndpointDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_EndpointDescription_delete(
    ffi.Pointer<UA_EndpointDescription> p,
  ) {
    return _UA_EndpointDescription_delete(
      p,
    );
  }

  late final _UA_EndpointDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EndpointDescription>)>>(
      'UA_EndpointDescription_delete');
  late final _UA_EndpointDescription_delete = _UA_EndpointDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EndpointDescription>)>();

  void UA_GetEndpointsRequest_init(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_init(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_init');
  late final _UA_GetEndpointsRequest_init = _UA_GetEndpointsRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  ffi.Pointer<UA_GetEndpointsRequest> UA_GetEndpointsRequest_new() {
    return _UA_GetEndpointsRequest_new();
  }

  late final _UA_GetEndpointsRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>>(
      'UA_GetEndpointsRequest_new');
  late final _UA_GetEndpointsRequest_new = _UA_GetEndpointsRequest_newPtr
      .asFunction<ffi.Pointer<UA_GetEndpointsRequest> Function()>();

  int UA_GetEndpointsRequest_copy(
    ffi.Pointer<UA_GetEndpointsRequest> src,
    ffi.Pointer<UA_GetEndpointsRequest> dst,
  ) {
    return _UA_GetEndpointsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsRequest>,
                  ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_copy');
  late final _UA_GetEndpointsRequest_copy =
      _UA_GetEndpointsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_GetEndpointsRequest>,
              ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_deleteMembers(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_deleteMembers');
  late final _UA_GetEndpointsRequest_deleteMembers =
      _UA_GetEndpointsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_clear(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_clear(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_clear');
  late final _UA_GetEndpointsRequest_clear = _UA_GetEndpointsRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsRequest_delete(
    ffi.Pointer<UA_GetEndpointsRequest> p,
  ) {
    return _UA_GetEndpointsRequest_delete(
      p,
    );
  }

  late final _UA_GetEndpointsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsRequest>)>>(
      'UA_GetEndpointsRequest_delete');
  late final _UA_GetEndpointsRequest_delete = _UA_GetEndpointsRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsRequest>)>();

  void UA_GetEndpointsResponse_init(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_init(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_init');
  late final _UA_GetEndpointsResponse_init = _UA_GetEndpointsResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  ffi.Pointer<UA_GetEndpointsResponse> UA_GetEndpointsResponse_new() {
    return _UA_GetEndpointsResponse_new();
  }

  late final _UA_GetEndpointsResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>>(
      'UA_GetEndpointsResponse_new');
  late final _UA_GetEndpointsResponse_new = _UA_GetEndpointsResponse_newPtr
      .asFunction<ffi.Pointer<UA_GetEndpointsResponse> Function()>();

  int UA_GetEndpointsResponse_copy(
    ffi.Pointer<UA_GetEndpointsResponse> src,
    ffi.Pointer<UA_GetEndpointsResponse> dst,
  ) {
    return _UA_GetEndpointsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_GetEndpointsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_GetEndpointsResponse>,
                  ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_copy');
  late final _UA_GetEndpointsResponse_copy =
      _UA_GetEndpointsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_GetEndpointsResponse>,
              ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_deleteMembers(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_deleteMembers');
  late final _UA_GetEndpointsResponse_deleteMembers =
      _UA_GetEndpointsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_clear(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_clear(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_clear');
  late final _UA_GetEndpointsResponse_clear = _UA_GetEndpointsResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_GetEndpointsResponse_delete(
    ffi.Pointer<UA_GetEndpointsResponse> p,
  ) {
    return _UA_GetEndpointsResponse_delete(
      p,
    );
  }

  late final _UA_GetEndpointsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_GetEndpointsResponse>)>>(
      'UA_GetEndpointsResponse_delete');
  late final _UA_GetEndpointsResponse_delete =
      _UA_GetEndpointsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_GetEndpointsResponse>)>();

  void UA_SecurityTokenRequestType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_init(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_init');
  late final _UA_SecurityTokenRequestType_init =
      _UA_SecurityTokenRequestType_initPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_SecurityTokenRequestType_new() {
    return _UA_SecurityTokenRequestType_new();
  }

  late final _UA_SecurityTokenRequestType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_SecurityTokenRequestType_new');
  late final _UA_SecurityTokenRequestType_new =
      _UA_SecurityTokenRequestType_newPtr.asFunction<
          ffi.Pointer<ffi.Int32> Function()>();

  int UA_SecurityTokenRequestType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_SecurityTokenRequestType_copy(
      src,
      dst,
    );
  }

  late final _UA_SecurityTokenRequestType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_SecurityTokenRequestType_copy');
  late final _UA_SecurityTokenRequestType_copy =
      _UA_SecurityTokenRequestType_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_deleteMembers(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_deleteMembers');
  late final _UA_SecurityTokenRequestType_deleteMembers =
      _UA_SecurityTokenRequestType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_clear(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_clear');
  late final _UA_SecurityTokenRequestType_clear =
      _UA_SecurityTokenRequestType_clearPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_SecurityTokenRequestType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_SecurityTokenRequestType_delete(
      p,
    );
  }

  late final _UA_SecurityTokenRequestType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_SecurityTokenRequestType_delete');
  late final _UA_SecurityTokenRequestType_delete =
      _UA_SecurityTokenRequestType_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ChannelSecurityToken_init(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_init(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_init');
  late final _UA_ChannelSecurityToken_init = _UA_ChannelSecurityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  ffi.Pointer<UA_ChannelSecurityToken> UA_ChannelSecurityToken_new() {
    return _UA_ChannelSecurityToken_new();
  }

  late final _UA_ChannelSecurityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>>(
      'UA_ChannelSecurityToken_new');
  late final _UA_ChannelSecurityToken_new = _UA_ChannelSecurityToken_newPtr
      .asFunction<ffi.Pointer<UA_ChannelSecurityToken> Function()>();

  int UA_ChannelSecurityToken_copy(
    ffi.Pointer<UA_ChannelSecurityToken> src,
    ffi.Pointer<UA_ChannelSecurityToken> dst,
  ) {
    return _UA_ChannelSecurityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_ChannelSecurityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ChannelSecurityToken>,
                  ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_copy');
  late final _UA_ChannelSecurityToken_copy =
      _UA_ChannelSecurityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ChannelSecurityToken>,
              ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_deleteMembers(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_deleteMembers(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_deleteMembers');
  late final _UA_ChannelSecurityToken_deleteMembers =
      _UA_ChannelSecurityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_clear(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_clear(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_clear');
  late final _UA_ChannelSecurityToken_clear = _UA_ChannelSecurityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_ChannelSecurityToken_delete(
    ffi.Pointer<UA_ChannelSecurityToken> p,
  ) {
    return _UA_ChannelSecurityToken_delete(
      p,
    );
  }

  late final _UA_ChannelSecurityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ChannelSecurityToken>)>>(
      'UA_ChannelSecurityToken_delete');
  late final _UA_ChannelSecurityToken_delete =
      _UA_ChannelSecurityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ChannelSecurityToken>)>();

  void UA_OpenSecureChannelRequest_init(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_init');
  late final _UA_OpenSecureChannelRequest_init =
      _UA_OpenSecureChannelRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  ffi.Pointer<UA_OpenSecureChannelRequest> UA_OpenSecureChannelRequest_new() {
    return _UA_OpenSecureChannelRequest_new();
  }

  late final _UA_OpenSecureChannelRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_OpenSecureChannelRequest> Function()>>(
      'UA_OpenSecureChannelRequest_new');
  late final _UA_OpenSecureChannelRequest_new =
      _UA_OpenSecureChannelRequest_newPtr.asFunction<
          ffi.Pointer<UA_OpenSecureChannelRequest> Function()>();

  int UA_OpenSecureChannelRequest_copy(
    ffi.Pointer<UA_OpenSecureChannelRequest> src,
    ffi.Pointer<UA_OpenSecureChannelRequest> dst,
  ) {
    return _UA_OpenSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
                  ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_copy');
  late final _UA_OpenSecureChannelRequest_copy =
      _UA_OpenSecureChannelRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_deleteMembers(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_deleteMembers(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_deleteMembers');
  late final _UA_OpenSecureChannelRequest_deleteMembers =
      _UA_OpenSecureChannelRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_clear(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_clear');
  late final _UA_OpenSecureChannelRequest_clear =
      _UA_OpenSecureChannelRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelRequest_delete(
    ffi.Pointer<UA_OpenSecureChannelRequest> p,
  ) {
    return _UA_OpenSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>>(
      'UA_OpenSecureChannelRequest_delete');
  late final _UA_OpenSecureChannelRequest_delete =
      _UA_OpenSecureChannelRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelRequest>)>();

  void UA_OpenSecureChannelResponse_init(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_init');
  late final _UA_OpenSecureChannelResponse_init =
      _UA_OpenSecureChannelResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  ffi.Pointer<UA_OpenSecureChannelResponse> UA_OpenSecureChannelResponse_new() {
    return _UA_OpenSecureChannelResponse_new();
  }

  late final _UA_OpenSecureChannelResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_OpenSecureChannelResponse>
              Function()>>('UA_OpenSecureChannelResponse_new');
  late final _UA_OpenSecureChannelResponse_new =
      _UA_OpenSecureChannelResponse_newPtr.asFunction<
          ffi.Pointer<UA_OpenSecureChannelResponse> Function()>();

  int UA_OpenSecureChannelResponse_copy(
    ffi.Pointer<UA_OpenSecureChannelResponse> src,
    ffi.Pointer<UA_OpenSecureChannelResponse> dst,
  ) {
    return _UA_OpenSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_OpenSecureChannelResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
                  ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_copy');
  late final _UA_OpenSecureChannelResponse_copy =
      _UA_OpenSecureChannelResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_OpenSecureChannelResponse>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_deleteMembers(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_deleteMembers(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_deleteMembers');
  late final _UA_OpenSecureChannelResponse_deleteMembers =
      _UA_OpenSecureChannelResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_clear(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_clear');
  late final _UA_OpenSecureChannelResponse_clear =
      _UA_OpenSecureChannelResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_OpenSecureChannelResponse_delete(
    ffi.Pointer<UA_OpenSecureChannelResponse> p,
  ) {
    return _UA_OpenSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_OpenSecureChannelResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_OpenSecureChannelResponse_delete');
  late final _UA_OpenSecureChannelResponse_delete =
      _UA_OpenSecureChannelResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  void UA_CloseSecureChannelRequest_init(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_init');
  late final _UA_CloseSecureChannelRequest_init =
      _UA_CloseSecureChannelRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  ffi.Pointer<UA_CloseSecureChannelRequest> UA_CloseSecureChannelRequest_new() {
    return _UA_CloseSecureChannelRequest_new();
  }

  late final _UA_CloseSecureChannelRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CloseSecureChannelRequest>
              Function()>>('UA_CloseSecureChannelRequest_new');
  late final _UA_CloseSecureChannelRequest_new =
      _UA_CloseSecureChannelRequest_newPtr.asFunction<
          ffi.Pointer<UA_CloseSecureChannelRequest> Function()>();

  int UA_CloseSecureChannelRequest_copy(
    ffi.Pointer<UA_CloseSecureChannelRequest> src,
    ffi.Pointer<UA_CloseSecureChannelRequest> dst,
  ) {
    return _UA_CloseSecureChannelRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
                  ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_copy');
  late final _UA_CloseSecureChannelRequest_copy =
      _UA_CloseSecureChannelRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSecureChannelRequest>,
              ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_deleteMembers(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_deleteMembers');
  late final _UA_CloseSecureChannelRequest_deleteMembers =
      _UA_CloseSecureChannelRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_clear(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_clear');
  late final _UA_CloseSecureChannelRequest_clear =
      _UA_CloseSecureChannelRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelRequest_delete(
    ffi.Pointer<UA_CloseSecureChannelRequest> p,
  ) {
    return _UA_CloseSecureChannelRequest_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>>(
      'UA_CloseSecureChannelRequest_delete');
  late final _UA_CloseSecureChannelRequest_delete =
      _UA_CloseSecureChannelRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelRequest>)>();

  void UA_CloseSecureChannelResponse_init(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_init(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_init');
  late final _UA_CloseSecureChannelResponse_init =
      _UA_CloseSecureChannelResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  ffi.Pointer<UA_CloseSecureChannelResponse>
      UA_CloseSecureChannelResponse_new() {
    return _UA_CloseSecureChannelResponse_new();
  }

  late final _UA_CloseSecureChannelResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CloseSecureChannelResponse>
              Function()>>('UA_CloseSecureChannelResponse_new');
  late final _UA_CloseSecureChannelResponse_new =
      _UA_CloseSecureChannelResponse_newPtr.asFunction<
          ffi.Pointer<UA_CloseSecureChannelResponse> Function()>();

  int UA_CloseSecureChannelResponse_copy(
    ffi.Pointer<UA_CloseSecureChannelResponse> src,
    ffi.Pointer<UA_CloseSecureChannelResponse> dst,
  ) {
    return _UA_CloseSecureChannelResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSecureChannelResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
                  ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_copy');
  late final _UA_CloseSecureChannelResponse_copy =
      _UA_CloseSecureChannelResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSecureChannelResponse>,
              ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_deleteMembers(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_deleteMembers');
  late final _UA_CloseSecureChannelResponse_deleteMembers =
      _UA_CloseSecureChannelResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_clear(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_clear(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_clear');
  late final _UA_CloseSecureChannelResponse_clear =
      _UA_CloseSecureChannelResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_CloseSecureChannelResponse_delete(
    ffi.Pointer<UA_CloseSecureChannelResponse> p,
  ) {
    return _UA_CloseSecureChannelResponse_delete(
      p,
    );
  }

  late final _UA_CloseSecureChannelResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>>(
      'UA_CloseSecureChannelResponse_delete');
  late final _UA_CloseSecureChannelResponse_delete =
      _UA_CloseSecureChannelResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSecureChannelResponse>)>();

  void UA_SignedSoftwareCertificate_init(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_init(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_init');
  late final _UA_SignedSoftwareCertificate_init =
      _UA_SignedSoftwareCertificate_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  ffi.Pointer<UA_SignedSoftwareCertificate> UA_SignedSoftwareCertificate_new() {
    return _UA_SignedSoftwareCertificate_new();
  }

  late final _UA_SignedSoftwareCertificate_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SignedSoftwareCertificate>
              Function()>>('UA_SignedSoftwareCertificate_new');
  late final _UA_SignedSoftwareCertificate_new =
      _UA_SignedSoftwareCertificate_newPtr.asFunction<
          ffi.Pointer<UA_SignedSoftwareCertificate> Function()>();

  int UA_SignedSoftwareCertificate_copy(
    ffi.Pointer<UA_SignedSoftwareCertificate> src,
    ffi.Pointer<UA_SignedSoftwareCertificate> dst,
  ) {
    return _UA_SignedSoftwareCertificate_copy(
      src,
      dst,
    );
  }

  late final _UA_SignedSoftwareCertificate_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
                  ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_copy');
  late final _UA_SignedSoftwareCertificate_copy =
      _UA_SignedSoftwareCertificate_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SignedSoftwareCertificate>,
              ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_deleteMembers(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_deleteMembers(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_deleteMembers');
  late final _UA_SignedSoftwareCertificate_deleteMembers =
      _UA_SignedSoftwareCertificate_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_clear(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_clear(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_clear');
  late final _UA_SignedSoftwareCertificate_clear =
      _UA_SignedSoftwareCertificate_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignedSoftwareCertificate_delete(
    ffi.Pointer<UA_SignedSoftwareCertificate> p,
  ) {
    return _UA_SignedSoftwareCertificate_delete(
      p,
    );
  }

  late final _UA_SignedSoftwareCertificate_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>>(
      'UA_SignedSoftwareCertificate_delete');
  late final _UA_SignedSoftwareCertificate_delete =
      _UA_SignedSoftwareCertificate_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SignedSoftwareCertificate>)>();

  void UA_SignatureData_init(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_init(
      p,
    );
  }

  late final _UA_SignatureData_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_init');
  late final _UA_SignatureData_init = _UA_SignatureData_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  ffi.Pointer<UA_SignatureData> UA_SignatureData_new() {
    return _UA_SignatureData_new();
  }

  late final _UA_SignatureData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SignatureData> Function()>>(
          'UA_SignatureData_new');
  late final _UA_SignatureData_new = _UA_SignatureData_newPtr.asFunction<
      ffi.Pointer<UA_SignatureData> Function()>();

  int UA_SignatureData_copy(
    ffi.Pointer<UA_SignatureData> src,
    ffi.Pointer<UA_SignatureData> dst,
  ) {
    return _UA_SignatureData_copy(
      src,
      dst,
    );
  }

  late final _UA_SignatureData_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SignatureData>,
              ffi.Pointer<UA_SignatureData>)>>('UA_SignatureData_copy');
  late final _UA_SignatureData_copy = _UA_SignatureData_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_SignatureData>, ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_deleteMembers(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_deleteMembers(
      p,
    );
  }

  late final _UA_SignatureData_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_deleteMembers');
  late final _UA_SignatureData_deleteMembers =
      _UA_SignatureData_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_clear(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_clear(
      p,
    );
  }

  late final _UA_SignatureData_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_clear');
  late final _UA_SignatureData_clear = _UA_SignatureData_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_SignatureData_delete(
    ffi.Pointer<UA_SignatureData> p,
  ) {
    return _UA_SignatureData_delete(
      p,
    );
  }

  late final _UA_SignatureData_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SignatureData>)>>(
      'UA_SignatureData_delete');
  late final _UA_SignatureData_delete = _UA_SignatureData_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_SignatureData>)>();

  void UA_CreateSessionRequest_init(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_init(
      p,
    );
  }

  late final _UA_CreateSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_init');
  late final _UA_CreateSessionRequest_init = _UA_CreateSessionRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  ffi.Pointer<UA_CreateSessionRequest> UA_CreateSessionRequest_new() {
    return _UA_CreateSessionRequest_new();
  }

  late final _UA_CreateSessionRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>>(
      'UA_CreateSessionRequest_new');
  late final _UA_CreateSessionRequest_new = _UA_CreateSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_CreateSessionRequest> Function()>();

  int UA_CreateSessionRequest_copy(
    ffi.Pointer<UA_CreateSessionRequest> src,
    ffi.Pointer<UA_CreateSessionRequest> dst,
  ) {
    return _UA_CreateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSessionRequest>,
                  ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_copy');
  late final _UA_CreateSessionRequest_copy =
      _UA_CreateSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSessionRequest>,
              ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_deleteMembers(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_deleteMembers');
  late final _UA_CreateSessionRequest_deleteMembers =
      _UA_CreateSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_clear(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_clear');
  late final _UA_CreateSessionRequest_clear = _UA_CreateSessionRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionRequest_delete(
    ffi.Pointer<UA_CreateSessionRequest> p,
  ) {
    return _UA_CreateSessionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionRequest>)>>(
      'UA_CreateSessionRequest_delete');
  late final _UA_CreateSessionRequest_delete =
      _UA_CreateSessionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionRequest>)>();

  void UA_CreateSessionResponse_init(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_init(
      p,
    );
  }

  late final _UA_CreateSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_init');
  late final _UA_CreateSessionResponse_init = _UA_CreateSessionResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  ffi.Pointer<UA_CreateSessionResponse> UA_CreateSessionResponse_new() {
    return _UA_CreateSessionResponse_new();
  }

  late final _UA_CreateSessionResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>>(
      'UA_CreateSessionResponse_new');
  late final _UA_CreateSessionResponse_new = _UA_CreateSessionResponse_newPtr
      .asFunction<ffi.Pointer<UA_CreateSessionResponse> Function()>();

  int UA_CreateSessionResponse_copy(
    ffi.Pointer<UA_CreateSessionResponse> src,
    ffi.Pointer<UA_CreateSessionResponse> dst,
  ) {
    return _UA_CreateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSessionResponse>,
                  ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_copy');
  late final _UA_CreateSessionResponse_copy =
      _UA_CreateSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSessionResponse>,
              ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_deleteMembers(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_deleteMembers');
  late final _UA_CreateSessionResponse_deleteMembers =
      _UA_CreateSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_clear(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_clear');
  late final _UA_CreateSessionResponse_clear =
      _UA_CreateSessionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_CreateSessionResponse_delete(
    ffi.Pointer<UA_CreateSessionResponse> p,
  ) {
    return _UA_CreateSessionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSessionResponse>)>>(
      'UA_CreateSessionResponse_delete');
  late final _UA_CreateSessionResponse_delete =
      _UA_CreateSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSessionResponse>)>();

  void UA_UserIdentityToken_init(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_init(
      p,
    );
  }

  late final _UA_UserIdentityToken_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_init');
  late final _UA_UserIdentityToken_init = _UA_UserIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  ffi.Pointer<UA_UserIdentityToken> UA_UserIdentityToken_new() {
    return _UA_UserIdentityToken_new();
  }

  late final _UA_UserIdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_UserIdentityToken> Function()>>(
          'UA_UserIdentityToken_new');
  late final _UA_UserIdentityToken_new = _UA_UserIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_UserIdentityToken> Function()>();

  int UA_UserIdentityToken_copy(
    ffi.Pointer<UA_UserIdentityToken> src,
    ffi.Pointer<UA_UserIdentityToken> dst,
  ) {
    return _UA_UserIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserIdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_UserIdentityToken>,
              ffi.Pointer<UA_UserIdentityToken>)>>('UA_UserIdentityToken_copy');
  late final _UA_UserIdentityToken_copy =
      _UA_UserIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UserIdentityToken>,
              ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_deleteMembers(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_UserIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_deleteMembers');
  late final _UA_UserIdentityToken_deleteMembers =
      _UA_UserIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_clear(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_clear');
  late final _UA_UserIdentityToken_clear = _UA_UserIdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_UserIdentityToken_delete(
    ffi.Pointer<UA_UserIdentityToken> p,
  ) {
    return _UA_UserIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserIdentityToken>)>>(
      'UA_UserIdentityToken_delete');
  late final _UA_UserIdentityToken_delete = _UA_UserIdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_UserIdentityToken>)>();

  void UA_AnonymousIdentityToken_init(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_init(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_init');
  late final _UA_AnonymousIdentityToken_init =
      _UA_AnonymousIdentityToken_initPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  ffi.Pointer<UA_AnonymousIdentityToken> UA_AnonymousIdentityToken_new() {
    return _UA_AnonymousIdentityToken_new();
  }

  late final _UA_AnonymousIdentityToken_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>>(
      'UA_AnonymousIdentityToken_new');
  late final _UA_AnonymousIdentityToken_new = _UA_AnonymousIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_AnonymousIdentityToken> Function()>();

  int UA_AnonymousIdentityToken_copy(
    ffi.Pointer<UA_AnonymousIdentityToken> src,
    ffi.Pointer<UA_AnonymousIdentityToken> dst,
  ) {
    return _UA_AnonymousIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_AnonymousIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AnonymousIdentityToken>,
                  ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_copy');
  late final _UA_AnonymousIdentityToken_copy =
      _UA_AnonymousIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AnonymousIdentityToken>,
              ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_deleteMembers(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_deleteMembers');
  late final _UA_AnonymousIdentityToken_deleteMembers =
      _UA_AnonymousIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_clear(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_clear(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_clear');
  late final _UA_AnonymousIdentityToken_clear =
      _UA_AnonymousIdentityToken_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_AnonymousIdentityToken_delete(
    ffi.Pointer<UA_AnonymousIdentityToken> p,
  ) {
    return _UA_AnonymousIdentityToken_delete(
      p,
    );
  }

  late final _UA_AnonymousIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>>(
      'UA_AnonymousIdentityToken_delete');
  late final _UA_AnonymousIdentityToken_delete =
      _UA_AnonymousIdentityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AnonymousIdentityToken>)>();

  void UA_UserNameIdentityToken_init(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_init(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_init');
  late final _UA_UserNameIdentityToken_init = _UA_UserNameIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  ffi.Pointer<UA_UserNameIdentityToken> UA_UserNameIdentityToken_new() {
    return _UA_UserNameIdentityToken_new();
  }

  late final _UA_UserNameIdentityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>>(
      'UA_UserNameIdentityToken_new');
  late final _UA_UserNameIdentityToken_new = _UA_UserNameIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_UserNameIdentityToken> Function()>();

  int UA_UserNameIdentityToken_copy(
    ffi.Pointer<UA_UserNameIdentityToken> src,
    ffi.Pointer<UA_UserNameIdentityToken> dst,
  ) {
    return _UA_UserNameIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_UserNameIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UserNameIdentityToken>,
                  ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_copy');
  late final _UA_UserNameIdentityToken_copy =
      _UA_UserNameIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UserNameIdentityToken>,
              ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_deleteMembers(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_deleteMembers');
  late final _UA_UserNameIdentityToken_deleteMembers =
      _UA_UserNameIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_clear(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_clear(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_clear');
  late final _UA_UserNameIdentityToken_clear =
      _UA_UserNameIdentityToken_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_UserNameIdentityToken_delete(
    ffi.Pointer<UA_UserNameIdentityToken> p,
  ) {
    return _UA_UserNameIdentityToken_delete(
      p,
    );
  }

  late final _UA_UserNameIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UserNameIdentityToken>)>>(
      'UA_UserNameIdentityToken_delete');
  late final _UA_UserNameIdentityToken_delete =
      _UA_UserNameIdentityToken_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UserNameIdentityToken>)>();

  void UA_X509IdentityToken_init(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_init(
      p,
    );
  }

  late final _UA_X509IdentityToken_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_init');
  late final _UA_X509IdentityToken_init = _UA_X509IdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  ffi.Pointer<UA_X509IdentityToken> UA_X509IdentityToken_new() {
    return _UA_X509IdentityToken_new();
  }

  late final _UA_X509IdentityToken_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_X509IdentityToken> Function()>>(
          'UA_X509IdentityToken_new');
  late final _UA_X509IdentityToken_new = _UA_X509IdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_X509IdentityToken> Function()>();

  int UA_X509IdentityToken_copy(
    ffi.Pointer<UA_X509IdentityToken> src,
    ffi.Pointer<UA_X509IdentityToken> dst,
  ) {
    return _UA_X509IdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_X509IdentityToken_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_X509IdentityToken>,
              ffi.Pointer<UA_X509IdentityToken>)>>('UA_X509IdentityToken_copy');
  late final _UA_X509IdentityToken_copy =
      _UA_X509IdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_X509IdentityToken>,
              ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_deleteMembers(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_X509IdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_deleteMembers');
  late final _UA_X509IdentityToken_deleteMembers =
      _UA_X509IdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_clear(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_clear(
      p,
    );
  }

  late final _UA_X509IdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_clear');
  late final _UA_X509IdentityToken_clear = _UA_X509IdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_X509IdentityToken_delete(
    ffi.Pointer<UA_X509IdentityToken> p,
  ) {
    return _UA_X509IdentityToken_delete(
      p,
    );
  }

  late final _UA_X509IdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_X509IdentityToken>)>>(
      'UA_X509IdentityToken_delete');
  late final _UA_X509IdentityToken_delete = _UA_X509IdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_X509IdentityToken>)>();

  void UA_IssuedIdentityToken_init(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_init(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_init');
  late final _UA_IssuedIdentityToken_init = _UA_IssuedIdentityToken_initPtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  ffi.Pointer<UA_IssuedIdentityToken> UA_IssuedIdentityToken_new() {
    return _UA_IssuedIdentityToken_new();
  }

  late final _UA_IssuedIdentityToken_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>>(
      'UA_IssuedIdentityToken_new');
  late final _UA_IssuedIdentityToken_new = _UA_IssuedIdentityToken_newPtr
      .asFunction<ffi.Pointer<UA_IssuedIdentityToken> Function()>();

  int UA_IssuedIdentityToken_copy(
    ffi.Pointer<UA_IssuedIdentityToken> src,
    ffi.Pointer<UA_IssuedIdentityToken> dst,
  ) {
    return _UA_IssuedIdentityToken_copy(
      src,
      dst,
    );
  }

  late final _UA_IssuedIdentityToken_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_IssuedIdentityToken>,
                  ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_copy');
  late final _UA_IssuedIdentityToken_copy =
      _UA_IssuedIdentityToken_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_IssuedIdentityToken>,
              ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_deleteMembers(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_deleteMembers(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_deleteMembers');
  late final _UA_IssuedIdentityToken_deleteMembers =
      _UA_IssuedIdentityToken_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_clear(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_clear(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_clear');
  late final _UA_IssuedIdentityToken_clear = _UA_IssuedIdentityToken_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_IssuedIdentityToken_delete(
    ffi.Pointer<UA_IssuedIdentityToken> p,
  ) {
    return _UA_IssuedIdentityToken_delete(
      p,
    );
  }

  late final _UA_IssuedIdentityToken_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_IssuedIdentityToken>)>>(
      'UA_IssuedIdentityToken_delete');
  late final _UA_IssuedIdentityToken_delete = _UA_IssuedIdentityToken_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_IssuedIdentityToken>)>();

  void UA_ActivateSessionRequest_init(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_init(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_init');
  late final _UA_ActivateSessionRequest_init =
      _UA_ActivateSessionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  ffi.Pointer<UA_ActivateSessionRequest> UA_ActivateSessionRequest_new() {
    return _UA_ActivateSessionRequest_new();
  }

  late final _UA_ActivateSessionRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>>(
      'UA_ActivateSessionRequest_new');
  late final _UA_ActivateSessionRequest_new = _UA_ActivateSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_ActivateSessionRequest> Function()>();

  int UA_ActivateSessionRequest_copy(
    ffi.Pointer<UA_ActivateSessionRequest> src,
    ffi.Pointer<UA_ActivateSessionRequest> dst,
  ) {
    return _UA_ActivateSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionRequest>,
                  ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_copy');
  late final _UA_ActivateSessionRequest_copy =
      _UA_ActivateSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ActivateSessionRequest>,
              ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_deleteMembers(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_deleteMembers');
  late final _UA_ActivateSessionRequest_deleteMembers =
      _UA_ActivateSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_clear(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_clear(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_clear');
  late final _UA_ActivateSessionRequest_clear =
      _UA_ActivateSessionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionRequest_delete(
    ffi.Pointer<UA_ActivateSessionRequest> p,
  ) {
    return _UA_ActivateSessionRequest_delete(
      p,
    );
  }

  late final _UA_ActivateSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionRequest>)>>(
      'UA_ActivateSessionRequest_delete');
  late final _UA_ActivateSessionRequest_delete =
      _UA_ActivateSessionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionRequest>)>();

  void UA_ActivateSessionResponse_init(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_init(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_init');
  late final _UA_ActivateSessionResponse_init =
      _UA_ActivateSessionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  ffi.Pointer<UA_ActivateSessionResponse> UA_ActivateSessionResponse_new() {
    return _UA_ActivateSessionResponse_new();
  }

  late final _UA_ActivateSessionResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ActivateSessionResponse> Function()>>(
      'UA_ActivateSessionResponse_new');
  late final _UA_ActivateSessionResponse_new =
      _UA_ActivateSessionResponse_newPtr.asFunction<
          ffi.Pointer<UA_ActivateSessionResponse> Function()>();

  int UA_ActivateSessionResponse_copy(
    ffi.Pointer<UA_ActivateSessionResponse> src,
    ffi.Pointer<UA_ActivateSessionResponse> dst,
  ) {
    return _UA_ActivateSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ActivateSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ActivateSessionResponse>,
                  ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_copy');
  late final _UA_ActivateSessionResponse_copy =
      _UA_ActivateSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ActivateSessionResponse>,
              ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_deleteMembers(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_deleteMembers');
  late final _UA_ActivateSessionResponse_deleteMembers =
      _UA_ActivateSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_clear(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_clear(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_clear');
  late final _UA_ActivateSessionResponse_clear =
      _UA_ActivateSessionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_ActivateSessionResponse_delete(
    ffi.Pointer<UA_ActivateSessionResponse> p,
  ) {
    return _UA_ActivateSessionResponse_delete(
      p,
    );
  }

  late final _UA_ActivateSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ActivateSessionResponse>)>>(
      'UA_ActivateSessionResponse_delete');
  late final _UA_ActivateSessionResponse_delete =
      _UA_ActivateSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ActivateSessionResponse>)>();

  void UA_CloseSessionRequest_init(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_init(
      p,
    );
  }

  late final _UA_CloseSessionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_init');
  late final _UA_CloseSessionRequest_init = _UA_CloseSessionRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  ffi.Pointer<UA_CloseSessionRequest> UA_CloseSessionRequest_new() {
    return _UA_CloseSessionRequest_new();
  }

  late final _UA_CloseSessionRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>>(
      'UA_CloseSessionRequest_new');
  late final _UA_CloseSessionRequest_new = _UA_CloseSessionRequest_newPtr
      .asFunction<ffi.Pointer<UA_CloseSessionRequest> Function()>();

  int UA_CloseSessionRequest_copy(
    ffi.Pointer<UA_CloseSessionRequest> src,
    ffi.Pointer<UA_CloseSessionRequest> dst,
  ) {
    return _UA_CloseSessionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSessionRequest>,
                  ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_copy');
  late final _UA_CloseSessionRequest_copy =
      _UA_CloseSessionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSessionRequest>,
              ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_deleteMembers(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSessionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_deleteMembers');
  late final _UA_CloseSessionRequest_deleteMembers =
      _UA_CloseSessionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_clear(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_clear(
      p,
    );
  }

  late final _UA_CloseSessionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_clear');
  late final _UA_CloseSessionRequest_clear = _UA_CloseSessionRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionRequest_delete(
    ffi.Pointer<UA_CloseSessionRequest> p,
  ) {
    return _UA_CloseSessionRequest_delete(
      p,
    );
  }

  late final _UA_CloseSessionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionRequest>)>>(
      'UA_CloseSessionRequest_delete');
  late final _UA_CloseSessionRequest_delete = _UA_CloseSessionRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionRequest>)>();

  void UA_CloseSessionResponse_init(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_init(
      p,
    );
  }

  late final _UA_CloseSessionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_init');
  late final _UA_CloseSessionResponse_init = _UA_CloseSessionResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  ffi.Pointer<UA_CloseSessionResponse> UA_CloseSessionResponse_new() {
    return _UA_CloseSessionResponse_new();
  }

  late final _UA_CloseSessionResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>>(
      'UA_CloseSessionResponse_new');
  late final _UA_CloseSessionResponse_new = _UA_CloseSessionResponse_newPtr
      .asFunction<ffi.Pointer<UA_CloseSessionResponse> Function()>();

  int UA_CloseSessionResponse_copy(
    ffi.Pointer<UA_CloseSessionResponse> src,
    ffi.Pointer<UA_CloseSessionResponse> dst,
  ) {
    return _UA_CloseSessionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CloseSessionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CloseSessionResponse>,
                  ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_copy');
  late final _UA_CloseSessionResponse_copy =
      _UA_CloseSessionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CloseSessionResponse>,
              ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_deleteMembers(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CloseSessionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_deleteMembers');
  late final _UA_CloseSessionResponse_deleteMembers =
      _UA_CloseSessionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_clear(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_clear(
      p,
    );
  }

  late final _UA_CloseSessionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_clear');
  late final _UA_CloseSessionResponse_clear = _UA_CloseSessionResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_CloseSessionResponse_delete(
    ffi.Pointer<UA_CloseSessionResponse> p,
  ) {
    return _UA_CloseSessionResponse_delete(
      p,
    );
  }

  late final _UA_CloseSessionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CloseSessionResponse>)>>(
      'UA_CloseSessionResponse_delete');
  late final _UA_CloseSessionResponse_delete =
      _UA_CloseSessionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CloseSessionResponse>)>();

  void UA_NodeAttributesMask_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_init(
      p,
    );
  }

  late final _UA_NodeAttributesMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_init');
  late final _UA_NodeAttributesMask_init = _UA_NodeAttributesMask_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_NodeAttributesMask_new() {
    return _UA_NodeAttributesMask_new();
  }

  late final _UA_NodeAttributesMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_NodeAttributesMask_new');
  late final _UA_NodeAttributesMask_new = _UA_NodeAttributesMask_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_NodeAttributesMask_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_NodeAttributesMask_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributesMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_NodeAttributesMask_copy');
  late final _UA_NodeAttributesMask_copy =
      _UA_NodeAttributesMask_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_deleteMembers(
      p,
    );
  }

  late final _UA_NodeAttributesMask_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_deleteMembers');
  late final _UA_NodeAttributesMask_deleteMembers =
      _UA_NodeAttributesMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_clear(
      p,
    );
  }

  late final _UA_NodeAttributesMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_clear');
  late final _UA_NodeAttributesMask_clear = _UA_NodeAttributesMask_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributesMask_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_NodeAttributesMask_delete(
      p,
    );
  }

  late final _UA_NodeAttributesMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_NodeAttributesMask_delete');
  late final _UA_NodeAttributesMask_delete = _UA_NodeAttributesMask_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_NodeAttributes_init(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_init(
      p,
    );
  }

  late final _UA_NodeAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_init');
  late final _UA_NodeAttributes_init = _UA_NodeAttributes_initPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeAttributes>)>();

  ffi.Pointer<UA_NodeAttributes> UA_NodeAttributes_new() {
    return _UA_NodeAttributes_new();
  }

  late final _UA_NodeAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_NodeAttributes> Function()>>(
          'UA_NodeAttributes_new');
  late final _UA_NodeAttributes_new = _UA_NodeAttributes_newPtr.asFunction<
      ffi.Pointer<UA_NodeAttributes> Function()>();

  int UA_NodeAttributes_copy(
    ffi.Pointer<UA_NodeAttributes> src,
    ffi.Pointer<UA_NodeAttributes> dst,
  ) {
    return _UA_NodeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_NodeAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_NodeAttributes>,
              ffi.Pointer<UA_NodeAttributes>)>>('UA_NodeAttributes_copy');
  late final _UA_NodeAttributes_copy = _UA_NodeAttributes_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_NodeAttributes>, ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_deleteMembers(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_NodeAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_deleteMembers');
  late final _UA_NodeAttributes_deleteMembers =
      _UA_NodeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_clear(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_clear(
      p,
    );
  }

  late final _UA_NodeAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_clear');
  late final _UA_NodeAttributes_clear = _UA_NodeAttributes_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_NodeAttributes_delete(
    ffi.Pointer<UA_NodeAttributes> p,
  ) {
    return _UA_NodeAttributes_delete(
      p,
    );
  }

  late final _UA_NodeAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodeAttributes>)>>(
      'UA_NodeAttributes_delete');
  late final _UA_NodeAttributes_delete = _UA_NodeAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_NodeAttributes>)>();

  void UA_ObjectAttributes_init(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_init(
      p,
    );
  }

  late final _UA_ObjectAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_init');
  late final _UA_ObjectAttributes_init = _UA_ObjectAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  ffi.Pointer<UA_ObjectAttributes> UA_ObjectAttributes_new() {
    return _UA_ObjectAttributes_new();
  }

  late final _UA_ObjectAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ObjectAttributes> Function()>>(
          'UA_ObjectAttributes_new');
  late final _UA_ObjectAttributes_new = _UA_ObjectAttributes_newPtr.asFunction<
      ffi.Pointer<UA_ObjectAttributes> Function()>();

  int UA_ObjectAttributes_copy(
    ffi.Pointer<UA_ObjectAttributes> src,
    ffi.Pointer<UA_ObjectAttributes> dst,
  ) {
    return _UA_ObjectAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ObjectAttributes>,
              ffi.Pointer<UA_ObjectAttributes>)>>('UA_ObjectAttributes_copy');
  late final _UA_ObjectAttributes_copy =
      _UA_ObjectAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ObjectAttributes>,
              ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_deleteMembers(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ObjectAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_deleteMembers');
  late final _UA_ObjectAttributes_deleteMembers =
      _UA_ObjectAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_clear(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_clear');
  late final _UA_ObjectAttributes_clear = _UA_ObjectAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_ObjectAttributes_delete(
    ffi.Pointer<UA_ObjectAttributes> p,
  ) {
    return _UA_ObjectAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ObjectAttributes>)>>(
      'UA_ObjectAttributes_delete');
  late final _UA_ObjectAttributes_delete = _UA_ObjectAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectAttributes>)>();

  void UA_VariableAttributes_init(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_init(
      p,
    );
  }

  late final _UA_VariableAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_init');
  late final _UA_VariableAttributes_init = _UA_VariableAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  ffi.Pointer<UA_VariableAttributes> UA_VariableAttributes_new() {
    return _UA_VariableAttributes_new();
  }

  late final _UA_VariableAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_VariableAttributes> Function()>>(
      'UA_VariableAttributes_new');
  late final _UA_VariableAttributes_new = _UA_VariableAttributes_newPtr
      .asFunction<ffi.Pointer<UA_VariableAttributes> Function()>();

  int UA_VariableAttributes_copy(
    ffi.Pointer<UA_VariableAttributes> src,
    ffi.Pointer<UA_VariableAttributes> dst,
  ) {
    return _UA_VariableAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_VariableAttributes>,
                  ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_copy');
  late final _UA_VariableAttributes_copy =
      _UA_VariableAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_VariableAttributes>,
              ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_deleteMembers(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_VariableAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_deleteMembers');
  late final _UA_VariableAttributes_deleteMembers =
      _UA_VariableAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_clear(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_clear(
      p,
    );
  }

  late final _UA_VariableAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_clear');
  late final _UA_VariableAttributes_clear = _UA_VariableAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_VariableAttributes_delete(
    ffi.Pointer<UA_VariableAttributes> p,
  ) {
    return _UA_VariableAttributes_delete(
      p,
    );
  }

  late final _UA_VariableAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableAttributes>)>>(
      'UA_VariableAttributes_delete');
  late final _UA_VariableAttributes_delete = _UA_VariableAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_VariableAttributes>)>();

  void UA_MethodAttributes_init(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_init(
      p,
    );
  }

  late final _UA_MethodAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_init');
  late final _UA_MethodAttributes_init = _UA_MethodAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  ffi.Pointer<UA_MethodAttributes> UA_MethodAttributes_new() {
    return _UA_MethodAttributes_new();
  }

  late final _UA_MethodAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_MethodAttributes> Function()>>(
          'UA_MethodAttributes_new');
  late final _UA_MethodAttributes_new = _UA_MethodAttributes_newPtr.asFunction<
      ffi.Pointer<UA_MethodAttributes> Function()>();

  int UA_MethodAttributes_copy(
    ffi.Pointer<UA_MethodAttributes> src,
    ffi.Pointer<UA_MethodAttributes> dst,
  ) {
    return _UA_MethodAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_MethodAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MethodAttributes>,
              ffi.Pointer<UA_MethodAttributes>)>>('UA_MethodAttributes_copy');
  late final _UA_MethodAttributes_copy =
      _UA_MethodAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MethodAttributes>,
              ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_deleteMembers(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_MethodAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_deleteMembers');
  late final _UA_MethodAttributes_deleteMembers =
      _UA_MethodAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_clear(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_clear(
      p,
    );
  }

  late final _UA_MethodAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_clear');
  late final _UA_MethodAttributes_clear = _UA_MethodAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_MethodAttributes_delete(
    ffi.Pointer<UA_MethodAttributes> p,
  ) {
    return _UA_MethodAttributes_delete(
      p,
    );
  }

  late final _UA_MethodAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MethodAttributes>)>>(
      'UA_MethodAttributes_delete');
  late final _UA_MethodAttributes_delete = _UA_MethodAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_MethodAttributes>)>();

  void UA_ObjectTypeAttributes_init(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_init(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_init');
  late final _UA_ObjectTypeAttributes_init = _UA_ObjectTypeAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  ffi.Pointer<UA_ObjectTypeAttributes> UA_ObjectTypeAttributes_new() {
    return _UA_ObjectTypeAttributes_new();
  }

  late final _UA_ObjectTypeAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>>(
      'UA_ObjectTypeAttributes_new');
  late final _UA_ObjectTypeAttributes_new = _UA_ObjectTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_ObjectTypeAttributes> Function()>();

  int UA_ObjectTypeAttributes_copy(
    ffi.Pointer<UA_ObjectTypeAttributes> src,
    ffi.Pointer<UA_ObjectTypeAttributes> dst,
  ) {
    return _UA_ObjectTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ObjectTypeAttributes>,
                  ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_copy');
  late final _UA_ObjectTypeAttributes_copy =
      _UA_ObjectTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ObjectTypeAttributes>,
              ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_deleteMembers(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_deleteMembers');
  late final _UA_ObjectTypeAttributes_deleteMembers =
      _UA_ObjectTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_clear(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_clear');
  late final _UA_ObjectTypeAttributes_clear = _UA_ObjectTypeAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_ObjectTypeAttributes_delete(
    ffi.Pointer<UA_ObjectTypeAttributes> p,
  ) {
    return _UA_ObjectTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ObjectTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>>(
      'UA_ObjectTypeAttributes_delete');
  late final _UA_ObjectTypeAttributes_delete =
      _UA_ObjectTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ObjectTypeAttributes>)>();

  void UA_VariableTypeAttributes_init(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_init(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_init');
  late final _UA_VariableTypeAttributes_init =
      _UA_VariableTypeAttributes_initPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  ffi.Pointer<UA_VariableTypeAttributes> UA_VariableTypeAttributes_new() {
    return _UA_VariableTypeAttributes_new();
  }

  late final _UA_VariableTypeAttributes_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>>(
      'UA_VariableTypeAttributes_new');
  late final _UA_VariableTypeAttributes_new = _UA_VariableTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_VariableTypeAttributes> Function()>();

  int UA_VariableTypeAttributes_copy(
    ffi.Pointer<UA_VariableTypeAttributes> src,
    ffi.Pointer<UA_VariableTypeAttributes> dst,
  ) {
    return _UA_VariableTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_VariableTypeAttributes>,
                  ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_copy');
  late final _UA_VariableTypeAttributes_copy =
      _UA_VariableTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_VariableTypeAttributes>,
              ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_deleteMembers(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_deleteMembers');
  late final _UA_VariableTypeAttributes_deleteMembers =
      _UA_VariableTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_clear(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_clear(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_clear');
  late final _UA_VariableTypeAttributes_clear =
      _UA_VariableTypeAttributes_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_VariableTypeAttributes_delete(
    ffi.Pointer<UA_VariableTypeAttributes> p,
  ) {
    return _UA_VariableTypeAttributes_delete(
      p,
    );
  }

  late final _UA_VariableTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_VariableTypeAttributes>)>>(
      'UA_VariableTypeAttributes_delete');
  late final _UA_VariableTypeAttributes_delete =
      _UA_VariableTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_VariableTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_init(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_init(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_init');
  late final _UA_ReferenceTypeAttributes_init =
      _UA_ReferenceTypeAttributes_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  ffi.Pointer<UA_ReferenceTypeAttributes> UA_ReferenceTypeAttributes_new() {
    return _UA_ReferenceTypeAttributes_new();
  }

  late final _UA_ReferenceTypeAttributes_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_ReferenceTypeAttributes> Function()>>(
      'UA_ReferenceTypeAttributes_new');
  late final _UA_ReferenceTypeAttributes_new =
      _UA_ReferenceTypeAttributes_newPtr.asFunction<
          ffi.Pointer<UA_ReferenceTypeAttributes> Function()>();

  int UA_ReferenceTypeAttributes_copy(
    ffi.Pointer<UA_ReferenceTypeAttributes> src,
    ffi.Pointer<UA_ReferenceTypeAttributes> dst,
  ) {
    return _UA_ReferenceTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
                  ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_copy');
  late final _UA_ReferenceTypeAttributes_copy =
      _UA_ReferenceTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReferenceTypeAttributes>,
              ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_deleteMembers(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_deleteMembers');
  late final _UA_ReferenceTypeAttributes_deleteMembers =
      _UA_ReferenceTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_clear(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_clear(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_clear');
  late final _UA_ReferenceTypeAttributes_clear =
      _UA_ReferenceTypeAttributes_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_ReferenceTypeAttributes_delete(
    ffi.Pointer<UA_ReferenceTypeAttributes> p,
  ) {
    return _UA_ReferenceTypeAttributes_delete(
      p,
    );
  }

  late final _UA_ReferenceTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>>(
      'UA_ReferenceTypeAttributes_delete');
  late final _UA_ReferenceTypeAttributes_delete =
      _UA_ReferenceTypeAttributes_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceTypeAttributes>)>();

  void UA_DataTypeAttributes_init(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_init(
      p,
    );
  }

  late final _UA_DataTypeAttributes_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_init');
  late final _UA_DataTypeAttributes_init = _UA_DataTypeAttributes_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  ffi.Pointer<UA_DataTypeAttributes> UA_DataTypeAttributes_new() {
    return _UA_DataTypeAttributes_new();
  }

  late final _UA_DataTypeAttributes_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>>(
      'UA_DataTypeAttributes_new');
  late final _UA_DataTypeAttributes_new = _UA_DataTypeAttributes_newPtr
      .asFunction<ffi.Pointer<UA_DataTypeAttributes> Function()>();

  int UA_DataTypeAttributes_copy(
    ffi.Pointer<UA_DataTypeAttributes> src,
    ffi.Pointer<UA_DataTypeAttributes> dst,
  ) {
    return _UA_DataTypeAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeAttributes_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataTypeAttributes>,
                  ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_copy');
  late final _UA_DataTypeAttributes_copy =
      _UA_DataTypeAttributes_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataTypeAttributes>,
              ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_deleteMembers(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_DataTypeAttributes_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_deleteMembers');
  late final _UA_DataTypeAttributes_deleteMembers =
      _UA_DataTypeAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_clear(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_clear(
      p,
    );
  }

  late final _UA_DataTypeAttributes_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_clear');
  late final _UA_DataTypeAttributes_clear = _UA_DataTypeAttributes_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_DataTypeAttributes_delete(
    ffi.Pointer<UA_DataTypeAttributes> p,
  ) {
    return _UA_DataTypeAttributes_delete(
      p,
    );
  }

  late final _UA_DataTypeAttributes_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataTypeAttributes>)>>(
      'UA_DataTypeAttributes_delete');
  late final _UA_DataTypeAttributes_delete = _UA_DataTypeAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataTypeAttributes>)>();

  void UA_ViewAttributes_init(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_init(
      p,
    );
  }

  late final _UA_ViewAttributes_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_init');
  late final _UA_ViewAttributes_init = _UA_ViewAttributes_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewAttributes>)>();

  ffi.Pointer<UA_ViewAttributes> UA_ViewAttributes_new() {
    return _UA_ViewAttributes_new();
  }

  late final _UA_ViewAttributes_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewAttributes> Function()>>(
          'UA_ViewAttributes_new');
  late final _UA_ViewAttributes_new = _UA_ViewAttributes_newPtr.asFunction<
      ffi.Pointer<UA_ViewAttributes> Function()>();

  int UA_ViewAttributes_copy(
    ffi.Pointer<UA_ViewAttributes> src,
    ffi.Pointer<UA_ViewAttributes> dst,
  ) {
    return _UA_ViewAttributes_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewAttributes_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ViewAttributes>,
              ffi.Pointer<UA_ViewAttributes>)>>('UA_ViewAttributes_copy');
  late final _UA_ViewAttributes_copy = _UA_ViewAttributes_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ViewAttributes>, ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_deleteMembers(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_deleteMembers(
      p,
    );
  }

  late final _UA_ViewAttributes_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_deleteMembers');
  late final _UA_ViewAttributes_deleteMembers =
      _UA_ViewAttributes_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_clear(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_clear(
      p,
    );
  }

  late final _UA_ViewAttributes_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_clear');
  late final _UA_ViewAttributes_clear = _UA_ViewAttributes_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_ViewAttributes_delete(
    ffi.Pointer<UA_ViewAttributes> p,
  ) {
    return _UA_ViewAttributes_delete(
      p,
    );
  }

  late final _UA_ViewAttributes_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewAttributes>)>>(
      'UA_ViewAttributes_delete');
  late final _UA_ViewAttributes_delete = _UA_ViewAttributes_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ViewAttributes>)>();

  void UA_AddNodesItem_init(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_init(
      p,
    );
  }

  late final _UA_AddNodesItem_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_init');
  late final _UA_AddNodesItem_init = _UA_AddNodesItem_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  ffi.Pointer<UA_AddNodesItem> UA_AddNodesItem_new() {
    return _UA_AddNodesItem_new();
  }

  late final _UA_AddNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesItem> Function()>>(
          'UA_AddNodesItem_new');
  late final _UA_AddNodesItem_new = _UA_AddNodesItem_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesItem> Function()>();

  int UA_AddNodesItem_copy(
    ffi.Pointer<UA_AddNodesItem> src,
    ffi.Pointer<UA_AddNodesItem> dst,
  ) {
    return _UA_AddNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesItem>,
              ffi.Pointer<UA_AddNodesItem>)>>('UA_AddNodesItem_copy');
  late final _UA_AddNodesItem_copy = _UA_AddNodesItem_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesItem>, ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_deleteMembers(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_deleteMembers');
  late final _UA_AddNodesItem_deleteMembers = _UA_AddNodesItem_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_clear(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_clear(
      p,
    );
  }

  late final _UA_AddNodesItem_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_clear');
  late final _UA_AddNodesItem_clear = _UA_AddNodesItem_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesItem_delete(
    ffi.Pointer<UA_AddNodesItem> p,
  ) {
    return _UA_AddNodesItem_delete(
      p,
    );
  }

  late final _UA_AddNodesItem_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesItem>)>>(
      'UA_AddNodesItem_delete');
  late final _UA_AddNodesItem_delete = _UA_AddNodesItem_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesItem>)>();

  void UA_AddNodesResult_init(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_init(
      p,
    );
  }

  late final _UA_AddNodesResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_init');
  late final _UA_AddNodesResult_init = _UA_AddNodesResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesResult>)>();

  ffi.Pointer<UA_AddNodesResult> UA_AddNodesResult_new() {
    return _UA_AddNodesResult_new();
  }

  late final _UA_AddNodesResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResult> Function()>>(
          'UA_AddNodesResult_new');
  late final _UA_AddNodesResult_new = _UA_AddNodesResult_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesResult> Function()>();

  int UA_AddNodesResult_copy(
    ffi.Pointer<UA_AddNodesResult> src,
    ffi.Pointer<UA_AddNodesResult> dst,
  ) {
    return _UA_AddNodesResult_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesResult>,
              ffi.Pointer<UA_AddNodesResult>)>>('UA_AddNodesResult_copy');
  late final _UA_AddNodesResult_copy = _UA_AddNodesResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesResult>, ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_deleteMembers(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_deleteMembers');
  late final _UA_AddNodesResult_deleteMembers =
      _UA_AddNodesResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_clear(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_clear(
      p,
    );
  }

  late final _UA_AddNodesResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_clear');
  late final _UA_AddNodesResult_clear = _UA_AddNodesResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesResult_delete(
    ffi.Pointer<UA_AddNodesResult> p,
  ) {
    return _UA_AddNodesResult_delete(
      p,
    );
  }

  late final _UA_AddNodesResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResult>)>>(
      'UA_AddNodesResult_delete');
  late final _UA_AddNodesResult_delete = _UA_AddNodesResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResult>)>();

  void UA_AddNodesRequest_init(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_init(
      p,
    );
  }

  late final _UA_AddNodesRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_init');
  late final _UA_AddNodesRequest_init = _UA_AddNodesRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  ffi.Pointer<UA_AddNodesRequest> UA_AddNodesRequest_new() {
    return _UA_AddNodesRequest_new();
  }

  late final _UA_AddNodesRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesRequest> Function()>>(
          'UA_AddNodesRequest_new');
  late final _UA_AddNodesRequest_new = _UA_AddNodesRequest_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesRequest> Function()>();

  int UA_AddNodesRequest_copy(
    ffi.Pointer<UA_AddNodesRequest> src,
    ffi.Pointer<UA_AddNodesRequest> dst,
  ) {
    return _UA_AddNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesRequest>,
              ffi.Pointer<UA_AddNodesRequest>)>>('UA_AddNodesRequest_copy');
  late final _UA_AddNodesRequest_copy = _UA_AddNodesRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AddNodesRequest>, ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_deleteMembers(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_deleteMembers');
  late final _UA_AddNodesRequest_deleteMembers =
      _UA_AddNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_clear(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_clear(
      p,
    );
  }

  late final _UA_AddNodesRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_clear');
  late final _UA_AddNodesRequest_clear = _UA_AddNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesRequest_delete(
    ffi.Pointer<UA_AddNodesRequest> p,
  ) {
    return _UA_AddNodesRequest_delete(
      p,
    );
  }

  late final _UA_AddNodesRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesRequest>)>>(
      'UA_AddNodesRequest_delete');
  late final _UA_AddNodesRequest_delete = _UA_AddNodesRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesRequest>)>();

  void UA_AddNodesResponse_init(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_init(
      p,
    );
  }

  late final _UA_AddNodesResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_init');
  late final _UA_AddNodesResponse_init = _UA_AddNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  ffi.Pointer<UA_AddNodesResponse> UA_AddNodesResponse_new() {
    return _UA_AddNodesResponse_new();
  }

  late final _UA_AddNodesResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddNodesResponse> Function()>>(
          'UA_AddNodesResponse_new');
  late final _UA_AddNodesResponse_new = _UA_AddNodesResponse_newPtr.asFunction<
      ffi.Pointer<UA_AddNodesResponse> Function()>();

  int UA_AddNodesResponse_copy(
    ffi.Pointer<UA_AddNodesResponse> src,
    ffi.Pointer<UA_AddNodesResponse> dst,
  ) {
    return _UA_AddNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddNodesResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddNodesResponse>,
              ffi.Pointer<UA_AddNodesResponse>)>>('UA_AddNodesResponse_copy');
  late final _UA_AddNodesResponse_copy =
      _UA_AddNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddNodesResponse>,
              ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_deleteMembers(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_AddNodesResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_deleteMembers');
  late final _UA_AddNodesResponse_deleteMembers =
      _UA_AddNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_clear(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_clear(
      p,
    );
  }

  late final _UA_AddNodesResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_clear');
  late final _UA_AddNodesResponse_clear = _UA_AddNodesResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddNodesResponse_delete(
    ffi.Pointer<UA_AddNodesResponse> p,
  ) {
    return _UA_AddNodesResponse_delete(
      p,
    );
  }

  late final _UA_AddNodesResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AddNodesResponse>)>>(
      'UA_AddNodesResponse_delete');
  late final _UA_AddNodesResponse_delete = _UA_AddNodesResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddNodesResponse>)>();

  void UA_AddReferencesItem_init(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_init(
      p,
    );
  }

  late final _UA_AddReferencesItem_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_init');
  late final _UA_AddReferencesItem_init = _UA_AddReferencesItem_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  ffi.Pointer<UA_AddReferencesItem> UA_AddReferencesItem_new() {
    return _UA_AddReferencesItem_new();
  }

  late final _UA_AddReferencesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AddReferencesItem> Function()>>(
          'UA_AddReferencesItem_new');
  late final _UA_AddReferencesItem_new = _UA_AddReferencesItem_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesItem> Function()>();

  int UA_AddReferencesItem_copy(
    ffi.Pointer<UA_AddReferencesItem> src,
    ffi.Pointer<UA_AddReferencesItem> dst,
  ) {
    return _UA_AddReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AddReferencesItem>,
              ffi.Pointer<UA_AddReferencesItem>)>>('UA_AddReferencesItem_copy');
  late final _UA_AddReferencesItem_copy =
      _UA_AddReferencesItem_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesItem>,
              ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_deleteMembers(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_deleteMembers');
  late final _UA_AddReferencesItem_deleteMembers =
      _UA_AddReferencesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_clear(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_clear(
      p,
    );
  }

  late final _UA_AddReferencesItem_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_clear');
  late final _UA_AddReferencesItem_clear = _UA_AddReferencesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesItem_delete(
    ffi.Pointer<UA_AddReferencesItem> p,
  ) {
    return _UA_AddReferencesItem_delete(
      p,
    );
  }

  late final _UA_AddReferencesItem_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesItem>)>>(
      'UA_AddReferencesItem_delete');
  late final _UA_AddReferencesItem_delete = _UA_AddReferencesItem_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesItem>)>();

  void UA_AddReferencesRequest_init(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_init(
      p,
    );
  }

  late final _UA_AddReferencesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_init');
  late final _UA_AddReferencesRequest_init = _UA_AddReferencesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  ffi.Pointer<UA_AddReferencesRequest> UA_AddReferencesRequest_new() {
    return _UA_AddReferencesRequest_new();
  }

  late final _UA_AddReferencesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>>(
      'UA_AddReferencesRequest_new');
  late final _UA_AddReferencesRequest_new = _UA_AddReferencesRequest_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesRequest> Function()>();

  int UA_AddReferencesRequest_copy(
    ffi.Pointer<UA_AddReferencesRequest> src,
    ffi.Pointer<UA_AddReferencesRequest> dst,
  ) {
    return _UA_AddReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AddReferencesRequest>,
                  ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_copy');
  late final _UA_AddReferencesRequest_copy =
      _UA_AddReferencesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesRequest>,
              ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_deleteMembers(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_deleteMembers');
  late final _UA_AddReferencesRequest_deleteMembers =
      _UA_AddReferencesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_clear(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_clear(
      p,
    );
  }

  late final _UA_AddReferencesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_clear');
  late final _UA_AddReferencesRequest_clear = _UA_AddReferencesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesRequest_delete(
    ffi.Pointer<UA_AddReferencesRequest> p,
  ) {
    return _UA_AddReferencesRequest_delete(
      p,
    );
  }

  late final _UA_AddReferencesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesRequest>)>>(
      'UA_AddReferencesRequest_delete');
  late final _UA_AddReferencesRequest_delete =
      _UA_AddReferencesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesRequest>)>();

  void UA_AddReferencesResponse_init(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_init(
      p,
    );
  }

  late final _UA_AddReferencesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_init');
  late final _UA_AddReferencesResponse_init = _UA_AddReferencesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  ffi.Pointer<UA_AddReferencesResponse> UA_AddReferencesResponse_new() {
    return _UA_AddReferencesResponse_new();
  }

  late final _UA_AddReferencesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>>(
      'UA_AddReferencesResponse_new');
  late final _UA_AddReferencesResponse_new = _UA_AddReferencesResponse_newPtr
      .asFunction<ffi.Pointer<UA_AddReferencesResponse> Function()>();

  int UA_AddReferencesResponse_copy(
    ffi.Pointer<UA_AddReferencesResponse> src,
    ffi.Pointer<UA_AddReferencesResponse> dst,
  ) {
    return _UA_AddReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_AddReferencesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AddReferencesResponse>,
                  ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_copy');
  late final _UA_AddReferencesResponse_copy =
      _UA_AddReferencesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AddReferencesResponse>,
              ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_deleteMembers(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_AddReferencesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_deleteMembers');
  late final _UA_AddReferencesResponse_deleteMembers =
      _UA_AddReferencesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_clear(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_clear(
      p,
    );
  }

  late final _UA_AddReferencesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_clear');
  late final _UA_AddReferencesResponse_clear =
      _UA_AddReferencesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_AddReferencesResponse_delete(
    ffi.Pointer<UA_AddReferencesResponse> p,
  ) {
    return _UA_AddReferencesResponse_delete(
      p,
    );
  }

  late final _UA_AddReferencesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AddReferencesResponse>)>>(
      'UA_AddReferencesResponse_delete');
  late final _UA_AddReferencesResponse_delete =
      _UA_AddReferencesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AddReferencesResponse>)>();

  void UA_DeleteNodesItem_init(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_init(
      p,
    );
  }

  late final _UA_DeleteNodesItem_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_init');
  late final _UA_DeleteNodesItem_init = _UA_DeleteNodesItem_initPtr.asFunction<
      void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  ffi.Pointer<UA_DeleteNodesItem> UA_DeleteNodesItem_new() {
    return _UA_DeleteNodesItem_new();
  }

  late final _UA_DeleteNodesItem_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesItem> Function()>>(
          'UA_DeleteNodesItem_new');
  late final _UA_DeleteNodesItem_new = _UA_DeleteNodesItem_newPtr.asFunction<
      ffi.Pointer<UA_DeleteNodesItem> Function()>();

  int UA_DeleteNodesItem_copy(
    ffi.Pointer<UA_DeleteNodesItem> src,
    ffi.Pointer<UA_DeleteNodesItem> dst,
  ) {
    return _UA_DeleteNodesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesItem_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesItem>,
              ffi.Pointer<UA_DeleteNodesItem>)>>('UA_DeleteNodesItem_copy');
  late final _UA_DeleteNodesItem_copy = _UA_DeleteNodesItem_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DeleteNodesItem>, ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_deleteMembers(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesItem_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_deleteMembers');
  late final _UA_DeleteNodesItem_deleteMembers =
      _UA_DeleteNodesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_clear(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_clear(
      p,
    );
  }

  late final _UA_DeleteNodesItem_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_clear');
  late final _UA_DeleteNodesItem_clear = _UA_DeleteNodesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesItem_delete(
    ffi.Pointer<UA_DeleteNodesItem> p,
  ) {
    return _UA_DeleteNodesItem_delete(
      p,
    );
  }

  late final _UA_DeleteNodesItem_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DeleteNodesItem>)>>(
      'UA_DeleteNodesItem_delete');
  late final _UA_DeleteNodesItem_delete = _UA_DeleteNodesItem_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesItem>)>();

  void UA_DeleteNodesRequest_init(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_init(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_init');
  late final _UA_DeleteNodesRequest_init = _UA_DeleteNodesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  ffi.Pointer<UA_DeleteNodesRequest> UA_DeleteNodesRequest_new() {
    return _UA_DeleteNodesRequest_new();
  }

  late final _UA_DeleteNodesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>>(
      'UA_DeleteNodesRequest_new');
  late final _UA_DeleteNodesRequest_new = _UA_DeleteNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_DeleteNodesRequest> Function()>();

  int UA_DeleteNodesRequest_copy(
    ffi.Pointer<UA_DeleteNodesRequest> src,
    ffi.Pointer<UA_DeleteNodesRequest> dst,
  ) {
    return _UA_DeleteNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesRequest>,
                  ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_copy');
  late final _UA_DeleteNodesRequest_copy =
      _UA_DeleteNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteNodesRequest>,
              ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_deleteMembers(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_deleteMembers');
  late final _UA_DeleteNodesRequest_deleteMembers =
      _UA_DeleteNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_clear(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_clear');
  late final _UA_DeleteNodesRequest_clear = _UA_DeleteNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesRequest_delete(
    ffi.Pointer<UA_DeleteNodesRequest> p,
  ) {
    return _UA_DeleteNodesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesRequest>)>>(
      'UA_DeleteNodesRequest_delete');
  late final _UA_DeleteNodesRequest_delete = _UA_DeleteNodesRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesRequest>)>();

  void UA_DeleteNodesResponse_init(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_init(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_init');
  late final _UA_DeleteNodesResponse_init = _UA_DeleteNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  ffi.Pointer<UA_DeleteNodesResponse> UA_DeleteNodesResponse_new() {
    return _UA_DeleteNodesResponse_new();
  }

  late final _UA_DeleteNodesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>>(
      'UA_DeleteNodesResponse_new');
  late final _UA_DeleteNodesResponse_new = _UA_DeleteNodesResponse_newPtr
      .asFunction<ffi.Pointer<UA_DeleteNodesResponse> Function()>();

  int UA_DeleteNodesResponse_copy(
    ffi.Pointer<UA_DeleteNodesResponse> src,
    ffi.Pointer<UA_DeleteNodesResponse> dst,
  ) {
    return _UA_DeleteNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteNodesResponse>,
                  ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_copy');
  late final _UA_DeleteNodesResponse_copy =
      _UA_DeleteNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteNodesResponse>,
              ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_deleteMembers(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_deleteMembers');
  late final _UA_DeleteNodesResponse_deleteMembers =
      _UA_DeleteNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_clear(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_clear');
  late final _UA_DeleteNodesResponse_clear = _UA_DeleteNodesResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteNodesResponse_delete(
    ffi.Pointer<UA_DeleteNodesResponse> p,
  ) {
    return _UA_DeleteNodesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteNodesResponse>)>>(
      'UA_DeleteNodesResponse_delete');
  late final _UA_DeleteNodesResponse_delete = _UA_DeleteNodesResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteNodesResponse>)>();

  void UA_DeleteReferencesItem_init(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_init(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_init');
  late final _UA_DeleteReferencesItem_init = _UA_DeleteReferencesItem_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  ffi.Pointer<UA_DeleteReferencesItem> UA_DeleteReferencesItem_new() {
    return _UA_DeleteReferencesItem_new();
  }

  late final _UA_DeleteReferencesItem_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>>(
      'UA_DeleteReferencesItem_new');
  late final _UA_DeleteReferencesItem_new = _UA_DeleteReferencesItem_newPtr
      .asFunction<ffi.Pointer<UA_DeleteReferencesItem> Function()>();

  int UA_DeleteReferencesItem_copy(
    ffi.Pointer<UA_DeleteReferencesItem> src,
    ffi.Pointer<UA_DeleteReferencesItem> dst,
  ) {
    return _UA_DeleteReferencesItem_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesItem_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesItem>,
                  ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_copy');
  late final _UA_DeleteReferencesItem_copy =
      _UA_DeleteReferencesItem_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesItem>,
              ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_deleteMembers');
  late final _UA_DeleteReferencesItem_deleteMembers =
      _UA_DeleteReferencesItem_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_clear(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_clear');
  late final _UA_DeleteReferencesItem_clear = _UA_DeleteReferencesItem_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesItem_delete(
    ffi.Pointer<UA_DeleteReferencesItem> p,
  ) {
    return _UA_DeleteReferencesItem_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesItem_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesItem>)>>(
      'UA_DeleteReferencesItem_delete');
  late final _UA_DeleteReferencesItem_delete =
      _UA_DeleteReferencesItem_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesItem>)>();

  void UA_DeleteReferencesRequest_init(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_init(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_init');
  late final _UA_DeleteReferencesRequest_init =
      _UA_DeleteReferencesRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  ffi.Pointer<UA_DeleteReferencesRequest> UA_DeleteReferencesRequest_new() {
    return _UA_DeleteReferencesRequest_new();
  }

  late final _UA_DeleteReferencesRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DeleteReferencesRequest> Function()>>(
      'UA_DeleteReferencesRequest_new');
  late final _UA_DeleteReferencesRequest_new =
      _UA_DeleteReferencesRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteReferencesRequest> Function()>();

  int UA_DeleteReferencesRequest_copy(
    ffi.Pointer<UA_DeleteReferencesRequest> src,
    ffi.Pointer<UA_DeleteReferencesRequest> dst,
  ) {
    return _UA_DeleteReferencesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesRequest>,
                  ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_copy');
  late final _UA_DeleteReferencesRequest_copy =
      _UA_DeleteReferencesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesRequest>,
              ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_deleteMembers');
  late final _UA_DeleteReferencesRequest_deleteMembers =
      _UA_DeleteReferencesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_clear(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_clear');
  late final _UA_DeleteReferencesRequest_clear =
      _UA_DeleteReferencesRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesRequest_delete(
    ffi.Pointer<UA_DeleteReferencesRequest> p,
  ) {
    return _UA_DeleteReferencesRequest_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>>(
      'UA_DeleteReferencesRequest_delete');
  late final _UA_DeleteReferencesRequest_delete =
      _UA_DeleteReferencesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesRequest>)>();

  void UA_DeleteReferencesResponse_init(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_init(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_init');
  late final _UA_DeleteReferencesResponse_init =
      _UA_DeleteReferencesResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  ffi.Pointer<UA_DeleteReferencesResponse> UA_DeleteReferencesResponse_new() {
    return _UA_DeleteReferencesResponse_new();
  }

  late final _UA_DeleteReferencesResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DeleteReferencesResponse> Function()>>(
      'UA_DeleteReferencesResponse_new');
  late final _UA_DeleteReferencesResponse_new =
      _UA_DeleteReferencesResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteReferencesResponse> Function()>();

  int UA_DeleteReferencesResponse_copy(
    ffi.Pointer<UA_DeleteReferencesResponse> src,
    ffi.Pointer<UA_DeleteReferencesResponse> dst,
  ) {
    return _UA_DeleteReferencesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteReferencesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteReferencesResponse>,
                  ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_copy');
  late final _UA_DeleteReferencesResponse_copy =
      _UA_DeleteReferencesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteReferencesResponse>,
              ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_deleteMembers(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_deleteMembers');
  late final _UA_DeleteReferencesResponse_deleteMembers =
      _UA_DeleteReferencesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_clear(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_clear(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_clear');
  late final _UA_DeleteReferencesResponse_clear =
      _UA_DeleteReferencesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_DeleteReferencesResponse_delete(
    ffi.Pointer<UA_DeleteReferencesResponse> p,
  ) {
    return _UA_DeleteReferencesResponse_delete(
      p,
    );
  }

  late final _UA_DeleteReferencesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>>(
      'UA_DeleteReferencesResponse_delete');
  late final _UA_DeleteReferencesResponse_delete =
      _UA_DeleteReferencesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteReferencesResponse>)>();

  void UA_BrowseDirection_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_init(
      p,
    );
  }

  late final _UA_BrowseDirection_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_init');
  late final _UA_BrowseDirection_init = _UA_BrowseDirection_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrowseDirection_new() {
    return _UA_BrowseDirection_new();
  }

  late final _UA_BrowseDirection_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrowseDirection_new');
  late final _UA_BrowseDirection_new = _UA_BrowseDirection_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrowseDirection_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrowseDirection_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDirection_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_BrowseDirection_copy');
  late final _UA_BrowseDirection_copy = _UA_BrowseDirection_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseDirection_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_deleteMembers');
  late final _UA_BrowseDirection_deleteMembers =
      _UA_BrowseDirection_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_clear(
      p,
    );
  }

  late final _UA_BrowseDirection_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_clear');
  late final _UA_BrowseDirection_clear = _UA_BrowseDirection_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseDirection_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseDirection_delete(
      p,
    );
  }

  late final _UA_BrowseDirection_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseDirection_delete');
  late final _UA_BrowseDirection_delete = _UA_BrowseDirection_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ViewDescription_init(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_init(
      p,
    );
  }

  late final _UA_ViewDescription_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_init');
  late final _UA_ViewDescription_init = _UA_ViewDescription_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ViewDescription>)>();

  ffi.Pointer<UA_ViewDescription> UA_ViewDescription_new() {
    return _UA_ViewDescription_new();
  }

  late final _UA_ViewDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ViewDescription> Function()>>(
          'UA_ViewDescription_new');
  late final _UA_ViewDescription_new = _UA_ViewDescription_newPtr.asFunction<
      ffi.Pointer<UA_ViewDescription> Function()>();

  int UA_ViewDescription_copy(
    ffi.Pointer<UA_ViewDescription> src,
    ffi.Pointer<UA_ViewDescription> dst,
  ) {
    return _UA_ViewDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ViewDescription>,
              ffi.Pointer<UA_ViewDescription>)>>('UA_ViewDescription_copy');
  late final _UA_ViewDescription_copy = _UA_ViewDescription_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ViewDescription>, ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_deleteMembers(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ViewDescription_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_deleteMembers');
  late final _UA_ViewDescription_deleteMembers =
      _UA_ViewDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_clear(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_clear(
      p,
    );
  }

  late final _UA_ViewDescription_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_clear');
  late final _UA_ViewDescription_clear = _UA_ViewDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_ViewDescription_delete(
    ffi.Pointer<UA_ViewDescription> p,
  ) {
    return _UA_ViewDescription_delete(
      p,
    );
  }

  late final _UA_ViewDescription_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ViewDescription>)>>(
      'UA_ViewDescription_delete');
  late final _UA_ViewDescription_delete = _UA_ViewDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ViewDescription>)>();

  void UA_BrowseDescription_init(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_init(
      p,
    );
  }

  late final _UA_BrowseDescription_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_init');
  late final _UA_BrowseDescription_init = _UA_BrowseDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  ffi.Pointer<UA_BrowseDescription> UA_BrowseDescription_new() {
    return _UA_BrowseDescription_new();
  }

  late final _UA_BrowseDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseDescription> Function()>>(
          'UA_BrowseDescription_new');
  late final _UA_BrowseDescription_new = _UA_BrowseDescription_newPtr
      .asFunction<ffi.Pointer<UA_BrowseDescription> Function()>();

  int UA_BrowseDescription_copy(
    ffi.Pointer<UA_BrowseDescription> src,
    ffi.Pointer<UA_BrowseDescription> dst,
  ) {
    return _UA_BrowseDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<UA_BrowseDescription>)>>('UA_BrowseDescription_copy');
  late final _UA_BrowseDescription_copy =
      _UA_BrowseDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_deleteMembers(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_deleteMembers');
  late final _UA_BrowseDescription_deleteMembers =
      _UA_BrowseDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_clear(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_clear(
      p,
    );
  }

  late final _UA_BrowseDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_clear');
  late final _UA_BrowseDescription_clear = _UA_BrowseDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseDescription_delete(
    ffi.Pointer<UA_BrowseDescription> p,
  ) {
    return _UA_BrowseDescription_delete(
      p,
    );
  }

  late final _UA_BrowseDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseDescription>)>>(
      'UA_BrowseDescription_delete');
  late final _UA_BrowseDescription_delete = _UA_BrowseDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseDescription>)>();

  void UA_BrowseResultMask_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_init(
      p,
    );
  }

  late final _UA_BrowseResultMask_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_init');
  late final _UA_BrowseResultMask_init = _UA_BrowseResultMask_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_BrowseResultMask_new() {
    return _UA_BrowseResultMask_new();
  }

  late final _UA_BrowseResultMask_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_BrowseResultMask_new');
  late final _UA_BrowseResultMask_new = _UA_BrowseResultMask_newPtr.asFunction<
      ffi.Pointer<ffi.Int32> Function()>();

  int UA_BrowseResultMask_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_BrowseResultMask_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResultMask_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_BrowseResultMask_copy');
  late final _UA_BrowseResultMask_copy =
      _UA_BrowseResultMask_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResultMask_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_deleteMembers');
  late final _UA_BrowseResultMask_deleteMembers =
      _UA_BrowseResultMask_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_clear(
      p,
    );
  }

  late final _UA_BrowseResultMask_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_clear');
  late final _UA_BrowseResultMask_clear = _UA_BrowseResultMask_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_BrowseResultMask_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_BrowseResultMask_delete(
      p,
    );
  }

  late final _UA_BrowseResultMask_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_BrowseResultMask_delete');
  late final _UA_BrowseResultMask_delete = _UA_BrowseResultMask_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ReferenceDescription_init(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_init(
      p,
    );
  }

  late final _UA_ReferenceDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_init');
  late final _UA_ReferenceDescription_init = _UA_ReferenceDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  ffi.Pointer<UA_ReferenceDescription> UA_ReferenceDescription_new() {
    return _UA_ReferenceDescription_new();
  }

  late final _UA_ReferenceDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ReferenceDescription> Function()>>(
      'UA_ReferenceDescription_new');
  late final _UA_ReferenceDescription_new = _UA_ReferenceDescription_newPtr
      .asFunction<ffi.Pointer<UA_ReferenceDescription> Function()>();

  int UA_ReferenceDescription_copy(
    ffi.Pointer<UA_ReferenceDescription> src,
    ffi.Pointer<UA_ReferenceDescription> dst,
  ) {
    return _UA_ReferenceDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReferenceDescription>,
                  ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_copy');
  late final _UA_ReferenceDescription_copy =
      _UA_ReferenceDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReferenceDescription>,
              ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_deleteMembers(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_deleteMembers(
      p,
    );
  }

  late final _UA_ReferenceDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_deleteMembers');
  late final _UA_ReferenceDescription_deleteMembers =
      _UA_ReferenceDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_clear(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_clear(
      p,
    );
  }

  late final _UA_ReferenceDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_clear');
  late final _UA_ReferenceDescription_clear = _UA_ReferenceDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_ReferenceDescription_delete(
    ffi.Pointer<UA_ReferenceDescription> p,
  ) {
    return _UA_ReferenceDescription_delete(
      p,
    );
  }

  late final _UA_ReferenceDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReferenceDescription>)>>(
      'UA_ReferenceDescription_delete');
  late final _UA_ReferenceDescription_delete =
      _UA_ReferenceDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ReferenceDescription>)>();

  void UA_BrowseResult_init(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_init(
      p,
    );
  }

  late final _UA_BrowseResult_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_init');
  late final _UA_BrowseResult_init = _UA_BrowseResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  ffi.Pointer<UA_BrowseResult> UA_BrowseResult_new() {
    return _UA_BrowseResult_new();
  }

  late final _UA_BrowseResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResult> Function()>>(
          'UA_BrowseResult_new');
  late final _UA_BrowseResult_new = _UA_BrowseResult_newPtr.asFunction<
      ffi.Pointer<UA_BrowseResult> Function()>();

  int UA_BrowseResult_copy(
    ffi.Pointer<UA_BrowseResult> src,
    ffi.Pointer<UA_BrowseResult> dst,
  ) {
    return _UA_BrowseResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseResult>,
              ffi.Pointer<UA_BrowseResult>)>>('UA_BrowseResult_copy');
  late final _UA_BrowseResult_copy = _UA_BrowseResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseResult>, ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_deleteMembers(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_deleteMembers');
  late final _UA_BrowseResult_deleteMembers = _UA_BrowseResult_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_clear(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_clear(
      p,
    );
  }

  late final _UA_BrowseResult_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_clear');
  late final _UA_BrowseResult_clear = _UA_BrowseResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseResult_delete(
    ffi.Pointer<UA_BrowseResult> p,
  ) {
    return _UA_BrowseResult_delete(
      p,
    );
  }

  late final _UA_BrowseResult_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResult>)>>(
      'UA_BrowseResult_delete');
  late final _UA_BrowseResult_delete = _UA_BrowseResult_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResult>)>();

  void UA_BrowseRequest_init(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_init(
      p,
    );
  }

  late final _UA_BrowseRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_init');
  late final _UA_BrowseRequest_init = _UA_BrowseRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  ffi.Pointer<UA_BrowseRequest> UA_BrowseRequest_new() {
    return _UA_BrowseRequest_new();
  }

  late final _UA_BrowseRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseRequest> Function()>>(
          'UA_BrowseRequest_new');
  late final _UA_BrowseRequest_new = _UA_BrowseRequest_newPtr.asFunction<
      ffi.Pointer<UA_BrowseRequest> Function()>();

  int UA_BrowseRequest_copy(
    ffi.Pointer<UA_BrowseRequest> src,
    ffi.Pointer<UA_BrowseRequest> dst,
  ) {
    return _UA_BrowseRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseRequest>,
              ffi.Pointer<UA_BrowseRequest>)>>('UA_BrowseRequest_copy');
  late final _UA_BrowseRequest_copy = _UA_BrowseRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseRequest>, ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_deleteMembers(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_deleteMembers');
  late final _UA_BrowseRequest_deleteMembers =
      _UA_BrowseRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_clear(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_clear(
      p,
    );
  }

  late final _UA_BrowseRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_clear');
  late final _UA_BrowseRequest_clear = _UA_BrowseRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseRequest_delete(
    ffi.Pointer<UA_BrowseRequest> p,
  ) {
    return _UA_BrowseRequest_delete(
      p,
    );
  }

  late final _UA_BrowseRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseRequest>)>>(
      'UA_BrowseRequest_delete');
  late final _UA_BrowseRequest_delete = _UA_BrowseRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseRequest>)>();

  void UA_BrowseResponse_init(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_init(
      p,
    );
  }

  late final _UA_BrowseResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_init');
  late final _UA_BrowseResponse_init = _UA_BrowseResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResponse>)>();

  ffi.Pointer<UA_BrowseResponse> UA_BrowseResponse_new() {
    return _UA_BrowseResponse_new();
  }

  late final _UA_BrowseResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseResponse> Function()>>(
          'UA_BrowseResponse_new');
  late final _UA_BrowseResponse_new = _UA_BrowseResponse_newPtr.asFunction<
      ffi.Pointer<UA_BrowseResponse> Function()>();

  int UA_BrowseResponse_copy(
    ffi.Pointer<UA_BrowseResponse> src,
    ffi.Pointer<UA_BrowseResponse> dst,
  ) {
    return _UA_BrowseResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseResponse>,
              ffi.Pointer<UA_BrowseResponse>)>>('UA_BrowseResponse_copy');
  late final _UA_BrowseResponse_copy = _UA_BrowseResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_BrowseResponse>, ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_deleteMembers(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_deleteMembers');
  late final _UA_BrowseResponse_deleteMembers =
      _UA_BrowseResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_clear(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_clear(
      p,
    );
  }

  late final _UA_BrowseResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_clear');
  late final _UA_BrowseResponse_clear = _UA_BrowseResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseResponse_delete(
    ffi.Pointer<UA_BrowseResponse> p,
  ) {
    return _UA_BrowseResponse_delete(
      p,
    );
  }

  late final _UA_BrowseResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowseResponse>)>>(
      'UA_BrowseResponse_delete');
  late final _UA_BrowseResponse_delete = _UA_BrowseResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseResponse>)>();

  void UA_BrowseNextRequest_init(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_init(
      p,
    );
  }

  late final _UA_BrowseNextRequest_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_init');
  late final _UA_BrowseNextRequest_init = _UA_BrowseNextRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  ffi.Pointer<UA_BrowseNextRequest> UA_BrowseNextRequest_new() {
    return _UA_BrowseNextRequest_new();
  }

  late final _UA_BrowseNextRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>>(
          'UA_BrowseNextRequest_new');
  late final _UA_BrowseNextRequest_new = _UA_BrowseNextRequest_newPtr
      .asFunction<ffi.Pointer<UA_BrowseNextRequest> Function()>();

  int UA_BrowseNextRequest_copy(
    ffi.Pointer<UA_BrowseNextRequest> src,
    ffi.Pointer<UA_BrowseNextRequest> dst,
  ) {
    return _UA_BrowseNextRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowseNextRequest>,
              ffi.Pointer<UA_BrowseNextRequest>)>>('UA_BrowseNextRequest_copy');
  late final _UA_BrowseNextRequest_copy =
      _UA_BrowseNextRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseNextRequest>,
              ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_deleteMembers(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseNextRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_deleteMembers');
  late final _UA_BrowseNextRequest_deleteMembers =
      _UA_BrowseNextRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_clear(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_clear(
      p,
    );
  }

  late final _UA_BrowseNextRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_clear');
  late final _UA_BrowseNextRequest_clear = _UA_BrowseNextRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextRequest_delete(
    ffi.Pointer<UA_BrowseNextRequest> p,
  ) {
    return _UA_BrowseNextRequest_delete(
      p,
    );
  }

  late final _UA_BrowseNextRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextRequest>)>>(
      'UA_BrowseNextRequest_delete');
  late final _UA_BrowseNextRequest_delete = _UA_BrowseNextRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextRequest>)>();

  void UA_BrowseNextResponse_init(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_init(
      p,
    );
  }

  late final _UA_BrowseNextResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_init');
  late final _UA_BrowseNextResponse_init = _UA_BrowseNextResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  ffi.Pointer<UA_BrowseNextResponse> UA_BrowseNextResponse_new() {
    return _UA_BrowseNextResponse_new();
  }

  late final _UA_BrowseNextResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>>(
      'UA_BrowseNextResponse_new');
  late final _UA_BrowseNextResponse_new = _UA_BrowseNextResponse_newPtr
      .asFunction<ffi.Pointer<UA_BrowseNextResponse> Function()>();

  int UA_BrowseNextResponse_copy(
    ffi.Pointer<UA_BrowseNextResponse> src,
    ffi.Pointer<UA_BrowseNextResponse> dst,
  ) {
    return _UA_BrowseNextResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowseNextResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_BrowseNextResponse>,
                  ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_copy');
  late final _UA_BrowseNextResponse_copy =
      _UA_BrowseNextResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowseNextResponse>,
              ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_deleteMembers(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_deleteMembers(
      p,
    );
  }

  late final _UA_BrowseNextResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_deleteMembers');
  late final _UA_BrowseNextResponse_deleteMembers =
      _UA_BrowseNextResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_clear(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_clear(
      p,
    );
  }

  late final _UA_BrowseNextResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_clear');
  late final _UA_BrowseNextResponse_clear = _UA_BrowseNextResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_BrowseNextResponse_delete(
    ffi.Pointer<UA_BrowseNextResponse> p,
  ) {
    return _UA_BrowseNextResponse_delete(
      p,
    );
  }

  late final _UA_BrowseNextResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_BrowseNextResponse>)>>(
      'UA_BrowseNextResponse_delete');
  late final _UA_BrowseNextResponse_delete = _UA_BrowseNextResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowseNextResponse>)>();

  void UA_RelativePathElement_init(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_init(
      p,
    );
  }

  late final _UA_RelativePathElement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_init');
  late final _UA_RelativePathElement_init = _UA_RelativePathElement_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  ffi.Pointer<UA_RelativePathElement> UA_RelativePathElement_new() {
    return _UA_RelativePathElement_new();
  }

  late final _UA_RelativePathElement_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RelativePathElement> Function()>>(
      'UA_RelativePathElement_new');
  late final _UA_RelativePathElement_new = _UA_RelativePathElement_newPtr
      .asFunction<ffi.Pointer<UA_RelativePathElement> Function()>();

  int UA_RelativePathElement_copy(
    ffi.Pointer<UA_RelativePathElement> src,
    ffi.Pointer<UA_RelativePathElement> dst,
  ) {
    return _UA_RelativePathElement_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePathElement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RelativePathElement>,
                  ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_copy');
  late final _UA_RelativePathElement_copy =
      _UA_RelativePathElement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RelativePathElement>,
              ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_deleteMembers(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_deleteMembers(
      p,
    );
  }

  late final _UA_RelativePathElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_deleteMembers');
  late final _UA_RelativePathElement_deleteMembers =
      _UA_RelativePathElement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_clear(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_clear(
      p,
    );
  }

  late final _UA_RelativePathElement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_clear');
  late final _UA_RelativePathElement_clear = _UA_RelativePathElement_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePathElement_delete(
    ffi.Pointer<UA_RelativePathElement> p,
  ) {
    return _UA_RelativePathElement_delete(
      p,
    );
  }

  late final _UA_RelativePathElement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RelativePathElement>)>>(
      'UA_RelativePathElement_delete');
  late final _UA_RelativePathElement_delete = _UA_RelativePathElement_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePathElement>)>();

  void UA_RelativePath_init(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_init(
      p,
    );
  }

  late final _UA_RelativePath_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_init');
  late final _UA_RelativePath_init = _UA_RelativePath_initPtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  ffi.Pointer<UA_RelativePath> UA_RelativePath_new() {
    return _UA_RelativePath_new();
  }

  late final _UA_RelativePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RelativePath> Function()>>(
          'UA_RelativePath_new');
  late final _UA_RelativePath_new = _UA_RelativePath_newPtr.asFunction<
      ffi.Pointer<UA_RelativePath> Function()>();

  int UA_RelativePath_copy(
    ffi.Pointer<UA_RelativePath> src,
    ffi.Pointer<UA_RelativePath> dst,
  ) {
    return _UA_RelativePath_copy(
      src,
      dst,
    );
  }

  late final _UA_RelativePath_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RelativePath>,
              ffi.Pointer<UA_RelativePath>)>>('UA_RelativePath_copy');
  late final _UA_RelativePath_copy = _UA_RelativePath_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_RelativePath>, ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_deleteMembers(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_deleteMembers(
      p,
    );
  }

  late final _UA_RelativePath_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_deleteMembers');
  late final _UA_RelativePath_deleteMembers = _UA_RelativePath_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_clear(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_clear(
      p,
    );
  }

  late final _UA_RelativePath_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_clear');
  late final _UA_RelativePath_clear = _UA_RelativePath_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_RelativePath_delete(
    ffi.Pointer<UA_RelativePath> p,
  ) {
    return _UA_RelativePath_delete(
      p,
    );
  }

  late final _UA_RelativePath_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_RelativePath>)>>(
      'UA_RelativePath_delete');
  late final _UA_RelativePath_delete = _UA_RelativePath_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_RelativePath>)>();

  void UA_BrowsePath_init(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_init(
      p,
    );
  }

  late final _UA_BrowsePath_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_init');
  late final _UA_BrowsePath_init = _UA_BrowsePath_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  ffi.Pointer<UA_BrowsePath> UA_BrowsePath_new() {
    return _UA_BrowsePath_new();
  }

  late final _UA_BrowsePath_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePath> Function()>>(
          'UA_BrowsePath_new');
  late final _UA_BrowsePath_new =
      _UA_BrowsePath_newPtr.asFunction<ffi.Pointer<UA_BrowsePath> Function()>();

  int UA_BrowsePath_copy(
    ffi.Pointer<UA_BrowsePath> src,
    ffi.Pointer<UA_BrowsePath> dst,
  ) {
    return _UA_BrowsePath_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePath_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePath>,
              ffi.Pointer<UA_BrowsePath>)>>('UA_BrowsePath_copy');
  late final _UA_BrowsePath_copy = _UA_BrowsePath_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BrowsePath>, ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_deleteMembers(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePath_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_deleteMembers');
  late final _UA_BrowsePath_deleteMembers = _UA_BrowsePath_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_clear(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_clear(
      p,
    );
  }

  late final _UA_BrowsePath_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_clear');
  late final _UA_BrowsePath_clear = _UA_BrowsePath_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePath_delete(
    ffi.Pointer<UA_BrowsePath> p,
  ) {
    return _UA_BrowsePath_delete(
      p,
    );
  }

  late final _UA_BrowsePath_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePath>)>>(
      'UA_BrowsePath_delete');
  late final _UA_BrowsePath_delete = _UA_BrowsePath_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BrowsePath>)>();

  void UA_BrowsePathTarget_init(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_init(
      p,
    );
  }

  late final _UA_BrowsePathTarget_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_init');
  late final _UA_BrowsePathTarget_init = _UA_BrowsePathTarget_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  ffi.Pointer<UA_BrowsePathTarget> UA_BrowsePathTarget_new() {
    return _UA_BrowsePathTarget_new();
  }

  late final _UA_BrowsePathTarget_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathTarget> Function()>>(
          'UA_BrowsePathTarget_new');
  late final _UA_BrowsePathTarget_new = _UA_BrowsePathTarget_newPtr.asFunction<
      ffi.Pointer<UA_BrowsePathTarget> Function()>();

  int UA_BrowsePathTarget_copy(
    ffi.Pointer<UA_BrowsePathTarget> src,
    ffi.Pointer<UA_BrowsePathTarget> dst,
  ) {
    return _UA_BrowsePathTarget_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathTarget_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePathTarget>,
              ffi.Pointer<UA_BrowsePathTarget>)>>('UA_BrowsePathTarget_copy');
  late final _UA_BrowsePathTarget_copy =
      _UA_BrowsePathTarget_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowsePathTarget>,
              ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_deleteMembers(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePathTarget_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_deleteMembers');
  late final _UA_BrowsePathTarget_deleteMembers =
      _UA_BrowsePathTarget_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_clear(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_clear(
      p,
    );
  }

  late final _UA_BrowsePathTarget_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_clear');
  late final _UA_BrowsePathTarget_clear = _UA_BrowsePathTarget_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathTarget_delete(
    ffi.Pointer<UA_BrowsePathTarget> p,
  ) {
    return _UA_BrowsePathTarget_delete(
      p,
    );
  }

  late final _UA_BrowsePathTarget_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathTarget>)>>(
      'UA_BrowsePathTarget_delete');
  late final _UA_BrowsePathTarget_delete = _UA_BrowsePathTarget_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathTarget>)>();

  void UA_BrowsePathResult_init(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_init(
      p,
    );
  }

  late final _UA_BrowsePathResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_init');
  late final _UA_BrowsePathResult_init = _UA_BrowsePathResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  ffi.Pointer<UA_BrowsePathResult> UA_BrowsePathResult_new() {
    return _UA_BrowsePathResult_new();
  }

  late final _UA_BrowsePathResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BrowsePathResult> Function()>>(
          'UA_BrowsePathResult_new');
  late final _UA_BrowsePathResult_new = _UA_BrowsePathResult_newPtr.asFunction<
      ffi.Pointer<UA_BrowsePathResult> Function()>();

  int UA_BrowsePathResult_copy(
    ffi.Pointer<UA_BrowsePathResult> src,
    ffi.Pointer<UA_BrowsePathResult> dst,
  ) {
    return _UA_BrowsePathResult_copy(
      src,
      dst,
    );
  }

  late final _UA_BrowsePathResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BrowsePathResult>,
              ffi.Pointer<UA_BrowsePathResult>)>>('UA_BrowsePathResult_copy');
  late final _UA_BrowsePathResult_copy =
      _UA_BrowsePathResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_BrowsePathResult>,
              ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_deleteMembers(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_deleteMembers(
      p,
    );
  }

  late final _UA_BrowsePathResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_deleteMembers');
  late final _UA_BrowsePathResult_deleteMembers =
      _UA_BrowsePathResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_clear(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_clear(
      p,
    );
  }

  late final _UA_BrowsePathResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_clear');
  late final _UA_BrowsePathResult_clear = _UA_BrowsePathResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_BrowsePathResult_delete(
    ffi.Pointer<UA_BrowsePathResult> p,
  ) {
    return _UA_BrowsePathResult_delete(
      p,
    );
  }

  late final _UA_BrowsePathResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_BrowsePathResult>)>>(
      'UA_BrowsePathResult_delete');
  late final _UA_BrowsePathResult_delete = _UA_BrowsePathResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_BrowsePathResult>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_init');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_init =
      _UA_TranslateBrowsePathsToNodeIdsRequest_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>
      UA_TranslateBrowsePathsToNodeIdsRequest_new() {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>
              Function()>>('UA_TranslateBrowsePathsToNodeIdsRequest_new');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_new =
      _UA_TranslateBrowsePathsToNodeIdsRequest_newPtr.asFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsRequest_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_copy =
      _UA_TranslateBrowsePathsToNodeIdsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
          'UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembers =
      _UA_TranslateBrowsePathsToNodeIdsRequest_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_clear =
      _UA_TranslateBrowsePathsToNodeIdsRequest_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsRequest_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsRequest_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>>(
      'UA_TranslateBrowsePathsToNodeIdsRequest_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsRequest_delete =
      _UA_TranslateBrowsePathsToNodeIdsRequest_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsRequest>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_init(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_init(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_init');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_init =
      _UA_TranslateBrowsePathsToNodeIdsResponse_initPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>
      UA_TranslateBrowsePathsToNodeIdsResponse_new() {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_new();
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>
              Function()>>('UA_TranslateBrowsePathsToNodeIdsResponse_new');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_new =
      _UA_TranslateBrowsePathsToNodeIdsResponse_newPtr.asFunction<
          ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> Function()>();

  int UA_TranslateBrowsePathsToNodeIdsResponse_copy(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> src,
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> dst,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_copy');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_copy =
      _UA_TranslateBrowsePathsToNodeIdsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>,
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
          'UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembers =
      _UA_TranslateBrowsePathsToNodeIdsResponse_deleteMembersPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_clear(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_clear(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_clear');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_clear =
      _UA_TranslateBrowsePathsToNodeIdsResponse_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_TranslateBrowsePathsToNodeIdsResponse_delete(
    ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse> p,
  ) {
    return _UA_TranslateBrowsePathsToNodeIdsResponse_delete(
      p,
    );
  }

  late final _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>>(
      'UA_TranslateBrowsePathsToNodeIdsResponse_delete');
  late final _UA_TranslateBrowsePathsToNodeIdsResponse_delete =
      _UA_TranslateBrowsePathsToNodeIdsResponse_deletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_TranslateBrowsePathsToNodeIdsResponse>)>();

  void UA_RegisterNodesRequest_init(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_init(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_init');
  late final _UA_RegisterNodesRequest_init = _UA_RegisterNodesRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  ffi.Pointer<UA_RegisterNodesRequest> UA_RegisterNodesRequest_new() {
    return _UA_RegisterNodesRequest_new();
  }

  late final _UA_RegisterNodesRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>>(
      'UA_RegisterNodesRequest_new');
  late final _UA_RegisterNodesRequest_new = _UA_RegisterNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_RegisterNodesRequest> Function()>();

  int UA_RegisterNodesRequest_copy(
    ffi.Pointer<UA_RegisterNodesRequest> src,
    ffi.Pointer<UA_RegisterNodesRequest> dst,
  ) {
    return _UA_RegisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesRequest>,
                  ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_copy');
  late final _UA_RegisterNodesRequest_copy =
      _UA_RegisterNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RegisterNodesRequest>,
              ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_deleteMembers(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_deleteMembers');
  late final _UA_RegisterNodesRequest_deleteMembers =
      _UA_RegisterNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_clear(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_clear');
  late final _UA_RegisterNodesRequest_clear = _UA_RegisterNodesRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesRequest_delete(
    ffi.Pointer<UA_RegisterNodesRequest> p,
  ) {
    return _UA_RegisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_RegisterNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesRequest>)>>(
      'UA_RegisterNodesRequest_delete');
  late final _UA_RegisterNodesRequest_delete =
      _UA_RegisterNodesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesRequest>)>();

  void UA_RegisterNodesResponse_init(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_init(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_init');
  late final _UA_RegisterNodesResponse_init = _UA_RegisterNodesResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  ffi.Pointer<UA_RegisterNodesResponse> UA_RegisterNodesResponse_new() {
    return _UA_RegisterNodesResponse_new();
  }

  late final _UA_RegisterNodesResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>>(
      'UA_RegisterNodesResponse_new');
  late final _UA_RegisterNodesResponse_new = _UA_RegisterNodesResponse_newPtr
      .asFunction<ffi.Pointer<UA_RegisterNodesResponse> Function()>();

  int UA_RegisterNodesResponse_copy(
    ffi.Pointer<UA_RegisterNodesResponse> src,
    ffi.Pointer<UA_RegisterNodesResponse> dst,
  ) {
    return _UA_RegisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RegisterNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_RegisterNodesResponse>,
                  ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_copy');
  late final _UA_RegisterNodesResponse_copy =
      _UA_RegisterNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RegisterNodesResponse>,
              ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_deleteMembers(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_deleteMembers');
  late final _UA_RegisterNodesResponse_deleteMembers =
      _UA_RegisterNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_clear(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_clear');
  late final _UA_RegisterNodesResponse_clear =
      _UA_RegisterNodesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_RegisterNodesResponse_delete(
    ffi.Pointer<UA_RegisterNodesResponse> p,
  ) {
    return _UA_RegisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_RegisterNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RegisterNodesResponse>)>>(
      'UA_RegisterNodesResponse_delete');
  late final _UA_RegisterNodesResponse_delete =
      _UA_RegisterNodesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_RegisterNodesResponse>)>();

  void UA_UnregisterNodesRequest_init(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_init(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_init');
  late final _UA_UnregisterNodesRequest_init =
      _UA_UnregisterNodesRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  ffi.Pointer<UA_UnregisterNodesRequest> UA_UnregisterNodesRequest_new() {
    return _UA_UnregisterNodesRequest_new();
  }

  late final _UA_UnregisterNodesRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>>(
      'UA_UnregisterNodesRequest_new');
  late final _UA_UnregisterNodesRequest_new = _UA_UnregisterNodesRequest_newPtr
      .asFunction<ffi.Pointer<UA_UnregisterNodesRequest> Function()>();

  int UA_UnregisterNodesRequest_copy(
    ffi.Pointer<UA_UnregisterNodesRequest> src,
    ffi.Pointer<UA_UnregisterNodesRequest> dst,
  ) {
    return _UA_UnregisterNodesRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesRequest>,
                  ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_copy');
  late final _UA_UnregisterNodesRequest_copy =
      _UA_UnregisterNodesRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UnregisterNodesRequest>,
              ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_deleteMembers(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_deleteMembers(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_deleteMembers');
  late final _UA_UnregisterNodesRequest_deleteMembers =
      _UA_UnregisterNodesRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_clear(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_clear');
  late final _UA_UnregisterNodesRequest_clear =
      _UA_UnregisterNodesRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesRequest_delete(
    ffi.Pointer<UA_UnregisterNodesRequest> p,
  ) {
    return _UA_UnregisterNodesRequest_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>>(
      'UA_UnregisterNodesRequest_delete');
  late final _UA_UnregisterNodesRequest_delete =
      _UA_UnregisterNodesRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesRequest>)>();

  void UA_UnregisterNodesResponse_init(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_init(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_init');
  late final _UA_UnregisterNodesResponse_init =
      _UA_UnregisterNodesResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  ffi.Pointer<UA_UnregisterNodesResponse> UA_UnregisterNodesResponse_new() {
    return _UA_UnregisterNodesResponse_new();
  }

  late final _UA_UnregisterNodesResponse_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_UnregisterNodesResponse> Function()>>(
      'UA_UnregisterNodesResponse_new');
  late final _UA_UnregisterNodesResponse_new =
      _UA_UnregisterNodesResponse_newPtr.asFunction<
          ffi.Pointer<UA_UnregisterNodesResponse> Function()>();

  int UA_UnregisterNodesResponse_copy(
    ffi.Pointer<UA_UnregisterNodesResponse> src,
    ffi.Pointer<UA_UnregisterNodesResponse> dst,
  ) {
    return _UA_UnregisterNodesResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_UnregisterNodesResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UnregisterNodesResponse>,
                  ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_copy');
  late final _UA_UnregisterNodesResponse_copy =
      _UA_UnregisterNodesResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UnregisterNodesResponse>,
              ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_deleteMembers(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_deleteMembers(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_deleteMembers');
  late final _UA_UnregisterNodesResponse_deleteMembers =
      _UA_UnregisterNodesResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_clear(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_clear(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_clear');
  late final _UA_UnregisterNodesResponse_clear =
      _UA_UnregisterNodesResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_UnregisterNodesResponse_delete(
    ffi.Pointer<UA_UnregisterNodesResponse> p,
  ) {
    return _UA_UnregisterNodesResponse_delete(
      p,
    );
  }

  late final _UA_UnregisterNodesResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>>(
      'UA_UnregisterNodesResponse_delete');
  late final _UA_UnregisterNodesResponse_delete =
      _UA_UnregisterNodesResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UnregisterNodesResponse>)>();

  void UA_FilterOperator_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_init(
      p,
    );
  }

  late final _UA_FilterOperator_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_init');
  late final _UA_FilterOperator_init = _UA_FilterOperator_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_FilterOperator_new() {
    return _UA_FilterOperator_new();
  }

  late final _UA_FilterOperator_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_FilterOperator_new');
  late final _UA_FilterOperator_new =
      _UA_FilterOperator_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_FilterOperator_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_FilterOperator_copy(
      src,
      dst,
    );
  }

  late final _UA_FilterOperator_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_FilterOperator_copy');
  late final _UA_FilterOperator_copy = _UA_FilterOperator_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_deleteMembers(
      p,
    );
  }

  late final _UA_FilterOperator_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_deleteMembers');
  late final _UA_FilterOperator_deleteMembers =
      _UA_FilterOperator_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_clear(
      p,
    );
  }

  late final _UA_FilterOperator_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_clear');
  late final _UA_FilterOperator_clear = _UA_FilterOperator_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_FilterOperator_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_FilterOperator_delete(
      p,
    );
  }

  late final _UA_FilterOperator_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_FilterOperator_delete');
  late final _UA_FilterOperator_delete = _UA_FilterOperator_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ContentFilterElement_init(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_init(
      p,
    );
  }

  late final _UA_ContentFilterElement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_init');
  late final _UA_ContentFilterElement_init = _UA_ContentFilterElement_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  ffi.Pointer<UA_ContentFilterElement> UA_ContentFilterElement_new() {
    return _UA_ContentFilterElement_new();
  }

  late final _UA_ContentFilterElement_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ContentFilterElement> Function()>>(
      'UA_ContentFilterElement_new');
  late final _UA_ContentFilterElement_new = _UA_ContentFilterElement_newPtr
      .asFunction<ffi.Pointer<UA_ContentFilterElement> Function()>();

  int UA_ContentFilterElement_copy(
    ffi.Pointer<UA_ContentFilterElement> src,
    ffi.Pointer<UA_ContentFilterElement> dst,
  ) {
    return _UA_ContentFilterElement_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElement>,
                  ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_copy');
  late final _UA_ContentFilterElement_copy =
      _UA_ContentFilterElement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterElement>,
              ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_deleteMembers(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterElement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_deleteMembers');
  late final _UA_ContentFilterElement_deleteMembers =
      _UA_ContentFilterElement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_clear(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_clear(
      p,
    );
  }

  late final _UA_ContentFilterElement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_clear');
  late final _UA_ContentFilterElement_clear = _UA_ContentFilterElement_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilterElement_delete(
    ffi.Pointer<UA_ContentFilterElement> p,
  ) {
    return _UA_ContentFilterElement_delete(
      p,
    );
  }

  late final _UA_ContentFilterElement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElement>)>>(
      'UA_ContentFilterElement_delete');
  late final _UA_ContentFilterElement_delete =
      _UA_ContentFilterElement_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElement>)>();

  void UA_ContentFilter_init(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_init(
      p,
    );
  }

  late final _UA_ContentFilter_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_init');
  late final _UA_ContentFilter_init = _UA_ContentFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  ffi.Pointer<UA_ContentFilter> UA_ContentFilter_new() {
    return _UA_ContentFilter_new();
  }

  late final _UA_ContentFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ContentFilter> Function()>>(
          'UA_ContentFilter_new');
  late final _UA_ContentFilter_new = _UA_ContentFilter_newPtr.asFunction<
      ffi.Pointer<UA_ContentFilter> Function()>();

  int UA_ContentFilter_copy(
    ffi.Pointer<UA_ContentFilter> src,
    ffi.Pointer<UA_ContentFilter> dst,
  ) {
    return _UA_ContentFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ContentFilter>,
              ffi.Pointer<UA_ContentFilter>)>>('UA_ContentFilter_copy');
  late final _UA_ContentFilter_copy = _UA_ContentFilter_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ContentFilter>, ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_deleteMembers(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilter_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_deleteMembers');
  late final _UA_ContentFilter_deleteMembers =
      _UA_ContentFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_clear(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_clear(
      p,
    );
  }

  late final _UA_ContentFilter_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_clear');
  late final _UA_ContentFilter_clear = _UA_ContentFilter_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ContentFilter_delete(
    ffi.Pointer<UA_ContentFilter> p,
  ) {
    return _UA_ContentFilter_delete(
      p,
    );
  }

  late final _UA_ContentFilter_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ContentFilter>)>>(
      'UA_ContentFilter_delete');
  late final _UA_ContentFilter_delete = _UA_ContentFilter_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ContentFilter>)>();

  void UA_ElementOperand_init(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_init(
      p,
    );
  }

  late final _UA_ElementOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_init');
  late final _UA_ElementOperand_init = _UA_ElementOperand_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ElementOperand>)>();

  ffi.Pointer<UA_ElementOperand> UA_ElementOperand_new() {
    return _UA_ElementOperand_new();
  }

  late final _UA_ElementOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ElementOperand> Function()>>(
          'UA_ElementOperand_new');
  late final _UA_ElementOperand_new = _UA_ElementOperand_newPtr.asFunction<
      ffi.Pointer<UA_ElementOperand> Function()>();

  int UA_ElementOperand_copy(
    ffi.Pointer<UA_ElementOperand> src,
    ffi.Pointer<UA_ElementOperand> dst,
  ) {
    return _UA_ElementOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_ElementOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ElementOperand>,
              ffi.Pointer<UA_ElementOperand>)>>('UA_ElementOperand_copy');
  late final _UA_ElementOperand_copy = _UA_ElementOperand_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ElementOperand>, ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_deleteMembers(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_deleteMembers(
      p,
    );
  }

  late final _UA_ElementOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_deleteMembers');
  late final _UA_ElementOperand_deleteMembers =
      _UA_ElementOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_clear(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_clear(
      p,
    );
  }

  late final _UA_ElementOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_clear');
  late final _UA_ElementOperand_clear = _UA_ElementOperand_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_ElementOperand_delete(
    ffi.Pointer<UA_ElementOperand> p,
  ) {
    return _UA_ElementOperand_delete(
      p,
    );
  }

  late final _UA_ElementOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ElementOperand>)>>(
      'UA_ElementOperand_delete');
  late final _UA_ElementOperand_delete = _UA_ElementOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ElementOperand>)>();

  void UA_LiteralOperand_init(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_init(
      p,
    );
  }

  late final _UA_LiteralOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_init');
  late final _UA_LiteralOperand_init = _UA_LiteralOperand_initPtr.asFunction<
      void Function(ffi.Pointer<UA_LiteralOperand>)>();

  ffi.Pointer<UA_LiteralOperand> UA_LiteralOperand_new() {
    return _UA_LiteralOperand_new();
  }

  late final _UA_LiteralOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_LiteralOperand> Function()>>(
          'UA_LiteralOperand_new');
  late final _UA_LiteralOperand_new = _UA_LiteralOperand_newPtr.asFunction<
      ffi.Pointer<UA_LiteralOperand> Function()>();

  int UA_LiteralOperand_copy(
    ffi.Pointer<UA_LiteralOperand> src,
    ffi.Pointer<UA_LiteralOperand> dst,
  ) {
    return _UA_LiteralOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_LiteralOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_LiteralOperand>,
              ffi.Pointer<UA_LiteralOperand>)>>('UA_LiteralOperand_copy');
  late final _UA_LiteralOperand_copy = _UA_LiteralOperand_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_LiteralOperand>, ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_deleteMembers(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_deleteMembers(
      p,
    );
  }

  late final _UA_LiteralOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_deleteMembers');
  late final _UA_LiteralOperand_deleteMembers =
      _UA_LiteralOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_clear(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_clear(
      p,
    );
  }

  late final _UA_LiteralOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_clear');
  late final _UA_LiteralOperand_clear = _UA_LiteralOperand_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_LiteralOperand_delete(
    ffi.Pointer<UA_LiteralOperand> p,
  ) {
    return _UA_LiteralOperand_delete(
      p,
    );
  }

  late final _UA_LiteralOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_LiteralOperand>)>>(
      'UA_LiteralOperand_delete');
  late final _UA_LiteralOperand_delete = _UA_LiteralOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_LiteralOperand>)>();

  void UA_AttributeOperand_init(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_init(
      p,
    );
  }

  late final _UA_AttributeOperand_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_init');
  late final _UA_AttributeOperand_init = _UA_AttributeOperand_initPtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  ffi.Pointer<UA_AttributeOperand> UA_AttributeOperand_new() {
    return _UA_AttributeOperand_new();
  }

  late final _UA_AttributeOperand_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AttributeOperand> Function()>>(
          'UA_AttributeOperand_new');
  late final _UA_AttributeOperand_new = _UA_AttributeOperand_newPtr.asFunction<
      ffi.Pointer<UA_AttributeOperand> Function()>();

  int UA_AttributeOperand_copy(
    ffi.Pointer<UA_AttributeOperand> src,
    ffi.Pointer<UA_AttributeOperand> dst,
  ) {
    return _UA_AttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_AttributeOperand_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AttributeOperand>,
              ffi.Pointer<UA_AttributeOperand>)>>('UA_AttributeOperand_copy');
  late final _UA_AttributeOperand_copy =
      _UA_AttributeOperand_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AttributeOperand>,
              ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_deleteMembers(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_deleteMembers(
      p,
    );
  }

  late final _UA_AttributeOperand_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_deleteMembers');
  late final _UA_AttributeOperand_deleteMembers =
      _UA_AttributeOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_clear(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_clear(
      p,
    );
  }

  late final _UA_AttributeOperand_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_clear');
  late final _UA_AttributeOperand_clear = _UA_AttributeOperand_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_AttributeOperand_delete(
    ffi.Pointer<UA_AttributeOperand> p,
  ) {
    return _UA_AttributeOperand_delete(
      p,
    );
  }

  late final _UA_AttributeOperand_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AttributeOperand>)>>(
      'UA_AttributeOperand_delete');
  late final _UA_AttributeOperand_delete = _UA_AttributeOperand_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AttributeOperand>)>();

  void UA_SimpleAttributeOperand_init(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_init(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_init');
  late final _UA_SimpleAttributeOperand_init =
      _UA_SimpleAttributeOperand_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  ffi.Pointer<UA_SimpleAttributeOperand> UA_SimpleAttributeOperand_new() {
    return _UA_SimpleAttributeOperand_new();
  }

  late final _UA_SimpleAttributeOperand_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>>(
      'UA_SimpleAttributeOperand_new');
  late final _UA_SimpleAttributeOperand_new = _UA_SimpleAttributeOperand_newPtr
      .asFunction<ffi.Pointer<UA_SimpleAttributeOperand> Function()>();

  int UA_SimpleAttributeOperand_copy(
    ffi.Pointer<UA_SimpleAttributeOperand> src,
    ffi.Pointer<UA_SimpleAttributeOperand> dst,
  ) {
    return _UA_SimpleAttributeOperand_copy(
      src,
      dst,
    );
  }

  late final _UA_SimpleAttributeOperand_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SimpleAttributeOperand>,
                  ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_copy');
  late final _UA_SimpleAttributeOperand_copy =
      _UA_SimpleAttributeOperand_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SimpleAttributeOperand>,
              ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_deleteMembers(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_deleteMembers(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_deleteMembers');
  late final _UA_SimpleAttributeOperand_deleteMembers =
      _UA_SimpleAttributeOperand_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_clear(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_clear(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_clear');
  late final _UA_SimpleAttributeOperand_clear =
      _UA_SimpleAttributeOperand_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_SimpleAttributeOperand_delete(
    ffi.Pointer<UA_SimpleAttributeOperand> p,
  ) {
    return _UA_SimpleAttributeOperand_delete(
      p,
    );
  }

  late final _UA_SimpleAttributeOperand_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>>(
      'UA_SimpleAttributeOperand_delete');
  late final _UA_SimpleAttributeOperand_delete =
      _UA_SimpleAttributeOperand_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SimpleAttributeOperand>)>();

  void UA_ContentFilterElementResult_init(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_init(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_init');
  late final _UA_ContentFilterElementResult_init =
      _UA_ContentFilterElementResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  ffi.Pointer<UA_ContentFilterElementResult>
      UA_ContentFilterElementResult_new() {
    return _UA_ContentFilterElementResult_new();
  }

  late final _UA_ContentFilterElementResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ContentFilterElementResult>
              Function()>>('UA_ContentFilterElementResult_new');
  late final _UA_ContentFilterElementResult_new =
      _UA_ContentFilterElementResult_newPtr.asFunction<
          ffi.Pointer<UA_ContentFilterElementResult> Function()>();

  int UA_ContentFilterElementResult_copy(
    ffi.Pointer<UA_ContentFilterElementResult> src,
    ffi.Pointer<UA_ContentFilterElementResult> dst,
  ) {
    return _UA_ContentFilterElementResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterElementResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterElementResult>,
                  ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_copy');
  late final _UA_ContentFilterElementResult_copy =
      _UA_ContentFilterElementResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterElementResult>,
              ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_deleteMembers(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_deleteMembers');
  late final _UA_ContentFilterElementResult_deleteMembers =
      _UA_ContentFilterElementResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_clear(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_clear');
  late final _UA_ContentFilterElementResult_clear =
      _UA_ContentFilterElementResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterElementResult_delete(
    ffi.Pointer<UA_ContentFilterElementResult> p,
  ) {
    return _UA_ContentFilterElementResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterElementResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterElementResult>)>>(
      'UA_ContentFilterElementResult_delete');
  late final _UA_ContentFilterElementResult_delete =
      _UA_ContentFilterElementResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterElementResult>)>();

  void UA_ContentFilterResult_init(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_init(
      p,
    );
  }

  late final _UA_ContentFilterResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_init');
  late final _UA_ContentFilterResult_init = _UA_ContentFilterResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  ffi.Pointer<UA_ContentFilterResult> UA_ContentFilterResult_new() {
    return _UA_ContentFilterResult_new();
  }

  late final _UA_ContentFilterResult_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ContentFilterResult> Function()>>(
      'UA_ContentFilterResult_new');
  late final _UA_ContentFilterResult_new = _UA_ContentFilterResult_newPtr
      .asFunction<ffi.Pointer<UA_ContentFilterResult> Function()>();

  int UA_ContentFilterResult_copy(
    ffi.Pointer<UA_ContentFilterResult> src,
    ffi.Pointer<UA_ContentFilterResult> dst,
  ) {
    return _UA_ContentFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_ContentFilterResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ContentFilterResult>,
                  ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_copy');
  late final _UA_ContentFilterResult_copy =
      _UA_ContentFilterResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ContentFilterResult>,
              ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_deleteMembers(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_deleteMembers(
      p,
    );
  }

  late final _UA_ContentFilterResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_deleteMembers');
  late final _UA_ContentFilterResult_deleteMembers =
      _UA_ContentFilterResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_clear(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_clear(
      p,
    );
  }

  late final _UA_ContentFilterResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_clear');
  late final _UA_ContentFilterResult_clear = _UA_ContentFilterResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_ContentFilterResult_delete(
    ffi.Pointer<UA_ContentFilterResult> p,
  ) {
    return _UA_ContentFilterResult_delete(
      p,
    );
  }

  late final _UA_ContentFilterResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_ContentFilterResult_delete');
  late final _UA_ContentFilterResult_delete = _UA_ContentFilterResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_TimestampsToReturn_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_init(
      p,
    );
  }

  late final _UA_TimestampsToReturn_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_init');
  late final _UA_TimestampsToReturn_init = _UA_TimestampsToReturn_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_TimestampsToReturn_new() {
    return _UA_TimestampsToReturn_new();
  }

  late final _UA_TimestampsToReturn_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_TimestampsToReturn_new');
  late final _UA_TimestampsToReturn_new = _UA_TimestampsToReturn_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_TimestampsToReturn_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_TimestampsToReturn_copy(
      src,
      dst,
    );
  }

  late final _UA_TimestampsToReturn_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_TimestampsToReturn_copy');
  late final _UA_TimestampsToReturn_copy =
      _UA_TimestampsToReturn_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_deleteMembers(
      p,
    );
  }

  late final _UA_TimestampsToReturn_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_deleteMembers');
  late final _UA_TimestampsToReturn_deleteMembers =
      _UA_TimestampsToReturn_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_clear(
      p,
    );
  }

  late final _UA_TimestampsToReturn_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_clear');
  late final _UA_TimestampsToReturn_clear = _UA_TimestampsToReturn_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_TimestampsToReturn_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_TimestampsToReturn_delete(
      p,
    );
  }

  late final _UA_TimestampsToReturn_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_TimestampsToReturn_delete');
  late final _UA_TimestampsToReturn_delete = _UA_TimestampsToReturn_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ReadValueId_init(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_init(
      p,
    );
  }

  late final _UA_ReadValueId_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_init');
  late final _UA_ReadValueId_init = _UA_ReadValueId_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  ffi.Pointer<UA_ReadValueId> UA_ReadValueId_new() {
    return _UA_ReadValueId_new();
  }

  late final _UA_ReadValueId_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadValueId> Function()>>(
          'UA_ReadValueId_new');
  late final _UA_ReadValueId_new = _UA_ReadValueId_newPtr.asFunction<
      ffi.Pointer<UA_ReadValueId> Function()>();

  int UA_ReadValueId_copy(
    ffi.Pointer<UA_ReadValueId> src,
    ffi.Pointer<UA_ReadValueId> dst,
  ) {
    return _UA_ReadValueId_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadValueId_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadValueId>,
              ffi.Pointer<UA_ReadValueId>)>>('UA_ReadValueId_copy');
  late final _UA_ReadValueId_copy = _UA_ReadValueId_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadValueId>, ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_deleteMembers(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_deleteMembers(
      p,
    );
  }

  late final _UA_ReadValueId_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_deleteMembers');
  late final _UA_ReadValueId_deleteMembers = _UA_ReadValueId_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_clear(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_clear(
      p,
    );
  }

  late final _UA_ReadValueId_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_clear');
  late final _UA_ReadValueId_clear = _UA_ReadValueId_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadValueId_delete(
    ffi.Pointer<UA_ReadValueId> p,
  ) {
    return _UA_ReadValueId_delete(
      p,
    );
  }

  late final _UA_ReadValueId_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadValueId>)>>(
      'UA_ReadValueId_delete');
  late final _UA_ReadValueId_delete = _UA_ReadValueId_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadValueId>)>();

  void UA_ReadRequest_init(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_init(
      p,
    );
  }

  late final _UA_ReadRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_init');
  late final _UA_ReadRequest_init = _UA_ReadRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  ffi.Pointer<UA_ReadRequest> UA_ReadRequest_new() {
    return _UA_ReadRequest_new();
  }

  late final _UA_ReadRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadRequest> Function()>>(
          'UA_ReadRequest_new');
  late final _UA_ReadRequest_new = _UA_ReadRequest_newPtr.asFunction<
      ffi.Pointer<UA_ReadRequest> Function()>();

  int UA_ReadRequest_copy(
    ffi.Pointer<UA_ReadRequest> src,
    ffi.Pointer<UA_ReadRequest> dst,
  ) {
    return _UA_ReadRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadRequest>,
              ffi.Pointer<UA_ReadRequest>)>>('UA_ReadRequest_copy');
  late final _UA_ReadRequest_copy = _UA_ReadRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ReadRequest>, ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_deleteMembers(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ReadRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_deleteMembers');
  late final _UA_ReadRequest_deleteMembers = _UA_ReadRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_clear(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_clear(
      p,
    );
  }

  late final _UA_ReadRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_clear');
  late final _UA_ReadRequest_clear = _UA_ReadRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadRequest_delete(
    ffi.Pointer<UA_ReadRequest> p,
  ) {
    return _UA_ReadRequest_delete(
      p,
    );
  }

  late final _UA_ReadRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadRequest>)>>(
      'UA_ReadRequest_delete');
  late final _UA_ReadRequest_delete = _UA_ReadRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadRequest>)>();

  void UA_ReadResponse_init(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_init(
      p,
    );
  }

  late final _UA_ReadResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_init');
  late final _UA_ReadResponse_init = _UA_ReadResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  ffi.Pointer<UA_ReadResponse> UA_ReadResponse_new() {
    return _UA_ReadResponse_new();
  }

  late final _UA_ReadResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ReadResponse> Function()>>(
          'UA_ReadResponse_new');
  late final _UA_ReadResponse_new = _UA_ReadResponse_newPtr.asFunction<
      ffi.Pointer<UA_ReadResponse> Function()>();

  int UA_ReadResponse_copy(
    ffi.Pointer<UA_ReadResponse> src,
    ffi.Pointer<UA_ReadResponse> dst,
  ) {
    return _UA_ReadResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ReadResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReadResponse>,
              ffi.Pointer<UA_ReadResponse>)>>('UA_ReadResponse_copy');
  late final _UA_ReadResponse_copy = _UA_ReadResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ReadResponse>, ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_deleteMembers(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ReadResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_deleteMembers');
  late final _UA_ReadResponse_deleteMembers = _UA_ReadResponse_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_clear(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_clear(
      p,
    );
  }

  late final _UA_ReadResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_clear');
  late final _UA_ReadResponse_clear = _UA_ReadResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_ReadResponse_delete(
    ffi.Pointer<UA_ReadResponse> p,
  ) {
    return _UA_ReadResponse_delete(
      p,
    );
  }

  late final _UA_ReadResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReadResponse>)>>(
      'UA_ReadResponse_delete');
  late final _UA_ReadResponse_delete = _UA_ReadResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_ReadResponse>)>();

  void UA_WriteValue_init(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_init(
      p,
    );
  }

  late final _UA_WriteValue_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_init');
  late final _UA_WriteValue_init = _UA_WriteValue_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  ffi.Pointer<UA_WriteValue> UA_WriteValue_new() {
    return _UA_WriteValue_new();
  }

  late final _UA_WriteValue_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteValue> Function()>>(
          'UA_WriteValue_new');
  late final _UA_WriteValue_new =
      _UA_WriteValue_newPtr.asFunction<ffi.Pointer<UA_WriteValue> Function()>();

  int UA_WriteValue_copy(
    ffi.Pointer<UA_WriteValue> src,
    ffi.Pointer<UA_WriteValue> dst,
  ) {
    return _UA_WriteValue_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteValue_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteValue>,
              ffi.Pointer<UA_WriteValue>)>>('UA_WriteValue_copy');
  late final _UA_WriteValue_copy = _UA_WriteValue_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_WriteValue>, ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_deleteMembers(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_deleteMembers(
      p,
    );
  }

  late final _UA_WriteValue_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_deleteMembers');
  late final _UA_WriteValue_deleteMembers = _UA_WriteValue_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_clear(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_clear(
      p,
    );
  }

  late final _UA_WriteValue_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_clear');
  late final _UA_WriteValue_clear = _UA_WriteValue_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteValue_delete(
    ffi.Pointer<UA_WriteValue> p,
  ) {
    return _UA_WriteValue_delete(
      p,
    );
  }

  late final _UA_WriteValue_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteValue>)>>(
      'UA_WriteValue_delete');
  late final _UA_WriteValue_delete = _UA_WriteValue_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteValue>)>();

  void UA_WriteRequest_init(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_init(
      p,
    );
  }

  late final _UA_WriteRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_init');
  late final _UA_WriteRequest_init = _UA_WriteRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  ffi.Pointer<UA_WriteRequest> UA_WriteRequest_new() {
    return _UA_WriteRequest_new();
  }

  late final _UA_WriteRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteRequest> Function()>>(
          'UA_WriteRequest_new');
  late final _UA_WriteRequest_new = _UA_WriteRequest_newPtr.asFunction<
      ffi.Pointer<UA_WriteRequest> Function()>();

  int UA_WriteRequest_copy(
    ffi.Pointer<UA_WriteRequest> src,
    ffi.Pointer<UA_WriteRequest> dst,
  ) {
    return _UA_WriteRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteRequest>,
              ffi.Pointer<UA_WriteRequest>)>>('UA_WriteRequest_copy');
  late final _UA_WriteRequest_copy = _UA_WriteRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_WriteRequest>, ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_deleteMembers(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_deleteMembers(
      p,
    );
  }

  late final _UA_WriteRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_deleteMembers');
  late final _UA_WriteRequest_deleteMembers = _UA_WriteRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_clear(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_clear(
      p,
    );
  }

  late final _UA_WriteRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_clear');
  late final _UA_WriteRequest_clear = _UA_WriteRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteRequest_delete(
    ffi.Pointer<UA_WriteRequest> p,
  ) {
    return _UA_WriteRequest_delete(
      p,
    );
  }

  late final _UA_WriteRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteRequest>)>>(
      'UA_WriteRequest_delete');
  late final _UA_WriteRequest_delete = _UA_WriteRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteRequest>)>();

  void UA_WriteResponse_init(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_init(
      p,
    );
  }

  late final _UA_WriteResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_init');
  late final _UA_WriteResponse_init = _UA_WriteResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  ffi.Pointer<UA_WriteResponse> UA_WriteResponse_new() {
    return _UA_WriteResponse_new();
  }

  late final _UA_WriteResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_WriteResponse> Function()>>(
          'UA_WriteResponse_new');
  late final _UA_WriteResponse_new = _UA_WriteResponse_newPtr.asFunction<
      ffi.Pointer<UA_WriteResponse> Function()>();

  int UA_WriteResponse_copy(
    ffi.Pointer<UA_WriteResponse> src,
    ffi.Pointer<UA_WriteResponse> dst,
  ) {
    return _UA_WriteResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_WriteResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriteResponse>,
              ffi.Pointer<UA_WriteResponse>)>>('UA_WriteResponse_copy');
  late final _UA_WriteResponse_copy = _UA_WriteResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_WriteResponse>, ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_deleteMembers(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_deleteMembers(
      p,
    );
  }

  late final _UA_WriteResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_deleteMembers');
  late final _UA_WriteResponse_deleteMembers =
      _UA_WriteResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_clear(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_clear(
      p,
    );
  }

  late final _UA_WriteResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_clear');
  late final _UA_WriteResponse_clear = _UA_WriteResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_WriteResponse_delete(
    ffi.Pointer<UA_WriteResponse> p,
  ) {
    return _UA_WriteResponse_delete(
      p,
    );
  }

  late final _UA_WriteResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_WriteResponse_delete');
  late final _UA_WriteResponse_delete = _UA_WriteResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_WriteResponse>)>();

  void UA_CallMethodRequest_init(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_init(
      p,
    );
  }

  late final _UA_CallMethodRequest_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_init');
  late final _UA_CallMethodRequest_init = _UA_CallMethodRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  ffi.Pointer<UA_CallMethodRequest> UA_CallMethodRequest_new() {
    return _UA_CallMethodRequest_new();
  }

  late final _UA_CallMethodRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodRequest> Function()>>(
          'UA_CallMethodRequest_new');
  late final _UA_CallMethodRequest_new = _UA_CallMethodRequest_newPtr
      .asFunction<ffi.Pointer<UA_CallMethodRequest> Function()>();

  int UA_CallMethodRequest_copy(
    ffi.Pointer<UA_CallMethodRequest> src,
    ffi.Pointer<UA_CallMethodRequest> dst,
  ) {
    return _UA_CallMethodRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallMethodRequest>,
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_CallMethodRequest_copy');
  late final _UA_CallMethodRequest_copy =
      _UA_CallMethodRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CallMethodRequest>,
              ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_deleteMembers(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CallMethodRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_deleteMembers');
  late final _UA_CallMethodRequest_deleteMembers =
      _UA_CallMethodRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_clear(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_clear(
      p,
    );
  }

  late final _UA_CallMethodRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_clear');
  late final _UA_CallMethodRequest_clear = _UA_CallMethodRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodRequest_delete(
    ffi.Pointer<UA_CallMethodRequest> p,
  ) {
    return _UA_CallMethodRequest_delete(
      p,
    );
  }

  late final _UA_CallMethodRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_CallMethodRequest_delete');
  late final _UA_CallMethodRequest_delete = _UA_CallMethodRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodRequest>)>();

  void UA_CallMethodResult_init(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_init(
      p,
    );
  }

  late final _UA_CallMethodResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_init');
  late final _UA_CallMethodResult_init = _UA_CallMethodResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  ffi.Pointer<UA_CallMethodResult> UA_CallMethodResult_new() {
    return _UA_CallMethodResult_new();
  }

  late final _UA_CallMethodResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallMethodResult> Function()>>(
          'UA_CallMethodResult_new');
  late final _UA_CallMethodResult_new = _UA_CallMethodResult_newPtr.asFunction<
      ffi.Pointer<UA_CallMethodResult> Function()>();

  int UA_CallMethodResult_copy(
    ffi.Pointer<UA_CallMethodResult> src,
    ffi.Pointer<UA_CallMethodResult> dst,
  ) {
    return _UA_CallMethodResult_copy(
      src,
      dst,
    );
  }

  late final _UA_CallMethodResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallMethodResult>,
              ffi.Pointer<UA_CallMethodResult>)>>('UA_CallMethodResult_copy');
  late final _UA_CallMethodResult_copy =
      _UA_CallMethodResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CallMethodResult>,
              ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_deleteMembers(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_deleteMembers(
      p,
    );
  }

  late final _UA_CallMethodResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_deleteMembers');
  late final _UA_CallMethodResult_deleteMembers =
      _UA_CallMethodResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_clear(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_clear(
      p,
    );
  }

  late final _UA_CallMethodResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_clear');
  late final _UA_CallMethodResult_clear = _UA_CallMethodResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallMethodResult_delete(
    ffi.Pointer<UA_CallMethodResult> p,
  ) {
    return _UA_CallMethodResult_delete(
      p,
    );
  }

  late final _UA_CallMethodResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallMethodResult>)>>(
      'UA_CallMethodResult_delete');
  late final _UA_CallMethodResult_delete = _UA_CallMethodResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_CallMethodResult>)>();

  void UA_CallRequest_init(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_init(
      p,
    );
  }

  late final _UA_CallRequest_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_init');
  late final _UA_CallRequest_init = _UA_CallRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  ffi.Pointer<UA_CallRequest> UA_CallRequest_new() {
    return _UA_CallRequest_new();
  }

  late final _UA_CallRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallRequest> Function()>>(
          'UA_CallRequest_new');
  late final _UA_CallRequest_new = _UA_CallRequest_newPtr.asFunction<
      ffi.Pointer<UA_CallRequest> Function()>();

  int UA_CallRequest_copy(
    ffi.Pointer<UA_CallRequest> src,
    ffi.Pointer<UA_CallRequest> dst,
  ) {
    return _UA_CallRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CallRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallRequest>,
              ffi.Pointer<UA_CallRequest>)>>('UA_CallRequest_copy');
  late final _UA_CallRequest_copy = _UA_CallRequest_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_CallRequest>, ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_deleteMembers(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CallRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_deleteMembers');
  late final _UA_CallRequest_deleteMembers = _UA_CallRequest_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_clear(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_clear(
      p,
    );
  }

  late final _UA_CallRequest_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_clear');
  late final _UA_CallRequest_clear = _UA_CallRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallRequest_delete(
    ffi.Pointer<UA_CallRequest> p,
  ) {
    return _UA_CallRequest_delete(
      p,
    );
  }

  late final _UA_CallRequest_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallRequest>)>>(
      'UA_CallRequest_delete');
  late final _UA_CallRequest_delete = _UA_CallRequest_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CallRequest>)>();

  void UA_CallResponse_init(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_init(
      p,
    );
  }

  late final _UA_CallResponse_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_init');
  late final _UA_CallResponse_init = _UA_CallResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  ffi.Pointer<UA_CallResponse> UA_CallResponse_new() {
    return _UA_CallResponse_new();
  }

  late final _UA_CallResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_CallResponse> Function()>>(
          'UA_CallResponse_new');
  late final _UA_CallResponse_new = _UA_CallResponse_newPtr.asFunction<
      ffi.Pointer<UA_CallResponse> Function()>();

  int UA_CallResponse_copy(
    ffi.Pointer<UA_CallResponse> src,
    ffi.Pointer<UA_CallResponse> dst,
  ) {
    return _UA_CallResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CallResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_CallResponse>,
              ffi.Pointer<UA_CallResponse>)>>('UA_CallResponse_copy');
  late final _UA_CallResponse_copy = _UA_CallResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_CallResponse>, ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_deleteMembers(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CallResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_deleteMembers');
  late final _UA_CallResponse_deleteMembers = _UA_CallResponse_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_clear(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_clear(
      p,
    );
  }

  late final _UA_CallResponse_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_clear');
  late final _UA_CallResponse_clear = _UA_CallResponse_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_CallResponse_delete(
    ffi.Pointer<UA_CallResponse> p,
  ) {
    return _UA_CallResponse_delete(
      p,
    );
  }

  late final _UA_CallResponse_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_CallResponse>)>>(
      'UA_CallResponse_delete');
  late final _UA_CallResponse_delete = _UA_CallResponse_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_CallResponse>)>();

  void UA_MonitoringMode_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_init(
      p,
    );
  }

  late final _UA_MonitoringMode_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_init');
  late final _UA_MonitoringMode_init = _UA_MonitoringMode_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_MonitoringMode_new() {
    return _UA_MonitoringMode_new();
  }

  late final _UA_MonitoringMode_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_MonitoringMode_new');
  late final _UA_MonitoringMode_new =
      _UA_MonitoringMode_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_MonitoringMode_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_MonitoringMode_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringMode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_MonitoringMode_copy');
  late final _UA_MonitoringMode_copy = _UA_MonitoringMode_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoringMode_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_deleteMembers');
  late final _UA_MonitoringMode_deleteMembers =
      _UA_MonitoringMode_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_clear(
      p,
    );
  }

  late final _UA_MonitoringMode_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_clear');
  late final _UA_MonitoringMode_clear = _UA_MonitoringMode_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MonitoringMode_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MonitoringMode_delete(
      p,
    );
  }

  late final _UA_MonitoringMode_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MonitoringMode_delete');
  late final _UA_MonitoringMode_delete = _UA_MonitoringMode_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_init(
      p,
    );
  }

  late final _UA_DataChangeTrigger_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_init');
  late final _UA_DataChangeTrigger_init = _UA_DataChangeTrigger_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DataChangeTrigger_new() {
    return _UA_DataChangeTrigger_new();
  }

  late final _UA_DataChangeTrigger_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DataChangeTrigger_new');
  late final _UA_DataChangeTrigger_new = _UA_DataChangeTrigger_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DataChangeTrigger_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DataChangeTrigger_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeTrigger_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DataChangeTrigger_copy');
  late final _UA_DataChangeTrigger_copy =
      _UA_DataChangeTrigger_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeTrigger_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_deleteMembers');
  late final _UA_DataChangeTrigger_deleteMembers =
      _UA_DataChangeTrigger_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_clear(
      p,
    );
  }

  late final _UA_DataChangeTrigger_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_clear');
  late final _UA_DataChangeTrigger_clear = _UA_DataChangeTrigger_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeTrigger_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DataChangeTrigger_delete(
      p,
    );
  }

  late final _UA_DataChangeTrigger_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DataChangeTrigger_delete');
  late final _UA_DataChangeTrigger_delete = _UA_DataChangeTrigger_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_init(
      p,
    );
  }

  late final _UA_DeadbandType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_init');
  late final _UA_DeadbandType_init = _UA_DeadbandType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_DeadbandType_new() {
    return _UA_DeadbandType_new();
  }

  late final _UA_DeadbandType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_DeadbandType_new');
  late final _UA_DeadbandType_new =
      _UA_DeadbandType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_DeadbandType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_DeadbandType_copy(
      src,
      dst,
    );
  }

  late final _UA_DeadbandType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_DeadbandType_copy');
  late final _UA_DeadbandType_copy = _UA_DeadbandType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_deleteMembers(
      p,
    );
  }

  late final _UA_DeadbandType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_deleteMembers');
  late final _UA_DeadbandType_deleteMembers = _UA_DeadbandType_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_clear(
      p,
    );
  }

  late final _UA_DeadbandType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_clear');
  late final _UA_DeadbandType_clear = _UA_DeadbandType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DeadbandType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_DeadbandType_delete(
      p,
    );
  }

  late final _UA_DeadbandType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_DeadbandType_delete');
  late final _UA_DeadbandType_delete = _UA_DeadbandType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_DataChangeFilter_init(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_init(
      p,
    );
  }

  late final _UA_DataChangeFilter_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_init');
  late final _UA_DataChangeFilter_init = _UA_DataChangeFilter_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  ffi.Pointer<UA_DataChangeFilter> UA_DataChangeFilter_new() {
    return _UA_DataChangeFilter_new();
  }

  late final _UA_DataChangeFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataChangeFilter> Function()>>(
          'UA_DataChangeFilter_new');
  late final _UA_DataChangeFilter_new = _UA_DataChangeFilter_newPtr.asFunction<
      ffi.Pointer<UA_DataChangeFilter> Function()>();

  int UA_DataChangeFilter_copy(
    ffi.Pointer<UA_DataChangeFilter> src,
    ffi.Pointer<UA_DataChangeFilter> dst,
  ) {
    return _UA_DataChangeFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataChangeFilter>,
              ffi.Pointer<UA_DataChangeFilter>)>>('UA_DataChangeFilter_copy');
  late final _UA_DataChangeFilter_copy =
      _UA_DataChangeFilter_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataChangeFilter>,
              ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_deleteMembers(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeFilter_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_deleteMembers');
  late final _UA_DataChangeFilter_deleteMembers =
      _UA_DataChangeFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_clear(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_clear(
      p,
    );
  }

  late final _UA_DataChangeFilter_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_clear');
  late final _UA_DataChangeFilter_clear = _UA_DataChangeFilter_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_DataChangeFilter_delete(
    ffi.Pointer<UA_DataChangeFilter> p,
  ) {
    return _UA_DataChangeFilter_delete(
      p,
    );
  }

  late final _UA_DataChangeFilter_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataChangeFilter>)>>(
      'UA_DataChangeFilter_delete');
  late final _UA_DataChangeFilter_delete = _UA_DataChangeFilter_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataChangeFilter>)>();

  void UA_EventFilter_init(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_init(
      p,
    );
  }

  late final _UA_EventFilter_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_init');
  late final _UA_EventFilter_init = _UA_EventFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  ffi.Pointer<UA_EventFilter> UA_EventFilter_new() {
    return _UA_EventFilter_new();
  }

  late final _UA_EventFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilter> Function()>>(
          'UA_EventFilter_new');
  late final _UA_EventFilter_new = _UA_EventFilter_newPtr.asFunction<
      ffi.Pointer<UA_EventFilter> Function()>();

  int UA_EventFilter_copy(
    ffi.Pointer<UA_EventFilter> src,
    ffi.Pointer<UA_EventFilter> dst,
  ) {
    return _UA_EventFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFilter>,
              ffi.Pointer<UA_EventFilter>)>>('UA_EventFilter_copy');
  late final _UA_EventFilter_copy = _UA_EventFilter_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_deleteMembers(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_deleteMembers(
      p,
    );
  }

  late final _UA_EventFilter_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_deleteMembers');
  late final _UA_EventFilter_deleteMembers = _UA_EventFilter_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_clear(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_clear(
      p,
    );
  }

  late final _UA_EventFilter_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_clear');
  late final _UA_EventFilter_clear = _UA_EventFilter_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_EventFilter_delete(
    ffi.Pointer<UA_EventFilter> p,
  ) {
    return _UA_EventFilter_delete(
      p,
    );
  }

  late final _UA_EventFilter_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFilter>)>>(
      'UA_EventFilter_delete');
  late final _UA_EventFilter_delete = _UA_EventFilter_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EventFilter>)>();

  void UA_AggregateConfiguration_init(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_init(
      p,
    );
  }

  late final _UA_AggregateConfiguration_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_init');
  late final _UA_AggregateConfiguration_init =
      _UA_AggregateConfiguration_initPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  ffi.Pointer<UA_AggregateConfiguration> UA_AggregateConfiguration_new() {
    return _UA_AggregateConfiguration_new();
  }

  late final _UA_AggregateConfiguration_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>>(
      'UA_AggregateConfiguration_new');
  late final _UA_AggregateConfiguration_new = _UA_AggregateConfiguration_newPtr
      .asFunction<ffi.Pointer<UA_AggregateConfiguration> Function()>();

  int UA_AggregateConfiguration_copy(
    ffi.Pointer<UA_AggregateConfiguration> src,
    ffi.Pointer<UA_AggregateConfiguration> dst,
  ) {
    return _UA_AggregateConfiguration_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateConfiguration_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AggregateConfiguration>,
                  ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_copy');
  late final _UA_AggregateConfiguration_copy =
      _UA_AggregateConfiguration_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AggregateConfiguration>,
              ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_deleteMembers(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_deleteMembers(
      p,
    );
  }

  late final _UA_AggregateConfiguration_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_deleteMembers');
  late final _UA_AggregateConfiguration_deleteMembers =
      _UA_AggregateConfiguration_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_clear(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_clear(
      p,
    );
  }

  late final _UA_AggregateConfiguration_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_clear');
  late final _UA_AggregateConfiguration_clear =
      _UA_AggregateConfiguration_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateConfiguration_delete(
    ffi.Pointer<UA_AggregateConfiguration> p,
  ) {
    return _UA_AggregateConfiguration_delete(
      p,
    );
  }

  late final _UA_AggregateConfiguration_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AggregateConfiguration>)>>(
      'UA_AggregateConfiguration_delete');
  late final _UA_AggregateConfiguration_delete =
      _UA_AggregateConfiguration_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateConfiguration>)>();

  void UA_AggregateFilter_init(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_init(
      p,
    );
  }

  late final _UA_AggregateFilter_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_init');
  late final _UA_AggregateFilter_init = _UA_AggregateFilter_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AggregateFilter>)>();

  ffi.Pointer<UA_AggregateFilter> UA_AggregateFilter_new() {
    return _UA_AggregateFilter_new();
  }

  late final _UA_AggregateFilter_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AggregateFilter> Function()>>(
          'UA_AggregateFilter_new');
  late final _UA_AggregateFilter_new = _UA_AggregateFilter_newPtr.asFunction<
      ffi.Pointer<UA_AggregateFilter> Function()>();

  int UA_AggregateFilter_copy(
    ffi.Pointer<UA_AggregateFilter> src,
    ffi.Pointer<UA_AggregateFilter> dst,
  ) {
    return _UA_AggregateFilter_copy(
      src,
      dst,
    );
  }

  late final _UA_AggregateFilter_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AggregateFilter>,
              ffi.Pointer<UA_AggregateFilter>)>>('UA_AggregateFilter_copy');
  late final _UA_AggregateFilter_copy = _UA_AggregateFilter_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AggregateFilter>, ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_deleteMembers(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_deleteMembers(
      p,
    );
  }

  late final _UA_AggregateFilter_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_deleteMembers');
  late final _UA_AggregateFilter_deleteMembers =
      _UA_AggregateFilter_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_clear(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_clear(
      p,
    );
  }

  late final _UA_AggregateFilter_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_clear');
  late final _UA_AggregateFilter_clear = _UA_AggregateFilter_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_AggregateFilter_delete(
    ffi.Pointer<UA_AggregateFilter> p,
  ) {
    return _UA_AggregateFilter_delete(
      p,
    );
  }

  late final _UA_AggregateFilter_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AggregateFilter>)>>(
      'UA_AggregateFilter_delete');
  late final _UA_AggregateFilter_delete = _UA_AggregateFilter_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AggregateFilter>)>();

  void UA_EventFilterResult_init(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_init(
      p,
    );
  }

  late final _UA_EventFilterResult_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_init');
  late final _UA_EventFilterResult_init = _UA_EventFilterResult_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  ffi.Pointer<UA_EventFilterResult> UA_EventFilterResult_new() {
    return _UA_EventFilterResult_new();
  }

  late final _UA_EventFilterResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFilterResult> Function()>>(
          'UA_EventFilterResult_new');
  late final _UA_EventFilterResult_new = _UA_EventFilterResult_newPtr
      .asFunction<ffi.Pointer<UA_EventFilterResult> Function()>();

  int UA_EventFilterResult_copy(
    ffi.Pointer<UA_EventFilterResult> src,
    ffi.Pointer<UA_EventFilterResult> dst,
  ) {
    return _UA_EventFilterResult_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFilterResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFilterResult>,
              ffi.Pointer<UA_EventFilterResult>)>>('UA_EventFilterResult_copy');
  late final _UA_EventFilterResult_copy =
      _UA_EventFilterResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EventFilterResult>,
              ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_deleteMembers(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_deleteMembers(
      p,
    );
  }

  late final _UA_EventFilterResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_deleteMembers');
  late final _UA_EventFilterResult_deleteMembers =
      _UA_EventFilterResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_clear(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_clear(
      p,
    );
  }

  late final _UA_EventFilterResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_clear');
  late final _UA_EventFilterResult_clear = _UA_EventFilterResult_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_EventFilterResult_delete(
    ffi.Pointer<UA_EventFilterResult> p,
  ) {
    return _UA_EventFilterResult_delete(
      p,
    );
  }

  late final _UA_EventFilterResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventFilterResult>)>>(
      'UA_EventFilterResult_delete');
  late final _UA_EventFilterResult_delete = _UA_EventFilterResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EventFilterResult>)>();

  void UA_MonitoringParameters_init(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_init(
      p,
    );
  }

  late final _UA_MonitoringParameters_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_init');
  late final _UA_MonitoringParameters_init = _UA_MonitoringParameters_initPtr
      .asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  ffi.Pointer<UA_MonitoringParameters> UA_MonitoringParameters_new() {
    return _UA_MonitoringParameters_new();
  }

  late final _UA_MonitoringParameters_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_MonitoringParameters> Function()>>(
      'UA_MonitoringParameters_new');
  late final _UA_MonitoringParameters_new = _UA_MonitoringParameters_newPtr
      .asFunction<ffi.Pointer<UA_MonitoringParameters> Function()>();

  int UA_MonitoringParameters_copy(
    ffi.Pointer<UA_MonitoringParameters> src,
    ffi.Pointer<UA_MonitoringParameters> dst,
  ) {
    return _UA_MonitoringParameters_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoringParameters_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoringParameters>,
                  ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_copy');
  late final _UA_MonitoringParameters_copy =
      _UA_MonitoringParameters_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoringParameters>,
              ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_deleteMembers(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoringParameters_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_deleteMembers');
  late final _UA_MonitoringParameters_deleteMembers =
      _UA_MonitoringParameters_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_clear(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_clear(
      p,
    );
  }

  late final _UA_MonitoringParameters_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_clear');
  late final _UA_MonitoringParameters_clear = _UA_MonitoringParameters_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoringParameters_delete(
    ffi.Pointer<UA_MonitoringParameters> p,
  ) {
    return _UA_MonitoringParameters_delete(
      p,
    );
  }

  late final _UA_MonitoringParameters_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoringParameters>)>>(
      'UA_MonitoringParameters_delete');
  late final _UA_MonitoringParameters_delete =
      _UA_MonitoringParameters_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoringParameters>)>();

  void UA_MonitoredItemCreateRequest_init(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_init');
  late final _UA_MonitoredItemCreateRequest_init =
      _UA_MonitoredItemCreateRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  ffi.Pointer<UA_MonitoredItemCreateRequest>
      UA_MonitoredItemCreateRequest_new() {
    return _UA_MonitoredItemCreateRequest_new();
  }

  late final _UA_MonitoredItemCreateRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemCreateRequest>
              Function()>>('UA_MonitoredItemCreateRequest_new');
  late final _UA_MonitoredItemCreateRequest_new =
      _UA_MonitoredItemCreateRequest_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemCreateRequest> Function()>();

  int UA_MonitoredItemCreateRequest_copy(
    ffi.Pointer<UA_MonitoredItemCreateRequest> src,
    ffi.Pointer<UA_MonitoredItemCreateRequest> dst,
  ) {
    return _UA_MonitoredItemCreateRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
                  ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_copy');
  late final _UA_MonitoredItemCreateRequest_copy =
      _UA_MonitoredItemCreateRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemCreateRequest>,
              ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_deleteMembers(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_deleteMembers');
  late final _UA_MonitoredItemCreateRequest_deleteMembers =
      _UA_MonitoredItemCreateRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_clear(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_clear');
  late final _UA_MonitoredItemCreateRequest_clear =
      _UA_MonitoredItemCreateRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateRequest_delete(
    ffi.Pointer<UA_MonitoredItemCreateRequest> p,
  ) {
    return _UA_MonitoredItemCreateRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>>(
      'UA_MonitoredItemCreateRequest_delete');
  late final _UA_MonitoredItemCreateRequest_delete =
      _UA_MonitoredItemCreateRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateRequest>)>();

  void UA_MonitoredItemCreateResult_init(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_init');
  late final _UA_MonitoredItemCreateResult_init =
      _UA_MonitoredItemCreateResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  ffi.Pointer<UA_MonitoredItemCreateResult> UA_MonitoredItemCreateResult_new() {
    return _UA_MonitoredItemCreateResult_new();
  }

  late final _UA_MonitoredItemCreateResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemCreateResult>
              Function()>>('UA_MonitoredItemCreateResult_new');
  late final _UA_MonitoredItemCreateResult_new =
      _UA_MonitoredItemCreateResult_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemCreateResult> Function()>();

  int UA_MonitoredItemCreateResult_copy(
    ffi.Pointer<UA_MonitoredItemCreateResult> src,
    ffi.Pointer<UA_MonitoredItemCreateResult> dst,
  ) {
    return _UA_MonitoredItemCreateResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemCreateResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
                  ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_copy');
  late final _UA_MonitoredItemCreateResult_copy =
      _UA_MonitoredItemCreateResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemCreateResult>,
              ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_deleteMembers(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_deleteMembers');
  late final _UA_MonitoredItemCreateResult_deleteMembers =
      _UA_MonitoredItemCreateResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_clear(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_clear');
  late final _UA_MonitoredItemCreateResult_clear =
      _UA_MonitoredItemCreateResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_MonitoredItemCreateResult_delete(
    ffi.Pointer<UA_MonitoredItemCreateResult> p,
  ) {
    return _UA_MonitoredItemCreateResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemCreateResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>>(
      'UA_MonitoredItemCreateResult_delete');
  late final _UA_MonitoredItemCreateResult_delete =
      _UA_MonitoredItemCreateResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemCreateResult>)>();

  void UA_CreateMonitoredItemsRequest_init(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_init');
  late final _UA_CreateMonitoredItemsRequest_init =
      _UA_CreateMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  ffi.Pointer<UA_CreateMonitoredItemsRequest>
      UA_CreateMonitoredItemsRequest_new() {
    return _UA_CreateMonitoredItemsRequest_new();
  }

  late final _UA_CreateMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateMonitoredItemsRequest>
              Function()>>('UA_CreateMonitoredItemsRequest_new');
  late final _UA_CreateMonitoredItemsRequest_new =
      _UA_CreateMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_CreateMonitoredItemsRequest> Function()>();

  int UA_CreateMonitoredItemsRequest_copy(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> src,
    ffi.Pointer<UA_CreateMonitoredItemsRequest> dst,
  ) {
    return _UA_CreateMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_CreateMonitoredItemsRequest>,
                  ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_copy');
  late final _UA_CreateMonitoredItemsRequest_copy =
      _UA_CreateMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>,
              ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_deleteMembers');
  late final _UA_CreateMonitoredItemsRequest_deleteMembers =
      _UA_CreateMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_clear(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_clear');
  late final _UA_CreateMonitoredItemsRequest_clear =
      _UA_CreateMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsRequest_delete(
    ffi.Pointer<UA_CreateMonitoredItemsRequest> p,
  ) {
    return _UA_CreateMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>>(
      'UA_CreateMonitoredItemsRequest_delete');
  late final _UA_CreateMonitoredItemsRequest_delete =
      _UA_CreateMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsRequest>)>();

  void UA_CreateMonitoredItemsResponse_init(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_init');
  late final _UA_CreateMonitoredItemsResponse_init =
      _UA_CreateMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  ffi.Pointer<UA_CreateMonitoredItemsResponse>
      UA_CreateMonitoredItemsResponse_new() {
    return _UA_CreateMonitoredItemsResponse_new();
  }

  late final _UA_CreateMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateMonitoredItemsResponse>
              Function()>>('UA_CreateMonitoredItemsResponse_new');
  late final _UA_CreateMonitoredItemsResponse_new =
      _UA_CreateMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_CreateMonitoredItemsResponse> Function()>();

  int UA_CreateMonitoredItemsResponse_copy(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> src,
    ffi.Pointer<UA_CreateMonitoredItemsResponse> dst,
  ) {
    return _UA_CreateMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_CreateMonitoredItemsResponse>,
                  ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_copy');
  late final _UA_CreateMonitoredItemsResponse_copy =
      _UA_CreateMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>,
              ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_deleteMembers');
  late final _UA_CreateMonitoredItemsResponse_deleteMembers =
      _UA_CreateMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_clear(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_clear');
  late final _UA_CreateMonitoredItemsResponse_clear =
      _UA_CreateMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_CreateMonitoredItemsResponse_delete(
    ffi.Pointer<UA_CreateMonitoredItemsResponse> p,
  ) {
    return _UA_CreateMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_CreateMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>>(
      'UA_CreateMonitoredItemsResponse_delete');
  late final _UA_CreateMonitoredItemsResponse_delete =
      _UA_CreateMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateMonitoredItemsResponse>)>();

  void UA_MonitoredItemModifyRequest_init(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_init');
  late final _UA_MonitoredItemModifyRequest_init =
      _UA_MonitoredItemModifyRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  ffi.Pointer<UA_MonitoredItemModifyRequest>
      UA_MonitoredItemModifyRequest_new() {
    return _UA_MonitoredItemModifyRequest_new();
  }

  late final _UA_MonitoredItemModifyRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemModifyRequest>
              Function()>>('UA_MonitoredItemModifyRequest_new');
  late final _UA_MonitoredItemModifyRequest_new =
      _UA_MonitoredItemModifyRequest_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemModifyRequest> Function()>();

  int UA_MonitoredItemModifyRequest_copy(
    ffi.Pointer<UA_MonitoredItemModifyRequest> src,
    ffi.Pointer<UA_MonitoredItemModifyRequest> dst,
  ) {
    return _UA_MonitoredItemModifyRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
                  ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_copy');
  late final _UA_MonitoredItemModifyRequest_copy =
      _UA_MonitoredItemModifyRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemModifyRequest>,
              ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_deleteMembers(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_deleteMembers');
  late final _UA_MonitoredItemModifyRequest_deleteMembers =
      _UA_MonitoredItemModifyRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_clear(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_clear');
  late final _UA_MonitoredItemModifyRequest_clear =
      _UA_MonitoredItemModifyRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyRequest_delete(
    ffi.Pointer<UA_MonitoredItemModifyRequest> p,
  ) {
    return _UA_MonitoredItemModifyRequest_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>>(
      'UA_MonitoredItemModifyRequest_delete');
  late final _UA_MonitoredItemModifyRequest_delete =
      _UA_MonitoredItemModifyRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyRequest>)>();

  void UA_MonitoredItemModifyResult_init(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_init(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_init');
  late final _UA_MonitoredItemModifyResult_init =
      _UA_MonitoredItemModifyResult_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  ffi.Pointer<UA_MonitoredItemModifyResult> UA_MonitoredItemModifyResult_new() {
    return _UA_MonitoredItemModifyResult_new();
  }

  late final _UA_MonitoredItemModifyResult_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemModifyResult>
              Function()>>('UA_MonitoredItemModifyResult_new');
  late final _UA_MonitoredItemModifyResult_new =
      _UA_MonitoredItemModifyResult_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemModifyResult> Function()>();

  int UA_MonitoredItemModifyResult_copy(
    ffi.Pointer<UA_MonitoredItemModifyResult> src,
    ffi.Pointer<UA_MonitoredItemModifyResult> dst,
  ) {
    return _UA_MonitoredItemModifyResult_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemModifyResult_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
                  ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_copy');
  late final _UA_MonitoredItemModifyResult_copy =
      _UA_MonitoredItemModifyResult_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemModifyResult>,
              ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_deleteMembers(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_deleteMembers');
  late final _UA_MonitoredItemModifyResult_deleteMembers =
      _UA_MonitoredItemModifyResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_clear(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_clear(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_clear');
  late final _UA_MonitoredItemModifyResult_clear =
      _UA_MonitoredItemModifyResult_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_MonitoredItemModifyResult_delete(
    ffi.Pointer<UA_MonitoredItemModifyResult> p,
  ) {
    return _UA_MonitoredItemModifyResult_delete(
      p,
    );
  }

  late final _UA_MonitoredItemModifyResult_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>>(
      'UA_MonitoredItemModifyResult_delete');
  late final _UA_MonitoredItemModifyResult_delete =
      _UA_MonitoredItemModifyResult_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemModifyResult>)>();

  void UA_ModifyMonitoredItemsRequest_init(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_init');
  late final _UA_ModifyMonitoredItemsRequest_init =
      _UA_ModifyMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsRequest>
      UA_ModifyMonitoredItemsRequest_new() {
    return _UA_ModifyMonitoredItemsRequest_new();
  }

  late final _UA_ModifyMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsRequest>
              Function()>>('UA_ModifyMonitoredItemsRequest_new');
  late final _UA_ModifyMonitoredItemsRequest_new =
      _UA_ModifyMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsRequest> Function()>();

  int UA_ModifyMonitoredItemsRequest_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> src,
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> dst,
  ) {
    return _UA_ModifyMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
                  ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_copy');
  late final _UA_ModifyMonitoredItemsRequest_copy =
      _UA_ModifyMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>,
              ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_deleteMembers');
  late final _UA_ModifyMonitoredItemsRequest_deleteMembers =
      _UA_ModifyMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_clear');
  late final _UA_ModifyMonitoredItemsRequest_clear =
      _UA_ModifyMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsRequest_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsRequest> p,
  ) {
    return _UA_ModifyMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>>(
      'UA_ModifyMonitoredItemsRequest_delete');
  late final _UA_ModifyMonitoredItemsRequest_delete =
      _UA_ModifyMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsRequest>)>();

  void UA_ModifyMonitoredItemsResponse_init(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_init');
  late final _UA_ModifyMonitoredItemsResponse_init =
      _UA_ModifyMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  ffi.Pointer<UA_ModifyMonitoredItemsResponse>
      UA_ModifyMonitoredItemsResponse_new() {
    return _UA_ModifyMonitoredItemsResponse_new();
  }

  late final _UA_ModifyMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsResponse>
              Function()>>('UA_ModifyMonitoredItemsResponse_new');
  late final _UA_ModifyMonitoredItemsResponse_new =
      _UA_ModifyMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_ModifyMonitoredItemsResponse> Function()>();

  int UA_ModifyMonitoredItemsResponse_copy(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> src,
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> dst,
  ) {
    return _UA_ModifyMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
                  ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_copy');
  late final _UA_ModifyMonitoredItemsResponse_copy =
      _UA_ModifyMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>,
              ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_deleteMembers');
  late final _UA_ModifyMonitoredItemsResponse_deleteMembers =
      _UA_ModifyMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_clear(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_clear');
  late final _UA_ModifyMonitoredItemsResponse_clear =
      _UA_ModifyMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_ModifyMonitoredItemsResponse_delete(
    ffi.Pointer<UA_ModifyMonitoredItemsResponse> p,
  ) {
    return _UA_ModifyMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_ModifyMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>>(
      'UA_ModifyMonitoredItemsResponse_delete');
  late final _UA_ModifyMonitoredItemsResponse_delete =
      _UA_ModifyMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifyMonitoredItemsResponse>)>();

  void UA_SetMonitoringModeRequest_init(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_init');
  late final _UA_SetMonitoringModeRequest_init =
      _UA_SetMonitoringModeRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  ffi.Pointer<UA_SetMonitoringModeRequest> UA_SetMonitoringModeRequest_new() {
    return _UA_SetMonitoringModeRequest_new();
  }

  late final _UA_SetMonitoringModeRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SetMonitoringModeRequest> Function()>>(
      'UA_SetMonitoringModeRequest_new');
  late final _UA_SetMonitoringModeRequest_new =
      _UA_SetMonitoringModeRequest_newPtr.asFunction<
          ffi.Pointer<UA_SetMonitoringModeRequest> Function()>();

  int UA_SetMonitoringModeRequest_copy(
    ffi.Pointer<UA_SetMonitoringModeRequest> src,
    ffi.Pointer<UA_SetMonitoringModeRequest> dst,
  ) {
    return _UA_SetMonitoringModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
                  ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_copy');
  late final _UA_SetMonitoringModeRequest_copy =
      _UA_SetMonitoringModeRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetMonitoringModeRequest>,
              ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_deleteMembers(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_deleteMembers');
  late final _UA_SetMonitoringModeRequest_deleteMembers =
      _UA_SetMonitoringModeRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_clear(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_clear');
  late final _UA_SetMonitoringModeRequest_clear =
      _UA_SetMonitoringModeRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeRequest_delete(
    ffi.Pointer<UA_SetMonitoringModeRequest> p,
  ) {
    return _UA_SetMonitoringModeRequest_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>>(
      'UA_SetMonitoringModeRequest_delete');
  late final _UA_SetMonitoringModeRequest_delete =
      _UA_SetMonitoringModeRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeRequest>)>();

  void UA_SetMonitoringModeResponse_init(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_init(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_init');
  late final _UA_SetMonitoringModeResponse_init =
      _UA_SetMonitoringModeResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  ffi.Pointer<UA_SetMonitoringModeResponse> UA_SetMonitoringModeResponse_new() {
    return _UA_SetMonitoringModeResponse_new();
  }

  late final _UA_SetMonitoringModeResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SetMonitoringModeResponse>
              Function()>>('UA_SetMonitoringModeResponse_new');
  late final _UA_SetMonitoringModeResponse_new =
      _UA_SetMonitoringModeResponse_newPtr.asFunction<
          ffi.Pointer<UA_SetMonitoringModeResponse> Function()>();

  int UA_SetMonitoringModeResponse_copy(
    ffi.Pointer<UA_SetMonitoringModeResponse> src,
    ffi.Pointer<UA_SetMonitoringModeResponse> dst,
  ) {
    return _UA_SetMonitoringModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetMonitoringModeResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
                  ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_copy');
  late final _UA_SetMonitoringModeResponse_copy =
      _UA_SetMonitoringModeResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetMonitoringModeResponse>,
              ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_deleteMembers(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_deleteMembers');
  late final _UA_SetMonitoringModeResponse_deleteMembers =
      _UA_SetMonitoringModeResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_clear(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_clear(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_clear');
  late final _UA_SetMonitoringModeResponse_clear =
      _UA_SetMonitoringModeResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetMonitoringModeResponse_delete(
    ffi.Pointer<UA_SetMonitoringModeResponse> p,
  ) {
    return _UA_SetMonitoringModeResponse_delete(
      p,
    );
  }

  late final _UA_SetMonitoringModeResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>>(
      'UA_SetMonitoringModeResponse_delete');
  late final _UA_SetMonitoringModeResponse_delete =
      _UA_SetMonitoringModeResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetMonitoringModeResponse>)>();

  void UA_SetTriggeringRequest_init(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_init(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_init');
  late final _UA_SetTriggeringRequest_init = _UA_SetTriggeringRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  ffi.Pointer<UA_SetTriggeringRequest> UA_SetTriggeringRequest_new() {
    return _UA_SetTriggeringRequest_new();
  }

  late final _UA_SetTriggeringRequest_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>>(
      'UA_SetTriggeringRequest_new');
  late final _UA_SetTriggeringRequest_new = _UA_SetTriggeringRequest_newPtr
      .asFunction<ffi.Pointer<UA_SetTriggeringRequest> Function()>();

  int UA_SetTriggeringRequest_copy(
    ffi.Pointer<UA_SetTriggeringRequest> src,
    ffi.Pointer<UA_SetTriggeringRequest> dst,
  ) {
    return _UA_SetTriggeringRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringRequest>,
                  ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_copy');
  late final _UA_SetTriggeringRequest_copy =
      _UA_SetTriggeringRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetTriggeringRequest>,
              ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_deleteMembers(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_deleteMembers');
  late final _UA_SetTriggeringRequest_deleteMembers =
      _UA_SetTriggeringRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_clear(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_clear(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_clear');
  late final _UA_SetTriggeringRequest_clear = _UA_SetTriggeringRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringRequest_delete(
    ffi.Pointer<UA_SetTriggeringRequest> p,
  ) {
    return _UA_SetTriggeringRequest_delete(
      p,
    );
  }

  late final _UA_SetTriggeringRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringRequest>)>>(
      'UA_SetTriggeringRequest_delete');
  late final _UA_SetTriggeringRequest_delete =
      _UA_SetTriggeringRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringRequest>)>();

  void UA_SetTriggeringResponse_init(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_init(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_init');
  late final _UA_SetTriggeringResponse_init = _UA_SetTriggeringResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  ffi.Pointer<UA_SetTriggeringResponse> UA_SetTriggeringResponse_new() {
    return _UA_SetTriggeringResponse_new();
  }

  late final _UA_SetTriggeringResponse_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>>(
      'UA_SetTriggeringResponse_new');
  late final _UA_SetTriggeringResponse_new = _UA_SetTriggeringResponse_newPtr
      .asFunction<ffi.Pointer<UA_SetTriggeringResponse> Function()>();

  int UA_SetTriggeringResponse_copy(
    ffi.Pointer<UA_SetTriggeringResponse> src,
    ffi.Pointer<UA_SetTriggeringResponse> dst,
  ) {
    return _UA_SetTriggeringResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetTriggeringResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetTriggeringResponse>,
                  ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_copy');
  late final _UA_SetTriggeringResponse_copy =
      _UA_SetTriggeringResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetTriggeringResponse>,
              ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_deleteMembers(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_deleteMembers');
  late final _UA_SetTriggeringResponse_deleteMembers =
      _UA_SetTriggeringResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_clear(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_clear(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_clear');
  late final _UA_SetTriggeringResponse_clear =
      _UA_SetTriggeringResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_SetTriggeringResponse_delete(
    ffi.Pointer<UA_SetTriggeringResponse> p,
  ) {
    return _UA_SetTriggeringResponse_delete(
      p,
    );
  }

  late final _UA_SetTriggeringResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetTriggeringResponse>)>>(
      'UA_SetTriggeringResponse_delete');
  late final _UA_SetTriggeringResponse_delete =
      _UA_SetTriggeringResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetTriggeringResponse>)>();

  void UA_DeleteMonitoredItemsRequest_init(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_init');
  late final _UA_DeleteMonitoredItemsRequest_init =
      _UA_DeleteMonitoredItemsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsRequest>
      UA_DeleteMonitoredItemsRequest_new() {
    return _UA_DeleteMonitoredItemsRequest_new();
  }

  late final _UA_DeleteMonitoredItemsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsRequest>
              Function()>>('UA_DeleteMonitoredItemsRequest_new');
  late final _UA_DeleteMonitoredItemsRequest_new =
      _UA_DeleteMonitoredItemsRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsRequest> Function()>();

  int UA_DeleteMonitoredItemsRequest_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> src,
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> dst,
  ) {
    return _UA_DeleteMonitoredItemsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
                  ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_copy');
  late final _UA_DeleteMonitoredItemsRequest_copy =
      _UA_DeleteMonitoredItemsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>,
              ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_deleteMembers(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_deleteMembers');
  late final _UA_DeleteMonitoredItemsRequest_deleteMembers =
      _UA_DeleteMonitoredItemsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_clear');
  late final _UA_DeleteMonitoredItemsRequest_clear =
      _UA_DeleteMonitoredItemsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsRequest_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsRequest> p,
  ) {
    return _UA_DeleteMonitoredItemsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>>(
      'UA_DeleteMonitoredItemsRequest_delete');
  late final _UA_DeleteMonitoredItemsRequest_delete =
      _UA_DeleteMonitoredItemsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsRequest>)>();

  void UA_DeleteMonitoredItemsResponse_init(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_init(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_init');
  late final _UA_DeleteMonitoredItemsResponse_init =
      _UA_DeleteMonitoredItemsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  ffi.Pointer<UA_DeleteMonitoredItemsResponse>
      UA_DeleteMonitoredItemsResponse_new() {
    return _UA_DeleteMonitoredItemsResponse_new();
  }

  late final _UA_DeleteMonitoredItemsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsResponse>
              Function()>>('UA_DeleteMonitoredItemsResponse_new');
  late final _UA_DeleteMonitoredItemsResponse_new =
      _UA_DeleteMonitoredItemsResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteMonitoredItemsResponse> Function()>();

  int UA_DeleteMonitoredItemsResponse_copy(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> src,
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> dst,
  ) {
    return _UA_DeleteMonitoredItemsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
                  ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_copy');
  late final _UA_DeleteMonitoredItemsResponse_copy =
      _UA_DeleteMonitoredItemsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>,
              ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_deleteMembers(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_deleteMembers');
  late final _UA_DeleteMonitoredItemsResponse_deleteMembers =
      _UA_DeleteMonitoredItemsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_clear(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_clear');
  late final _UA_DeleteMonitoredItemsResponse_clear =
      _UA_DeleteMonitoredItemsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_DeleteMonitoredItemsResponse_delete(
    ffi.Pointer<UA_DeleteMonitoredItemsResponse> p,
  ) {
    return _UA_DeleteMonitoredItemsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteMonitoredItemsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>>(
      'UA_DeleteMonitoredItemsResponse_delete');
  late final _UA_DeleteMonitoredItemsResponse_delete =
      _UA_DeleteMonitoredItemsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteMonitoredItemsResponse>)>();

  void UA_CreateSubscriptionRequest_init(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_init');
  late final _UA_CreateSubscriptionRequest_init =
      _UA_CreateSubscriptionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  ffi.Pointer<UA_CreateSubscriptionRequest> UA_CreateSubscriptionRequest_new() {
    return _UA_CreateSubscriptionRequest_new();
  }

  late final _UA_CreateSubscriptionRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateSubscriptionRequest>
              Function()>>('UA_CreateSubscriptionRequest_new');
  late final _UA_CreateSubscriptionRequest_new =
      _UA_CreateSubscriptionRequest_newPtr.asFunction<
          ffi.Pointer<UA_CreateSubscriptionRequest> Function()>();

  int UA_CreateSubscriptionRequest_copy(
    ffi.Pointer<UA_CreateSubscriptionRequest> src,
    ffi.Pointer<UA_CreateSubscriptionRequest> dst,
  ) {
    return _UA_CreateSubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
                  ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_copy');
  late final _UA_CreateSubscriptionRequest_copy =
      _UA_CreateSubscriptionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSubscriptionRequest>,
              ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_deleteMembers(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_deleteMembers');
  late final _UA_CreateSubscriptionRequest_deleteMembers =
      _UA_CreateSubscriptionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_clear(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_clear');
  late final _UA_CreateSubscriptionRequest_clear =
      _UA_CreateSubscriptionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionRequest_delete(
    ffi.Pointer<UA_CreateSubscriptionRequest> p,
  ) {
    return _UA_CreateSubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>>(
      'UA_CreateSubscriptionRequest_delete');
  late final _UA_CreateSubscriptionRequest_delete =
      _UA_CreateSubscriptionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionRequest>)>();

  void UA_CreateSubscriptionResponse_init(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_init(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_init');
  late final _UA_CreateSubscriptionResponse_init =
      _UA_CreateSubscriptionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  ffi.Pointer<UA_CreateSubscriptionResponse>
      UA_CreateSubscriptionResponse_new() {
    return _UA_CreateSubscriptionResponse_new();
  }

  late final _UA_CreateSubscriptionResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_CreateSubscriptionResponse>
              Function()>>('UA_CreateSubscriptionResponse_new');
  late final _UA_CreateSubscriptionResponse_new =
      _UA_CreateSubscriptionResponse_newPtr.asFunction<
          ffi.Pointer<UA_CreateSubscriptionResponse> Function()>();

  int UA_CreateSubscriptionResponse_copy(
    ffi.Pointer<UA_CreateSubscriptionResponse> src,
    ffi.Pointer<UA_CreateSubscriptionResponse> dst,
  ) {
    return _UA_CreateSubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_CreateSubscriptionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
                  ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_copy');
  late final _UA_CreateSubscriptionResponse_copy =
      _UA_CreateSubscriptionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSubscriptionResponse>,
              ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_deleteMembers(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_deleteMembers');
  late final _UA_CreateSubscriptionResponse_deleteMembers =
      _UA_CreateSubscriptionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_clear(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_clear');
  late final _UA_CreateSubscriptionResponse_clear =
      _UA_CreateSubscriptionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_CreateSubscriptionResponse_delete(
    ffi.Pointer<UA_CreateSubscriptionResponse> p,
  ) {
    return _UA_CreateSubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_CreateSubscriptionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_CreateSubscriptionResponse_delete');
  late final _UA_CreateSubscriptionResponse_delete =
      _UA_CreateSubscriptionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_ModifySubscriptionRequest_init(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_init');
  late final _UA_ModifySubscriptionRequest_init =
      _UA_ModifySubscriptionRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  ffi.Pointer<UA_ModifySubscriptionRequest> UA_ModifySubscriptionRequest_new() {
    return _UA_ModifySubscriptionRequest_new();
  }

  late final _UA_ModifySubscriptionRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifySubscriptionRequest>
              Function()>>('UA_ModifySubscriptionRequest_new');
  late final _UA_ModifySubscriptionRequest_new =
      _UA_ModifySubscriptionRequest_newPtr.asFunction<
          ffi.Pointer<UA_ModifySubscriptionRequest> Function()>();

  int UA_ModifySubscriptionRequest_copy(
    ffi.Pointer<UA_ModifySubscriptionRequest> src,
    ffi.Pointer<UA_ModifySubscriptionRequest> dst,
  ) {
    return _UA_ModifySubscriptionRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
                  ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_copy');
  late final _UA_ModifySubscriptionRequest_copy =
      _UA_ModifySubscriptionRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifySubscriptionRequest>,
              ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_deleteMembers(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_deleteMembers(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_deleteMembers');
  late final _UA_ModifySubscriptionRequest_deleteMembers =
      _UA_ModifySubscriptionRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_clear(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_clear');
  late final _UA_ModifySubscriptionRequest_clear =
      _UA_ModifySubscriptionRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionRequest_delete(
    ffi.Pointer<UA_ModifySubscriptionRequest> p,
  ) {
    return _UA_ModifySubscriptionRequest_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>>(
      'UA_ModifySubscriptionRequest_delete');
  late final _UA_ModifySubscriptionRequest_delete =
      _UA_ModifySubscriptionRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionRequest>)>();

  void UA_ModifySubscriptionResponse_init(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_init(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_init');
  late final _UA_ModifySubscriptionResponse_init =
      _UA_ModifySubscriptionResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  ffi.Pointer<UA_ModifySubscriptionResponse>
      UA_ModifySubscriptionResponse_new() {
    return _UA_ModifySubscriptionResponse_new();
  }

  late final _UA_ModifySubscriptionResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ModifySubscriptionResponse>
              Function()>>('UA_ModifySubscriptionResponse_new');
  late final _UA_ModifySubscriptionResponse_new =
      _UA_ModifySubscriptionResponse_newPtr.asFunction<
          ffi.Pointer<UA_ModifySubscriptionResponse> Function()>();

  int UA_ModifySubscriptionResponse_copy(
    ffi.Pointer<UA_ModifySubscriptionResponse> src,
    ffi.Pointer<UA_ModifySubscriptionResponse> dst,
  ) {
    return _UA_ModifySubscriptionResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_ModifySubscriptionResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
                  ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_copy');
  late final _UA_ModifySubscriptionResponse_copy =
      _UA_ModifySubscriptionResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ModifySubscriptionResponse>,
              ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_deleteMembers(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_deleteMembers(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_deleteMembers');
  late final _UA_ModifySubscriptionResponse_deleteMembers =
      _UA_ModifySubscriptionResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_clear(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_clear(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_clear');
  late final _UA_ModifySubscriptionResponse_clear =
      _UA_ModifySubscriptionResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_ModifySubscriptionResponse_delete(
    ffi.Pointer<UA_ModifySubscriptionResponse> p,
  ) {
    return _UA_ModifySubscriptionResponse_delete(
      p,
    );
  }

  late final _UA_ModifySubscriptionResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>>(
      'UA_ModifySubscriptionResponse_delete');
  late final _UA_ModifySubscriptionResponse_delete =
      _UA_ModifySubscriptionResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ModifySubscriptionResponse>)>();

  void UA_SetPublishingModeRequest_init(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_init(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_init');
  late final _UA_SetPublishingModeRequest_init =
      _UA_SetPublishingModeRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  ffi.Pointer<UA_SetPublishingModeRequest> UA_SetPublishingModeRequest_new() {
    return _UA_SetPublishingModeRequest_new();
  }

  late final _UA_SetPublishingModeRequest_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_SetPublishingModeRequest> Function()>>(
      'UA_SetPublishingModeRequest_new');
  late final _UA_SetPublishingModeRequest_new =
      _UA_SetPublishingModeRequest_newPtr.asFunction<
          ffi.Pointer<UA_SetPublishingModeRequest> Function()>();

  int UA_SetPublishingModeRequest_copy(
    ffi.Pointer<UA_SetPublishingModeRequest> src,
    ffi.Pointer<UA_SetPublishingModeRequest> dst,
  ) {
    return _UA_SetPublishingModeRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeRequest>,
                  ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_copy');
  late final _UA_SetPublishingModeRequest_copy =
      _UA_SetPublishingModeRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetPublishingModeRequest>,
              ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_deleteMembers(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_deleteMembers(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_deleteMembers');
  late final _UA_SetPublishingModeRequest_deleteMembers =
      _UA_SetPublishingModeRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_clear(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_clear');
  late final _UA_SetPublishingModeRequest_clear =
      _UA_SetPublishingModeRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeRequest_delete(
    ffi.Pointer<UA_SetPublishingModeRequest> p,
  ) {
    return _UA_SetPublishingModeRequest_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>>(
      'UA_SetPublishingModeRequest_delete');
  late final _UA_SetPublishingModeRequest_delete =
      _UA_SetPublishingModeRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeRequest>)>();

  void UA_SetPublishingModeResponse_init(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_init(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_init');
  late final _UA_SetPublishingModeResponse_init =
      _UA_SetPublishingModeResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  ffi.Pointer<UA_SetPublishingModeResponse> UA_SetPublishingModeResponse_new() {
    return _UA_SetPublishingModeResponse_new();
  }

  late final _UA_SetPublishingModeResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SetPublishingModeResponse>
              Function()>>('UA_SetPublishingModeResponse_new');
  late final _UA_SetPublishingModeResponse_new =
      _UA_SetPublishingModeResponse_newPtr.asFunction<
          ffi.Pointer<UA_SetPublishingModeResponse> Function()>();

  int UA_SetPublishingModeResponse_copy(
    ffi.Pointer<UA_SetPublishingModeResponse> src,
    ffi.Pointer<UA_SetPublishingModeResponse> dst,
  ) {
    return _UA_SetPublishingModeResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_SetPublishingModeResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SetPublishingModeResponse>,
                  ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_copy');
  late final _UA_SetPublishingModeResponse_copy =
      _UA_SetPublishingModeResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SetPublishingModeResponse>,
              ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_deleteMembers(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_deleteMembers(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_deleteMembers');
  late final _UA_SetPublishingModeResponse_deleteMembers =
      _UA_SetPublishingModeResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_clear(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_clear(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_clear');
  late final _UA_SetPublishingModeResponse_clear =
      _UA_SetPublishingModeResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_SetPublishingModeResponse_delete(
    ffi.Pointer<UA_SetPublishingModeResponse> p,
  ) {
    return _UA_SetPublishingModeResponse_delete(
      p,
    );
  }

  late final _UA_SetPublishingModeResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>>(
      'UA_SetPublishingModeResponse_delete');
  late final _UA_SetPublishingModeResponse_delete =
      _UA_SetPublishingModeResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SetPublishingModeResponse>)>();

  void UA_NotificationMessage_init(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_init(
      p,
    );
  }

  late final _UA_NotificationMessage_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_init');
  late final _UA_NotificationMessage_init = _UA_NotificationMessage_initPtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  ffi.Pointer<UA_NotificationMessage> UA_NotificationMessage_new() {
    return _UA_NotificationMessage_new();
  }

  late final _UA_NotificationMessage_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_NotificationMessage> Function()>>(
      'UA_NotificationMessage_new');
  late final _UA_NotificationMessage_new = _UA_NotificationMessage_newPtr
      .asFunction<ffi.Pointer<UA_NotificationMessage> Function()>();

  int UA_NotificationMessage_copy(
    ffi.Pointer<UA_NotificationMessage> src,
    ffi.Pointer<UA_NotificationMessage> dst,
  ) {
    return _UA_NotificationMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_NotificationMessage_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NotificationMessage>,
                  ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_copy');
  late final _UA_NotificationMessage_copy =
      _UA_NotificationMessage_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_NotificationMessage>,
              ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_deleteMembers(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_deleteMembers(
      p,
    );
  }

  late final _UA_NotificationMessage_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_deleteMembers');
  late final _UA_NotificationMessage_deleteMembers =
      _UA_NotificationMessage_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_clear(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_clear(
      p,
    );
  }

  late final _UA_NotificationMessage_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_clear');
  late final _UA_NotificationMessage_clear = _UA_NotificationMessage_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_NotificationMessage_delete(
    ffi.Pointer<UA_NotificationMessage> p,
  ) {
    return _UA_NotificationMessage_delete(
      p,
    );
  }

  late final _UA_NotificationMessage_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NotificationMessage>)>>(
      'UA_NotificationMessage_delete');
  late final _UA_NotificationMessage_delete = _UA_NotificationMessage_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_NotificationMessage>)>();

  void UA_MonitoredItemNotification_init(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_init(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_init');
  late final _UA_MonitoredItemNotification_init =
      _UA_MonitoredItemNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  ffi.Pointer<UA_MonitoredItemNotification> UA_MonitoredItemNotification_new() {
    return _UA_MonitoredItemNotification_new();
  }

  late final _UA_MonitoredItemNotification_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItemNotification>
              Function()>>('UA_MonitoredItemNotification_new');
  late final _UA_MonitoredItemNotification_new =
      _UA_MonitoredItemNotification_newPtr.asFunction<
          ffi.Pointer<UA_MonitoredItemNotification> Function()>();

  int UA_MonitoredItemNotification_copy(
    ffi.Pointer<UA_MonitoredItemNotification> src,
    ffi.Pointer<UA_MonitoredItemNotification> dst,
  ) {
    return _UA_MonitoredItemNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_MonitoredItemNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_MonitoredItemNotification>,
                  ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_copy');
  late final _UA_MonitoredItemNotification_copy =
      _UA_MonitoredItemNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_MonitoredItemNotification>,
              ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_deleteMembers(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_deleteMembers(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_deleteMembers');
  late final _UA_MonitoredItemNotification_deleteMembers =
      _UA_MonitoredItemNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_clear(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_clear(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_clear');
  late final _UA_MonitoredItemNotification_clear =
      _UA_MonitoredItemNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_MonitoredItemNotification_delete(
    ffi.Pointer<UA_MonitoredItemNotification> p,
  ) {
    return _UA_MonitoredItemNotification_delete(
      p,
    );
  }

  late final _UA_MonitoredItemNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_MonitoredItemNotification>)>>(
      'UA_MonitoredItemNotification_delete');
  late final _UA_MonitoredItemNotification_delete =
      _UA_MonitoredItemNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItemNotification>)>();

  void UA_EventFieldList_init(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_init(
      p,
    );
  }

  late final _UA_EventFieldList_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_init');
  late final _UA_EventFieldList_init = _UA_EventFieldList_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFieldList>)>();

  ffi.Pointer<UA_EventFieldList> UA_EventFieldList_new() {
    return _UA_EventFieldList_new();
  }

  late final _UA_EventFieldList_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EventFieldList> Function()>>(
          'UA_EventFieldList_new');
  late final _UA_EventFieldList_new = _UA_EventFieldList_newPtr.asFunction<
      ffi.Pointer<UA_EventFieldList> Function()>();

  int UA_EventFieldList_copy(
    ffi.Pointer<UA_EventFieldList> src,
    ffi.Pointer<UA_EventFieldList> dst,
  ) {
    return _UA_EventFieldList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventFieldList_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EventFieldList>,
              ffi.Pointer<UA_EventFieldList>)>>('UA_EventFieldList_copy');
  late final _UA_EventFieldList_copy = _UA_EventFieldList_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EventFieldList>, ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_deleteMembers(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_deleteMembers(
      p,
    );
  }

  late final _UA_EventFieldList_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_deleteMembers');
  late final _UA_EventFieldList_deleteMembers =
      _UA_EventFieldList_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_clear(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_clear(
      p,
    );
  }

  late final _UA_EventFieldList_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_clear');
  late final _UA_EventFieldList_clear = _UA_EventFieldList_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_EventFieldList_delete(
    ffi.Pointer<UA_EventFieldList> p,
  ) {
    return _UA_EventFieldList_delete(
      p,
    );
  }

  late final _UA_EventFieldList_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EventFieldList>)>>(
      'UA_EventFieldList_delete');
  late final _UA_EventFieldList_delete = _UA_EventFieldList_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EventFieldList>)>();

  void UA_StatusChangeNotification_init(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_init(
      p,
    );
  }

  late final _UA_StatusChangeNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_init');
  late final _UA_StatusChangeNotification_init =
      _UA_StatusChangeNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  ffi.Pointer<UA_StatusChangeNotification> UA_StatusChangeNotification_new() {
    return _UA_StatusChangeNotification_new();
  }

  late final _UA_StatusChangeNotification_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_StatusChangeNotification> Function()>>(
      'UA_StatusChangeNotification_new');
  late final _UA_StatusChangeNotification_new =
      _UA_StatusChangeNotification_newPtr.asFunction<
          ffi.Pointer<UA_StatusChangeNotification> Function()>();

  int UA_StatusChangeNotification_copy(
    ffi.Pointer<UA_StatusChangeNotification> src,
    ffi.Pointer<UA_StatusChangeNotification> dst,
  ) {
    return _UA_StatusChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_StatusChangeNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StatusChangeNotification>,
                  ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_copy');
  late final _UA_StatusChangeNotification_copy =
      _UA_StatusChangeNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StatusChangeNotification>,
              ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_deleteMembers(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_deleteMembers(
      p,
    );
  }

  late final _UA_StatusChangeNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_deleteMembers');
  late final _UA_StatusChangeNotification_deleteMembers =
      _UA_StatusChangeNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_clear(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_clear(
      p,
    );
  }

  late final _UA_StatusChangeNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_clear');
  late final _UA_StatusChangeNotification_clear =
      _UA_StatusChangeNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_StatusChangeNotification_delete(
    ffi.Pointer<UA_StatusChangeNotification> p,
  ) {
    return _UA_StatusChangeNotification_delete(
      p,
    );
  }

  late final _UA_StatusChangeNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StatusChangeNotification>)>>(
      'UA_StatusChangeNotification_delete');
  late final _UA_StatusChangeNotification_delete =
      _UA_StatusChangeNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_StatusChangeNotification>)>();

  void UA_SubscriptionAcknowledgement_init(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_init(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_init');
  late final _UA_SubscriptionAcknowledgement_init =
      _UA_SubscriptionAcknowledgement_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  ffi.Pointer<UA_SubscriptionAcknowledgement>
      UA_SubscriptionAcknowledgement_new() {
    return _UA_SubscriptionAcknowledgement_new();
  }

  late final _UA_SubscriptionAcknowledgement_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SubscriptionAcknowledgement>
              Function()>>('UA_SubscriptionAcknowledgement_new');
  late final _UA_SubscriptionAcknowledgement_new =
      _UA_SubscriptionAcknowledgement_newPtr.asFunction<
          ffi.Pointer<UA_SubscriptionAcknowledgement> Function()>();

  int UA_SubscriptionAcknowledgement_copy(
    ffi.Pointer<UA_SubscriptionAcknowledgement> src,
    ffi.Pointer<UA_SubscriptionAcknowledgement> dst,
  ) {
    return _UA_SubscriptionAcknowledgement_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscriptionAcknowledgement_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SubscriptionAcknowledgement>,
                  ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_copy');
  late final _UA_SubscriptionAcknowledgement_copy =
      _UA_SubscriptionAcknowledgement_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SubscriptionAcknowledgement>,
              ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_deleteMembers(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_deleteMembers(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_deleteMembers');
  late final _UA_SubscriptionAcknowledgement_deleteMembers =
      _UA_SubscriptionAcknowledgement_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_clear(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_clear(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_clear');
  late final _UA_SubscriptionAcknowledgement_clear =
      _UA_SubscriptionAcknowledgement_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_SubscriptionAcknowledgement_delete(
    ffi.Pointer<UA_SubscriptionAcknowledgement> p,
  ) {
    return _UA_SubscriptionAcknowledgement_delete(
      p,
    );
  }

  late final _UA_SubscriptionAcknowledgement_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>>(
      'UA_SubscriptionAcknowledgement_delete');
  late final _UA_SubscriptionAcknowledgement_delete =
      _UA_SubscriptionAcknowledgement_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SubscriptionAcknowledgement>)>();

  void UA_PublishRequest_init(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_init(
      p,
    );
  }

  late final _UA_PublishRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_init');
  late final _UA_PublishRequest_init = _UA_PublishRequest_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishRequest>)>();

  ffi.Pointer<UA_PublishRequest> UA_PublishRequest_new() {
    return _UA_PublishRequest_new();
  }

  late final _UA_PublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishRequest> Function()>>(
          'UA_PublishRequest_new');
  late final _UA_PublishRequest_new = _UA_PublishRequest_newPtr.asFunction<
      ffi.Pointer<UA_PublishRequest> Function()>();

  int UA_PublishRequest_copy(
    ffi.Pointer<UA_PublishRequest> src,
    ffi.Pointer<UA_PublishRequest> dst,
  ) {
    return _UA_PublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishRequest>,
              ffi.Pointer<UA_PublishRequest>)>>('UA_PublishRequest_copy');
  late final _UA_PublishRequest_copy = _UA_PublishRequest_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PublishRequest>, ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_deleteMembers(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_deleteMembers(
      p,
    );
  }

  late final _UA_PublishRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_deleteMembers');
  late final _UA_PublishRequest_deleteMembers =
      _UA_PublishRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_clear(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_clear(
      p,
    );
  }

  late final _UA_PublishRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_clear');
  late final _UA_PublishRequest_clear = _UA_PublishRequest_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishRequest_delete(
    ffi.Pointer<UA_PublishRequest> p,
  ) {
    return _UA_PublishRequest_delete(
      p,
    );
  }

  late final _UA_PublishRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishRequest>)>>(
      'UA_PublishRequest_delete');
  late final _UA_PublishRequest_delete = _UA_PublishRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PublishRequest>)>();

  void UA_PublishResponse_init(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_init(
      p,
    );
  }

  late final _UA_PublishResponse_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_init');
  late final _UA_PublishResponse_init = _UA_PublishResponse_initPtr.asFunction<
      void Function(ffi.Pointer<UA_PublishResponse>)>();

  ffi.Pointer<UA_PublishResponse> UA_PublishResponse_new() {
    return _UA_PublishResponse_new();
  }

  late final _UA_PublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_PublishResponse> Function()>>(
          'UA_PublishResponse_new');
  late final _UA_PublishResponse_new = _UA_PublishResponse_newPtr.asFunction<
      ffi.Pointer<UA_PublishResponse> Function()>();

  int UA_PublishResponse_copy(
    ffi.Pointer<UA_PublishResponse> src,
    ffi.Pointer<UA_PublishResponse> dst,
  ) {
    return _UA_PublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PublishResponse>,
              ffi.Pointer<UA_PublishResponse>)>>('UA_PublishResponse_copy');
  late final _UA_PublishResponse_copy = _UA_PublishResponse_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_PublishResponse>, ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_deleteMembers(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_deleteMembers(
      p,
    );
  }

  late final _UA_PublishResponse_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_deleteMembers');
  late final _UA_PublishResponse_deleteMembers =
      _UA_PublishResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_clear(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_clear(
      p,
    );
  }

  late final _UA_PublishResponse_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_clear');
  late final _UA_PublishResponse_clear = _UA_PublishResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_PublishResponse_delete(
    ffi.Pointer<UA_PublishResponse> p,
  ) {
    return _UA_PublishResponse_delete(
      p,
    );
  }

  late final _UA_PublishResponse_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_PublishResponse>)>>(
      'UA_PublishResponse_delete');
  late final _UA_PublishResponse_delete = _UA_PublishResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_PublishResponse>)>();

  void UA_RepublishRequest_init(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_init(
      p,
    );
  }

  late final _UA_RepublishRequest_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_init');
  late final _UA_RepublishRequest_init = _UA_RepublishRequest_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  ffi.Pointer<UA_RepublishRequest> UA_RepublishRequest_new() {
    return _UA_RepublishRequest_new();
  }

  late final _UA_RepublishRequest_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishRequest> Function()>>(
          'UA_RepublishRequest_new');
  late final _UA_RepublishRequest_new = _UA_RepublishRequest_newPtr.asFunction<
      ffi.Pointer<UA_RepublishRequest> Function()>();

  int UA_RepublishRequest_copy(
    ffi.Pointer<UA_RepublishRequest> src,
    ffi.Pointer<UA_RepublishRequest> dst,
  ) {
    return _UA_RepublishRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishRequest_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RepublishRequest>,
              ffi.Pointer<UA_RepublishRequest>)>>('UA_RepublishRequest_copy');
  late final _UA_RepublishRequest_copy =
      _UA_RepublishRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RepublishRequest>,
              ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_deleteMembers(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_deleteMembers(
      p,
    );
  }

  late final _UA_RepublishRequest_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_deleteMembers');
  late final _UA_RepublishRequest_deleteMembers =
      _UA_RepublishRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_clear(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_clear(
      p,
    );
  }

  late final _UA_RepublishRequest_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_clear');
  late final _UA_RepublishRequest_clear = _UA_RepublishRequest_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishRequest_delete(
    ffi.Pointer<UA_RepublishRequest> p,
  ) {
    return _UA_RepublishRequest_delete(
      p,
    );
  }

  late final _UA_RepublishRequest_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_RepublishRequest>)>>(
      'UA_RepublishRequest_delete');
  late final _UA_RepublishRequest_delete = _UA_RepublishRequest_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishRequest>)>();

  void UA_RepublishResponse_init(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_init(
      p,
    );
  }

  late final _UA_RepublishResponse_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_init');
  late final _UA_RepublishResponse_init = _UA_RepublishResponse_initPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  ffi.Pointer<UA_RepublishResponse> UA_RepublishResponse_new() {
    return _UA_RepublishResponse_new();
  }

  late final _UA_RepublishResponse_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_RepublishResponse> Function()>>(
          'UA_RepublishResponse_new');
  late final _UA_RepublishResponse_new = _UA_RepublishResponse_newPtr
      .asFunction<ffi.Pointer<UA_RepublishResponse> Function()>();

  int UA_RepublishResponse_copy(
    ffi.Pointer<UA_RepublishResponse> src,
    ffi.Pointer<UA_RepublishResponse> dst,
  ) {
    return _UA_RepublishResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_RepublishResponse_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RepublishResponse>,
              ffi.Pointer<UA_RepublishResponse>)>>('UA_RepublishResponse_copy');
  late final _UA_RepublishResponse_copy =
      _UA_RepublishResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_RepublishResponse>,
              ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_deleteMembers(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_deleteMembers(
      p,
    );
  }

  late final _UA_RepublishResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_deleteMembers');
  late final _UA_RepublishResponse_deleteMembers =
      _UA_RepublishResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_clear(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_clear(
      p,
    );
  }

  late final _UA_RepublishResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_clear');
  late final _UA_RepublishResponse_clear = _UA_RepublishResponse_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_RepublishResponse_delete(
    ffi.Pointer<UA_RepublishResponse> p,
  ) {
    return _UA_RepublishResponse_delete(
      p,
    );
  }

  late final _UA_RepublishResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_RepublishResponse>)>>(
      'UA_RepublishResponse_delete');
  late final _UA_RepublishResponse_delete = _UA_RepublishResponse_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_RepublishResponse>)>();

  void UA_TransferResult_init(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_init(
      p,
    );
  }

  late final _UA_TransferResult_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_init');
  late final _UA_TransferResult_init = _UA_TransferResult_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferResult>)>();

  ffi.Pointer<UA_TransferResult> UA_TransferResult_new() {
    return _UA_TransferResult_new();
  }

  late final _UA_TransferResult_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TransferResult> Function()>>(
          'UA_TransferResult_new');
  late final _UA_TransferResult_new = _UA_TransferResult_newPtr.asFunction<
      ffi.Pointer<UA_TransferResult> Function()>();

  int UA_TransferResult_copy(
    ffi.Pointer<UA_TransferResult> src,
    ffi.Pointer<UA_TransferResult> dst,
  ) {
    return _UA_TransferResult_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferResult_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TransferResult>,
              ffi.Pointer<UA_TransferResult>)>>('UA_TransferResult_copy');
  late final _UA_TransferResult_copy = _UA_TransferResult_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_TransferResult>, ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_deleteMembers(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_deleteMembers(
      p,
    );
  }

  late final _UA_TransferResult_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_deleteMembers');
  late final _UA_TransferResult_deleteMembers =
      _UA_TransferResult_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_clear(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_clear(
      p,
    );
  }

  late final _UA_TransferResult_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_clear');
  late final _UA_TransferResult_clear = _UA_TransferResult_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferResult_delete(
    ffi.Pointer<UA_TransferResult> p,
  ) {
    return _UA_TransferResult_delete(
      p,
    );
  }

  late final _UA_TransferResult_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TransferResult>)>>(
      'UA_TransferResult_delete');
  late final _UA_TransferResult_delete = _UA_TransferResult_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TransferResult>)>();

  void UA_TransferSubscriptionsRequest_init(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_init');
  late final _UA_TransferSubscriptionsRequest_init =
      _UA_TransferSubscriptionsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  ffi.Pointer<UA_TransferSubscriptionsRequest>
      UA_TransferSubscriptionsRequest_new() {
    return _UA_TransferSubscriptionsRequest_new();
  }

  late final _UA_TransferSubscriptionsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TransferSubscriptionsRequest>
              Function()>>('UA_TransferSubscriptionsRequest_new');
  late final _UA_TransferSubscriptionsRequest_new =
      _UA_TransferSubscriptionsRequest_newPtr.asFunction<
          ffi.Pointer<UA_TransferSubscriptionsRequest> Function()>();

  int UA_TransferSubscriptionsRequest_copy(
    ffi.Pointer<UA_TransferSubscriptionsRequest> src,
    ffi.Pointer<UA_TransferSubscriptionsRequest> dst,
  ) {
    return _UA_TransferSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TransferSubscriptionsRequest>,
                  ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_copy');
  late final _UA_TransferSubscriptionsRequest_copy =
      _UA_TransferSubscriptionsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TransferSubscriptionsRequest>,
              ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_deleteMembers(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_deleteMembers');
  late final _UA_TransferSubscriptionsRequest_deleteMembers =
      _UA_TransferSubscriptionsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_clear(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_clear');
  late final _UA_TransferSubscriptionsRequest_clear =
      _UA_TransferSubscriptionsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsRequest_delete(
    ffi.Pointer<UA_TransferSubscriptionsRequest> p,
  ) {
    return _UA_TransferSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>>(
      'UA_TransferSubscriptionsRequest_delete');
  late final _UA_TransferSubscriptionsRequest_delete =
      _UA_TransferSubscriptionsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsRequest>)>();

  void UA_TransferSubscriptionsResponse_init(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_init');
  late final _UA_TransferSubscriptionsResponse_init =
      _UA_TransferSubscriptionsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  ffi.Pointer<UA_TransferSubscriptionsResponse>
      UA_TransferSubscriptionsResponse_new() {
    return _UA_TransferSubscriptionsResponse_new();
  }

  late final _UA_TransferSubscriptionsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_TransferSubscriptionsResponse>
              Function()>>('UA_TransferSubscriptionsResponse_new');
  late final _UA_TransferSubscriptionsResponse_new =
      _UA_TransferSubscriptionsResponse_newPtr.asFunction<
          ffi.Pointer<UA_TransferSubscriptionsResponse> Function()>();

  int UA_TransferSubscriptionsResponse_copy(
    ffi.Pointer<UA_TransferSubscriptionsResponse> src,
    ffi.Pointer<UA_TransferSubscriptionsResponse> dst,
  ) {
    return _UA_TransferSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_TransferSubscriptionsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>,
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_copy');
  late final _UA_TransferSubscriptionsResponse_copy =
      _UA_TransferSubscriptionsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TransferSubscriptionsResponse>,
              ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_deleteMembers(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_deleteMembers');
  late final _UA_TransferSubscriptionsResponse_deleteMembers =
      _UA_TransferSubscriptionsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_clear(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_clear');
  late final _UA_TransferSubscriptionsResponse_clear =
      _UA_TransferSubscriptionsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_TransferSubscriptionsResponse_delete(
    ffi.Pointer<UA_TransferSubscriptionsResponse> p,
  ) {
    return _UA_TransferSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_TransferSubscriptionsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_TransferSubscriptionsResponse>)>>(
      'UA_TransferSubscriptionsResponse_delete');
  late final _UA_TransferSubscriptionsResponse_delete =
      _UA_TransferSubscriptionsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TransferSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsRequest_init(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_init');
  late final _UA_DeleteSubscriptionsRequest_init =
      _UA_DeleteSubscriptionsRequest_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  ffi.Pointer<UA_DeleteSubscriptionsRequest>
      UA_DeleteSubscriptionsRequest_new() {
    return _UA_DeleteSubscriptionsRequest_new();
  }

  late final _UA_DeleteSubscriptionsRequest_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteSubscriptionsRequest>
              Function()>>('UA_DeleteSubscriptionsRequest_new');
  late final _UA_DeleteSubscriptionsRequest_new =
      _UA_DeleteSubscriptionsRequest_newPtr.asFunction<
          ffi.Pointer<UA_DeleteSubscriptionsRequest> Function()>();

  int UA_DeleteSubscriptionsRequest_copy(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> src,
    ffi.Pointer<UA_DeleteSubscriptionsRequest> dst,
  ) {
    return _UA_DeleteSubscriptionsRequest_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
                  ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_copy');
  late final _UA_DeleteSubscriptionsRequest_copy =
      _UA_DeleteSubscriptionsRequest_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>,
              ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_deleteMembers(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_deleteMembers');
  late final _UA_DeleteSubscriptionsRequest_deleteMembers =
      _UA_DeleteSubscriptionsRequest_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_clear(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_clear');
  late final _UA_DeleteSubscriptionsRequest_clear =
      _UA_DeleteSubscriptionsRequest_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsRequest_delete(
    ffi.Pointer<UA_DeleteSubscriptionsRequest> p,
  ) {
    return _UA_DeleteSubscriptionsRequest_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsRequest_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>>(
      'UA_DeleteSubscriptionsRequest_delete');
  late final _UA_DeleteSubscriptionsRequest_delete =
      _UA_DeleteSubscriptionsRequest_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsRequest>)>();

  void UA_DeleteSubscriptionsResponse_init(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_init(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_init');
  late final _UA_DeleteSubscriptionsResponse_init =
      _UA_DeleteSubscriptionsResponse_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  ffi.Pointer<UA_DeleteSubscriptionsResponse>
      UA_DeleteSubscriptionsResponse_new() {
    return _UA_DeleteSubscriptionsResponse_new();
  }

  late final _UA_DeleteSubscriptionsResponse_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DeleteSubscriptionsResponse>
              Function()>>('UA_DeleteSubscriptionsResponse_new');
  late final _UA_DeleteSubscriptionsResponse_new =
      _UA_DeleteSubscriptionsResponse_newPtr.asFunction<
          ffi.Pointer<UA_DeleteSubscriptionsResponse> Function()>();

  int UA_DeleteSubscriptionsResponse_copy(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> src,
    ffi.Pointer<UA_DeleteSubscriptionsResponse> dst,
  ) {
    return _UA_DeleteSubscriptionsResponse_copy(
      src,
      dst,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_DeleteSubscriptionsResponse>,
                  ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_copy');
  late final _UA_DeleteSubscriptionsResponse_copy =
      _UA_DeleteSubscriptionsResponse_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>,
              ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_deleteMembers(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_deleteMembers(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_deleteMembers');
  late final _UA_DeleteSubscriptionsResponse_deleteMembers =
      _UA_DeleteSubscriptionsResponse_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_clear(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_clear(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_clear');
  late final _UA_DeleteSubscriptionsResponse_clear =
      _UA_DeleteSubscriptionsResponse_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_DeleteSubscriptionsResponse_delete(
    ffi.Pointer<UA_DeleteSubscriptionsResponse> p,
  ) {
    return _UA_DeleteSubscriptionsResponse_delete(
      p,
    );
  }

  late final _UA_DeleteSubscriptionsResponse_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_DeleteSubscriptionsResponse_delete');
  late final _UA_DeleteSubscriptionsResponse_delete =
      _UA_DeleteSubscriptionsResponse_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  void UA_BuildInfo_init(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_init(
      p,
    );
  }

  late final _UA_BuildInfo_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_init');
  late final _UA_BuildInfo_init = _UA_BuildInfo_initPtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  ffi.Pointer<UA_BuildInfo> UA_BuildInfo_new() {
    return _UA_BuildInfo_new();
  }

  late final _UA_BuildInfo_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_BuildInfo> Function()>>(
          'UA_BuildInfo_new');
  late final _UA_BuildInfo_new =
      _UA_BuildInfo_newPtr.asFunction<ffi.Pointer<UA_BuildInfo> Function()>();

  int UA_BuildInfo_copy(
    ffi.Pointer<UA_BuildInfo> src,
    ffi.Pointer<UA_BuildInfo> dst,
  ) {
    return _UA_BuildInfo_copy(
      src,
      dst,
    );
  }

  late final _UA_BuildInfo_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_BuildInfo>,
              ffi.Pointer<UA_BuildInfo>)>>('UA_BuildInfo_copy');
  late final _UA_BuildInfo_copy = _UA_BuildInfo_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_BuildInfo>, ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_deleteMembers(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_deleteMembers(
      p,
    );
  }

  late final _UA_BuildInfo_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_deleteMembers');
  late final _UA_BuildInfo_deleteMembers = _UA_BuildInfo_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_clear(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_clear(
      p,
    );
  }

  late final _UA_BuildInfo_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_clear');
  late final _UA_BuildInfo_clear = _UA_BuildInfo_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_BuildInfo_delete(
    ffi.Pointer<UA_BuildInfo> p,
  ) {
    return _UA_BuildInfo_delete(
      p,
    );
  }

  late final _UA_BuildInfo_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_BuildInfo>)>>(
          'UA_BuildInfo_delete');
  late final _UA_BuildInfo_delete = _UA_BuildInfo_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_BuildInfo>)>();

  void UA_RedundancySupport_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_init(
      p,
    );
  }

  late final _UA_RedundancySupport_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_init');
  late final _UA_RedundancySupport_init = _UA_RedundancySupport_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_RedundancySupport_new() {
    return _UA_RedundancySupport_new();
  }

  late final _UA_RedundancySupport_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_RedundancySupport_new');
  late final _UA_RedundancySupport_new = _UA_RedundancySupport_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_RedundancySupport_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_RedundancySupport_copy(
      src,
      dst,
    );
  }

  late final _UA_RedundancySupport_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_RedundancySupport_copy');
  late final _UA_RedundancySupport_copy =
      _UA_RedundancySupport_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_deleteMembers(
      p,
    );
  }

  late final _UA_RedundancySupport_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_deleteMembers');
  late final _UA_RedundancySupport_deleteMembers =
      _UA_RedundancySupport_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_clear(
      p,
    );
  }

  late final _UA_RedundancySupport_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_clear');
  late final _UA_RedundancySupport_clear = _UA_RedundancySupport_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_RedundancySupport_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_RedundancySupport_delete(
      p,
    );
  }

  late final _UA_RedundancySupport_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_RedundancySupport_delete');
  late final _UA_RedundancySupport_delete = _UA_RedundancySupport_deletePtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_init(
      p,
    );
  }

  late final _UA_ServerState_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_init');
  late final _UA_ServerState_init = _UA_ServerState_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_ServerState_new() {
    return _UA_ServerState_new();
  }

  late final _UA_ServerState_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_ServerState_new');
  late final _UA_ServerState_new =
      _UA_ServerState_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_ServerState_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_ServerState_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerState_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_ServerState_copy');
  late final _UA_ServerState_copy = _UA_ServerState_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_deleteMembers(
      p,
    );
  }

  late final _UA_ServerState_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_deleteMembers');
  late final _UA_ServerState_deleteMembers = _UA_ServerState_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_clear(
      p,
    );
  }

  late final _UA_ServerState_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_clear');
  late final _UA_ServerState_clear = _UA_ServerState_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerState_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ServerState_delete(
      p,
    );
  }

  late final _UA_ServerState_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ServerState_delete');
  late final _UA_ServerState_delete = _UA_ServerState_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ServerDiagnosticsSummaryDataType_init(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_init(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_init');
  late final _UA_ServerDiagnosticsSummaryDataType_init =
      _UA_ServerDiagnosticsSummaryDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>
      UA_ServerDiagnosticsSummaryDataType_new() {
    return _UA_ServerDiagnosticsSummaryDataType_new();
  }

  late final _UA_ServerDiagnosticsSummaryDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>
              Function()>>('UA_ServerDiagnosticsSummaryDataType_new');
  late final _UA_ServerDiagnosticsSummaryDataType_new =
      _UA_ServerDiagnosticsSummaryDataType_newPtr.asFunction<
          ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> Function()>();

  int UA_ServerDiagnosticsSummaryDataType_copy(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> src,
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> dst,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_copy');
  late final _UA_ServerDiagnosticsSummaryDataType_copy =
      _UA_ServerDiagnosticsSummaryDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>,
              ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_deleteMembers(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_deleteMembers');
  late final _UA_ServerDiagnosticsSummaryDataType_deleteMembers =
      _UA_ServerDiagnosticsSummaryDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_clear(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_clear(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_clear');
  late final _UA_ServerDiagnosticsSummaryDataType_clear =
      _UA_ServerDiagnosticsSummaryDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerDiagnosticsSummaryDataType_delete(
    ffi.Pointer<UA_ServerDiagnosticsSummaryDataType> p,
  ) {
    return _UA_ServerDiagnosticsSummaryDataType_delete(
      p,
    );
  }

  late final _UA_ServerDiagnosticsSummaryDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>>(
      'UA_ServerDiagnosticsSummaryDataType_delete');
  late final _UA_ServerDiagnosticsSummaryDataType_delete =
      _UA_ServerDiagnosticsSummaryDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ServerDiagnosticsSummaryDataType>)>();

  void UA_ServerStatusDataType_init(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_init(
      p,
    );
  }

  late final _UA_ServerStatusDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_init');
  late final _UA_ServerStatusDataType_init = _UA_ServerStatusDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  ffi.Pointer<UA_ServerStatusDataType> UA_ServerStatusDataType_new() {
    return _UA_ServerStatusDataType_new();
  }

  late final _UA_ServerStatusDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>>(
      'UA_ServerStatusDataType_new');
  late final _UA_ServerStatusDataType_new = _UA_ServerStatusDataType_newPtr
      .asFunction<ffi.Pointer<UA_ServerStatusDataType> Function()>();

  int UA_ServerStatusDataType_copy(
    ffi.Pointer<UA_ServerStatusDataType> src,
    ffi.Pointer<UA_ServerStatusDataType> dst,
  ) {
    return _UA_ServerStatusDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ServerStatusDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ServerStatusDataType>,
                  ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_copy');
  late final _UA_ServerStatusDataType_copy =
      _UA_ServerStatusDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerStatusDataType>,
              ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_deleteMembers(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ServerStatusDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_deleteMembers');
  late final _UA_ServerStatusDataType_deleteMembers =
      _UA_ServerStatusDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_clear(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_clear(
      p,
    );
  }

  late final _UA_ServerStatusDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_clear');
  late final _UA_ServerStatusDataType_clear = _UA_ServerStatusDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_ServerStatusDataType_delete(
    ffi.Pointer<UA_ServerStatusDataType> p,
  ) {
    return _UA_ServerStatusDataType_delete(
      p,
    );
  }

  late final _UA_ServerStatusDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ServerStatusDataType>)>>(
      'UA_ServerStatusDataType_delete');
  late final _UA_ServerStatusDataType_delete =
      _UA_ServerStatusDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_ServerStatusDataType>)>();

  void UA_Range_init(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_init(
      p,
    );
  }

  late final _UA_Range_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_init');
  late final _UA_Range_init =
      _UA_Range_initPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  ffi.Pointer<UA_Range> UA_Range_new() {
    return _UA_Range_new();
  }

  late final _UA_Range_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Range> Function()>>(
          'UA_Range_new');
  late final _UA_Range_new =
      _UA_Range_newPtr.asFunction<ffi.Pointer<UA_Range> Function()>();

  int UA_Range_copy(
    ffi.Pointer<UA_Range> src,
    ffi.Pointer<UA_Range> dst,
  ) {
    return _UA_Range_copy(
      src,
      dst,
    );
  }

  late final _UA_Range_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>>('UA_Range_copy');
  late final _UA_Range_copy = _UA_Range_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Range>, ffi.Pointer<UA_Range>)>();

  void UA_Range_deleteMembers(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_deleteMembers(
      p,
    );
  }

  late final _UA_Range_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_deleteMembers');
  late final _UA_Range_deleteMembers = _UA_Range_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_Range>)>();

  void UA_Range_clear(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_clear(
      p,
    );
  }

  late final _UA_Range_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_clear');
  late final _UA_Range_clear =
      _UA_Range_clearPtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  void UA_Range_delete(
    ffi.Pointer<UA_Range> p,
  ) {
    return _UA_Range_delete(
      p,
    );
  }

  late final _UA_Range_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Range>)>>(
          'UA_Range_delete');
  late final _UA_Range_delete =
      _UA_Range_deletePtr.asFunction<void Function(ffi.Pointer<UA_Range>)>();

  void UA_EUInformation_init(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_init(
      p,
    );
  }

  late final _UA_EUInformation_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_init');
  late final _UA_EUInformation_init = _UA_EUInformation_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  ffi.Pointer<UA_EUInformation> UA_EUInformation_new() {
    return _UA_EUInformation_new();
  }

  late final _UA_EUInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EUInformation> Function()>>(
          'UA_EUInformation_new');
  late final _UA_EUInformation_new = _UA_EUInformation_newPtr.asFunction<
      ffi.Pointer<UA_EUInformation> Function()>();

  int UA_EUInformation_copy(
    ffi.Pointer<UA_EUInformation> src,
    ffi.Pointer<UA_EUInformation> dst,
  ) {
    return _UA_EUInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_EUInformation_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EUInformation>,
              ffi.Pointer<UA_EUInformation>)>>('UA_EUInformation_copy');
  late final _UA_EUInformation_copy = _UA_EUInformation_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EUInformation>, ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_deleteMembers(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_deleteMembers(
      p,
    );
  }

  late final _UA_EUInformation_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_deleteMembers');
  late final _UA_EUInformation_deleteMembers =
      _UA_EUInformation_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_clear(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_clear(
      p,
    );
  }

  late final _UA_EUInformation_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_clear');
  late final _UA_EUInformation_clear = _UA_EUInformation_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_EUInformation_delete(
    ffi.Pointer<UA_EUInformation> p,
  ) {
    return _UA_EUInformation_delete(
      p,
    );
  }

  late final _UA_EUInformation_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_EUInformation>)>>(
      'UA_EUInformation_delete');
  late final _UA_EUInformation_delete = _UA_EUInformation_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_EUInformation>)>();

  void UA_AxisScaleEnumeration_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_init(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_init');
  late final _UA_AxisScaleEnumeration_init = _UA_AxisScaleEnumeration_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_AxisScaleEnumeration_new() {
    return _UA_AxisScaleEnumeration_new();
  }

  late final _UA_AxisScaleEnumeration_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_AxisScaleEnumeration_new');
  late final _UA_AxisScaleEnumeration_new = _UA_AxisScaleEnumeration_newPtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_AxisScaleEnumeration_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_AxisScaleEnumeration_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisScaleEnumeration_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_AxisScaleEnumeration_copy');
  late final _UA_AxisScaleEnumeration_copy =
      _UA_AxisScaleEnumeration_copyPtr.asFunction<
          int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_deleteMembers(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_deleteMembers');
  late final _UA_AxisScaleEnumeration_deleteMembers =
      _UA_AxisScaleEnumeration_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_clear(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_clear');
  late final _UA_AxisScaleEnumeration_clear = _UA_AxisScaleEnumeration_clearPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_AxisScaleEnumeration_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_AxisScaleEnumeration_delete(
      p,
    );
  }

  late final _UA_AxisScaleEnumeration_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_AxisScaleEnumeration_delete');
  late final _UA_AxisScaleEnumeration_delete =
      _UA_AxisScaleEnumeration_deletePtr.asFunction<
          void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ComplexNumberType_init(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_init(
      p,
    );
  }

  late final _UA_ComplexNumberType_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_init');
  late final _UA_ComplexNumberType_init = _UA_ComplexNumberType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  ffi.Pointer<UA_ComplexNumberType> UA_ComplexNumberType_new() {
    return _UA_ComplexNumberType_new();
  }

  late final _UA_ComplexNumberType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_ComplexNumberType> Function()>>(
          'UA_ComplexNumberType_new');
  late final _UA_ComplexNumberType_new = _UA_ComplexNumberType_newPtr
      .asFunction<ffi.Pointer<UA_ComplexNumberType> Function()>();

  int UA_ComplexNumberType_copy(
    ffi.Pointer<UA_ComplexNumberType> src,
    ffi.Pointer<UA_ComplexNumberType> dst,
  ) {
    return _UA_ComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_ComplexNumberType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ComplexNumberType>,
              ffi.Pointer<UA_ComplexNumberType>)>>('UA_ComplexNumberType_copy');
  late final _UA_ComplexNumberType_copy =
      _UA_ComplexNumberType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ComplexNumberType>,
              ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_deleteMembers(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_deleteMembers(
      p,
    );
  }

  late final _UA_ComplexNumberType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_deleteMembers');
  late final _UA_ComplexNumberType_deleteMembers =
      _UA_ComplexNumberType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_clear(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_clear(
      p,
    );
  }

  late final _UA_ComplexNumberType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_clear');
  late final _UA_ComplexNumberType_clear = _UA_ComplexNumberType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_ComplexNumberType_delete(
    ffi.Pointer<UA_ComplexNumberType> p,
  ) {
    return _UA_ComplexNumberType_delete(
      p,
    );
  }

  late final _UA_ComplexNumberType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ComplexNumberType>)>>(
      'UA_ComplexNumberType_delete');
  late final _UA_ComplexNumberType_delete = _UA_ComplexNumberType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ComplexNumberType>)>();

  void UA_DoubleComplexNumberType_init(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_init(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_init');
  late final _UA_DoubleComplexNumberType_init =
      _UA_DoubleComplexNumberType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  ffi.Pointer<UA_DoubleComplexNumberType> UA_DoubleComplexNumberType_new() {
    return _UA_DoubleComplexNumberType_new();
  }

  late final _UA_DoubleComplexNumberType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DoubleComplexNumberType> Function()>>(
      'UA_DoubleComplexNumberType_new');
  late final _UA_DoubleComplexNumberType_new =
      _UA_DoubleComplexNumberType_newPtr.asFunction<
          ffi.Pointer<UA_DoubleComplexNumberType> Function()>();

  int UA_DoubleComplexNumberType_copy(
    ffi.Pointer<UA_DoubleComplexNumberType> src,
    ffi.Pointer<UA_DoubleComplexNumberType> dst,
  ) {
    return _UA_DoubleComplexNumberType_copy(
      src,
      dst,
    );
  }

  late final _UA_DoubleComplexNumberType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DoubleComplexNumberType>,
                  ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_copy');
  late final _UA_DoubleComplexNumberType_copy =
      _UA_DoubleComplexNumberType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DoubleComplexNumberType>,
              ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_deleteMembers(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_deleteMembers(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_deleteMembers');
  late final _UA_DoubleComplexNumberType_deleteMembers =
      _UA_DoubleComplexNumberType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_clear(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_clear(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_clear');
  late final _UA_DoubleComplexNumberType_clear =
      _UA_DoubleComplexNumberType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_DoubleComplexNumberType_delete(
    ffi.Pointer<UA_DoubleComplexNumberType> p,
  ) {
    return _UA_DoubleComplexNumberType_delete(
      p,
    );
  }

  late final _UA_DoubleComplexNumberType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>>(
      'UA_DoubleComplexNumberType_delete');
  late final _UA_DoubleComplexNumberType_delete =
      _UA_DoubleComplexNumberType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DoubleComplexNumberType>)>();

  void UA_AxisInformation_init(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_init(
      p,
    );
  }

  late final _UA_AxisInformation_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_init');
  late final _UA_AxisInformation_init = _UA_AxisInformation_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AxisInformation>)>();

  ffi.Pointer<UA_AxisInformation> UA_AxisInformation_new() {
    return _UA_AxisInformation_new();
  }

  late final _UA_AxisInformation_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_AxisInformation> Function()>>(
          'UA_AxisInformation_new');
  late final _UA_AxisInformation_new = _UA_AxisInformation_newPtr.asFunction<
      ffi.Pointer<UA_AxisInformation> Function()>();

  int UA_AxisInformation_copy(
    ffi.Pointer<UA_AxisInformation> src,
    ffi.Pointer<UA_AxisInformation> dst,
  ) {
    return _UA_AxisInformation_copy(
      src,
      dst,
    );
  }

  late final _UA_AxisInformation_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_AxisInformation>,
              ffi.Pointer<UA_AxisInformation>)>>('UA_AxisInformation_copy');
  late final _UA_AxisInformation_copy = _UA_AxisInformation_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_AxisInformation>, ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_deleteMembers(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_deleteMembers(
      p,
    );
  }

  late final _UA_AxisInformation_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_deleteMembers');
  late final _UA_AxisInformation_deleteMembers =
      _UA_AxisInformation_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_clear(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_clear(
      p,
    );
  }

  late final _UA_AxisInformation_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_clear');
  late final _UA_AxisInformation_clear = _UA_AxisInformation_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_AxisInformation_delete(
    ffi.Pointer<UA_AxisInformation> p,
  ) {
    return _UA_AxisInformation_delete(
      p,
    );
  }

  late final _UA_AxisInformation_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AxisInformation>)>>(
      'UA_AxisInformation_delete');
  late final _UA_AxisInformation_delete = _UA_AxisInformation_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AxisInformation>)>();

  void UA_XVType_init(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_init(
      p,
    );
  }

  late final _UA_XVType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_init');
  late final _UA_XVType_init =
      _UA_XVType_initPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  ffi.Pointer<UA_XVType> UA_XVType_new() {
    return _UA_XVType_new();
  }

  late final _UA_XVType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_XVType> Function()>>(
          'UA_XVType_new');
  late final _UA_XVType_new =
      _UA_XVType_newPtr.asFunction<ffi.Pointer<UA_XVType> Function()>();

  int UA_XVType_copy(
    ffi.Pointer<UA_XVType> src,
    ffi.Pointer<UA_XVType> dst,
  ) {
    return _UA_XVType_copy(
      src,
      dst,
    );
  }

  late final _UA_XVType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_XVType>,
              ffi.Pointer<UA_XVType>)>>('UA_XVType_copy');
  late final _UA_XVType_copy = _UA_XVType_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_XVType>, ffi.Pointer<UA_XVType>)>();

  void UA_XVType_deleteMembers(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_deleteMembers(
      p,
    );
  }

  late final _UA_XVType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_deleteMembers');
  late final _UA_XVType_deleteMembers = _UA_XVType_deleteMembersPtr.asFunction<
      void Function(ffi.Pointer<UA_XVType>)>();

  void UA_XVType_clear(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_clear(
      p,
    );
  }

  late final _UA_XVType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_clear');
  late final _UA_XVType_clear =
      _UA_XVType_clearPtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  void UA_XVType_delete(
    ffi.Pointer<UA_XVType> p,
  ) {
    return _UA_XVType_delete(
      p,
    );
  }

  late final _UA_XVType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_XVType>)>>(
          'UA_XVType_delete');
  late final _UA_XVType_delete =
      _UA_XVType_deletePtr.asFunction<void Function(ffi.Pointer<UA_XVType>)>();

  void UA_StructureDescription_init(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_init(
      p,
    );
  }

  late final _UA_StructureDescription_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_init');
  late final _UA_StructureDescription_init = _UA_StructureDescription_initPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  ffi.Pointer<UA_StructureDescription> UA_StructureDescription_new() {
    return _UA_StructureDescription_new();
  }

  late final _UA_StructureDescription_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_StructureDescription> Function()>>(
      'UA_StructureDescription_new');
  late final _UA_StructureDescription_new = _UA_StructureDescription_newPtr
      .asFunction<ffi.Pointer<UA_StructureDescription> Function()>();

  int UA_StructureDescription_copy(
    ffi.Pointer<UA_StructureDescription> src,
    ffi.Pointer<UA_StructureDescription> dst,
  ) {
    return _UA_StructureDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_StructureDescription_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_StructureDescription>,
                  ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_copy');
  late final _UA_StructureDescription_copy =
      _UA_StructureDescription_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_StructureDescription>,
              ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_deleteMembers(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_deleteMembers(
      p,
    );
  }

  late final _UA_StructureDescription_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_deleteMembers');
  late final _UA_StructureDescription_deleteMembers =
      _UA_StructureDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_clear(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_clear(
      p,
    );
  }

  late final _UA_StructureDescription_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_clear');
  late final _UA_StructureDescription_clear = _UA_StructureDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_StructureDescription_delete(
    ffi.Pointer<UA_StructureDescription> p,
  ) {
    return _UA_StructureDescription_delete(
      p,
    );
  }

  late final _UA_StructureDescription_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_StructureDescription>)>>(
      'UA_StructureDescription_delete');
  late final _UA_StructureDescription_delete =
      _UA_StructureDescription_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_StructureDescription>)>();

  void UA_FieldMetaData_init(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_init(
      p,
    );
  }

  late final _UA_FieldMetaData_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_init');
  late final _UA_FieldMetaData_init = _UA_FieldMetaData_initPtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  ffi.Pointer<UA_FieldMetaData> UA_FieldMetaData_new() {
    return _UA_FieldMetaData_new();
  }

  late final _UA_FieldMetaData_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_FieldMetaData> Function()>>(
          'UA_FieldMetaData_new');
  late final _UA_FieldMetaData_new = _UA_FieldMetaData_newPtr.asFunction<
      ffi.Pointer<UA_FieldMetaData> Function()>();

  int UA_FieldMetaData_copy(
    ffi.Pointer<UA_FieldMetaData> src,
    ffi.Pointer<UA_FieldMetaData> dst,
  ) {
    return _UA_FieldMetaData_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldMetaData_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_FieldMetaData>,
              ffi.Pointer<UA_FieldMetaData>)>>('UA_FieldMetaData_copy');
  late final _UA_FieldMetaData_copy = _UA_FieldMetaData_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_FieldMetaData>, ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_deleteMembers(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_deleteMembers(
      p,
    );
  }

  late final _UA_FieldMetaData_deleteMembersPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_deleteMembers');
  late final _UA_FieldMetaData_deleteMembers =
      _UA_FieldMetaData_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_clear(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_clear(
      p,
    );
  }

  late final _UA_FieldMetaData_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_clear');
  late final _UA_FieldMetaData_clear = _UA_FieldMetaData_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_FieldMetaData_delete(
    ffi.Pointer<UA_FieldMetaData> p,
  ) {
    return _UA_FieldMetaData_delete(
      p,
    );
  }

  late final _UA_FieldMetaData_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_FieldMetaData>)>>(
      'UA_FieldMetaData_delete');
  late final _UA_FieldMetaData_delete = _UA_FieldMetaData_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_FieldMetaData>)>();

  void UA_PublishedEventsDataType_init(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_init(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_init');
  late final _UA_PublishedEventsDataType_init =
      _UA_PublishedEventsDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  ffi.Pointer<UA_PublishedEventsDataType> UA_PublishedEventsDataType_new() {
    return _UA_PublishedEventsDataType_new();
  }

  late final _UA_PublishedEventsDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PublishedEventsDataType> Function()>>(
      'UA_PublishedEventsDataType_new');
  late final _UA_PublishedEventsDataType_new =
      _UA_PublishedEventsDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedEventsDataType> Function()>();

  int UA_PublishedEventsDataType_copy(
    ffi.Pointer<UA_PublishedEventsDataType> src,
    ffi.Pointer<UA_PublishedEventsDataType> dst,
  ) {
    return _UA_PublishedEventsDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedEventsDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedEventsDataType>,
                  ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_copy');
  late final _UA_PublishedEventsDataType_copy =
      _UA_PublishedEventsDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedEventsDataType>,
              ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_deleteMembers(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_deleteMembers');
  late final _UA_PublishedEventsDataType_deleteMembers =
      _UA_PublishedEventsDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_clear(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_clear(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_clear');
  late final _UA_PublishedEventsDataType_clear =
      _UA_PublishedEventsDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_PublishedEventsDataType_delete(
    ffi.Pointer<UA_PublishedEventsDataType> p,
  ) {
    return _UA_PublishedEventsDataType_delete(
      p,
    );
  }

  late final _UA_PublishedEventsDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedEventsDataType>)>>(
      'UA_PublishedEventsDataType_delete');
  late final _UA_PublishedEventsDataType_delete =
      _UA_PublishedEventsDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedEventsDataType>)>();

  void UA_WriterGroupDataType_init(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_init(
      p,
    );
  }

  late final _UA_WriterGroupDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_init');
  late final _UA_WriterGroupDataType_init = _UA_WriterGroupDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  ffi.Pointer<UA_WriterGroupDataType> UA_WriterGroupDataType_new() {
    return _UA_WriterGroupDataType_new();
  }

  late final _UA_WriterGroupDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>>(
      'UA_WriterGroupDataType_new');
  late final _UA_WriterGroupDataType_new = _UA_WriterGroupDataType_newPtr
      .asFunction<ffi.Pointer<UA_WriterGroupDataType> Function()>();

  int UA_WriterGroupDataType_copy(
    ffi.Pointer<UA_WriterGroupDataType> src,
    ffi.Pointer<UA_WriterGroupDataType> dst,
  ) {
    return _UA_WriterGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_WriterGroupDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_WriterGroupDataType>,
                  ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_copy');
  late final _UA_WriterGroupDataType_copy =
      _UA_WriterGroupDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_WriterGroupDataType>,
              ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_deleteMembers(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_deleteMembers(
      p,
    );
  }

  late final _UA_WriterGroupDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_deleteMembers');
  late final _UA_WriterGroupDataType_deleteMembers =
      _UA_WriterGroupDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_clear(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_clear(
      p,
    );
  }

  late final _UA_WriterGroupDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_clear');
  late final _UA_WriterGroupDataType_clear = _UA_WriterGroupDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_WriterGroupDataType_delete(
    ffi.Pointer<UA_WriterGroupDataType> p,
  ) {
    return _UA_WriterGroupDataType_delete(
      p,
    );
  }

  late final _UA_WriterGroupDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupDataType>)>>(
      'UA_WriterGroupDataType_delete');
  late final _UA_WriterGroupDataType_delete = _UA_WriterGroupDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupDataType>)>();

  void UA_FieldTargetDataType_init(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_init(
      p,
    );
  }

  late final _UA_FieldTargetDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_init');
  late final _UA_FieldTargetDataType_init = _UA_FieldTargetDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  ffi.Pointer<UA_FieldTargetDataType> UA_FieldTargetDataType_new() {
    return _UA_FieldTargetDataType_new();
  }

  late final _UA_FieldTargetDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>>(
      'UA_FieldTargetDataType_new');
  late final _UA_FieldTargetDataType_new = _UA_FieldTargetDataType_newPtr
      .asFunction<ffi.Pointer<UA_FieldTargetDataType> Function()>();

  int UA_FieldTargetDataType_copy(
    ffi.Pointer<UA_FieldTargetDataType> src,
    ffi.Pointer<UA_FieldTargetDataType> dst,
  ) {
    return _UA_FieldTargetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldTargetDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FieldTargetDataType>,
                  ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_copy');
  late final _UA_FieldTargetDataType_copy =
      _UA_FieldTargetDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FieldTargetDataType>,
              ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_deleteMembers(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_deleteMembers(
      p,
    );
  }

  late final _UA_FieldTargetDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_deleteMembers');
  late final _UA_FieldTargetDataType_deleteMembers =
      _UA_FieldTargetDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_clear(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_clear(
      p,
    );
  }

  late final _UA_FieldTargetDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_clear');
  late final _UA_FieldTargetDataType_clear = _UA_FieldTargetDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_FieldTargetDataType_delete(
    ffi.Pointer<UA_FieldTargetDataType> p,
  ) {
    return _UA_FieldTargetDataType_delete(
      p,
    );
  }

  late final _UA_FieldTargetDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_FieldTargetDataType>)>>(
      'UA_FieldTargetDataType_delete');
  late final _UA_FieldTargetDataType_delete = _UA_FieldTargetDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_FieldTargetDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_init(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_init(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_init');
  late final _UA_SubscribedDataSetMirrorDataType_init =
      _UA_SubscribedDataSetMirrorDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>
      UA_SubscribedDataSetMirrorDataType_new() {
    return _UA_SubscribedDataSetMirrorDataType_new();
  }

  late final _UA_SubscribedDataSetMirrorDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_SubscribedDataSetMirrorDataType>
              Function()>>('UA_SubscribedDataSetMirrorDataType_new');
  late final _UA_SubscribedDataSetMirrorDataType_new =
      _UA_SubscribedDataSetMirrorDataType_newPtr.asFunction<
          ffi.Pointer<UA_SubscribedDataSetMirrorDataType> Function()>();

  int UA_SubscribedDataSetMirrorDataType_copy(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> src,
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> dst,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_copy');
  late final _UA_SubscribedDataSetMirrorDataType_copy =
      _UA_SubscribedDataSetMirrorDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>,
              ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_deleteMembers(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_deleteMembers(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_deleteMembers');
  late final _UA_SubscribedDataSetMirrorDataType_deleteMembers =
      _UA_SubscribedDataSetMirrorDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_clear(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_clear(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_clear');
  late final _UA_SubscribedDataSetMirrorDataType_clear =
      _UA_SubscribedDataSetMirrorDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_SubscribedDataSetMirrorDataType_delete(
    ffi.Pointer<UA_SubscribedDataSetMirrorDataType> p,
  ) {
    return _UA_SubscribedDataSetMirrorDataType_delete(
      p,
    );
  }

  late final _UA_SubscribedDataSetMirrorDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>>(
      'UA_SubscribedDataSetMirrorDataType_delete');
  late final _UA_SubscribedDataSetMirrorDataType_delete =
      _UA_SubscribedDataSetMirrorDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_SubscribedDataSetMirrorDataType>)>();

  void UA_EnumDefinition_init(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_init(
      p,
    );
  }

  late final _UA_EnumDefinition_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_init');
  late final _UA_EnumDefinition_init = _UA_EnumDefinition_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDefinition>)>();

  ffi.Pointer<UA_EnumDefinition> UA_EnumDefinition_new() {
    return _UA_EnumDefinition_new();
  }

  late final _UA_EnumDefinition_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDefinition> Function()>>(
          'UA_EnumDefinition_new');
  late final _UA_EnumDefinition_new = _UA_EnumDefinition_newPtr.asFunction<
      ffi.Pointer<UA_EnumDefinition> Function()>();

  int UA_EnumDefinition_copy(
    ffi.Pointer<UA_EnumDefinition> src,
    ffi.Pointer<UA_EnumDefinition> dst,
  ) {
    return _UA_EnumDefinition_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDefinition_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumDefinition>,
              ffi.Pointer<UA_EnumDefinition>)>>('UA_EnumDefinition_copy');
  late final _UA_EnumDefinition_copy = _UA_EnumDefinition_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumDefinition>, ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_deleteMembers(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_deleteMembers(
      p,
    );
  }

  late final _UA_EnumDefinition_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_deleteMembers');
  late final _UA_EnumDefinition_deleteMembers =
      _UA_EnumDefinition_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_clear(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_clear(
      p,
    );
  }

  late final _UA_EnumDefinition_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_clear');
  late final _UA_EnumDefinition_clear = _UA_EnumDefinition_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_EnumDefinition_delete(
    ffi.Pointer<UA_EnumDefinition> p,
  ) {
    return _UA_EnumDefinition_delete(
      p,
    );
  }

  late final _UA_EnumDefinition_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDefinition>)>>(
      'UA_EnumDefinition_delete');
  late final _UA_EnumDefinition_delete = _UA_EnumDefinition_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDefinition>)>();

  void UA_DataChangeNotification_init(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_init(
      p,
    );
  }

  late final _UA_DataChangeNotification_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_init');
  late final _UA_DataChangeNotification_init =
      _UA_DataChangeNotification_initPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  ffi.Pointer<UA_DataChangeNotification> UA_DataChangeNotification_new() {
    return _UA_DataChangeNotification_new();
  }

  late final _UA_DataChangeNotification_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_DataChangeNotification> Function()>>(
      'UA_DataChangeNotification_new');
  late final _UA_DataChangeNotification_new = _UA_DataChangeNotification_newPtr
      .asFunction<ffi.Pointer<UA_DataChangeNotification> Function()>();

  int UA_DataChangeNotification_copy(
    ffi.Pointer<UA_DataChangeNotification> src,
    ffi.Pointer<UA_DataChangeNotification> dst,
  ) {
    return _UA_DataChangeNotification_copy(
      src,
      dst,
    );
  }

  late final _UA_DataChangeNotification_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataChangeNotification>,
                  ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_copy');
  late final _UA_DataChangeNotification_copy =
      _UA_DataChangeNotification_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataChangeNotification>,
              ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_deleteMembers(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_deleteMembers(
      p,
    );
  }

  late final _UA_DataChangeNotification_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_deleteMembers');
  late final _UA_DataChangeNotification_deleteMembers =
      _UA_DataChangeNotification_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_clear(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_clear(
      p,
    );
  }

  late final _UA_DataChangeNotification_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_clear');
  late final _UA_DataChangeNotification_clear =
      _UA_DataChangeNotification_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_DataChangeNotification_delete(
    ffi.Pointer<UA_DataChangeNotification> p,
  ) {
    return _UA_DataChangeNotification_delete(
      p,
    );
  }

  late final _UA_DataChangeNotification_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataChangeNotification>)>>(
      'UA_DataChangeNotification_delete');
  late final _UA_DataChangeNotification_delete =
      _UA_DataChangeNotification_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataChangeNotification>)>();

  void UA_EventNotificationList_init(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_init(
      p,
    );
  }

  late final _UA_EventNotificationList_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_init');
  late final _UA_EventNotificationList_init = _UA_EventNotificationList_initPtr
      .asFunction<void Function(ffi.Pointer<UA_EventNotificationList>)>();

  ffi.Pointer<UA_EventNotificationList> UA_EventNotificationList_new() {
    return _UA_EventNotificationList_new();
  }

  late final _UA_EventNotificationList_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_EventNotificationList> Function()>>(
      'UA_EventNotificationList_new');
  late final _UA_EventNotificationList_new = _UA_EventNotificationList_newPtr
      .asFunction<ffi.Pointer<UA_EventNotificationList> Function()>();

  int UA_EventNotificationList_copy(
    ffi.Pointer<UA_EventNotificationList> src,
    ffi.Pointer<UA_EventNotificationList> dst,
  ) {
    return _UA_EventNotificationList_copy(
      src,
      dst,
    );
  }

  late final _UA_EventNotificationList_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_EventNotificationList>,
                  ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_copy');
  late final _UA_EventNotificationList_copy =
      _UA_EventNotificationList_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_EventNotificationList>,
              ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_deleteMembers(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_deleteMembers(
      p,
    );
  }

  late final _UA_EventNotificationList_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_deleteMembers');
  late final _UA_EventNotificationList_deleteMembers =
      _UA_EventNotificationList_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_clear(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_clear(
      p,
    );
  }

  late final _UA_EventNotificationList_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_clear');
  late final _UA_EventNotificationList_clear =
      _UA_EventNotificationList_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EventNotificationList_delete(
    ffi.Pointer<UA_EventNotificationList> p,
  ) {
    return _UA_EventNotificationList_delete(
      p,
    );
  }

  late final _UA_EventNotificationList_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_EventNotificationList>)>>(
      'UA_EventNotificationList_delete');
  late final _UA_EventNotificationList_delete =
      _UA_EventNotificationList_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_EventNotificationList>)>();

  void UA_EnumDescription_init(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_init(
      p,
    );
  }

  late final _UA_EnumDescription_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_init');
  late final _UA_EnumDescription_init = _UA_EnumDescription_initPtr.asFunction<
      void Function(ffi.Pointer<UA_EnumDescription>)>();

  ffi.Pointer<UA_EnumDescription> UA_EnumDescription_new() {
    return _UA_EnumDescription_new();
  }

  late final _UA_EnumDescription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_EnumDescription> Function()>>(
          'UA_EnumDescription_new');
  late final _UA_EnumDescription_new = _UA_EnumDescription_newPtr.asFunction<
      ffi.Pointer<UA_EnumDescription> Function()>();

  int UA_EnumDescription_copy(
    ffi.Pointer<UA_EnumDescription> src,
    ffi.Pointer<UA_EnumDescription> dst,
  ) {
    return _UA_EnumDescription_copy(
      src,
      dst,
    );
  }

  late final _UA_EnumDescription_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_EnumDescription>,
              ffi.Pointer<UA_EnumDescription>)>>('UA_EnumDescription_copy');
  late final _UA_EnumDescription_copy = _UA_EnumDescription_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_EnumDescription>, ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_deleteMembers(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_deleteMembers(
      p,
    );
  }

  late final _UA_EnumDescription_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_deleteMembers');
  late final _UA_EnumDescription_deleteMembers =
      _UA_EnumDescription_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_clear(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_clear(
      p,
    );
  }

  late final _UA_EnumDescription_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_clear');
  late final _UA_EnumDescription_clear = _UA_EnumDescription_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_EnumDescription_delete(
    ffi.Pointer<UA_EnumDescription> p,
  ) {
    return _UA_EnumDescription_delete(
      p,
    );
  }

  late final _UA_EnumDescription_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_EnumDescription>)>>(
      'UA_EnumDescription_delete');
  late final _UA_EnumDescription_delete = _UA_EnumDescription_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_EnumDescription>)>();

  void UA_UABinaryFileDataType_init(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_init(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_init');
  late final _UA_UABinaryFileDataType_init = _UA_UABinaryFileDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  ffi.Pointer<UA_UABinaryFileDataType> UA_UABinaryFileDataType_new() {
    return _UA_UABinaryFileDataType_new();
  }

  late final _UA_UABinaryFileDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>>(
      'UA_UABinaryFileDataType_new');
  late final _UA_UABinaryFileDataType_new = _UA_UABinaryFileDataType_newPtr
      .asFunction<ffi.Pointer<UA_UABinaryFileDataType> Function()>();

  int UA_UABinaryFileDataType_copy(
    ffi.Pointer<UA_UABinaryFileDataType> src,
    ffi.Pointer<UA_UABinaryFileDataType> dst,
  ) {
    return _UA_UABinaryFileDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_UABinaryFileDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_UABinaryFileDataType>,
                  ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_copy');
  late final _UA_UABinaryFileDataType_copy =
      _UA_UABinaryFileDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_UABinaryFileDataType>,
              ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_deleteMembers(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_deleteMembers(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_deleteMembers');
  late final _UA_UABinaryFileDataType_deleteMembers =
      _UA_UABinaryFileDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_clear(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_clear(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_clear');
  late final _UA_UABinaryFileDataType_clear = _UA_UABinaryFileDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_UABinaryFileDataType_delete(
    ffi.Pointer<UA_UABinaryFileDataType> p,
  ) {
    return _UA_UABinaryFileDataType_delete(
      p,
    );
  }

  late final _UA_UABinaryFileDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_UABinaryFileDataType>)>>(
      'UA_UABinaryFileDataType_delete');
  late final _UA_UABinaryFileDataType_delete =
      _UA_UABinaryFileDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_UABinaryFileDataType>)>();

  void UA_DataSetMetaDataType_init(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_init(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_init');
  late final _UA_DataSetMetaDataType_init = _UA_DataSetMetaDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  ffi.Pointer<UA_DataSetMetaDataType> UA_DataSetMetaDataType_new() {
    return _UA_DataSetMetaDataType_new();
  }

  late final _UA_DataSetMetaDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>>(
      'UA_DataSetMetaDataType_new');
  late final _UA_DataSetMetaDataType_new = _UA_DataSetMetaDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetMetaDataType> Function()>();

  int UA_DataSetMetaDataType_copy(
    ffi.Pointer<UA_DataSetMetaDataType> src,
    ffi.Pointer<UA_DataSetMetaDataType> dst,
  ) {
    return _UA_DataSetMetaDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetMetaDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetMetaDataType>,
                  ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_copy');
  late final _UA_DataSetMetaDataType_copy =
      _UA_DataSetMetaDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMetaDataType>,
              ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_deleteMembers(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_deleteMembers');
  late final _UA_DataSetMetaDataType_deleteMembers =
      _UA_DataSetMetaDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_clear(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_clear(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_clear');
  late final _UA_DataSetMetaDataType_clear = _UA_DataSetMetaDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_DataSetMetaDataType_delete(
    ffi.Pointer<UA_DataSetMetaDataType> p,
  ) {
    return _UA_DataSetMetaDataType_delete(
      p,
    );
  }

  late final _UA_DataSetMetaDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_DataSetMetaDataType_delete');
  late final _UA_DataSetMetaDataType_delete = _UA_DataSetMetaDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetMetaDataType>)>();

  void UA_PublishedDataSetDataType_init(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_init(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_init');
  late final _UA_PublishedDataSetDataType_init =
      _UA_PublishedDataSetDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  ffi.Pointer<UA_PublishedDataSetDataType> UA_PublishedDataSetDataType_new() {
    return _UA_PublishedDataSetDataType_new();
  }

  late final _UA_PublishedDataSetDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PublishedDataSetDataType> Function()>>(
      'UA_PublishedDataSetDataType_new');
  late final _UA_PublishedDataSetDataType_new =
      _UA_PublishedDataSetDataType_newPtr.asFunction<
          ffi.Pointer<UA_PublishedDataSetDataType> Function()>();

  int UA_PublishedDataSetDataType_copy(
    ffi.Pointer<UA_PublishedDataSetDataType> src,
    ffi.Pointer<UA_PublishedDataSetDataType> dst,
  ) {
    return _UA_PublishedDataSetDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataSetDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedDataSetDataType>,
                  ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_copy');
  late final _UA_PublishedDataSetDataType_copy =
      _UA_PublishedDataSetDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataSetDataType>,
              ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_deleteMembers(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_deleteMembers');
  late final _UA_PublishedDataSetDataType_deleteMembers =
      _UA_PublishedDataSetDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_clear(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_clear(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_clear');
  late final _UA_PublishedDataSetDataType_clear =
      _UA_PublishedDataSetDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_PublishedDataSetDataType_delete(
    ffi.Pointer<UA_PublishedDataSetDataType> p,
  ) {
    return _UA_PublishedDataSetDataType_delete(
      p,
    );
  }

  late final _UA_PublishedDataSetDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>>(
      'UA_PublishedDataSetDataType_delete');
  late final _UA_PublishedDataSetDataType_delete =
      _UA_PublishedDataSetDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetDataType>)>();

  void UA_DataSetReaderDataType_init(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_init(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_init');
  late final _UA_DataSetReaderDataType_init = _UA_DataSetReaderDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  ffi.Pointer<UA_DataSetReaderDataType> UA_DataSetReaderDataType_new() {
    return _UA_DataSetReaderDataType_new();
  }

  late final _UA_DataSetReaderDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>>(
      'UA_DataSetReaderDataType_new');
  late final _UA_DataSetReaderDataType_new = _UA_DataSetReaderDataType_newPtr
      .asFunction<ffi.Pointer<UA_DataSetReaderDataType> Function()>();

  int UA_DataSetReaderDataType_copy(
    ffi.Pointer<UA_DataSetReaderDataType> src,
    ffi.Pointer<UA_DataSetReaderDataType> dst,
  ) {
    return _UA_DataSetReaderDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetReaderDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetReaderDataType>,
                  ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_copy');
  late final _UA_DataSetReaderDataType_copy =
      _UA_DataSetReaderDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetReaderDataType>,
              ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_deleteMembers(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_deleteMembers(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_deleteMembers');
  late final _UA_DataSetReaderDataType_deleteMembers =
      _UA_DataSetReaderDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_clear(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_clear(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_clear');
  late final _UA_DataSetReaderDataType_clear =
      _UA_DataSetReaderDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_DataSetReaderDataType_delete(
    ffi.Pointer<UA_DataSetReaderDataType> p,
  ) {
    return _UA_DataSetReaderDataType_delete(
      p,
    );
  }

  late final _UA_DataSetReaderDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderDataType>)>>(
      'UA_DataSetReaderDataType_delete');
  late final _UA_DataSetReaderDataType_delete =
      _UA_DataSetReaderDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetReaderDataType>)>();

  void UA_TargetVariablesDataType_init(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_init(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_init');
  late final _UA_TargetVariablesDataType_init =
      _UA_TargetVariablesDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  ffi.Pointer<UA_TargetVariablesDataType> UA_TargetVariablesDataType_new() {
    return _UA_TargetVariablesDataType_new();
  }

  late final _UA_TargetVariablesDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_TargetVariablesDataType> Function()>>(
      'UA_TargetVariablesDataType_new');
  late final _UA_TargetVariablesDataType_new =
      _UA_TargetVariablesDataType_newPtr.asFunction<
          ffi.Pointer<UA_TargetVariablesDataType> Function()>();

  int UA_TargetVariablesDataType_copy(
    ffi.Pointer<UA_TargetVariablesDataType> src,
    ffi.Pointer<UA_TargetVariablesDataType> dst,
  ) {
    return _UA_TargetVariablesDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_TargetVariablesDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_TargetVariablesDataType>,
                  ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_copy');
  late final _UA_TargetVariablesDataType_copy =
      _UA_TargetVariablesDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TargetVariablesDataType>,
              ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_deleteMembers(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_deleteMembers(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_deleteMembers');
  late final _UA_TargetVariablesDataType_deleteMembers =
      _UA_TargetVariablesDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_clear(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_clear(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_clear');
  late final _UA_TargetVariablesDataType_clear =
      _UA_TargetVariablesDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_TargetVariablesDataType_delete(
    ffi.Pointer<UA_TargetVariablesDataType> p,
  ) {
    return _UA_TargetVariablesDataType_delete(
      p,
    );
  }

  late final _UA_TargetVariablesDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TargetVariablesDataType>)>>(
      'UA_TargetVariablesDataType_delete');
  late final _UA_TargetVariablesDataType_delete =
      _UA_TargetVariablesDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TargetVariablesDataType>)>();

  void UA_ReaderGroupDataType_init(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_init(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_init');
  late final _UA_ReaderGroupDataType_init = _UA_ReaderGroupDataType_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  ffi.Pointer<UA_ReaderGroupDataType> UA_ReaderGroupDataType_new() {
    return _UA_ReaderGroupDataType_new();
  }

  late final _UA_ReaderGroupDataType_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>>(
      'UA_ReaderGroupDataType_new');
  late final _UA_ReaderGroupDataType_new = _UA_ReaderGroupDataType_newPtr
      .asFunction<ffi.Pointer<UA_ReaderGroupDataType> Function()>();

  int UA_ReaderGroupDataType_copy(
    ffi.Pointer<UA_ReaderGroupDataType> src,
    ffi.Pointer<UA_ReaderGroupDataType> dst,
  ) {
    return _UA_ReaderGroupDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_ReaderGroupDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ReaderGroupDataType>,
                  ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_copy');
  late final _UA_ReaderGroupDataType_copy =
      _UA_ReaderGroupDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReaderGroupDataType>,
              ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_deleteMembers(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_deleteMembers(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_deleteMembers');
  late final _UA_ReaderGroupDataType_deleteMembers =
      _UA_ReaderGroupDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_clear(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_clear(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_clear');
  late final _UA_ReaderGroupDataType_clear = _UA_ReaderGroupDataType_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_ReaderGroupDataType_delete(
    ffi.Pointer<UA_ReaderGroupDataType> p,
  ) {
    return _UA_ReaderGroupDataType_delete(
      p,
    );
  }

  late final _UA_ReaderGroupDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupDataType>)>>(
      'UA_ReaderGroupDataType_delete');
  late final _UA_ReaderGroupDataType_delete = _UA_ReaderGroupDataType_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupDataType>)>();

  void UA_PubSubConnectionDataType_init(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_init(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_init');
  late final _UA_PubSubConnectionDataType_init =
      _UA_PubSubConnectionDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  ffi.Pointer<UA_PubSubConnectionDataType> UA_PubSubConnectionDataType_new() {
    return _UA_PubSubConnectionDataType_new();
  }

  late final _UA_PubSubConnectionDataType_newPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_PubSubConnectionDataType> Function()>>(
      'UA_PubSubConnectionDataType_new');
  late final _UA_PubSubConnectionDataType_new =
      _UA_PubSubConnectionDataType_newPtr.asFunction<
          ffi.Pointer<UA_PubSubConnectionDataType> Function()>();

  int UA_PubSubConnectionDataType_copy(
    ffi.Pointer<UA_PubSubConnectionDataType> src,
    ffi.Pointer<UA_PubSubConnectionDataType> dst,
  ) {
    return _UA_PubSubConnectionDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConnectionDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PubSubConnectionDataType>,
                  ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_copy');
  late final _UA_PubSubConnectionDataType_copy =
      _UA_PubSubConnectionDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubConnectionDataType>,
              ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_deleteMembers(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_deleteMembers');
  late final _UA_PubSubConnectionDataType_deleteMembers =
      _UA_PubSubConnectionDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_clear(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_clear');
  late final _UA_PubSubConnectionDataType_clear =
      _UA_PubSubConnectionDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConnectionDataType_delete(
    ffi.Pointer<UA_PubSubConnectionDataType> p,
  ) {
    return _UA_PubSubConnectionDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConnectionDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>>(
      'UA_PubSubConnectionDataType_delete');
  late final _UA_PubSubConnectionDataType_delete =
      _UA_PubSubConnectionDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionDataType>)>();

  void UA_PubSubConfigurationDataType_init(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_init(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_init');
  late final _UA_PubSubConfigurationDataType_init =
      _UA_PubSubConfigurationDataType_initPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  ffi.Pointer<UA_PubSubConfigurationDataType>
      UA_PubSubConfigurationDataType_new() {
    return _UA_PubSubConfigurationDataType_new();
  }

  late final _UA_PubSubConfigurationDataType_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PubSubConfigurationDataType>
              Function()>>('UA_PubSubConfigurationDataType_new');
  late final _UA_PubSubConfigurationDataType_new =
      _UA_PubSubConfigurationDataType_newPtr.asFunction<
          ffi.Pointer<UA_PubSubConfigurationDataType> Function()>();

  int UA_PubSubConfigurationDataType_copy(
    ffi.Pointer<UA_PubSubConfigurationDataType> src,
    ffi.Pointer<UA_PubSubConfigurationDataType> dst,
  ) {
    return _UA_PubSubConfigurationDataType_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConfigurationDataType_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubConfigurationDataType>,
                  ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_copy');
  late final _UA_PubSubConfigurationDataType_copy =
      _UA_PubSubConfigurationDataType_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubConfigurationDataType>,
              ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_deleteMembers(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_deleteMembers(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_deleteMembers');
  late final _UA_PubSubConfigurationDataType_deleteMembers =
      _UA_PubSubConfigurationDataType_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_clear(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_clear(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_clear');
  late final _UA_PubSubConfigurationDataType_clear =
      _UA_PubSubConfigurationDataType_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  void UA_PubSubConfigurationDataType_delete(
    ffi.Pointer<UA_PubSubConfigurationDataType> p,
  ) {
    return _UA_PubSubConfigurationDataType_delete(
      p,
    );
  }

  late final _UA_PubSubConfigurationDataType_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>>(
      'UA_PubSubConfigurationDataType_delete');
  late final _UA_PubSubConfigurationDataType_delete =
      _UA_PubSubConfigurationDataType_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConfigurationDataType>)>();

  /// Key Value Map
  /// -------------
  /// Helper functions to work with configuration parameters in an array of
  /// UA_KeyValuePair. Lookup is linear. So this is for small numbers of
  /// keys.
  int UA_KeyValueMap_setQualified(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<UA_QualifiedName> key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_KeyValueMap_setQualified(
      map,
      mapSize,
      key,
      value,
    );
  }

  late final _UA_KeyValueMap_setQualifiedPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_Variant>)>>('UA_KeyValueMap_setQualified');
  late final _UA_KeyValueMap_setQualified =
      _UA_KeyValueMap_setQualifiedPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<UA_Variant>)>();

  int UA_KeyValueMap_set(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_KeyValueMap_set(
      map,
      mapSize,
      key,
      value,
    );
  }

  late final _UA_KeyValueMap_setPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_KeyValueMap_set');
  late final _UA_KeyValueMap_set = _UA_KeyValueMap_setPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<UA_Variant>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getQualified(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<UA_QualifiedName> key,
  ) {
    return _UA_KeyValueMap_getQualified(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_getQualifiedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<UA_QualifiedName>)>>('UA_KeyValueMap_getQualified');
  late final _UA_KeyValueMap_getQualified =
      _UA_KeyValueMap_getQualifiedPtr.asFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
              ffi.Pointer<UA_QualifiedName>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_get(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _UA_KeyValueMap_get(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>,
              ffi.Size, ffi.Pointer<ffi.Char>)>>('UA_KeyValueMap_get');
  late final _UA_KeyValueMap_get = _UA_KeyValueMap_getPtr.asFunction<
      ffi.Pointer<UA_Variant> Function(
          ffi.Pointer<UA_KeyValuePair>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getScalar(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_getScalar(
      map,
      mapSize,
      key,
      type,
    );
  }

  late final _UA_KeyValueMap_getScalarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_getScalar');
  late final _UA_KeyValueMap_getScalar =
      _UA_KeyValueMap_getScalarPtr.asFunction<
          ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_DataType>)>();

  ffi.Pointer<UA_Variant> UA_KeyValueMap_getArray(
    ffi.Pointer<UA_KeyValuePair> map,
    int mapSize,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_KeyValueMap_getArray(
      map,
      mapSize,
      key,
      type,
    );
  }

  late final _UA_KeyValueMap_getArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Variant> Function(
              ffi.Pointer<UA_KeyValuePair>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>)>>('UA_KeyValueMap_getArray');
  late final _UA_KeyValueMap_getArray = _UA_KeyValueMap_getArrayPtr.asFunction<
      ffi.Pointer<UA_Variant> Function(ffi.Pointer<UA_KeyValuePair>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<UA_DataType>)>();

  void UA_KeyValueMap_deleteQualified(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<UA_QualifiedName> key,
  ) {
    return _UA_KeyValueMap_deleteQualified(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_deleteQualifiedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_KeyValueMap_deleteQualified');
  late final _UA_KeyValueMap_deleteQualified =
      _UA_KeyValueMap_deleteQualifiedPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<UA_QualifiedName>)>();

  void UA_KeyValueMap_delete(
    ffi.Pointer<ffi.Pointer<UA_KeyValuePair>> map,
    ffi.Pointer<ffi.Size> mapSize,
    ffi.Pointer<ffi.Char> key,
  ) {
    return _UA_KeyValueMap_delete(
      map,
      mapSize,
      key,
    );
  }

  late final _UA_KeyValueMap_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>)>>('UA_KeyValueMap_delete');
  late final _UA_KeyValueMap_delete = _UA_KeyValueMap_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<UA_KeyValuePair>>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>();

  int UA_parseEndpointUrl(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> outHostname,
    ffi.Pointer<UA_UInt16> outPort,
    ffi.Pointer<UA_String> outPath,
  ) {
    return _UA_parseEndpointUrl(
      endpointUrl,
      outHostname,
      outPort,
      outPath,
    );
  }

  late final _UA_parseEndpointUrlPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_String>)>>('UA_parseEndpointUrl');
  late final _UA_parseEndpointUrl = _UA_parseEndpointUrlPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>,
          ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_String>)>();

  int UA_parseEndpointUrlEthernet(
    ffi.Pointer<UA_String> endpointUrl,
    ffi.Pointer<UA_String> target,
    ffi.Pointer<UA_UInt16> vid,
    ffi.Pointer<UA_Byte> pcp,
  ) {
    return _UA_parseEndpointUrlEthernet(
      endpointUrl,
      target,
      vid,
      pcp,
    );
  }

  late final _UA_parseEndpointUrlEthernetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>,
              ffi.Pointer<UA_Byte>)>>('UA_parseEndpointUrlEthernet');
  late final _UA_parseEndpointUrlEthernet =
      _UA_parseEndpointUrlEthernetPtr.asFunction<
          int Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>, ffi.Pointer<UA_Byte>)>();

  int UA_readNumber(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
  ) {
    return _UA_readNumber(
      buf,
      buflen,
      number,
    );
  }

  late final _UA_readNumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size,
              ffi.Pointer<UA_UInt32>)>>('UA_readNumber');
  late final _UA_readNumber = _UA_readNumberPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>)>();

  int UA_readNumberWithBase(
    ffi.Pointer<UA_Byte> buf,
    int buflen,
    ffi.Pointer<UA_UInt32> number,
    int base,
  ) {
    return _UA_readNumberWithBase(
      buf,
      buflen,
      number,
      base,
    );
  }

  late final _UA_readNumberWithBasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<UA_Byte>, ffi.Size,
              ffi.Pointer<UA_UInt32>, UA_Byte)>>('UA_readNumberWithBase');
  late final _UA_readNumberWithBase = _UA_readNumberWithBasePtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, int, ffi.Pointer<UA_UInt32>, int)>();

  int UA_RelativePath_parse(
    ffi.Pointer<UA_RelativePath> rp,
    UA_String str,
  ) {
    return _UA_RelativePath_parse(
      rp,
      str,
    );
  }

  late final _UA_RelativePath_parsePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_RelativePath>,
              UA_String)>>('UA_RelativePath_parse');
  late final _UA_RelativePath_parse = _UA_RelativePath_parsePtr.asFunction<
      int Function(ffi.Pointer<UA_RelativePath>, UA_String)>();

  /// Helper functions for converting data types
  /// ------------------------------------------
  bool UA_constantTimeEqual(
    ffi.Pointer<ffi.Void> ptr1,
    ffi.Pointer<ffi.Void> ptr2,
    int length,
  ) {
    return _UA_constantTimeEqual(
      ptr1,
      ptr2,
      length,
    );
  }

  late final _UA_constantTimeEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('UA_constantTimeEqual');
  late final _UA_constantTimeEqual = _UA_constantTimeEqualPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void UA_LOG_TRACE(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_TRACE(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_TRACEPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_TRACE');
  late final _UA_LOG_TRACE = _UA_LOG_TRACEPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_DEBUG(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_DEBUG(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_DEBUGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_DEBUG');
  late final _UA_LOG_DEBUG = _UA_LOG_DEBUGPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_INFO(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_INFO(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_INFOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_INFO');
  late final _UA_LOG_INFO = _UA_LOG_INFOPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_WARNING(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_WARNING(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_WARNINGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_WARNING');
  late final _UA_LOG_WARNING = _UA_LOG_WARNINGPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_ERROR(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_ERROR(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_ERRORPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_ERROR');
  late final _UA_LOG_ERROR = _UA_LOG_ERRORPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  void UA_LOG_FATAL(
    ffi.Pointer<UA_Logger> logger,
    int category,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _UA_LOG_FATAL(
      logger,
      category,
      msg,
    );
  }

  late final _UA_LOG_FATALPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Logger>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('UA_LOG_FATAL');
  late final _UA_LOG_FATAL = _UA_LOG_FATALPtr.asFunction<
      void Function(ffi.Pointer<UA_Logger>, int, ffi.Pointer<ffi.Char>)>();

  /// Server Network Layer
  /// --------------------
  /// The server exposes two functions to interact with remote clients:
  /// `processBinaryMessage` and `removeConnection`. These functions are called by
  /// the server network layer.
  ///
  /// It is the job of the server network layer to listen on a TCP socket, to
  /// accept new connections, to call the server with received messages and to
  /// signal closed connections to the server.
  ///
  /// The network layer is part of the server config. So users can provide a custom
  /// implementation if the provided example does not fit their architecture. The
  /// network layer is invoked only from the server's main loop. So the network
  /// layer does not need to be thread-safe. If the network layer receives a
  /// positive duration for blocking listening, the server's main loop will block
  /// until a message is received or the duration times out.
  void UA_Server_processBinaryMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Connection> connection,
    ffi.Pointer<UA_ByteString> message,
  ) {
    return _UA_Server_processBinaryMessage(
      server,
      connection,
      message,
    );
  }

  late final _UA_Server_processBinaryMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_processBinaryMessage');
  late final _UA_Server_processBinaryMessage =
      _UA_Server_processBinaryMessagePtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>,
              ffi.Pointer<UA_ByteString>)>();

  void UA_Server_removeConnection(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Connection> connection,
  ) {
    return _UA_Server_removeConnection(
      server,
      connection,
    );
  }

  late final _UA_Server_removeConnectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Connection>)>>('UA_Server_removeConnection');
  late final _UA_Server_removeConnection =
      _UA_Server_removeConnectionPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>)>();

  /// amalgamated original file "/include/open62541/plugin/securitypolicy.h"
  late final ffi.Pointer<UA_String> _UA_SECURITY_POLICY_NONE_URI =
      _lookup<UA_String>('UA_SECURITY_POLICY_NONE_URI');

  UA_String get UA_SECURITY_POLICY_NONE_URI => _UA_SECURITY_POLICY_NONE_URI.ref;

  void UA_ReferenceTypeSet_init(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
  ) {
    return _UA_ReferenceTypeSet_init(
      set1,
    );
  }

  late final _UA_ReferenceTypeSet_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_ReferenceTypeSet_init');
  late final _UA_ReferenceTypeSet_init = _UA_ReferenceTypeSet_initPtr
      .asFunction<void Function(ffi.Pointer<UA_ReferenceTypeSet>)>();

  void UA_ReferenceTypeSet_any(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
  ) {
    return _UA_ReferenceTypeSet_any(
      set1,
    );
  }

  late final _UA_ReferenceTypeSet_anyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_ReferenceTypeSet_any');
  late final _UA_ReferenceTypeSet_any = _UA_ReferenceTypeSet_anyPtr.asFunction<
      void Function(ffi.Pointer<UA_ReferenceTypeSet>)>();

  UA_ReferenceTypeSet UA_REFTYPESET(
    int index,
  ) {
    return _UA_REFTYPESET(
      index,
    );
  }

  late final _UA_REFTYPESETPtr =
      _lookup<ffi.NativeFunction<UA_ReferenceTypeSet Function(UA_Byte)>>(
          'UA_REFTYPESET');
  late final _UA_REFTYPESET =
      _UA_REFTYPESETPtr.asFunction<UA_ReferenceTypeSet Function(int)>();

  UA_ReferenceTypeSet UA_ReferenceTypeSet_union(
    UA_ReferenceTypeSet setA,
    UA_ReferenceTypeSet setB,
  ) {
    return _UA_ReferenceTypeSet_union(
      setA,
      setB,
    );
  }

  late final _UA_ReferenceTypeSet_unionPtr = _lookup<
      ffi.NativeFunction<
          UA_ReferenceTypeSet Function(UA_ReferenceTypeSet,
              UA_ReferenceTypeSet)>>('UA_ReferenceTypeSet_union');
  late final _UA_ReferenceTypeSet_union =
      _UA_ReferenceTypeSet_unionPtr.asFunction<
          UA_ReferenceTypeSet Function(
              UA_ReferenceTypeSet, UA_ReferenceTypeSet)>();

  bool UA_ReferenceTypeSet_contains(
    ffi.Pointer<UA_ReferenceTypeSet> set1,
    int index,
  ) {
    return _UA_ReferenceTypeSet_contains(
      set1,
      index,
    );
  }

  late final _UA_ReferenceTypeSet_containsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_ReferenceTypeSet>,
              UA_Byte)>>('UA_ReferenceTypeSet_contains');
  late final _UA_ReferenceTypeSet_contains = _UA_ReferenceTypeSet_containsPtr
      .asFunction<bool Function(ffi.Pointer<UA_ReferenceTypeSet>, int)>();

  void UA_NodePointer_init(
    ffi.Pointer<UA_NodePointer> np,
  ) {
    return _UA_NodePointer_init(
      np,
    );
  }

  late final _UA_NodePointer_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodePointer>)>>(
      'UA_NodePointer_init');
  late final _UA_NodePointer_init = _UA_NodePointer_initPtr.asFunction<
      void Function(ffi.Pointer<UA_NodePointer>)>();

  void UA_NodePointer_clear(
    ffi.Pointer<UA_NodePointer> np,
  ) {
    return _UA_NodePointer_clear(
      np,
    );
  }

  late final _UA_NodePointer_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_NodePointer>)>>(
      'UA_NodePointer_clear');
  late final _UA_NodePointer_clear = _UA_NodePointer_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_NodePointer>)>();

  int UA_NodePointer_copy(
    UA_NodePointer in1,
    ffi.Pointer<UA_NodePointer> out,
  ) {
    return _UA_NodePointer_copy(
      in1,
      out,
    );
  }

  late final _UA_NodePointer_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(UA_NodePointer,
              ffi.Pointer<UA_NodePointer>)>>('UA_NodePointer_copy');
  late final _UA_NodePointer_copy = _UA_NodePointer_copyPtr.asFunction<
      int Function(UA_NodePointer, ffi.Pointer<UA_NodePointer>)>();

  bool UA_NodePointer_isLocal(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_isLocal(
      np,
    );
  }

  late final _UA_NodePointer_isLocalPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(UA_NodePointer)>>(
          'UA_NodePointer_isLocal');
  late final _UA_NodePointer_isLocal =
      _UA_NodePointer_isLocalPtr.asFunction<bool Function(UA_NodePointer)>();

  int UA_NodePointer_order(
    UA_NodePointer p1,
    UA_NodePointer p2,
  ) {
    return _UA_NodePointer_order(
      p1,
      p2,
    );
  }

  late final _UA_NodePointer_orderPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(UA_NodePointer, UA_NodePointer)>>(
      'UA_NodePointer_order');
  late final _UA_NodePointer_order = _UA_NodePointer_orderPtr.asFunction<
      int Function(UA_NodePointer, UA_NodePointer)>();

  bool UA_NodePointer_equal(
    UA_NodePointer p1,
    UA_NodePointer p2,
  ) {
    return _UA_NodePointer_equal(
      p1,
      p2,
    );
  }

  late final _UA_NodePointer_equalPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(UA_NodePointer, UA_NodePointer)>>(
      'UA_NodePointer_equal');
  late final _UA_NodePointer_equal = _UA_NodePointer_equalPtr.asFunction<
      bool Function(UA_NodePointer, UA_NodePointer)>();

  UA_NodePointer UA_NodePointer_fromNodeId(
    ffi.Pointer<UA_NodeId> id,
  ) {
    return _UA_NodePointer_fromNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromNodeIdPtr = _lookup<
          ffi.NativeFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>>(
      'UA_NodePointer_fromNodeId');
  late final _UA_NodePointer_fromNodeId = _UA_NodePointer_fromNodeIdPtr
      .asFunction<UA_NodePointer Function(ffi.Pointer<UA_NodeId>)>();

  UA_NodePointer UA_NodePointer_fromExpandedNodeId(
    ffi.Pointer<UA_ExpandedNodeId> id,
  ) {
    return _UA_NodePointer_fromExpandedNodeId(
      id,
    );
  }

  late final _UA_NodePointer_fromExpandedNodeIdPtr = _lookup<
          ffi.NativeFunction<
              UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_NodePointer_fromExpandedNodeId');
  late final _UA_NodePointer_fromExpandedNodeId =
      _UA_NodePointer_fromExpandedNodeIdPtr.asFunction<
          UA_NodePointer Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  UA_ExpandedNodeId UA_NodePointer_toExpandedNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toExpandedNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toExpandedNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_ExpandedNodeId Function(UA_NodePointer)>>(
          'UA_NodePointer_toExpandedNodeId');
  late final _UA_NodePointer_toExpandedNodeId =
      _UA_NodePointer_toExpandedNodeIdPtr.asFunction<
          UA_ExpandedNodeId Function(UA_NodePointer)>();

  UA_NodeId UA_NodePointer_toNodeId(
    UA_NodePointer np,
  ) {
    return _UA_NodePointer_toNodeId(
      np,
    );
  }

  late final _UA_NodePointer_toNodeIdPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(UA_NodePointer)>>(
          'UA_NodePointer_toNodeId');
  late final _UA_NodePointer_toNodeId = _UA_NodePointer_toNodeIdPtr.asFunction<
      UA_NodeId Function(UA_NodePointer)>();

  ffi.Pointer<UA_ReferenceTarget> UA_NodeReferenceKind_iterate(
    ffi.Pointer<UA_NodeReferenceKind> rk,
    ffi.Pointer<UA_ReferenceTarget> prev,
  ) {
    return _UA_NodeReferenceKind_iterate(
      rk,
      prev,
    );
  }

  late final _UA_NodeReferenceKind_iteratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UA_ReferenceTarget> Function(
                  ffi.Pointer<UA_NodeReferenceKind>,
                  ffi.Pointer<UA_ReferenceTarget>)>>(
      'UA_NodeReferenceKind_iterate');
  late final _UA_NodeReferenceKind_iterate =
      _UA_NodeReferenceKind_iteratePtr.asFunction<
          ffi.Pointer<UA_ReferenceTarget> Function(
              ffi.Pointer<UA_NodeReferenceKind>,
              ffi.Pointer<UA_ReferenceTarget>)>();

  int UA_NodeReferenceKind_switch(
    ffi.Pointer<UA_NodeReferenceKind> rk,
  ) {
    return _UA_NodeReferenceKind_switch(
      rk,
    );
  }

  late final _UA_NodeReferenceKind_switchPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NodeReferenceKind>)>>(
      'UA_NodeReferenceKind_switch');
  late final _UA_NodeReferenceKind_switch = _UA_NodeReferenceKind_switchPtr
      .asFunction<int Function(ffi.Pointer<UA_NodeReferenceKind>)>();

  int UA_Node_setAttributes(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<ffi.Void> attributes,
    ffi.Pointer<UA_DataType> attributeType,
  ) {
    return _UA_Node_setAttributes(
      node,
      attributes,
      attributeType,
    );
  }

  late final _UA_Node_setAttributesPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_Node_setAttributes');
  late final _UA_Node_setAttributes = _UA_Node_setAttributesPtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>)>();

  int UA_Node_copy(
    ffi.Pointer<UA_Node> src,
    ffi.Pointer<UA_Node> dst,
  ) {
    return _UA_Node_copy(
      src,
      dst,
    );
  }

  late final _UA_Node_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>>('UA_Node_copy');
  late final _UA_Node_copy = _UA_Node_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, ffi.Pointer<UA_Node>)>();

  ffi.Pointer<UA_Node> UA_Node_copy_alloc(
    ffi.Pointer<UA_Node> src,
  ) {
    return _UA_Node_copy_alloc(
      src,
    );
  }

  late final _UA_Node_copy_allocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>>(
      'UA_Node_copy_alloc');
  late final _UA_Node_copy_alloc = _UA_Node_copy_allocPtr.asFunction<
      ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Node>)>();

  int UA_Node_addReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
    int targetBrowseNameHash,
  ) {
    return _UA_Node_addReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
      targetBrowseNameHash,
    );
  }

  late final _UA_Node_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Node>,
              UA_Byte,
              ffi.Bool,
              ffi.Pointer<UA_ExpandedNodeId>,
              UA_UInt32)>>('UA_Node_addReference');
  late final _UA_Node_addReference = _UA_Node_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Node>, int, bool,
          ffi.Pointer<UA_ExpandedNodeId>, int)>();

  int UA_Node_deleteReference(
    ffi.Pointer<UA_Node> node,
    int refTypeIndex,
    bool isForward,
    ffi.Pointer<UA_ExpandedNodeId> targetNodeId,
  ) {
    return _UA_Node_deleteReference(
      node,
      refTypeIndex,
      isForward,
      targetNodeId,
    );
  }

  late final _UA_Node_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Node>, UA_Byte, ffi.Bool,
              ffi.Pointer<UA_ExpandedNodeId>)>>('UA_Node_deleteReference');
  late final _UA_Node_deleteReference = _UA_Node_deleteReferencePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Node>, int, bool, ffi.Pointer<UA_ExpandedNodeId>)>();

  void UA_Node_deleteReferencesSubset(
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<UA_ReferenceTypeSet> keepSet,
  ) {
    return _UA_Node_deleteReferencesSubset(
      node,
      keepSet,
    );
  }

  late final _UA_Node_deleteReferencesSubsetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>>(
      'UA_Node_deleteReferencesSubset');
  late final _UA_Node_deleteReferencesSubset =
      _UA_Node_deleteReferencesSubsetPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Node>, ffi.Pointer<UA_ReferenceTypeSet>)>();

  void UA_Node_deleteReferences(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_deleteReferences(
      node,
    );
  }

  late final _UA_Node_deleteReferencesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>(
          'UA_Node_deleteReferences');
  late final _UA_Node_deleteReferences = _UA_Node_deleteReferencesPtr
      .asFunction<void Function(ffi.Pointer<UA_Node>)>();

  void UA_Node_clear(
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_Node_clear(
      node,
    );
  }

  late final _UA_Node_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Node>)>>(
          'UA_Node_clear');
  late final _UA_Node_clear =
      _UA_Node_clearPtr.asFunction<void Function(ffi.Pointer<UA_Node>)>();

  /// The UA_ServerConfig_addPubSubTransportLayer is used to add a transport layer
  /// to the server configuration. The list memory is allocated and will be freed
  /// with UA_PubSubManager_delete.
  ///
  /// .. note:: If the UA_String transportProfileUri was dynamically allocated
  /// the memory has to be freed when no longer required.
  ///
  /// .. note:: This has to be done before the server is started with UA_Server_run.
  int UA_ServerConfig_addPubSubTransportLayer(
    ffi.Pointer<UA_ServerConfig> config,
    UA_PubSubTransportLayer pubsubTransportLayer,
  ) {
    return _UA_ServerConfig_addPubSubTransportLayer(
      config,
      pubsubTransportLayer,
    );
  }

  late final _UA_ServerConfig_addPubSubTransportLayerPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>, UA_PubSubTransportLayer)>>(
      'UA_ServerConfig_addPubSubTransportLayer');
  late final _UA_ServerConfig_addPubSubTransportLayer =
      _UA_ServerConfig_addPubSubTransportLayerPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, UA_PubSubTransportLayer)>();

  int UA_Server_addPubSubConnection(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig,
    ffi.Pointer<UA_NodeId> connectionIdentifier,
  ) {
    return _UA_Server_addPubSubConnection(
      server,
      connectionConfig,
      connectionIdentifier,
    );
  }

  late final _UA_Server_addPubSubConnectionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPubSubConnection');
  late final _UA_Server_addPubSubConnection =
      _UA_Server_addPubSubConnectionPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getPubSubConnectionConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
    ffi.Pointer<UA_PubSubConnectionConfig> config,
  ) {
    return _UA_Server_getPubSubConnectionConfig(
      server,
      connection,
      config,
    );
  }

  late final _UA_Server_getPubSubConnectionConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_PubSubConnectionConfig>)>>(
      'UA_Server_getPubSubConnectionConfig');
  late final _UA_Server_getPubSubConnectionConfig =
      _UA_Server_getPubSubConnectionConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PubSubConnectionConfig>)>();

  int UA_Server_removePubSubConnection(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
  ) {
    return _UA_Server_removePubSubConnection(
      server,
      connection,
    );
  }

  late final _UA_Server_removePubSubConnectionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removePubSubConnection');
  late final _UA_Server_removePubSubConnection =
      _UA_Server_removePubSubConnectionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_PublishedDataSetConfig_clear(
    ffi.Pointer<UA_PublishedDataSetConfig> pdsConfig,
  ) {
    return _UA_PublishedDataSetConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_PublishedDataSetConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>>(
      'UA_PublishedDataSetConfig_clear');
  late final _UA_PublishedDataSetConfig_clear =
      _UA_PublishedDataSetConfig_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PublishedDataSetConfig>)>();

  UA_AddPublishedDataSetResult UA_Server_addPublishedDataSet(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PublishedDataSetConfig> publishedDataSetConfig,
    ffi.Pointer<UA_NodeId> pdsIdentifier,
  ) {
    return _UA_Server_addPublishedDataSet(
      server,
      publishedDataSetConfig,
      pdsIdentifier,
    );
  }

  late final _UA_Server_addPublishedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_AddPublishedDataSetResult Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addPublishedDataSet');
  late final _UA_Server_addPublishedDataSet =
      _UA_Server_addPublishedDataSetPtr.asFunction<
          UA_AddPublishedDataSetResult Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getPublishedDataSetConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
    ffi.Pointer<UA_PublishedDataSetConfig> config,
  ) {
    return _UA_Server_getPublishedDataSetConfig(
      server,
      pds,
      config,
    );
  }

  late final _UA_Server_getPublishedDataSetConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_PublishedDataSetConfig>)>>(
      'UA_Server_getPublishedDataSetConfig');
  late final _UA_Server_getPublishedDataSetConfig =
      _UA_Server_getPublishedDataSetConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_PublishedDataSetConfig>)>();

  int UA_Server_getPublishedDataSetMetaData(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
    ffi.Pointer<UA_DataSetMetaDataType> metaData,
  ) {
    return _UA_Server_getPublishedDataSetMetaData(
      server,
      pds,
      metaData,
    );
  }

  late final _UA_Server_getPublishedDataSetMetaDataPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetMetaDataType>)>>(
      'UA_Server_getPublishedDataSetMetaData');
  late final _UA_Server_getPublishedDataSetMetaData =
      _UA_Server_getPublishedDataSetMetaDataPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetMetaDataType>)>();

  int UA_Server_removePublishedDataSet(
    ffi.Pointer<UA_Server> server,
    UA_NodeId pds,
  ) {
    return _UA_Server_removePublishedDataSet(
      server,
      pds,
    );
  }

  late final _UA_Server_removePublishedDataSetPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removePublishedDataSet');
  late final _UA_Server_removePublishedDataSet =
      _UA_Server_removePublishedDataSetPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetFieldConfig_clear(
    ffi.Pointer<UA_DataSetFieldConfig> dataSetFieldConfig,
  ) {
    return _UA_DataSetFieldConfig_clear(
      dataSetFieldConfig,
    );
  }

  late final _UA_DataSetFieldConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetFieldConfig>)>>(
      'UA_DataSetFieldConfig_clear');
  late final _UA_DataSetFieldConfig_clear = _UA_DataSetFieldConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_addDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId publishedDataSet,
    ffi.Pointer<UA_DataSetFieldConfig> fieldConfig,
    ffi.Pointer<UA_NodeId> fieldIdentifier,
  ) {
    return _UA_Server_addDataSetField(
      server,
      publishedDataSet,
      fieldConfig,
      fieldIdentifier,
    );
  }

  late final _UA_Server_addDataSetFieldPtr = _lookup<
      ffi.NativeFunction<
          UA_DataSetFieldResult Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetField');
  late final _UA_Server_addDataSetField =
      _UA_Server_addDataSetFieldPtr.asFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetFieldConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsf,
    ffi.Pointer<UA_DataSetFieldConfig> config,
  ) {
    return _UA_Server_getDataSetFieldConfig(
      server,
      dsf,
      config,
    );
  }

  late final _UA_Server_getDataSetFieldConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetFieldConfig>)>>(
      'UA_Server_getDataSetFieldConfig');
  late final _UA_Server_getDataSetFieldConfig =
      _UA_Server_getDataSetFieldConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetFieldConfig>)>();

  UA_DataSetFieldResult UA_Server_removeDataSetField(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsf,
  ) {
    return _UA_Server_removeDataSetField(
      server,
      dsf,
    );
  }

  late final _UA_Server_removeDataSetFieldPtr = _lookup<
      ffi.NativeFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetField');
  late final _UA_Server_removeDataSetField =
      _UA_Server_removeDataSetFieldPtr.asFunction<
          UA_DataSetFieldResult Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_WriterGroupConfig_clear(
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
  ) {
    return _UA_WriterGroupConfig_clear(
      writerGroupConfig,
    );
  }

  late final _UA_WriterGroupConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_WriterGroupConfig_clear');
  late final _UA_WriterGroupConfig_clear = _UA_WriterGroupConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_addWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connection,
    ffi.Pointer<UA_WriterGroupConfig> writerGroupConfig,
    ffi.Pointer<UA_NodeId> writerGroupIdentifier,
  ) {
    return _UA_Server_addWriterGroup(
      server,
      connection,
      writerGroupConfig,
      writerGroupIdentifier,
    );
  }

  late final _UA_Server_addWriterGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addWriterGroup');
  late final _UA_Server_addWriterGroup =
      _UA_Server_addWriterGroupPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_getWriterGroupConfig(
      server,
      writerGroup,
      config,
    );
  }

  late final _UA_Server_getWriterGroupConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_Server_getWriterGroupConfig');
  late final _UA_Server_getWriterGroupConfig =
      _UA_Server_getWriterGroupConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_updateWriterGroupConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroupIdentifier,
    ffi.Pointer<UA_WriterGroupConfig> config,
  ) {
    return _UA_Server_updateWriterGroupConfig(
      server,
      writerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_updateWriterGroupConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_WriterGroupConfig>)>>(
      'UA_Server_updateWriterGroupConfig');
  late final _UA_Server_updateWriterGroupConfig =
      _UA_Server_updateWriterGroupConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_WriterGroupConfig>)>();

  int UA_Server_WriterGroup_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroupIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_WriterGroup_getState(
      server,
      writerGroupIdentifier,
      state,
    );
  }

  late final _UA_Server_WriterGroup_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_WriterGroup_getState');
  late final _UA_Server_WriterGroup_getState =
      _UA_Server_WriterGroup_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_removeWriterGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_removeWriterGroup(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_removeWriterGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeWriterGroup');
  late final _UA_Server_removeWriterGroup = _UA_Server_removeWriterGroupPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_freezeWriterGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_freezeWriterGroupConfiguration(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_freezeWriterGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_freezeWriterGroupConfiguration');
  late final _UA_Server_freezeWriterGroupConfiguration =
      _UA_Server_freezeWriterGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_unfreezeWriterGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_unfreezeWriterGroupConfiguration(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_unfreezeWriterGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_unfreezeWriterGroupConfiguration');
  late final _UA_Server_unfreezeWriterGroupConfiguration =
      _UA_Server_unfreezeWriterGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setWriterGroupOperational(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_setWriterGroupOperational(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_setWriterGroupOperationalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setWriterGroupOperational');
  late final _UA_Server_setWriterGroupOperational =
      _UA_Server_setWriterGroupOperationalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setWriterGroupDisabled(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
  ) {
    return _UA_Server_setWriterGroupDisabled(
      server,
      writerGroup,
    );
  }

  late final _UA_Server_setWriterGroupDisabledPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setWriterGroupDisabled');
  late final _UA_Server_setWriterGroupDisabled =
      _UA_Server_setWriterGroupDisabledPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetWriterConfig_clear(
    ffi.Pointer<UA_DataSetWriterConfig> pdsConfig,
  ) {
    return _UA_DataSetWriterConfig_clear(
      pdsConfig,
    );
  }

  late final _UA_DataSetWriterConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetWriterConfig>)>>(
      'UA_DataSetWriterConfig_clear');
  late final _UA_DataSetWriterConfig_clear = _UA_DataSetWriterConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_addDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId writerGroup,
    UA_NodeId dataSet,
    ffi.Pointer<UA_DataSetWriterConfig> dataSetWriterConfig,
    ffi.Pointer<UA_NodeId> writerIdentifier,
  ) {
    return _UA_Server_addDataSetWriter(
      server,
      writerGroup,
      dataSet,
      dataSetWriterConfig,
      writerIdentifier,
    );
  }

  late final _UA_Server_addDataSetWriterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetWriter');
  late final _UA_Server_addDataSetWriter =
      _UA_Server_addDataSetWriterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_getDataSetWriterConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsw,
    ffi.Pointer<UA_DataSetWriterConfig> config,
  ) {
    return _UA_Server_getDataSetWriterConfig(
      server,
      dsw,
      config,
    );
  }

  late final _UA_Server_getDataSetWriterConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetWriterConfig>)>>(
      'UA_Server_getDataSetWriterConfig');
  late final _UA_Server_getDataSetWriterConfig =
      _UA_Server_getDataSetWriterConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetWriterConfig>)>();

  int UA_Server_DataSetWriter_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetWriterIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_DataSetWriter_getState(
      server,
      dataSetWriterIdentifier,
      state,
    );
  }

  late final _UA_Server_DataSetWriter_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_DataSetWriter_getState');
  late final _UA_Server_DataSetWriter_getState =
      _UA_Server_DataSetWriter_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_removeDataSetWriter(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dsw,
  ) {
    return _UA_Server_removeDataSetWriter(
      server,
      dsw,
    );
  }

  late final _UA_Server_removeDataSetWriterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetWriter');
  late final _UA_Server_removeDataSetWriter = _UA_Server_removeDataSetWriterPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_DataSetReader_createTargetVariables(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    int targetVariablesSize,
    ffi.Pointer<UA_FieldTargetVariable> targetVariables,
  ) {
    return _UA_Server_DataSetReader_createTargetVariables(
      server,
      dataSetReaderIdentifier,
      targetVariablesSize,
      targetVariables,
    );
  }

  late final _UA_Server_DataSetReader_createTargetVariablesPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_FieldTargetVariable>)>>(
      'UA_Server_DataSetReader_createTargetVariables');
  late final _UA_Server_DataSetReader_createTargetVariables =
      _UA_Server_DataSetReader_createTargetVariablesPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, int,
              ffi.Pointer<UA_FieldTargetVariable>)>();

  int UA_Server_DataSetReader_updateConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_DataSetReader_updateConfig(
      server,
      dataSetReaderIdentifier,
      readerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_DataSetReader_updateConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  UA_NodeId, ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_Server_DataSetReader_updateConfig');
  late final _UA_Server_DataSetReader_updateConfig =
      _UA_Server_DataSetReader_updateConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_DataSetReader_getConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> config,
  ) {
    return _UA_Server_DataSetReader_getConfig(
      server,
      dataSetReaderIdentifier,
      config,
    );
  }

  late final _UA_Server_DataSetReader_getConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_Server_DataSetReader_getConfig');
  late final _UA_Server_DataSetReader_getConfig =
      _UA_Server_DataSetReader_getConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_Server_DataSetReader_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId dataSetReaderIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_DataSetReader_getState(
      server,
      dataSetReaderIdentifier,
      state,
    );
  }

  late final _UA_Server_DataSetReader_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_DataSetReader_getState');
  late final _UA_Server_DataSetReader_getState =
      _UA_Server_DataSetReader_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  void UA_ReaderGroupConfig_clear(
    ffi.Pointer<UA_ReaderGroupConfig> readerGroupConfig,
  ) {
    return _UA_ReaderGroupConfig_clear(
      readerGroupConfig,
    );
  }

  late final _UA_ReaderGroupConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_ReaderGroupConfig>)>>(
      'UA_ReaderGroupConfig_clear');
  late final _UA_ReaderGroupConfig_clear = _UA_ReaderGroupConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_addDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_DataSetReaderConfig> dataSetReaderConfig,
    ffi.Pointer<UA_NodeId> readerIdentifier,
  ) {
    return _UA_Server_addDataSetReader(
      server,
      readerGroupIdentifier,
      dataSetReaderConfig,
      readerIdentifier,
    );
  }

  late final _UA_Server_addDataSetReaderPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSetReader');
  late final _UA_Server_addDataSetReader =
      _UA_Server_addDataSetReaderPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_DataSetReaderConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_removeDataSetReader(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerIdentifier,
  ) {
    return _UA_Server_removeDataSetReader(
      server,
      readerIdentifier,
    );
  }

  late final _UA_Server_removeDataSetReaderPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeDataSetReader');
  late final _UA_Server_removeDataSetReader = _UA_Server_removeDataSetReaderPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_ReaderGroup_getConfig(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<UA_ReaderGroupConfig> config,
  ) {
    return _UA_Server_ReaderGroup_getConfig(
      server,
      readerGroupIdentifier,
      config,
    );
  }

  late final _UA_Server_ReaderGroup_getConfigPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_ReaderGroupConfig>)>>(
      'UA_Server_ReaderGroup_getConfig');
  late final _UA_Server_ReaderGroup_getConfig =
      _UA_Server_ReaderGroup_getConfigPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>)>();

  int UA_Server_ReaderGroup_getState(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupIdentifier,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _UA_Server_ReaderGroup_getState(
      server,
      readerGroupIdentifier,
      state,
    );
  }

  late final _UA_Server_ReaderGroup_getStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_ReaderGroup_getState');
  late final _UA_Server_ReaderGroup_getState =
      _UA_Server_ReaderGroup_getStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_addReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionIdentifier,
    ffi.Pointer<UA_ReaderGroupConfig> readerGroupConfig,
    ffi.Pointer<UA_NodeId> readerGroupIdentifier,
  ) {
    return _UA_Server_addReaderGroup(
      server,
      connectionIdentifier,
      readerGroupConfig,
      readerGroupIdentifier,
    );
  }

  late final _UA_Server_addReaderGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReaderGroup');
  late final _UA_Server_addReaderGroup =
      _UA_Server_addReaderGroupPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_ReaderGroupConfig>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_removeReaderGroup(
    ffi.Pointer<UA_Server> server,
    UA_NodeId groupIdentifier,
  ) {
    return _UA_Server_removeReaderGroup(
      server,
      groupIdentifier,
    );
  }

  late final _UA_Server_removeReaderGroupPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_removeReaderGroup');
  late final _UA_Server_removeReaderGroup = _UA_Server_removeReaderGroupPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_freezeReaderGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_freezeReaderGroupConfiguration(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_freezeReaderGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_freezeReaderGroupConfiguration');
  late final _UA_Server_freezeReaderGroupConfiguration =
      _UA_Server_freezeReaderGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_unfreezeReaderGroupConfiguration(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_unfreezeReaderGroupConfiguration(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_unfreezeReaderGroupConfigurationPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_unfreezeReaderGroupConfiguration');
  late final _UA_Server_unfreezeReaderGroupConfiguration =
      _UA_Server_unfreezeReaderGroupConfigurationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setReaderGroupOperational(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_setReaderGroupOperational(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_setReaderGroupOperationalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setReaderGroupOperational');
  late final _UA_Server_setReaderGroupOperational =
      _UA_Server_setReaderGroupOperationalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_setReaderGroupDisabled(
    ffi.Pointer<UA_Server> server,
    UA_NodeId readerGroupId,
  ) {
    return _UA_Server_setReaderGroupDisabled(
      server,
      readerGroupId,
    );
  }

  late final _UA_Server_setReaderGroupDisabledPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_Server_setReaderGroupDisabled');
  late final _UA_Server_setReaderGroupDisabled =
      _UA_Server_setReaderGroupDisabledPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_ServerConfig_clean(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_clean(
      config,
    );
  }

  late final _UA_ServerConfig_cleanPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ServerConfig>)>>(
      'UA_ServerConfig_clean');
  late final _UA_ServerConfig_clean = _UA_ServerConfig_cleanPtr.asFunction<
      void Function(ffi.Pointer<UA_ServerConfig>)>();

  ffi.Pointer<UA_Server> UA_Server_newWithConfig(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_Server_newWithConfig(
      config,
    );
  }

  late final _UA_Server_newWithConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Server> Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_Server_newWithConfig');
  late final _UA_Server_newWithConfig = _UA_Server_newWithConfigPtr.asFunction<
      ffi.Pointer<UA_Server> Function(ffi.Pointer<UA_ServerConfig>)>();

  void UA_Server_delete(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_delete(
      server,
    );
  }

  late final _UA_Server_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>)>>(
          'UA_Server_delete');
  late final _UA_Server_delete =
      _UA_Server_deletePtr.asFunction<void Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_ServerConfig> UA_Server_getConfig(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getConfig(
      server,
    );
  }

  late final _UA_Server_getConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ServerConfig> Function(
              ffi.Pointer<UA_Server>)>>('UA_Server_getConfig');
  late final _UA_Server_getConfig = _UA_Server_getConfigPtr.asFunction<
      ffi.Pointer<UA_ServerConfig> Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Bool> running,
  ) {
    return _UA_Server_run(
      server,
      running,
    );
  }

  late final _UA_Server_runPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>>('UA_Server_run');
  late final _UA_Server_run = _UA_Server_runPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_run_startup(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_startup(
      server,
    );
  }

  late final _UA_Server_run_startupPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_run_startup');
  late final _UA_Server_run_startup = _UA_Server_run_startupPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_run_iterate(
    ffi.Pointer<UA_Server> server,
    bool waitInternal,
  ) {
    return _UA_Server_run_iterate(
      server,
      waitInternal,
    );
  }

  late final _UA_Server_run_iteratePtr = _lookup<
      ffi.NativeFunction<
          UA_UInt16 Function(
              ffi.Pointer<UA_Server>, ffi.Bool)>>('UA_Server_run_iterate');
  late final _UA_Server_run_iterate = _UA_Server_run_iteratePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, bool)>();

  int UA_Server_run_shutdown(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_run_shutdown(
      server,
    );
  }

  late final _UA_Server_run_shutdownPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_run_shutdown');
  late final _UA_Server_run_shutdown = _UA_Server_run_shutdownPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>)>();

  int UA_Server_addTimedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addTimedCallback(
      server,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Server_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addTimedCallback');
  late final _UA_Server_addTimedCallback =
      _UA_Server_addTimedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_ServerCallback,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_addRepeatedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Server_addRepeatedCallback(
      server,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Server_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Server_addRepeatedCallback');
  late final _UA_Server_addRepeatedCallback =
      _UA_Server_addRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_ServerCallback,
              ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Server_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Server> server,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Server_changeRepeatedCallbackInterval(
      server,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Server_changeRepeatedCallbackIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_UInt64,
              UA_Double)>>('UA_Server_changeRepeatedCallbackInterval');
  late final _UA_Server_changeRepeatedCallbackInterval =
      _UA_Server_changeRepeatedCallbackIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, int, double)>();

  void UA_Server_removeCallback(
    ffi.Pointer<UA_Server> server,
    int callbackId,
  ) {
    return _UA_Server_removeCallback(
      server,
      callbackId,
    );
  }

  late final _UA_Server_removeCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>, UA_UInt64)>>('UA_Server_removeCallback');
  late final _UA_Server_removeCallback = _UA_Server_removeCallbackPtr
      .asFunction<void Function(ffi.Pointer<UA_Server>, int)>();

  /// Session Handling
  /// ----------------
  /// A new session is announced via the AccessControl plugin. The session
  /// identifier is forwarded to the relevant callbacks back into userland. The
  /// following methods enable an interaction with a particular session.
  int UA_Server_closeSession(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
  ) {
    return _UA_Server_closeSession(
      server,
      sessionId,
    );
  }

  late final _UA_Server_closeSessionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_closeSession');
  late final _UA_Server_closeSession = _UA_Server_closeSessionPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_setSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_Variant> parameter,
  ) {
    return _UA_Server_setSessionParameter(
      server,
      sessionId,
      name,
      parameter,
    );
  }

  late final _UA_Server_setSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_setSessionParameter');
  late final _UA_Server_setSessionParameter =
      _UA_Server_setSessionParameterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_Variant>)>();

  void UA_Server_deleteSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_Server_deleteSessionParameter(
      server,
      sessionId,
      name,
    );
  }

  late final _UA_Server_deleteSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>)>>('UA_Server_deleteSessionParameter');
  late final _UA_Server_deleteSessionParameter =
      _UA_Server_deleteSessionParameterPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>)>();

  int UA_Server_getSessionParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionParameter(
      server,
      sessionId,
      name,
      outParameter,
    );
  }

  late final _UA_Server_getSessionParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionParameter');
  late final _UA_Server_getSessionParameter =
      _UA_Server_getSessionParameterPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionScalarParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionScalarParameter(
      server,
      sessionId,
      name,
      type,
      outParameter,
    );
  }

  late final _UA_Server_getSessionScalarParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionScalarParameter');
  late final _UA_Server_getSessionScalarParameter =
      _UA_Server_getSessionScalarParameterPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>();

  int UA_Server_getSessionArrayParameter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_Variant> outParameter,
  ) {
    return _UA_Server_getSessionArrayParameter(
      server,
      sessionId,
      name,
      type,
      outParameter,
    );
  }

  late final _UA_Server_getSessionArrayParameterPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>>('UA_Server_getSessionArrayParameter');
  late final _UA_Server_getSessionArrayParameter =
      _UA_Server_getSessionArrayParameterPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_Variant>)>();

  int UA_Server_readNodeId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_readNodeId(
      server,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Server_readNodeIdPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_readNodeId');
  late final _UA_Server_readNodeId = _UA_Server_readNodeIdPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readNodeClass(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
  ) {
    return _UA_Server_readNodeClass(
      server,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Server_readNodeClassPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Server_readNodeClass');
  late final _UA_Server_readNodeClass = _UA_Server_readNodeClassPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Server_readBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Server_readBrowseName(
      server,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Server_readBrowseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>>('UA_Server_readBrowseName');
  late final _UA_Server_readBrowseName =
      _UA_Server_readBrowseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_readDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Server_readDisplayName(
      server,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Server_readDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readDisplayName');
  late final _UA_Server_readDisplayName =
      _UA_Server_readDisplayNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Server_readDescription(
      server,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Server_readDescriptionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readDescription');
  late final _UA_Server_readDescription =
      _UA_Server_readDescriptionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Server_readWriteMask(
      server,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Server_readWriteMaskPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Server_readWriteMask');
  late final _UA_Server_readWriteMask = _UA_Server_readWriteMaskPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Server_readIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Server_readIsAbstract(
      server,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Server_readIsAbstractPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readIsAbstract');
  late final _UA_Server_readIsAbstract =
      _UA_Server_readIsAbstractPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readSymmetric(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Server_readSymmetric(
      server,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Server_readSymmetricPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readSymmetric');
  late final _UA_Server_readSymmetric = _UA_Server_readSymmetricPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Server_readInverseName(
      server,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Server_readInverseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>>('UA_Server_readInverseName');
  late final _UA_Server_readInverseName =
      _UA_Server_readInverseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Server_readContainsNoLoops(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Server_readContainsNoLoops(
      server,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Server_readContainsNoLoopsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readContainsNoLoops');
  late final _UA_Server_readContainsNoLoops =
      _UA_Server_readContainsNoLoopsPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Server_readEventNotifier(
      server,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Server_readEventNotifierPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Server_readEventNotifier');
  late final _UA_Server_readEventNotifier =
      _UA_Server_readEventNotifierPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Server_readValue(
      server,
      nodeId,
      outValue,
    );
  }

  late final _UA_Server_readValuePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readValue');
  late final _UA_Server_readValue = _UA_Server_readValuePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Server_readDataType(
      server,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Server_readDataTypePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_readDataType');
  late final _UA_Server_readDataType = _UA_Server_readDataTypePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_readValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Server_readValueRank(
      server,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Server_readValueRankPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Server_readValueRank');
  late final _UA_Server_readValueRank = _UA_Server_readValueRankPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Server_readArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outArrayDimensions,
  ) {
    return _UA_Server_readArrayDimensions(
      server,
      nodeId,
      outArrayDimensions,
    );
  }

  late final _UA_Server_readArrayDimensionsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readArrayDimensions');
  late final _UA_Server_readArrayDimensions =
      _UA_Server_readArrayDimensionsPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Server_readAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Server_readAccessLevel(
      server,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Server_readAccessLevelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Server_readAccessLevel');
  late final _UA_Server_readAccessLevel =
      _UA_Server_readAccessLevelPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Server_readMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinimumSamplingInterval,
  ) {
    return _UA_Server_readMinimumSamplingInterval(
      server,
      nodeId,
      outMinimumSamplingInterval,
    );
  }

  late final _UA_Server_readMinimumSamplingIntervalPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Server_readMinimumSamplingInterval');
  late final _UA_Server_readMinimumSamplingInterval =
      _UA_Server_readMinimumSamplingIntervalPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Server_readHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Server_readHistorizing(
      server,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Server_readHistorizingPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readHistorizing');
  late final _UA_Server_readHistorizing =
      _UA_Server_readHistorizingPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_readExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Server_readExecutable(
      server,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Server_readExecutablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Server_readExecutable');
  late final _UA_Server_readExecutable =
      _UA_Server_readExecutablePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Server_write(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriteValue> value,
  ) {
    return _UA_Server_write(
      server,
      value,
    );
  }

  late final _UA_Server_writePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_WriteValue>)>>('UA_Server_write');
  late final _UA_Server_write = _UA_Server_writePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriteValue>)>();

  int UA_Server_writeBrowseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_QualifiedName browseName,
  ) {
    return _UA_Server_writeBrowseName(
      server,
      nodeId,
      browseName,
    );
  }

  late final _UA_Server_writeBrowseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_QualifiedName)>>('UA_Server_writeBrowseName');
  late final _UA_Server_writeBrowseName =
      _UA_Server_writeBrowseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName)>();

  int UA_Server_writeDisplayName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText displayName,
  ) {
    return _UA_Server_writeDisplayName(
      server,
      nodeId,
      displayName,
    );
  }

  late final _UA_Server_writeDisplayNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeDisplayName');
  late final _UA_Server_writeDisplayName =
      _UA_Server_writeDisplayNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeDescription(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText description,
  ) {
    return _UA_Server_writeDescription(
      server,
      nodeId,
      description,
    );
  }

  late final _UA_Server_writeDescriptionPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeDescription');
  late final _UA_Server_writeDescription =
      _UA_Server_writeDescriptionPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeWriteMask(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int writeMask,
  ) {
    return _UA_Server_writeWriteMask(
      server,
      nodeId,
      writeMask,
    );
  }

  late final _UA_Server_writeWriteMaskPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_UInt32)>>('UA_Server_writeWriteMask');
  late final _UA_Server_writeWriteMask = _UA_Server_writeWriteMaskPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeIsAbstract(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool isAbstract,
  ) {
    return _UA_Server_writeIsAbstract(
      server,
      nodeId,
      isAbstract,
    );
  }

  late final _UA_Server_writeIsAbstractPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeIsAbstract');
  late final _UA_Server_writeIsAbstract = _UA_Server_writeIsAbstractPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeInverseName(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_LocalizedText inverseName,
  ) {
    return _UA_Server_writeInverseName(
      server,
      nodeId,
      inverseName,
    );
  }

  late final _UA_Server_writeInverseNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_LocalizedText)>>('UA_Server_writeInverseName');
  late final _UA_Server_writeInverseName =
      _UA_Server_writeInverseNamePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_LocalizedText)>();

  int UA_Server_writeEventNotifier(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int eventNotifier,
  ) {
    return _UA_Server_writeEventNotifier(
      server,
      nodeId,
      eventNotifier,
    );
  }

  late final _UA_Server_writeEventNotifierPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Byte)>>('UA_Server_writeEventNotifier');
  late final _UA_Server_writeEventNotifier = _UA_Server_writeEventNotifierPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  /// Writes an UA_Variant to a variable/variableType node.
  /// StatusCode is set to ``UA_STATUSCODE_GOOD``, sourceTimestamp and
  /// serverTimestamp are set to UA_DateTime_now()
  int UA_Server_writeValue(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant value,
  ) {
    return _UA_Server_writeValue(
      server,
      nodeId,
      value,
    );
  }

  late final _UA_Server_writeValuePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Variant)>>('UA_Server_writeValue');
  late final _UA_Server_writeValue = _UA_Server_writeValuePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeDataType(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeId dataType,
  ) {
    return _UA_Server_writeDataType(
      server,
      nodeId,
      dataType,
    );
  }

  late final _UA_Server_writeDataTypePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeId)>>('UA_Server_writeDataType');
  late final _UA_Server_writeDataType = _UA_Server_writeDataTypePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId)>();

  int UA_Server_writeValueRank(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int valueRank,
  ) {
    return _UA_Server_writeValueRank(
      server,
      nodeId,
      valueRank,
    );
  }

  late final _UA_Server_writeValueRankPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Int32)>>('UA_Server_writeValueRank');
  late final _UA_Server_writeValueRank = _UA_Server_writeValueRankPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeArrayDimensions(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_Variant arrayDimensions,
  ) {
    return _UA_Server_writeArrayDimensions(
      server,
      nodeId,
      arrayDimensions,
    );
  }

  late final _UA_Server_writeArrayDimensionsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Variant)>>('UA_Server_writeArrayDimensions');
  late final _UA_Server_writeArrayDimensions =
      _UA_Server_writeArrayDimensionsPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_Variant)>();

  int UA_Server_writeAccessLevel(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    int accessLevel,
  ) {
    return _UA_Server_writeAccessLevel(
      server,
      nodeId,
      accessLevel,
    );
  }

  late final _UA_Server_writeAccessLevelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Byte)>>('UA_Server_writeAccessLevel');
  late final _UA_Server_writeAccessLevel = _UA_Server_writeAccessLevelPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, int)>();

  int UA_Server_writeMinimumSamplingInterval(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    double miniumSamplingInterval,
  ) {
    return _UA_Server_writeMinimumSamplingInterval(
      server,
      nodeId,
      miniumSamplingInterval,
    );
  }

  late final _UA_Server_writeMinimumSamplingIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_Double)>>('UA_Server_writeMinimumSamplingInterval');
  late final _UA_Server_writeMinimumSamplingInterval =
      _UA_Server_writeMinimumSamplingIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, double)>();

  int UA_Server_writeHistorizing(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool historizing,
  ) {
    return _UA_Server_writeHistorizing(
      server,
      nodeId,
      historizing,
    );
  }

  late final _UA_Server_writeHistorizingPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeHistorizing');
  late final _UA_Server_writeHistorizing = _UA_Server_writeHistorizingPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  int UA_Server_writeExecutable(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool executable,
  ) {
    return _UA_Server_writeExecutable(
      server,
      nodeId,
      executable,
    );
  }

  late final _UA_Server_writeExecutablePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_writeExecutable');
  late final _UA_Server_writeExecutable = _UA_Server_writeExecutablePtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  /// Browsing
  /// --------
  UA_BrowseResult UA_Server_browse(
    ffi.Pointer<UA_Server> server,
    int maxReferences,
    ffi.Pointer<UA_BrowseDescription> bd,
  ) {
    return _UA_Server_browse(
      server,
      maxReferences,
      bd,
    );
  }

  late final _UA_Server_browsePtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(ffi.Pointer<UA_Server>, UA_UInt32,
              ffi.Pointer<UA_BrowseDescription>)>>('UA_Server_browse');
  late final _UA_Server_browse = _UA_Server_browsePtr.asFunction<
      UA_BrowseResult Function(
          ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_BrowseDescription>)>();

  UA_BrowseResult UA_Server_browseNext(
    ffi.Pointer<UA_Server> server,
    bool releaseContinuationPoint,
    ffi.Pointer<UA_ByteString> continuationPoint,
  ) {
    return _UA_Server_browseNext(
      server,
      releaseContinuationPoint,
      continuationPoint,
    );
  }

  late final _UA_Server_browseNextPtr = _lookup<
      ffi.NativeFunction<
          UA_BrowseResult Function(ffi.Pointer<UA_Server>, ffi.Bool,
              ffi.Pointer<UA_ByteString>)>>('UA_Server_browseNext');
  late final _UA_Server_browseNext = _UA_Server_browseNextPtr.asFunction<
      UA_BrowseResult Function(
          ffi.Pointer<UA_Server>, bool, ffi.Pointer<UA_ByteString>)>();

  int UA_Server_browseRecursive(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowseDescription> bd,
    ffi.Pointer<ffi.Size> resultsSize,
    ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>> results,
  ) {
    return _UA_Server_browseRecursive(
      server,
      bd,
      resultsSize,
      results,
    );
  }

  late final _UA_Server_browseRecursivePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_BrowseDescription>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>>(
      'UA_Server_browseRecursive');
  late final _UA_Server_browseRecursive =
      _UA_Server_browseRecursivePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_BrowseDescription>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_ExpandedNodeId>>)>();

  UA_BrowsePathResult UA_Server_translateBrowsePathToNodeIds(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_BrowsePath> browsePath,
  ) {
    return _UA_Server_translateBrowsePathToNodeIds(
      server,
      browsePath,
    );
  }

  late final _UA_Server_translateBrowsePathToNodeIdsPtr = _lookup<
          ffi.NativeFunction<
              UA_BrowsePathResult Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>>(
      'UA_Server_translateBrowsePathToNodeIds');
  late final _UA_Server_translateBrowsePathToNodeIds =
      _UA_Server_translateBrowsePathToNodeIdsPtr.asFunction<
          UA_BrowsePathResult Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_BrowsePath>)>();

  UA_BrowsePathResult UA_Server_browseSimplifiedBrowsePath(
    ffi.Pointer<UA_Server> server,
    UA_NodeId origin,
    int browsePathSize,
    ffi.Pointer<UA_QualifiedName> browsePath,
  ) {
    return _UA_Server_browseSimplifiedBrowsePath(
      server,
      origin,
      browsePathSize,
      browsePath,
    );
  }

  late final _UA_Server_browseSimplifiedBrowsePathPtr = _lookup<
          ffi.NativeFunction<
              UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Server_browseSimplifiedBrowsePath');
  late final _UA_Server_browseSimplifiedBrowsePath =
      _UA_Server_browseSimplifiedBrowsePathPtr.asFunction<
          UA_BrowsePathResult Function(ffi.Pointer<UA_Server>, UA_NodeId, int,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Server_forEachChildNodeCall(
    ffi.Pointer<UA_Server> server,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Server_forEachChildNodeCall(
      server,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Server_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Server_forEachChildNodeCall');
  late final _UA_Server_forEachChildNodeCall =
      _UA_Server_forEachChildNodeCallPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  /// Information Model Callbacks
  /// ---------------------------
  ///
  /// There are three places where a callback from an information model to
  /// user-defined code can happen.
  ///
  /// - Custom node constructors and destructors
  /// - Linking VariableNodes with an external data source
  /// - MethodNode callbacks
  void UA_Server_setAdminSessionContext(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_Server_setAdminSessionContext(
      server,
      context,
    );
  }

  late final _UA_Server_setAdminSessionContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setAdminSessionContext');
  late final _UA_Server_setAdminSessionContext =
      _UA_Server_setAdminSessionContextPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Void>)>();

  int UA_Server_setNodeTypeLifecycle(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_NodeTypeLifecycle lifecycle,
  ) {
    return _UA_Server_setNodeTypeLifecycle(
      server,
      nodeId,
      lifecycle,
    );
  }

  late final _UA_Server_setNodeTypeLifecyclePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_NodeTypeLifecycle)>>('UA_Server_setNodeTypeLifecycle');
  late final _UA_Server_setNodeTypeLifecycle =
      _UA_Server_setNodeTypeLifecyclePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeTypeLifecycle)>();

  int UA_Server_getNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext,
  ) {
    return _UA_Server_getNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_getNodeContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('UA_Server_getNodeContext');
  late final _UA_Server_getNodeContext =
      _UA_Server_getNodeContextPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int UA_Server_setNodeContext(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
  ) {
    return _UA_Server_setNodeContext(
      server,
      nodeId,
      nodeContext,
    );
  }

  late final _UA_Server_setNodeContextPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setNodeContext');
  late final _UA_Server_setNodeContext =
      _UA_Server_setNodeContextPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<ffi.Void>)>();

  /// .. _datasource:
  ///
  /// Data Source Callback
  /// ^^^^^^^^^^^^^^^^^^^^
  ///
  /// The server has a unique way of dealing with the content of variables. Instead
  /// of storing a variant attached to the variable node, the node can point to a
  /// function with a local data provider. Whenever the value attribute is read,
  /// the function will be called and asked to provide a UA_DataValue return value
  /// that contains the value content and additional timestamps.
  ///
  /// It is expected that the read callback is implemented. The write callback can
  /// be set to a null-pointer.
  int UA_Server_setVariableNode_dataSource(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_DataSource dataSource,
  ) {
    return _UA_Server_setVariableNode_dataSource(
      server,
      nodeId,
      dataSource,
    );
  }

  late final _UA_Server_setVariableNode_dataSourcePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_DataSource)>>('UA_Server_setVariableNode_dataSource');
  late final _UA_Server_setVariableNode_dataSource =
      _UA_Server_setVariableNode_dataSourcePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_DataSource)>();

  int UA_Server_setVariableNode_valueCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_ValueCallback callback,
  ) {
    return _UA_Server_setVariableNode_valueCallback(
      server,
      nodeId,
      callback,
    );
  }

  late final _UA_Server_setVariableNode_valueCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_ValueCallback)>>('UA_Server_setVariableNode_valueCallback');
  late final _UA_Server_setVariableNode_valueCallback =
      _UA_Server_setVariableNode_valueCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_ValueCallback)>();

  UA_MonitoredItemCreateResult UA_Server_createDataChangeMonitoredItem(
    ffi.Pointer<UA_Server> server,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    UA_Server_DataChangeNotificationCallback callback,
  ) {
    return _UA_Server_createDataChangeMonitoredItem(
      server,
      timestampsToReturn,
      item,
      monitoredItemContext,
      callback,
    );
  }

  late final _UA_Server_createDataChangeMonitoredItemPtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Server_DataChangeNotificationCallback)>>(
      'UA_Server_createDataChangeMonitoredItem');
  late final _UA_Server_createDataChangeMonitoredItem =
      _UA_Server_createDataChangeMonitoredItemPtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Server>,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Server_DataChangeNotificationCallback)>();

  int UA_Server_deleteMonitoredItem(
    ffi.Pointer<UA_Server> server,
    int monitoredItemId,
  ) {
    return _UA_Server_deleteMonitoredItem(
      server,
      monitoredItemId,
    );
  }

  late final _UA_Server_deleteMonitoredItemPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              UA_UInt32)>>('UA_Server_deleteMonitoredItem');
  late final _UA_Server_deleteMonitoredItem = _UA_Server_deleteMonitoredItemPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, int)>();

  int UA_Server_setMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    UA_MethodCallback methodCallback,
  ) {
    return _UA_Server_setMethodNodeCallback(
      server,
      methodNodeId,
      methodCallback,
    );
  }

  late final _UA_Server_setMethodNodeCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_MethodCallback)>>('UA_Server_setMethodNodeCallback');
  late final _UA_Server_setMethodNodeCallback =
      _UA_Server_setMethodNodeCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback)>();

  int UA_Server_getMethodNodeCallback(
    ffi.Pointer<UA_Server> server,
    UA_NodeId methodNodeId,
    ffi.Pointer<UA_MethodCallback> outMethodCallback,
  ) {
    return _UA_Server_getMethodNodeCallback(
      server,
      methodNodeId,
      outMethodCallback,
    );
  }

  late final _UA_Server_getMethodNodeCallbackPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
                  ffi.Pointer<UA_MethodCallback>)>>(
      'UA_Server_getMethodNodeCallback');
  late final _UA_Server_getMethodNodeCallback =
      _UA_Server_getMethodNodeCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_MethodCallback>)>();

  UA_CallMethodResult UA_Server_call(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_CallMethodRequest> request,
  ) {
    return _UA_Server_call(
      server,
      request,
    );
  }

  late final _UA_Server_callPtr = _lookup<
      ffi.NativeFunction<
          UA_CallMethodResult Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_CallMethodRequest>)>>('UA_Server_call');
  late final _UA_Server_call = _UA_Server_callPtr.asFunction<
      UA_CallMethodResult Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_CallMethodRequest>)>();

  int UA_Server_writeObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    UA_Variant value,
  ) {
    return _UA_Server_writeObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_writeObjectPropertyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              UA_QualifiedName, UA_Variant)>>('UA_Server_writeObjectProperty');
  late final _UA_Server_writeObjectProperty =
      _UA_Server_writeObjectPropertyPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              UA_Variant)>();

  int UA_Server_writeObjectProperty_scalar(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_Server_writeObjectProperty_scalar(
      server,
      objectId,
      propertyName,
      value,
      type,
    );
  }

  late final _UA_Server_writeObjectProperty_scalarPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  UA_NodeId,
                  UA_QualifiedName,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_DataType>)>>(
      'UA_Server_writeObjectProperty_scalar');
  late final _UA_Server_writeObjectProperty_scalar =
      _UA_Server_writeObjectProperty_scalarPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_Server_readObjectProperty(
    ffi.Pointer<UA_Server> server,
    UA_NodeId objectId,
    UA_QualifiedName propertyName,
    ffi.Pointer<UA_Variant> value,
  ) {
    return _UA_Server_readObjectProperty(
      server,
      objectId,
      propertyName,
      value,
    );
  }

  late final _UA_Server_readObjectPropertyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>>('UA_Server_readObjectProperty');
  late final _UA_Server_readObjectProperty =
      _UA_Server_readObjectPropertyPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_QualifiedName,
              ffi.Pointer<UA_Variant>)>();

  late final ffi.Pointer<UA_VariableAttributes> _UA_VariableAttributes_default =
      _lookup<UA_VariableAttributes>('UA_VariableAttributes_default');

  UA_VariableAttributes get UA_VariableAttributes_default =>
      _UA_VariableAttributes_default.ref;

  late final ffi.Pointer<UA_VariableTypeAttributes>
      _UA_VariableTypeAttributes_default =
      _lookup<UA_VariableTypeAttributes>('UA_VariableTypeAttributes_default');

  UA_VariableTypeAttributes get UA_VariableTypeAttributes_default =>
      _UA_VariableTypeAttributes_default.ref;

  late final ffi.Pointer<UA_MethodAttributes> _UA_MethodAttributes_default =
      _lookup<UA_MethodAttributes>('UA_MethodAttributes_default');

  UA_MethodAttributes get UA_MethodAttributes_default =>
      _UA_MethodAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectAttributes> _UA_ObjectAttributes_default =
      _lookup<UA_ObjectAttributes>('UA_ObjectAttributes_default');

  UA_ObjectAttributes get UA_ObjectAttributes_default =>
      _UA_ObjectAttributes_default.ref;

  late final ffi.Pointer<UA_ObjectTypeAttributes>
      _UA_ObjectTypeAttributes_default =
      _lookup<UA_ObjectTypeAttributes>('UA_ObjectTypeAttributes_default');

  UA_ObjectTypeAttributes get UA_ObjectTypeAttributes_default =>
      _UA_ObjectTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ReferenceTypeAttributes>
      _UA_ReferenceTypeAttributes_default =
      _lookup<UA_ReferenceTypeAttributes>('UA_ReferenceTypeAttributes_default');

  UA_ReferenceTypeAttributes get UA_ReferenceTypeAttributes_default =>
      _UA_ReferenceTypeAttributes_default.ref;

  late final ffi.Pointer<UA_DataTypeAttributes> _UA_DataTypeAttributes_default =
      _lookup<UA_DataTypeAttributes>('UA_DataTypeAttributes_default');

  UA_DataTypeAttributes get UA_DataTypeAttributes_default =>
      _UA_DataTypeAttributes_default.ref;

  late final ffi.Pointer<UA_ViewAttributes> _UA_ViewAttributes_default =
      _lookup<UA_ViewAttributes>('UA_ViewAttributes_default');

  UA_ViewAttributes get UA_ViewAttributes_default =>
      _UA_ViewAttributes_default.ref;

  int UA_Server_addVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableNode');
  late final _UA_Server_addVariableNode =
      _UA_Server_addVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addVariableTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addVariableTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addVariableTypeNode');
  late final _UA_Server_addVariableTypeNode =
      _UA_Server_addVariableTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectNode');
  late final _UA_Server_addObjectNode = _UA_Server_addObjectNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_ObjectAttributes,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addObjectTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addObjectTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addObjectTypeNode');
  late final _UA_Server_addObjectTypeNode =
      _UA_Server_addObjectTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addViewNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addViewNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addViewNode');
  late final _UA_Server_addViewNode = _UA_Server_addViewNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_ViewAttributes,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addReferenceTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addReferenceTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addReferenceTypeNode');
  late final _UA_Server_addReferenceTypeNode =
      _UA_Server_addReferenceTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataTypeNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataTypeNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataTypeNode');
  late final _UA_Server_addDataTypeNode =
      _UA_Server_addDataTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addDataSourceVariableNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    UA_DataSource dataSource,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addDataSourceVariableNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      dataSource,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addDataSourceVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              UA_DataSource,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addDataSourceVariableNode');
  late final _UA_Server_addDataSourceVariableNode =
      _UA_Server_addDataSourceVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              UA_DataSource,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addMethodNodeEx(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    UA_NodeId inputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> inputArgumentsOutNewNodeId,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    UA_NodeId outputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> outputArgumentsOutNewNodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNodeEx(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      inputArgumentsRequestedNewNodeId,
      inputArgumentsOutNewNodeId,
      outputArgumentsSize,
      outputArguments,
      outputArgumentsRequestedNewNodeId,
      outputArgumentsOutNewNodeId,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodeExPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNodeEx');
  late final _UA_Server_addMethodNodeEx =
      _UA_Server_addMethodNodeExPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addMethodNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addMethodNode(
      server,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNode');
  late final _UA_Server_addMethodNode = _UA_Server_addMethodNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_MethodAttributes,
          UA_MethodCallback,
          int,
          ffi.Pointer<UA_Argument>,
          int,
          ffi.Pointer<UA_Argument>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  /// The method pair UA_Server_addNode_begin and _finish splits the AddNodes
  /// service in two parts. This is useful if the node shall be modified before
  /// finish the instantiation. For example to add children with specific NodeIds.
  /// Otherwise, mandatory children (e.g. of an ObjectType) are added with
  /// pseudo-random unique NodeIds. Existing children are detected during the
  /// _finish part via their matching BrowseName.
  ///
  /// The _begin method:
  /// - prepares the node and adds it to the nodestore
  /// - copies some unassigned attributes from the TypeDefinition node internally
  /// - adds the references to the parent (and the TypeDefinition if applicable)
  /// - performs type-checking of variables.
  ///
  /// You can add an object node without a parent if you set the parentNodeId and
  /// referenceTypeId to UA_NODE_ID_NULL. Then you need to add the parent reference
  /// and hasTypeDef reference yourself before calling the _finish method.
  /// Not that this is only allowed for object nodes.
  ///
  /// The _finish method:
  /// - copies mandatory children
  /// - calls the node constructor(s) at the end
  /// - may remove the node if it encounters an error.
  ///
  /// The special UA_Server_addMethodNode_finish method needs to be used for method
  /// nodes, since there you need to explicitly specifiy the input and output
  /// arguments which are added in the finish step (if not yet already there)
  int UA_Server_addNode_begin(
    ffi.Pointer<UA_Server> server,
    int nodeClass,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    ffi.Pointer<ffi.Void> attr,
    ffi.Pointer<UA_DataType> attributeType,
    ffi.Pointer<ffi.Void> nodeContext,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Server_addNode_begin(
      server,
      nodeClass,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      attributeType,
      nodeContext,
      outNewNodeId,
    );
  }

  late final _UA_Server_addNode_beginPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Int32,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addNode_begin');
  late final _UA_Server_addNode_begin = _UA_Server_addNode_beginPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          int,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
  ) {
    return _UA_Server_addNode_finish(
      server,
      nodeId,
    );
  }

  late final _UA_Server_addNode_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>>('UA_Server_addNode_finish');
  late final _UA_Server_addNode_finish = _UA_Server_addNode_finishPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_Server_addMethodNode_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
  ) {
    return _UA_Server_addMethodNode_finish(
      server,
      nodeId,
      method,
      inputArgumentsSize,
      inputArguments,
      outputArgumentsSize,
      outputArguments,
    );
  }

  late final _UA_Server_addMethodNode_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              ffi.Size,
              ffi.Pointer<UA_Argument>)>>('UA_Server_addMethodNode_finish');
  late final _UA_Server_addMethodNode_finish =
      _UA_Server_addMethodNode_finishPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_MethodCallback,
              int, ffi.Pointer<UA_Argument>, int, ffi.Pointer<UA_Argument>)>();

  int UA_Server_deleteNode(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    bool deleteReferences,
  ) {
    return _UA_Server_deleteNode(
      server,
      nodeId,
      deleteReferences,
    );
  }

  late final _UA_Server_deleteNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_deleteNode');
  late final _UA_Server_deleteNode = _UA_Server_deleteNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  /// Reference Management
  /// --------------------
  int UA_Server_addReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceId,
    UA_NodeId refTypeId,
    UA_ExpandedNodeId targetId,
    bool isForward,
  ) {
    return _UA_Server_addReference(
      server,
      sourceId,
      refTypeId,
      targetId,
      isForward,
    );
  }

  late final _UA_Server_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              UA_ExpandedNodeId, ffi.Bool)>>('UA_Server_addReference');
  late final _UA_Server_addReference = _UA_Server_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
          UA_ExpandedNodeId, bool)>();

  int UA_Server_deleteReference(
    ffi.Pointer<UA_Server> server,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Server_deleteReference(
      server,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Server_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Server_deleteReference');
  late final _UA_Server_deleteReference =
      _UA_Server_deleteReferencePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId, bool,
              UA_ExpandedNodeId, bool)>();

  int UA_Server_createEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventType,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Server_createEvent(
      server,
      eventType,
      outNodeId,
    );
  }

  late final _UA_Server_createEventPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_createEvent');
  late final _UA_Server_createEvent = _UA_Server_createEventPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_triggerEvent(
    ffi.Pointer<UA_Server> server,
    UA_NodeId eventNodeId,
    UA_NodeId originId,
    ffi.Pointer<UA_ByteString> outEventId,
    bool deleteEventNode,
  ) {
    return _UA_Server_triggerEvent(
      server,
      eventNodeId,
      originId,
      outEventId,
      deleteEventNode,
    );
  }

  late final _UA_Server_triggerEventPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
              ffi.Pointer<UA_ByteString>, ffi.Bool)>>('UA_Server_triggerEvent');
  late final _UA_Server_triggerEvent = _UA_Server_triggerEventPtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, UA_NodeId, UA_NodeId,
          ffi.Pointer<UA_ByteString>, bool)>();

  /// Update the Server Certificate at Runtime
  /// ----------------------------------------
  int UA_Server_updateCertificate(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ByteString> oldCertificate,
    ffi.Pointer<UA_ByteString> newCertificate,
    ffi.Pointer<UA_ByteString> newPrivateKey,
    bool closeSessions,
    bool closeSecureChannels,
  ) {
    return _UA_Server_updateCertificate(
      server,
      oldCertificate,
      newCertificate,
      newPrivateKey,
      closeSessions,
      closeSecureChannels,
    );
  }

  late final _UA_Server_updateCertificatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Bool,
              ffi.Bool)>>('UA_Server_updateCertificate');
  late final _UA_Server_updateCertificate =
      _UA_Server_updateCertificatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<UA_ByteString>,
              bool,
              bool)>();

  /// Utility Functions
  /// -----------------
  ffi.Pointer<UA_DataType> UA_Server_findDataType(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Server_findDataType(
      server,
      typeId,
    );
  }

  late final _UA_Server_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_findDataType');
  late final _UA_Server_findDataType = _UA_Server_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_addNamespace(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_Server_addNamespace(
      server,
      name,
    );
  }

  late final _UA_Server_addNamespacePtr = _lookup<
      ffi.NativeFunction<
          UA_UInt16 Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Char>)>>('UA_Server_addNamespace');
  late final _UA_Server_addNamespace = _UA_Server_addNamespacePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Char>)>();

  int UA_Server_getNamespaceByName(
    ffi.Pointer<UA_Server> server,
    UA_String namespaceUri,
    ffi.Pointer<ffi.Size> foundIndex,
  ) {
    return _UA_Server_getNamespaceByName(
      server,
      namespaceUri,
      foundIndex,
    );
  }

  late final _UA_Server_getNamespaceByNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_String,
              ffi.Pointer<ffi.Size>)>>('UA_Server_getNamespaceByName');
  late final _UA_Server_getNamespaceByName =
      _UA_Server_getNamespaceByNamePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, UA_String, ffi.Pointer<ffi.Size>)>();

  int UA_Server_getNamespaceByIndex(
    ffi.Pointer<UA_Server> server,
    int namespaceIndex,
    ffi.Pointer<UA_String> foundUri,
  ) {
    return _UA_Server_getNamespaceByIndex(
      server,
      namespaceIndex,
      foundUri,
    );
  }

  late final _UA_Server_getNamespaceByIndexPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Size,
              ffi.Pointer<UA_String>)>>('UA_Server_getNamespaceByIndex');
  late final _UA_Server_getNamespaceByIndex =
      _UA_Server_getNamespaceByIndexPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_String>)>();

  int UA_Server_setMethodNodeAsync(
    ffi.Pointer<UA_Server> server,
    UA_NodeId id,
    bool isAsync,
  ) {
    return _UA_Server_setMethodNodeAsync(
      server,
      id,
      isAsync,
    );
  }

  late final _UA_Server_setMethodNodeAsyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, UA_NodeId,
              ffi.Bool)>>('UA_Server_setMethodNodeAsync');
  late final _UA_Server_setMethodNodeAsync = _UA_Server_setMethodNodeAsyncPtr
      .asFunction<int Function(ffi.Pointer<UA_Server>, UA_NodeId, bool)>();

  bool UA_Server_getAsyncOperationNonBlocking(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>> request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> context,
    ffi.Pointer<UA_DateTime> timeout,
  ) {
    return _UA_Server_getAsyncOperationNonBlocking(
      server,
      type,
      request,
      context,
      timeout,
    );
  }

  late final _UA_Server_getAsyncOperationNonBlockingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<UA_DateTime>)>>(
      'UA_Server_getAsyncOperationNonBlocking');
  late final _UA_Server_getAsyncOperationNonBlocking =
      _UA_Server_getAsyncOperationNonBlockingPtr.asFunction<
          bool Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_DateTime>)>();

  void UA_Server_setAsyncOperationResult(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_AsyncOperationResponse> response,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_Server_setAsyncOperationResult(
      server,
      response,
      context,
    );
  }

  late final _UA_Server_setAsyncOperationResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_AsyncOperationResponse>,
              ffi.Pointer<ffi.Void>)>>('UA_Server_setAsyncOperationResult');
  late final _UA_Server_setAsyncOperationResult =
      _UA_Server_setAsyncOperationResultPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_AsyncOperationResponse>, ffi.Pointer<ffi.Void>)>();

  UA_ServerStatistics UA_Server_getStatistics(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_getStatistics(
      server,
    );
  }

  late final _UA_Server_getStatisticsPtr = _lookup<
      ffi.NativeFunction<
          UA_ServerStatistics Function(
              ffi.Pointer<UA_Server>)>>('UA_Server_getStatistics');
  late final _UA_Server_getStatistics = _UA_Server_getStatisticsPtr.asFunction<
      UA_ServerStatistics Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_Client> UA_Client_newWithConfig(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_Client_newWithConfig(
      config,
    );
  }

  late final _UA_Client_newWithConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Client> Function(
              ffi.Pointer<UA_ClientConfig>)>>('UA_Client_newWithConfig');
  late final _UA_Client_newWithConfig = _UA_Client_newWithConfigPtr.asFunction<
      ffi.Pointer<UA_Client> Function(ffi.Pointer<UA_ClientConfig>)>();

  void UA_Client_getState(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Int32> channelState,
    ffi.Pointer<ffi.Int32> sessionState,
    ffi.Pointer<UA_StatusCode> connectStatus,
  ) {
    return _UA_Client_getState(
      client,
      channelState,
      sessionState,
      connectStatus,
    );
  }

  late final _UA_Client_getStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<UA_StatusCode>)>>('UA_Client_getState');
  late final _UA_Client_getState = _UA_Client_getStatePtr.asFunction<
      void Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int32>, ffi.Pointer<UA_StatusCode>)>();

  ffi.Pointer<UA_ClientConfig> UA_Client_getConfig(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_getConfig(
      client,
    );
  }

  late final _UA_Client_getConfigPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ClientConfig> Function(
              ffi.Pointer<UA_Client>)>>('UA_Client_getConfig');
  late final _UA_Client_getConfig = _UA_Client_getConfigPtr.asFunction<
      ffi.Pointer<UA_ClientConfig> Function(ffi.Pointer<UA_Client>)>();

  ffi.Pointer<ffi.Void> UA_Client_getContext(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_getContext(
      client,
    );
  }

  late final _UA_Client_getContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UA_Client>)>>('UA_Client_getContext');
  late final _UA_Client_getContext = _UA_Client_getContextPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_delete(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_delete(
      client,
    );
  }

  late final _UA_Client_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_delete');
  late final _UA_Client_delete =
      _UA_Client_deletePtr.asFunction<void Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_connect(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connect(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connect');
  late final _UA_Client_connect = _UA_Client_connectPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectAsyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectAsync');
  late final _UA_Client_connectAsync = _UA_Client_connectAsyncPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannel(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannel(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectSecureChannel');
  late final _UA_Client_connectSecureChannel =
      _UA_Client_connectSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectSecureChannelAsync(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
  ) {
    return _UA_Client_connectSecureChannelAsync(
      client,
      endpointUrl,
    );
  }

  late final _UA_Client_connectSecureChannelAsyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectSecureChannelAsync');
  late final _UA_Client_connectSecureChannelAsync =
      _UA_Client_connectSecureChannelAsyncPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_connectUsername(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> endpointUrl,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _UA_Client_connectUsername(
      client,
      endpointUrl,
      username,
      password,
    );
  }

  late final _UA_Client_connectUsernamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('UA_Client_connectUsername');
  late final _UA_Client_connectUsername =
      _UA_Client_connectUsernamePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int UA_Client_disconnect(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnect(
      client,
    );
  }

  late final _UA_Client_disconnectPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnect');
  late final _UA_Client_disconnect = _UA_Client_disconnectPtr.asFunction<
      int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectAsync(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectAsync(
      client,
    );
  }

  late final _UA_Client_disconnectAsyncPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnectAsync');
  late final _UA_Client_disconnectAsync = _UA_Client_disconnectAsyncPtr
      .asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_disconnectSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_disconnectSecureChannel(
      client,
    );
  }

  late final _UA_Client_disconnectSecureChannelPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_disconnectSecureChannel');
  late final _UA_Client_disconnectSecureChannel =
      _UA_Client_disconnectSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_getEndpoints(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    ffi.Pointer<ffi.Size> endpointDescriptionsSize,
    ffi.Pointer<ffi.Pointer<UA_EndpointDescription>> endpointDescriptions,
  ) {
    return _UA_Client_getEndpoints(
      client,
      serverUrl,
      endpointDescriptionsSize,
      endpointDescriptions,
    );
  }

  late final _UA_Client_getEndpointsPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>>(
      'UA_Client_getEndpoints');
  late final _UA_Client_getEndpoints = _UA_Client_getEndpointsPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>();

  int UA_Client_findServers(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Char> serverUrl,
    int serverUrisSize,
    ffi.Pointer<UA_String> serverUris,
    int localeIdsSize,
    ffi.Pointer<UA_String> localeIds,
    ffi.Pointer<ffi.Size> registeredServersSize,
    ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>> registeredServers,
  ) {
    return _UA_Client_findServers(
      client,
      serverUrl,
      serverUrisSize,
      serverUris,
      localeIdsSize,
      localeIds,
      registeredServersSize,
      registeredServers,
    );
  }

  late final _UA_Client_findServersPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Size,
                  ffi.Pointer<UA_String>,
                  ffi.Size,
                  ffi.Pointer<UA_String>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>>(
      'UA_Client_findServers');
  late final _UA_Client_findServers = _UA_Client_findServersPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<UA_String>,
          int,
          ffi.Pointer<UA_String>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_ApplicationDescription>>)>();

  int UA_Client_sendAsyncRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> request,
    ffi.Pointer<UA_DataType> requestType,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<UA_DataType> responseType,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_sendAsyncRequest(
      client,
      request,
      requestType,
      callback,
      responseType,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_sendAsyncRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncRequest');
  late final _UA_Client_sendAsyncRequest =
      _UA_Client_sendAsyncRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_modifyAsyncCallback(
    ffi.Pointer<UA_Client> client,
    int requestId,
    ffi.Pointer<ffi.Void> userdata,
    UA_ClientAsyncServiceCallback callback,
  ) {
    return _UA_Client_modifyAsyncCallback(
      client,
      requestId,
      userdata,
      callback,
    );
  }

  late final _UA_Client_modifyAsyncCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_UInt32,
              ffi.Pointer<ffi.Void>,
              UA_ClientAsyncServiceCallback)>>('UA_Client_modifyAsyncCallback');
  late final _UA_Client_modifyAsyncCallback =
      _UA_Client_modifyAsyncCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, ffi.Pointer<ffi.Void>,
              UA_ClientAsyncServiceCallback)>();

  int UA_Client_run_iterate(
    ffi.Pointer<UA_Client> client,
    int timeout,
  ) {
    return _UA_Client_run_iterate(
      client,
      timeout,
    );
  }

  late final _UA_Client_run_iteratePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>, UA_UInt32)>>('UA_Client_run_iterate');
  late final _UA_Client_run_iterate = _UA_Client_run_iteratePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, int)>();

  int UA_Client_renewSecureChannel(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_renewSecureChannel(
      client,
    );
  }

  late final _UA_Client_renewSecureChannelPtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Client>)>>(
      'UA_Client_renewSecureChannel');
  late final _UA_Client_renewSecureChannel = _UA_Client_renewSecureChannelPtr
      .asFunction<int Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_addTimedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addTimedCallback(
      client,
      callback,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Client_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ClientCallback,
              ffi.Pointer<ffi.Void>,
              UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addTimedCallback');
  late final _UA_Client_addTimedCallback =
      _UA_Client_addTimedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_ClientCallback,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_addRepeatedCallback(
    ffi.Pointer<UA_Client> client,
    UA_ClientCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Client_addRepeatedCallback(
      client,
      callback,
      data,
      interval_ms,
      callbackId,
    );
  }

  late final _UA_Client_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ClientCallback,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_UInt64>)>>('UA_Client_addRepeatedCallback');
  late final _UA_Client_addRepeatedCallback =
      _UA_Client_addRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_ClientCallback,
              ffi.Pointer<ffi.Void>, double, ffi.Pointer<UA_UInt64>)>();

  int UA_Client_changeRepeatedCallbackInterval(
    ffi.Pointer<UA_Client> client,
    int callbackId,
    double interval_ms,
  ) {
    return _UA_Client_changeRepeatedCallbackInterval(
      client,
      callbackId,
      interval_ms,
    );
  }

  late final _UA_Client_changeRepeatedCallbackIntervalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt64,
              UA_Double)>>('UA_Client_changeRepeatedCallbackInterval');
  late final _UA_Client_changeRepeatedCallbackInterval =
      _UA_Client_changeRepeatedCallbackIntervalPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, double)>();

  void UA_Client_removeCallback(
    ffi.Pointer<UA_Client> client,
    int callbackId,
  ) {
    return _UA_Client_removeCallback(
      client,
      callbackId,
    );
  }

  late final _UA_Client_removeCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>, UA_UInt64)>>('UA_Client_removeCallback');
  late final _UA_Client_removeCallback = _UA_Client_removeCallbackPtr
      .asFunction<void Function(ffi.Pointer<UA_Client>, int)>();

  /// Client Utility Functions
  /// ------------------------
  ffi.Pointer<UA_DataType> UA_Client_findDataType(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_Client_findDataType(
      client,
      typeId,
    );
  }

  late final _UA_Client_findDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_findDataType');
  late final _UA_Client_findDataType = _UA_Client_findDataTypePtr.asFunction<
      ffi.Pointer<UA_DataType> Function(
          ffi.Pointer<UA_Client>, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
  ) {
    return _UA_Client_readNodeIdAttribute(
      client,
      nodeId,
      outNodeId,
    );
  }

  late final _UA_Client_readNodeIdAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_readNodeIdAttribute');
  late final _UA_Client_readNodeIdAttribute =
      _UA_Client_readNodeIdAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
  ) {
    return _UA_Client_readNodeClassAttribute(
      client,
      nodeId,
      outNodeClass,
    );
  }

  late final _UA_Client_readNodeClassAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Client_readNodeClassAttribute');
  late final _UA_Client_readNodeClassAttribute =
      _UA_Client_readNodeClassAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Client_readBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
  ) {
    return _UA_Client_readBrowseNameAttribute(
      client,
      nodeId,
      outBrowseName,
    );
  }

  late final _UA_Client_readBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_readBrowseNameAttribute');
  late final _UA_Client_readBrowseNameAttribute =
      _UA_Client_readBrowseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_readDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
  ) {
    return _UA_Client_readDisplayNameAttribute(
      client,
      nodeId,
      outDisplayName,
    );
  }

  late final _UA_Client_readDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDisplayNameAttribute');
  late final _UA_Client_readDisplayNameAttribute =
      _UA_Client_readDisplayNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
  ) {
    return _UA_Client_readDescriptionAttribute(
      client,
      nodeId,
      outDescription,
    );
  }

  late final _UA_Client_readDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readDescriptionAttribute');
  late final _UA_Client_readDescriptionAttribute =
      _UA_Client_readDescriptionAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
  ) {
    return _UA_Client_readWriteMaskAttribute(
      client,
      nodeId,
      outWriteMask,
    );
  }

  late final _UA_Client_readWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readWriteMaskAttribute');
  late final _UA_Client_readWriteMaskAttribute =
      _UA_Client_readWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outUserWriteMask,
  ) {
    return _UA_Client_readUserWriteMaskAttribute(
      client,
      nodeId,
      outUserWriteMask,
    );
  }

  late final _UA_Client_readUserWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readUserWriteMaskAttribute');
  late final _UA_Client_readUserWriteMaskAttribute =
      _UA_Client_readUserWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
  ) {
    return _UA_Client_readIsAbstractAttribute(
      client,
      nodeId,
      outIsAbstract,
    );
  }

  late final _UA_Client_readIsAbstractAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readIsAbstractAttribute');
  late final _UA_Client_readIsAbstractAttribute =
      _UA_Client_readIsAbstractAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
  ) {
    return _UA_Client_readSymmetricAttribute(
      client,
      nodeId,
      outSymmetric,
    );
  }

  late final _UA_Client_readSymmetricAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readSymmetricAttribute');
  late final _UA_Client_readSymmetricAttribute =
      _UA_Client_readSymmetricAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
  ) {
    return _UA_Client_readInverseNameAttribute(
      client,
      nodeId,
      outInverseName,
    );
  }

  late final _UA_Client_readInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_readInverseNameAttribute');
  late final _UA_Client_readInverseNameAttribute =
      _UA_Client_readInverseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_readContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute(
      client,
      nodeId,
      outContainsNoLoops,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_readContainsNoLoopsAttribute');
  late final _UA_Client_readContainsNoLoopsAttribute =
      _UA_Client_readContainsNoLoopsAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
  ) {
    return _UA_Client_readEventNotifierAttribute(
      client,
      nodeId,
      outEventNotifier,
    );
  }

  late final _UA_Client_readEventNotifierAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readEventNotifierAttribute');
  late final _UA_Client_readEventNotifierAttribute =
      _UA_Client_readEventNotifierAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> outValue,
  ) {
    return _UA_Client_readValueAttribute(
      client,
      nodeId,
      outValue,
    );
  }

  late final _UA_Client_readValueAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Client_readValueAttribute');
  late final _UA_Client_readValueAttribute =
      _UA_Client_readValueAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_readDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
  ) {
    return _UA_Client_readDataTypeAttribute(
      client,
      nodeId,
      outDataType,
    );
  }

  late final _UA_Client_readDataTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_readDataTypeAttribute');
  late final _UA_Client_readDataTypeAttribute =
      _UA_Client_readDataTypeAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_readValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
  ) {
    return _UA_Client_readValueRankAttribute(
      client,
      nodeId,
      outValueRank,
    );
  }

  late final _UA_Client_readValueRankAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Client_readValueRankAttribute');
  late final _UA_Client_readValueRankAttribute =
      _UA_Client_readValueRankAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_readArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Size> outArrayDimensionsSize,
    ffi.Pointer<ffi.Pointer<UA_UInt32>> outArrayDimensions,
  ) {
    return _UA_Client_readArrayDimensionsAttribute(
      client,
      nodeId,
      outArrayDimensionsSize,
      outArrayDimensions,
    );
  }

  late final _UA_Client_readArrayDimensionsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<UA_UInt32>>)>>(
      'UA_Client_readArrayDimensionsAttribute');
  late final _UA_Client_readArrayDimensionsAttribute =
      _UA_Client_readArrayDimensionsAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_UInt32>>)>();

  int UA_Client_readAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
  ) {
    return _UA_Client_readAccessLevelAttribute(
      client,
      nodeId,
      outAccessLevel,
    );
  }

  late final _UA_Client_readAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readAccessLevelAttribute');
  late final _UA_Client_readAccessLevelAttribute =
      _UA_Client_readAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outUserAccessLevel,
  ) {
    return _UA_Client_readUserAccessLevelAttribute(
      client,
      nodeId,
      outUserAccessLevel,
    );
  }

  late final _UA_Client_readUserAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_readUserAccessLevelAttribute');
  late final _UA_Client_readUserAccessLevelAttribute =
      _UA_Client_readUserAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinSamplingInterval,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      outMinSamplingInterval,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Client_readMinimumSamplingIntervalAttribute');
  late final _UA_Client_readMinimumSamplingIntervalAttribute =
      _UA_Client_readMinimumSamplingIntervalAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_readHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
  ) {
    return _UA_Client_readHistorizingAttribute(
      client,
      nodeId,
      outHistorizing,
    );
  }

  late final _UA_Client_readHistorizingAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readHistorizingAttribute');
  late final _UA_Client_readHistorizingAttribute =
      _UA_Client_readHistorizingAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
  ) {
    return _UA_Client_readExecutableAttribute(
      client,
      nodeId,
      outExecutable,
    );
  }

  late final _UA_Client_readExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readExecutableAttribute');
  late final _UA_Client_readExecutableAttribute =
      _UA_Client_readExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_readUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outUserExecutable,
  ) {
    return _UA_Client_readUserExecutableAttribute(
      client,
      nodeId,
      outUserExecutable,
    );
  }

  late final _UA_Client_readUserExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_readUserExecutableAttribute');
  late final _UA_Client_readUserExecutableAttribute =
      _UA_Client_readUserExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeNodeIdAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newNodeId,
  ) {
    return _UA_Client_writeNodeIdAttribute(
      client,
      nodeId,
      newNodeId,
    );
  }

  late final _UA_Client_writeNodeIdAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_writeNodeIdAttribute');
  late final _UA_Client_writeNodeIdAttribute =
      _UA_Client_writeNodeIdAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeNodeClassAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> newNodeClass,
  ) {
    return _UA_Client_writeNodeClassAttribute(
      client,
      nodeId,
      newNodeClass,
    );
  }

  late final _UA_Client_writeNodeClassAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Int32>)>>('UA_Client_writeNodeClassAttribute');
  late final _UA_Client_writeNodeClassAttribute =
      _UA_Client_writeNodeClassAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Int32>)>();

  int UA_Client_writeBrowseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> newBrowseName,
  ) {
    return _UA_Client_writeBrowseNameAttribute(
      client,
      nodeId,
      newBrowseName,
    );
  }

  late final _UA_Client_writeBrowseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>)>>(
      'UA_Client_writeBrowseNameAttribute');
  late final _UA_Client_writeBrowseNameAttribute =
      _UA_Client_writeBrowseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_Client_writeDisplayNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDisplayName,
  ) {
    return _UA_Client_writeDisplayNameAttribute(
      client,
      nodeId,
      newDisplayName,
    );
  }

  late final _UA_Client_writeDisplayNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDisplayNameAttribute');
  late final _UA_Client_writeDisplayNameAttribute =
      _UA_Client_writeDisplayNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeDescriptionAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newDescription,
  ) {
    return _UA_Client_writeDescriptionAttribute(
      client,
      nodeId,
      newDescription,
    );
  }

  late final _UA_Client_writeDescriptionAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeDescriptionAttribute');
  late final _UA_Client_writeDescriptionAttribute =
      _UA_Client_writeDescriptionAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newWriteMask,
  ) {
    return _UA_Client_writeWriteMaskAttribute(
      client,
      nodeId,
      newWriteMask,
    );
  }

  late final _UA_Client_writeWriteMaskAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeWriteMaskAttribute');
  late final _UA_Client_writeWriteMaskAttribute =
      _UA_Client_writeWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserWriteMaskAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> newUserWriteMask,
  ) {
    return _UA_Client_writeUserWriteMaskAttribute(
      client,
      nodeId,
      newUserWriteMask,
    );
  }

  late final _UA_Client_writeUserWriteMaskAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserWriteMaskAttribute');
  late final _UA_Client_writeUserWriteMaskAttribute =
      _UA_Client_writeUserWriteMaskAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newIsAbstract,
  ) {
    return _UA_Client_writeIsAbstractAttribute(
      client,
      nodeId,
      newIsAbstract,
    );
  }

  late final _UA_Client_writeIsAbstractAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeIsAbstractAttribute');
  late final _UA_Client_writeIsAbstractAttribute =
      _UA_Client_writeIsAbstractAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeSymmetricAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newSymmetric,
  ) {
    return _UA_Client_writeSymmetricAttribute(
      client,
      nodeId,
      newSymmetric,
    );
  }

  late final _UA_Client_writeSymmetricAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeSymmetricAttribute');
  late final _UA_Client_writeSymmetricAttribute =
      _UA_Client_writeSymmetricAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeInverseNameAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> newInverseName,
  ) {
    return _UA_Client_writeInverseNameAttribute(
      client,
      nodeId,
      newInverseName,
    );
  }

  late final _UA_Client_writeInverseNameAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>)>>(
      'UA_Client_writeInverseNameAttribute');
  late final _UA_Client_writeInverseNameAttribute =
      _UA_Client_writeInverseNameAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_Client_writeContainsNoLoopsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newContainsNoLoops,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute(
      client,
      nodeId,
      newContainsNoLoops,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_writeContainsNoLoopsAttribute');
  late final _UA_Client_writeContainsNoLoopsAttribute =
      _UA_Client_writeContainsNoLoopsAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeEventNotifierAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newEventNotifier,
  ) {
    return _UA_Client_writeEventNotifierAttribute(
      client,
      nodeId,
      newEventNotifier,
    );
  }

  late final _UA_Client_writeEventNotifierAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_writeEventNotifierAttribute');
  late final _UA_Client_writeEventNotifierAttribute =
      _UA_Client_writeEventNotifierAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeValueAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> newValue,
  ) {
    return _UA_Client_writeValueAttribute(
      client,
      nodeId,
      newValue,
    );
  }

  late final _UA_Client_writeValueAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Variant>)>>('UA_Client_writeValueAttribute');
  late final _UA_Client_writeValueAttribute =
      _UA_Client_writeValueAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Variant>)>();

  int UA_Client_writeDataTypeAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> newDataType,
  ) {
    return _UA_Client_writeDataTypeAttribute(
      client,
      nodeId,
      newDataType,
    );
  }

  late final _UA_Client_writeDataTypeAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_writeDataTypeAttribute');
  late final _UA_Client_writeDataTypeAttribute =
      _UA_Client_writeDataTypeAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_writeValueRankAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> newValueRank,
  ) {
    return _UA_Client_writeValueRankAttribute(
      client,
      nodeId,
      newValueRank,
    );
  }

  late final _UA_Client_writeValueRankAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Int32>)>>('UA_Client_writeValueRankAttribute');
  late final _UA_Client_writeValueRankAttribute =
      _UA_Client_writeValueRankAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Int32>)>();

  int UA_Client_writeArrayDimensionsAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    int newArrayDimensionsSize,
    ffi.Pointer<UA_UInt32> newArrayDimensions,
  ) {
    return _UA_Client_writeArrayDimensionsAttribute(
      client,
      nodeId,
      newArrayDimensionsSize,
      newArrayDimensions,
    );
  }

  late final _UA_Client_writeArrayDimensionsAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
                  ffi.Size, ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeArrayDimensionsAttribute');
  late final _UA_Client_writeArrayDimensionsAttribute =
      _UA_Client_writeArrayDimensionsAttributePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, int,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newAccessLevel,
  ) {
    return _UA_Client_writeAccessLevelAttribute(
      client,
      nodeId,
      newAccessLevel,
    );
  }

  late final _UA_Client_writeAccessLevelAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<UA_Byte>)>>('UA_Client_writeAccessLevelAttribute');
  late final _UA_Client_writeAccessLevelAttribute =
      _UA_Client_writeAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeUserAccessLevelAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> newUserAccessLevel,
  ) {
    return _UA_Client_writeUserAccessLevelAttribute(
      client,
      nodeId,
      newUserAccessLevel,
    );
  }

  late final _UA_Client_writeUserAccessLevelAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>>(
      'UA_Client_writeUserAccessLevelAttribute');
  late final _UA_Client_writeUserAccessLevelAttribute =
      _UA_Client_writeUserAccessLevelAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Byte>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> newMinInterval,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute(
      client,
      nodeId,
      newMinInterval,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>>(
      'UA_Client_writeMinimumSamplingIntervalAttribute');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute =
      _UA_Client_writeMinimumSamplingIntervalAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<UA_Double>)>();

  int UA_Client_writeHistorizingAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newHistorizing,
  ) {
    return _UA_Client_writeHistorizingAttribute(
      client,
      nodeId,
      newHistorizing,
    );
  }

  late final _UA_Client_writeHistorizingAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeHistorizingAttribute');
  late final _UA_Client_writeHistorizingAttribute =
      _UA_Client_writeHistorizingAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newExecutable,
  ) {
    return _UA_Client_writeExecutableAttribute(
      client,
      nodeId,
      newExecutable,
    );
  }

  late final _UA_Client_writeExecutableAttributePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Pointer<ffi.Bool>)>>('UA_Client_writeExecutableAttribute');
  late final _UA_Client_writeExecutableAttribute =
      _UA_Client_writeExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_writeUserExecutableAttribute(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> newUserExecutable,
  ) {
    return _UA_Client_writeUserExecutableAttribute(
      client,
      nodeId,
      newUserExecutable,
    );
  }

  late final _UA_Client_writeUserExecutableAttributePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>>(
      'UA_Client_writeUserExecutableAttribute');
  late final _UA_Client_writeUserExecutableAttribute =
      _UA_Client_writeUserExecutableAttributePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, UA_NodeId, ffi.Pointer<ffi.Bool>)>();

  int UA_Client_call(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Pointer<ffi.Size> outputSize,
    ffi.Pointer<ffi.Pointer<UA_Variant>> output,
  ) {
    return _UA_Client_call(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      outputSize,
      output,
    );
  }

  late final _UA_Client_callPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Size,
              ffi.Pointer<UA_Variant>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_Variant>>)>>('UA_Client_call');
  late final _UA_Client_call = _UA_Client_callPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          int,
          ffi.Pointer<UA_Variant>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Pointer<UA_Variant>>)>();

  /// Node Management
  /// ^^^^^^^^^^^^^^^
  /// See the section on :ref:`server-side node management <addnodes>`.
  int UA_Client_addReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_String targetServerUri,
    UA_ExpandedNodeId targetNodeId,
    int targetNodeClass,
  ) {
    return _UA_Client_addReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetServerUri,
      targetNodeId,
      targetNodeClass,
    );
  }

  late final _UA_Client_addReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_String,
              UA_ExpandedNodeId,
              ffi.Int32)>>('UA_Client_addReference');
  late final _UA_Client_addReference = _UA_Client_addReferencePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool,
          UA_String, UA_ExpandedNodeId, int)>();

  int UA_Client_deleteReference(
    ffi.Pointer<UA_Client> client,
    UA_NodeId sourceNodeId,
    UA_NodeId referenceTypeId,
    bool isForward,
    UA_ExpandedNodeId targetNodeId,
    bool deleteBidirectional,
  ) {
    return _UA_Client_deleteReference(
      client,
      sourceNodeId,
      referenceTypeId,
      isForward,
      targetNodeId,
      deleteBidirectional,
    );
  }

  late final _UA_Client_deleteReferencePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Bool,
              UA_ExpandedNodeId,
              ffi.Bool)>>('UA_Client_deleteReference');
  late final _UA_Client_deleteReference =
      _UA_Client_deleteReferencePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, bool,
              UA_ExpandedNodeId, bool)>();

  int UA_Client_deleteNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    bool deleteTargetReferences,
  ) {
    return _UA_Client_deleteNode(
      client,
      nodeId,
      deleteTargetReferences,
    );
  }

  late final _UA_Client_deleteNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_NodeId,
              ffi.Bool)>>('UA_Client_deleteNode');
  late final _UA_Client_deleteNode = _UA_Client_deleteNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, bool)>();

  int UA_Client_addVariableNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableNode');
  late final _UA_Client_addVariableNode =
      _UA_Client_addVariableNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addVariableTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addVariableTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addVariableTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addVariableTypeNode');
  late final _UA_Client_addVariableTypeNode =
      _UA_Client_addVariableTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectNode');
  late final _UA_Client_addObjectNode = _UA_Client_addObjectNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          UA_NodeId,
          UA_QualifiedName,
          UA_NodeId,
          UA_ObjectAttributes,
          ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addObjectTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addObjectTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addObjectTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addObjectTypeNode');
  late final _UA_Client_addObjectTypeNode =
      _UA_Client_addObjectTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addViewNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addViewNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addViewNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addViewNode');
  late final _UA_Client_addViewNode = _UA_Client_addViewNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId,
          UA_QualifiedName, UA_ViewAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addReferenceTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addReferenceTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addReferenceTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addReferenceTypeNode');
  late final _UA_Client_addReferenceTypeNode =
      _UA_Client_addReferenceTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addDataTypeNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addDataTypeNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addDataTypeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addDataTypeNode');
  late final _UA_Client_addDataTypeNode =
      _UA_Client_addDataTypeNodePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>)>();

  int UA_Client_addMethodNode(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
  ) {
    return _UA_Client_addMethodNode(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
    );
  }

  late final _UA_Client_addMethodNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>)>>('UA_Client_addMethodNode');
  late final _UA_Client_addMethodNode = _UA_Client_addMethodNodePtr.asFunction<
      int Function(ffi.Pointer<UA_Client>, UA_NodeId, UA_NodeId, UA_NodeId,
          UA_QualifiedName, UA_MethodAttributes, ffi.Pointer<UA_NodeId>)>();

  int UA_Client_NamespaceGetIndex(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_String> namespaceUri,
    ffi.Pointer<UA_UInt16> namespaceIndex,
  ) {
    return _UA_Client_NamespaceGetIndex(
      client,
      namespaceUri,
      namespaceIndex,
    );
  }

  late final _UA_Client_NamespaceGetIndexPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>)>>('UA_Client_NamespaceGetIndex');
  late final _UA_Client_NamespaceGetIndex =
      _UA_Client_NamespaceGetIndexPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_String>,
              ffi.Pointer<UA_UInt16>)>();

  int UA_Client_forEachChildNodeCall(
    ffi.Pointer<UA_Client> client,
    UA_NodeId parentNodeId,
    UA_NodeIteratorCallback callback,
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _UA_Client_forEachChildNodeCall(
      client,
      parentNodeId,
      callback,
      handle,
    );
  }

  late final _UA_Client_forEachChildNodeCallPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeIteratorCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Client_forEachChildNodeCall');
  late final _UA_Client_forEachChildNodeCall =
      _UA_Client_forEachChildNodeCallPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_NodeId,
              UA_NodeIteratorCallback, ffi.Pointer<ffi.Void>)>();

  UA_CreateSubscriptionRequest UA_CreateSubscriptionRequest_default() {
    return _UA_CreateSubscriptionRequest_default();
  }

  late final _UA_CreateSubscriptionRequest_defaultPtr =
      _lookup<ffi.NativeFunction<UA_CreateSubscriptionRequest Function()>>(
          'UA_CreateSubscriptionRequest_default');
  late final _UA_CreateSubscriptionRequest_default =
      _UA_CreateSubscriptionRequest_defaultPtr.asFunction<
          UA_CreateSubscriptionRequest Function()>();

  int UA_Client_Subscriptions_create_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateSubscriptionRequest request,
    ffi.Pointer<ffi.Void> subscriptionContext,
    UA_Client_StatusChangeNotificationCallback statusChangeCallback,
    UA_Client_DeleteSubscriptionCallback deleteCallback,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_create_async(
      client,
      request,
      subscriptionContext,
      statusChangeCallback,
      deleteCallback,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_create_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_create_async');
  late final _UA_Client_Subscriptions_create_async =
      _UA_Client_Subscriptions_create_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifySubscriptionRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_modify_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_ModifySubscriptionRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_modify_async');
  late final _UA_Client_Subscriptions_modify_async =
      _UA_Client_Subscriptions_modify_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_ModifySubscriptionRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteSubscriptionsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_Subscriptions_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_Subscriptions_delete_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteSubscriptionsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_Subscriptions_delete_async');
  late final _UA_Client_Subscriptions_delete_async =
      _UA_Client_Subscriptions_delete_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteSubscriptionsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_Subscriptions_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
  ) {
    return _UA_Client_Subscriptions_deleteSingle(
      client,
      subscriptionId,
    );
  }

  late final _UA_Client_Subscriptions_deleteSinglePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>,
              UA_UInt32)>>('UA_Client_Subscriptions_deleteSingle');
  late final _UA_Client_Subscriptions_deleteSingle =
      _UA_Client_Subscriptions_deleteSinglePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int)>();

  /// MonitoredItems
  /// --------------
  ///
  /// MonitoredItems for Events indicate the ``EventNotifier`` attribute. This
  /// indicates to the server not to monitor changes of the attribute, but to
  /// forward Event notifications from that node.
  ///
  /// During the creation of a MonitoredItem, the server may return changed
  /// adjusted parameters. Check the returned ``UA_CreateMonitoredItemsResponse``
  /// to get the current parameters.
  UA_MonitoredItemCreateRequest UA_MonitoredItemCreateRequest_default(
    UA_NodeId nodeId,
  ) {
    return _UA_MonitoredItemCreateRequest_default(
      nodeId,
    );
  }

  late final _UA_MonitoredItemCreateRequest_defaultPtr = _lookup<
          ffi
          .NativeFunction<UA_MonitoredItemCreateRequest Function(UA_NodeId)>>(
      'UA_MonitoredItemCreateRequest_default');
  late final _UA_MonitoredItemCreateRequest_default =
      _UA_MonitoredItemCreateRequest_defaultPtr.asFunction<
          UA_MonitoredItemCreateRequest Function(UA_NodeId)>();

  int UA_Client_MonitoredItems_createDataChanges_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_DataChangeNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncServiceCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createDataChanges_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChanges_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_CreateMonitoredItemsRequest,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
                  ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_createDataChanges_async');
  late final _UA_Client_MonitoredItems_createDataChanges_async =
      _UA_Client_MonitoredItems_createDataChanges_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_DataChangeNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createDataChange(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_DataChangeNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createDataChange(
      client,
      subscriptionId,
      timestampsToReturn,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createDataChangePtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Client>,
                  UA_UInt32,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Client_DataChangeNotificationCallback,
                  UA_Client_DeleteMonitoredItemCallback)>>(
      'UA_Client_MonitoredItems_createDataChange');
  late final _UA_Client_MonitoredItems_createDataChange =
      _UA_Client_MonitoredItems_createDataChangePtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              int,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_DataChangeNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>();

  int UA_Client_MonitoredItems_createEvents_async(
    ffi.Pointer<UA_Client> client,
    UA_CreateMonitoredItemsRequest request,
    ffi.Pointer<ffi.Pointer<ffi.Void>> contexts,
    ffi.Pointer<UA_Client_EventNotificationCallback> callbacks,
    ffi.Pointer<UA_Client_DeleteMonitoredItemCallback> deleteCallbacks,
    UA_ClientAsyncServiceCallback createCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_createEvents_async(
      client,
      request,
      contexts,
      callbacks,
      deleteCallbacks,
      createCallback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_createEvents_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_CreateMonitoredItemsRequest,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<UA_Client_EventNotificationCallback>,
                  ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_createEvents_async');
  late final _UA_Client_MonitoredItems_createEvents_async =
      _UA_Client_MonitoredItems_createEvents_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_CreateMonitoredItemsRequest,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<UA_Client_EventNotificationCallback>,
              ffi.Pointer<UA_Client_DeleteMonitoredItemCallback>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  UA_MonitoredItemCreateResult UA_Client_MonitoredItems_createEvent(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int timestampsToReturn,
    UA_MonitoredItemCreateRequest item,
    ffi.Pointer<ffi.Void> context,
    UA_Client_EventNotificationCallback callback,
    UA_Client_DeleteMonitoredItemCallback deleteCallback,
  ) {
    return _UA_Client_MonitoredItems_createEvent(
      client,
      subscriptionId,
      timestampsToReturn,
      item,
      context,
      callback,
      deleteCallback,
    );
  }

  late final _UA_Client_MonitoredItems_createEventPtr = _lookup<
          ffi.NativeFunction<
              UA_MonitoredItemCreateResult Function(
                  ffi.Pointer<UA_Client>,
                  UA_UInt32,
                  ffi.Int32,
                  UA_MonitoredItemCreateRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Client_EventNotificationCallback,
                  UA_Client_DeleteMonitoredItemCallback)>>(
      'UA_Client_MonitoredItems_createEvent');
  late final _UA_Client_MonitoredItems_createEvent =
      _UA_Client_MonitoredItems_createEventPtr.asFunction<
          UA_MonitoredItemCreateResult Function(
              ffi.Pointer<UA_Client>,
              int,
              int,
              UA_MonitoredItemCreateRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_EventNotificationCallback,
              UA_Client_DeleteMonitoredItemCallback)>();

  int UA_Client_MonitoredItems_delete_async(
    ffi.Pointer<UA_Client> client,
    UA_DeleteMonitoredItemsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_delete_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_delete_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_DeleteMonitoredItemsRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_delete_async');
  late final _UA_Client_MonitoredItems_delete_async =
      _UA_Client_MonitoredItems_delete_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_DeleteMonitoredItemsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_deleteSingle(
    ffi.Pointer<UA_Client> client,
    int subscriptionId,
    int monitoredItemId,
  ) {
    return _UA_Client_MonitoredItems_deleteSingle(
      client,
      subscriptionId,
      monitoredItemId,
    );
  }

  late final _UA_Client_MonitoredItems_deleteSinglePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Client>, UA_UInt32,
              UA_UInt32)>>('UA_Client_MonitoredItems_deleteSingle');
  late final _UA_Client_MonitoredItems_deleteSingle =
      _UA_Client_MonitoredItems_deleteSinglePtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, int, int)>();

  int UA_Client_MonitoredItems_modify_async(
    ffi.Pointer<UA_Client> client,
    UA_ModifyMonitoredItemsRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_modify_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_modify_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_ModifyMonitoredItemsRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_modify_async');
  late final _UA_Client_MonitoredItems_modify_async =
      _UA_Client_MonitoredItems_modify_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_ModifyMonitoredItemsRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_setMonitoringMode_async(
    ffi.Pointer<UA_Client> client,
    UA_SetMonitoringModeRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setMonitoringMode_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_SetMonitoringModeRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_setMonitoringMode_async');
  late final _UA_Client_MonitoredItems_setMonitoringMode_async =
      _UA_Client_MonitoredItems_setMonitoringMode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_SetMonitoringModeRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_MonitoredItems_setTriggering_async(
    ffi.Pointer<UA_Client> client,
    UA_SetTriggeringRequest request,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_MonitoredItems_setTriggering_async(
      client,
      request,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_MonitoredItems_setTriggering_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_SetTriggeringRequest,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_MonitoredItems_setTriggering_async');
  late final _UA_Client_MonitoredItems_setTriggering_async =
      _UA_Client_MonitoredItems_setTriggering_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_SetTriggeringRequest,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncReadRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadRequest> request,
    UA_ClientAsyncReadCallback readCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncReadRequest(
      client,
      request,
      readCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncReadRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadRequest>,
              UA_ClientAsyncReadCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncReadRequest');
  late final _UA_Client_sendAsyncReadRequest =
      _UA_Client_sendAsyncReadRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadRequest>,
              UA_ClientAsyncReadCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncWriteRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_WriteRequest> request,
    UA_ClientAsyncWriteCallback writeCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncWriteRequest(
      client,
      request,
      writeCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncWriteRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_WriteRequest>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncWriteRequest');
  late final _UA_Client_sendAsyncWriteRequest =
      _UA_Client_sendAsyncWriteRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_WriteRequest>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_sendAsyncBrowseRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_BrowseRequest> request,
    UA_ClientAsyncBrowseCallback browseCallback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_sendAsyncBrowseRequest(
      client,
      request,
      browseCallback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_sendAsyncBrowseRequestPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_BrowseRequest>,
              UA_ClientAsyncBrowseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_sendAsyncBrowseRequest');
  late final _UA_Client_sendAsyncBrowseRequest =
      _UA_Client_sendAsyncBrowseRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_BrowseRequest>,
              UA_ClientAsyncBrowseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAttribute_async(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_ReadValueId> rvi,
    int timestampsToReturn,
    UA_ClientAsyncReadAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAttribute_async(
      client,
      rvi,
      timestampsToReturn,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadValueId>,
              ffi.Int32,
              UA_ClientAsyncReadAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readAttribute_async');
  late final _UA_Client_readAttribute_async =
      _UA_Client_readAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_ReadValueId>,
              int,
              UA_ClientAsyncReadAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_readValueAttribute_async');
  late final _UA_Client_readValueAttribute_async =
      _UA_Client_readValueAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDataTypeAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDataTypeAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDataTypeAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDataTypeAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDataTypeAttribute_async');
  late final _UA_Client_readDataTypeAttribute_async =
      _UA_Client_readDataTypeAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDataTypeAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readArrayDimensionsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientReadArrayDimensionsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readArrayDimensionsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readArrayDimensionsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientReadArrayDimensionsAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readArrayDimensionsAttribute_async');
  late final _UA_Client_readArrayDimensionsAttribute_async =
      _UA_Client_readArrayDimensionsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientReadArrayDimensionsAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadNodeClassAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readNodeClassAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readNodeClassAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadNodeClassAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readNodeClassAttribute_async');
  late final _UA_Client_readNodeClassAttribute_async =
      _UA_Client_readNodeClassAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadNodeClassAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadBrowseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readBrowseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readBrowseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadBrowseNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readBrowseNameAttribute_async');
  late final _UA_Client_readBrowseNameAttribute_async =
      _UA_Client_readBrowseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadBrowseNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDisplayNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDisplayNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDisplayNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDisplayNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDisplayNameAttribute_async');
  late final _UA_Client_readDisplayNameAttribute_async =
      _UA_Client_readDisplayNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDisplayNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadDescriptionAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readDescriptionAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readDescriptionAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadDescriptionAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readDescriptionAttribute_async');
  late final _UA_Client_readDescriptionAttribute_async =
      _UA_Client_readDescriptionAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadDescriptionAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadWriteMaskAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readWriteMaskAttribute_async');
  late final _UA_Client_readWriteMaskAttribute_async =
      _UA_Client_readWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserWriteMaskAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserWriteMaskAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserWriteMaskAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserWriteMaskAttribute_async');
  late final _UA_Client_readUserWriteMaskAttribute_async =
      _UA_Client_readUserWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserWriteMaskAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadIsAbstractAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readIsAbstractAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readIsAbstractAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadIsAbstractAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readIsAbstractAttribute_async');
  late final _UA_Client_readIsAbstractAttribute_async =
      _UA_Client_readIsAbstractAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadIsAbstractAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadSymmetricAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readSymmetricAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readSymmetricAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadSymmetricAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readSymmetricAttribute_async');
  late final _UA_Client_readSymmetricAttribute_async =
      _UA_Client_readSymmetricAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadSymmetricAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadInverseNameAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readInverseNameAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readInverseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadInverseNameAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readInverseNameAttribute_async');
  late final _UA_Client_readInverseNameAttribute_async =
      _UA_Client_readInverseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadInverseNameAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadContainsNoLoopsAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readContainsNoLoopsAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readContainsNoLoopsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readContainsNoLoopsAttribute_async');
  late final _UA_Client_readContainsNoLoopsAttribute_async =
      _UA_Client_readContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadContainsNoLoopsAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadEventNotifierAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readEventNotifierAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readEventNotifierAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadEventNotifierAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readEventNotifierAttribute_async');
  late final _UA_Client_readEventNotifierAttribute_async =
      _UA_Client_readEventNotifierAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadEventNotifierAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadValueRankAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readValueRankAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readValueRankAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadValueRankAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readValueRankAttribute_async');
  late final _UA_Client_readValueRankAttribute_async =
      _UA_Client_readValueRankAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadValueRankAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadAccessLevelAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readAccessLevelAttribute_async');
  late final _UA_Client_readAccessLevelAttribute_async =
      _UA_Client_readAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserAccessLevelAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserAccessLevelAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserAccessLevelAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserAccessLevelAttribute_async');
  late final _UA_Client_readUserAccessLevelAttribute_async =
      _UA_Client_readUserAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserAccessLevelAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_readMinimumSamplingIntervalAttribute_async =
      _UA_Client_readMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadHistorizingAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readHistorizingAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readHistorizingAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadHistorizingAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readHistorizingAttribute_async');
  late final _UA_Client_readHistorizingAttribute_async =
      _UA_Client_readHistorizingAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadHistorizingAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadExecutableAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readExecutableAttribute_async');
  late final _UA_Client_readExecutableAttribute_async =
      _UA_Client_readExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_readUserExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    UA_ClientAsyncReadUserExecutableAttributeCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> requestId,
  ) {
    return _UA_Client_readUserExecutableAttribute_async(
      client,
      nodeId,
      callback,
      userdata,
      requestId,
    );
  }

  late final _UA_Client_readUserExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  UA_ClientAsyncReadUserExecutableAttributeCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_readUserExecutableAttribute_async');
  late final _UA_Client_readUserExecutableAttribute_async =
      _UA_Client_readUserExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_ClientAsyncReadUserExecutableAttributeCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Variant> newValue,
    UA_ClientAsyncWriteCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueAttribute_async(
      client,
      nodeId,
      newValue,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeValueAttribute_async');
  late final _UA_Client_writeValueAttribute_async =
      _UA_Client_writeValueAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeIdAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outNodeId,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeIdAttribute_async(
      client,
      nodeId,
      outNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeIdAttribute_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_writeNodeIdAttribute_async');
  late final _UA_Client_writeNodeIdAttribute_async =
      _UA_Client_writeNodeIdAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeNodeClassAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Int32> outNodeClass,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeNodeClassAttribute_async(
      client,
      nodeId,
      outNodeClass,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeNodeClassAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Int32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeNodeClassAttribute_async');
  late final _UA_Client_writeNodeClassAttribute_async =
      _UA_Client_writeNodeClassAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Int32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeBrowseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_QualifiedName> outBrowseName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeBrowseNameAttribute_async(
      client,
      nodeId,
      outBrowseName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeBrowseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_QualifiedName>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeBrowseNameAttribute_async');
  late final _UA_Client_writeBrowseNameAttribute_async =
      _UA_Client_writeBrowseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_QualifiedName>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDisplayNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDisplayName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDisplayNameAttribute_async(
      client,
      nodeId,
      outDisplayName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDisplayNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDisplayNameAttribute_async');
  late final _UA_Client_writeDisplayNameAttribute_async =
      _UA_Client_writeDisplayNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDescriptionAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outDescription,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDescriptionAttribute_async(
      client,
      nodeId,
      outDescription,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDescriptionAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDescriptionAttribute_async');
  late final _UA_Client_writeDescriptionAttribute_async =
      _UA_Client_writeDescriptionAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outWriteMask,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeWriteMaskAttribute_async(
      client,
      nodeId,
      outWriteMask,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_UInt32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeWriteMaskAttribute_async');
  late final _UA_Client_writeWriteMaskAttribute_async =
      _UA_Client_writeWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_UInt32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserWriteMaskAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_UInt32> outUserWriteMask,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserWriteMaskAttribute_async(
      client,
      nodeId,
      outUserWriteMask,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserWriteMaskAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_UInt32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserWriteMaskAttribute_async');
  late final _UA_Client_writeUserWriteMaskAttribute_async =
      _UA_Client_writeUserWriteMaskAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_UInt32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeIsAbstractAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outIsAbstract,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeIsAbstractAttribute_async(
      client,
      nodeId,
      outIsAbstract,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeIsAbstractAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeIsAbstractAttribute_async');
  late final _UA_Client_writeIsAbstractAttribute_async =
      _UA_Client_writeIsAbstractAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeSymmetricAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outSymmetric,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeSymmetricAttribute_async(
      client,
      nodeId,
      outSymmetric,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeSymmetricAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeSymmetricAttribute_async');
  late final _UA_Client_writeSymmetricAttribute_async =
      _UA_Client_writeSymmetricAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeInverseNameAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_LocalizedText> outInverseName,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeInverseNameAttribute_async(
      client,
      nodeId,
      outInverseName,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeInverseNameAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_LocalizedText>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeInverseNameAttribute_async');
  late final _UA_Client_writeInverseNameAttribute_async =
      _UA_Client_writeInverseNameAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_LocalizedText>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeContainsNoLoopsAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outContainsNoLoops,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeContainsNoLoopsAttribute_async(
      client,
      nodeId,
      outContainsNoLoops,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeContainsNoLoopsAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeContainsNoLoopsAttribute_async');
  late final _UA_Client_writeContainsNoLoopsAttribute_async =
      _UA_Client_writeContainsNoLoopsAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeEventNotifierAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outEventNotifier,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeEventNotifierAttribute_async(
      client,
      nodeId,
      outEventNotifier,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeEventNotifierAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeEventNotifierAttribute_async');
  late final _UA_Client_writeEventNotifierAttribute_async =
      _UA_Client_writeEventNotifierAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeDataTypeAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_NodeId> outDataType,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeDataTypeAttribute_async(
      client,
      nodeId,
      outDataType,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeDataTypeAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_NodeId>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeDataTypeAttribute_async');
  late final _UA_Client_writeDataTypeAttribute_async =
      _UA_Client_writeDataTypeAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeValueRankAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Int32> outValueRank,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeValueRankAttribute_async(
      client,
      nodeId,
      outValueRank,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeValueRankAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Int32>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeValueRankAttribute_async');
  late final _UA_Client_writeValueRankAttribute_async =
      _UA_Client_writeValueRankAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Int32>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outAccessLevel,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeAccessLevelAttribute_async(
      client,
      nodeId,
      outAccessLevel,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeAccessLevelAttribute_async');
  late final _UA_Client_writeAccessLevelAttribute_async =
      _UA_Client_writeAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserAccessLevelAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Byte> outUserAccessLevel,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserAccessLevelAttribute_async(
      client,
      nodeId,
      outUserAccessLevel,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserAccessLevelAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<UA_Byte>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserAccessLevelAttribute_async');
  late final _UA_Client_writeUserAccessLevelAttribute_async =
      _UA_Client_writeUserAccessLevelAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Byte>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeMinimumSamplingIntervalAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<UA_Double> outMinimumSamplingInterval,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeMinimumSamplingIntervalAttribute_async(
      client,
      nodeId,
      outMinimumSamplingInterval,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr =
      _lookup<
              ffi.NativeFunction<
                  UA_StatusCode Function(
                      ffi.Pointer<UA_Client>,
                      UA_NodeId,
                      ffi.Pointer<UA_Double>,
                      UA_ClientAsyncServiceCallback,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<UA_UInt32>)>>(
          'UA_Client_writeMinimumSamplingIntervalAttribute_async');
  late final _UA_Client_writeMinimumSamplingIntervalAttribute_async =
      _UA_Client_writeMinimumSamplingIntervalAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<UA_Double>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeHistorizingAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outHistorizing,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeHistorizingAttribute_async(
      client,
      nodeId,
      outHistorizing,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeHistorizingAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeHistorizingAttribute_async');
  late final _UA_Client_writeHistorizingAttribute_async =
      _UA_Client_writeHistorizingAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outExecutable,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeExecutableAttribute_async(
      client,
      nodeId,
      outExecutable,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeExecutableAttribute_async');
  late final _UA_Client_writeExecutableAttribute_async =
      _UA_Client_writeExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_writeUserExecutableAttribute_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId nodeId,
    ffi.Pointer<ffi.Bool> outUserExecutable,
    UA_ClientAsyncServiceCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_writeUserExecutableAttribute_async(
      client,
      nodeId,
      outUserExecutable,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_writeUserExecutableAttribute_asyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_NodeId,
                  ffi.Pointer<ffi.Bool>,
                  UA_ClientAsyncServiceCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_UInt32>)>>(
      'UA_Client_writeUserExecutableAttribute_async');
  late final _UA_Client_writeUserExecutableAttribute_async =
      _UA_Client_writeUserExecutableAttribute_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              ffi.Pointer<ffi.Bool>,
              UA_ClientAsyncServiceCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_call_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    UA_ClientAsyncCallCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_call_async(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_call_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Size,
              ffi.Pointer<UA_Variant>,
              UA_ClientAsyncCallCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_call_async');
  late final _UA_Client_call_async = _UA_Client_call_asyncPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Client>,
          UA_NodeId,
          UA_NodeId,
          int,
          ffi.Pointer<UA_Variant>,
          UA_ClientAsyncCallCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_VariableAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableNode_async');
  late final _UA_Client_addVariableNode_async =
      _UA_Client_addVariableNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_VariableAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addVariableTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_VariableTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addVariableTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addVariableTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addVariableTypeNode_async');
  late final _UA_Client_addVariableTypeNode_async =
      _UA_Client_addVariableTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_VariableTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_NodeId typeDefinition,
    UA_ObjectAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      typeDefinition,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectNode_async');
  late final _UA_Client_addObjectNode_async =
      _UA_Client_addObjectNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_NodeId,
              UA_ObjectAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addObjectTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ObjectTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addObjectTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addObjectTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addObjectTypeNode_async');
  late final _UA_Client_addObjectTypeNode_async =
      _UA_Client_addObjectTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ObjectTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addViewNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ViewAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addViewNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addViewNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addViewNode_async');
  late final _UA_Client_addViewNode_async =
      _UA_Client_addViewNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ViewAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addReferenceTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_ReferenceTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addReferenceTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addReferenceTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addReferenceTypeNode_async');
  late final _UA_Client_addReferenceTypeNode_async =
      _UA_Client_addReferenceTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_ReferenceTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addDataTypeNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_DataTypeAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addDataTypeNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addDataTypeNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addDataTypeNode_async');
  late final _UA_Client_addDataTypeNode_async =
      _UA_Client_addDataTypeNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_DataTypeAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_Client_addMethodNode_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId requestedNewNodeId,
    UA_NodeId parentNodeId,
    UA_NodeId referenceTypeId,
    UA_QualifiedName browseName,
    UA_MethodAttributes attr,
    ffi.Pointer<UA_NodeId> outNewNodeId,
    UA_ClientAsyncAddNodesCallback callback,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_Client_addMethodNode_async(
      client,
      requestedNewNodeId,
      parentNodeId,
      referenceTypeId,
      browseName,
      attr,
      outNewNodeId,
      callback,
      userdata,
      reqId,
    );
  }

  late final _UA_Client_addMethodNode_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_Client_addMethodNode_async');
  late final _UA_Client_addMethodNode_async =
      _UA_Client_addMethodNode_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              UA_NodeId,
              UA_QualifiedName,
              UA_MethodAttributes,
              ffi.Pointer<UA_NodeId>,
              UA_ClientAsyncAddNodesCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  int UA_AccessControl_default(
    ffi.Pointer<UA_ServerConfig> config,
    bool allowAnonymous,
    ffi.Pointer<UA_CertificateVerification> verifyX509,
    ffi.Pointer<UA_ByteString> userTokenPolicyUri,
    int usernamePasswordLoginSize,
    ffi.Pointer<UA_UsernamePasswordLogin> usernamePasswordLogin,
  ) {
    return _UA_AccessControl_default(
      config,
      allowAnonymous,
      verifyX509,
      userTokenPolicyUri,
      usernamePasswordLoginSize,
      usernamePasswordLogin,
    );
  }

  late final _UA_AccessControl_defaultPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>,
                  ffi.Bool,
                  ffi.Pointer<UA_CertificateVerification>,
                  ffi.Pointer<UA_ByteString>,
                  ffi.Size,
                  ffi.Pointer<UA_UsernamePasswordLogin>)>>(
      'UA_AccessControl_default');
  late final _UA_AccessControl_default =
      _UA_AccessControl_defaultPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>,
              bool,
              ffi.Pointer<UA_CertificateVerification>,
              ffi.Pointer<UA_ByteString>,
              int,
              ffi.Pointer<UA_UsernamePasswordLogin>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/pki_default.h"
  void UA_CertificateVerification_AcceptAll(
    ffi.Pointer<UA_CertificateVerification> cv,
  ) {
    return _UA_CertificateVerification_AcceptAll(
      cv,
    );
  }

  late final _UA_CertificateVerification_AcceptAllPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_CertificateVerification>)>>(
      'UA_CertificateVerification_AcceptAll');
  late final _UA_CertificateVerification_AcceptAll =
      _UA_CertificateVerification_AcceptAllPtr.asFunction<
          void Function(ffi.Pointer<UA_CertificateVerification>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/log_stdout.h"
  late final ffi.Pointer<UA_Logger> _UA_Log_Stdout_ =
      _lookup<UA_Logger>('UA_Log_Stdout_');

  UA_Logger get UA_Log_Stdout_ => _UA_Log_Stdout_.ref;

  late final ffi.Pointer<ffi.Pointer<UA_Logger>> _UA_Log_Stdout =
      _lookup<ffi.Pointer<UA_Logger>>('UA_Log_Stdout');

  ffi.Pointer<UA_Logger> get UA_Log_Stdout => _UA_Log_Stdout.value;

  set UA_Log_Stdout(ffi.Pointer<UA_Logger> value) =>
      _UA_Log_Stdout.value = value;

  void UA_Log_Stdout_log(
    ffi.Pointer<ffi.Void> _,
    int level,
    int category,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _UA_Log_Stdout_log(
      _,
      level,
      category,
      msg,
      args,
    );
  }

  late final _UA_Log_Stdout_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('UA_Log_Stdout_log');
  late final _UA_Log_Stdout_log = _UA_Log_Stdout_logPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void UA_Log_Stdout_clear(
    ffi.Pointer<ffi.Void> logContext,
  ) {
    return _UA_Log_Stdout_clear(
      logContext,
    );
  }

  late final _UA_Log_Stdout_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'UA_Log_Stdout_clear');
  late final _UA_Log_Stdout_clear = _UA_Log_Stdout_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  UA_Logger UA_Log_Stdout_withLevel(
    int minlevel,
  ) {
    return _UA_Log_Stdout_withLevel(
      minlevel,
    );
  }

  late final _UA_Log_Stdout_withLevelPtr =
      _lookup<ffi.NativeFunction<UA_Logger Function(ffi.Int32)>>(
          'UA_Log_Stdout_withLevel');
  late final _UA_Log_Stdout_withLevel =
      _UA_Log_Stdout_withLevelPtr.asFunction<UA_Logger Function(int)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/nodestore_default.h"
  int UA_Nodestore_HashMap(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_HashMap(
      ns,
    );
  }

  late final _UA_Nodestore_HashMapPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>(
      'UA_Nodestore_HashMap');
  late final _UA_Nodestore_HashMap = _UA_Nodestore_HashMapPtr.asFunction<
      int Function(ffi.Pointer<UA_Nodestore>)>();

  int UA_Nodestore_ZipTree(
    ffi.Pointer<UA_Nodestore> ns,
  ) {
    return _UA_Nodestore_ZipTree(
      ns,
    );
  }

  late final _UA_Nodestore_ZipTreePtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Nodestore>)>>(
      'UA_Nodestore_ZipTree');
  late final _UA_Nodestore_ZipTree = _UA_Nodestore_ZipTreePtr.asFunction<
      int Function(ffi.Pointer<UA_Nodestore>)>();

  /// amalgamated original file "/plugins/include/open62541/server_config_default.h"
  ffi.Pointer<UA_Server> UA_Server_new() {
    return _UA_Server_new();
  }

  late final _UA_Server_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Server> Function()>>(
          'UA_Server_new');
  late final _UA_Server_new =
      _UA_Server_newPtr.asFunction<ffi.Pointer<UA_Server> Function()>();

  /// /
  late final ffi.Pointer<UA_ConnectionConfig> _UA_ConnectionConfig_default =
      _lookup<UA_ConnectionConfig>('UA_ConnectionConfig_default');

  UA_ConnectionConfig get UA_ConnectionConfig_default =>
      _UA_ConnectionConfig_default.ref;

  int UA_ServerConfig_setMinimalCustomBuffer(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
    int sendBufferSize,
    int recvBufferSize,
  ) {
    return _UA_ServerConfig_setMinimalCustomBuffer(
      config,
      portNumber,
      certificate,
      sendBufferSize,
      recvBufferSize,
    );
  }

  late final _UA_ServerConfig_setMinimalCustomBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>,
              UA_UInt16,
              ffi.Pointer<UA_ByteString>,
              UA_UInt32,
              UA_UInt32)>>('UA_ServerConfig_setMinimalCustomBuffer');
  late final _UA_ServerConfig_setMinimalCustomBuffer =
      _UA_ServerConfig_setMinimalCustomBufferPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int,
              ffi.Pointer<UA_ByteString>, int, int)>();

  int UA_ServerConfig_setMinimal(
    ffi.Pointer<UA_ServerConfig> config,
    int portNumber,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_setMinimal(
      config,
      portNumber,
      certificate,
    );
  }

  late final _UA_ServerConfig_setMinimalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16,
              ffi.Pointer<UA_ByteString>)>>('UA_ServerConfig_setMinimal');
  late final _UA_ServerConfig_setMinimal =
      _UA_ServerConfig_setMinimalPtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, int, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_setDefault(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_setDefault(
      config,
    );
  }

  late final _UA_ServerConfig_setDefaultPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setDefault');
  late final _UA_ServerConfig_setDefault = _UA_ServerConfig_setDefaultPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_setBasics(
    ffi.Pointer<UA_ServerConfig> conf,
  ) {
    return _UA_ServerConfig_setBasics(
      conf,
    );
  }

  late final _UA_ServerConfig_setBasicsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerConfig>)>>('UA_ServerConfig_setBasics');
  late final _UA_ServerConfig_setBasics = _UA_ServerConfig_setBasicsPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>)>();

  int UA_ServerConfig_addNetworkLayerTCP(
    ffi.Pointer<UA_ServerConfig> conf,
    int portNumber,
    int sendBufferSize,
    int recvBufferSize,
  ) {
    return _UA_ServerConfig_addNetworkLayerTCP(
      conf,
      portNumber,
      sendBufferSize,
      recvBufferSize,
    );
  }

  late final _UA_ServerConfig_addNetworkLayerTCPPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_UInt16,
              UA_UInt32, UA_UInt32)>>('UA_ServerConfig_addNetworkLayerTCP');
  late final _UA_ServerConfig_addNetworkLayerTCP =
      _UA_ServerConfig_addNetworkLayerTCPPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>, int, int, int)>();

  int UA_ServerConfig_addSecurityPolicyNone(
    ffi.Pointer<UA_ServerConfig> config,
    ffi.Pointer<UA_ByteString> certificate,
  ) {
    return _UA_ServerConfig_addSecurityPolicyNone(
      config,
      certificate,
    );
  }

  late final _UA_ServerConfig_addSecurityPolicyNonePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>>(
      'UA_ServerConfig_addSecurityPolicyNone');
  late final _UA_ServerConfig_addSecurityPolicyNone =
      _UA_ServerConfig_addSecurityPolicyNonePtr.asFunction<
          int Function(
              ffi.Pointer<UA_ServerConfig>, ffi.Pointer<UA_ByteString>)>();

  int UA_ServerConfig_addEndpoint(
    ffi.Pointer<UA_ServerConfig> config,
    UA_String securityPolicyUri,
    int securityMode,
  ) {
    return _UA_ServerConfig_addEndpoint(
      config,
      securityPolicyUri,
      securityMode,
    );
  }

  late final _UA_ServerConfig_addEndpointPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>, UA_String,
              ffi.Int32)>>('UA_ServerConfig_addEndpoint');
  late final _UA_ServerConfig_addEndpoint = _UA_ServerConfig_addEndpointPtr
      .asFunction<int Function(ffi.Pointer<UA_ServerConfig>, UA_String, int)>();

  int UA_ServerConfig_addAllEndpoints(
    ffi.Pointer<UA_ServerConfig> config,
  ) {
    return _UA_ServerConfig_addAllEndpoints(
      config,
    );
  }

  late final _UA_ServerConfig_addAllEndpointsPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ServerConfig>)>>(
      'UA_ServerConfig_addAllEndpoints');
  late final _UA_ServerConfig_addAllEndpoints =
      _UA_ServerConfig_addAllEndpointsPtr.asFunction<
          int Function(ffi.Pointer<UA_ServerConfig>)>();

  /// amalgamated original file "/plugins/include/open62541/client_config_default.h"
  ffi.Pointer<UA_Client> UA_Client_new() {
    return _UA_Client_new();
  }

  late final _UA_Client_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Client> Function()>>(
          'UA_Client_new');
  late final _UA_Client_new =
      _UA_Client_newPtr.asFunction<ffi.Pointer<UA_Client> Function()>();

  int UA_ClientConfig_setDefault(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_setDefault(
      config,
    );
  }

  late final _UA_ClientConfig_setDefaultPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ClientConfig>)>>('UA_ClientConfig_setDefault');
  late final _UA_ClientConfig_setDefault = _UA_ClientConfig_setDefaultPtr
      .asFunction<int Function(ffi.Pointer<UA_ClientConfig>)>();

  /// amalgamated original file "/plugins/include/open62541/plugin/securitypolicy_default.h"
  int UA_SecurityPolicy_None(
    ffi.Pointer<UA_SecurityPolicy> policy,
    UA_ByteString localCertificate,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_SecurityPolicy_None(
      policy,
      localCertificate,
      logger,
    );
  }

  late final _UA_SecurityPolicy_NonePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString,
              ffi.Pointer<UA_Logger>)>>('UA_SecurityPolicy_None');
  late final _UA_SecurityPolicy_None = _UA_SecurityPolicy_NonePtr.asFunction<
      int Function(ffi.Pointer<UA_SecurityPolicy>, UA_ByteString,
          ffi.Pointer<UA_Logger>)>();

  UA_Logger UA_Log_Syslog_withLevel(
    int minlevel,
  ) {
    return _UA_Log_Syslog_withLevel(
      minlevel,
    );
  }

  late final _UA_Log_Syslog_withLevelPtr =
      _lookup<ffi.NativeFunction<UA_Logger Function(ffi.Int32)>>(
          'UA_Log_Syslog_withLevel');
  late final _UA_Log_Syslog_withLevel =
      _UA_Log_Syslog_withLevelPtr.asFunction<UA_Logger Function(int)>();

  UA_Logger UA_Log_Syslog() {
    return _UA_Log_Syslog();
  }

  late final _UA_Log_SyslogPtr =
      _lookup<ffi.NativeFunction<UA_Logger Function()>>('UA_Log_Syslog');
  late final _UA_Log_Syslog =
      _UA_Log_SyslogPtr.asFunction<UA_Logger Function()>();

  /// amalgamated original file "/plugins/include/open62541/plugin/pubsub_udp.h"
  UA_PubSubTransportLayer UA_PubSubTransportLayerUDPMP() {
    return _UA_PubSubTransportLayerUDPMP();
  }

  late final _UA_PubSubTransportLayerUDPMPPtr =
      _lookup<ffi.NativeFunction<UA_PubSubTransportLayer Function()>>(
          'UA_PubSubTransportLayerUDPMP');
  late final _UA_PubSubTransportLayerUDPMP = _UA_PubSubTransportLayerUDPMPPtr
      .asFunction<UA_PubSubTransportLayer Function()>();

  UA_ServerNetworkLayer UA_ServerNetworkLayerTCP(
    UA_ConnectionConfig config,
    int port,
    int maxConnections,
  ) {
    return _UA_ServerNetworkLayerTCP(
      config,
      port,
      maxConnections,
    );
  }

  late final _UA_ServerNetworkLayerTCPPtr = _lookup<
      ffi.NativeFunction<
          UA_ServerNetworkLayer Function(UA_ConnectionConfig, UA_UInt16,
              UA_UInt16)>>('UA_ServerNetworkLayerTCP');
  late final _UA_ServerNetworkLayerTCP =
      _UA_ServerNetworkLayerTCPPtr.asFunction<
          UA_ServerNetworkLayer Function(UA_ConnectionConfig, int, int)>();

  UA_Connection UA_ClientConnectionTCP_init(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    int timeout,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_ClientConnectionTCP_init(
      config,
      endpointUrl,
      timeout,
      logger,
    );
  }

  late final _UA_ClientConnectionTCP_initPtr = _lookup<
      ffi.NativeFunction<
          UA_Connection Function(UA_ConnectionConfig, UA_String, UA_UInt32,
              ffi.Pointer<UA_Logger>)>>('UA_ClientConnectionTCP_init');
  late final _UA_ClientConnectionTCP_init =
      _UA_ClientConnectionTCP_initPtr.asFunction<
          UA_Connection Function(
              UA_ConnectionConfig, UA_String, int, ffi.Pointer<UA_Logger>)>();

  int UA_ClientConnectionTCP_poll(
    ffi.Pointer<UA_Connection> connection,
    int timeout,
    ffi.Pointer<UA_Logger> logger,
  ) {
    return _UA_ClientConnectionTCP_poll(
      connection,
      timeout,
      logger,
    );
  }

  late final _UA_ClientConnectionTCP_pollPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection>, UA_UInt32,
              ffi.Pointer<UA_Logger>)>>('UA_ClientConnectionTCP_poll');
  late final _UA_ClientConnectionTCP_poll =
      _UA_ClientConnectionTCP_pollPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Connection>, int, ffi.Pointer<UA_Logger>)>();

  int UA_socket_set_blocking(
    int sockfd,
  ) {
    return _UA_socket_set_blocking(
      sockfd,
    );
  }

  late final _UA_socket_set_blockingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
          'UA_socket_set_blocking');
  late final _UA_socket_set_blocking =
      _UA_socket_set_blockingPtr.asFunction<int Function(int)>();

  int UA_socket_set_nonblocking(
    int sockfd,
  ) {
    return _UA_socket_set_nonblocking(
      sockfd,
    );
  }

  late final _UA_socket_set_nonblockingPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Int)>>(
          'UA_socket_set_nonblocking');
  late final _UA_socket_set_nonblocking =
      _UA_socket_set_nonblockingPtr.asFunction<int Function(int)>();

  void UA_initialize_architecture_network() {
    return _UA_initialize_architecture_network();
  }

  late final _UA_initialize_architecture_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UA_initialize_architecture_network');
  late final _UA_initialize_architecture_network =
      _UA_initialize_architecture_networkPtr.asFunction<void Function()>();

  void UA_deinitialize_architecture_network() {
    return _UA_deinitialize_architecture_network();
  }

  late final _UA_deinitialize_architecture_networkPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UA_deinitialize_architecture_network');
  late final _UA_deinitialize_architecture_network =
      _UA_deinitialize_architecture_networkPtr.asFunction<void Function()>();

  ffi.Pointer<UA_DataType> UA_FFI_TYPE_FROM_INDEX(
    int index,
  ) {
    return _UA_FFI_TYPE_FROM_INDEX(
      index,
    );
  }

  late final _UA_FFI_TYPE_FROM_INDEXPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_DataType> Function(ffi.Int)>>(
          'UA_FFI_TYPE_FROM_INDEX');
  late final _UA_FFI_TYPE_FROM_INDEX = _UA_FFI_TYPE_FROM_INDEXPtr.asFunction<
      ffi.Pointer<UA_DataType> Function(int)>();

  int UA_FFI_INDEX_FROM_TYPE(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_FFI_INDEX_FROM_TYPE(
      type,
    );
  }

  late final _UA_FFI_INDEX_FROM_TYPEPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UA_DataType>)>>(
          'UA_FFI_INDEX_FROM_TYPE');
  late final _UA_FFI_INDEX_FROM_TYPE = _UA_FFI_INDEX_FROM_TYPEPtr.asFunction<
      int Function(ffi.Pointer<UA_DataType>)>();

  UA_NodeId UA_FFI_TYPEID_FROM_TYPE(
    ffi.Pointer<UA_DataType> type,
  ) {
    return _UA_FFI_TYPEID_FROM_TYPE(
      type,
    );
  }

  late final _UA_FFI_TYPEID_FROM_TYPEPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(ffi.Pointer<UA_DataType>)>>(
          'UA_FFI_TYPEID_FROM_TYPE');
  late final _UA_FFI_TYPEID_FROM_TYPE = _UA_FFI_TYPEID_FROM_TYPEPtr.asFunction<
      UA_NodeId Function(ffi.Pointer<UA_DataType>)>();

  UA_NodeId UA_FFI_TYPEID_FROM_INDEX(
    int index,
  ) {
    return _UA_FFI_TYPEID_FROM_INDEX(
      index,
    );
  }

  late final _UA_FFI_TYPEID_FROM_INDEXPtr =
      _lookup<ffi.NativeFunction<UA_NodeId Function(ffi.Int)>>(
          'UA_FFI_TYPEID_FROM_INDEX');
  late final _UA_FFI_TYPEID_FROM_INDEX =
      _UA_FFI_TYPEID_FROM_INDEXPtr.asFunction<UA_NodeId Function(int)>();

  void UA_FFI_Client_callBack_method(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    int requestId,
    ffi.Pointer<UA_CallResponse> response,
  ) {
    return _UA_FFI_Client_callBack_method(
      client,
      userdata,
      requestId,
      response,
    );
  }

  late final _UA_FFI_Client_callBack_methodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<ffi.Void>,
              UA_UInt32,
              ffi.Pointer<UA_CallResponse>)>>('UA_FFI_Client_callBack_method');
  late final _UA_FFI_Client_callBack_method =
      _UA_FFI_Client_callBack_methodPtr.asFunction<
          void Function(ffi.Pointer<UA_Client>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<UA_CallResponse>)>();

  int UA_FFI_Client_call_async(
    ffi.Pointer<UA_Client> client,
    UA_NodeId objectId,
    UA_NodeId methodId,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    UA_FFI_Callback_method_async callBack,
    ffi.Pointer<ffi.Void> userdata,
    ffi.Pointer<UA_UInt32> reqId,
  ) {
    return _UA_FFI_Client_call_async(
      client,
      objectId,
      methodId,
      inputSize,
      input,
      callBack,
      userdata,
      reqId,
    );
  }

  late final _UA_FFI_Client_call_asyncPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              ffi.Size,
              ffi.Pointer<UA_Variant>,
              UA_FFI_Callback_method_async,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>>('UA_FFI_Client_call_async');
  late final _UA_FFI_Client_call_async =
      _UA_FFI_Client_call_asyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>,
              UA_NodeId,
              UA_NodeId,
              int,
              ffi.Pointer<UA_Variant>,
              UA_FFI_Callback_method_async,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_UInt32>)>();

  ffi.Pointer<UA_CallMethodResult> UA_FFI_Server_call(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>> request,
  ) {
    return _UA_FFI_Server_call(
      server,
      request,
    );
  }

  late final _UA_FFI_Server_callPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UA_CallMethodResult> Function(ffi.Pointer<UA_Server>,
                  ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>>)>>(
      'UA_FFI_Server_call');
  late final _UA_FFI_Server_call = _UA_FFI_Server_callPtr.asFunction<
      ffi.Pointer<UA_CallMethodResult> Function(ffi.Pointer<UA_Server>,
          ffi.Pointer<ffi.Pointer<UA_AsyncOperationRequest>>)>();

  void UA_FFI_Server_setAsyncOperationResult(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_CallMethodResult> response,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_FFI_Server_setAsyncOperationResult(
      server,
      response,
      context,
    );
  }

  late final _UA_FFI_Server_setAsyncOperationResultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_CallMethodResult>,
              ffi.Pointer<ffi.Void>)>>('UA_FFI_Server_setAsyncOperationResult');
  late final _UA_FFI_Server_setAsyncOperationResult =
      _UA_FFI_Server_setAsyncOperationResultPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_CallMethodResult>, ffi.Pointer<ffi.Void>)>();

  int UA_CLIENT_WriteResponse_STATUS(
    ffi.Pointer<UA_WriteResponse> res,
  ) {
    return _UA_CLIENT_WriteResponse_STATUS(
      res,
    );
  }

  late final _UA_CLIENT_WriteResponse_STATUSPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<UA_WriteResponse>)>>(
      'UA_CLIENT_WriteResponse_STATUS');
  late final _UA_CLIENT_WriteResponse_STATUS =
      _UA_CLIENT_WriteResponse_STATUSPtr.asFunction<
          int Function(ffi.Pointer<UA_WriteResponse>)>();

  ffi.Pointer<ffi.Void> UA_Client_Subscriptions_create_(
    ffi.Pointer<UA_Client> client,
    UA_CreateSubscriptionRequest request,
    ffi.Pointer<ffi.Void> subscriptionContext,
    UA_Client_StatusChangeNotificationCallback statusChangeCallback,
    UA_Client_DeleteSubscriptionCallback deleteCallback,
  ) {
    return _UA_Client_Subscriptions_create_(
      client,
      request,
      subscriptionContext,
      statusChangeCallback,
      deleteCallback,
    );
  }

  late final _UA_Client_Subscriptions_create_Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<UA_Client>,
                  UA_CreateSubscriptionRequest,
                  ffi.Pointer<ffi.Void>,
                  UA_Client_StatusChangeNotificationCallback,
                  UA_Client_DeleteSubscriptionCallback)>>(
      'UA_Client_Subscriptions_create_');
  late final _UA_Client_Subscriptions_create_ =
      _UA_Client_Subscriptions_create_Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<UA_Client>,
              UA_CreateSubscriptionRequest,
              ffi.Pointer<ffi.Void>,
              UA_Client_StatusChangeNotificationCallback,
              UA_Client_DeleteSubscriptionCallback)>();

  int UA_Client_SubSubscriptions_Check(
    ffi.Pointer<UA_CreateSubscriptionResponse> response,
  ) {
    return _UA_Client_SubSubscriptions_Check(
      response,
    );
  }

  late final _UA_Client_SubSubscriptions_CheckPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>>(
      'UA_Client_SubSubscriptions_Check');
  late final _UA_Client_SubSubscriptions_Check =
      _UA_Client_SubSubscriptions_CheckPtr.asFunction<
          int Function(ffi.Pointer<UA_CreateSubscriptionResponse>)>();

  void UA_Server_run_iterate_void(
    ffi.Pointer<UA_Server> server,
    bool waitInternal,
  ) {
    return _UA_Server_run_iterate_void(
      server,
      waitInternal,
    );
  }

  late final _UA_Server_run_iterate_voidPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>, ffi.Bool)>>(
      'UA_Server_run_iterate_void');
  late final _UA_Server_run_iterate_void = _UA_Server_run_iterate_voidPtr
      .asFunction<void Function(ffi.Pointer<UA_Server>, bool)>();

  void UA_Client_run_iterate_void(
    ffi.Pointer<UA_Client> client,
    int timeout,
  ) {
    return _UA_Client_run_iterate_void(
      client,
      timeout,
    );
  }

  late final _UA_Client_run_iterate_voidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Client>,
              UA_UInt32)>>('UA_Client_run_iterate_void');
  late final _UA_Client_run_iterate_void = _UA_Client_run_iterate_voidPtr
      .asFunction<void Function(ffi.Pointer<UA_Client>, int)>();

  /// base64_encode - Base64 encode
  /// @src: Data to be encoded
  /// @len: Length of the data to be encoded
  /// @out_len: Pointer to output length variable
  /// Returns: Allocated buffer of out_len bytes of encoded data,
  /// or %NULL on failure. The output is NOT Null-terminated.
  ffi.Pointer<ffi.UnsignedChar> UA_base64(
    ffi.Pointer<ffi.UnsignedChar> src,
    int len,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _UA_base64(
      src,
      len,
      out_len,
    );
  }

  late final _UA_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('UA_base64');
  late final _UA_base64 = _UA_base64Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  /// base64_decode - Base64 decode
  /// @src: Data to be decoded
  /// @len: Length of the data to be decoded
  /// @out_len: Pointer to output length variable
  /// Returns: Allocated buffer of out_len bytes of decoded data,
  /// or %NULL on failure.
  ffi.Pointer<ffi.UnsignedChar> UA_unbase64(
    ffi.Pointer<ffi.UnsignedChar> src,
    int len,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _UA_unbase64(
      src,
      len,
      out_len,
    );
  }

  late final _UA_unbase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('UA_unbase64');
  late final _UA_unbase64 = _UA_unbase64Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  int UA_encodeBinaryInternal(
    ffi.Pointer<ffi.Void> src,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufEnd,
    UA_exchangeEncodeBuffer exchangeCallback,
    ffi.Pointer<ffi.Void> exchangeHandle,
  ) {
    return _UA_encodeBinaryInternal(
      src,
      type,
      bufPos,
      bufEnd,
      exchangeCallback,
      exchangeHandle,
    );
  }

  late final _UA_encodeBinaryInternalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              UA_exchangeEncodeBuffer,
              ffi.Pointer<ffi.Void>)>>('UA_encodeBinaryInternal');
  late final _UA_encodeBinaryInternal = _UA_encodeBinaryInternalPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>,
          ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<ffi.Pointer<UA_Byte>>,
          UA_exchangeEncodeBuffer,
          ffi.Pointer<ffi.Void>)>();

  int UA_decodeBinaryInternal(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<ffi.Void> dst,
    ffi.Pointer<UA_DataType> type,
    ffi.Pointer<UA_DataTypeArray> customTypes,
  ) {
    return _UA_decodeBinaryInternal(
      src,
      offset,
      dst,
      type,
      customTypes,
    );
  }

  late final _UA_decodeBinaryInternalPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<UA_DataTypeArray>)>>('UA_decodeBinaryInternal');
  late final _UA_decodeBinaryInternal = _UA_decodeBinaryInternalPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ByteString>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<UA_DataType>,
          ffi.Pointer<UA_DataTypeArray>)>();

  ffi.Pointer<UA_DataType> UA_findDataTypeByBinary(
    ffi.Pointer<UA_NodeId> typeId,
  ) {
    return _UA_findDataTypeByBinary(
      typeId,
    );
  }

  late final _UA_findDataTypeByBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(
              ffi.Pointer<UA_NodeId>)>>('UA_findDataTypeByBinary');
  late final _UA_findDataTypeByBinary = _UA_findDataTypeByBinaryPtr.asFunction<
      ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>)>();

  /// Utility Functions
  /// -----------------
  ffi.Pointer<UA_DataType> UA_findDataTypeWithCustom(
    ffi.Pointer<UA_NodeId> typeId,
    ffi.Pointer<UA_DataTypeArray> customTypes,
  ) {
    return _UA_findDataTypeWithCustom(
      typeId,
      customTypes,
    );
  }

  late final _UA_findDataTypeWithCustomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_DataTypeArray>)>>('UA_findDataTypeWithCustom');
  late final _UA_findDataTypeWithCustom =
      _UA_findDataTypeWithCustomPtr.asFunction<
          ffi.Pointer<UA_DataType> Function(
              ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_DataTypeArray>)>();

  bool UA_String_equal_ignorecase(
    ffi.Pointer<UA_String> s1,
    ffi.Pointer<UA_String> s2,
  ) {
    return _UA_String_equal_ignorecase(
      s1,
      s2,
    );
  }

  late final _UA_String_equal_ignorecasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_String>,
              ffi.Pointer<UA_String>)>>('UA_String_equal_ignorecase');
  late final _UA_String_equal_ignorecase =
      _UA_String_equal_ignorecasePtr.asFunction<
          bool Function(ffi.Pointer<UA_String>, ffi.Pointer<UA_String>)>();

  int UA_Boolean_calcSizeBinary(
    ffi.Pointer<ffi.Bool> src,
  ) {
    return _UA_Boolean_calcSizeBinary(
      src,
    );
  }

  late final _UA_Boolean_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Bool>)>>(
          'UA_Boolean_calcSizeBinary');
  late final _UA_Boolean_calcSizeBinary = _UA_Boolean_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<ffi.Bool>)>();

  int UA_Boolean_encodeBinary(
    ffi.Pointer<ffi.Bool> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Boolean_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Boolean_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Bool>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Boolean_encodeBinary');
  late final _UA_Boolean_encodeBinary = _UA_Boolean_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Boolean_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<ffi.Bool> dst,
  ) {
    return _UA_Boolean_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Boolean_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Bool>)>>('UA_Boolean_decodeBinary');
  late final _UA_Boolean_decodeBinary = _UA_Boolean_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Bool>)>();

  int UA_SByte_calcSizeBinary(
    ffi.Pointer<UA_SByte> src,
  ) {
    return _UA_SByte_calcSizeBinary(
      src,
    );
  }

  late final _UA_SByte_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_SByte>)>>(
          'UA_SByte_calcSizeBinary');
  late final _UA_SByte_calcSizeBinary = _UA_SByte_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_SByte>)>();

  int UA_SByte_encodeBinary(
    ffi.Pointer<UA_SByte> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_SByte_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_SByte_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SByte>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_SByte_encodeBinary');
  late final _UA_SByte_encodeBinary = _UA_SByte_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_SByte>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_SByte_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_SByte> dst,
  ) {
    return _UA_SByte_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_SByte_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_SByte>)>>('UA_SByte_decodeBinary');
  late final _UA_SByte_decodeBinary = _UA_SByte_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_SByte>)>();

  int UA_Byte_calcSizeBinary(
    ffi.Pointer<UA_Byte> src,
  ) {
    return _UA_Byte_calcSizeBinary(
      src,
    );
  }

  late final _UA_Byte_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Byte>)>>(
          'UA_Byte_calcSizeBinary');
  late final _UA_Byte_calcSizeBinary = _UA_Byte_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>)>();

  int UA_Byte_encodeBinary(
    ffi.Pointer<UA_Byte> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Byte_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Byte_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Byte>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Byte_encodeBinary');
  late final _UA_Byte_encodeBinary = _UA_Byte_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Byte>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Byte_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Byte> dst,
  ) {
    return _UA_Byte_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Byte_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Byte>)>>('UA_Byte_decodeBinary');
  late final _UA_Byte_decodeBinary = _UA_Byte_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Int16_calcSizeBinary(
    ffi.Pointer<UA_Int16> src,
  ) {
    return _UA_Int16_calcSizeBinary(
      src,
    );
  }

  late final _UA_Int16_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Int16>)>>(
          'UA_Int16_calcSizeBinary');
  late final _UA_Int16_calcSizeBinary = _UA_Int16_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int16>)>();

  int UA_Int16_encodeBinary(
    ffi.Pointer<UA_Int16> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Int16_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Int16_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int16>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Int16_encodeBinary');
  late final _UA_Int16_encodeBinary = _UA_Int16_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int16>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Int16_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Int16> dst,
  ) {
    return _UA_Int16_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Int16_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Int16>)>>('UA_Int16_decodeBinary');
  late final _UA_Int16_decodeBinary = _UA_Int16_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Int16>)>();

  int UA_UInt16_calcSizeBinary(
    ffi.Pointer<UA_UInt16> src,
  ) {
    return _UA_UInt16_calcSizeBinary(
      src,
    );
  }

  late final _UA_UInt16_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_UInt16>)>>(
          'UA_UInt16_calcSizeBinary');
  late final _UA_UInt16_calcSizeBinary = _UA_UInt16_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_UInt16>)>();

  int UA_UInt16_encodeBinary(
    ffi.Pointer<UA_UInt16> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_UInt16_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_UInt16_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UInt16>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_UInt16_encodeBinary');
  late final _UA_UInt16_encodeBinary = _UA_UInt16_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt16>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_UInt16_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_UInt16> dst,
  ) {
    return _UA_UInt16_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_UInt16_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_UInt16>)>>('UA_UInt16_decodeBinary');
  late final _UA_UInt16_decodeBinary = _UA_UInt16_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_UInt16>)>();

  int UA_Int32_calcSizeBinary(
    ffi.Pointer<UA_Int32> src,
  ) {
    return _UA_Int32_calcSizeBinary(
      src,
    );
  }

  late final _UA_Int32_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Int32>)>>(
          'UA_Int32_calcSizeBinary');
  late final _UA_Int32_calcSizeBinary = _UA_Int32_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int32>)>();

  int UA_Int32_encodeBinary(
    ffi.Pointer<UA_Int32> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Int32_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Int32_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int32>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Int32_encodeBinary');
  late final _UA_Int32_encodeBinary = _UA_Int32_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int32>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Int32_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Int32> dst,
  ) {
    return _UA_Int32_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Int32_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Int32>)>>('UA_Int32_decodeBinary');
  late final _UA_Int32_decodeBinary = _UA_Int32_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Int32>)>();

  int UA_UInt32_calcSizeBinary(
    ffi.Pointer<UA_UInt32> src,
  ) {
    return _UA_UInt32_calcSizeBinary(
      src,
    );
  }

  late final _UA_UInt32_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_UInt32>)>>(
          'UA_UInt32_calcSizeBinary');
  late final _UA_UInt32_calcSizeBinary = _UA_UInt32_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_UInt32>)>();

  int UA_UInt32_encodeBinary(
    ffi.Pointer<UA_UInt32> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_UInt32_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_UInt32_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UInt32>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_UInt32_encodeBinary');
  late final _UA_UInt32_encodeBinary = _UA_UInt32_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt32>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_UInt32_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_UInt32> dst,
  ) {
    return _UA_UInt32_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_UInt32_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_UInt32>)>>('UA_UInt32_decodeBinary');
  late final _UA_UInt32_decodeBinary = _UA_UInt32_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_UInt32>)>();

  int UA_Int64_calcSizeBinary(
    ffi.Pointer<UA_Int64> src,
  ) {
    return _UA_Int64_calcSizeBinary(
      src,
    );
  }

  late final _UA_Int64_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Int64>)>>(
          'UA_Int64_calcSizeBinary');
  late final _UA_Int64_calcSizeBinary = _UA_Int64_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int64>)>();

  int UA_Int64_encodeBinary(
    ffi.Pointer<UA_Int64> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Int64_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Int64_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Int64>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Int64_encodeBinary');
  late final _UA_Int64_encodeBinary = _UA_Int64_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Int64>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Int64_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Int64> dst,
  ) {
    return _UA_Int64_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Int64_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Int64>)>>('UA_Int64_decodeBinary');
  late final _UA_Int64_decodeBinary = _UA_Int64_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Int64>)>();

  int UA_UInt64_calcSizeBinary(
    ffi.Pointer<UA_UInt64> src,
  ) {
    return _UA_UInt64_calcSizeBinary(
      src,
    );
  }

  late final _UA_UInt64_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_UInt64>)>>(
          'UA_UInt64_calcSizeBinary');
  late final _UA_UInt64_calcSizeBinary = _UA_UInt64_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_UInt64>)>();

  int UA_UInt64_encodeBinary(
    ffi.Pointer<UA_UInt64> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_UInt64_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_UInt64_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_UInt64>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_UInt64_encodeBinary');
  late final _UA_UInt64_encodeBinary = _UA_UInt64_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_UInt64>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_UInt64_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_UInt64> dst,
  ) {
    return _UA_UInt64_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_UInt64_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_UInt64>)>>('UA_UInt64_decodeBinary');
  late final _UA_UInt64_decodeBinary = _UA_UInt64_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_UInt64>)>();

  int UA_Float_calcSizeBinary(
    ffi.Pointer<UA_Float> src,
  ) {
    return _UA_Float_calcSizeBinary(
      src,
    );
  }

  late final _UA_Float_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Float>)>>(
          'UA_Float_calcSizeBinary');
  late final _UA_Float_calcSizeBinary = _UA_Float_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Float>)>();

  int UA_Float_encodeBinary(
    ffi.Pointer<UA_Float> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Float_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Float_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Float>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Float_encodeBinary');
  late final _UA_Float_encodeBinary = _UA_Float_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Float>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Float_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Float> dst,
  ) {
    return _UA_Float_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Float_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Float>)>>('UA_Float_decodeBinary');
  late final _UA_Float_decodeBinary = _UA_Float_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Float>)>();

  int UA_Double_calcSizeBinary(
    ffi.Pointer<UA_Double> src,
  ) {
    return _UA_Double_calcSizeBinary(
      src,
    );
  }

  late final _UA_Double_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Double>)>>(
          'UA_Double_calcSizeBinary');
  late final _UA_Double_calcSizeBinary = _UA_Double_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_Double>)>();

  int UA_Double_encodeBinary(
    ffi.Pointer<UA_Double> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Double_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Double_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Double>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Double_encodeBinary');
  late final _UA_Double_encodeBinary = _UA_Double_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Double>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Double_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Double> dst,
  ) {
    return _UA_Double_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Double_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Double>)>>('UA_Double_decodeBinary');
  late final _UA_Double_decodeBinary = _UA_Double_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Double>)>();

  int UA_String_calcSizeBinary(
    ffi.Pointer<UA_String> src,
  ) {
    return _UA_String_calcSizeBinary(
      src,
    );
  }

  late final _UA_String_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_String>)>>(
          'UA_String_calcSizeBinary');
  late final _UA_String_calcSizeBinary = _UA_String_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_String>)>();

  int UA_String_encodeBinary(
    ffi.Pointer<UA_String> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_String_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_String_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_String>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_String_encodeBinary');
  late final _UA_String_encodeBinary = _UA_String_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_String>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_String_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_String> dst,
  ) {
    return _UA_String_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_String_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_String>)>>('UA_String_decodeBinary');
  late final _UA_String_decodeBinary = _UA_String_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_String>)>();

  int UA_DateTime_calcSizeBinary(
    ffi.Pointer<UA_DateTime> src,
  ) {
    return _UA_DateTime_calcSizeBinary(
      src,
    );
  }

  late final _UA_DateTime_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_DateTime>)>>(
          'UA_DateTime_calcSizeBinary');
  late final _UA_DateTime_calcSizeBinary = _UA_DateTime_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_DateTime>)>();

  int UA_DateTime_encodeBinary(
    ffi.Pointer<UA_DateTime> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_DateTime_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_DateTime_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DateTime>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_DateTime_encodeBinary');
  late final _UA_DateTime_encodeBinary =
      _UA_DateTime_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DateTime>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_DateTime_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_DateTime> dst,
  ) {
    return _UA_DateTime_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_DateTime_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DateTime>)>>('UA_DateTime_decodeBinary');
  late final _UA_DateTime_decodeBinary =
      _UA_DateTime_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DateTime>)>();

  int UA_Guid_calcSizeBinary(
    ffi.Pointer<UA_Guid> src,
  ) {
    return _UA_Guid_calcSizeBinary(
      src,
    );
  }

  late final _UA_Guid_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Guid>)>>(
          'UA_Guid_calcSizeBinary');
  late final _UA_Guid_calcSizeBinary = _UA_Guid_calcSizeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>)>();

  int UA_Guid_encodeBinary(
    ffi.Pointer<UA_Guid> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Guid_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Guid_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Guid>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Guid_encodeBinary');
  late final _UA_Guid_encodeBinary = _UA_Guid_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Guid>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Guid_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Guid> dst,
  ) {
    return _UA_Guid_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Guid_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Guid>)>>('UA_Guid_decodeBinary');
  late final _UA_Guid_decodeBinary = _UA_Guid_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Guid>)>();

  int UA_ByteString_calcSizeBinary(
    ffi.Pointer<UA_ByteString> src,
  ) {
    return _UA_ByteString_calcSizeBinary(
      src,
    );
  }

  late final _UA_ByteString_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_ByteString_calcSizeBinary');
  late final _UA_ByteString_calcSizeBinary = _UA_ByteString_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_ByteString>)>();

  int UA_ByteString_encodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_ByteString_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_ByteString_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_ByteString_encodeBinary');
  late final _UA_ByteString_encodeBinary =
      _UA_ByteString_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_ByteString_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_ByteString> dst,
  ) {
    return _UA_ByteString_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_ByteString_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_ByteString>)>>('UA_ByteString_decodeBinary');
  late final _UA_ByteString_decodeBinary =
      _UA_ByteString_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_ByteString>)>();

  int UA_XmlElement_calcSizeBinary(
    ffi.Pointer<UA_XmlElement> src,
  ) {
    return _UA_XmlElement_calcSizeBinary(
      src,
    );
  }

  late final _UA_XmlElement_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_XmlElement>)>>(
      'UA_XmlElement_calcSizeBinary');
  late final _UA_XmlElement_calcSizeBinary = _UA_XmlElement_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_XmlElement>)>();

  int UA_XmlElement_encodeBinary(
    ffi.Pointer<UA_XmlElement> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_XmlElement_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_XmlElement_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_XmlElement>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_XmlElement_encodeBinary');
  late final _UA_XmlElement_encodeBinary =
      _UA_XmlElement_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_XmlElement>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_XmlElement_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_XmlElement> dst,
  ) {
    return _UA_XmlElement_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_XmlElement_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_XmlElement>)>>('UA_XmlElement_decodeBinary');
  late final _UA_XmlElement_decodeBinary =
      _UA_XmlElement_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_XmlElement>)>();

  int UA_NodeId_calcSizeBinary(
    ffi.Pointer<UA_NodeId> src,
  ) {
    return _UA_NodeId_calcSizeBinary(
      src,
    );
  }

  late final _UA_NodeId_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_NodeId>)>>(
          'UA_NodeId_calcSizeBinary');
  late final _UA_NodeId_calcSizeBinary = _UA_NodeId_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_NodeId>)>();

  int UA_NodeId_encodeBinary(
    ffi.Pointer<UA_NodeId> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_NodeId_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_NodeId_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_NodeId_encodeBinary');
  late final _UA_NodeId_encodeBinary = _UA_NodeId_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_NodeId>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_NodeId_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NodeId> dst,
  ) {
    return _UA_NodeId_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NodeId_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeId_decodeBinary');
  late final _UA_NodeId_decodeBinary = _UA_NodeId_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_ExpandedNodeId_calcSizeBinary(
    ffi.Pointer<UA_ExpandedNodeId> src,
  ) {
    return _UA_ExpandedNodeId_calcSizeBinary(
      src,
    );
  }

  late final _UA_ExpandedNodeId_calcSizeBinaryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_calcSizeBinary');
  late final _UA_ExpandedNodeId_calcSizeBinary =
      _UA_ExpandedNodeId_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_ExpandedNodeId_encodeBinary(
    ffi.Pointer<UA_ExpandedNodeId> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_ExpandedNodeId_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_ExpandedNodeId_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_ExpandedNodeId_encodeBinary');
  late final _UA_ExpandedNodeId_encodeBinary =
      _UA_ExpandedNodeId_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ExpandedNodeId>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_ExpandedNodeId_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_ExpandedNodeId> dst,
  ) {
    return _UA_ExpandedNodeId_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_ExpandedNodeId_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_ExpandedNodeId_decodeBinary');
  late final _UA_ExpandedNodeId_decodeBinary =
      _UA_ExpandedNodeId_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_ExpandedNodeId>)>();

  int UA_StatusCode_calcSizeBinary(
    ffi.Pointer<UA_StatusCode> src,
  ) {
    return _UA_StatusCode_calcSizeBinary(
      src,
    );
  }

  late final _UA_StatusCode_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_StatusCode>)>>(
      'UA_StatusCode_calcSizeBinary');
  late final _UA_StatusCode_calcSizeBinary = _UA_StatusCode_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_StatusCode>)>();

  int UA_StatusCode_encodeBinary(
    ffi.Pointer<UA_StatusCode> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_StatusCode_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_StatusCode_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_StatusCode>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_StatusCode_encodeBinary');
  late final _UA_StatusCode_encodeBinary =
      _UA_StatusCode_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_StatusCode>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_StatusCode_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_StatusCode> dst,
  ) {
    return _UA_StatusCode_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_StatusCode_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_StatusCode>)>>('UA_StatusCode_decodeBinary');
  late final _UA_StatusCode_decodeBinary =
      _UA_StatusCode_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_StatusCode>)>();

  int UA_QualifiedName_calcSizeBinary(
    ffi.Pointer<UA_QualifiedName> src,
  ) {
    return _UA_QualifiedName_calcSizeBinary(
      src,
    );
  }

  late final _UA_QualifiedName_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_QualifiedName>)>>(
      'UA_QualifiedName_calcSizeBinary');
  late final _UA_QualifiedName_calcSizeBinary =
      _UA_QualifiedName_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_QualifiedName>)>();

  int UA_QualifiedName_encodeBinary(
    ffi.Pointer<UA_QualifiedName> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_QualifiedName_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_QualifiedName_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_QualifiedName_encodeBinary');
  late final _UA_QualifiedName_encodeBinary =
      _UA_QualifiedName_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_QualifiedName>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_QualifiedName_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_QualifiedName> dst,
  ) {
    return _UA_QualifiedName_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_QualifiedName_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>)>>('UA_QualifiedName_decodeBinary');
  late final _UA_QualifiedName_decodeBinary =
      _UA_QualifiedName_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_QualifiedName>)>();

  int UA_LocalizedText_calcSizeBinary(
    ffi.Pointer<UA_LocalizedText> src,
  ) {
    return _UA_LocalizedText_calcSizeBinary(
      src,
    );
  }

  late final _UA_LocalizedText_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_LocalizedText>)>>(
      'UA_LocalizedText_calcSizeBinary');
  late final _UA_LocalizedText_calcSizeBinary =
      _UA_LocalizedText_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_LocalizedText>)>();

  int UA_LocalizedText_encodeBinary(
    ffi.Pointer<UA_LocalizedText> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_LocalizedText_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_LocalizedText_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_LocalizedText>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_LocalizedText_encodeBinary');
  late final _UA_LocalizedText_encodeBinary =
      _UA_LocalizedText_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_LocalizedText>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_LocalizedText_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_LocalizedText> dst,
  ) {
    return _UA_LocalizedText_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_LocalizedText_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_LocalizedText>)>>('UA_LocalizedText_decodeBinary');
  late final _UA_LocalizedText_decodeBinary =
      _UA_LocalizedText_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_LocalizedText>)>();

  int UA_ExtensionObject_calcSizeBinary(
    ffi.Pointer<UA_ExtensionObject> src,
  ) {
    return _UA_ExtensionObject_calcSizeBinary(
      src,
    );
  }

  late final _UA_ExtensionObject_calcSizeBinaryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_calcSizeBinary');
  late final _UA_ExtensionObject_calcSizeBinary =
      _UA_ExtensionObject_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ExtensionObject>)>();

  int UA_ExtensionObject_encodeBinary(
    ffi.Pointer<UA_ExtensionObject> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_ExtensionObject_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_ExtensionObject_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_ExtensionObject_encodeBinary');
  late final _UA_ExtensionObject_encodeBinary =
      _UA_ExtensionObject_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_ExtensionObject_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_ExtensionObject> dst,
  ) {
    return _UA_ExtensionObject_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_ExtensionObject_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_ExtensionObject_decodeBinary');
  late final _UA_ExtensionObject_decodeBinary =
      _UA_ExtensionObject_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_ExtensionObject>)>();

  int UA_DataValue_calcSizeBinary(
    ffi.Pointer<UA_DataValue> src,
  ) {
    return _UA_DataValue_calcSizeBinary(
      src,
    );
  }

  late final _UA_DataValue_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_DataValue>)>>(
          'UA_DataValue_calcSizeBinary');
  late final _UA_DataValue_calcSizeBinary = _UA_DataValue_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_DataValue>)>();

  int UA_DataValue_encodeBinary(
    ffi.Pointer<UA_DataValue> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_DataValue_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_DataValue_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataValue>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_DataValue_encodeBinary');
  late final _UA_DataValue_encodeBinary =
      _UA_DataValue_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DataValue>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_DataValue_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_DataValue> dst,
  ) {
    return _UA_DataValue_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_DataValue_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataValue>)>>('UA_DataValue_decodeBinary');
  late final _UA_DataValue_decodeBinary =
      _UA_DataValue_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataValue>)>();

  int UA_Variant_calcSizeBinary(
    ffi.Pointer<UA_Variant> src,
  ) {
    return _UA_Variant_calcSizeBinary(
      src,
    );
  }

  late final _UA_Variant_calcSizeBinaryPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<UA_Variant>)>>(
          'UA_Variant_calcSizeBinary');
  late final _UA_Variant_calcSizeBinary = _UA_Variant_calcSizeBinaryPtr
      .asFunction<int Function(ffi.Pointer<UA_Variant>)>();

  int UA_Variant_encodeBinary(
    ffi.Pointer<UA_Variant> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_Variant_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_Variant_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Variant>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_Variant_encodeBinary');
  late final _UA_Variant_encodeBinary = _UA_Variant_encodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_Variant>, ffi.Pointer<ffi.Pointer<UA_Byte>>,
          ffi.Pointer<UA_Byte>)>();

  int UA_Variant_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_Variant> dst,
  ) {
    return _UA_Variant_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_Variant_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_Variant>)>>('UA_Variant_decodeBinary');
  late final _UA_Variant_decodeBinary = _UA_Variant_decodeBinaryPtr.asFunction<
      int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<UA_Variant>)>();

  int UA_DiagnosticInfo_calcSizeBinary(
    ffi.Pointer<UA_DiagnosticInfo> src,
  ) {
    return _UA_DiagnosticInfo_calcSizeBinary(
      src,
    );
  }

  late final _UA_DiagnosticInfo_calcSizeBinaryPtr = _lookup<
          ffi
          .NativeFunction<ffi.Size Function(ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_calcSizeBinary');
  late final _UA_DiagnosticInfo_calcSizeBinary =
      _UA_DiagnosticInfo_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DiagnosticInfo>)>();

  int UA_DiagnosticInfo_encodeBinary(
    ffi.Pointer<UA_DiagnosticInfo> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_DiagnosticInfo_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_DiagnosticInfo_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DiagnosticInfo>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_DiagnosticInfo_encodeBinary');
  late final _UA_DiagnosticInfo_encodeBinary =
      _UA_DiagnosticInfo_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DiagnosticInfo>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_DiagnosticInfo_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_DiagnosticInfo> dst,
  ) {
    return _UA_DiagnosticInfo_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_DiagnosticInfo_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_DiagnosticInfo>)>>(
      'UA_DiagnosticInfo_decodeBinary');
  late final _UA_DiagnosticInfo_decodeBinary =
      _UA_DiagnosticInfo_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DiagnosticInfo>)>();

  late final ffi.Pointer<ffi.Pointer<UA_DataType>> _UA_TRANSPORT =
      _lookup<ffi.Pointer<UA_DataType>>('UA_TRANSPORT');

  ffi.Pointer<UA_DataType> get UA_TRANSPORT => _UA_TRANSPORT.value;

  set UA_TRANSPORT(ffi.Pointer<UA_DataType> value) =>
      _UA_TRANSPORT.value = value;

  void UA_MessageType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageType_init(
      p,
    );
  }

  late final _UA_MessageType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageType_init');
  late final _UA_MessageType_init = _UA_MessageType_initPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_MessageType_new() {
    return _UA_MessageType_new();
  }

  late final _UA_MessageType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_MessageType_new');
  late final _UA_MessageType_new =
      _UA_MessageType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_MessageType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_MessageType_copy(
      src,
      dst,
    );
  }

  late final _UA_MessageType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_MessageType_copy');
  late final _UA_MessageType_copy = _UA_MessageType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_MessageType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageType_deleteMembers(
      p,
    );
  }

  late final _UA_MessageType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageType_deleteMembers');
  late final _UA_MessageType_deleteMembers = _UA_MessageType_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageType_clear(
      p,
    );
  }

  late final _UA_MessageType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageType_clear');
  late final _UA_MessageType_clear = _UA_MessageType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_MessageType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_MessageType_delete(
      p,
    );
  }

  late final _UA_MessageType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_MessageType_delete');
  late final _UA_MessageType_delete = _UA_MessageType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ChunkType_init(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ChunkType_init(
      p,
    );
  }

  late final _UA_ChunkType_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ChunkType_init');
  late final _UA_ChunkType_init =
      _UA_ChunkType_initPtr.asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int32> UA_ChunkType_new() {
    return _UA_ChunkType_new();
  }

  late final _UA_ChunkType_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          'UA_ChunkType_new');
  late final _UA_ChunkType_new =
      _UA_ChunkType_newPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int UA_ChunkType_copy(
    ffi.Pointer<ffi.Int32> src,
    ffi.Pointer<ffi.Int32> dst,
  ) {
    return _UA_ChunkType_copy(
      src,
      dst,
    );
  }

  late final _UA_ChunkType_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>)>>('UA_ChunkType_copy');
  late final _UA_ChunkType_copy = _UA_ChunkType_copyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  void UA_ChunkType_deleteMembers(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ChunkType_deleteMembers(
      p,
    );
  }

  late final _UA_ChunkType_deleteMembersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ChunkType_deleteMembers');
  late final _UA_ChunkType_deleteMembers = _UA_ChunkType_deleteMembersPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ChunkType_clear(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ChunkType_clear(
      p,
    );
  }

  late final _UA_ChunkType_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ChunkType_clear');
  late final _UA_ChunkType_clear = _UA_ChunkType_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_ChunkType_delete(
    ffi.Pointer<ffi.Int32> p,
  ) {
    return _UA_ChunkType_delete(
      p,
    );
  }

  late final _UA_ChunkType_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int32>)>>(
          'UA_ChunkType_delete');
  late final _UA_ChunkType_delete = _UA_ChunkType_deletePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int32>)>();

  void UA_TcpMessageHeader_init(
    ffi.Pointer<UA_TcpMessageHeader> p,
  ) {
    return _UA_TcpMessageHeader_init(
      p,
    );
  }

  late final _UA_TcpMessageHeader_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpMessageHeader>)>>(
      'UA_TcpMessageHeader_init');
  late final _UA_TcpMessageHeader_init = _UA_TcpMessageHeader_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TcpMessageHeader>)>();

  ffi.Pointer<UA_TcpMessageHeader> UA_TcpMessageHeader_new() {
    return _UA_TcpMessageHeader_new();
  }

  late final _UA_TcpMessageHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TcpMessageHeader> Function()>>(
          'UA_TcpMessageHeader_new');
  late final _UA_TcpMessageHeader_new = _UA_TcpMessageHeader_newPtr.asFunction<
      ffi.Pointer<UA_TcpMessageHeader> Function()>();

  int UA_TcpMessageHeader_copy(
    ffi.Pointer<UA_TcpMessageHeader> src,
    ffi.Pointer<UA_TcpMessageHeader> dst,
  ) {
    return _UA_TcpMessageHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_TcpMessageHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TcpMessageHeader>,
              ffi.Pointer<UA_TcpMessageHeader>)>>('UA_TcpMessageHeader_copy');
  late final _UA_TcpMessageHeader_copy =
      _UA_TcpMessageHeader_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TcpMessageHeader>,
              ffi.Pointer<UA_TcpMessageHeader>)>();

  void UA_TcpMessageHeader_deleteMembers(
    ffi.Pointer<UA_TcpMessageHeader> p,
  ) {
    return _UA_TcpMessageHeader_deleteMembers(
      p,
    );
  }

  late final _UA_TcpMessageHeader_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpMessageHeader>)>>(
      'UA_TcpMessageHeader_deleteMembers');
  late final _UA_TcpMessageHeader_deleteMembers =
      _UA_TcpMessageHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TcpMessageHeader>)>();

  void UA_TcpMessageHeader_clear(
    ffi.Pointer<UA_TcpMessageHeader> p,
  ) {
    return _UA_TcpMessageHeader_clear(
      p,
    );
  }

  late final _UA_TcpMessageHeader_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpMessageHeader>)>>(
      'UA_TcpMessageHeader_clear');
  late final _UA_TcpMessageHeader_clear = _UA_TcpMessageHeader_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TcpMessageHeader>)>();

  void UA_TcpMessageHeader_delete(
    ffi.Pointer<UA_TcpMessageHeader> p,
  ) {
    return _UA_TcpMessageHeader_delete(
      p,
    );
  }

  late final _UA_TcpMessageHeader_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpMessageHeader>)>>(
      'UA_TcpMessageHeader_delete');
  late final _UA_TcpMessageHeader_delete = _UA_TcpMessageHeader_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TcpMessageHeader>)>();

  void UA_TcpHelloMessage_init(
    ffi.Pointer<UA_TcpHelloMessage> p,
  ) {
    return _UA_TcpHelloMessage_init(
      p,
    );
  }

  late final _UA_TcpHelloMessage_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpHelloMessage>)>>(
      'UA_TcpHelloMessage_init');
  late final _UA_TcpHelloMessage_init = _UA_TcpHelloMessage_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TcpHelloMessage>)>();

  ffi.Pointer<UA_TcpHelloMessage> UA_TcpHelloMessage_new() {
    return _UA_TcpHelloMessage_new();
  }

  late final _UA_TcpHelloMessage_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TcpHelloMessage> Function()>>(
          'UA_TcpHelloMessage_new');
  late final _UA_TcpHelloMessage_new = _UA_TcpHelloMessage_newPtr.asFunction<
      ffi.Pointer<UA_TcpHelloMessage> Function()>();

  int UA_TcpHelloMessage_copy(
    ffi.Pointer<UA_TcpHelloMessage> src,
    ffi.Pointer<UA_TcpHelloMessage> dst,
  ) {
    return _UA_TcpHelloMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_TcpHelloMessage_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TcpHelloMessage>,
              ffi.Pointer<UA_TcpHelloMessage>)>>('UA_TcpHelloMessage_copy');
  late final _UA_TcpHelloMessage_copy = _UA_TcpHelloMessage_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_TcpHelloMessage>, ffi.Pointer<UA_TcpHelloMessage>)>();

  void UA_TcpHelloMessage_deleteMembers(
    ffi.Pointer<UA_TcpHelloMessage> p,
  ) {
    return _UA_TcpHelloMessage_deleteMembers(
      p,
    );
  }

  late final _UA_TcpHelloMessage_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpHelloMessage>)>>(
      'UA_TcpHelloMessage_deleteMembers');
  late final _UA_TcpHelloMessage_deleteMembers =
      _UA_TcpHelloMessage_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TcpHelloMessage>)>();

  void UA_TcpHelloMessage_clear(
    ffi.Pointer<UA_TcpHelloMessage> p,
  ) {
    return _UA_TcpHelloMessage_clear(
      p,
    );
  }

  late final _UA_TcpHelloMessage_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpHelloMessage>)>>(
      'UA_TcpHelloMessage_clear');
  late final _UA_TcpHelloMessage_clear = _UA_TcpHelloMessage_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TcpHelloMessage>)>();

  void UA_TcpHelloMessage_delete(
    ffi.Pointer<UA_TcpHelloMessage> p,
  ) {
    return _UA_TcpHelloMessage_delete(
      p,
    );
  }

  late final _UA_TcpHelloMessage_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpHelloMessage>)>>(
      'UA_TcpHelloMessage_delete');
  late final _UA_TcpHelloMessage_delete = _UA_TcpHelloMessage_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TcpHelloMessage>)>();

  void UA_TcpAcknowledgeMessage_init(
    ffi.Pointer<UA_TcpAcknowledgeMessage> p,
  ) {
    return _UA_TcpAcknowledgeMessage_init(
      p,
    );
  }

  late final _UA_TcpAcknowledgeMessage_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_TcpAcknowledgeMessage_init');
  late final _UA_TcpAcknowledgeMessage_init = _UA_TcpAcknowledgeMessage_initPtr
      .asFunction<void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  ffi.Pointer<UA_TcpAcknowledgeMessage> UA_TcpAcknowledgeMessage_new() {
    return _UA_TcpAcknowledgeMessage_new();
  }

  late final _UA_TcpAcknowledgeMessage_newPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UA_TcpAcknowledgeMessage> Function()>>(
      'UA_TcpAcknowledgeMessage_new');
  late final _UA_TcpAcknowledgeMessage_new = _UA_TcpAcknowledgeMessage_newPtr
      .asFunction<ffi.Pointer<UA_TcpAcknowledgeMessage> Function()>();

  int UA_TcpAcknowledgeMessage_copy(
    ffi.Pointer<UA_TcpAcknowledgeMessage> src,
    ffi.Pointer<UA_TcpAcknowledgeMessage> dst,
  ) {
    return _UA_TcpAcknowledgeMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_TcpAcknowledgeMessage_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_TcpAcknowledgeMessage>,
                  ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_TcpAcknowledgeMessage_copy');
  late final _UA_TcpAcknowledgeMessage_copy =
      _UA_TcpAcknowledgeMessage_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_TcpAcknowledgeMessage>,
              ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  void UA_TcpAcknowledgeMessage_deleteMembers(
    ffi.Pointer<UA_TcpAcknowledgeMessage> p,
  ) {
    return _UA_TcpAcknowledgeMessage_deleteMembers(
      p,
    );
  }

  late final _UA_TcpAcknowledgeMessage_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_TcpAcknowledgeMessage_deleteMembers');
  late final _UA_TcpAcknowledgeMessage_deleteMembers =
      _UA_TcpAcknowledgeMessage_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  void UA_TcpAcknowledgeMessage_clear(
    ffi.Pointer<UA_TcpAcknowledgeMessage> p,
  ) {
    return _UA_TcpAcknowledgeMessage_clear(
      p,
    );
  }

  late final _UA_TcpAcknowledgeMessage_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_TcpAcknowledgeMessage_clear');
  late final _UA_TcpAcknowledgeMessage_clear =
      _UA_TcpAcknowledgeMessage_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  void UA_TcpAcknowledgeMessage_delete(
    ffi.Pointer<UA_TcpAcknowledgeMessage> p,
  ) {
    return _UA_TcpAcknowledgeMessage_delete(
      p,
    );
  }

  late final _UA_TcpAcknowledgeMessage_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_TcpAcknowledgeMessage_delete');
  late final _UA_TcpAcknowledgeMessage_delete =
      _UA_TcpAcknowledgeMessage_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  void UA_TcpErrorMessage_init(
    ffi.Pointer<UA_TcpErrorMessage> p,
  ) {
    return _UA_TcpErrorMessage_init(
      p,
    );
  }

  late final _UA_TcpErrorMessage_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpErrorMessage>)>>(
      'UA_TcpErrorMessage_init');
  late final _UA_TcpErrorMessage_init = _UA_TcpErrorMessage_initPtr.asFunction<
      void Function(ffi.Pointer<UA_TcpErrorMessage>)>();

  ffi.Pointer<UA_TcpErrorMessage> UA_TcpErrorMessage_new() {
    return _UA_TcpErrorMessage_new();
  }

  late final _UA_TcpErrorMessage_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_TcpErrorMessage> Function()>>(
          'UA_TcpErrorMessage_new');
  late final _UA_TcpErrorMessage_new = _UA_TcpErrorMessage_newPtr.asFunction<
      ffi.Pointer<UA_TcpErrorMessage> Function()>();

  int UA_TcpErrorMessage_copy(
    ffi.Pointer<UA_TcpErrorMessage> src,
    ffi.Pointer<UA_TcpErrorMessage> dst,
  ) {
    return _UA_TcpErrorMessage_copy(
      src,
      dst,
    );
  }

  late final _UA_TcpErrorMessage_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TcpErrorMessage>,
              ffi.Pointer<UA_TcpErrorMessage>)>>('UA_TcpErrorMessage_copy');
  late final _UA_TcpErrorMessage_copy = _UA_TcpErrorMessage_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_TcpErrorMessage>, ffi.Pointer<UA_TcpErrorMessage>)>();

  void UA_TcpErrorMessage_deleteMembers(
    ffi.Pointer<UA_TcpErrorMessage> p,
  ) {
    return _UA_TcpErrorMessage_deleteMembers(
      p,
    );
  }

  late final _UA_TcpErrorMessage_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpErrorMessage>)>>(
      'UA_TcpErrorMessage_deleteMembers');
  late final _UA_TcpErrorMessage_deleteMembers =
      _UA_TcpErrorMessage_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_TcpErrorMessage>)>();

  void UA_TcpErrorMessage_clear(
    ffi.Pointer<UA_TcpErrorMessage> p,
  ) {
    return _UA_TcpErrorMessage_clear(
      p,
    );
  }

  late final _UA_TcpErrorMessage_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpErrorMessage>)>>(
      'UA_TcpErrorMessage_clear');
  late final _UA_TcpErrorMessage_clear = _UA_TcpErrorMessage_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TcpErrorMessage>)>();

  void UA_TcpErrorMessage_delete(
    ffi.Pointer<UA_TcpErrorMessage> p,
  ) {
    return _UA_TcpErrorMessage_delete(
      p,
    );
  }

  late final _UA_TcpErrorMessage_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TcpErrorMessage>)>>(
      'UA_TcpErrorMessage_delete');
  late final _UA_TcpErrorMessage_delete = _UA_TcpErrorMessage_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_TcpErrorMessage>)>();

  void UA_AsymmetricAlgorithmSecurityHeader_init(
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> p,
  ) {
    return _UA_AsymmetricAlgorithmSecurityHeader_init(
      p,
    );
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_AsymmetricAlgorithmSecurityHeader_init');
  late final _UA_AsymmetricAlgorithmSecurityHeader_init =
      _UA_AsymmetricAlgorithmSecurityHeader_initPtr.asFunction<
          void Function(ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>
      UA_AsymmetricAlgorithmSecurityHeader_new() {
    return _UA_AsymmetricAlgorithmSecurityHeader_new();
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>
              Function()>>('UA_AsymmetricAlgorithmSecurityHeader_new');
  late final _UA_AsymmetricAlgorithmSecurityHeader_new =
      _UA_AsymmetricAlgorithmSecurityHeader_newPtr.asFunction<
          ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> Function()>();

  int UA_AsymmetricAlgorithmSecurityHeader_copy(
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> src,
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> dst,
  ) {
    return _UA_AsymmetricAlgorithmSecurityHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>,
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_AsymmetricAlgorithmSecurityHeader_copy');
  late final _UA_AsymmetricAlgorithmSecurityHeader_copy =
      _UA_AsymmetricAlgorithmSecurityHeader_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>,
              ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  void UA_AsymmetricAlgorithmSecurityHeader_deleteMembers(
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> p,
  ) {
    return _UA_AsymmetricAlgorithmSecurityHeader_deleteMembers(
      p,
    );
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_deleteMembersPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_AsymmetricAlgorithmSecurityHeader_deleteMembers');
  late final _UA_AsymmetricAlgorithmSecurityHeader_deleteMembers =
      _UA_AsymmetricAlgorithmSecurityHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  void UA_AsymmetricAlgorithmSecurityHeader_clear(
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> p,
  ) {
    return _UA_AsymmetricAlgorithmSecurityHeader_clear(
      p,
    );
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_AsymmetricAlgorithmSecurityHeader_clear');
  late final _UA_AsymmetricAlgorithmSecurityHeader_clear =
      _UA_AsymmetricAlgorithmSecurityHeader_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  void UA_AsymmetricAlgorithmSecurityHeader_delete(
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> p,
  ) {
    return _UA_AsymmetricAlgorithmSecurityHeader_delete(
      p,
    );
  }

  late final _UA_AsymmetricAlgorithmSecurityHeader_deletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_AsymmetricAlgorithmSecurityHeader_delete');
  late final _UA_AsymmetricAlgorithmSecurityHeader_delete =
      _UA_AsymmetricAlgorithmSecurityHeader_deletePtr.asFunction<
          void Function(ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  void UA_SequenceHeader_init(
    ffi.Pointer<UA_SequenceHeader> p,
  ) {
    return _UA_SequenceHeader_init(
      p,
    );
  }

  late final _UA_SequenceHeader_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_SequenceHeader>)>>(
      'UA_SequenceHeader_init');
  late final _UA_SequenceHeader_init = _UA_SequenceHeader_initPtr.asFunction<
      void Function(ffi.Pointer<UA_SequenceHeader>)>();

  ffi.Pointer<UA_SequenceHeader> UA_SequenceHeader_new() {
    return _UA_SequenceHeader_new();
  }

  late final _UA_SequenceHeader_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_SequenceHeader> Function()>>(
          'UA_SequenceHeader_new');
  late final _UA_SequenceHeader_new = _UA_SequenceHeader_newPtr.asFunction<
      ffi.Pointer<UA_SequenceHeader> Function()>();

  int UA_SequenceHeader_copy(
    ffi.Pointer<UA_SequenceHeader> src,
    ffi.Pointer<UA_SequenceHeader> dst,
  ) {
    return _UA_SequenceHeader_copy(
      src,
      dst,
    );
  }

  late final _UA_SequenceHeader_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_SequenceHeader>,
              ffi.Pointer<UA_SequenceHeader>)>>('UA_SequenceHeader_copy');
  late final _UA_SequenceHeader_copy = _UA_SequenceHeader_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_SequenceHeader>, ffi.Pointer<UA_SequenceHeader>)>();

  void UA_SequenceHeader_deleteMembers(
    ffi.Pointer<UA_SequenceHeader> p,
  ) {
    return _UA_SequenceHeader_deleteMembers(
      p,
    );
  }

  late final _UA_SequenceHeader_deleteMembersPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_SequenceHeader>)>>(
      'UA_SequenceHeader_deleteMembers');
  late final _UA_SequenceHeader_deleteMembers =
      _UA_SequenceHeader_deleteMembersPtr.asFunction<
          void Function(ffi.Pointer<UA_SequenceHeader>)>();

  void UA_SequenceHeader_clear(
    ffi.Pointer<UA_SequenceHeader> p,
  ) {
    return _UA_SequenceHeader_clear(
      p,
    );
  }

  late final _UA_SequenceHeader_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_SequenceHeader>)>>(
      'UA_SequenceHeader_clear');
  late final _UA_SequenceHeader_clear = _UA_SequenceHeader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_SequenceHeader>)>();

  void UA_SequenceHeader_delete(
    ffi.Pointer<UA_SequenceHeader> p,
  ) {
    return _UA_SequenceHeader_delete(
      p,
    );
  }

  late final _UA_SequenceHeader_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_SequenceHeader>)>>(
      'UA_SequenceHeader_delete');
  late final _UA_SequenceHeader_delete = _UA_SequenceHeader_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_SequenceHeader>)>();

  /// amalgamated original file "/src/ua_connection_internal.h"
  void UA_Connection_sendError(
    ffi.Pointer<UA_Connection> connection,
    ffi.Pointer<UA_TcpErrorMessage> error,
  ) {
    return _UA_Connection_sendError(
      connection,
      error,
    );
  }

  late final _UA_Connection_sendErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection>,
              ffi.Pointer<UA_TcpErrorMessage>)>>('UA_Connection_sendError');
  late final _UA_Connection_sendError = _UA_Connection_sendErrorPtr.asFunction<
      void Function(
          ffi.Pointer<UA_Connection>, ffi.Pointer<UA_TcpErrorMessage>)>();

  void UA_Connection_detachSecureChannel(
    ffi.Pointer<UA_Connection> connection,
  ) {
    return _UA_Connection_detachSecureChannel(
      connection,
    );
  }

  late final _UA_Connection_detachSecureChannelPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Connection>)>>(
      'UA_Connection_detachSecureChannel');
  late final _UA_Connection_detachSecureChannel =
      _UA_Connection_detachSecureChannelPtr.asFunction<
          void Function(ffi.Pointer<UA_Connection>)>();

  void UA_Connection_attachSecureChannel(
    ffi.Pointer<UA_Connection> connection,
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_Connection_attachSecureChannel(
      connection,
      channel,
    );
  }

  late final _UA_Connection_attachSecureChannelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Connection>, ffi.Pointer<UA_SecureChannel>)>>(
      'UA_Connection_attachSecureChannel');
  late final _UA_Connection_attachSecureChannel =
      _UA_Connection_attachSecureChannelPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Connection>, ffi.Pointer<UA_SecureChannel>)>();

  void UA_SecureChannel_init(
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_ConnectionConfig> config,
  ) {
    return _UA_SecureChannel_init(
      channel,
      config,
    );
  }

  late final _UA_SecureChannel_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_ConnectionConfig>)>>('UA_SecureChannel_init');
  late final _UA_SecureChannel_init = _UA_SecureChannel_initPtr.asFunction<
      void Function(
          ffi.Pointer<UA_SecureChannel>, ffi.Pointer<UA_ConnectionConfig>)>();

  void UA_SecureChannel_close(
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_SecureChannel_close(
      channel,
    );
  }

  late final _UA_SecureChannel_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecureChannel>)>>(
      'UA_SecureChannel_close');
  late final _UA_SecureChannel_close = _UA_SecureChannel_closePtr.asFunction<
      void Function(ffi.Pointer<UA_SecureChannel>)>();

  int UA_SecureChannel_processHELACK(
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_TcpAcknowledgeMessage> remoteConfig,
  ) {
    return _UA_SecureChannel_processHELACK(
      channel,
      remoteConfig,
    );
  }

  late final _UA_SecureChannel_processHELACKPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_TcpAcknowledgeMessage>)>>(
      'UA_SecureChannel_processHELACK');
  late final _UA_SecureChannel_processHELACK =
      _UA_SecureChannel_processHELACKPtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_TcpAcknowledgeMessage>)>();

  int UA_SecureChannel_setSecurityPolicy(
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_SecurityPolicy> securityPolicy,
    ffi.Pointer<UA_ByteString> remoteCertificate,
  ) {
    return _UA_SecureChannel_setSecurityPolicy(
      channel,
      securityPolicy,
      remoteCertificate,
    );
  }

  late final _UA_SecureChannel_setSecurityPolicyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_SecurityPolicy>, ffi.Pointer<UA_ByteString>)>>(
      'UA_SecureChannel_setSecurityPolicy');
  late final _UA_SecureChannel_setSecurityPolicy =
      _UA_SecureChannel_setSecurityPolicyPtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_SecurityPolicy>, ffi.Pointer<UA_ByteString>)>();

  void UA_SecureChannel_deleteBuffered(
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_SecureChannel_deleteBuffered(
      channel,
    );
  }

  late final _UA_SecureChannel_deleteBufferedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_SecureChannel>)>>(
      'UA_SecureChannel_deleteBuffered');
  late final _UA_SecureChannel_deleteBuffered =
      _UA_SecureChannel_deleteBufferedPtr.asFunction<
          void Function(ffi.Pointer<UA_SecureChannel>)>();

  /// amalgamated original file "/src/ua_securechannel_crypto.c"
  int UA_SecureChannel_generateLocalNonce(
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_SecureChannel_generateLocalNonce(
      channel,
    );
  }

  late final _UA_SecureChannel_generateLocalNoncePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>)>>(
      'UA_SecureChannel_generateLocalNonce');
  late final _UA_SecureChannel_generateLocalNonce =
      _UA_SecureChannel_generateLocalNoncePtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>)>();

  int UA_SecureChannel_generateLocalKeys(
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_SecureChannel_generateLocalKeys(
      channel,
    );
  }

  late final _UA_SecureChannel_generateLocalKeysPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>)>>(
      'UA_SecureChannel_generateLocalKeys');
  late final _UA_SecureChannel_generateLocalKeys =
      _UA_SecureChannel_generateLocalKeysPtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>)>();

  /// Sending Messages
  /// ----------------
  int UA_SecureChannel_sendAsymmetricOPNMessage(
    ffi.Pointer<UA_SecureChannel> channel,
    int requestId,
    ffi.Pointer<ffi.Void> content,
    ffi.Pointer<UA_DataType> contentType,
  ) {
    return _UA_SecureChannel_sendAsymmetricOPNMessage(
      channel,
      requestId,
      content,
      contentType,
    );
  }

  late final _UA_SecureChannel_sendAsymmetricOPNMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>, UA_UInt32,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_SecureChannel_sendAsymmetricOPNMessage');
  late final _UA_SecureChannel_sendAsymmetricOPNMessage =
      _UA_SecureChannel_sendAsymmetricOPNMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_SecureChannel_sendSymmetricMessage(
    ffi.Pointer<UA_SecureChannel> channel,
    int requestId,
    int messageType,
    ffi.Pointer<ffi.Void> payload,
    ffi.Pointer<UA_DataType> payloadType,
  ) {
    return _UA_SecureChannel_sendSymmetricMessage(
      channel,
      requestId,
      messageType,
      payload,
      payloadType,
    );
  }

  late final _UA_SecureChannel_sendSymmetricMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_SecureChannel>, UA_UInt32,
                  ffi.Int32, ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>>(
      'UA_SecureChannel_sendSymmetricMessage');
  late final _UA_SecureChannel_sendSymmetricMessage =
      _UA_SecureChannel_sendSymmetricMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>, int, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<UA_DataType>)>();

  int UA_MessageContext_begin(
    ffi.Pointer<UA_MessageContext> mc,
    ffi.Pointer<UA_SecureChannel> channel,
    int requestId,
    int messageType,
  ) {
    return _UA_MessageContext_begin(
      mc,
      channel,
      requestId,
      messageType,
    );
  }

  late final _UA_MessageContext_beginPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_MessageContext>,
              ffi.Pointer<UA_SecureChannel>,
              UA_UInt32,
              ffi.Int32)>>('UA_MessageContext_begin');
  late final _UA_MessageContext_begin = _UA_MessageContext_beginPtr.asFunction<
      int Function(ffi.Pointer<UA_MessageContext>,
          ffi.Pointer<UA_SecureChannel>, int, int)>();

  int UA_MessageContext_encode(
    ffi.Pointer<UA_MessageContext> mc,
    ffi.Pointer<ffi.Void> content,
    ffi.Pointer<UA_DataType> contentType,
  ) {
    return _UA_MessageContext_encode(
      mc,
      content,
      contentType,
    );
  }

  late final _UA_MessageContext_encodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_MessageContext>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>>('UA_MessageContext_encode');
  late final _UA_MessageContext_encode =
      _UA_MessageContext_encodePtr.asFunction<
          int Function(ffi.Pointer<UA_MessageContext>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_DataType>)>();

  int UA_MessageContext_finish(
    ffi.Pointer<UA_MessageContext> mc,
  ) {
    return _UA_MessageContext_finish(
      mc,
    );
  }

  late final _UA_MessageContext_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_MessageContext>)>>('UA_MessageContext_finish');
  late final _UA_MessageContext_finish = _UA_MessageContext_finishPtr
      .asFunction<int Function(ffi.Pointer<UA_MessageContext>)>();

  void UA_MessageContext_abort(
    ffi.Pointer<UA_MessageContext> mc,
  ) {
    return _UA_MessageContext_abort(
      mc,
    );
  }

  late final _UA_MessageContext_abortPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_MessageContext>)>>(
      'UA_MessageContext_abort');
  late final _UA_MessageContext_abort = _UA_MessageContext_abortPtr.asFunction<
      void Function(ffi.Pointer<UA_MessageContext>)>();

  int UA_SecureChannel_processBuffer(
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<UA_ProcessMessageCallback> callback,
    ffi.Pointer<UA_ByteString> buffer,
  ) {
    return _UA_SecureChannel_processBuffer(
      channel,
      application,
      callback,
      buffer,
    );
  }

  late final _UA_SecureChannel_processBufferPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_ProcessMessageCallback>,
              ffi.Pointer<UA_ByteString>)>>('UA_SecureChannel_processBuffer');
  late final _UA_SecureChannel_processBuffer =
      _UA_SecureChannel_processBufferPtr.asFunction<
          int Function(
              ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_ProcessMessageCallback>,
              ffi.Pointer<UA_ByteString>)>();

  int UA_SecureChannel_receive(
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<UA_ProcessMessageCallback> callback,
    int timeout,
  ) {
    return _UA_SecureChannel_receive(
      channel,
      application,
      callback,
      timeout,
    );
  }

  late final _UA_SecureChannel_receivePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_ProcessMessageCallback>,
              UA_UInt32)>>('UA_SecureChannel_receive');
  late final _UA_SecureChannel_receive =
      _UA_SecureChannel_receivePtr.asFunction<
          int Function(ffi.Pointer<UA_SecureChannel>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_ProcessMessageCallback>, int)>();

  void UA_Timer_init(
    ffi.Pointer<UA_Timer> t,
  ) {
    return _UA_Timer_init(
      t,
    );
  }

  late final _UA_Timer_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Timer>)>>(
          'UA_Timer_init');
  late final _UA_Timer_init =
      _UA_Timer_initPtr.asFunction<void Function(ffi.Pointer<UA_Timer>)>();

  int UA_Timer_addTimedCallback(
    ffi.Pointer<UA_Timer> t,
    UA_ApplicationCallback callback,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<ffi.Void> data,
    int date,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Timer_addTimedCallback(
      t,
      callback,
      application,
      data,
      date,
      callbackId,
    );
  }

  late final _UA_Timer_addTimedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Timer>,
              UA_ApplicationCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              UA_DateTime,
              ffi.Pointer<UA_UInt64>)>>('UA_Timer_addTimedCallback');
  late final _UA_Timer_addTimedCallback =
      _UA_Timer_addTimedCallbackPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Timer>,
              UA_ApplicationCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<UA_UInt64>)>();

  void UA_Timer_addTimerEntry(
    ffi.Pointer<UA_Timer> t,
    ffi.Pointer<UA_TimerEntry> te,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Timer_addTimerEntry(
      t,
      te,
      callbackId,
    );
  }

  late final _UA_Timer_addTimerEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Timer>, ffi.Pointer<UA_TimerEntry>,
              ffi.Pointer<UA_UInt64>)>>('UA_Timer_addTimerEntry');
  late final _UA_Timer_addTimerEntry = _UA_Timer_addTimerEntryPtr.asFunction<
      void Function(ffi.Pointer<UA_Timer>, ffi.Pointer<UA_TimerEntry>,
          ffi.Pointer<UA_UInt64>)>();

  int UA_Timer_addRepeatedCallback(
    ffi.Pointer<UA_Timer> t,
    UA_ApplicationCallback callback,
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_DateTime> baseTime,
    int timerPolicy,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_Timer_addRepeatedCallback(
      t,
      callback,
      application,
      data,
      interval_ms,
      baseTime,
      timerPolicy,
      callbackId,
    );
  }

  late final _UA_Timer_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Timer>,
              UA_ApplicationCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_DateTime>,
              ffi.Int32,
              ffi.Pointer<UA_UInt64>)>>('UA_Timer_addRepeatedCallback');
  late final _UA_Timer_addRepeatedCallback =
      _UA_Timer_addRepeatedCallbackPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Timer>,
              UA_ApplicationCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              double,
              ffi.Pointer<UA_DateTime>,
              int,
              ffi.Pointer<UA_UInt64>)>();

  int UA_Timer_changeRepeatedCallback(
    ffi.Pointer<UA_Timer> t,
    int callbackId,
    double interval_ms,
    ffi.Pointer<UA_DateTime> baseTime,
    int timerPolicy,
  ) {
    return _UA_Timer_changeRepeatedCallback(
      t,
      callbackId,
      interval_ms,
      baseTime,
      timerPolicy,
    );
  }

  late final _UA_Timer_changeRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Timer>,
              UA_UInt64,
              UA_Double,
              ffi.Pointer<UA_DateTime>,
              ffi.Int32)>>('UA_Timer_changeRepeatedCallback');
  late final _UA_Timer_changeRepeatedCallback =
      _UA_Timer_changeRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Timer>, int, double,
              ffi.Pointer<UA_DateTime>, int)>();

  void UA_Timer_removeCallback(
    ffi.Pointer<UA_Timer> t,
    int callbackId,
  ) {
    return _UA_Timer_removeCallback(
      t,
      callbackId,
    );
  }

  late final _UA_Timer_removeCallbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_Timer>, UA_UInt64)>>(
      'UA_Timer_removeCallback');
  late final _UA_Timer_removeCallback = _UA_Timer_removeCallbackPtr.asFunction<
      void Function(ffi.Pointer<UA_Timer>, int)>();

  int UA_Timer_process(
    ffi.Pointer<UA_Timer> t,
    int nowMonotonic,
    UA_TimerExecutionCallback executionCallback,
    ffi.Pointer<ffi.Void> executionApplication,
  ) {
    return _UA_Timer_process(
      t,
      nowMonotonic,
      executionCallback,
      executionApplication,
    );
  }

  late final _UA_Timer_processPtr = _lookup<
      ffi.NativeFunction<
          UA_DateTime Function(
              ffi.Pointer<UA_Timer>,
              UA_DateTime,
              UA_TimerExecutionCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Timer_process');
  late final _UA_Timer_process = _UA_Timer_processPtr.asFunction<
      int Function(ffi.Pointer<UA_Timer>, int, UA_TimerExecutionCallback,
          ffi.Pointer<ffi.Void>)>();

  void UA_Timer_clear(
    ffi.Pointer<UA_Timer> t,
  ) {
    return _UA_Timer_clear(
      t,
    );
  }

  late final _UA_Timer_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Timer>)>>(
          'UA_Timer_clear');
  late final _UA_Timer_clear =
      _UA_Timer_clearPtr.asFunction<void Function(ffi.Pointer<UA_Timer>)>();

  /// Session Lifecycle
  /// -----------------
  void UA_Session_init(
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_init(
      session,
    );
  }

  late final _UA_Session_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Session>)>>(
          'UA_Session_init');
  late final _UA_Session_init =
      _UA_Session_initPtr.asFunction<void Function(ffi.Pointer<UA_Session>)>();

  void UA_Session_clear(
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Session_clear(
      session,
      server,
    );
  }

  late final _UA_Session_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_Server>)>>('UA_Session_clear');
  late final _UA_Session_clear = _UA_Session_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Session>, ffi.Pointer<UA_Server>)>();

  void UA_Session_attachToSecureChannel(
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_SecureChannel> channel,
  ) {
    return _UA_Session_attachToSecureChannel(
      session,
      channel,
    );
  }

  late final _UA_Session_attachToSecureChannelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Session>, ffi.Pointer<UA_SecureChannel>)>>(
      'UA_Session_attachToSecureChannel');
  late final _UA_Session_attachToSecureChannel =
      _UA_Session_attachToSecureChannelPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Session>, ffi.Pointer<UA_SecureChannel>)>();

  void UA_Session_detachFromSecureChannel(
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_detachFromSecureChannel(
      session,
    );
  }

  late final _UA_Session_detachFromSecureChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Session>)>>(
          'UA_Session_detachFromSecureChannel');
  late final _UA_Session_detachFromSecureChannel =
      _UA_Session_detachFromSecureChannelPtr.asFunction<
          void Function(ffi.Pointer<UA_Session>)>();

  int UA_Session_generateNonce(
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_generateNonce(
      session,
    );
  }

  late final _UA_Session_generateNoncePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Session>)>>(
      'UA_Session_generateNonce');
  late final _UA_Session_generateNonce = _UA_Session_generateNoncePtr
      .asFunction<int Function(ffi.Pointer<UA_Session>)>();

  void UA_Session_updateLifetime(
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_updateLifetime(
      session,
    );
  }

  late final _UA_Session_updateLifetimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Session>)>>(
          'UA_Session_updateLifetime');
  late final _UA_Session_updateLifetime = _UA_Session_updateLifetimePtr
      .asFunction<void Function(ffi.Pointer<UA_Session>)>();

  void UA_Session_attachSubscription(
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Session_attachSubscription(
      session,
      sub,
    );
  }

  late final _UA_Session_attachSubscriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_Subscription>)>>('UA_Session_attachSubscription');
  late final _UA_Session_attachSubscription =
      _UA_Session_attachSubscriptionPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Session>, ffi.Pointer<UA_Subscription>)>();

  void UA_Session_detachSubscription(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_Subscription> sub,
    bool releasePublishResponses,
  ) {
    return _UA_Session_detachSubscription(
      server,
      session,
      sub,
      releasePublishResponses,
    );
  }

  late final _UA_Session_detachSubscriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_Subscription>,
              ffi.Bool)>>('UA_Session_detachSubscription');
  late final _UA_Session_detachSubscription =
      _UA_Session_detachSubscriptionPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_Subscription>, bool)>();

  ffi.Pointer<UA_Subscription> UA_Session_getSubscriptionById(
    ffi.Pointer<UA_Session> session,
    int subscriptionId,
  ) {
    return _UA_Session_getSubscriptionById(
      session,
      subscriptionId,
    );
  }

  late final _UA_Session_getSubscriptionByIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Subscription> Function(ffi.Pointer<UA_Session>,
              UA_UInt32)>>('UA_Session_getSubscriptionById');
  late final _UA_Session_getSubscriptionById =
      _UA_Session_getSubscriptionByIdPtr.asFunction<
          ffi.Pointer<UA_Subscription> Function(
              ffi.Pointer<UA_Session>, int)>();

  void UA_Session_queuePublishReq(
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_PublishResponseEntry> entry,
    bool head,
  ) {
    return _UA_Session_queuePublishReq(
      session,
      entry,
      head,
    );
  }

  late final _UA_Session_queuePublishReqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_PublishResponseEntry>,
              ffi.Bool)>>('UA_Session_queuePublishReq');
  late final _UA_Session_queuePublishReq =
      _UA_Session_queuePublishReqPtr.asFunction<
          void Function(ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_PublishResponseEntry>, bool)>();

  ffi.Pointer<UA_PublishResponseEntry> UA_Session_dequeuePublishReq(
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_dequeuePublishReq(
      session,
    );
  }

  late final _UA_Session_dequeuePublishReqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishResponseEntry> Function(
              ffi.Pointer<UA_Session>)>>('UA_Session_dequeuePublishReq');
  late final _UA_Session_dequeuePublishReq =
      _UA_Session_dequeuePublishReqPtr.asFunction<
          ffi.Pointer<UA_PublishResponseEntry> Function(
              ffi.Pointer<UA_Session>)>();

  ffi.Pointer<UA_Notification> UA_Notification_new() {
    return _UA_Notification_new();
  }

  late final _UA_Notification_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Notification> Function()>>(
          'UA_Notification_new');
  late final _UA_Notification_new = _UA_Notification_newPtr.asFunction<
      ffi.Pointer<UA_Notification> Function()>();

  void UA_Notification_enqueueAndTrigger(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_enqueueAndTrigger(
      server,
      n,
    );
  }

  late final _UA_Notification_enqueueAndTriggerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_Notification>)>>(
      'UA_Notification_enqueueAndTrigger');
  late final _UA_Notification_enqueueAndTrigger =
      _UA_Notification_enqueueAndTriggerPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_Notification>)>();

  void UA_Notification_delete(
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_delete(
      n,
    );
  }

  late final _UA_Notification_deletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Notification>)>>(
      'UA_Notification_delete');
  late final _UA_Notification_delete = _UA_Notification_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Notification>)>();

  /// /
  void UA_MonitoredItem_init(
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_MonitoredItem_init(
      mon,
    );
  }

  late final _UA_MonitoredItem_initPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_init');
  late final _UA_MonitoredItem_init = _UA_MonitoredItem_initPtr.asFunction<
      void Function(ffi.Pointer<UA_MonitoredItem>)>();

  void UA_MonitoredItem_delete(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> monitoredItem,
  ) {
    return _UA_MonitoredItem_delete(
      server,
      monitoredItem,
    );
  }

  late final _UA_MonitoredItem_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_MonitoredItem>)>>('UA_MonitoredItem_delete');
  late final _UA_MonitoredItem_delete = _UA_MonitoredItem_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  void UA_MonitoredItem_removeOverflowInfoBits(
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_MonitoredItem_removeOverflowInfoBits(
      mon,
    );
  }

  late final _UA_MonitoredItem_removeOverflowInfoBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_removeOverflowInfoBits');
  late final _UA_MonitoredItem_removeOverflowInfoBits =
      _UA_MonitoredItem_removeOverflowInfoBitsPtr.asFunction<
          void Function(ffi.Pointer<UA_MonitoredItem>)>();

  void UA_Server_registerMonitoredItem(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_Server_registerMonitoredItem(
      server,
      mon,
    );
  }

  late final _UA_Server_registerMonitoredItemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_Server_registerMonitoredItem');
  late final _UA_Server_registerMonitoredItem =
      _UA_Server_registerMonitoredItemPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  int UA_MonitoredItem_registerSampling(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_MonitoredItem_registerSampling(
      server,
      mon,
    );
  }

  late final _UA_MonitoredItem_registerSamplingPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_registerSampling');
  late final _UA_MonitoredItem_registerSampling =
      _UA_MonitoredItem_registerSamplingPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  void UA_MonitoredItem_unregisterSampling(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_MonitoredItem_unregisterSampling(
      server,
      mon,
    );
  }

  late final _UA_MonitoredItem_unregisterSamplingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_unregisterSampling');
  late final _UA_MonitoredItem_unregisterSampling =
      _UA_MonitoredItem_unregisterSamplingPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  int UA_MonitoredItem_setMonitoringMode(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
    int monitoringMode,
  ) {
    return _UA_MonitoredItem_setMonitoringMode(
      server,
      mon,
      monitoringMode,
    );
  }

  late final _UA_MonitoredItem_setMonitoringModePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_MonitoredItem>,
              ffi.Int32)>>('UA_MonitoredItem_setMonitoringMode');
  late final _UA_MonitoredItem_setMonitoringMode =
      _UA_MonitoredItem_setMonitoringModePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>, int)>();

  void UA_MonitoredItem_sampleCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> monitoredItem,
  ) {
    return _UA_MonitoredItem_sampleCallback(
      server,
      monitoredItem,
    );
  }

  late final _UA_MonitoredItem_sampleCallbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_sampleCallback');
  late final _UA_MonitoredItem_sampleCallback =
      _UA_MonitoredItem_sampleCallbackPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  int UA_MonitoredItem_removeLink(
    ffi.Pointer<UA_Subscription> sub,
    ffi.Pointer<UA_MonitoredItem> mon,
    int linkId,
  ) {
    return _UA_MonitoredItem_removeLink(
      sub,
      mon,
      linkId,
    );
  }

  late final _UA_MonitoredItem_removeLinkPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_MonitoredItem>,
              UA_UInt32)>>('UA_MonitoredItem_removeLink');
  late final _UA_MonitoredItem_removeLink =
      _UA_MonitoredItem_removeLinkPtr.asFunction<
          int Function(ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_MonitoredItem>, int)>();

  int UA_MonitoredItem_addLink(
    ffi.Pointer<UA_Subscription> sub,
    ffi.Pointer<UA_MonitoredItem> mon,
    int linkId,
  ) {
    return _UA_MonitoredItem_addLink(
      sub,
      mon,
      linkId,
    );
  }

  late final _UA_MonitoredItem_addLinkPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_MonitoredItem>,
              UA_UInt32)>>('UA_MonitoredItem_addLink');
  late final _UA_MonitoredItem_addLink =
      _UA_MonitoredItem_addLinkPtr.asFunction<
          int Function(ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_MonitoredItem>, int)>();

  int UA_MonitoredItem_createDataChangeNotification(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
    ffi.Pointer<UA_MonitoredItem> mon,
    ffi.Pointer<UA_DataValue> value,
  ) {
    return _UA_MonitoredItem_createDataChangeNotification(
      server,
      sub,
      mon,
      value,
    );
  }

  late final _UA_MonitoredItem_createDataChangeNotificationPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_Subscription>,
                  ffi.Pointer<UA_MonitoredItem>,
                  ffi.Pointer<UA_DataValue>)>>(
      'UA_MonitoredItem_createDataChangeNotification');
  late final _UA_MonitoredItem_createDataChangeNotification =
      _UA_MonitoredItem_createDataChangeNotificationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_MonitoredItem>, ffi.Pointer<UA_DataValue>)>();

  int UA_Event_addEventToMonitoredItem(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> event,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_Event_addEventToMonitoredItem(
      server,
      event,
      mon,
    );
  }

  late final _UA_Event_addEventToMonitoredItemPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_NodeId>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_Event_addEventToMonitoredItem');
  late final _UA_Event_addEventToMonitoredItem =
      _UA_Event_addEventToMonitoredItemPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_MonitoredItem>)>();

  int UA_Event_generateEventId(
    ffi.Pointer<UA_ByteString> generatedId,
  ) {
    return _UA_Event_generateEventId(
      generatedId,
    );
  }

  late final _UA_Event_generateEventIdPtr = _lookup<
          ffi
          .NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_ByteString>)>>(
      'UA_Event_generateEventId');
  late final _UA_Event_generateEventId = _UA_Event_generateEventIdPtr
      .asFunction<int Function(ffi.Pointer<UA_ByteString>)>();

  /// /
  void UA_Event_staticSelectClauseValidation(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_EventFilter> eventFilter,
    ffi.Pointer<UA_StatusCode> result,
  ) {
    return _UA_Event_staticSelectClauseValidation(
      server,
      eventFilter,
      result,
    );
  }

  late final _UA_Event_staticSelectClauseValidationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_EventFilter>, ffi.Pointer<UA_StatusCode>)>>(
      'UA_Event_staticSelectClauseValidation');
  late final _UA_Event_staticSelectClauseValidation =
      _UA_Event_staticSelectClauseValidationPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_EventFilter>,
              ffi.Pointer<UA_StatusCode>)>();

  int UA_Event_staticWhereClauseValidation(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ContentFilter> filter,
    ffi.Pointer<UA_ContentFilterResult> arg2,
  ) {
    return _UA_Event_staticWhereClauseValidation(
      server,
      filter,
      arg2,
    );
  }

  late final _UA_Event_staticWhereClauseValidationPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_ContentFilter>,
                  ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_Event_staticWhereClauseValidation');
  late final _UA_Event_staticWhereClauseValidation =
      _UA_Event_staticWhereClauseValidationPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ContentFilter>,
              ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_MonitoredItem_ensureQueueSpace(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_MonitoredItem_ensureQueueSpace(
      server,
      mon,
    );
  }

  late final _UA_MonitoredItem_ensureQueueSpacePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_MonitoredItem_ensureQueueSpace');
  late final _UA_MonitoredItem_ensureQueueSpace =
      _UA_MonitoredItem_ensureQueueSpacePtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  ffi.Pointer<UA_Subscription> UA_Subscription_new() {
    return _UA_Subscription_new();
  }

  late final _UA_Subscription_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UA_Subscription> Function()>>(
          'UA_Subscription_new');
  late final _UA_Subscription_new = _UA_Subscription_newPtr.asFunction<
      ffi.Pointer<UA_Subscription> Function()>();

  void UA_Subscription_delete(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Subscription_delete(
      server,
      sub,
    );
  }

  late final _UA_Subscription_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Subscription>)>>('UA_Subscription_delete');
  late final _UA_Subscription_delete = _UA_Subscription_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>)>();

  ffi.Pointer<UA_MonitoredItem> UA_Subscription_getMonitoredItem(
    ffi.Pointer<UA_Subscription> sub,
    int monitoredItemId,
  ) {
    return _UA_Subscription_getMonitoredItem(
      sub,
      monitoredItemId,
    );
  }

  late final _UA_Subscription_getMonitoredItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_MonitoredItem> Function(ffi.Pointer<UA_Subscription>,
              UA_UInt32)>>('UA_Subscription_getMonitoredItem');
  late final _UA_Subscription_getMonitoredItem =
      _UA_Subscription_getMonitoredItemPtr.asFunction<
          ffi.Pointer<UA_MonitoredItem> Function(
              ffi.Pointer<UA_Subscription>, int)>();

  void UA_Subscription_sampleAndPublish(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Subscription_sampleAndPublish(
      server,
      sub,
    );
  }

  late final _UA_Subscription_sampleAndPublishPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>)>>(
      'UA_Subscription_sampleAndPublish');
  late final _UA_Subscription_sampleAndPublish =
      _UA_Subscription_sampleAndPublishPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>)>();

  bool UA_Subscription_publishOnce(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Subscription_publishOnce(
      server,
      sub,
    );
  }

  late final _UA_Subscription_publishOncePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Subscription>)>>('UA_Subscription_publishOnce');
  late final _UA_Subscription_publishOnce =
      _UA_Subscription_publishOncePtr.asFunction<
          bool Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>)>();

  void UA_Subscription_publish(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Subscription_publish(
      server,
      sub,
    );
  }

  late final _UA_Subscription_publishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Subscription>)>>('UA_Subscription_publish');
  late final _UA_Subscription_publish = _UA_Subscription_publishPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>)>();

  int UA_Subscription_removeRetransmissionMessage(
    ffi.Pointer<UA_Subscription> sub,
    int sequenceNumber,
  ) {
    return _UA_Subscription_removeRetransmissionMessage(
      sub,
      sequenceNumber,
    );
  }

  late final _UA_Subscription_removeRetransmissionMessagePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Subscription>,
              UA_UInt32)>>('UA_Subscription_removeRetransmissionMessage');
  late final _UA_Subscription_removeRetransmissionMessage =
      _UA_Subscription_removeRetransmissionMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Subscription>, int)>();

  bool UA_Session_reachedPublishReqLimit(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
  ) {
    return _UA_Session_reachedPublishReqLimit(
      server,
      session,
    );
  }

  late final _UA_Session_reachedPublishReqLimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>)>>('UA_Session_reachedPublishReqLimit');
  late final _UA_Session_reachedPublishReqLimit =
      _UA_Session_reachedPublishReqLimitPtr.asFunction<
          bool Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Session>)>();

  int UA_Server_evaluateWhereClauseContentFilter(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_NodeId> eventNode,
    ffi.Pointer<UA_ContentFilter> contentFilter,
    ffi.Pointer<UA_ContentFilterResult> contentFilterResult,
  ) {
    return _UA_Server_evaluateWhereClauseContentFilter(
      server,
      session,
      eventNode,
      contentFilter,
      contentFilterResult,
    );
  }

  late final _UA_Server_evaluateWhereClauseContentFilterPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_Session>,
                  ffi.Pointer<UA_NodeId>,
                  ffi.Pointer<UA_ContentFilter>,
                  ffi.Pointer<UA_ContentFilterResult>)>>(
      'UA_Server_evaluateWhereClauseContentFilter');
  late final _UA_Server_evaluateWhereClauseContentFilter =
      _UA_Server_evaluateWhereClauseContentFilterPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_NodeId>,
              ffi.Pointer<UA_ContentFilter>,
              ffi.Pointer<UA_ContentFilterResult>)>();

  void UA_NetworkMessageOffsetBuffer_clear(
    ffi.Pointer<UA_NetworkMessageOffsetBuffer> ob,
  ) {
    return _UA_NetworkMessageOffsetBuffer_clear(
      ob,
    );
  }

  late final _UA_NetworkMessageOffsetBuffer_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>>(
      'UA_NetworkMessageOffsetBuffer_clear');
  late final _UA_NetworkMessageOffsetBuffer_clear =
      _UA_NetworkMessageOffsetBuffer_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>();

  /// DataSetMessage
  /// ^^^^^^^^^^^^^^
  int UA_DataSetMessageHeader_encodeBinary(
    ffi.Pointer<UA_DataSetMessageHeader> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_DataSetMessageHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_DataSetMessageHeader_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataSetMessageHeader>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_DataSetMessageHeader_encodeBinary');
  late final _UA_DataSetMessageHeader_encodeBinary =
      _UA_DataSetMessageHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMessageHeader>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_DataSetMessageHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_DataSetMessageHeader> dst,
  ) {
    return _UA_DataSetMessageHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_DataSetMessageHeader_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<UA_DataSetMessageHeader>)>>(
      'UA_DataSetMessageHeader_decodeBinary');
  late final _UA_DataSetMessageHeader_decodeBinary =
      _UA_DataSetMessageHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataSetMessageHeader>)>();

  int UA_DataSetMessageHeader_calcSizeBinary(
    ffi.Pointer<UA_DataSetMessageHeader> p,
  ) {
    return _UA_DataSetMessageHeader_calcSizeBinary(
      p,
    );
  }

  late final _UA_DataSetMessageHeader_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<UA_DataSetMessageHeader>)>>(
      'UA_DataSetMessageHeader_calcSizeBinary');
  late final _UA_DataSetMessageHeader_calcSizeBinary =
      _UA_DataSetMessageHeader_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMessageHeader>)>();

  int UA_DataSetMessage_encodeBinary(
    ffi.Pointer<UA_DataSetMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_DataSetMessage_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_DataSetMessage_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_DataSetMessage_encodeBinary');
  late final _UA_DataSetMessage_encodeBinary =
      _UA_DataSetMessage_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_DataSetMessage_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_DataSetMessage> dst,
    int dsmSize,
  ) {
    return _UA_DataSetMessage_decodeBinary(
      src,
      offset,
      dst,
      dsmSize,
    );
  }

  late final _UA_DataSetMessage_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataSetMessage>,
              UA_UInt16)>>('UA_DataSetMessage_decodeBinary');
  late final _UA_DataSetMessage_decodeBinary =
      _UA_DataSetMessage_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataSetMessage>, int)>();

  int UA_DataSetMessage_calcSizeBinary(
    ffi.Pointer<UA_DataSetMessage> p,
    ffi.Pointer<UA_NetworkMessageOffsetBuffer> offsetBuffer,
    int currentOffset,
  ) {
    return _UA_DataSetMessage_calcSizeBinary(
      p,
      offsetBuffer,
      currentOffset,
    );
  }

  late final _UA_DataSetMessage_calcSizeBinaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_NetworkMessageOffsetBuffer>,
              ffi.Size)>>('UA_DataSetMessage_calcSizeBinary');
  late final _UA_DataSetMessage_calcSizeBinary =
      _UA_DataSetMessage_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_NetworkMessageOffsetBuffer>, int)>();

  void UA_DataSetMessage_clear(
    ffi.Pointer<UA_DataSetMessage> p,
  ) {
    return _UA_DataSetMessage_clear(
      p,
    );
  }

  late final _UA_DataSetMessage_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetMessage>)>>(
      'UA_DataSetMessage_clear');
  late final _UA_DataSetMessage_clear = _UA_DataSetMessage_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DataSetMessage>)>();

  /// NetworkMessage
  /// ^^^^^^^^^^^^^^
  int UA_NetworkMessage_updateBufferedMessage(
    ffi.Pointer<UA_NetworkMessageOffsetBuffer> buffer,
  ) {
    return _UA_NetworkMessage_updateBufferedMessage(
      buffer,
    );
  }

  late final _UA_NetworkMessage_updateBufferedMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>>(
      'UA_NetworkMessage_updateBufferedMessage');
  late final _UA_NetworkMessage_updateBufferedMessage =
      _UA_NetworkMessage_updateBufferedMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>();

  int UA_NetworkMessage_updateBufferedNwMessage(
    ffi.Pointer<UA_NetworkMessageOffsetBuffer> buffer,
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> bufferPosition,
  ) {
    return _UA_NetworkMessage_updateBufferedNwMessage(
      buffer,
      src,
      bufferPosition,
    );
  }

  late final _UA_NetworkMessage_updateBufferedNwMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NetworkMessageOffsetBuffer>,
                  ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>)>>(
      'UA_NetworkMessage_updateBufferedNwMessage');
  late final _UA_NetworkMessage_updateBufferedNwMessage =
      _UA_NetworkMessage_updateBufferedNwMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessageOffsetBuffer>,
              ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>)>();

  /// NetworkMessage Encoding
  /// ^^^^^^^^^^^^^^^^^^^^^^^
  int UA_NetworkMessage_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
    ffi.Pointer<ffi.Pointer<UA_Byte>> dataToEncryptStart,
  ) {
    return _UA_NetworkMessage_encodeBinary(
      src,
      bufPos,
      bufEnd,
      dataToEncryptStart,
    );
  }

  late final _UA_NetworkMessage_encodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_NetworkMessage>,
                  ffi.Pointer<ffi.Pointer<UA_Byte>>,
                  ffi.Pointer<UA_Byte>,
                  ffi.Pointer<ffi.Pointer<UA_Byte>>)>>(
      'UA_NetworkMessage_encodeBinary');
  late final _UA_NetworkMessage_encodeBinary =
      _UA_NetworkMessage_encodeBinaryPtr.asFunction<
          int Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>)>();

  int UA_NetworkMessage_encodeHeaders(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_NetworkMessage_encodeHeaders(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_NetworkMessage_encodeHeadersPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_NetworkMessage_encodeHeaders');
  late final _UA_NetworkMessage_encodeHeaders =
      _UA_NetworkMessage_encodeHeadersPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_NetworkMessage_encodePayload(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_NetworkMessage_encodePayload(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_NetworkMessage_encodePayloadPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_NetworkMessage_encodePayload');
  late final _UA_NetworkMessage_encodePayload =
      _UA_NetworkMessage_encodePayloadPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_NetworkMessage_encodeFooters(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_NetworkMessage_encodeFooters(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_NetworkMessage_encodeFootersPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_NetworkMessage_encodeFooters');
  late final _UA_NetworkMessage_encodeFooters =
      _UA_NetworkMessage_encodeFootersPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  /// NetworkMessage Decoding
  /// ^^^^^^^^^^^^^^^^^^^^^^^
  int UA_NetworkMessage_decodeHeaders(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_NetworkMessage_decodeHeaders(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NetworkMessage_decodeHeadersPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_decodeHeaders');
  late final _UA_NetworkMessage_decodeHeaders =
      _UA_NetworkMessage_decodeHeadersPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessage_decodePayload(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_NetworkMessage_decodePayload(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NetworkMessage_decodePayloadPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_decodePayload');
  late final _UA_NetworkMessage_decodePayload =
      _UA_NetworkMessage_decodePayloadPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessage_decodeFooters(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_NetworkMessage_decodeFooters(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NetworkMessage_decodeFootersPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_decodeFooters');
  late final _UA_NetworkMessage_decodeFooters =
      _UA_NetworkMessage_decodeFootersPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessage_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_NetworkMessage_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NetworkMessage_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_decodeBinary');
  late final _UA_NetworkMessage_decodeBinary =
      _UA_NetworkMessage_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessageHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_NetworkMessageHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_NetworkMessageHeader_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessageHeader_decodeBinary');
  late final _UA_NetworkMessageHeader_decodeBinary =
      _UA_NetworkMessageHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_NetworkMessage_calcSizeBinary(
    ffi.Pointer<UA_NetworkMessage> p,
    ffi.Pointer<UA_NetworkMessageOffsetBuffer> offsetBuffer,
  ) {
    return _UA_NetworkMessage_calcSizeBinary(
      p,
      offsetBuffer,
    );
  }

  late final _UA_NetworkMessage_calcSizeBinaryPtr = _lookup<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<UA_NetworkMessage>,
                  ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>>(
      'UA_NetworkMessage_calcSizeBinary');
  late final _UA_NetworkMessage_calcSizeBinary =
      _UA_NetworkMessage_calcSizeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<UA_NetworkMessageOffsetBuffer>)>();

  void UA_NetworkMessage_clear(
    ffi.Pointer<UA_NetworkMessage> p,
  ) {
    return _UA_NetworkMessage_clear(
      p,
    );
  }

  late final _UA_NetworkMessage_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_clear');
  late final _UA_NetworkMessage_clear = _UA_NetworkMessage_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_NetworkMessage>)>();

  /// /
  int UA_PublishedDataSetConfig_copy(
    ffi.Pointer<UA_PublishedDataSetConfig> src,
    ffi.Pointer<UA_PublishedDataSetConfig> dst,
  ) {
    return _UA_PublishedDataSetConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_PublishedDataSetConfig_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PublishedDataSetConfig>,
                  ffi.Pointer<UA_PublishedDataSetConfig>)>>(
      'UA_PublishedDataSetConfig_copy');
  late final _UA_PublishedDataSetConfig_copy =
      _UA_PublishedDataSetConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PublishedDataSetConfig>,
              ffi.Pointer<UA_PublishedDataSetConfig>)>();

  ffi.Pointer<UA_PublishedDataSet> UA_PublishedDataSet_findPDSbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_PublishedDataSet_findPDSbyId(
      server,
      identifier,
    );
  }

  late final _UA_PublishedDataSet_findPDSbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PublishedDataSet> Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_PublishedDataSet_findPDSbyId');
  late final _UA_PublishedDataSet_findPDSbyId =
      _UA_PublishedDataSet_findPDSbyIdPtr.asFunction<
          ffi.Pointer<UA_PublishedDataSet> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_PublishedDataSet_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PublishedDataSet> publishedDataSet,
  ) {
    return _UA_PublishedDataSet_clear(
      server,
      publishedDataSet,
    );
  }

  late final _UA_PublishedDataSet_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PublishedDataSet>)>>('UA_PublishedDataSet_clear');
  late final _UA_PublishedDataSet_clear =
      _UA_PublishedDataSet_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_PublishedDataSet>)>();

  /// /
  int UA_PubSubConnectionConfig_copy(
    ffi.Pointer<UA_PubSubConnectionConfig> src,
    ffi.Pointer<UA_PubSubConnectionConfig> dst,
  ) {
    return _UA_PubSubConnectionConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_PubSubConnectionConfig_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PubSubConnectionConfig>,
                  ffi.Pointer<UA_PubSubConnectionConfig>)>>(
      'UA_PubSubConnectionConfig_copy');
  late final _UA_PubSubConnectionConfig_copy =
      _UA_PubSubConnectionConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubConnectionConfig>,
              ffi.Pointer<UA_PubSubConnectionConfig>)>();

  ffi.Pointer<UA_PubSubConnection> UA_PubSubConnection_findConnectionbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId connectionIdentifier,
  ) {
    return _UA_PubSubConnection_findConnectionbyId(
      server,
      connectionIdentifier,
    );
  }

  late final _UA_PubSubConnection_findConnectionbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PubSubConnection> Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_PubSubConnection_findConnectionbyId');
  late final _UA_PubSubConnection_findConnectionbyId =
      _UA_PubSubConnection_findConnectionbyIdPtr.asFunction<
          ffi.Pointer<UA_PubSubConnection> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_PubSubConnectionConfig_clear(
    ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig,
  ) {
    return _UA_PubSubConnectionConfig_clear(
      connectionConfig,
    );
  }

  late final _UA_PubSubConnectionConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_PubSubConnectionConfig>)>>(
      'UA_PubSubConnectionConfig_clear');
  late final _UA_PubSubConnectionConfig_clear =
      _UA_PubSubConnectionConfig_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_PubSubConnectionConfig>)>();

  void UA_PubSubConnection_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubConnection> connection,
  ) {
    return _UA_PubSubConnection_clear(
      server,
      connection,
    );
  }

  late final _UA_PubSubConnection_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubConnection>)>>('UA_PubSubConnection_clear');
  late final _UA_PubSubConnection_clear =
      _UA_PubSubConnection_clearPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_PubSubConnection>)>();

  int UA_PubSubConnection_regist(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> connectionIdentifier,
  ) {
    return _UA_PubSubConnection_regist(
      server,
      connectionIdentifier,
    );
  }

  late final _UA_PubSubConnection_registPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_PubSubConnection_regist');
  late final _UA_PubSubConnection_regist =
      _UA_PubSubConnection_registPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_processNetworkMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubConnection> connection,
    ffi.Pointer<UA_NetworkMessage> msg,
  ) {
    return _UA_Server_processNetworkMessage(
      server,
      connection,
      msg,
    );
  }

  late final _UA_Server_processNetworkMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_PubSubConnection>,
                  ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_Server_processNetworkMessage');
  late final _UA_Server_processNetworkMessage =
      _UA_Server_processNetworkMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_PubSubConnection>,
              ffi.Pointer<UA_NetworkMessage>)>();

  /// /
  int UA_DataSetWriterConfig_copy(
    ffi.Pointer<UA_DataSetWriterConfig> src,
    ffi.Pointer<UA_DataSetWriterConfig> dst,
  ) {
    return _UA_DataSetWriterConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetWriterConfig_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetWriterConfig>,
                  ffi.Pointer<UA_DataSetWriterConfig>)>>(
      'UA_DataSetWriterConfig_copy');
  late final _UA_DataSetWriterConfig_copy =
      _UA_DataSetWriterConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetWriterConfig>,
              ffi.Pointer<UA_DataSetWriterConfig>)>();

  ffi.Pointer<UA_DataSetWriter> UA_DataSetWriter_findDSWbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_DataSetWriter_findDSWbyId(
      server,
      identifier,
    );
  }

  late final _UA_DataSetWriter_findDSWbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataSetWriter> Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_DataSetWriter_findDSWbyId');
  late final _UA_DataSetWriter_findDSWbyId =
      _UA_DataSetWriter_findDSWbyIdPtr.asFunction<
          ffi.Pointer<UA_DataSetWriter> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_DataSetWriter_setPubSubState(
    ffi.Pointer<UA_Server> server,
    int state,
    ffi.Pointer<UA_DataSetWriter> dataSetWriter,
  ) {
    return _UA_DataSetWriter_setPubSubState(
      server,
      state,
      dataSetWriter,
    );
  }

  late final _UA_DataSetWriter_setPubSubStatePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Int32,
                  ffi.Pointer<UA_DataSetWriter>)>>(
      'UA_DataSetWriter_setPubSubState');
  late final _UA_DataSetWriter_setPubSubState =
      _UA_DataSetWriter_setPubSubStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_DataSetWriter>)>();

  int UA_DataSetWriter_generateDataSetMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetMessage> dataSetMessage,
    ffi.Pointer<UA_DataSetWriter> dataSetWriter,
  ) {
    return _UA_DataSetWriter_generateDataSetMessage(
      server,
      dataSetMessage,
      dataSetWriter,
    );
  }

  late final _UA_DataSetWriter_generateDataSetMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_DataSetMessage>,
                  ffi.Pointer<UA_DataSetWriter>)>>(
      'UA_DataSetWriter_generateDataSetMessage');
  late final _UA_DataSetWriter_generateDataSetMessage =
      _UA_DataSetWriter_generateDataSetMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_DataSetWriter>)>();

  int UA_DataSetWriter_remove(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriterGroup> linkedWriterGroup,
    ffi.Pointer<UA_DataSetWriter> dataSetWriter,
  ) {
    return _UA_DataSetWriter_remove(
      server,
      linkedWriterGroup,
      dataSetWriter,
    );
  }

  late final _UA_DataSetWriter_removePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_WriterGroup>,
              ffi.Pointer<UA_DataSetWriter>)>>('UA_DataSetWriter_remove');
  late final _UA_DataSetWriter_remove = _UA_DataSetWriter_removePtr.asFunction<
      int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriterGroup>,
          ffi.Pointer<UA_DataSetWriter>)>();

  int UA_WriterGroupConfig_copy(
    ffi.Pointer<UA_WriterGroupConfig> src,
    ffi.Pointer<UA_WriterGroupConfig> dst,
  ) {
    return _UA_WriterGroupConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_WriterGroupConfig_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_WriterGroupConfig>,
              ffi.Pointer<UA_WriterGroupConfig>)>>('UA_WriterGroupConfig_copy');
  late final _UA_WriterGroupConfig_copy =
      _UA_WriterGroupConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_WriterGroupConfig>,
              ffi.Pointer<UA_WriterGroupConfig>)>();

  ffi.Pointer<UA_WriterGroup> UA_WriterGroup_findWGbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_WriterGroup_findWGbyId(
      server,
      identifier,
    );
  }

  late final _UA_WriterGroup_findWGbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_WriterGroup> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>>('UA_WriterGroup_findWGbyId');
  late final _UA_WriterGroup_findWGbyId =
      _UA_WriterGroup_findWGbyIdPtr.asFunction<
          ffi.Pointer<UA_WriterGroup> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_WriterGroup_setPubSubState(
    ffi.Pointer<UA_Server> server,
    int state,
    ffi.Pointer<UA_WriterGroup> writerGroup,
  ) {
    return _UA_WriterGroup_setPubSubState(
      server,
      state,
      writerGroup,
    );
  }

  late final _UA_WriterGroup_setPubSubStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Int32,
              ffi.Pointer<UA_WriterGroup>)>>('UA_WriterGroup_setPubSubState');
  late final _UA_WriterGroup_setPubSubState =
      _UA_WriterGroup_setPubSubStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_WriterGroup>)>();

  int UA_DataSetFieldConfig_copy(
    ffi.Pointer<UA_DataSetFieldConfig> src,
    ffi.Pointer<UA_DataSetFieldConfig> dst,
  ) {
    return _UA_DataSetFieldConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetFieldConfig_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetFieldConfig>,
                  ffi.Pointer<UA_DataSetFieldConfig>)>>(
      'UA_DataSetFieldConfig_copy');
  late final _UA_DataSetFieldConfig_copy =
      _UA_DataSetFieldConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetFieldConfig>,
              ffi.Pointer<UA_DataSetFieldConfig>)>();

  ffi.Pointer<UA_DataSetField> UA_DataSetField_findDSFbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_DataSetField_findDSFbyId(
      server,
      identifier,
    );
  }

  late final _UA_DataSetField_findDSFbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataSetField> Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_DataSetField_findDSFbyId');
  late final _UA_DataSetField_findDSFbyId =
      _UA_DataSetField_findDSFbyIdPtr.asFunction<
          ffi.Pointer<UA_DataSetField> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  void UA_DataSetReader_process(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
    ffi.Pointer<UA_DataSetMessage> dataSetMsg,
  ) {
    return _UA_DataSetReader_process(
      server,
      readerGroup,
      dataSetReader,
      dataSetMsg,
    );
  }

  late final _UA_DataSetReader_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ReaderGroup>,
              ffi.Pointer<UA_DataSetReader>,
              ffi.Pointer<UA_DataSetMessage>)>>('UA_DataSetReader_process');
  late final _UA_DataSetReader_process =
      _UA_DataSetReader_processPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>,
              ffi.Pointer<UA_DataSetReader>, ffi.Pointer<UA_DataSetMessage>)>();

  int UA_DataSetReaderConfig_copy(
    ffi.Pointer<UA_DataSetReaderConfig> src,
    ffi.Pointer<UA_DataSetReaderConfig> dst,
  ) {
    return _UA_DataSetReaderConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_DataSetReaderConfig_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_DataSetReaderConfig>,
                  ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_DataSetReaderConfig_copy');
  late final _UA_DataSetReaderConfig_copy =
      _UA_DataSetReaderConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_DataSetReaderConfig>,
              ffi.Pointer<UA_DataSetReaderConfig>)>();

  void UA_DataSetReaderConfig_clear(
    ffi.Pointer<UA_DataSetReaderConfig> cfg,
  ) {
    return _UA_DataSetReaderConfig_clear(
      cfg,
    );
  }

  late final _UA_DataSetReaderConfig_clearPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_DataSetReaderConfig>)>>(
      'UA_DataSetReaderConfig_clear');
  late final _UA_DataSetReaderConfig_clear = _UA_DataSetReaderConfig_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_DataSetReaderConfig>)>();

  int UA_TargetVariables_copy(
    ffi.Pointer<UA_TargetVariables> src,
    ffi.Pointer<UA_TargetVariables> dst,
  ) {
    return _UA_TargetVariables_copy(
      src,
      dst,
    );
  }

  late final _UA_TargetVariables_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_TargetVariables>,
              ffi.Pointer<UA_TargetVariables>)>>('UA_TargetVariables_copy');
  late final _UA_TargetVariables_copy = _UA_TargetVariables_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_TargetVariables>, ffi.Pointer<UA_TargetVariables>)>();

  void UA_TargetVariables_clear(
    ffi.Pointer<UA_TargetVariables> subscribedDataSetTarget,
  ) {
    return _UA_TargetVariables_clear(
      subscribedDataSetTarget,
    );
  }

  late final _UA_TargetVariables_clearPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_TargetVariables>)>>(
      'UA_TargetVariables_clear');
  late final _UA_TargetVariables_clear = _UA_TargetVariables_clearPtr
      .asFunction<void Function(ffi.Pointer<UA_TargetVariables>)>();

  int UA_FieldTargetVariable_copy(
    ffi.Pointer<UA_FieldTargetVariable> src,
    ffi.Pointer<UA_FieldTargetVariable> dst,
  ) {
    return _UA_FieldTargetVariable_copy(
      src,
      dst,
    );
  }

  late final _UA_FieldTargetVariable_copyPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_FieldTargetVariable>,
                  ffi.Pointer<UA_FieldTargetVariable>)>>(
      'UA_FieldTargetVariable_copy');
  late final _UA_FieldTargetVariable_copy =
      _UA_FieldTargetVariable_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_FieldTargetVariable>,
              ffi.Pointer<UA_FieldTargetVariable>)>();

  int UA_DataSetReader_setPubSubState(
    ffi.Pointer<UA_Server> server,
    int state,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
  ) {
    return _UA_DataSetReader_setPubSubState(
      server,
      state,
      dataSetReader,
    );
  }

  late final _UA_DataSetReader_setPubSubStatePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Int32,
                  ffi.Pointer<UA_DataSetReader>)>>(
      'UA_DataSetReader_setPubSubState');
  late final _UA_DataSetReader_setPubSubState =
      _UA_DataSetReader_setPubSubStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_DataSetReader>)>();

  int UA_DataSetReader_generateNetworkMessage(
    ffi.Pointer<UA_PubSubConnection> pubSubConnection,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
    ffi.Pointer<UA_DataSetMessage> dsm,
    ffi.Pointer<UA_UInt16> writerId,
    int dsmCount,
    ffi.Pointer<UA_NetworkMessage> nm,
  ) {
    return _UA_DataSetReader_generateNetworkMessage(
      pubSubConnection,
      dataSetReader,
      dsm,
      writerId,
      dsmCount,
      nm,
    );
  }

  late final _UA_DataSetReader_generateNetworkMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubConnection>,
                  ffi.Pointer<UA_DataSetReader>,
                  ffi.Pointer<UA_DataSetMessage>,
                  ffi.Pointer<UA_UInt16>,
                  UA_Byte,
                  ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_DataSetReader_generateNetworkMessage');
  late final _UA_DataSetReader_generateNetworkMessage =
      _UA_DataSetReader_generateNetworkMessagePtr.asFunction<
          int Function(
              ffi.Pointer<UA_PubSubConnection>,
              ffi.Pointer<UA_DataSetReader>,
              ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_UInt16>,
              int,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_DataSetReader_generateDataSetMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetMessage> dataSetMessage,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
  ) {
    return _UA_DataSetReader_generateDataSetMessage(
      server,
      dataSetMessage,
      dataSetReader,
    );
  }

  late final _UA_DataSetReader_generateDataSetMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_DataSetMessage>,
                  ffi.Pointer<UA_DataSetReader>)>>(
      'UA_DataSetReader_generateDataSetMessage');
  late final _UA_DataSetReader_generateDataSetMessage =
      _UA_DataSetReader_generateDataSetMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_DataSetReader>)>();

  int UA_ReaderGroupConfig_copy(
    ffi.Pointer<UA_ReaderGroupConfig> src,
    ffi.Pointer<UA_ReaderGroupConfig> dst,
  ) {
    return _UA_ReaderGroupConfig_copy(
      src,
      dst,
    );
  }

  late final _UA_ReaderGroupConfig_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReaderGroupConfig>,
              ffi.Pointer<UA_ReaderGroupConfig>)>>('UA_ReaderGroupConfig_copy');
  late final _UA_ReaderGroupConfig_copy =
      _UA_ReaderGroupConfig_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReaderGroupConfig>,
              ffi.Pointer<UA_ReaderGroupConfig>)>();

  ffi.Pointer<UA_ReaderGroup> UA_ReaderGroup_findRGbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_ReaderGroup_findRGbyId(
      server,
      identifier,
    );
  }

  late final _UA_ReaderGroup_findRGbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_ReaderGroup> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>>('UA_ReaderGroup_findRGbyId');
  late final _UA_ReaderGroup_findRGbyId =
      _UA_ReaderGroup_findRGbyIdPtr.asFunction<
          ffi.Pointer<UA_ReaderGroup> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  ffi.Pointer<UA_DataSetReader> UA_ReaderGroup_findDSRbyId(
    ffi.Pointer<UA_Server> server,
    UA_NodeId identifier,
  ) {
    return _UA_ReaderGroup_findDSRbyId(
      server,
      identifier,
    );
  }

  late final _UA_ReaderGroup_findDSRbyIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataSetReader> Function(ffi.Pointer<UA_Server>,
              UA_NodeId)>>('UA_ReaderGroup_findDSRbyId');
  late final _UA_ReaderGroup_findDSRbyId =
      _UA_ReaderGroup_findDSRbyIdPtr.asFunction<
          ffi.Pointer<UA_DataSetReader> Function(
              ffi.Pointer<UA_Server>, UA_NodeId)>();

  int UA_ReaderGroup_setPubSubState(
    ffi.Pointer<UA_Server> server,
    int state,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
  ) {
    return _UA_ReaderGroup_setPubSubState(
      server,
      state,
      readerGroup,
    );
  }

  late final _UA_ReaderGroup_setPubSubStatePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Int32,
              ffi.Pointer<UA_ReaderGroup>)>>('UA_ReaderGroup_setPubSubState');
  late final _UA_ReaderGroup_setPubSubState =
      _UA_ReaderGroup_setPubSubStatePtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, int, ffi.Pointer<UA_ReaderGroup>)>();

  /// /
  int UA_WriterGroup_addPublishCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriterGroup> writerGroup,
  ) {
    return _UA_WriterGroup_addPublishCallback(
      server,
      writerGroup,
    );
  }

  late final _UA_WriterGroup_addPublishCallbackPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriterGroup>)>>(
      'UA_WriterGroup_addPublishCallback');
  late final _UA_WriterGroup_addPublishCallback =
      _UA_WriterGroup_addPublishCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriterGroup>)>();

  void UA_WriterGroup_publishCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriterGroup> writerGroup,
  ) {
    return _UA_WriterGroup_publishCallback(
      server,
      writerGroup,
    );
  }

  late final _UA_WriterGroup_publishCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_WriterGroup>)>>('UA_WriterGroup_publishCallback');
  late final _UA_WriterGroup_publishCallback =
      _UA_WriterGroup_publishCallbackPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriterGroup>)>();

  /// /
  int UA_ReaderGroup_addSubscribeCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
  ) {
    return _UA_ReaderGroup_addSubscribeCallback(
      server,
      readerGroup,
    );
  }

  late final _UA_ReaderGroup_addSubscribeCallbackPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_addSubscribeCallback');
  late final _UA_ReaderGroup_addSubscribeCallback =
      _UA_ReaderGroup_addSubscribeCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  void UA_ReaderGroup_removeSubscribeCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
  ) {
    return _UA_ReaderGroup_removeSubscribeCallback(
      server,
      readerGroup,
    );
  }

  late final _UA_ReaderGroup_removeSubscribeCallbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_removeSubscribeCallback');
  late final _UA_ReaderGroup_removeSubscribeCallback =
      _UA_ReaderGroup_removeSubscribeCallbackPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  void UA_ReaderGroup_subscribeCallback(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
  ) {
    return _UA_ReaderGroup_subscribeCallback(
      server,
      readerGroup,
    );
  }

  late final _UA_ReaderGroup_subscribeCallbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_subscribeCallback');
  late final _UA_ReaderGroup_subscribeCallback =
      _UA_ReaderGroup_subscribeCallbackPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  void UA_PubSubManager_delete(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_PubSubManager> pubSubManager,
  ) {
    return _UA_PubSubManager_delete(
      server,
      pubSubManager,
    );
  }

  late final _UA_PubSubManager_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_PubSubManager>)>>('UA_PubSubManager_delete');
  late final _UA_PubSubManager_delete = _UA_PubSubManager_deletePtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_PubSubManager>)>();

  UA_Guid UA_PubSubManager_generateUniqueGuid(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_PubSubManager_generateUniqueGuid(
      server,
    );
  }

  late final _UA_PubSubManager_generateUniqueGuidPtr =
      _lookup<ffi.NativeFunction<UA_Guid Function(ffi.Pointer<UA_Server>)>>(
          'UA_PubSubManager_generateUniqueGuid');
  late final _UA_PubSubManager_generateUniqueGuid =
      _UA_PubSubManager_generateUniqueGuidPtr.asFunction<
          UA_Guid Function(ffi.Pointer<UA_Server>)>();

  int UA_PubSubConfigurationVersionTimeDifference() {
    return _UA_PubSubConfigurationVersionTimeDifference();
  }

  late final _UA_PubSubConfigurationVersionTimeDifferencePtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function()>>(
          'UA_PubSubConfigurationVersionTimeDifference');
  late final _UA_PubSubConfigurationVersionTimeDifference =
      _UA_PubSubConfigurationVersionTimeDifferencePtr.asFunction<
          int Function()>();

  /// /
  int UA_PubSubManager_addRepeatedCallback(
    ffi.Pointer<UA_Server> server,
    UA_ServerCallback callback,
    ffi.Pointer<ffi.Void> data,
    double interval_ms,
    ffi.Pointer<UA_DateTime> baseTime,
    int timerPolicy,
    ffi.Pointer<UA_UInt64> callbackId,
  ) {
    return _UA_PubSubManager_addRepeatedCallback(
      server,
      callback,
      data,
      interval_ms,
      baseTime,
      timerPolicy,
      callbackId,
    );
  }

  late final _UA_PubSubManager_addRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              UA_Double,
              ffi.Pointer<UA_DateTime>,
              ffi.Int32,
              ffi.Pointer<UA_UInt64>)>>('UA_PubSubManager_addRepeatedCallback');
  late final _UA_PubSubManager_addRepeatedCallback =
      _UA_PubSubManager_addRepeatedCallbackPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_ServerCallback,
              ffi.Pointer<ffi.Void>,
              double,
              ffi.Pointer<UA_DateTime>,
              int,
              ffi.Pointer<UA_UInt64>)>();

  int UA_PubSubManager_changeRepeatedCallback(
    ffi.Pointer<UA_Server> server,
    int callbackId,
    double interval_ms,
    ffi.Pointer<UA_DateTime> baseTime,
    int timerPolicy,
  ) {
    return _UA_PubSubManager_changeRepeatedCallback(
      server,
      callbackId,
      interval_ms,
      baseTime,
      timerPolicy,
    );
  }

  late final _UA_PubSubManager_changeRepeatedCallbackPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_UInt64,
              UA_Double,
              ffi.Pointer<UA_DateTime>,
              ffi.Int32)>>('UA_PubSubManager_changeRepeatedCallback');
  late final _UA_PubSubManager_changeRepeatedCallback =
      _UA_PubSubManager_changeRepeatedCallbackPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, int, double,
              ffi.Pointer<UA_DateTime>, int)>();

  void UA_PubSubManager_removeRepeatedPubSubCallback(
    ffi.Pointer<UA_Server> server,
    int callbackId,
  ) {
    return _UA_PubSubManager_removeRepeatedPubSubCallback(
      server,
      callbackId,
    );
  }

  late final _UA_PubSubManager_removeRepeatedPubSubCallbackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              UA_UInt64)>>('UA_PubSubManager_removeRepeatedPubSubCallback');
  late final _UA_PubSubManager_removeRepeatedPubSubCallback =
      _UA_PubSubManager_removeRepeatedPubSubCallbackPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, int)>();

  int UA_Server_initPubSubNS0(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_initPubSubNS0(
      server,
    );
  }

  late final _UA_Server_initPubSubNS0Ptr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_initPubSubNS0');
  late final _UA_Server_initPubSubNS0 = _UA_Server_initPubSubNS0Ptr.asFunction<
      int Function(ffi.Pointer<UA_Server>)>();

  void UA_AsyncManager_init(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_AsyncManager_init(
      am,
      server,
    );
  }

  late final _UA_AsyncManager_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_AsyncManager>,
              ffi.Pointer<UA_Server>)>>('UA_AsyncManager_init');
  late final _UA_AsyncManager_init = _UA_AsyncManager_initPtr.asFunction<
      void Function(ffi.Pointer<UA_AsyncManager>, ffi.Pointer<UA_Server>)>();

  void UA_AsyncManager_clear(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_AsyncManager_clear(
      am,
      server,
    );
  }

  late final _UA_AsyncManager_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_AsyncManager>,
              ffi.Pointer<UA_Server>)>>('UA_AsyncManager_clear');
  late final _UA_AsyncManager_clear = _UA_AsyncManager_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_AsyncManager>, ffi.Pointer<UA_Server>)>();

  int UA_AsyncManager_createAsyncResponse(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    int requestId,
    int requestHandle,
    int operationType,
    ffi.Pointer<ffi.Pointer<UA_AsyncResponse>> outAr,
  ) {
    return _UA_AsyncManager_createAsyncResponse(
      am,
      server,
      sessionId,
      requestId,
      requestHandle,
      operationType,
      outAr,
    );
  }

  late final _UA_AsyncManager_createAsyncResponsePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_AsyncManager>,
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_NodeId>,
                  UA_UInt32,
                  UA_UInt32,
                  ffi.Int32,
                  ffi.Pointer<ffi.Pointer<UA_AsyncResponse>>)>>(
      'UA_AsyncManager_createAsyncResponse');
  late final _UA_AsyncManager_createAsyncResponse =
      _UA_AsyncManager_createAsyncResponsePtr.asFunction<
          int Function(
              ffi.Pointer<UA_AsyncManager>,
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Pointer<UA_AsyncResponse>>)>();

  void UA_AsyncManager_removeAsyncResponse(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_AsyncResponse> ar,
  ) {
    return _UA_AsyncManager_removeAsyncResponse(
      am,
      ar,
    );
  }

  late final _UA_AsyncManager_removeAsyncResponsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_AsyncManager>,
                  ffi.Pointer<UA_AsyncResponse>)>>(
      'UA_AsyncManager_removeAsyncResponse');
  late final _UA_AsyncManager_removeAsyncResponse =
      _UA_AsyncManager_removeAsyncResponsePtr.asFunction<
          void Function(
              ffi.Pointer<UA_AsyncManager>, ffi.Pointer<UA_AsyncResponse>)>();

  int UA_AsyncManager_createAsyncOp(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_AsyncResponse> ar,
    int opIndex,
    ffi.Pointer<UA_CallMethodRequest> opRequest,
  ) {
    return _UA_AsyncManager_createAsyncOp(
      am,
      server,
      ar,
      opIndex,
      opRequest,
    );
  }

  late final _UA_AsyncManager_createAsyncOpPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_AsyncManager>,
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_AsyncResponse>,
                  ffi.Size,
                  ffi.Pointer<UA_CallMethodRequest>)>>(
      'UA_AsyncManager_createAsyncOp');
  late final _UA_AsyncManager_createAsyncOp =
      _UA_AsyncManager_createAsyncOpPtr.asFunction<
          int Function(
              ffi.Pointer<UA_AsyncManager>,
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_AsyncResponse>,
              int,
              ffi.Pointer<UA_CallMethodRequest>)>();

  int UA_Server_processServiceOperationsAsync(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    int requestId,
    int requestHandle,
    UA_AsyncServiceOperation operationCallback,
    ffi.Pointer<ffi.Size> requestOperations,
    ffi.Pointer<UA_DataType> requestOperationsType,
    ffi.Pointer<ffi.Size> responseOperations,
    ffi.Pointer<UA_DataType> responseOperationsType,
    ffi.Pointer<ffi.Pointer<UA_AsyncResponse>> ar,
  ) {
    return _UA_Server_processServiceOperationsAsync(
      server,
      session,
      requestId,
      requestHandle,
      operationCallback,
      requestOperations,
      requestOperationsType,
      responseOperations,
      responseOperationsType,
      ar,
    );
  }

  late final _UA_Server_processServiceOperationsAsyncPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_Session>,
                  UA_UInt32,
                  UA_UInt32,
                  UA_AsyncServiceOperation,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<UA_DataType>,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<UA_DataType>,
                  ffi.Pointer<ffi.Pointer<UA_AsyncResponse>>)>>(
      'UA_Server_processServiceOperationsAsync');
  late final _UA_Server_processServiceOperationsAsync =
      _UA_Server_processServiceOperationsAsyncPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              int,
              int,
              UA_AsyncServiceOperation,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Pointer<UA_AsyncResponse>>)>();

  ffi.Pointer<UA_ReferenceTarget> UA_NodeReferenceKind_findTarget(
    ffi.Pointer<UA_NodeReferenceKind> rk,
    ffi.Pointer<UA_ExpandedNodeId> targetId,
  ) {
    return _UA_NodeReferenceKind_findTarget(
      rk,
      targetId,
    );
  }

  late final _UA_NodeReferenceKind_findTargetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UA_ReferenceTarget> Function(
                  ffi.Pointer<UA_NodeReferenceKind>,
                  ffi.Pointer<UA_ExpandedNodeId>)>>(
      'UA_NodeReferenceKind_findTarget');
  late final _UA_NodeReferenceKind_findTarget =
      _UA_NodeReferenceKind_findTargetPtr.asFunction<
          ffi.Pointer<UA_ReferenceTarget> Function(
              ffi.Pointer<UA_NodeReferenceKind>,
              ffi.Pointer<UA_ExpandedNodeId>)>();

  /// /
  void UA_Server_deleteSecureChannels(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_deleteSecureChannels(
      server,
    );
  }

  late final _UA_Server_deleteSecureChannelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Server>)>>(
          'UA_Server_deleteSecureChannels');
  late final _UA_Server_deleteSecureChannels =
      _UA_Server_deleteSecureChannelsPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>)>();

  void UA_Server_cleanupTimedOutSecureChannels(
    ffi.Pointer<UA_Server> server,
    int nowMonotonic,
  ) {
    return _UA_Server_cleanupTimedOutSecureChannels(
      server,
      nowMonotonic,
    );
  }

  late final _UA_Server_cleanupTimedOutSecureChannelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              UA_DateTime)>>('UA_Server_cleanupTimedOutSecureChannels');
  late final _UA_Server_cleanupTimedOutSecureChannels =
      _UA_Server_cleanupTimedOutSecureChannelsPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, int)>();

  int UA_Server_createSecureChannel(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Connection> connection,
  ) {
    return _UA_Server_createSecureChannel(
      server,
      connection,
    );
  }

  late final _UA_Server_createSecureChannelPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Connection>)>>('UA_Server_createSecureChannel');
  late final _UA_Server_createSecureChannel =
      _UA_Server_createSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Connection>)>();

  int UA_Server_configSecureChannel(
    ffi.Pointer<ffi.Void> application,
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader> asymHeader,
  ) {
    return _UA_Server_configSecureChannel(
      application,
      channel,
      asymHeader,
    );
  }

  late final _UA_Server_configSecureChannelPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>>(
      'UA_Server_configSecureChannel');
  late final _UA_Server_configSecureChannel =
      _UA_Server_configSecureChannelPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>)>();

  void UA_Server_closeSecureChannel(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_SecureChannel> channel,
    int event,
  ) {
    return _UA_Server_closeSecureChannel(
      server,
      channel,
      event,
    );
  }

  late final _UA_Server_closeSecureChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_SecureChannel>,
              ffi.Int32)>>('UA_Server_closeSecureChannel');
  late final _UA_Server_closeSecureChannel =
      _UA_Server_closeSecureChannelPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_SecureChannel>, int)>();

  int UA_Server_createSession(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_CreateSessionRequest> request,
    ffi.Pointer<ffi.Pointer<UA_Session>> session,
  ) {
    return _UA_Server_createSession(
      server,
      channel,
      request,
      session,
    );
  }

  late final _UA_Server_createSessionPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_CreateSessionRequest>,
                  ffi.Pointer<ffi.Pointer<UA_Session>>)>>(
      'UA_Server_createSession');
  late final _UA_Server_createSession = _UA_Server_createSessionPtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          ffi.Pointer<UA_SecureChannel>,
          ffi.Pointer<UA_CreateSessionRequest>,
          ffi.Pointer<ffi.Pointer<UA_Session>>)>();

  void UA_Server_removeSession(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<session_list_entry> sentry,
    int event,
  ) {
    return _UA_Server_removeSession(
      server,
      sentry,
      event,
    );
  }

  late final _UA_Server_removeSessionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<session_list_entry>,
              ffi.Int32)>>('UA_Server_removeSession');
  late final _UA_Server_removeSession = _UA_Server_removeSessionPtr.asFunction<
      void Function(
          ffi.Pointer<UA_Server>, ffi.Pointer<session_list_entry>, int)>();

  int UA_Server_removeSessionByToken(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> token,
    int event,
  ) {
    return _UA_Server_removeSessionByToken(
      server,
      token,
      event,
    );
  }

  late final _UA_Server_removeSessionByTokenPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>,
              ffi.Int32)>>('UA_Server_removeSessionByToken');
  late final _UA_Server_removeSessionByToken =
      _UA_Server_removeSessionByTokenPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>, int)>();

  void UA_Server_cleanupSessions(
    ffi.Pointer<UA_Server> server,
    int nowMonotonic,
  ) {
    return _UA_Server_cleanupSessions(
      server,
      nowMonotonic,
    );
  }

  late final _UA_Server_cleanupSessionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              UA_DateTime)>>('UA_Server_cleanupSessions');
  late final _UA_Server_cleanupSessions = _UA_Server_cleanupSessionsPtr
      .asFunction<void Function(ffi.Pointer<UA_Server>, int)>();

  ffi.Pointer<UA_Session> UA_Server_getSessionById(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
  ) {
    return _UA_Server_getSessionById(
      server,
      sessionId,
    );
  }

  late final _UA_Server_getSessionByIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Session> Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_getSessionById');
  late final _UA_Server_getSessionById =
      _UA_Server_getSessionByIdPtr.asFunction<
          ffi.Pointer<UA_Session> Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_NodeId>)>();

  int UA_Server_editNode(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<UA_NodeId> nodeId,
    UA_EditNodeCallback callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _UA_Server_editNode(
      server,
      session,
      nodeId,
      callback,
      data,
    );
  }

  late final _UA_Server_editNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              ffi.Pointer<UA_NodeId>,
              UA_EditNodeCallback,
              ffi.Pointer<ffi.Void>)>>('UA_Server_editNode');
  late final _UA_Server_editNode = _UA_Server_editNodePtr.asFunction<
      int Function(
          ffi.Pointer<UA_Server>,
          ffi.Pointer<UA_Session>,
          ffi.Pointer<UA_NodeId>,
          UA_EditNodeCallback,
          ffi.Pointer<ffi.Void>)>();

  bool UA_Node_hasSubTypeOrInstances(
    ffi.Pointer<UA_NodeHead> head,
  ) {
    return _UA_Node_hasSubTypeOrInstances(
      head,
    );
  }

  late final _UA_Node_hasSubTypeOrInstancesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NodeHead>)>>(
          'UA_Node_hasSubTypeOrInstances');
  late final _UA_Node_hasSubTypeOrInstances = _UA_Node_hasSubTypeOrInstancesPtr
      .asFunction<bool Function(ffi.Pointer<UA_NodeHead>)>();

  int UA_Server_processServiceOperations(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    UA_ServiceOperation operationCallback,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Size> requestOperations,
    ffi.Pointer<UA_DataType> requestOperationsType,
    ffi.Pointer<ffi.Size> responseOperations,
    ffi.Pointer<UA_DataType> responseOperationsType,
  ) {
    return _UA_Server_processServiceOperations(
      server,
      session,
      operationCallback,
      context,
      requestOperations,
      requestOperationsType,
      responseOperations,
      responseOperationsType,
    );
  }

  late final _UA_Server_processServiceOperationsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              UA_ServiceOperation,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>)>>('UA_Server_processServiceOperations');
  late final _UA_Server_processServiceOperations =
      _UA_Server_processServiceOperationsPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Session>,
              UA_ServiceOperation,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_DataType>)>();

  ffi.Pointer<UA_Subscription> UA_Server_getSubscriptionById(
    ffi.Pointer<UA_Server> server,
    int subscriptionId,
  ) {
    return _UA_Server_getSubscriptionById(
      server,
      subscriptionId,
    );
  }

  late final _UA_Server_getSubscriptionByIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Subscription> Function(ffi.Pointer<UA_Server>,
              UA_UInt32)>>('UA_Server_getSubscriptionById');
  late final _UA_Server_getSubscriptionById =
      _UA_Server_getSubscriptionByIdPtr.asFunction<
          ffi.Pointer<UA_Subscription> Function(ffi.Pointer<UA_Server>, int)>();

  /// /
  int UA_Server_initNS0(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_initNS0(
      server,
    );
  }

  late final _UA_Server_initNS0Ptr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_initNS0');
  late final _UA_Server_initNS0 =
      _UA_Server_initNS0Ptr.asFunction<int Function(ffi.Pointer<UA_Server>)>();

  ffi.Pointer<UA_Node> UA_NODESTORE_GETFROMREF(
    ffi.Pointer<UA_Server> server,
    UA_NodePointer target,
  ) {
    return _UA_NODESTORE_GETFROMREF(
      server,
      target,
    );
  }

  late final _UA_NODESTORE_GETFROMREFPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Server>,
              UA_NodePointer)>>('UA_NODESTORE_GETFROMREF');
  late final _UA_NODESTORE_GETFROMREF = _UA_NODESTORE_GETFROMREFPtr.asFunction<
      ffi.Pointer<UA_Node> Function(ffi.Pointer<UA_Server>, UA_NodePointer)>();

  void UA_Client_Subscriptions_clean(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_Subscriptions_clean(
      client,
    );
  }

  late final _UA_Client_Subscriptions_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_Subscriptions_clean');
  late final _UA_Client_Subscriptions_clean = _UA_Client_Subscriptions_cleanPtr
      .asFunction<void Function(ffi.Pointer<UA_Client>)>();

  /// /
  int UA_Client_preparePublishRequest(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_PublishRequest> request,
  ) {
    return _UA_Client_preparePublishRequest(
      client,
      request,
    );
  }

  late final _UA_Client_preparePublishRequestPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>, ffi.Pointer<UA_PublishRequest>)>>(
      'UA_Client_preparePublishRequest');
  late final _UA_Client_preparePublishRequest =
      _UA_Client_preparePublishRequestPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Client>, ffi.Pointer<UA_PublishRequest>)>();

  void UA_Client_Subscriptions_backgroundPublish(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_Subscriptions_backgroundPublish(
      client,
    );
  }

  late final _UA_Client_Subscriptions_backgroundPublishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_Subscriptions_backgroundPublish');
  late final _UA_Client_Subscriptions_backgroundPublish =
      _UA_Client_Subscriptions_backgroundPublishPtr.asFunction<
          void Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_Subscriptions_backgroundPublishInactivityCheck(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_Subscriptions_backgroundPublishInactivityCheck(
      client,
    );
  }

  late final _UA_Client_Subscriptions_backgroundPublishInactivityCheckPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_Subscriptions_backgroundPublishInactivityCheck');
  late final _UA_Client_Subscriptions_backgroundPublishInactivityCheck =
      _UA_Client_Subscriptions_backgroundPublishInactivityCheckPtr.asFunction<
          void Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_AsyncService_cancel(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<AsyncServiceCall> ac,
    int statusCode,
  ) {
    return _UA_Client_AsyncService_cancel(
      client,
      ac,
      statusCode,
    );
  }

  late final _UA_Client_AsyncService_cancelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<AsyncServiceCall>,
              UA_StatusCode)>>('UA_Client_AsyncService_cancel');
  late final _UA_Client_AsyncService_cancel =
      _UA_Client_AsyncService_cancelPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Client>, ffi.Pointer<AsyncServiceCall>, int)>();

  void UA_Client_AsyncService_removeAll(
    ffi.Pointer<UA_Client> client,
    int statusCode,
  ) {
    return _UA_Client_AsyncService_removeAll(
      client,
      statusCode,
    );
  }

  late final _UA_Client_AsyncService_removeAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Client>,
              UA_StatusCode)>>('UA_Client_AsyncService_removeAll');
  late final _UA_Client_AsyncService_removeAll =
      _UA_Client_AsyncService_removeAllPtr.asFunction<
          void Function(ffi.Pointer<UA_Client>, int)>();

  /// /
  late final ffi.Pointer<pcg32_random_t> _UA_rng =
      _lookup<pcg32_random_t>('UA_rng');

  pcg32_random_t get UA_rng => _UA_rng.ref;

  ffi.Pointer<UA_DataType> UA_findDataTypeByBinaryInternal(
    ffi.Pointer<UA_NodeId> typeId,
    ffi.Pointer<Ctx> ctx,
  ) {
    return _UA_findDataTypeByBinaryInternal(
      typeId,
      ctx,
    );
  }

  late final _UA_findDataTypeByBinaryInternalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_DataType> Function(ffi.Pointer<UA_NodeId>,
              ffi.Pointer<Ctx>)>>('UA_findDataTypeByBinaryInternal');
  late final _UA_findDataTypeByBinaryInternal =
      _UA_findDataTypeByBinaryInternalPtr.asFunction<
          ffi.Pointer<UA_DataType> Function(
              ffi.Pointer<UA_NodeId>, ffi.Pointer<Ctx>)>();

  /// /
  ffi.Pointer<UA_PrintOutput> UA_PrintContext_addOutput(
    ffi.Pointer<UA_PrintContext> ctx,
    int length,
  ) {
    return _UA_PrintContext_addOutput(
      ctx,
      length,
    );
  }

  late final _UA_PrintContext_addOutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_PrintOutput> Function(ffi.Pointer<UA_PrintContext>,
              ffi.Size)>>('UA_PrintContext_addOutput');
  late final _UA_PrintContext_addOutput =
      _UA_PrintContext_addOutputPtr.asFunction<
          ffi.Pointer<UA_PrintOutput> Function(
              ffi.Pointer<UA_PrintContext>, int)>();

  int UA_PrintContext_addNewlineTabs(
    ffi.Pointer<UA_PrintContext> ctx,
    int tabs,
  ) {
    return _UA_PrintContext_addNewlineTabs(
      ctx,
      tabs,
    );
  }

  late final _UA_PrintContext_addNewlineTabsPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PrintContext>,
              ffi.Size)>>('UA_PrintContext_addNewlineTabs');
  late final _UA_PrintContext_addNewlineTabs =
      _UA_PrintContext_addNewlineTabsPtr.asFunction<
          int Function(ffi.Pointer<UA_PrintContext>, int)>();

  int UA_PrintContext_addName(
    ffi.Pointer<UA_PrintContext> ctx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _UA_PrintContext_addName(
      ctx,
      name,
    );
  }

  late final _UA_PrintContext_addNamePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PrintContext>,
              ffi.Pointer<ffi.Char>)>>('UA_PrintContext_addName');
  late final _UA_PrintContext_addName = _UA_PrintContext_addNamePtr.asFunction<
      int Function(ffi.Pointer<UA_PrintContext>, ffi.Pointer<ffi.Char>)>();

  int UA_PrintContext_addString(
    ffi.Pointer<UA_PrintContext> ctx,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _UA_PrintContext_addString(
      ctx,
      str,
    );
  }

  late final _UA_PrintContext_addStringPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PrintContext>,
              ffi.Pointer<ffi.Char>)>>('UA_PrintContext_addString');
  late final _UA_PrintContext_addString =
      _UA_PrintContext_addStringPtr.asFunction<
          int Function(ffi.Pointer<UA_PrintContext>, ffi.Pointer<ffi.Char>)>();

  void UA_Chunk_delete(
    ffi.Pointer<UA_Chunk> chunk,
  ) {
    return _UA_Chunk_delete(
      chunk,
    );
  }

  late final _UA_Chunk_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Chunk>)>>(
          'UA_Chunk_delete');
  late final _UA_Chunk_delete =
      _UA_Chunk_deletePtr.asFunction<void Function(ffi.Pointer<UA_Chunk>)>();

  int UA_ObjectNode_copy(
    ffi.Pointer<UA_ObjectNode> src,
    ffi.Pointer<UA_ObjectNode> dst,
  ) {
    return _UA_ObjectNode_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ObjectNode>,
              ffi.Pointer<UA_ObjectNode>)>>('UA_ObjectNode_copy');
  late final _UA_ObjectNode_copy = _UA_ObjectNode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ObjectNode>, ffi.Pointer<UA_ObjectNode>)>();

  int UA_CommonVariableNode_copy(
    ffi.Pointer<UA_VariableNode> src,
    ffi.Pointer<UA_VariableNode> dst,
  ) {
    return _UA_CommonVariableNode_copy(
      src,
      dst,
    );
  }

  late final _UA_CommonVariableNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_VariableNode>,
              ffi.Pointer<UA_VariableNode>)>>('UA_CommonVariableNode_copy');
  late final _UA_CommonVariableNode_copy =
      _UA_CommonVariableNode_copyPtr.asFunction<
          int Function(
              ffi.Pointer<UA_VariableNode>, ffi.Pointer<UA_VariableNode>)>();

  int UA_VariableNode_copy(
    ffi.Pointer<UA_VariableNode> src,
    ffi.Pointer<UA_VariableNode> dst,
  ) {
    return _UA_VariableNode_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_VariableNode>,
              ffi.Pointer<UA_VariableNode>)>>('UA_VariableNode_copy');
  late final _UA_VariableNode_copy = _UA_VariableNode_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_VariableNode>, ffi.Pointer<UA_VariableNode>)>();

  int UA_VariableTypeNode_copy(
    ffi.Pointer<UA_VariableTypeNode> src,
    ffi.Pointer<UA_VariableTypeNode> dst,
  ) {
    return _UA_VariableTypeNode_copy(
      src,
      dst,
    );
  }

  late final _UA_VariableTypeNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_VariableTypeNode>,
              ffi.Pointer<UA_VariableTypeNode>)>>('UA_VariableTypeNode_copy');
  late final _UA_VariableTypeNode_copy =
      _UA_VariableTypeNode_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_VariableTypeNode>,
              ffi.Pointer<UA_VariableTypeNode>)>();

  int UA_MethodNode_copy(
    ffi.Pointer<UA_MethodNode> src,
    ffi.Pointer<UA_MethodNode> dst,
  ) {
    return _UA_MethodNode_copy(
      src,
      dst,
    );
  }

  late final _UA_MethodNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_MethodNode>,
              ffi.Pointer<UA_MethodNode>)>>('UA_MethodNode_copy');
  late final _UA_MethodNode_copy = _UA_MethodNode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_MethodNode>, ffi.Pointer<UA_MethodNode>)>();

  int UA_ObjectTypeNode_copy(
    ffi.Pointer<UA_ObjectTypeNode> src,
    ffi.Pointer<UA_ObjectTypeNode> dst,
  ) {
    return _UA_ObjectTypeNode_copy(
      src,
      dst,
    );
  }

  late final _UA_ObjectTypeNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ObjectTypeNode>,
              ffi.Pointer<UA_ObjectTypeNode>)>>('UA_ObjectTypeNode_copy');
  late final _UA_ObjectTypeNode_copy = _UA_ObjectTypeNode_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_ObjectTypeNode>, ffi.Pointer<UA_ObjectTypeNode>)>();

  int UA_ReferenceTypeNode_copy(
    ffi.Pointer<UA_ReferenceTypeNode> src,
    ffi.Pointer<UA_ReferenceTypeNode> dst,
  ) {
    return _UA_ReferenceTypeNode_copy(
      src,
      dst,
    );
  }

  late final _UA_ReferenceTypeNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ReferenceTypeNode>,
              ffi.Pointer<UA_ReferenceTypeNode>)>>('UA_ReferenceTypeNode_copy');
  late final _UA_ReferenceTypeNode_copy =
      _UA_ReferenceTypeNode_copyPtr.asFunction<
          int Function(ffi.Pointer<UA_ReferenceTypeNode>,
              ffi.Pointer<UA_ReferenceTypeNode>)>();

  int UA_DataTypeNode_copy(
    ffi.Pointer<UA_DataTypeNode> src,
    ffi.Pointer<UA_DataTypeNode> dst,
  ) {
    return _UA_DataTypeNode_copy(
      src,
      dst,
    );
  }

  late final _UA_DataTypeNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_DataTypeNode>,
              ffi.Pointer<UA_DataTypeNode>)>>('UA_DataTypeNode_copy');
  late final _UA_DataTypeNode_copy = _UA_DataTypeNode_copyPtr.asFunction<
      int Function(
          ffi.Pointer<UA_DataTypeNode>, ffi.Pointer<UA_DataTypeNode>)>();

  int UA_ViewNode_copy(
    ffi.Pointer<UA_ViewNode> src,
    ffi.Pointer<UA_ViewNode> dst,
  ) {
    return _UA_ViewNode_copy(
      src,
      dst,
    );
  }

  late final _UA_ViewNode_copyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ViewNode>,
              ffi.Pointer<UA_ViewNode>)>>('UA_ViewNode_copy');
  late final _UA_ViewNode_copy = _UA_ViewNode_copyPtr.asFunction<
      int Function(ffi.Pointer<UA_ViewNode>, ffi.Pointer<UA_ViewNode>)>();

  void UA_Server_cleanup(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<ffi.Void> _,
  ) {
    return _UA_Server_cleanup(
      server,
      _,
    );
  }

  late final _UA_Server_cleanupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<ffi.Void>)>>('UA_Server_cleanup');
  late final _UA_Server_cleanup = _UA_Server_cleanupPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<UA_Server> UA_Server_init(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_init(
      server,
    );
  }

  late final _UA_Server_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Server> Function(
              ffi.Pointer<UA_Server>)>>('UA_Server_init');
  late final _UA_Server_init = _UA_Server_initPtr.asFunction<
      ffi.Pointer<UA_Server> Function(ffi.Pointer<UA_Server>)>();

  /// /
  int UA_Server_createNS0_base(
    ffi.Pointer<UA_Server> server,
  ) {
    return _UA_Server_createNS0_base(
      server,
    );
  }

  late final _UA_Server_createNS0_basePtr = _lookup<
          ffi.NativeFunction<UA_StatusCode Function(ffi.Pointer<UA_Server>)>>(
      'UA_Server_createNS0_base');
  late final _UA_Server_createNS0_base = _UA_Server_createNS0_basePtr
      .asFunction<int Function(ffi.Pointer<UA_Server>)>();

  void UA_AsyncOperation_delete(
    ffi.Pointer<UA_AsyncOperation> ar,
  ) {
    return _UA_AsyncOperation_delete(
      ar,
    );
  }

  late final _UA_AsyncOperation_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AsyncOperation>)>>(
      'UA_AsyncOperation_delete');
  late final _UA_AsyncOperation_delete = _UA_AsyncOperation_deletePtr
      .asFunction<void Function(ffi.Pointer<UA_AsyncOperation>)>();

  int UA_AsyncManager_sendAsyncResponse(
    ffi.Pointer<UA_AsyncManager> am,
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_AsyncResponse> ar,
  ) {
    return _UA_AsyncManager_sendAsyncResponse(
      am,
      server,
      ar,
    );
  }

  late final _UA_AsyncManager_sendAsyncResponsePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_AsyncManager>,
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_AsyncResponse>)>>(
      'UA_AsyncManager_sendAsyncResponse');
  late final _UA_AsyncManager_sendAsyncResponse =
      _UA_AsyncManager_sendAsyncResponsePtr.asFunction<
          int Function(ffi.Pointer<UA_AsyncManager>, ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_AsyncResponse>)>();

  bool UA_NetworkMessage_ExtendedFlags1Enabled(
    ffi.Pointer<UA_NetworkMessage> src,
  ) {
    return _UA_NetworkMessage_ExtendedFlags1Enabled(
      src,
    );
  }

  late final _UA_NetworkMessage_ExtendedFlags1EnabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_ExtendedFlags1Enabled');
  late final _UA_NetworkMessage_ExtendedFlags1Enabled =
      _UA_NetworkMessage_ExtendedFlags1EnabledPtr.asFunction<
          bool Function(ffi.Pointer<UA_NetworkMessage>)>();

  bool UA_NetworkMessage_ExtendedFlags2Enabled(
    ffi.Pointer<UA_NetworkMessage> src,
  ) {
    return _UA_NetworkMessage_ExtendedFlags2Enabled(
      src,
    );
  }

  late final _UA_NetworkMessage_ExtendedFlags2EnabledPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_NetworkMessage_ExtendedFlags2Enabled');
  late final _UA_NetworkMessage_ExtendedFlags2Enabled =
      _UA_NetworkMessage_ExtendedFlags2EnabledPtr.asFunction<
          bool Function(ffi.Pointer<UA_NetworkMessage>)>();

  bool UA_DataSetMessageHeader_DataSetFlags2Enabled(
    ffi.Pointer<UA_DataSetMessageHeader> src,
  ) {
    return _UA_DataSetMessageHeader_DataSetFlags2Enabled(
      src,
    );
  }

  late final _UA_DataSetMessageHeader_DataSetFlags2EnabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<UA_DataSetMessageHeader>)>>(
      'UA_DataSetMessageHeader_DataSetFlags2Enabled');
  late final _UA_DataSetMessageHeader_DataSetFlags2Enabled =
      _UA_DataSetMessageHeader_DataSetFlags2EnabledPtr.asFunction<
          bool Function(ffi.Pointer<UA_DataSetMessageHeader>)>();

  int UA_NetworkMessageHeader_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_NetworkMessageHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_NetworkMessageHeader_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_NetworkMessageHeader_encodeBinary');
  late final _UA_NetworkMessageHeader_encodeBinary =
      _UA_NetworkMessageHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_GroupHeader_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_GroupHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_GroupHeader_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_GroupHeader_encodeBinary');
  late final _UA_GroupHeader_encodeBinary =
      _UA_GroupHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_PayloadHeader_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_PayloadHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_PayloadHeader_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_PayloadHeader_encodeBinary');
  late final _UA_PayloadHeader_encodeBinary =
      _UA_PayloadHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_ExtendedNetworkMessageHeader_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_ExtendedNetworkMessageHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_ExtendedNetworkMessageHeader_encodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_NetworkMessage>,
                  ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>>(
      'UA_ExtendedNetworkMessageHeader_encodeBinary');
  late final _UA_ExtendedNetworkMessageHeader_encodeBinary =
      _UA_ExtendedNetworkMessageHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_SecurityHeader_encodeBinary(
    ffi.Pointer<UA_NetworkMessage> src,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<UA_Byte> bufEnd,
  ) {
    return _UA_SecurityHeader_encodeBinary(
      src,
      bufPos,
      bufEnd,
    );
  }

  late final _UA_SecurityHeader_encodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>,
              ffi.Pointer<UA_Byte>)>>('UA_SecurityHeader_encodeBinary');
  late final _UA_SecurityHeader_encodeBinary =
      _UA_SecurityHeader_encodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_NetworkMessage>,
              ffi.Pointer<ffi.Pointer<UA_Byte>>, ffi.Pointer<UA_Byte>)>();

  int UA_GroupHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_GroupHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_GroupHeader_decodeBinaryPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ByteString>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>>('UA_GroupHeader_decodeBinary');
  late final _UA_GroupHeader_decodeBinary =
      _UA_GroupHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_PayloadHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_PayloadHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_PayloadHeader_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_PayloadHeader_decodeBinary');
  late final _UA_PayloadHeader_decodeBinary =
      _UA_PayloadHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_ExtendedNetworkMessageHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_ExtendedNetworkMessageHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_ExtendedNetworkMessageHeader_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_ExtendedNetworkMessageHeader_decodeBinary');
  late final _UA_ExtendedNetworkMessageHeader_decodeBinary =
      _UA_ExtendedNetworkMessageHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  int UA_SecurityHeader_decodeBinary(
    ffi.Pointer<UA_ByteString> src,
    ffi.Pointer<ffi.Size> offset,
    ffi.Pointer<UA_NetworkMessage> dst,
  ) {
    return _UA_SecurityHeader_decodeBinary(
      src,
      offset,
      dst,
    );
  }

  late final _UA_SecurityHeader_decodeBinaryPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_ByteString>,
                  ffi.Pointer<ffi.Size>, ffi.Pointer<UA_NetworkMessage>)>>(
      'UA_SecurityHeader_decodeBinary');
  late final _UA_SecurityHeader_decodeBinary =
      _UA_SecurityHeader_decodeBinaryPtr.asFunction<
          int Function(ffi.Pointer<UA_ByteString>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<UA_NetworkMessage>)>();

  /// /
  void UA_DataSetField_clear(
    ffi.Pointer<UA_DataSetField> field,
  ) {
    return _UA_DataSetField_clear(
      field,
    );
  }

  late final _UA_DataSetField_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetField>)>>(
      'UA_DataSetField_clear');
  late final _UA_DataSetField_clear = _UA_DataSetField_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_DataSetField>)>();

  void UA_DataSetWriter_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetWriter> dataSetWriter,
  ) {
    return _UA_DataSetWriter_clear(
      server,
      dataSetWriter,
    );
  }

  late final _UA_DataSetWriter_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_DataSetWriter>)>>('UA_DataSetWriter_clear');
  late final _UA_DataSetWriter_clear = _UA_DataSetWriter_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetWriter>)>();

  void UA_PubSubDataSetField_sampleValue(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetField> field,
    ffi.Pointer<UA_DataValue> value,
  ) {
    return _UA_PubSubDataSetField_sampleValue(
      server,
      field,
      value,
    );
  }

  late final _UA_PubSubDataSetField_sampleValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_DataSetField>,
              ffi.Pointer<UA_DataValue>)>>('UA_PubSubDataSetField_sampleValue');
  late final _UA_PubSubDataSetField_sampleValue =
      _UA_PubSubDataSetField_sampleValuePtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetField>,
              ffi.Pointer<UA_DataValue>)>();

  int UA_PubSubDataSetWriter_generateKeyFrameMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetMessage> dataSetMessage,
    ffi.Pointer<UA_DataSetWriter> dataSetWriter,
  ) {
    return _UA_PubSubDataSetWriter_generateKeyFrameMessage(
      server,
      dataSetMessage,
      dataSetWriter,
    );
  }

  late final _UA_PubSubDataSetWriter_generateKeyFrameMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_DataSetMessage>,
                  ffi.Pointer<UA_DataSetWriter>)>>(
      'UA_PubSubDataSetWriter_generateKeyFrameMessage');
  late final _UA_PubSubDataSetWriter_generateKeyFrameMessage =
      _UA_PubSubDataSetWriter_generateKeyFrameMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_DataSetWriter>)>();

  void UA_WriterGroup_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_WriterGroup> writerGroup,
  ) {
    return _UA_WriterGroup_clear(
      server,
      writerGroup,
    );
  }

  late final _UA_WriterGroup_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_WriterGroup>)>>('UA_WriterGroup_clear');
  late final _UA_WriterGroup_clear = _UA_WriterGroup_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_WriterGroup>)>();

  void UA_DataSetReader_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
  ) {
    return _UA_DataSetReader_clear(
      server,
      dataSetReader,
    );
  }

  late final _UA_DataSetReader_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_DataSetReader>)>>('UA_DataSetReader_clear');
  late final _UA_DataSetReader_clear = _UA_DataSetReader_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetReader>)>();

  void UA_PubSubDSRDataSetField_sampleValue(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
    ffi.Pointer<UA_DataValue> value,
    ffi.Pointer<UA_FieldTargetVariable> ftv,
  ) {
    return _UA_PubSubDSRDataSetField_sampleValue(
      server,
      dataSetReader,
      value,
      ftv,
    );
  }

  late final _UA_PubSubDSRDataSetField_sampleValuePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_DataSetReader>,
                  ffi.Pointer<UA_DataValue>,
                  ffi.Pointer<UA_FieldTargetVariable>)>>(
      'UA_PubSubDSRDataSetField_sampleValue');
  late final _UA_PubSubDSRDataSetField_sampleValue =
      _UA_PubSubDSRDataSetField_sampleValuePtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_DataSetReader>,
              ffi.Pointer<UA_DataValue>,
              ffi.Pointer<UA_FieldTargetVariable>)>();

  int UA_PubSubDataSetReader_generateKeyFrameMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetMessage> dataSetMessage,
    ffi.Pointer<UA_DataSetReader> dataSetReader,
  ) {
    return _UA_PubSubDataSetReader_generateKeyFrameMessage(
      server,
      dataSetMessage,
      dataSetReader,
    );
  }

  late final _UA_PubSubDataSetReader_generateKeyFrameMessagePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_DataSetMessage>,
                  ffi.Pointer<UA_DataSetReader>)>>(
      'UA_PubSubDataSetReader_generateKeyFrameMessage');
  late final _UA_PubSubDataSetReader_generateKeyFrameMessage =
      _UA_PubSubDataSetReader_generateKeyFrameMessagePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetMessage>,
              ffi.Pointer<UA_DataSetReader>)>();

  int UA_DataSetReader_setState_disabled(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_DataSetReader> dsr,
  ) {
    return _UA_DataSetReader_setState_disabled(
      server,
      dsr,
    );
  }

  late final _UA_DataSetReader_setState_disabledPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetReader>)>>(
      'UA_DataSetReader_setState_disabled');
  late final _UA_DataSetReader_setState_disabled =
      _UA_DataSetReader_setState_disabledPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_DataSetReader>)>();

  void UA_DataSetMessage_freeDecodedPayload(
    ffi.Pointer<UA_DataSetMessage> dsm,
  ) {
    return _UA_DataSetMessage_freeDecodedPayload(
      dsm,
    );
  }

  late final _UA_DataSetMessage_freeDecodedPayloadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_DataSetMessage>)>>(
      'UA_DataSetMessage_freeDecodedPayload');
  late final _UA_DataSetMessage_freeDecodedPayload =
      _UA_DataSetMessage_freeDecodedPayloadPtr.asFunction<
          void Function(ffi.Pointer<UA_DataSetMessage>)>();

  void UA_Server_ReaderGroup_clear(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> readerGroup,
  ) {
    return _UA_Server_ReaderGroup_clear(
      server,
      readerGroup,
    );
  }

  late final _UA_Server_ReaderGroup_clearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_ReaderGroup>)>>('UA_Server_ReaderGroup_clear');
  late final _UA_Server_ReaderGroup_clear =
      _UA_Server_ReaderGroup_clearPtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  int UA_ReaderGroup_setPubSubState_disable(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> rg,
  ) {
    return _UA_ReaderGroup_setPubSubState_disable(
      server,
      rg,
    );
  }

  late final _UA_ReaderGroup_setPubSubState_disablePtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_setPubSubState_disable');
  late final _UA_ReaderGroup_setPubSubState_disable =
      _UA_ReaderGroup_setPubSubState_disablePtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  int UA_ReaderGroup_setPubSubState_paused(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> rg,
  ) {
    return _UA_ReaderGroup_setPubSubState_paused(
      server,
      rg,
    );
  }

  late final _UA_ReaderGroup_setPubSubState_pausedPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_setPubSubState_paused');
  late final _UA_ReaderGroup_setPubSubState_paused =
      _UA_ReaderGroup_setPubSubState_pausedPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  int UA_ReaderGroup_setPubSubState_operational(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> rg,
  ) {
    return _UA_ReaderGroup_setPubSubState_operational(
      server,
      rg,
    );
  }

  late final _UA_ReaderGroup_setPubSubState_operationalPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_setPubSubState_operational');
  late final _UA_ReaderGroup_setPubSubState_operational =
      _UA_ReaderGroup_setPubSubState_operationalPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  int UA_ReaderGroup_setPubSubState_error(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_ReaderGroup> rg,
  ) {
    return _UA_ReaderGroup_setPubSubState_error(
      server,
      rg,
    );
  }

  late final _UA_ReaderGroup_setPubSubState_errorPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>>(
      'UA_ReaderGroup_setPubSubState_error');
  late final _UA_ReaderGroup_setPubSubState_error =
      _UA_ReaderGroup_setPubSubState_errorPtr.asFunction<
          int Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_ReaderGroup>)>();

  int UA_SecureChannelManager_open(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_OpenSecureChannelRequest> request,
    ffi.Pointer<UA_OpenSecureChannelResponse> response,
  ) {
    return _UA_SecureChannelManager_open(
      server,
      channel,
      request,
      response,
    );
  }

  late final _UA_SecureChannelManager_openPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_OpenSecureChannelRequest>,
                  ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_SecureChannelManager_open');
  late final _UA_SecureChannelManager_open =
      _UA_SecureChannelManager_openPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  int UA_SecureChannelManager_renew(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_SecureChannel> channel,
    ffi.Pointer<UA_OpenSecureChannelRequest> request,
    ffi.Pointer<UA_OpenSecureChannelResponse> response,
  ) {
    return _UA_SecureChannelManager_renew(
      server,
      channel,
      request,
      response,
    );
  }

  late final _UA_SecureChannelManager_renewPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_SecureChannel>,
                  ffi.Pointer<UA_OpenSecureChannelRequest>,
                  ffi.Pointer<UA_OpenSecureChannelResponse>)>>(
      'UA_SecureChannelManager_renew');
  late final _UA_SecureChannelManager_renew =
      _UA_SecureChannelManager_renewPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_SecureChannel>,
              ffi.Pointer<UA_OpenSecureChannelRequest>,
              ffi.Pointer<UA_OpenSecureChannelResponse>)>();

  int UA_Server_addMethodNodeEx_finish(
    ffi.Pointer<UA_Server> server,
    UA_NodeId nodeId,
    UA_MethodCallback method,
    int inputArgumentsSize,
    ffi.Pointer<UA_Argument> inputArguments,
    UA_NodeId inputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> inputArgumentsOutNewNodeId,
    int outputArgumentsSize,
    ffi.Pointer<UA_Argument> outputArguments,
    UA_NodeId outputArgumentsRequestedNewNodeId,
    ffi.Pointer<UA_NodeId> outputArgumentsOutNewNodeId,
  ) {
    return _UA_Server_addMethodNodeEx_finish(
      server,
      nodeId,
      method,
      inputArgumentsSize,
      inputArguments,
      inputArgumentsRequestedNewNodeId,
      inputArgumentsOutNewNodeId,
      outputArgumentsSize,
      outputArguments,
      outputArgumentsRequestedNewNodeId,
      outputArgumentsOutNewNodeId,
    );
  }

  late final _UA_Server_addMethodNodeEx_finishPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_MethodCallback,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              ffi.Size,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>)>>('UA_Server_addMethodNodeEx_finish');
  late final _UA_Server_addMethodNodeEx_finish =
      _UA_Server_addMethodNodeEx_finishPtr.asFunction<
          int Function(
              ffi.Pointer<UA_Server>,
              UA_NodeId,
              UA_MethodCallback,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>,
              int,
              ffi.Pointer<UA_Argument>,
              UA_NodeId,
              ffi.Pointer<UA_NodeId>)>();

  /// /
  void UA_Client_init(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_init(
      client,
    );
  }

  late final _UA_Client_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_init');
  late final _UA_Client_init =
      _UA_Client_initPtr.asFunction<void Function(ffi.Pointer<UA_Client>)>();

  void UA_ClientConfig_clear(
    ffi.Pointer<UA_ClientConfig> config,
  ) {
    return _UA_ClientConfig_clear(
      config,
    );
  }

  late final _UA_ClientConfig_clearPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_ClientConfig>)>>(
      'UA_ClientConfig_clear');
  late final _UA_ClientConfig_clear = _UA_ClientConfig_clearPtr.asFunction<
      void Function(ffi.Pointer<UA_ClientConfig>)>();

  void UA_Client_clear(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_clear(
      client,
    );
  }

  late final _UA_Client_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_clear');
  late final _UA_Client_clear =
      _UA_Client_clearPtr.asFunction<void Function(ffi.Pointer<UA_Client>)>();

  void UA_Client_backgroundConnectivity(
    ffi.Pointer<UA_Client> client,
  ) {
    return _UA_Client_backgroundConnectivity(
      client,
    );
  }

  late final _UA_Client_backgroundConnectivityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client>)>>(
          'UA_Client_backgroundConnectivity');
  late final _UA_Client_backgroundConnectivity =
      _UA_Client_backgroundConnectivityPtr.asFunction<
          void Function(ffi.Pointer<UA_Client>)>();

  int UA_Client_getEndpointsInternal(
    ffi.Pointer<UA_Client> client,
    UA_String endpointUrl,
    ffi.Pointer<ffi.Size> endpointDescriptionsSize,
    ffi.Pointer<ffi.Pointer<UA_EndpointDescription>> endpointDescriptions,
  ) {
    return _UA_Client_getEndpointsInternal(
      client,
      endpointUrl,
      endpointDescriptionsSize,
      endpointDescriptions,
    );
  }

  late final _UA_Client_getEndpointsInternalPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Client>,
                  UA_String,
                  ffi.Pointer<ffi.Size>,
                  ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>>(
      'UA_Client_getEndpointsInternal');
  late final _UA_Client_getEndpointsInternal =
      _UA_Client_getEndpointsInternalPtr.asFunction<
          int Function(ffi.Pointer<UA_Client>, UA_String, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<UA_EndpointDescription>>)>();

  void UA_Client_Subscription_deleteInternal(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_Client_Subscription> sub,
  ) {
    return _UA_Client_Subscription_deleteInternal(
      client,
      sub,
    );
  }

  late final _UA_Client_Subscription_deleteInternalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_Client>,
                  ffi.Pointer<UA_Client_Subscription>)>>(
      'UA_Client_Subscription_deleteInternal');
  late final _UA_Client_Subscription_deleteInternal =
      _UA_Client_Subscription_deleteInternalPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Client>, ffi.Pointer<UA_Client_Subscription>)>();

  void UA_Client_Subscription_processDelete(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_DeleteSubscriptionsRequest> request,
    ffi.Pointer<UA_DeleteSubscriptionsResponse> response,
  ) {
    return _UA_Client_Subscription_processDelete(
      client,
      request,
      response,
    );
  }

  late final _UA_Client_Subscription_processDeletePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<UA_DeleteSubscriptionsRequest>,
                  ffi.Pointer<UA_DeleteSubscriptionsResponse>)>>(
      'UA_Client_Subscription_processDelete');
  late final _UA_Client_Subscription_processDelete =
      _UA_Client_Subscription_processDeletePtr.asFunction<
          void Function(
              ffi.Pointer<UA_Client>,
              ffi.Pointer<UA_DeleteSubscriptionsRequest>,
              ffi.Pointer<UA_DeleteSubscriptionsResponse>)>();

  int UA_Client_Subscriptions_nextSequenceNumber(
    int sequenceNumber,
  ) {
    return _UA_Client_Subscriptions_nextSequenceNumber(
      sequenceNumber,
    );
  }

  late final _UA_Client_Subscriptions_nextSequenceNumberPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(UA_UInt32)>>(
          'UA_Client_Subscriptions_nextSequenceNumber');
  late final _UA_Client_Subscriptions_nextSequenceNumber =
      _UA_Client_Subscriptions_nextSequenceNumberPtr.asFunction<
          int Function(int)>();

  void UA_Client_Subscriptions_processPublishResponse(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<UA_PublishRequest> request,
    ffi.Pointer<UA_PublishResponse> response,
  ) {
    return _UA_Client_Subscriptions_processPublishResponse(
      client,
      request,
      response,
    );
  }

  late final _UA_Client_Subscriptions_processPublishResponsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Client>,
                  ffi.Pointer<UA_PublishRequest>,
                  ffi.Pointer<UA_PublishResponse>)>>(
      'UA_Client_Subscriptions_processPublishResponse');
  late final _UA_Client_Subscriptions_processPublishResponse =
      _UA_Client_Subscriptions_processPublishResponsePtr.asFunction<
          void Function(ffi.Pointer<UA_Client>, ffi.Pointer<UA_PublishRequest>,
              ffi.Pointer<UA_PublishResponse>)>();

  void UA_Subscription_addRetransmissionMessage(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Subscription> sub,
    ffi.Pointer<UA_NotificationMessageEntry> entry,
  ) {
    return _UA_Subscription_addRetransmissionMessage(
      server,
      sub,
      entry,
    );
  }

  late final _UA_Subscription_addRetransmissionMessagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>,
                  ffi.Pointer<UA_Subscription>,
                  ffi.Pointer<UA_NotificationMessageEntry>)>>(
      'UA_Subscription_addRetransmissionMessage');
  late final _UA_Subscription_addRetransmissionMessage =
      _UA_Subscription_addRetransmissionMessagePtr.asFunction<
          void Function(ffi.Pointer<UA_Server>, ffi.Pointer<UA_Subscription>,
              ffi.Pointer<UA_NotificationMessageEntry>)>();

  int UA_Subscription_nextSequenceNumber(
    int sequenceNumber,
  ) {
    return _UA_Subscription_nextSequenceNumber(
      sequenceNumber,
    );
  }

  late final _UA_Subscription_nextSequenceNumberPtr =
      _lookup<ffi.NativeFunction<UA_UInt32 Function(UA_UInt32)>>(
          'UA_Subscription_nextSequenceNumber');
  late final _UA_Subscription_nextSequenceNumber =
      _UA_Subscription_nextSequenceNumberPtr.asFunction<int Function(int)>();

  void UA_Subscription_isLate(
    ffi.Pointer<UA_Subscription> sub,
  ) {
    return _UA_Subscription_isLate(
      sub,
    );
  }

  late final _UA_Subscription_isLatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Subscription>)>>(
      'UA_Subscription_isLate');
  late final _UA_Subscription_isLate = _UA_Subscription_isLatePtr.asFunction<
      void Function(ffi.Pointer<UA_Subscription>)>();

  void UA_Notification_dequeueMon(
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_dequeueMon(
      n,
    );
  }

  late final _UA_Notification_dequeueMonPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Notification>)>>(
      'UA_Notification_dequeueMon');
  late final _UA_Notification_dequeueMon = _UA_Notification_dequeueMonPtr
      .asFunction<void Function(ffi.Pointer<UA_Notification>)>();

  void UA_Notification_enqueueSub(
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_enqueueSub(
      n,
    );
  }

  late final _UA_Notification_enqueueSubPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Notification>)>>(
      'UA_Notification_enqueueSub');
  late final _UA_Notification_enqueueSub = _UA_Notification_enqueueSubPtr
      .asFunction<void Function(ffi.Pointer<UA_Notification>)>();

  void UA_Notification_dequeueSub(
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_dequeueSub(
      n,
    );
  }

  late final _UA_Notification_dequeueSubPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Notification>)>>(
      'UA_Notification_dequeueSub');
  late final _UA_Notification_dequeueSub = _UA_Notification_dequeueSubPtr
      .asFunction<void Function(ffi.Pointer<UA_Notification>)>();

  void UA_Notification_enqueueMon(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Notification> n,
  ) {
    return _UA_Notification_enqueueMon(
      server,
      n,
    );
  }

  late final _UA_Notification_enqueueMonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server>,
              ffi.Pointer<UA_Notification>)>>('UA_Notification_enqueueMon');
  late final _UA_Notification_enqueueMon =
      _UA_Notification_enqueueMonPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_Notification>)>();

  void UA_Server_unregisterMonitoredItem(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_MonitoredItem> mon,
  ) {
    return _UA_Server_unregisterMonitoredItem(
      server,
      mon,
    );
  }

  late final _UA_Server_unregisterMonitoredItemPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>>(
      'UA_Server_unregisterMonitoredItem');
  late final _UA_Server_unregisterMonitoredItem =
      _UA_Server_unregisterMonitoredItemPtr.asFunction<
          void Function(
              ffi.Pointer<UA_Server>, ffi.Pointer<UA_MonitoredItem>)>();

  /// /
  ffi.Pointer<UA_Node> UA_NodeMap_newNode(
    ffi.Pointer<ffi.Void> context,
    int nodeClass,
  ) {
    return _UA_NodeMap_newNode(
      context,
      nodeClass,
    );
  }

  late final _UA_NodeMap_newNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('UA_NodeMap_newNode');
  late final _UA_NodeMap_newNode = _UA_NodeMap_newNodePtr.asFunction<
      ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void>, int)>();

  void UA_NodeMap_deleteNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_NodeMap_deleteNode(
      context,
      node,
    );
  }

  late final _UA_NodeMap_deleteNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_Node>)>>('UA_NodeMap_deleteNode');
  late final _UA_NodeMap_deleteNode = _UA_NodeMap_deleteNodePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_Node>)>();

  ffi.Pointer<UA_Node> UA_NodeMap_getNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_NodeId> nodeid,
  ) {
    return _UA_NodeMap_getNode(
      context,
      nodeid,
    );
  }

  late final _UA_NodeMap_getNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeMap_getNode');
  late final _UA_NodeMap_getNode = _UA_NodeMap_getNodePtr.asFunction<
      ffi.Pointer<UA_Node> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  void UA_NodeMap_releaseNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_NodeMap_releaseNode(
      context,
      node,
    );
  }

  late final _UA_NodeMap_releaseNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_Node>)>>('UA_NodeMap_releaseNode');
  late final _UA_NodeMap_releaseNode = _UA_NodeMap_releaseNodePtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_Node>)>();

  int UA_NodeMap_getNodeCopy(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_NodeId> nodeid,
    ffi.Pointer<ffi.Pointer<UA_Node>> outNode,
  ) {
    return _UA_NodeMap_getNodeCopy(
      context,
      nodeid,
      outNode,
    );
  }

  late final _UA_NodeMap_getNodeCopyPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>,
              ffi.Pointer<ffi.Pointer<UA_Node>>)>>('UA_NodeMap_getNodeCopy');
  late final _UA_NodeMap_getNodeCopy = _UA_NodeMap_getNodeCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>,
          ffi.Pointer<ffi.Pointer<UA_Node>>)>();

  int UA_NodeMap_removeNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_NodeId> nodeid,
  ) {
    return _UA_NodeMap_removeNode(
      context,
      nodeid,
    );
  }

  late final _UA_NodeMap_removeNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeMap_removeNode');
  late final _UA_NodeMap_removeNode = _UA_NodeMap_removeNodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_NodeId>)>();

  int UA_NodeMap_insertNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_Node> node,
    ffi.Pointer<UA_NodeId> addedNodeId,
  ) {
    return _UA_NodeMap_insertNode(
      context,
      node,
      addedNodeId,
    );
  }

  late final _UA_NodeMap_insertNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_Node>,
              ffi.Pointer<UA_NodeId>)>>('UA_NodeMap_insertNode');
  late final _UA_NodeMap_insertNode = _UA_NodeMap_insertNodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_Node>,
          ffi.Pointer<UA_NodeId>)>();

  int UA_NodeMap_replaceNode(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<UA_Node> node,
  ) {
    return _UA_NodeMap_replaceNode(
      context,
      node,
    );
  }

  late final _UA_NodeMap_replaceNodePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<UA_Node>)>>('UA_NodeMap_replaceNode');
  late final _UA_NodeMap_replaceNode = _UA_NodeMap_replaceNodePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<UA_Node>)>();

  ffi.Pointer<UA_NodeId> UA_NodeMap_getReferenceTypeId(
    ffi.Pointer<ffi.Void> nsCtx,
    int refTypeIndex,
  ) {
    return _UA_NodeMap_getReferenceTypeId(
      nsCtx,
      refTypeIndex,
    );
  }

  late final _UA_NodeMap_getReferenceTypeIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UA_NodeId> Function(ffi.Pointer<ffi.Void>,
              UA_Byte)>>('UA_NodeMap_getReferenceTypeId');
  late final _UA_NodeMap_getReferenceTypeId =
      _UA_NodeMap_getReferenceTypeIdPtr.asFunction<
          ffi.Pointer<UA_NodeId> Function(ffi.Pointer<ffi.Void>, int)>();

  void UA_NodeMap_iterate(
    ffi.Pointer<ffi.Void> context,
    UA_NodestoreVisitor visitor,
    ffi.Pointer<ffi.Void> visitorContext,
  ) {
    return _UA_NodeMap_iterate(
      context,
      visitor,
      visitorContext,
    );
  }

  late final _UA_NodeMap_iteratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, UA_NodestoreVisitor,
              ffi.Pointer<ffi.Void>)>>('UA_NodeMap_iterate');
  late final _UA_NodeMap_iterate = _UA_NodeMap_iteratePtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>, UA_NodestoreVisitor, ffi.Pointer<ffi.Void>)>();

  void UA_NodeMap_delete(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _UA_NodeMap_delete(
      context,
    );
  }

  late final _UA_NodeMap_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'UA_NodeMap_delete');
  late final _UA_NodeMap_delete =
      _UA_NodeMap_deletePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  UA_UInt32Range UA_UINT32RANGE(
    int min,
    int max,
  ) {
    return _UA_UINT32RANGE(
      min,
      max,
    );
  }

  late final _UA_UINT32RANGEPtr = _lookup<
          ffi.NativeFunction<UA_UInt32Range Function(UA_UInt32, UA_UInt32)>>(
      'UA_UINT32RANGE');
  late final _UA_UINT32RANGE =
      _UA_UINT32RANGEPtr.asFunction<UA_UInt32Range Function(int, int)>();

  UA_DurationRange UA_DURATIONRANGE(
    double min,
    double max,
  ) {
    return _UA_DURATIONRANGE(
      min,
      max,
    );
  }

  late final _UA_DURATIONRANGEPtr = _lookup<
          ffi
          .NativeFunction<UA_DurationRange Function(UA_Duration, UA_Duration)>>(
      'UA_DURATIONRANGE');
  late final _UA_DURATIONRANGE = _UA_DURATIONRANGEPtr.asFunction<
      UA_DurationRange Function(double, double)>();

  void UA_Log_Syslog_log(
    ffi.Pointer<ffi.Void> context,
    int level,
    int category,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _UA_Log_Syslog_log(
      context,
      level,
      category,
      msg,
      args,
    );
  }

  late final _UA_Log_Syslog_logPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('UA_Log_Syslog_log');
  late final _UA_Log_Syslog_log = _UA_Log_Syslog_logPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void UA_Log_Syslog_clear(
    ffi.Pointer<ffi.Void> logContext,
  ) {
    return _UA_Log_Syslog_clear(
      logContext,
    );
  }

  late final _UA_Log_Syslog_clearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'UA_Log_Syslog_clear');
  late final _UA_Log_Syslog_clear = _UA_Log_Syslog_clearPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  /// Open communication socket based on the connectionConfig. Protocol specific parameters are
  /// provided within the connectionConfig as KeyValuePair.
  /// Currently supported options: "ttl" , "loopback", "reuse"
  ///
  /// @return ref to created channel, NULL on error
  ffi.Pointer<UA_PubSubChannel> UA_PubSubChannelUDPMC_open(
    ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig,
  ) {
    return _UA_PubSubChannelUDPMC_open(
      connectionConfig,
    );
  }

  late final _UA_PubSubChannelUDPMC_openPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<UA_PubSubChannel> Function(
                  ffi.Pointer<UA_PubSubConnectionConfig>)>>(
      'UA_PubSubChannelUDPMC_open');
  late final _UA_PubSubChannelUDPMC_open =
      _UA_PubSubChannelUDPMC_openPtr.asFunction<
          ffi.Pointer<UA_PubSubChannel> Function(
              ffi.Pointer<UA_PubSubConnectionConfig>)>();

  /// Subscribe to a given address.
  ///
  /// @return UA_STATUSCODE_GOOD on success
  int UA_PubSubChannelUDPMC_regist(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<UA_ExtensionObject> transportSettings,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<UA_ByteString> encodedBuffer,
                    ffi.Pointer<UA_ByteString> topic)>>
        notUsedHere,
  ) {
    return _UA_PubSubChannelUDPMC_regist(
      channel,
      transportSettings,
      notUsedHere,
    );
  }

  late final _UA_PubSubChannelUDPMC_registPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubChannel>,
                  ffi.Pointer<UA_ExtensionObject>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<UA_ByteString> encodedBuffer,
                              ffi.Pointer<UA_ByteString> topic)>>)>>(
      'UA_PubSubChannelUDPMC_regist');
  late final _UA_PubSubChannelUDPMC_regist =
      _UA_PubSubChannelUDPMC_registPtr.asFunction<
          int Function(
              ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<UA_ByteString> encodedBuffer,
                          ffi.Pointer<UA_ByteString> topic)>>)>();

  /// Remove current subscription.
  ///
  /// @return UA_STATUSCODE_GOOD on success
  int UA_PubSubChannelUDPMC_unregist(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<UA_ExtensionObject> transportSettings,
  ) {
    return _UA_PubSubChannelUDPMC_unregist(
      channel,
      transportSettings,
    );
  }

  late final _UA_PubSubChannelUDPMC_unregistPtr = _lookup<
          ffi.NativeFunction<
              UA_StatusCode Function(ffi.Pointer<UA_PubSubChannel>,
                  ffi.Pointer<UA_ExtensionObject>)>>(
      'UA_PubSubChannelUDPMC_unregist');
  late final _UA_PubSubChannelUDPMC_unregist =
      _UA_PubSubChannelUDPMC_unregistPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>)>();

  /// Send messages to the connection defined address
  ///
  /// @return UA_STATUSCODE_GOOD if success
  int UA_PubSubChannelUDPMC_send(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<UA_ExtensionObject> transportSettings,
    ffi.Pointer<UA_ByteString> buf,
  ) {
    return _UA_PubSubChannelUDPMC_send(
      channel,
      transportSettings,
      buf,
    );
  }

  late final _UA_PubSubChannelUDPMC_sendPtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>,
              ffi.Pointer<UA_ByteString>)>>('UA_PubSubChannelUDPMC_send');
  late final _UA_PubSubChannelUDPMC_send =
      _UA_PubSubChannelUDPMC_sendPtr.asFunction<
          int Function(ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>, ffi.Pointer<UA_ByteString>)>();

  /// Receive messages. The regist function should be called before.
  ///
  /// @param timeout in usec | on windows platforms are only multiples of 1000usec possible
  /// @return
  int UA_PubSubChannelUDPMC_receive(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<UA_ExtensionObject> transportSettings,
    UA_PubSubReceiveCallback receiveCallback,
    ffi.Pointer<ffi.Void> receiveCallbackContext,
    int timeout,
  ) {
    return _UA_PubSubChannelUDPMC_receive(
      channel,
      transportSettings,
      receiveCallback,
      receiveCallbackContext,
      timeout,
    );
  }

  late final _UA_PubSubChannelUDPMC_receivePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>,
              UA_PubSubReceiveCallback,
              ffi.Pointer<ffi.Void>,
              UA_UInt32)>>('UA_PubSubChannelUDPMC_receive');
  late final _UA_PubSubChannelUDPMC_receive =
      _UA_PubSubChannelUDPMC_receivePtr.asFunction<
          int Function(
              ffi.Pointer<UA_PubSubChannel>,
              ffi.Pointer<UA_ExtensionObject>,
              UA_PubSubReceiveCallback,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Close channel and free the channel data.
  ///
  /// @return UA_STATUSCODE_GOOD if success
  int UA_PubSubChannelUDPMC_close(
    ffi.Pointer<UA_PubSubChannel> channel,
  ) {
    return _UA_PubSubChannelUDPMC_close(
      channel,
    );
  }

  late final _UA_PubSubChannelUDPMC_closePtr = _lookup<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel>)>>('UA_PubSubChannelUDPMC_close');
  late final _UA_PubSubChannelUDPMC_close = _UA_PubSubChannelUDPMC_closePtr
      .asFunction<int Function(ffi.Pointer<UA_PubSubChannel>)>();
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class sigval extends ffi.Union {
  @ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

final class UA_Lock extends ffi.Struct {
  external pthread_mutex_t mutex;

  external pthread_mutexattr_t mutexAttr;

  @ffi.Int()
  external int mutexCounter;
}

/// Common Definitions
/// ==================
///
/// Common definitions for Client, Server and PubSub.
///
/// .. _attribute-id:
///
/// Attribute Id
/// ------------
/// Every node in an OPC UA information model contains attributes depending on
/// the node type. Possible attributes are as follows:
abstract class UA_AttributeId {
  static const int UA_ATTRIBUTEID_NODEID = 1;
  static const int UA_ATTRIBUTEID_NODECLASS = 2;
  static const int UA_ATTRIBUTEID_BROWSENAME = 3;
  static const int UA_ATTRIBUTEID_DISPLAYNAME = 4;
  static const int UA_ATTRIBUTEID_DESCRIPTION = 5;
  static const int UA_ATTRIBUTEID_WRITEMASK = 6;
  static const int UA_ATTRIBUTEID_USERWRITEMASK = 7;
  static const int UA_ATTRIBUTEID_ISABSTRACT = 8;
  static const int UA_ATTRIBUTEID_SYMMETRIC = 9;
  static const int UA_ATTRIBUTEID_INVERSENAME = 10;
  static const int UA_ATTRIBUTEID_CONTAINSNOLOOPS = 11;
  static const int UA_ATTRIBUTEID_EVENTNOTIFIER = 12;
  static const int UA_ATTRIBUTEID_VALUE = 13;
  static const int UA_ATTRIBUTEID_DATATYPE = 14;
  static const int UA_ATTRIBUTEID_VALUERANK = 15;
  static const int UA_ATTRIBUTEID_ARRAYDIMENSIONS = 16;
  static const int UA_ATTRIBUTEID_ACCESSLEVEL = 17;
  static const int UA_ATTRIBUTEID_USERACCESSLEVEL = 18;
  static const int UA_ATTRIBUTEID_MINIMUMSAMPLINGINTERVAL = 19;
  static const int UA_ATTRIBUTEID_HISTORIZING = 20;
  static const int UA_ATTRIBUTEID_EXECUTABLE = 21;
  static const int UA_ATTRIBUTEID_USEREXECUTABLE = 22;
  static const int UA_ATTRIBUTEID_DATATYPEDEFINITION = 23;
  static const int UA_ATTRIBUTEID_ROLEPERMISSIONS = 24;
  static const int UA_ATTRIBUTEID_USERROLEPERMISSIONS = 25;
  static const int UA_ATTRIBUTEID_ACCESSRESTRICTIONS = 26;
  static const int UA_ATTRIBUTEID_ACCESSLEVELEX = 27;
}

/// .. _rule-handling:
///
/// Rule Handling
/// -------------
///
/// The RuleHanding settings define how error cases that result from rules in the
/// OPC UA specification shall be handled. The rule handling can be softened,
/// e.g. to workaround misbehaving implementations or to mitigate the impact of
/// additional rules that are introduced in later versions of the OPC UA
/// specification.
abstract class UA_RuleHandling {
  static const int UA_RULEHANDLING_DEFAULT = 0;
  static const int UA_RULEHANDLING_ABORT = 1;
  static const int UA_RULEHANDLING_WARN = 2;
  static const int UA_RULEHANDLING_ACCEPT = 3;
}

/// Order
/// -----
///
/// The Order enum is used to establish an absolute ordering between elements.
abstract class UA_Order {
  static const int UA_ORDER_LESS = -1;
  static const int UA_ORDER_EQ = 0;
  static const int UA_ORDER_MORE = 1;
}

/// Connection State
/// ----------------
abstract class UA_SecureChannelState {
  static const int UA_SECURECHANNELSTATE_FRESH = 0;
  static const int UA_SECURECHANNELSTATE_HEL_SENT = 1;
  static const int UA_SECURECHANNELSTATE_HEL_RECEIVED = 2;
  static const int UA_SECURECHANNELSTATE_ACK_SENT = 3;
  static const int UA_SECURECHANNELSTATE_ACK_RECEIVED = 4;
  static const int UA_SECURECHANNELSTATE_OPN_SENT = 5;
  static const int UA_SECURECHANNELSTATE_OPEN = 6;
  static const int UA_SECURECHANNELSTATE_CLOSING = 7;
  static const int UA_SECURECHANNELSTATE_CLOSED = 8;
}

abstract class UA_SessionState {
  static const int UA_SESSIONSTATE_CLOSED = 0;
  static const int UA_SESSIONSTATE_CREATE_REQUESTED = 1;
  static const int UA_SESSIONSTATE_CREATED = 2;
  static const int UA_SESSIONSTATE_ACTIVATE_REQUESTED = 3;
  static const int UA_SESSIONSTATE_ACTIVATED = 4;
  static const int UA_SESSIONSTATE_CLOSING = 5;
}

/// Statistic counters
/// ------------------
///
/// The stack manages statistic counters for the following layers:
///
/// - Network
/// - Secure channel
/// - Session
///
/// The session layer counters are matching the counters of the
/// ServerDiagnosticsSummaryDataType that are defined in the OPC UA Part 5
/// specification. Counters of the other layers are not specified by OPC UA but
/// are harmonized with the session layer counters if possible.
final class UA_NetworkStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentConnectionCount;

  @ffi.Size()
  external int cumulatedConnectionCount;

  @ffi.Size()
  external int rejectedConnectionCount;

  @ffi.Size()
  external int connectionTimeoutCount;

  @ffi.Size()
  external int connectionAbortCount;
}

final class UA_SecureChannelStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentChannelCount;

  @ffi.Size()
  external int cumulatedChannelCount;

  @ffi.Size()
  external int rejectedChannelCount;

  @ffi.Size()
  external int channelTimeoutCount;

  @ffi.Size()
  external int channelAbortCount;

  @ffi.Size()
  external int channelPurgeCount;
}

final class UA_SessionStatistics extends ffi.Struct {
  @ffi.Size()
  external int currentSessionCount;

  @ffi.Size()
  external int cumulatedSessionCount;

  @ffi.Size()
  external int securityRejectedSessionCount;

  @ffi.Size()
  external int rejectedSessionCount;

  @ffi.Size()
  external int sessionTimeoutCount;

  @ffi.Size()
  external int sessionAbortCount;
}

/// .. _statuscode:
///
/// StatusCode
/// ^^^^^^^^^^
/// A numeric identifier for an error or condition that is associated with a
/// value or an operation. See the section :ref:`statuscodes` for the meaning of
/// a specific code.
///
/// Each StatusCode has one of three "severity" bit-flags:
/// Good, Uncertain, Bad. An additional reason is indicated by the SubCode
/// bitfield.
///
/// - A StatusCode with severity Good means that the value is of good quality.
/// - A StatusCode with severity Uncertain means that the quality of the value is
/// uncertain for reasons indicated by the SubCode.
/// - A StatusCode with severity Bad means that the value is not usable for
/// reasons indicated by the SubCode.
typedef UA_StatusCode = ffi.Uint32;
typedef DartUA_StatusCode = int;

/// String
/// ^^^^^^
/// A sequence of Unicode characters. Strings are just an array of UA_Byte.
final class UA_String extends ffi.Struct {
  @ffi.Size()
  external int length;

  external ffi.Pointer<UA_Byte> data;
}

/// Byte
/// ^^^^
/// An integer value between 0 and 255.
typedef UA_Byte = ffi.Uint8;
typedef DartUA_Byte = int;

/// .. _datetime:
///
/// DateTime
/// ^^^^^^^^
/// An instance in time. A DateTime value is encoded as a 64-bit signed integer
/// which represents the number of 100 nanosecond intervals since January 1, 1601
/// (UTC).
///
/// The methods providing an interface to the system clock are architecture-
/// specific. Usually, they provide a UTC clock that includes leap seconds. The
/// OPC UA standard allows the use of International Atomic Time (TAI) for the
/// DateTime instead. But this is still unusual and not implemented for most
/// SDKs. Currently (2019), UTC and TAI are 37 seconds apart due to leap
/// seconds.
typedef UA_DateTime = ffi.Int64;
typedef DartUA_DateTime = int;

/// Int64
/// ^^^^^
/// An integer value between -9 223 372 036 854 775 808 and
/// 9 223 372 036 854 775 807.
typedef UA_Int64 = ffi.Int64;
typedef DartUA_Int64 = int;

final class UA_DateTimeStruct extends ffi.Struct {
  @UA_UInt16()
  external int nanoSec;

  @UA_UInt16()
  external int microSec;

  @UA_UInt16()
  external int milliSec;

  @UA_UInt16()
  external int sec;

  @UA_UInt16()
  external int min;

  @UA_UInt16()
  external int hour;

  @UA_UInt16()
  external int day;

  @UA_UInt16()
  external int month;

  @UA_Int16()
  external int year;
}

/// UInt16
/// ^^^^^^
/// An integer value between 0 and 65 535.
typedef UA_UInt16 = ffi.Uint16;
typedef DartUA_UInt16 = int;

/// Int16
/// ^^^^^
/// An integer value between -32 768 and 32 767.
typedef UA_Int16 = ffi.Int16;
typedef DartUA_Int16 = int;

/// Guid
/// ^^^^
/// A 16 byte value that can be used as a globally unique identifier.
final class UA_Guid extends ffi.Struct {
  @UA_UInt32()
  external int data1;

  @UA_UInt16()
  external int data2;

  @UA_UInt16()
  external int data3;

  @ffi.Array.multi([8])
  external ffi.Array<UA_Byte> data4;
}

/// UInt32
/// ^^^^^^
/// An integer value between 0 and 4 294 967 295.
typedef UA_UInt32 = ffi.Uint32;
typedef DartUA_UInt32 = int;

/// ByteString
/// ^^^^^^^^^^
/// A sequence of octets.
typedef UA_ByteString = UA_String;

/// .. _nodeid:
///
/// NodeId
/// ^^^^^^
/// An identifier for a node in the address space of an OPC UA Server.
abstract class UA_NodeIdType {
  static const int UA_NODEIDTYPE_NUMERIC = 0;
  static const int UA_NODEIDTYPE_STRING = 3;
  static const int UA_NODEIDTYPE_GUID = 4;
  static const int UA_NODEIDTYPE_BYTESTRING = 5;
}

final class UA_NodeId extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  @ffi.Int32()
  external int identifierType;

  external UnnamedUnion1 identifier;
}

final class UnnamedUnion1 extends ffi.Union {
  @UA_UInt32()
  external int numeric;

  external UA_String string;

  external UA_Guid guid;

  external UA_ByteString byteString;
}

/// ExpandedNodeId
/// ^^^^^^^^^^^^^^
/// A NodeId that allows the namespace URI to be specified instead of an index.
final class UA_ExpandedNodeId extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String namespaceUri;

  @UA_UInt32()
  external int serverIndex;
}

/// .. _qualifiedname:
///
/// QualifiedName
/// ^^^^^^^^^^^^^
/// A name qualified by a namespace.
final class UA_QualifiedName extends ffi.Struct {
  @UA_UInt16()
  external int namespaceIndex;

  external UA_String name;
}

/// LocalizedText
/// ^^^^^^^^^^^^^
/// Human readable text with an optional locale identifier.
final class UA_LocalizedText extends ffi.Struct {
  external UA_String locale;

  external UA_String text;
}

/// .. _numericrange:
///
/// NumericRange
/// ^^^^^^^^^^^^
///
/// NumericRanges are used to indicate subsets of a (multidimensional) array.
/// They no official data type in the OPC UA standard and are transmitted only
/// with a string encoding, such as "1:2,0:3,5". The colon separates min/max
/// index and the comma separates dimensions. A single value indicates a range
/// with a single element (min==max).
final class UA_NumericRangeDimension extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

final class UA_NumericRange extends ffi.Struct {
  @ffi.Size()
  external int dimensionsSize;

  external ffi.Pointer<UA_NumericRangeDimension> dimensions;
}

/// .. _variant:
///
/// Variant
/// ^^^^^^^
///
/// Variants may contain values of any type together with a description of the
/// content. See the section on :ref:`generic-types` on how types are described.
/// The standard mandates that variants contain built-in data types only. If the
/// value is not of a builtin type, it is wrapped into an :ref:`extensionobject`.
/// open62541 hides this wrapping transparently in the encoding layer. If the
/// data type is unknown to the receiver, the variant contains the original
/// ExtensionObject in binary or XML encoding.
///
/// Variants may contain a scalar value or an array. For details on the handling
/// of arrays, see the section on :ref:`array-handling`. Array variants can have
/// an additional dimensionality (matrix, 3-tensor, ...) defined in an array of
/// dimension lengths. The actual values are kept in an array of dimensions one.
/// For users who work with higher-dimensions arrays directly, keep in mind that
/// dimensions of higher rank are serialized first (the highest rank dimension
/// has stride 1 and elements follow each other directly). Usually it is simplest
/// to interact with higher-dimensional arrays via ``UA_NumericRange``
/// descriptions (see :ref:`array-handling`).
///
/// To differentiate between scalar / array variants, the following definition is
/// used. ``UA_Variant_isScalar`` provides simplified access to these checks.
///
/// - ``arrayLength == 0 && data == NULL``: undefined array of length -1
/// - ``arrayLength == 0 && data == UA_EMPTY_ARRAY_SENTINEL``: array of length 0
/// - ``arrayLength == 0 && data > UA_EMPTY_ARRAY_SENTINEL``: scalar value
/// - ``arrayLength > 0``: array of the given length
///
/// Variants can also be *empty*. Then, the pointer to the type description is
/// ``NULL``.
final class UA_DataType extends ffi.Opaque {}

abstract class UA_VariantStorageType {
  static const int UA_VARIANT_DATA = 0;
  static const int UA_VARIANT_DATA_NODELETE = 1;
}

final class UA_Variant extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  @ffi.Int32()
  external int storageType;

  @ffi.Size()
  external int arrayLength;

  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;
}

/// .. _extensionobject:
///
/// ExtensionObject
/// ^^^^^^^^^^^^^^^
///
/// ExtensionObjects may contain scalars of any data type. Even those that are
/// unknown to the receiver. See the section on :ref:`generic-types` on how types
/// are described. If the received data type is unknown, the encoded string and
/// target NodeId is stored instead of the decoded value.
abstract class UA_ExtensionObjectEncoding {
  static const int UA_EXTENSIONOBJECT_ENCODED_NOBODY = 0;
  static const int UA_EXTENSIONOBJECT_ENCODED_BYTESTRING = 1;
  static const int UA_EXTENSIONOBJECT_ENCODED_XML = 2;
  static const int UA_EXTENSIONOBJECT_DECODED = 3;
  static const int UA_EXTENSIONOBJECT_DECODED_NODELETE = 4;
}

final class UA_ExtensionObject extends ffi.Struct {
  @ffi.Int32()
  external int encoding;

  external UnnamedUnion2 content;
}

final class UnnamedUnion2 extends ffi.Union {
  external UnnamedStruct2 encoded;

  external UnnamedStruct3 decoded;
}

final class UnnamedStruct2 extends ffi.Struct {
  external UA_NodeId typeId;

  external UA_ByteString body;
}

final class UnnamedStruct3 extends ffi.Struct {
  external ffi.Pointer<UA_DataType> type;

  external ffi.Pointer<ffi.Void> data;
}

/// .. _datavalue:
///
/// DataValue
/// ^^^^^^^^^
/// A data value with an associated status code and timestamps.
final class UA_DataValue extends ffi.Opaque {}

/// DiagnosticInfo
/// ^^^^^^^^^^^^^^
/// A structure that contains detailed error and diagnostic information
/// associated with a StatusCode.
final class UA_DiagnosticInfo extends ffi.Opaque {}

/// .. _generic-types:
///
/// Generic Type Handling
/// ---------------------
///
/// All information about a (builtin/structured) data type is stored in a
/// ``UA_DataType``. The array ``UA_TYPES`` contains the description of all
/// standard-defined types. This type description is used for the following
/// generic operations that work on all types:
///
/// - ``void T_init(T *ptr)``: Initialize the data type. This is synonymous with
/// zeroing out the memory, i.e. ``memset(ptr, 0, sizeof(T))``.
/// - ``T* T_new()``: Allocate and return the memory for the data type. The
/// value is already initialized.
/// - ``UA_StatusCode T_copy(const T *src, T *dst)``: Copy the content of the
/// data type. Returns ``UA_STATUSCODE_GOOD`` or
/// ``UA_STATUSCODE_BADOUTOFMEMORY``.
/// - ``void T_clear(T *ptr)``: Delete the dynamically allocated content
/// of the data type and perform a ``T_init`` to reset the type.
/// - ``void T_delete(T *ptr)``: Delete the content of the data type and the
/// memory for the data type itself.
///
/// Specializations, such as ``UA_Int32_new()`` are derived from the generic
/// type operations as static inline functions.
final class UA_DataTypeMember extends ffi.Opaque {}

abstract class UA_DataTypeKind {
  static const int UA_DATATYPEKIND_BOOLEAN = 0;
  static const int UA_DATATYPEKIND_SBYTE = 1;
  static const int UA_DATATYPEKIND_BYTE = 2;
  static const int UA_DATATYPEKIND_INT16 = 3;
  static const int UA_DATATYPEKIND_UINT16 = 4;
  static const int UA_DATATYPEKIND_INT32 = 5;
  static const int UA_DATATYPEKIND_UINT32 = 6;
  static const int UA_DATATYPEKIND_INT64 = 7;
  static const int UA_DATATYPEKIND_UINT64 = 8;
  static const int UA_DATATYPEKIND_FLOAT = 9;
  static const int UA_DATATYPEKIND_DOUBLE = 10;
  static const int UA_DATATYPEKIND_STRING = 11;
  static const int UA_DATATYPEKIND_DATETIME = 12;
  static const int UA_DATATYPEKIND_GUID = 13;
  static const int UA_DATATYPEKIND_BYTESTRING = 14;
  static const int UA_DATATYPEKIND_XMLELEMENT = 15;
  static const int UA_DATATYPEKIND_NODEID = 16;
  static const int UA_DATATYPEKIND_EXPANDEDNODEID = 17;
  static const int UA_DATATYPEKIND_STATUSCODE = 18;
  static const int UA_DATATYPEKIND_QUALIFIEDNAME = 19;
  static const int UA_DATATYPEKIND_LOCALIZEDTEXT = 20;
  static const int UA_DATATYPEKIND_EXTENSIONOBJECT = 21;
  static const int UA_DATATYPEKIND_DATAVALUE = 22;
  static const int UA_DATATYPEKIND_VARIANT = 23;
  static const int UA_DATATYPEKIND_DIAGNOSTICINFO = 24;
  static const int UA_DATATYPEKIND_DECIMAL = 25;
  static const int UA_DATATYPEKIND_ENUM = 26;
  static const int UA_DATATYPEKIND_STRUCTURE = 27;
  static const int UA_DATATYPEKIND_OPTSTRUCT = 28;
  static const int UA_DATATYPEKIND_UNION = 29;
  static const int UA_DATATYPEKIND_BITFIELDCLUSTER = 30;
}

final class UA_DataTypeArray extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> next;

  @ffi.Size()
  external int typesSize;

  external ffi.Pointer<UA_DataType> types;
}

final class UA_DecodeBinaryOptions extends ffi.Struct {
  external ffi.Pointer<UA_DataTypeArray> customTypes;
}

/// UInt64
/// ^^^^^^
/// An integer value between 0 and 18 446 744 073 709 551 615.
typedef UA_UInt64 = ffi.Uint64;
typedef DartUA_UInt64 = int;

/// KeyValuePair
/// ^^^^^^^^^^^^
final class UA_KeyValuePair extends ffi.Struct {
  external UA_QualifiedName key;

  external UA_Variant value;
}

/// SimpleTypeDescription
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_SimpleTypeDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_NodeId baseDataType;

  @UA_Byte()
  external int builtInType;
}

/// PubSubState
/// ^^^^^^^^^^^
abstract class UA_PubSubState {
  static const int UA_PUBSUBSTATE_DISABLED = 0;
  static const int UA_PUBSUBSTATE_PAUSED = 1;
  static const int UA_PUBSUBSTATE_OPERATIONAL = 2;
  static const int UA_PUBSUBSTATE_ERROR = 3;
  static const int __UA_PUBSUBSTATE_FORCE32BIT = 2147483647;
}

/// ConfigurationVersionDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ConfigurationVersionDataType extends ffi.Struct {
  @UA_UInt32()
  external int majorVersion;

  @UA_UInt32()
  external int minorVersion;
}

/// PublishedVariableDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedVariableDataType extends ffi.Struct {
  external UA_NodeId publishedVariable;

  @UA_UInt32()
  external int attributeId;

  @UA_Double()
  external double samplingIntervalHint;

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;

  external UA_String indexRange;

  external UA_Variant substituteValue;

  @ffi.Size()
  external int metaDataPropertiesSize;

  external ffi.Pointer<UA_QualifiedName> metaDataProperties;
}

/// Double
/// ^^^^^^
/// An IEEE double precision (64 bit) floating point value.
typedef UA_Double = ffi.Double;
typedef DartUA_Double = double;

/// PublishedDataItemsDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedDataItemsDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSize;

  external ffi.Pointer<UA_PublishedVariableDataType> publishedData;
}

/// DataSetWriterDataType
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_DataSetWriterDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String dataSetName;

  @ffi.Size()
  external int dataSetWriterPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetWriterProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;
}

/// DataSetFieldContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_DataSetFieldContentMask = UA_UInt32;

/// NetworkAddressUrlDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_NetworkAddressUrlDataType extends ffi.Struct {
  external UA_String networkInterface;

  external UA_String url;
}

/// OverrideValueHandling
/// ^^^^^^^^^^^^^^^^^^^^^
abstract class UA_OverrideValueHandling {
  static const int UA_OVERRIDEVALUEHANDLING_DISABLED = 0;
  static const int UA_OVERRIDEVALUEHANDLING_LASTUSABLEVALUE = 1;
  static const int UA_OVERRIDEVALUEHANDLING_OVERRIDEVALUE = 2;
  static const int __UA_OVERRIDEVALUEHANDLING_FORCE32BIT = 2147483647;
}

/// DataSetOrderingType
/// ^^^^^^^^^^^^^^^^^^^
abstract class UA_DataSetOrderingType {
  static const int UA_DATASETORDERINGTYPE_UNDEFINED = 0;
  static const int UA_DATASETORDERINGTYPE_ASCENDINGWRITERID = 1;
  static const int UA_DATASETORDERINGTYPE_ASCENDINGWRITERIDSINGLE = 2;
  static const int __UA_DATASETORDERINGTYPE_FORCE32BIT = 2147483647;
}

/// UadpWriterGroupMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpWriterGroupMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @ffi.Int32()
  external int dataSetOrdering;

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_Double()
  external double samplingOffset;

  @ffi.Size()
  external int publishingOffsetSize;

  external ffi.Pointer<UA_Double> publishingOffset;
}

/// UadpNetworkMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_UadpNetworkMessageContentMask = UA_UInt32;

/// UadpDataSetWriterMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpDataSetWriterMessageDataType extends ffi.Struct {
  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_UInt16()
  external int configuredSize;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;
}

/// UadpDataSetMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_UadpDataSetMessageContentMask = UA_UInt32;

/// UadpDataSetReaderMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UadpDataSetReaderMessageDataType extends ffi.Struct {
  @UA_UInt32()
  external int groupVersion;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int dataSetOffset;

  external UA_Guid dataSetClassId;

  @UA_UadpNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_UadpDataSetMessageContentMask()
  external int dataSetMessageContentMask;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double receiveOffset;

  @UA_Double()
  external double processingOffset;
}

/// JsonWriterGroupMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonWriterGroupMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;
}

/// JsonNetworkMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_JsonNetworkMessageContentMask = UA_UInt32;

/// JsonDataSetWriterMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonDataSetWriterMessageDataType extends ffi.Struct {
  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

/// JsonDataSetMessageContentMask
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
typedef UA_JsonDataSetMessageContentMask = UA_UInt32;

/// JsonDataSetReaderMessageDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_JsonDataSetReaderMessageDataType extends ffi.Struct {
  @UA_JsonNetworkMessageContentMask()
  external int networkMessageContentMask;

  @UA_JsonDataSetMessageContentMask()
  external int dataSetMessageContentMask;
}

/// DatagramConnectionTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DatagramConnectionTransportDataType extends ffi.Struct {
  external UA_ExtensionObject discoveryAddress;
}

/// DatagramWriterGroupTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DatagramWriterGroupTransportDataType extends ffi.Struct {
  @UA_Byte()
  external int messageRepeatCount;

  @UA_Double()
  external double messageRepeatDelay;
}

/// BrokerConnectionTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerConnectionTransportDataType extends ffi.Struct {
  external UA_String resourceUri;

  external UA_String authenticationProfileUri;
}

/// BrokerTransportQualityOfService
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
abstract class UA_BrokerTransportQualityOfService {
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_NOTSPECIFIED = 0;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_BESTEFFORT = 1;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_ATLEASTONCE = 2;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_ATMOSTONCE = 3;
  static const int UA_BROKERTRANSPORTQUALITYOFSERVICE_EXACTLYONCE = 4;
  static const int __UA_BROKERTRANSPORTQUALITYOFSERVICE_FORCE32BIT = 2147483647;
}

/// BrokerWriterGroupTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerWriterGroupTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;
}

/// BrokerDataSetWriterTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerDataSetWriterTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;

  external UA_String metaDataQueueName;

  @UA_Double()
  external double metaDataUpdateTime;
}

/// BrokerDataSetReaderTransportDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_BrokerDataSetReaderTransportDataType extends ffi.Struct {
  external UA_String queueName;

  external UA_String resourceUri;

  external UA_String authenticationProfileUri;

  @ffi.Int32()
  external int requestedDeliveryGuarantee;

  external UA_String metaDataQueueName;
}

/// NodeClass
/// ^^^^^^^^^
abstract class UA_NodeClass {
  static const int UA_NODECLASS_UNSPECIFIED = 0;
  static const int UA_NODECLASS_OBJECT = 1;
  static const int UA_NODECLASS_VARIABLE = 2;
  static const int UA_NODECLASS_METHOD = 4;
  static const int UA_NODECLASS_OBJECTTYPE = 8;
  static const int UA_NODECLASS_VARIABLETYPE = 16;
  static const int UA_NODECLASS_REFERENCETYPE = 32;
  static const int UA_NODECLASS_DATATYPE = 64;
  static const int UA_NODECLASS_VIEW = 128;
  static const int __UA_NODECLASS_FORCE32BIT = 2147483647;
}

/// RolePermissionType
/// ^^^^^^^^^^^^^^^^^^
final class UA_RolePermissionType extends ffi.Struct {
  external UA_NodeId roleId;

  @UA_PermissionType()
  external int permissions;
}

/// PermissionType
/// ^^^^^^^^^^^^^^
typedef UA_PermissionType = UA_UInt32;

/// StructureType
/// ^^^^^^^^^^^^^
abstract class UA_StructureType {
  static const int UA_STRUCTURETYPE_STRUCTURE = 0;
  static const int UA_STRUCTURETYPE_STRUCTUREWITHOPTIONALFIELDS = 1;
  static const int UA_STRUCTURETYPE_UNION = 2;
  static const int __UA_STRUCTURETYPE_FORCE32BIT = 2147483647;
}

/// StructureField
/// ^^^^^^^^^^^^^^
final class UA_StructureField extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  @ffi.Bool()
  external bool isOptional;
}

/// Int32
/// ^^^^^
/// An integer value between -2 147 483 648 and 2 147 483 647.
typedef UA_Int32 = ffi.Int32;
typedef DartUA_Int32 = int;

/// StructureDefinition
/// ^^^^^^^^^^^^^^^^^^^
final class UA_StructureDefinition extends ffi.Struct {
  external UA_NodeId defaultEncodingId;

  external UA_NodeId baseDataType;

  @ffi.Int32()
  external int structureType;

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_StructureField> fields;
}

/// Argument
/// ^^^^^^^^
final class UA_Argument extends ffi.Struct {
  external UA_String name;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  external UA_LocalizedText description;
}

/// EnumValueType
/// ^^^^^^^^^^^^^
final class UA_EnumValueType extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

/// EnumField
/// ^^^^^^^^^
final class UA_EnumField extends ffi.Struct {
  @UA_Int64()
  external int value;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  external UA_String name;
}

/// TimeZoneDataType
/// ^^^^^^^^^^^^^^^^
final class UA_TimeZoneDataType extends ffi.Struct {
  @UA_Int16()
  external int offset;

  @ffi.Bool()
  external bool daylightSavingInOffset;
}

/// ApplicationType
/// ^^^^^^^^^^^^^^^
abstract class UA_ApplicationType {
  static const int UA_APPLICATIONTYPE_SERVER = 0;
  static const int UA_APPLICATIONTYPE_CLIENT = 1;
  static const int UA_APPLICATIONTYPE_CLIENTANDSERVER = 2;
  static const int UA_APPLICATIONTYPE_DISCOVERYSERVER = 3;
  static const int __UA_APPLICATIONTYPE_FORCE32BIT = 2147483647;
}

/// ApplicationDescription
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_ApplicationDescription extends ffi.Struct {
  external UA_String applicationUri;

  external UA_String productUri;

  external UA_LocalizedText applicationName;

  @ffi.Int32()
  external int applicationType;

  external UA_String gatewayServerUri;

  external UA_String discoveryProfileUri;

  @ffi.Size()
  external int discoveryUrlsSize;

  external ffi.Pointer<UA_String> discoveryUrls;
}

/// RequestHeader
/// ^^^^^^^^^^^^^
final class UA_RequestHeader extends ffi.Struct {
  external UA_NodeId authenticationToken;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int requestHandle;

  @UA_UInt32()
  external int returnDiagnostics;

  external UA_String auditEntryId;

  @UA_UInt32()
  external int timeoutHint;

  external UA_ExtensionObject additionalHeader;
}

/// ResponseHeader
/// ^^^^^^^^^^^^^^
final class UA_ResponseHeader extends ffi.Opaque {}

/// ServiceFault
/// ^^^^^^^^^^^^
final class UA_ServiceFault extends ffi.Opaque {}

/// FindServersRequest
/// ^^^^^^^^^^^^^^^^^^
final class UA_FindServersRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int serverUrisSize;

  external ffi.Pointer<UA_String> serverUris;
}

/// FindServersResponse
/// ^^^^^^^^^^^^^^^^^^^
final class UA_FindServersResponse extends ffi.Opaque {}

/// MessageSecurityMode
/// ^^^^^^^^^^^^^^^^^^^
abstract class UA_MessageSecurityMode {
  static const int UA_MESSAGESECURITYMODE_INVALID = 0;
  static const int UA_MESSAGESECURITYMODE_NONE = 1;
  static const int UA_MESSAGESECURITYMODE_SIGN = 2;
  static const int UA_MESSAGESECURITYMODE_SIGNANDENCRYPT = 3;
  static const int __UA_MESSAGESECURITYMODE_FORCE32BIT = 2147483647;
}

/// UserTokenType
/// ^^^^^^^^^^^^^
abstract class UA_UserTokenType {
  static const int UA_USERTOKENTYPE_ANONYMOUS = 0;
  static const int UA_USERTOKENTYPE_USERNAME = 1;
  static const int UA_USERTOKENTYPE_CERTIFICATE = 2;
  static const int UA_USERTOKENTYPE_ISSUEDTOKEN = 3;
  static const int __UA_USERTOKENTYPE_FORCE32BIT = 2147483647;
}

/// UserTokenPolicy
/// ^^^^^^^^^^^^^^^
final class UA_UserTokenPolicy extends ffi.Struct {
  external UA_String policyId;

  @ffi.Int32()
  external int tokenType;

  external UA_String issuedTokenType;

  external UA_String issuerEndpointUrl;

  external UA_String securityPolicyUri;
}

/// EndpointDescription
/// ^^^^^^^^^^^^^^^^^^^
final class UA_EndpointDescription extends ffi.Struct {
  external UA_String endpointUrl;

  external UA_ApplicationDescription server;

  external UA_ByteString serverCertificate;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityPolicyUri;

  @ffi.Size()
  external int userIdentityTokensSize;

  external ffi.Pointer<UA_UserTokenPolicy> userIdentityTokens;

  external UA_String transportProfileUri;

  @UA_Byte()
  external int securityLevel;
}

/// GetEndpointsRequest
/// ^^^^^^^^^^^^^^^^^^^
final class UA_GetEndpointsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_String endpointUrl;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int profileUrisSize;

  external ffi.Pointer<UA_String> profileUris;
}

/// GetEndpointsResponse
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_GetEndpointsResponse extends ffi.Opaque {}

/// SecurityTokenRequestType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
abstract class UA_SecurityTokenRequestType {
  static const int UA_SECURITYTOKENREQUESTTYPE_ISSUE = 0;
  static const int UA_SECURITYTOKENREQUESTTYPE_RENEW = 1;
  static const int __UA_SECURITYTOKENREQUESTTYPE_FORCE32BIT = 2147483647;
}

/// ChannelSecurityToken
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ChannelSecurityToken extends ffi.Struct {
  @UA_UInt32()
  external int channelId;

  @UA_UInt32()
  external int tokenId;

  @UA_DateTime()
  external int createdAt;

  @UA_UInt32()
  external int revisedLifetime;
}

/// OpenSecureChannelRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_OpenSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int clientProtocolVersion;

  @ffi.Int32()
  external int requestType;

  @ffi.Int32()
  external int securityMode;

  external UA_ByteString clientNonce;

  @UA_UInt32()
  external int requestedLifetime;
}

/// OpenSecureChannelResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_OpenSecureChannelResponse extends ffi.Opaque {}

/// CloseSecureChannelRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSecureChannelRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;
}

/// CloseSecureChannelResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSecureChannelResponse extends ffi.Opaque {}

/// SignedSoftwareCertificate
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SignedSoftwareCertificate extends ffi.Struct {
  external UA_ByteString certificateData;

  external UA_ByteString signature;
}

/// SignatureData
/// ^^^^^^^^^^^^^
final class UA_SignatureData extends ffi.Struct {
  external UA_String algorithm;

  external UA_ByteString signature;
}

/// CreateSessionRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ApplicationDescription clientDescription;

  external UA_String serverUri;

  external UA_String endpointUrl;

  external UA_String sessionName;

  external UA_ByteString clientNonce;

  external UA_ByteString clientCertificate;

  @UA_Double()
  external double requestedSessionTimeout;

  @UA_UInt32()
  external int maxResponseMessageSize;
}

/// CreateSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSessionResponse extends ffi.Opaque {}

/// UserIdentityToken
/// ^^^^^^^^^^^^^^^^^
final class UA_UserIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

/// AnonymousIdentityToken
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_AnonymousIdentityToken extends ffi.Struct {
  external UA_String policyId;
}

/// UserNameIdentityToken
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_UserNameIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_String userName;

  external UA_ByteString password;

  external UA_String encryptionAlgorithm;
}

/// X509IdentityToken
/// ^^^^^^^^^^^^^^^^^
final class UA_X509IdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString certificateData;
}

/// IssuedIdentityToken
/// ^^^^^^^^^^^^^^^^^^^
final class UA_IssuedIdentityToken extends ffi.Struct {
  external UA_String policyId;

  external UA_ByteString tokenData;

  external UA_String encryptionAlgorithm;
}

/// ActivateSessionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_ActivateSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_SignatureData clientSignature;

  @ffi.Size()
  external int clientSoftwareCertificatesSize;

  external ffi.Pointer<UA_SignedSoftwareCertificate> clientSoftwareCertificates;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_ExtensionObject userIdentityToken;

  external UA_SignatureData userTokenSignature;
}

/// ActivateSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ActivateSessionResponse extends ffi.Opaque {}

/// CloseSessionRequest
/// ^^^^^^^^^^^^^^^^^^^
final class UA_CloseSessionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool deleteSubscriptions;
}

/// CloseSessionResponse
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_CloseSessionResponse extends ffi.Opaque {}

/// NodeAttributesMask
/// ^^^^^^^^^^^^^^^^^^
abstract class UA_NodeAttributesMask {
  static const int UA_NODEATTRIBUTESMASK_NONE = 0;
  static const int UA_NODEATTRIBUTESMASK_ACCESSLEVEL = 1;
  static const int UA_NODEATTRIBUTESMASK_ARRAYDIMENSIONS = 2;
  static const int UA_NODEATTRIBUTESMASK_BROWSENAME = 4;
  static const int UA_NODEATTRIBUTESMASK_CONTAINSNOLOOPS = 8;
  static const int UA_NODEATTRIBUTESMASK_DATATYPE = 16;
  static const int UA_NODEATTRIBUTESMASK_DESCRIPTION = 32;
  static const int UA_NODEATTRIBUTESMASK_DISPLAYNAME = 64;
  static const int UA_NODEATTRIBUTESMASK_EVENTNOTIFIER = 128;
  static const int UA_NODEATTRIBUTESMASK_EXECUTABLE = 256;
  static const int UA_NODEATTRIBUTESMASK_HISTORIZING = 512;
  static const int UA_NODEATTRIBUTESMASK_INVERSENAME = 1024;
  static const int UA_NODEATTRIBUTESMASK_ISABSTRACT = 2048;
  static const int UA_NODEATTRIBUTESMASK_MINIMUMSAMPLINGINTERVAL = 4096;
  static const int UA_NODEATTRIBUTESMASK_NODECLASS = 8192;
  static const int UA_NODEATTRIBUTESMASK_NODEID = 16384;
  static const int UA_NODEATTRIBUTESMASK_SYMMETRIC = 32768;
  static const int UA_NODEATTRIBUTESMASK_USERACCESSLEVEL = 65536;
  static const int UA_NODEATTRIBUTESMASK_USEREXECUTABLE = 131072;
  static const int UA_NODEATTRIBUTESMASK_USERWRITEMASK = 262144;
  static const int UA_NODEATTRIBUTESMASK_VALUERANK = 524288;
  static const int UA_NODEATTRIBUTESMASK_WRITEMASK = 1048576;
  static const int UA_NODEATTRIBUTESMASK_VALUE = 2097152;
  static const int UA_NODEATTRIBUTESMASK_DATATYPEDEFINITION = 4194304;
  static const int UA_NODEATTRIBUTESMASK_ROLEPERMISSIONS = 8388608;
  static const int UA_NODEATTRIBUTESMASK_ACCESSRESTRICTIONS = 16777216;
  static const int UA_NODEATTRIBUTESMASK_ALL = 33554431;
  static const int UA_NODEATTRIBUTESMASK_BASENODE = 26501220;
  static const int UA_NODEATTRIBUTESMASK_OBJECT = 26501348;
  static const int UA_NODEATTRIBUTESMASK_OBJECTTYPE = 26503268;
  static const int UA_NODEATTRIBUTESMASK_VARIABLE = 26571383;
  static const int UA_NODEATTRIBUTESMASK_VARIABLETYPE = 28600438;
  static const int UA_NODEATTRIBUTESMASK_METHOD = 26632548;
  static const int UA_NODEATTRIBUTESMASK_REFERENCETYPE = 26537060;
  static const int UA_NODEATTRIBUTESMASK_VIEW = 26501356;
  static const int __UA_NODEATTRIBUTESMASK_FORCE32BIT = 2147483647;
}

/// NodeAttributes
/// ^^^^^^^^^^^^^^
final class UA_NodeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;
}

/// ObjectAttributes
/// ^^^^^^^^^^^^^^^^
final class UA_ObjectAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @UA_Byte()
  external int eventNotifier;
}

/// VariableAttributes
/// ^^^^^^^^^^^^^^^^^^
final class UA_VariableAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_Byte()
  external int accessLevel;

  @UA_Byte()
  external int userAccessLevel;

  @UA_Double()
  external double minimumSamplingInterval;

  @ffi.Bool()
  external bool historizing;
}

/// MethodAttributes
/// ^^^^^^^^^^^^^^^^
final class UA_MethodAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool executable;

  @ffi.Bool()
  external bool userExecutable;
}

/// ObjectTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ObjectTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

/// VariableTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_VariableTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  external UA_Variant value;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @ffi.Bool()
  external bool isAbstract;
}

/// ReferenceTypeAttributes
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ReferenceTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;
}

/// DataTypeAttributes
/// ^^^^^^^^^^^^^^^^^^
final class UA_DataTypeAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool isAbstract;
}

/// ViewAttributes
/// ^^^^^^^^^^^^^^
final class UA_ViewAttributes extends ffi.Struct {
  @UA_UInt32()
  external int specifiedAttributes;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @UA_UInt32()
  external int userWriteMask;

  @ffi.Bool()
  external bool containsNoLoops;

  @UA_Byte()
  external int eventNotifier;
}

/// AddNodesItem
/// ^^^^^^^^^^^^
final class UA_AddNodesItem extends ffi.Struct {
  external UA_ExpandedNodeId parentNodeId;

  external UA_NodeId referenceTypeId;

  external UA_ExpandedNodeId requestedNewNodeId;

  external UA_QualifiedName browseName;

  @ffi.Int32()
  external int nodeClass;

  external UA_ExtensionObject nodeAttributes;

  external UA_ExpandedNodeId typeDefinition;
}

/// AddNodesResult
/// ^^^^^^^^^^^^^^
final class UA_AddNodesResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_NodeId addedNodeId;
}

/// AddNodesRequest
/// ^^^^^^^^^^^^^^^
final class UA_AddNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToAddSize;

  external ffi.Pointer<UA_AddNodesItem> nodesToAdd;
}

/// AddNodesResponse
/// ^^^^^^^^^^^^^^^^
final class UA_AddNodesResponse extends ffi.Opaque {}

/// AddReferencesItem
/// ^^^^^^^^^^^^^^^^^
final class UA_AddReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_String targetServerUri;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.Int32()
  external int targetNodeClass;
}

/// AddReferencesRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_AddReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToAddSize;

  external ffi.Pointer<UA_AddReferencesItem> referencesToAdd;
}

/// AddReferencesResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_AddReferencesResponse extends ffi.Opaque {}

/// DeleteNodesItem
/// ^^^^^^^^^^^^^^^
final class UA_DeleteNodesItem extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Bool()
  external bool deleteTargetReferences;
}

/// DeleteNodesRequest
/// ^^^^^^^^^^^^^^^^^^
final class UA_DeleteNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToDeleteSize;

  external ffi.Pointer<UA_DeleteNodesItem> nodesToDelete;
}

/// DeleteNodesResponse
/// ^^^^^^^^^^^^^^^^^^^
final class UA_DeleteNodesResponse extends ffi.Opaque {}

/// DeleteReferencesItem
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesItem extends ffi.Struct {
  external UA_NodeId sourceNodeId;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId targetNodeId;

  @ffi.Bool()
  external bool deleteBidirectional;
}

/// DeleteReferencesRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int referencesToDeleteSize;

  external ffi.Pointer<UA_DeleteReferencesItem> referencesToDelete;
}

/// DeleteReferencesResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteReferencesResponse extends ffi.Opaque {}

/// BrowseDirection
/// ^^^^^^^^^^^^^^^
abstract class UA_BrowseDirection {
  static const int UA_BROWSEDIRECTION_FORWARD = 0;
  static const int UA_BROWSEDIRECTION_INVERSE = 1;
  static const int UA_BROWSEDIRECTION_BOTH = 2;
  static const int UA_BROWSEDIRECTION_INVALID = 3;
  static const int __UA_BROWSEDIRECTION_FORCE32BIT = 2147483647;
}

/// ViewDescription
/// ^^^^^^^^^^^^^^^
final class UA_ViewDescription extends ffi.Struct {
  external UA_NodeId viewId;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt32()
  external int viewVersion;
}

/// BrowseDescription
/// ^^^^^^^^^^^^^^^^^
final class UA_BrowseDescription extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Int32()
  external int browseDirection;

  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool includeSubtypes;

  @UA_UInt32()
  external int nodeClassMask;

  @UA_UInt32()
  external int resultMask;
}

/// BrowseResultMask
/// ^^^^^^^^^^^^^^^^
abstract class UA_BrowseResultMask {
  static const int UA_BROWSERESULTMASK_NONE = 0;
  static const int UA_BROWSERESULTMASK_REFERENCETYPEID = 1;
  static const int UA_BROWSERESULTMASK_ISFORWARD = 2;
  static const int UA_BROWSERESULTMASK_NODECLASS = 4;
  static const int UA_BROWSERESULTMASK_BROWSENAME = 8;
  static const int UA_BROWSERESULTMASK_DISPLAYNAME = 16;
  static const int UA_BROWSERESULTMASK_TYPEDEFINITION = 32;
  static const int UA_BROWSERESULTMASK_ALL = 63;
  static const int UA_BROWSERESULTMASK_REFERENCETYPEINFO = 3;
  static const int UA_BROWSERESULTMASK_TARGETINFO = 60;
  static const int __UA_BROWSERESULTMASK_FORCE32BIT = 2147483647;
}

/// ReferenceDescription
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ReferenceDescription extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isForward;

  external UA_ExpandedNodeId nodeId;

  external UA_QualifiedName browseName;

  external UA_LocalizedText displayName;

  @ffi.Int32()
  external int nodeClass;

  external UA_ExpandedNodeId typeDefinition;
}

/// BrowseResult
/// ^^^^^^^^^^^^
final class UA_BrowseResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  external UA_ByteString continuationPoint;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_ReferenceDescription> references;
}

/// BrowseRequest
/// ^^^^^^^^^^^^^
final class UA_BrowseRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  external UA_ViewDescription view;

  @UA_UInt32()
  external int requestedMaxReferencesPerNode;

  @ffi.Size()
  external int nodesToBrowseSize;

  external ffi.Pointer<UA_BrowseDescription> nodesToBrowse;
}

/// BrowseResponse
/// ^^^^^^^^^^^^^^
final class UA_BrowseResponse extends ffi.Opaque {}

/// BrowseNextRequest
/// ^^^^^^^^^^^^^^^^^
final class UA_BrowseNextRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool releaseContinuationPoints;

  @ffi.Size()
  external int continuationPointsSize;

  external ffi.Pointer<UA_ByteString> continuationPoints;
}

/// BrowseNextResponse
/// ^^^^^^^^^^^^^^^^^^
final class UA_BrowseNextResponse extends ffi.Opaque {}

/// RelativePathElement
/// ^^^^^^^^^^^^^^^^^^^
final class UA_RelativePathElement extends ffi.Struct {
  external UA_NodeId referenceTypeId;

  @ffi.Bool()
  external bool isInverse;

  @ffi.Bool()
  external bool includeSubtypes;

  external UA_QualifiedName targetName;
}

/// RelativePath
/// ^^^^^^^^^^^^
final class UA_RelativePath extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_RelativePathElement> elements;
}

/// BrowsePath
/// ^^^^^^^^^^
final class UA_BrowsePath extends ffi.Struct {
  external UA_NodeId startingNode;

  external UA_RelativePath relativePath;
}

/// BrowsePathTarget
/// ^^^^^^^^^^^^^^^^
final class UA_BrowsePathTarget extends ffi.Struct {
  external UA_ExpandedNodeId targetId;

  @UA_UInt32()
  external int remainingPathIndex;
}

/// BrowsePathResult
/// ^^^^^^^^^^^^^^^^
final class UA_BrowsePathResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int targetsSize;

  external ffi.Pointer<UA_BrowsePathTarget> targets;
}

/// TranslateBrowsePathsToNodeIdsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TranslateBrowsePathsToNodeIdsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int browsePathsSize;

  external ffi.Pointer<UA_BrowsePath> browsePaths;
}

/// TranslateBrowsePathsToNodeIdsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TranslateBrowsePathsToNodeIdsResponse extends ffi.Opaque {}

/// RegisterNodesRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_RegisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToRegisterSize;

  external ffi.Pointer<UA_NodeId> nodesToRegister;
}

/// RegisterNodesResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_RegisterNodesResponse extends ffi.Opaque {}

/// UnregisterNodesRequest
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_UnregisterNodesRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToUnregisterSize;

  external ffi.Pointer<UA_NodeId> nodesToUnregister;
}

/// UnregisterNodesResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_UnregisterNodesResponse extends ffi.Opaque {}

/// FilterOperator
/// ^^^^^^^^^^^^^^
abstract class UA_FilterOperator {
  static const int UA_FILTEROPERATOR_EQUALS = 0;
  static const int UA_FILTEROPERATOR_ISNULL = 1;
  static const int UA_FILTEROPERATOR_GREATERTHAN = 2;
  static const int UA_FILTEROPERATOR_LESSTHAN = 3;
  static const int UA_FILTEROPERATOR_GREATERTHANOREQUAL = 4;
  static const int UA_FILTEROPERATOR_LESSTHANOREQUAL = 5;
  static const int UA_FILTEROPERATOR_LIKE = 6;
  static const int UA_FILTEROPERATOR_NOT = 7;
  static const int UA_FILTEROPERATOR_BETWEEN = 8;
  static const int UA_FILTEROPERATOR_INLIST = 9;
  static const int UA_FILTEROPERATOR_AND = 10;
  static const int UA_FILTEROPERATOR_OR = 11;
  static const int UA_FILTEROPERATOR_CAST = 12;
  static const int UA_FILTEROPERATOR_INVIEW = 13;
  static const int UA_FILTEROPERATOR_OFTYPE = 14;
  static const int UA_FILTEROPERATOR_RELATEDTO = 15;
  static const int UA_FILTEROPERATOR_BITWISEAND = 16;
  static const int UA_FILTEROPERATOR_BITWISEOR = 17;
  static const int __UA_FILTEROPERATOR_FORCE32BIT = 2147483647;
}

/// ContentFilterElement
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterElement extends ffi.Struct {
  @ffi.Int32()
  external int filterOperator;

  @ffi.Size()
  external int filterOperandsSize;

  external ffi.Pointer<UA_ExtensionObject> filterOperands;
}

/// ContentFilter
/// ^^^^^^^^^^^^^
final class UA_ContentFilter extends ffi.Struct {
  @ffi.Size()
  external int elementsSize;

  external ffi.Pointer<UA_ContentFilterElement> elements;
}

/// ElementOperand
/// ^^^^^^^^^^^^^^
final class UA_ElementOperand extends ffi.Struct {
  @UA_UInt32()
  external int index;
}

/// LiteralOperand
/// ^^^^^^^^^^^^^^
final class UA_LiteralOperand extends ffi.Struct {
  external UA_Variant value;
}

/// AttributeOperand
/// ^^^^^^^^^^^^^^^^
final class UA_AttributeOperand extends ffi.Struct {
  external UA_NodeId nodeId;

  external UA_String alias;

  external UA_RelativePath browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

/// SimpleAttributeOperand
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_SimpleAttributeOperand extends ffi.Struct {
  external UA_NodeId typeDefinitionId;

  @ffi.Size()
  external int browsePathSize;

  external ffi.Pointer<UA_QualifiedName> browsePath;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;
}

/// ContentFilterElementResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterElementResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int operandStatusCodesSize;

  external ffi.Pointer<UA_StatusCode> operandStatusCodes;

  @ffi.Size()
  external int operandDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> operandDiagnosticInfos;
}

/// ContentFilterResult
/// ^^^^^^^^^^^^^^^^^^^
final class UA_ContentFilterResult extends ffi.Struct {
  @ffi.Size()
  external int elementResultsSize;

  external ffi.Pointer<UA_ContentFilterElementResult> elementResults;

  @ffi.Size()
  external int elementDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> elementDiagnosticInfos;
}

/// TimestampsToReturn
/// ^^^^^^^^^^^^^^^^^^
abstract class UA_TimestampsToReturn {
  static const int UA_TIMESTAMPSTORETURN_SOURCE = 0;
  static const int UA_TIMESTAMPSTORETURN_SERVER = 1;
  static const int UA_TIMESTAMPSTORETURN_BOTH = 2;
  static const int UA_TIMESTAMPSTORETURN_NEITHER = 3;
  static const int UA_TIMESTAMPSTORETURN_INVALID = 4;
  static const int __UA_TIMESTAMPSTORETURN_FORCE32BIT = 2147483647;
}

/// ReadValueId
/// ^^^^^^^^^^^
final class UA_ReadValueId extends ffi.Struct {
  external UA_NodeId nodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String indexRange;

  external UA_QualifiedName dataEncoding;
}

/// ReadRequest
/// ^^^^^^^^^^^
final class UA_ReadRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double maxAge;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int nodesToReadSize;

  external ffi.Pointer<UA_ReadValueId> nodesToRead;
}

/// ReadResponse
/// ^^^^^^^^^^^^
final class UA_ReadResponse extends ffi.Opaque {}

/// WriteValue
/// ^^^^^^^^^^
final class UA_WriteValue extends ffi.Opaque {}

/// WriteRequest
/// ^^^^^^^^^^^^
final class UA_WriteRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int nodesToWriteSize;

  external ffi.Pointer<UA_WriteValue> nodesToWrite;
}

/// WriteResponse
/// ^^^^^^^^^^^^^
final class UA_WriteResponse extends ffi.Opaque {}

/// CallMethodRequest
/// ^^^^^^^^^^^^^^^^^
final class UA_CallMethodRequest extends ffi.Struct {
  external UA_NodeId objectId;

  external UA_NodeId methodId;

  @ffi.Size()
  external int inputArgumentsSize;

  external ffi.Pointer<UA_Variant> inputArguments;
}

/// CallMethodResult
/// ^^^^^^^^^^^^^^^^
final class UA_CallMethodResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int inputArgumentResultsSize;

  external ffi.Pointer<UA_StatusCode> inputArgumentResults;

  @ffi.Size()
  external int inputArgumentDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> inputArgumentDiagnosticInfos;

  @ffi.Size()
  external int outputArgumentsSize;

  external ffi.Pointer<UA_Variant> outputArguments;
}

/// CallRequest
/// ^^^^^^^^^^^
final class UA_CallRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int methodsToCallSize;

  external ffi.Pointer<UA_CallMethodRequest> methodsToCall;
}

/// CallResponse
/// ^^^^^^^^^^^^
final class UA_CallResponse extends ffi.Opaque {}

/// MonitoringMode
/// ^^^^^^^^^^^^^^
abstract class UA_MonitoringMode {
  static const int UA_MONITORINGMODE_DISABLED = 0;
  static const int UA_MONITORINGMODE_SAMPLING = 1;
  static const int UA_MONITORINGMODE_REPORTING = 2;
  static const int __UA_MONITORINGMODE_FORCE32BIT = 2147483647;
}

/// DataChangeTrigger
/// ^^^^^^^^^^^^^^^^^
abstract class UA_DataChangeTrigger {
  static const int UA_DATACHANGETRIGGER_STATUS = 0;
  static const int UA_DATACHANGETRIGGER_STATUSVALUE = 1;
  static const int UA_DATACHANGETRIGGER_STATUSVALUETIMESTAMP = 2;
  static const int __UA_DATACHANGETRIGGER_FORCE32BIT = 2147483647;
}

/// DeadbandType
/// ^^^^^^^^^^^^
abstract class UA_DeadbandType {
  static const int UA_DEADBANDTYPE_NONE = 0;
  static const int UA_DEADBANDTYPE_ABSOLUTE = 1;
  static const int UA_DEADBANDTYPE_PERCENT = 2;
  static const int __UA_DEADBANDTYPE_FORCE32BIT = 2147483647;
}

/// DataChangeFilter
/// ^^^^^^^^^^^^^^^^
final class UA_DataChangeFilter extends ffi.Struct {
  @ffi.Int32()
  external int trigger;

  @UA_UInt32()
  external int deadbandType;

  @UA_Double()
  external double deadbandValue;
}

/// EventFilter
/// ^^^^^^^^^^^
final class UA_EventFilter extends ffi.Struct {
  @ffi.Size()
  external int selectClausesSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectClauses;

  external UA_ContentFilter whereClause;
}

/// AggregateConfiguration
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_AggregateConfiguration extends ffi.Struct {
  @ffi.Bool()
  external bool useServerCapabilitiesDefaults;

  @ffi.Bool()
  external bool treatUncertainAsBad;

  @UA_Byte()
  external int percentDataBad;

  @UA_Byte()
  external int percentDataGood;

  @ffi.Bool()
  external bool useSlopedExtrapolation;
}

/// AggregateFilter
/// ^^^^^^^^^^^^^^^
final class UA_AggregateFilter extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  external UA_NodeId aggregateType;

  @UA_Double()
  external double processingInterval;

  external UA_AggregateConfiguration aggregateConfiguration;
}

/// EventFilterResult
/// ^^^^^^^^^^^^^^^^^
final class UA_EventFilterResult extends ffi.Struct {
  @ffi.Size()
  external int selectClauseResultsSize;

  external ffi.Pointer<UA_StatusCode> selectClauseResults;

  @ffi.Size()
  external int selectClauseDiagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> selectClauseDiagnosticInfos;

  external UA_ContentFilterResult whereClauseResult;
}

/// MonitoringParameters
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoringParameters extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @UA_Double()
  external double samplingInterval;

  external UA_ExtensionObject filter;

  @UA_UInt32()
  external int queueSize;

  @ffi.Bool()
  external bool discardOldest;
}

/// MonitoredItemCreateRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemCreateRequest extends ffi.Struct {
  external UA_ReadValueId itemToMonitor;

  @ffi.Int32()
  external int monitoringMode;

  external UA_MonitoringParameters requestedParameters;
}

/// MonitoredItemCreateResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemCreateResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_UInt32()
  external int monitoredItemId;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

/// CreateMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int itemsToCreateSize;

  external ffi.Pointer<UA_MonitoredItemCreateRequest> itemsToCreate;
}

/// CreateMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateMonitoredItemsResponse extends ffi.Opaque {}

/// MonitoredItemModifyRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemModifyRequest extends ffi.Struct {
  @UA_UInt32()
  external int monitoredItemId;

  external UA_MonitoringParameters requestedParameters;
}

/// MonitoredItemModifyResult
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemModifyResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @UA_Double()
  external double revisedSamplingInterval;

  @UA_UInt32()
  external int revisedQueueSize;

  external UA_ExtensionObject filterResult;
}

/// ModifyMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifyMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int timestampsToReturn;

  @ffi.Size()
  external int itemsToModifySize;

  external ffi.Pointer<UA_MonitoredItemModifyRequest> itemsToModify;
}

/// ModifyMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifyMonitoredItemsResponse extends ffi.Opaque {}

/// SetMonitoringModeRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetMonitoringModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Int32()
  external int monitoringMode;

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

/// SetMonitoringModeResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetMonitoringModeResponse extends ffi.Opaque {}

/// SetTriggeringRequest
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_SetTriggeringRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int triggeringItemId;

  @ffi.Size()
  external int linksToAddSize;

  external ffi.Pointer<UA_UInt32> linksToAdd;

  @ffi.Size()
  external int linksToRemoveSize;

  external ffi.Pointer<UA_UInt32> linksToRemove;
}

/// SetTriggeringResponse
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_SetTriggeringResponse extends ffi.Opaque {}

/// DeleteMonitoredItemsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteMonitoredItemsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @ffi.Size()
  external int monitoredItemIdsSize;

  external ffi.Pointer<UA_UInt32> monitoredItemIds;
}

/// DeleteMonitoredItemsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteMonitoredItemsResponse extends ffi.Opaque {}

/// CreateSubscriptionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool publishingEnabled;

  @UA_Byte()
  external int priority;
}

/// CreateSubscriptionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_CreateSubscriptionResponse extends ffi.Opaque {}

/// ModifySubscriptionRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifySubscriptionRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_Double()
  external double requestedPublishingInterval;

  @UA_UInt32()
  external int requestedLifetimeCount;

  @UA_UInt32()
  external int requestedMaxKeepAliveCount;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @UA_Byte()
  external int priority;
}

/// ModifySubscriptionResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ModifySubscriptionResponse extends ffi.Opaque {}

/// SetPublishingModeRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetPublishingModeRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Bool()
  external bool publishingEnabled;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

/// SetPublishingModeResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SetPublishingModeResponse extends ffi.Opaque {}

/// NotificationMessage
/// ^^^^^^^^^^^^^^^^^^^
final class UA_NotificationMessage extends ffi.Struct {
  @UA_UInt32()
  external int sequenceNumber;

  @UA_DateTime()
  external int publishTime;

  @ffi.Size()
  external int notificationDataSize;

  external ffi.Pointer<UA_ExtensionObject> notificationData;
}

/// MonitoredItemNotification
/// ^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_MonitoredItemNotification extends ffi.Opaque {}

/// EventFieldList
/// ^^^^^^^^^^^^^^
final class UA_EventFieldList extends ffi.Struct {
  @UA_UInt32()
  external int clientHandle;

  @ffi.Size()
  external int eventFieldsSize;

  external ffi.Pointer<UA_Variant> eventFields;
}

/// StatusChangeNotification
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_StatusChangeNotification extends ffi.Opaque {}

/// SubscriptionAcknowledgement
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SubscriptionAcknowledgement extends ffi.Struct {
  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int sequenceNumber;
}

/// PublishRequest
/// ^^^^^^^^^^^^^^
final class UA_PublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionAcknowledgementsSize;

  external ffi.Pointer<UA_SubscriptionAcknowledgement>
      subscriptionAcknowledgements;
}

/// PublishResponse
/// ^^^^^^^^^^^^^^^
final class UA_PublishResponse extends ffi.Opaque {}

/// RepublishRequest
/// ^^^^^^^^^^^^^^^^
final class UA_RepublishRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int retransmitSequenceNumber;
}

/// RepublishResponse
/// ^^^^^^^^^^^^^^^^^
final class UA_RepublishResponse extends ffi.Opaque {}

/// TransferResult
/// ^^^^^^^^^^^^^^
final class UA_TransferResult extends ffi.Struct {
  @UA_StatusCode()
  external int statusCode;

  @ffi.Size()
  external int availableSequenceNumbersSize;

  external ffi.Pointer<UA_UInt32> availableSequenceNumbers;
}

/// TransferSubscriptionsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TransferSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;

  @ffi.Bool()
  external bool sendInitialValues;
}

/// TransferSubscriptionsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TransferSubscriptionsResponse extends ffi.Opaque {}

/// DeleteSubscriptionsRequest
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteSubscriptionsRequest extends ffi.Struct {
  external UA_RequestHeader requestHeader;

  @ffi.Size()
  external int subscriptionIdsSize;

  external ffi.Pointer<UA_UInt32> subscriptionIds;
}

/// DeleteSubscriptionsResponse
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DeleteSubscriptionsResponse extends ffi.Opaque {}

/// BuildInfo
/// ^^^^^^^^^
final class UA_BuildInfo extends ffi.Struct {
  external UA_String productUri;

  external UA_String manufacturerName;

  external UA_String productName;

  external UA_String softwareVersion;

  external UA_String buildNumber;

  @UA_DateTime()
  external int buildDate;
}

/// RedundancySupport
/// ^^^^^^^^^^^^^^^^^
abstract class UA_RedundancySupport {
  static const int UA_REDUNDANCYSUPPORT_NONE = 0;
  static const int UA_REDUNDANCYSUPPORT_COLD = 1;
  static const int UA_REDUNDANCYSUPPORT_WARM = 2;
  static const int UA_REDUNDANCYSUPPORT_HOT = 3;
  static const int UA_REDUNDANCYSUPPORT_TRANSPARENT = 4;
  static const int UA_REDUNDANCYSUPPORT_HOTANDMIRRORED = 5;
  static const int __UA_REDUNDANCYSUPPORT_FORCE32BIT = 2147483647;
}

/// ServerState
/// ^^^^^^^^^^^
abstract class UA_ServerState {
  static const int UA_SERVERSTATE_RUNNING = 0;
  static const int UA_SERVERSTATE_FAILED = 1;
  static const int UA_SERVERSTATE_NOCONFIGURATION = 2;
  static const int UA_SERVERSTATE_SUSPENDED = 3;
  static const int UA_SERVERSTATE_SHUTDOWN = 4;
  static const int UA_SERVERSTATE_TEST = 5;
  static const int UA_SERVERSTATE_COMMUNICATIONFAULT = 6;
  static const int UA_SERVERSTATE_UNKNOWN = 7;
  static const int __UA_SERVERSTATE_FORCE32BIT = 2147483647;
}

/// ServerDiagnosticsSummaryDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_ServerDiagnosticsSummaryDataType extends ffi.Struct {
  @UA_UInt32()
  external int serverViewCount;

  @UA_UInt32()
  external int currentSessionCount;

  @UA_UInt32()
  external int cumulatedSessionCount;

  @UA_UInt32()
  external int securityRejectedSessionCount;

  @UA_UInt32()
  external int rejectedSessionCount;

  @UA_UInt32()
  external int sessionTimeoutCount;

  @UA_UInt32()
  external int sessionAbortCount;

  @UA_UInt32()
  external int currentSubscriptionCount;

  @UA_UInt32()
  external int cumulatedSubscriptionCount;

  @UA_UInt32()
  external int publishingIntervalCount;

  @UA_UInt32()
  external int securityRejectedRequestsCount;

  @UA_UInt32()
  external int rejectedRequestsCount;
}

/// ServerStatusDataType
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_ServerStatusDataType extends ffi.Struct {
  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int currentTime;

  @ffi.Int32()
  external int state;

  external UA_BuildInfo buildInfo;

  @UA_UInt32()
  external int secondsTillShutdown;

  external UA_LocalizedText shutdownReason;
}

/// Range
/// ^^^^^
final class UA_Range extends ffi.Struct {
  @UA_Double()
  external double low;

  @UA_Double()
  external double high;
}

/// EUInformation
/// ^^^^^^^^^^^^^
final class UA_EUInformation extends ffi.Struct {
  external UA_String namespaceUri;

  @UA_Int32()
  external int unitId;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;
}

/// AxisScaleEnumeration
/// ^^^^^^^^^^^^^^^^^^^^
abstract class UA_AxisScaleEnumeration {
  static const int UA_AXISSCALEENUMERATION_LINEAR = 0;
  static const int UA_AXISSCALEENUMERATION_LOG = 1;
  static const int UA_AXISSCALEENUMERATION_LN = 2;
  static const int __UA_AXISSCALEENUMERATION_FORCE32BIT = 2147483647;
}

/// ComplexNumberType
/// ^^^^^^^^^^^^^^^^^
final class UA_ComplexNumberType extends ffi.Struct {
  @UA_Float()
  external double real;

  @UA_Float()
  external double imaginary;
}

/// Float
/// ^^^^^
/// An IEEE single precision (32 bit) floating point value.
typedef UA_Float = ffi.Float;
typedef DartUA_Float = double;

/// DoubleComplexNumberType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_DoubleComplexNumberType extends ffi.Struct {
  @UA_Double()
  external double real;

  @UA_Double()
  external double imaginary;
}

/// AxisInformation
/// ^^^^^^^^^^^^^^^
final class UA_AxisInformation extends ffi.Struct {
  external UA_EUInformation engineeringUnits;

  external UA_Range eURange;

  external UA_LocalizedText title;

  @ffi.Int32()
  external int axisScaleType;

  @ffi.Size()
  external int axisStepsSize;

  external ffi.Pointer<UA_Double> axisSteps;
}

/// XVType
/// ^^^^^^
final class UA_XVType extends ffi.Struct {
  @UA_Double()
  external double x;

  @UA_Float()
  external double value;
}

/// StructureDescription
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_StructureDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_StructureDefinition structureDefinition;
}

/// FieldMetaData
/// ^^^^^^^^^^^^^
final class UA_FieldMetaData extends ffi.Struct {
  external UA_String name;

  external UA_LocalizedText description;

  @UA_DataSetFieldFlags()
  external int fieldFlags;

  @UA_Byte()
  external int builtInType;

  external UA_NodeId dataType;

  @UA_Int32()
  external int valueRank;

  @ffi.Size()
  external int arrayDimensionsSize;

  external ffi.Pointer<UA_UInt32> arrayDimensions;

  @UA_UInt32()
  external int maxStringLength;

  external UA_Guid dataSetFieldId;

  @ffi.Size()
  external int propertiesSize;

  external ffi.Pointer<UA_KeyValuePair> properties;
}

/// DataSetFieldFlags
/// ^^^^^^^^^^^^^^^^^
typedef UA_DataSetFieldFlags = UA_UInt16;

/// PublishedEventsDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedEventsDataType extends ffi.Struct {
  external UA_NodeId eventNotifier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

/// WriterGroupDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_WriterGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Double()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  external UA_String headerLayoutUri;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetWritersSize;

  external ffi.Pointer<UA_DataSetWriterDataType> dataSetWriters;
}

/// FieldTargetDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_FieldTargetDataType extends ffi.Struct {
  external UA_Guid dataSetFieldId;

  external UA_String receiverIndexRange;

  external UA_NodeId targetNodeId;

  @UA_UInt32()
  external int attributeId;

  external UA_String writeIndexRange;

  @ffi.Int32()
  external int overrideValueHandling;

  external UA_Variant overrideValue;
}

/// SubscribedDataSetMirrorDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_SubscribedDataSetMirrorDataType extends ffi.Struct {
  external UA_String parentNodeName;

  @ffi.Size()
  external int rolePermissionsSize;

  external ffi.Pointer<UA_RolePermissionType> rolePermissions;
}

/// EnumDefinition
/// ^^^^^^^^^^^^^^
final class UA_EnumDefinition extends ffi.Struct {
  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_EnumField> fields;
}

/// DataChangeNotification
/// ^^^^^^^^^^^^^^^^^^^^^^
final class UA_DataChangeNotification extends ffi.Struct {
  @ffi.Size()
  external int monitoredItemsSize;

  external ffi.Pointer<UA_MonitoredItemNotification> monitoredItems;

  @ffi.Size()
  external int diagnosticInfosSize;

  external ffi.Pointer<UA_DiagnosticInfo> diagnosticInfos;
}

/// EventNotificationList
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_EventNotificationList extends ffi.Struct {
  @ffi.Size()
  external int eventsSize;

  external ffi.Pointer<UA_EventFieldList> events;
}

/// EnumDescription
/// ^^^^^^^^^^^^^^^
final class UA_EnumDescription extends ffi.Struct {
  external UA_NodeId dataTypeId;

  external UA_QualifiedName name;

  external UA_EnumDefinition enumDefinition;

  @UA_Byte()
  external int builtInType;
}

/// UABinaryFileDataType
/// ^^^^^^^^^^^^^^^^^^^^
final class UA_UABinaryFileDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String schemaLocation;

  @ffi.Size()
  external int fileHeaderSize;

  external ffi.Pointer<UA_KeyValuePair> fileHeader;

  external UA_Variant body;
}

/// DataSetMetaDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_DataSetMetaDataType extends ffi.Struct {
  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  @ffi.Size()
  external int structureDataTypesSize;

  external ffi.Pointer<UA_StructureDescription> structureDataTypes;

  @ffi.Size()
  external int enumDataTypesSize;

  external ffi.Pointer<UA_EnumDescription> enumDataTypes;

  @ffi.Size()
  external int simpleDataTypesSize;

  external ffi.Pointer<UA_SimpleTypeDescription> simpleDataTypes;

  external UA_String name;

  external UA_LocalizedText description;

  @ffi.Size()
  external int fieldsSize;

  external ffi.Pointer<UA_FieldMetaData> fields;

  external UA_Guid dataSetClassId;

  external UA_ConfigurationVersionDataType configurationVersion;
}

/// PublishedDataSetDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PublishedDataSetDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Size()
  external int dataSetFolderSize;

  external ffi.Pointer<UA_String> dataSetFolder;

  external UA_DataSetMetaDataType dataSetMetaData;

  @ffi.Size()
  external int extensionFieldsSize;

  external ffi.Pointer<UA_KeyValuePair> extensionFields;

  external UA_ExtensionObject dataSetSource;
}

/// DataSetReaderDataType
/// ^^^^^^^^^^^^^^^^^^^^^
final class UA_DataSetReaderDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_String headerLayoutUri;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @ffi.Size()
  external int dataSetReaderPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetReaderProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject subscribedDataSet;
}

/// TargetVariablesDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^
final class UA_TargetVariablesDataType extends ffi.Struct {
  @ffi.Size()
  external int targetVariablesSize;

  external ffi.Pointer<UA_FieldTargetDataType> targetVariables;
}

/// ReaderGroupDataType
/// ^^^^^^^^^^^^^^^^^^^
final class UA_ReaderGroupDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int securityKeyServicesSize;

  external ffi.Pointer<UA_EndpointDescription> securityKeyServices;

  @UA_UInt32()
  external int maxNetworkMessageSize;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int dataSetReadersSize;

  external ffi.Pointer<UA_DataSetReaderDataType> dataSetReaders;
}

/// PubSubConnectionDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PubSubConnectionDataType extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  external UA_Variant publisherId;

  external UA_String transportProfileUri;

  external UA_ExtensionObject address;

  @ffi.Size()
  external int connectionPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> connectionProperties;

  external UA_ExtensionObject transportSettings;

  @ffi.Size()
  external int writerGroupsSize;

  external ffi.Pointer<UA_WriterGroupDataType> writerGroups;

  @ffi.Size()
  external int readerGroupsSize;

  external ffi.Pointer<UA_ReaderGroupDataType> readerGroups;
}

/// PubSubConfigurationDataType
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_PubSubConfigurationDataType extends ffi.Struct {
  @ffi.Size()
  external int publishedDataSetsSize;

  external ffi.Pointer<UA_PublishedDataSetDataType> publishedDataSets;

  @ffi.Size()
  external int connectionsSize;

  external ffi.Pointer<UA_PubSubConnectionDataType> connections;

  @ffi.Bool()
  external bool enabled;
}

/// SByte
/// ^^^^^
/// An integer value between -128 and 127.
typedef UA_SByte = ffi.Int8;
typedef DartUA_SByte = int;

/// XmlElement
/// ^^^^^^^^^^
/// An XML element.
typedef UA_XmlElement = UA_String;

/// Duration
/// ^^^^^^^^
typedef UA_Duration = UA_Double;

/// UtcTime
/// ^^^^^^^
typedef UA_UtcTime = UA_DateTime;

/// LocaleId
/// ^^^^^^^^
typedef UA_LocaleId = UA_String;

/// Forward Declarations
/// --------------------
/// Opaque pointers used by the plugins.
final class UA_Server extends ffi.Struct {
  external UA_ServerConfig config;

  @UA_DateTime()
  external int startTime;

  @UA_DateTime()
  external int endTime;

  @ffi.Int32()
  external int state;

  external UnnamedStruct25 channels;

  @UA_UInt32()
  external int lastChannelId;

  @UA_UInt32()
  external int lastTokenId;

  external UA_AsyncManager asyncManager;

  external session_list sessions;

  @UA_UInt32()
  external int sessionCount;

  @UA_UInt32()
  external int activeSessionCount;

  external UA_Session adminSession;

  @ffi.Size()
  external int namespacesSize;

  external ffi.Pointer<UA_String> namespaces;

  external UA_Timer timer;

  @ffi.Bool()
  external bool bootstrapNS0;

  @ffi.Size()
  external int subscriptionsSize;

  @ffi.Size()
  external int monitoredItemsSize;

  external UnnamedStruct31 subscriptions;

  @UA_UInt32()
  external int lastSubscriptionId;

  external UnnamedStruct32 localMonitoredItems;

  @UA_UInt32()
  external int lastLocalMonitoredItemId;

  external UA_PubSubManager pubSubManager;

  external UA_Lock networkMutex;

  external UA_Lock serviceMutex;

  external UA_NetworkStatistics networkStatistics;

  external UA_SecureChannelStatistics secureChannelStatistics;

  external UA_ServerDiagnosticsSummaryDataType serverDiagnosticsSummary;
}

/// .. _server:
///
/// Server
/// ======
///
/// .. _server-configuration:
///
/// Server Configuration
/// --------------------
/// The configuration structure is passed to the server during initialization.
/// The server expects that the configuration is not modified during runtime.
/// Currently, only one server can use a configuration at a time. During
/// shutdown, the server will clean up the parts of the configuration that are
/// modified at runtime through the provided API.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a server configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. by adding a server certificate
/// 3. Instantiate a server with it
/// 4. After shutdown of the server, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ServerConfig extends ffi.Struct {
  external UA_Logger logger;

  external ffi.Pointer<ffi.Void> context;

  /// Server Description
  /// ^^^^^^^^^^^^^^^^^^
  /// The description must be internally consistent. The ApplicationUri set in
  /// the ApplicationDescription must match the URI set in the server
  /// certificate.
  external UA_BuildInfo buildInfo;

  external UA_ApplicationDescription applicationDescription;

  external UA_ByteString serverCertificate;

  /// Timeouts and Delays
  /// ^^^^^^^^^^^^^^^^^^^
  @UA_Double()
  external double shutdownDelay;

  /// Rule Handling
  /// ^^^^^^^^^^^^^
  /// Override the handling of standard-defined behavior. These settings are
  /// used to balance the following contradicting requirements:
  ///
  /// - Strict conformance with the standard (for certification).
  /// - Ensure interoperability with old/non-conforming implementations
  /// encountered in the wild.
  ///
  /// The defaults are set for compatibility with the largest number of OPC UA
  /// vendors (with log warnings activated). Cf. Postel's Law "be conservative
  /// in what you send, be liberal in what you accept".
  ///
  /// See the section :ref:`rule-handling` for the possible settings.
  @ffi.Int32()
  external int verifyRequestTimestamp;

  @ffi.Int32()
  external int allowEmptyVariables;

  /// Custom Data Types
  /// ^^^^^^^^^^^^^^^^^
  /// The following is a linked list of arrays with custom data types. All data
  /// types that are accessible from here are automatically considered for the
  /// decoding of received messages. Custom data types are not cleaned up
  /// together with the configuration. So it is possible to allocate them on
  /// ROM.
  ///
  /// See the section on :ref:`generic-types`. Examples for working with custom
  /// data types are provided in ``/examples/custom_datatype/``.
  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  /// Networking
  /// ^^^^^^^^^^
  @ffi.Size()
  external int networkLayersSize;

  external ffi.Pointer<UA_ServerNetworkLayer> networkLayers;

  external UA_String customHostname;

  /// Security and Encryption
  /// ^^^^^^^^^^^^^^^^^^^^^^^
  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  @ffi.Size()
  external int endpointsSize;

  external ffi.Pointer<UA_EndpointDescription> endpoints;

  @ffi.Bool()
  external bool securityPolicyNoneDiscoveryOnly;

  external UA_CertificateVerification certificateVerification;

  /// See the section for :ref:`access-control
  /// handling<access-control>`.
  external UA_AccessControl accessControl;

  /// Nodes and Node Lifecycle
  /// ^^^^^^^^^^^^^^^^^^^^^^^^
  /// See the section for :ref:`node lifecycle handling<node-lifecycle>`.
  external UA_Nodestore nodestore;

  external UA_GlobalNodeLifecycle nodeLifecycle;

  /// Copy the HasModellingRule reference in instances from the type
  /// definition in UA_Server_addObjectNode and UA_Server_addVariableNode.
  ///
  /// Part 3 - 6.4.4: [...] it is not required that newly created or referenced
  /// instances based on InstanceDeclarations have a ModellingRule, however, it
  /// is allowed that they have any ModellingRule independent of the
  /// ModellingRule of their InstanceDeclaration
  @ffi.Bool()
  external bool modellingRulesOnInstances;

  /// Limits
  /// ^^^^^^
  @UA_UInt16()
  external int maxSecureChannels;

  @UA_UInt32()
  external int maxSecurityTokenLifetime;

  @UA_UInt16()
  external int maxSessions;

  @UA_Double()
  external double maxSessionTimeout;

  @UA_UInt32()
  external int maxNodesPerRead;

  @UA_UInt32()
  external int maxNodesPerWrite;

  @UA_UInt32()
  external int maxNodesPerMethodCall;

  @UA_UInt32()
  external int maxNodesPerBrowse;

  @UA_UInt32()
  external int maxNodesPerRegisterNodes;

  @UA_UInt32()
  external int maxNodesPerTranslateBrowsePathsToNodeIds;

  @UA_UInt32()
  external int maxNodesPerNodeManagement;

  @UA_UInt32()
  external int maxMonitoredItemsPerCall;

  @UA_UInt32()
  external int maxReferencesPerNode;

  @UA_Double()
  external double asyncOperationTimeout;

  @ffi.Size()
  external int maxAsyncOperationQueueSize;

  external UA_Server_AsyncOperationNotifyCallback asyncOperationNotifyCallback;

  @UA_UInt32()
  external int maxSubscriptions;

  @UA_UInt32()
  external int maxSubscriptionsPerSession;

  external UA_DurationRange publishingIntervalLimits;

  external UA_UInt32Range lifeTimeCountLimits;

  external UA_UInt32Range keepAliveCountLimits;

  @UA_UInt32()
  external int maxNotificationsPerPublish;

  @ffi.Bool()
  external bool enableRetransmissionQueue;

  @UA_UInt32()
  external int maxRetransmissionQueueSize;

  @UA_UInt32()
  external int maxEventsPerNode;

  @UA_UInt32()
  external int maxMonitoredItems;

  @UA_UInt32()
  external int maxMonitoredItemsPerSubscription;

  external UA_DurationRange samplingIntervalLimits;

  external UA_UInt32Range queueSizeLimits;

  @UA_UInt32()
  external int maxPublishReqPerSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              UA_UInt32 attibuteId,
              ffi.Bool removed)>> monitoredItemRegisterCallback;

  external UA_PubSubConfiguration pubSubConfig;
}

final class UA_Logger extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> logContext,
              ffi.Int32 level,
              ffi.Int32 category,
              ffi.Pointer<ffi.Char> msg,
              ffi.Pointer<__va_list_tag> args)>> log;

  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> context)>>
      clear;
}

/// Logging Plugin API
/// ==================
///
/// Servers and clients define a logger in their configuration. The logger is a
/// plugin. A default plugin that logs to ``stdout`` is provided as an example.
/// The logger plugin is stateful and can point to custom data. So it is possible
/// to keep open file handlers in the logger context.
///
/// Every log message consists of a log level, a log category and a string
/// message content. The timestamp of the log message is created within the
/// logger.
abstract class UA_LogLevel {
  static const int UA_LOGLEVEL_TRACE = 0;
  static const int UA_LOGLEVEL_DEBUG = 1;
  static const int UA_LOGLEVEL_INFO = 2;
  static const int UA_LOGLEVEL_WARNING = 3;
  static const int UA_LOGLEVEL_ERROR = 4;
  static const int UA_LOGLEVEL_FATAL = 5;
}

abstract class UA_LogCategory {
  static const int UA_LOGCATEGORY_NETWORK = 0;
  static const int UA_LOGCATEGORY_SECURECHANNEL = 1;
  static const int UA_LOGCATEGORY_SESSION = 2;
  static const int UA_LOGCATEGORY_SERVER = 3;
  static const int UA_LOGCATEGORY_CLIENT = 4;
  static const int UA_LOGCATEGORY_USERLAND = 5;
  static const int UA_LOGCATEGORY_SECURITYPOLICY = 6;
}

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

final class UA_ServerNetworkLayer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<UA_NetworkStatistics> statistics;

  external UA_String discoveryUrl;

  external UA_ConnectionConfig localConnectionConfig;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Logger> logger,
              ffi.Pointer<UA_String> customHostname)>> start;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Server> server, UA_UInt16 timeout)>> listen;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ServerNetworkLayer> nl,
              ffi.Pointer<UA_Server> server)>> stop;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_ServerNetworkLayer> nl)>> clear;
}

/// .. _networking:
///
/// Networking Plugin API
/// =====================
///
/// Connection
/// ----------
/// Client-server connections are represented by a `UA_Connection`. The
/// connection is stateful and stores partially received messages, and so on. In
/// addition, the connection contains function pointers to the underlying
/// networking implementation. An example for this is the `send` function. So the
/// connection encapsulates all the required networking functionality. This lets
/// users on embedded (or otherwise exotic) systems implement their own
/// networking plugins with a clear interface to the main open62541 library.
final class UA_ConnectionConfig extends ffi.Struct {
  @UA_UInt32()
  external int protocolVersion;

  @UA_UInt32()
  external int recvBufferSize;

  @UA_UInt32()
  external int sendBufferSize;

  @UA_UInt32()
  external int localMaxMessageSize;

  @UA_UInt32()
  external int remoteMaxMessageSize;

  @UA_UInt32()
  external int localMaxChunkCount;

  @UA_UInt32()
  external int remoteMaxChunkCount;
}

final class UA_SecurityPolicy extends ffi.Struct {
  external ffi.Pointer<ffi.Void> policyContext;

  external UA_String policyUri;

  external UA_ByteString localCertificate;

  external UA_SecurityPolicyAsymmetricModule asymmetricModule;

  external UA_SecurityPolicySymmetricModule symmetricModule;

  external UA_SecurityPolicySignatureAlgorithm certificateSigningAlgorithm;

  external UA_SecurityPolicyChannelModule channelModule;

  external ffi.Pointer<UA_Logger> logger;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> policy,
              UA_ByteString newCertificate,
              UA_ByteString newPrivateKey)>> updateCertificateAndPrivateKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_SecurityPolicy> policy)>> clear;
}

final class UA_SecurityPolicyAsymmetricModule extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> securityPolicy,
                  ffi.Pointer<UA_ByteString> certificate,
                  ffi.Pointer<UA_ByteString> thumbprint)>>
      makeCertificateThumbprint;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_SecurityPolicy> securityPolicy,
                  ffi.Pointer<UA_ByteString> certificateThumbprint)>>
      compareCertificateThumbprint;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicyCryptoModule extends ffi.Struct {
  external UA_SecurityPolicySignatureAlgorithm signatureAlgorithm;

  external UA_SecurityPolicyEncryptionAlgorithm encryptionAlgorithm;
}

/// SecurityPolicy Interface Definition
/// -----------------------------------
final class UA_SecurityPolicySignatureAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> verify;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> message,
              ffi.Pointer<UA_ByteString> signature)>> sign;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalSignatureSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteSignatureSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteKeyLength;
}

final class UA_SecurityPolicyEncryptionAlgorithm extends ffi.Struct {
  external UA_String uri;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> data)>> encrypt;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> data)>> decrypt;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getLocalKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteKeyLength;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemoteBlockSize;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Size Function(ffi.Pointer<ffi.Void> channelContext)>>
      getRemotePlainTextBlockSize;
}

final class UA_SecurityPolicySymmetricModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> policyContext,
              ffi.Pointer<UA_ByteString> secret,
              ffi.Pointer<UA_ByteString> seed,
              ffi.Pointer<UA_ByteString> out)>> generateKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> policyContext,
              ffi.Pointer<UA_ByteString> out)>> generateNonce;

  @ffi.Size()
  external int secureChannelNonceLength;

  external UA_SecurityPolicyCryptoModule cryptoModule;
}

final class UA_SecurityPolicyChannelModule extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_SecurityPolicy> securityPolicy,
              ffi.Pointer<UA_ByteString> remoteCertificate,
              ffi.Pointer<ffi.Pointer<ffi.Void>> channelContext)>> newContext;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> channelContext)>>
      deleteContext;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setLocalSymEncryptingKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setLocalSymSigningKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> iv)>> setLocalSymIv;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setRemoteSymEncryptingKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> key)>> setRemoteSymSigningKey;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> iv)>> setRemoteSymIv;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> channelContext,
              ffi.Pointer<UA_ByteString> certificate)>> compareCertificate;
}

/// Public Key Infrastructure Integration
/// =====================================
/// This file contains interface definitions for integration in a Public Key
/// Infrastructure (PKI). Currently only one plugin interface is defined.
///
/// Certificate Verification
/// ------------------------
/// This plugin verifies that the origin of the certificate is trusted. It does
/// not assign any access rights/roles to the holder of the certificate.
///
/// Usually, implementations of the certificate verification plugin provide an
/// initialization method that takes a trust-list and a revocation-list as input.
/// The lifecycle of the plugin is attached to a server or client config. The
/// ``clear`` method is called automatically when the config is destroyed.
final class UA_CertificateVerification extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<ffi.Void> verificationContext,
              ffi.Pointer<UA_ByteString> certificate)>> verifyCertificate;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> verificationContext,
              ffi.Pointer<UA_ByteString> certificate,
              ffi.Pointer<UA_String> applicationURI)>> verifyApplicationURI;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_CertificateVerification> cv)>> clear;
}

/// .. _access-control:
///
/// Access Control Plugin API
/// =========================
/// The access control callback is used to authenticate sessions and grant access
/// rights accordingly.
///
/// The ``sessionId`` and ``sessionContext`` can be both NULL. This is the case
/// when, for example, a MonitoredItem (the underlying Subscription) is detached
/// from its Session but continues to run.
final class UA_AccessControl extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<UA_AccessControl> ac)>>
      clear;

  @ffi.Size()
  external int userTokenPoliciesSize;

  external ffi.Pointer<UA_UserTokenPolicy> userTokenPolicies;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_AccessControl> ac,
                  ffi.Pointer<UA_EndpointDescription> endpointDescription,
                  ffi.Pointer<UA_ByteString> secureChannelRemoteCertificate,
                  ffi.Pointer<UA_NodeId> sessionId,
                  ffi.Pointer<UA_ExtensionObject> userIdentityToken,
                  ffi.Pointer<ffi.Pointer<ffi.Void>> sessionContext)>>
      activateSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext)>> closeSession;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_UInt32 Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserRightsMask;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_Byte Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> getUserAccessLevel;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext)>> getUserExecutable;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> methodId,
              ffi.Pointer<ffi.Void> methodContext,
              ffi.Pointer<UA_NodeId> objectId,
              ffi.Pointer<ffi.Void> objectContext)>> getUserExecutableOnObject;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddNodesItem> item)>> allowAddNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_AddReferencesItem> item)>> allowAddReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteNodesItem> item)>> allowDeleteNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_DeleteReferencesItem> item)>> allowDeleteReference;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_AccessControl> ac,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> allowBrowseNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_AccessControl> ac,
                  ffi.Pointer<UA_NodeId> oldSessionId,
                  ffi.Pointer<ffi.Void> oldSessionContext,
                  ffi.Pointer<UA_NodeId> newSessionId,
                  ffi.Pointer<ffi.Void> newSessionContext)>>
      allowTransferSubscription;
}

final class UA_Nodestore extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> nsCtx)>> clear;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<UA_Node> Function(
              ffi.Pointer<ffi.Void> nsCtx, ffi.Int32 nodeClass)>> newNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      deleteNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_Node> Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId)>>
      getNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      releaseNode;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> nsCtx,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<UA_Node>> outNode)>> getNodeCopy;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> nsCtx,
              ffi.Pointer<UA_Node> node,
              ffi.Pointer<UA_NodeId> addedNodeId)>> insertNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_Node> node)>>
      replaceNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<ffi.Void> nsCtx, ffi.Pointer<UA_NodeId> nodeId)>>
      removeNode;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_NodeId> Function(
                  ffi.Pointer<ffi.Void> nsCtx, UA_Byte refTypeIndex)>>
      getReferenceTypeId;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void> nsCtx,
              UA_NodestoreVisitor visitor,
              ffi.Pointer<ffi.Void> visitorCtx)>> iterate;
}

/// Node Union
/// ----------
///
/// A union that represents any kind of node. The node head can always be used.
/// Check the NodeClass before accessing specific content.
final class UA_Node extends ffi.Opaque {}

/// Nodestore Plugin API
/// --------------------
///
/// The following definitions are used for implementing custom node storage
/// backends. **Most users will want to use the default nodestore and don't need
/// to work with the nodestore API**.
///
/// Outside of custom nodestore implementations, users should not manually edit
/// nodes. Please use the OPC UA services for that. Otherwise, all consistency
/// checks are omitted. This can crash the application eventually.
typedef UA_NodestoreVisitor
    = ffi.Pointer<ffi.NativeFunction<UA_NodestoreVisitorFunction>>;
typedef UA_NodestoreVisitorFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);
typedef DartUA_NodestoreVisitorFunction = void Function(
    ffi.Pointer<ffi.Void> visitorCtx, ffi.Pointer<UA_Node> node);

/// .. _information-modelling:
///
/// Information Modelling
/// =====================
///
/// Information modelling in OPC UA combines concepts from object-orientation and
/// semantic modelling. At the core, an OPC UA information model is a graph made
/// up of
///
/// - Nodes: There are eight possible Node types (variable, object, method, ...)
/// - References: Typed and directed relations between two nodes
///
/// Every node is identified by a unique (within the server) :ref:`nodeid`.
/// Reference are triples of the form ``(source-nodeid, referencetype-nodeid,
/// target-nodeid)``. An example reference between nodes is a
/// ``hasTypeDefinition`` reference between a Variable and its VariableType. Some
/// ReferenceTypes are *hierarchic* and must not form *directed loops*. See the
/// section on :ref:`ReferenceTypes <referencetypenode>` for more details on
/// possible references and their semantics.
///
/// **Warning!!** The structures defined in this section are only relevant for
/// the developers of custom Nodestores. The interaction with the information
/// model is possible only via the OPC UA :ref:`services`. So the following
/// sections are purely informational so that users may have a clear mental
/// model of the underlying representation.
///
/// .. _node-lifecycle:
///
/// Node Lifecycle: Constructors, Destructors and Node Contexts
/// -----------------------------------------------------------
///
/// To finalize the instantiation of a node, a (user-defined) constructor
/// callback is executed. There can be both a global constructor for all nodes
/// and node-type constructor specific to the TypeDefinition of the new node
/// (attached to an ObjectTypeNode or VariableTypeNode).
///
/// In the hierarchy of ObjectTypes and VariableTypes, only the constructor of
/// the (lowest) type defined for the new node is executed. Note that every
/// Object and Variable can have only one ``isTypeOf`` reference. But type-nodes
/// can technically have several ``hasSubType`` references to implement multiple
/// inheritance. Issues of (multiple) inheritance in the constructor need to be
/// solved by the user.
///
/// When a node is destroyed, the node-type destructor is called before the
/// global destructor. So the overall node lifecycle is as follows:
///
/// 1. Global Constructor (set in the server config)
/// 2. Node-Type Constructor (for VariableType or ObjectTypes)
/// 3. (Usage-period of the Node)
/// 4. Node-Type Destructor
/// 5. Global Destructor
///
/// The constructor and destructor callbacks can be set to ``NULL`` and are not
/// used in that case. If the node-type constructor fails, the global destructor
/// will be called before removing the node. The destructors are assumed to never
/// fail.
///
/// Every node carries a user-context and a constructor-context pointer. The
/// user-context is used to attach custom data to a node. But the (user-defined)
/// constructors and destructors may replace the user-context pointer if they
/// wish to do so. The initial value for the constructor-context is ``NULL``.
/// When the ``AddNodes`` service is used over the network, the user-context
/// pointer of the new node is also initially set to ``NULL``.
///
/// Global Node Lifecycle
/// ~~~~~~~~~~~~~~~~~~~~~~
/// Global constructor and destructor callbacks used for every node type.
/// To be set in the server config.
final class UA_GlobalNodeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext)>> destructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId)>> createOptionalChild;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> sourceNodeId,
              ffi.Pointer<UA_NodeId> targetParentNodeId,
              ffi.Pointer<UA_NodeId> referenceTypeId,
              ffi.Pointer<UA_NodeId> targetNodeId)>> generateChildNodeId;
}

typedef UA_Server_AsyncOperationNotifyCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Server_AsyncOperationNotifyCallbackFunction>>;
typedef UA_Server_AsyncOperationNotifyCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server);
typedef DartUA_Server_AsyncOperationNotifyCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server);

final class UA_DurationRange extends ffi.Struct {
  @UA_Duration()
  external double min;

  @UA_Duration()
  external double max;
}

final class UA_UInt32Range extends ffi.Struct {
  @UA_UInt32()
  external int min;

  @UA_UInt32()
  external int max;
}

final class UA_PubSubConfiguration extends ffi.Struct {
  @ffi.Size()
  external int transportLayersSize;

  external ffi.Pointer<UA_PubSubTransportLayer> transportLayers;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_NodeId> Id, ffi.Int32 state,
              UA_StatusCode status)>> stateChangeCallback;
}

/// The UA_PubSubTransportLayer is used for the creation of new connections.
/// Whenever in runtime a new connection is requested, the internal PubSub
/// implementation calls the 'createPubSubChannel' function. The
/// 'transportProfileUri' contains the standard defined transport profile
/// information and is used to identify the type of connections which can be
/// created by the TransportLayer. The server config contains a list of
/// UA_PubSubTransportLayer. Take a look in the tutorial_pubsub_connection to get
/// information about the TransportLayer handling.
final class UA_PubSubTransportLayer extends ffi.Struct {
  external UA_String transportProfileUri;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<UA_PubSubChannel> Function(
                  ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig)>>
      createPubSubChannel;
}

final class UA_PubSubChannel extends ffi.Struct {
  @UA_UInt32()
  external int publisherId;

  @ffi.Int32()
  external int state;

  external ffi.Pointer<UA_PubSubConnectionConfig> connectionConfig;

  @ffi.Int()
  external int sockfd;

  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              ffi.Pointer<UA_ByteString> buf)>> send;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              ffi.Pointer<UA_ByteString> encodedBuffer,
                              ffi.Pointer<UA_ByteString> topic)>>
                  callback)>> regist;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings)>> unregist;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_PubSubChannel> channel,
              ffi.Pointer<UA_ExtensionObject> transportSettings,
              UA_PubSubReceiveCallback receiveCallback,
              ffi.Pointer<ffi.Void> receiveCallbackContext,
              UA_UInt32 timeout)>> receive;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_PubSubChannel> channel)>> close;

  external ffi.Pointer<
          ffi.NativeFunction<
              UA_StatusCode Function(
                  ffi.Pointer<UA_PubSubChannel> channel, UA_UInt16 timeout)>>
      yield1;
}

abstract class UA_PubSubChannelState {
  static const int UA_PUBSUB_CHANNEL_RDY = 0;
  static const int UA_PUBSUB_CHANNEL_PUB = 1;
  static const int UA_PUBSUB_CHANNEL_SUB = 2;
  static const int UA_PUBSUB_CHANNEL_PUB_SUB = 3;
  static const int UA_PUBSUB_CHANNEL_ERROR = 4;
  static const int UA_PUBSUB_CHANNEL_CLOSED = 5;
}

/// .. _pubsub_connection:
///
/// PubSub Connection Plugin API
/// ============================
///
/// The PubSub Connection API is the interface between concrete network
/// implementations and the internal pubsub code.
///
/// The PubSub specification enables the creation of new connections on runtime.
/// Wording: 'Connection' -> OPC UA standard 'highlevel' perspective, 'Channel'
/// -> open62541 implementation 'lowlevel' perspective. A channel can be assigned
/// with different network implementations like UDP, MQTT, AMQP. The channel
/// provides basis services like send, regist, unregist, receive, close.
final class UA_PubSubConnectionConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @ffi.Int32()
  external int publisherIdType;

  external UnnamedUnion9 publisherId;

  external UA_String transportProfileUri;

  external UA_Variant address;

  @ffi.Size()
  external int connectionPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> connectionProperties;

  external UA_Variant connectionTransportSettings;
}

abstract class UA_PublisherIdType {
  static const int UA_PUBSUB_PUBLISHERID_NUMERIC = 0;
  static const int UA_PUBSUB_PUBLISHERID_STRING = 1;
}

final class UnnamedUnion9 extends ffi.Union {
  @UA_UInt32()
  external int numeric;

  external UA_String string;
}

typedef UA_PubSubReceiveCallback
    = ffi.Pointer<ffi.NativeFunction<UA_PubSubReceiveCallbackFunction>>;
typedef UA_PubSubReceiveCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<ffi.Void> callbackContext,
    ffi.Pointer<UA_ByteString> buffer);
typedef DartUA_PubSubReceiveCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_PubSubChannel> channel,
    ffi.Pointer<ffi.Void> callbackContext,
    ffi.Pointer<UA_ByteString> buffer);

abstract class UA_ServerLifecycle {
  static const int UA_SERVERLIFECYCLE_FRESH = 0;
  static const int UA_SERVERLIFECYLE_RUNNING = 1;
}

final class UnnamedStruct25 extends ffi.Struct {
  external ffi.Pointer<channel_entry> tqh_first;

  external ffi.Pointer<ffi.Pointer<channel_entry>> tqh_last;
}

final class channel_entry extends ffi.Struct {
  external UA_TimerEntry cleanupCallback;

  external UnnamedStruct26 pointers;

  external UA_SecureChannel channel;
}

final class UA_TimerEntry extends ffi.Struct {
  external aa_entry treeEntry;

  @ffi.Int32()
  external int timerPolicy;

  @UA_DateTime()
  external int nextTime;

  @UA_UInt64()
  external int interval;

  external UA_ApplicationCallback callback;

  external ffi.Pointer<ffi.Void> application;

  external ffi.Pointer<ffi.Void> data;

  external aa_entry idTreeEntry;

  @UA_UInt64()
  external int id;
}

final class aa_entry extends ffi.Struct {
  external ffi.Pointer<aa_entry> left;

  external ffi.Pointer<aa_entry> right;

  @ffi.UnsignedInt()
  external int level;
}

abstract class UA_TimerPolicy {
  static const int UA_TIMER_HANDLE_CYCLEMISS_WITH_CURRENTTIME = 0;
  static const int UA_TIMER_HANDLE_CYCLEMISS_WITH_BASETIME = 1;
}

/// amalgamated original file "/src/ua_timer.h"
typedef UA_ApplicationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ApplicationCallbackFunction>>;
typedef UA_ApplicationCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> application, ffi.Pointer<ffi.Void> data);
typedef DartUA_ApplicationCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> application, ffi.Pointer<ffi.Void> data);

final class UnnamedStruct26 extends ffi.Struct {
  external ffi.Pointer<channel_entry> tqe_next;

  external ffi.Pointer<ffi.Pointer<channel_entry>> tqe_prev;
}

final class UA_SecureChannel extends ffi.Struct {
  @ffi.Int32()
  external int state;

  @ffi.Int32()
  external int renewState;

  @ffi.Int32()
  external int securityMode;

  external UA_ConnectionConfig config;

  external UA_ChannelSecurityToken securityToken;

  external UA_ChannelSecurityToken altSecurityToken;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicy;

  external ffi.Pointer<ffi.Void> channelContext;

  external ffi.Pointer<UA_Connection> connection;

  external UA_ByteString remoteCertificate;

  @ffi.Array.multi([20])
  external ffi.Array<UA_Byte> remoteCertificateThumbprint;

  external UA_ByteString remoteNonce;

  external UA_ByteString localNonce;

  @UA_UInt32()
  external int receiveSequenceNumber;

  @UA_UInt32()
  external int sendSequenceNumber;

  external UnnamedStruct9 sessions;

  external UA_ChunkQueue completeChunks;

  external UA_ChunkQueue decryptedChunks;

  @ffi.Size()
  external int decryptedChunksCount;

  @ffi.Size()
  external int decryptedChunksLength;

  external UA_ByteString incompleteChunk;

  external ffi.Pointer<UA_CertificateVerification> certificateVerification;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<ffi.Void> application,
              ffi.Pointer<UA_SecureChannel> channel,
              ffi.Pointer<UA_AsymmetricAlgorithmSecurityHeader>
                  asymHeader)>> processOPNHeader;
}

abstract class UA_SecureChannelRenewState {
  static const int UA_SECURECHANNELRENEWSTATE_NORMAL = 0;
  static const int UA_SECURECHANNELRENEWSTATE_SENT = 1;
  static const int UA_SECURECHANNELRENEWSTATE_NEWTOKEN_SERVER = 2;
  static const int UA_SECURECHANNELRENEWSTATE_NEWTOKEN_CLIENT = 3;
}

/// amalgamated original file "/include/open62541/plugin/network.h"
final class UA_Connection extends ffi.Struct {
  @ffi.Int32()
  external int state;

  external ffi.Pointer<UA_SecureChannel> channel;

  @ffi.Int()
  external int sockfd;

  @UA_DateTime()
  external int openingDate;

  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Size length, ffi.Pointer<UA_ByteString> buf)>> getSendBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> releaseSendBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> send;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> response, UA_UInt32 timeout)>> recv;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection,
              ffi.Pointer<UA_ByteString> buf)>> releaseRecvBuffer;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection)>> close;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Connection> connection)>> free;
}

abstract class UA_ConnectionState {
  static const int UA_CONNECTIONSTATE_CLOSED = 0;
  static const int UA_CONNECTIONSTATE_OPENING = 1;
  static const int UA_CONNECTIONSTATE_ESTABLISHED = 2;
}

final class UnnamedStruct9 extends ffi.Struct {
  external ffi.Pointer<UA_SessionHeader> slh_first;
}

final class UA_SessionHeader extends ffi.Struct {
  external UnnamedStruct8 next;

  external UA_NodeId authenticationToken;

  @ffi.Bool()
  external bool serverSession;

  external ffi.Pointer<UA_SecureChannel> channel;
}

final class UnnamedStruct8 extends ffi.Struct {
  external ffi.Pointer<UA_SessionHeader> sle_next;
}

final class UA_ChunkQueue extends ffi.Struct {
  external ffi.Pointer<UA_Chunk> sqh_first;

  external ffi.Pointer<ffi.Pointer<UA_Chunk>> sqh_last;
}

final class UA_Chunk extends ffi.Struct {
  external UnnamedStruct10 pointers;

  external UA_ByteString bytes;

  @ffi.Int32()
  external int messageType;

  @ffi.Int32()
  external int chunkType;

  @UA_UInt32()
  external int requestId;

  @ffi.Bool()
  external bool copied;
}

final class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<UA_Chunk> sqe_next;
}

/// MessageType
/// ^^^^^^^^^^^
/// Message Type and whether the message contains an intermediate chunk
abstract class UA_MessageType {
  static const int UA_MESSAGETYPE_ACK = 4932417;
  static const int UA_MESSAGETYPE_HEL = 4998472;
  static const int UA_MESSAGETYPE_MSG = 4674381;
  static const int UA_MESSAGETYPE_OPN = 5132367;
  static const int UA_MESSAGETYPE_CLO = 5196867;
  static const int UA_MESSAGETYPE_ERR = 5395013;
  static const int UA_MESSAGETYPE_INVALID = 0;
  static const int __UA_MESSAGETYPE_FORCE32BIT = 2147483647;
}

/// ChunkType
/// ^^^^^^^^^
/// Type of the chunk
abstract class UA_ChunkType {
  static const int UA_CHUNKTYPE_FINAL = 1174405120;
  static const int UA_CHUNKTYPE_INTERMEDIATE = 1124073472;
  static const int UA_CHUNKTYPE_ABORT = 1090519040;
  static const int __UA_CHUNKTYPE_FORCE32BIT = 2147483647;
}

/// AsymmetricAlgorithmSecurityHeader
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/// Asymmetric Security Header
final class UA_AsymmetricAlgorithmSecurityHeader extends ffi.Struct {
  external UA_ByteString securityPolicyUri;

  external UA_ByteString senderCertificate;

  external UA_ByteString receiverCertificateThumbprint;
}

final class UA_AsyncManager extends ffi.Struct {
  external UnnamedStruct27 asyncResponses;

  @ffi.Size()
  external int asyncResponsesCount;

  external UA_Lock queueLock;

  external UA_AsyncOperationQueue newQueue;

  external UA_AsyncOperationQueue dispatchedQueue;

  external UA_AsyncOperationQueue resultQueue;

  @ffi.Size()
  external int opsCount;

  @UA_UInt64()
  external int checkTimeoutCallbackId;
}

final class UnnamedStruct27 extends ffi.Struct {
  external ffi.Pointer<UA_AsyncResponse> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_AsyncResponse>> tqh_last;
}

final class UA_AsyncResponse extends ffi.Opaque {}

final class UA_AsyncOperationQueue extends ffi.Struct {
  external ffi.Pointer<UA_AsyncOperation> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_AsyncOperation>> tqh_last;
}

final class UA_AsyncOperation extends ffi.Struct {
  external UnnamedStruct29 pointers;

  external UA_CallMethodRequest request;

  external UA_CallMethodResult response;

  @ffi.Size()
  external int index;

  external ffi.Pointer<UA_AsyncResponse> parent;
}

final class UnnamedStruct29 extends ffi.Struct {
  external ffi.Pointer<UA_AsyncOperation> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_AsyncOperation>> tqe_prev;
}

final class session_list extends ffi.Struct {
  external ffi.Pointer<session_list_entry> lh_first;
}

final class session_list_entry extends ffi.Struct {
  external UA_TimerEntry cleanupCallback;

  external UnnamedStruct30 pointers;

  external UA_Session session;
}

final class UnnamedStruct30 extends ffi.Struct {
  external ffi.Pointer<session_list_entry> le_next;

  external ffi.Pointer<ffi.Pointer<session_list_entry>> le_prev;
}

final class UA_Session extends ffi.Struct {
  external UA_SessionHeader header;

  external UA_ApplicationDescription clientDescription;

  external UA_String sessionName;

  @ffi.Bool()
  external bool activated;

  external ffi.Pointer<ffi.Void> sessionHandle;

  external UA_NodeId sessionId;

  @UA_UInt32()
  external int maxRequestMessageSize;

  @UA_UInt32()
  external int maxResponseMessageSize;

  @UA_Double()
  external double timeout;

  @UA_DateTime()
  external int validTill;

  external UA_ByteString serverNonce;

  @UA_UInt16()
  external int availableContinuationPoints;

  external ffi.Pointer<ContinuationPoint> continuationPoints;

  @ffi.Size()
  external int paramsSize;

  external ffi.Pointer<UA_KeyValuePair> params;

  @ffi.Size()
  external int localeIdsSize;

  external ffi.Pointer<UA_String> localeIds;

  @ffi.Size()
  external int subscriptionsSize;

  external UnnamedStruct11 subscriptions;

  @ffi.Size()
  external int responseQueueSize;

  external UnnamedStruct12 responseQueue;

  @ffi.Size()
  external int totalRetransmissionQueueSize;
}

final class ContinuationPoint extends ffi.Struct {
  external ffi.Pointer<ContinuationPoint> next;

  external UA_ByteString identifier;

  external UA_BrowseDescription browseDescription;

  @UA_UInt32()
  external int maxReferences;

  external UA_ReferenceTypeSet relevantReferences;

  external UA_ExpandedNodeId nextTarget;

  @UA_Byte()
  external int nextRefKindIndex;
}

final class UA_ReferenceTypeSet extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<UA_UInt32> bits;
}

final class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<UA_Subscription> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_Subscription>> tqh_last;
}

final class UA_Subscription extends ffi.Struct {
  external UA_TimerEntry delayedFreePointers;

  external UnnamedStruct6 serverListEntry;

  external UnnamedStruct7 sessionListEntry;

  external ffi.Pointer<UA_Session> session;

  @UA_UInt32()
  external int subscriptionId;

  @UA_UInt32()
  external int lifeTimeCount;

  @UA_UInt32()
  external int maxKeepAliveCount;

  @UA_Double()
  external double publishingInterval;

  @UA_UInt32()
  external int notificationsPerPublish;

  @ffi.Bool()
  external bool publishingEnabled;

  @UA_Byte()
  external int priority;

  @ffi.Int32()
  external int state;

  @UA_StatusCode()
  external int statusChange;

  @UA_UInt32()
  external int nextSequenceNumber;

  @UA_UInt32()
  external int currentKeepAliveCount;

  @UA_UInt32()
  external int currentLifetimeCount;

  @UA_UInt64()
  external int publishCallbackId;

  @UA_UInt32()
  external int lastMonitoredItemId;

  external UnnamedStruct14 monitoredItems;

  @UA_UInt32()
  external int monitoredItemsSize;

  external UnnamedStruct15 samplingMonitoredItems;

  external UnnamedStruct16 notificationQueue;

  @UA_UInt32()
  external int notificationQueueSize;

  @UA_UInt32()
  external int dataChangeNotifications;

  @UA_UInt32()
  external int eventNotifications;

  external NotificationMessageQueue retransmissionQueue;

  @ffi.Size()
  external int retransmissionQueueSize;
}

final class UnnamedStruct6 extends ffi.Struct {
  external ffi.Pointer<UA_Subscription> le_next;

  external ffi.Pointer<ffi.Pointer<UA_Subscription>> le_prev;
}

final class UnnamedStruct7 extends ffi.Struct {
  external ffi.Pointer<UA_Subscription> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_Subscription>> tqe_prev;
}

/// /
abstract class UA_SubscriptionState {
  static const int UA_SUBSCRIPTIONSTATE_NORMAL = 0;
  static const int UA_SUBSCRIPTIONSTATE_LATE = 1;
  static const int UA_SUBSCRIPTIONSTATE_KEEPALIVE = 2;
}

final class UnnamedStruct14 extends ffi.Struct {
  external ffi.Pointer<UA_MonitoredItem> lh_first;
}

final class UA_MonitoredItem extends ffi.Opaque {}

final class UnnamedStruct15 extends ffi.Struct {
  external ffi.Pointer<UA_MonitoredItem> lh_first;
}

final class UnnamedStruct16 extends ffi.Struct {
  external ffi.Pointer<UA_Notification> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_Notification>> tqh_last;
}

final class UA_Notification extends ffi.Opaque {}

final class NotificationMessageQueue extends ffi.Struct {
  external ffi.Pointer<UA_NotificationMessageEntry> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_NotificationMessageEntry>> tqh_last;
}

final class UA_NotificationMessageEntry extends ffi.Struct {
  external UnnamedStruct19 listEntry;

  external UA_NotificationMessage message;
}

final class UnnamedStruct19 extends ffi.Struct {
  external ffi.Pointer<UA_NotificationMessageEntry> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_NotificationMessageEntry>> tqe_prev;
}

final class UnnamedStruct12 extends ffi.Struct {
  external ffi.Pointer<UA_PublishResponseEntry> sqh_first;

  external ffi.Pointer<ffi.Pointer<UA_PublishResponseEntry>> sqh_last;
}

final class UA_PublishResponseEntry extends ffi.Opaque {}

final class UA_Timer extends ffi.Struct {
  external aa_head root;

  external aa_head idRoot;

  @UA_UInt64()
  external int idCounter;

  external UA_Lock timerMutex;
}

final class aa_head extends ffi.Struct {
  external ffi.Pointer<aa_entry> root;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Void> a, ffi.Pointer<ffi.Void> b)>> cmp;

  @ffi.UnsignedInt()
  external int entry_offset;

  @ffi.UnsignedInt()
  external int key_offset;
}

abstract class aa_cmp {
  static const int AA_CMP_LESS = -1;
  static const int AA_CMP_EQ = 0;
  static const int AA_CMP_MORE = 1;
}

final class UnnamedStruct31 extends ffi.Struct {
  external ffi.Pointer<UA_Subscription> lh_first;
}

final class UnnamedStruct32 extends ffi.Struct {
  external ffi.Pointer<UA_MonitoredItem> lh_first;
}

final class UA_PubSubManager extends ffi.Struct {
  @ffi.Size()
  external int connectionsSize;

  external UA_ListOfPubSubConnection connections;

  @ffi.Size()
  external int publishedDataSetsSize;

  external UA_ListOfPublishedDataSet publishedDataSets;
}

final class UA_ListOfPubSubConnection extends ffi.Struct {
  external ffi.Pointer<UA_PubSubConnection> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_PubSubConnection>> tqh_last;
}

/// /
final class UA_PubSubConnection extends ffi.Struct {
  @ffi.Int32()
  external int componentType;

  external ffi.Pointer<UA_PubSubConnectionConfig> config;

  external ffi.Pointer<UA_PubSubChannel> channel;

  external UA_NodeId identifier;

  external UA_ListOfWriterGroup writerGroups;

  @ffi.Size()
  external int writerGroupsSize;

  external UA_ListOfPubSubReaderGroup readerGroups;

  @ffi.Size()
  external int readerGroupsSize;

  external UnnamedStruct38 listEntry;

  @UA_UInt16()
  external int configurationFreezeCounter;

  @ffi.Bool()
  external bool isRegistered;

  @ffi.Bool()
  external bool configurationFrozen;
}

/// .. _pubsub:
///
/// PubSub
/// ======
///
/// In PubSub the participating OPC UA Applications take their roles as
/// Publishers and Subscribers. Publishers are the sources of data, while
/// Subscribers consume that data. Communication in PubSub is message-based.
/// Publishers send messages to a Message Oriented Middleware, without knowledge
/// of what, if any, Subscribers there may be. Similarly, Subscribers express
/// interest in specific types of data, and process messages that contain this
/// data, without knowledge of what Publishers there are.
///
/// Message Oriented Middleware is software or hardware infrastructure that
/// supports sending and receiving messages between distributed systems. OPC UA
/// PubSub supports two different Message Oriented Middleware variants, namely
/// the broker-less form and broker-based form. A broker-less form is where the
/// Message Oriented Middleware is the network infrastructure that is able to
/// route datagram-based messages. Subscribers and Publishers use datagram
/// protocols like UDP. In a broker-based form, the core component of the Message
/// Oriented Middleware is a message Broker. Subscribers and Publishers use
/// standard messaging protocols like AMQP or MQTT to communicate with the
/// Broker.
///
/// This makes PubSub suitable for applications where location independence
/// and/or scalability are required.
///
/// The Publish/Subscribe (PubSub) extension for OPC UA enables fast and
/// efficient 1:m communication. The PubSub extension is protocol agnostic and
/// can be used with broker based protocols like MQTT and AMQP or brokerless
/// implementations like UDP-Multicasting.
///
/// The PubSub API uses the following scheme:
///
/// 1. Create a configuration for the needed PubSub element.
///
/// 2. Call the add[element] function and pass in the configuration.
///
/// 3. The add[element] function returns the unique nodeId of the internally created element.
///
/// Take a look on the PubSub Tutorials for more details about the API usage::
///
/// +-----------+
/// | UA_Server |
/// +-----------+
/// |    |
/// |    |
/// |    |
/// |    |  +----------------------+
/// |    +--> UA_PubSubConnection  |  UA_Server_addPubSubConnection
/// |       +----------------------+
/// |        |    |
/// |        |    |    +----------------+
/// |        |    +----> UA_WriterGroup |  UA_PubSubConnection_addWriterGroup
/// |        |         +----------------+
/// |        |              |
/// |        |              |    +------------------+
/// |        |              +----> UA_DataSetWriter |  UA_WriterGroup_addDataSetWriter     +-+
/// |        |                   +------------------+                                        |
/// |        |                                                                               |
/// |        |         +----------------+                                                    | r
/// |        +---------> UA_ReaderGroup |    UA_PubSubConnection_addReaderGroup              | e
/// |                  +----------------+                                                    | f
/// |                       |                                                                |
/// |                       |    +------------------+                                        |
/// |                       +----> UA_DataSetReader |  UA_ReaderGroup_addDataSetReader       |
/// |                            +------------------+                                        |
/// |                                 |                                                      |
/// |                                 |    +----------------------+                          |
/// |                                 +----> UA_SubscribedDataSet |                          |
/// |                                      +----------------------+                          |
/// |                                           |                                            |
/// |                                           |    +----------------------------+          |
/// |                                           +----> UA_TargetVariablesDataType |          |
/// |                                           |    +----------------------------+          |
/// |                                           |                                            |
/// |                                           |    +------------------------------------+  |
/// |                                           +----> UA_SubscribedDataSetMirrorDataType |  |
/// |                                                +------------------------------------+  |
/// |                                                                                        |
/// |       +---------------------------+                                                    |
/// +-------> UA_PubSubPublishedDataSet |  UA_Server_addPublishedDataSet                   <-+
/// +---------------------------+
/// |
/// |    +-----------------+
/// +----> UA_DataSetField |  UA_PublishedDataSet_addDataSetField
/// +-----------------+
///
/// PubSub Information Model Representation
/// ---------------------------------------
/// .. _pubsub_informationmodel:
///
/// The complete PubSub configuration is available inside the information model.
/// The entry point is the node 'PublishSubscribe', located under the Server
/// node.
/// The standard defines for PubSub no new Service set. The configuration can
/// optionally be done over methods inside the information model.
/// The information model representation of the current PubSub configuration is
/// generated automatically. This feature can be enabled/disabled by changing the
/// UA_ENABLE_PUBSUB_INFORMATIONMODEL option.
///
/// Connections
/// -----------
/// The PubSub connections are the abstraction between the concrete transport protocol
/// and the PubSub functionality. It is possible to create multiple connections with
/// different transport protocols at runtime.
///
/// Take a look on the PubSub Tutorials for mor details about the API usage.
abstract class UA_PubSubComponentEnumType {
  static const int UA_PUBSUB_COMPONENT_CONNECTION = 0;
  static const int UA_PUBSUB_COMPONENT_WRITERGROUP = 1;
  static const int UA_PUBSUB_COMPONENT_DATASETWRITER = 2;
  static const int UA_PUBSUB_COMPONENT_READERGROUP = 3;
  static const int UA_PUBSUB_COMPONENT_DATASETREADER = 4;
}

final class UA_ListOfWriterGroup extends ffi.Struct {
  external ffi.Pointer<UA_WriterGroup> lh_first;
}

/// /
final class UA_WriterGroup extends ffi.Struct {
  @ffi.Int32()
  external int componentType;

  external UA_WriterGroupConfig config;

  external UnnamedStruct33 listEntry;

  external UA_NodeId identifier;

  external ffi.Pointer<UA_PubSubConnection> linkedConnection;

  external UA_ListOfDataSetWriter writers;

  @UA_UInt32()
  external int writersCount;

  @UA_UInt64()
  external int publishCallbackId;

  @ffi.Bool()
  external bool publishCallbackIsRegistered;

  @ffi.Int32()
  external int state;

  external UA_NetworkMessageOffsetBuffer bufferedMessage;

  @UA_UInt16()
  external int sequenceNumber;

  @ffi.Bool()
  external bool configurationFrozen;
}

final class UA_WriterGroupConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Bool()
  external bool enabled;

  @UA_UInt16()
  external int writerGroupId;

  @UA_Duration()
  external double publishingInterval;

  @UA_Double()
  external double keepAliveTime;

  @UA_Byte()
  external int priority;

  external UA_ExtensionObject transportSettings;

  external UA_ExtensionObject messageSettings;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @ffi.Int32()
  external int encodingMimeType;

  external UA_PubSub_CallbackLifecycle pubsubManagerCallback;

  @UA_UInt16()
  external int maxEncapsulatedDataSetMessageCount;

  @ffi.Int32()
  external int rtLevel;

  @ffi.Int32()
  external int securityMode;
}

/// WriterGroup
/// -----------
/// All WriterGroups are created within a PubSubConnection and automatically
/// deleted if the connection is removed. The WriterGroup is primary used as
/// container for :ref:`dsw` and network message settings. The WriterGroup can be
/// imagined as producer of the network messages. The creation of network
/// messages is controlled by parameters like the publish interval, which is e.g.
/// contained in the WriterGroup.
abstract class UA_PubSubEncodingType {
  static const int UA_PUBSUB_ENCODING_BINARY = 0;
  static const int UA_PUBSUB_ENCODING_JSON = 1;
  static const int UA_PUBSUB_ENCODING_UADP = 2;
}

/// Custom Callback Implementation
/// ------------------------------
/// The user can use his own callback implementation for publishing
/// and subscribing. The user must take care of the callback to call for
/// every publishing or subscibing interval
final class UA_PubSub_CallbackLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId identifier,
              UA_ServerCallback callback,
              ffi.Pointer<ffi.Void> data,
              UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime,
              ffi.Int32 timerPolicy,
              ffi.Pointer<UA_UInt64> callbackId)>> addCustomCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              UA_NodeId identifier,
              UA_UInt64 callbackId,
              UA_Double interval_ms,
              ffi.Pointer<UA_DateTime> baseTime,
              ffi.Int32 timerPolicy)>> changeCustomCallback;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<UA_Server> server, UA_NodeId identifier,
              UA_UInt64 callbackId)>> removeCustomCallback;
}

typedef UA_ServerCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ServerCallbackFunction>>;
typedef UA_ServerCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);
typedef DartUA_ServerCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server, ffi.Pointer<ffi.Void> data);

/// WriterGroup
/// -----------
/// The message publishing can be configured for realtime requirements. The RT-levels
/// go along with different requirements. The below listed levels can be configured:
///
/// UA_PUBSUB_RT_NONE -
/// ---> Description: Default "none-RT" Mode
/// ---> Requirements: -
/// ---> Restrictions: -
/// UA_PUBSUB_RT_DIRECT_VALUE_ACCESS (Preview - not implemented)
/// ---> Description: Normally, the latest value for each DataSetField is read out of the information model. Within this RT-mode, the
/// value source of each field configured as static pointer to an DataValue. The publish cycle won't use call the server read function.
/// ---> Requirements: All fields must be configured with a 'staticValueSource'.
/// ---> Restrictions: -
/// UA_PUBSUB_RT_FIXED_LENGTH (Preview - not implemented)
/// ---> Description: All DataSetFields have a known, non-changing length. The server will pre-generate some
/// buffers and use only memcopy operations to generate requested PubSub packages.
/// ---> Requirements: DataSetFields with variable size cannot be used within this mode.
/// ---> Restrictions: The configuration must be frozen and changes are not allowed while the WriterGroup is 'Operational'.
/// UA_PUBSUB_RT_DETERMINISTIC (Preview - not implemented)
/// ---> Description: -
/// ---> Requirements: -
/// ---> Restrictions: -
///
/// WARNING! For hard real time requirements the underlying system must be rt-capable.
abstract class UA_PubSubRTLevel {
  static const int UA_PUBSUB_RT_NONE = 0;
  static const int UA_PUBSUB_RT_DIRECT_VALUE_ACCESS = 1;
  static const int UA_PUBSUB_RT_FIXED_SIZE = 2;
  static const int UA_PUBSUB_RT_DETERMINISTIC = 4;
}

final class UnnamedStruct33 extends ffi.Struct {
  external ffi.Pointer<UA_WriterGroup> le_next;

  external ffi.Pointer<ffi.Pointer<UA_WriterGroup>> le_prev;
}

final class UA_ListOfDataSetWriter extends ffi.Struct {
  external ffi.Pointer<UA_DataSetWriter> lh_first;
}

final class UA_DataSetWriter extends ffi.Struct {
  @ffi.Int32()
  external int componentType;

  external UA_DataSetWriterConfig config;

  external UnnamedStruct34 listEntry;

  external UA_NodeId identifier;

  external UA_NodeId linkedWriterGroup;

  external UA_NodeId connectedDataSet;

  external UA_ConfigurationVersionDataType connectedDataSetVersion;

  @ffi.Int32()
  external int state;

  @UA_UInt16()
  external int actualDataSetMessageSequenceCount;

  @ffi.Bool()
  external bool configurationFrozen;
}

/// .. _dsw:
///
/// DataSetWriter
/// -------------
/// The DataSetWriters are the glue between the WriterGroups and the
/// PublishedDataSets. The DataSetWriter contain configuration parameters and
/// flags which influence the creation of DataSet messages. These messages are
/// encapsulated inside the network message. The DataSetWriter must be linked
/// with an existing PublishedDataSet and be contained within a WriterGroup.
final class UA_DataSetWriterConfig extends ffi.Struct {
  external UA_String name;

  @UA_UInt16()
  external int dataSetWriterId;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_UInt32()
  external int keyFrameCount;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  external UA_String dataSetName;

  @ffi.Size()
  external int dataSetWriterPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> dataSetWriterProperties;
}

final class UnnamedStruct34 extends ffi.Struct {
  external ffi.Pointer<UA_DataSetWriter> le_next;

  external ffi.Pointer<ffi.Pointer<UA_DataSetWriter>> le_prev;
}

final class UA_NetworkMessageOffsetBuffer extends ffi.Struct {
  external UA_ByteString buffer;

  external ffi.Pointer<UA_NetworkMessageOffset> offsets;

  @ffi.Size()
  external int offsetsSize;

  @ffi.Bool()
  external bool RTsubscriberEnabled;

  external ffi.Pointer<UA_NetworkMessage> nm;

  @ffi.Size()
  external int rawMessageLength;
}

final class UA_NetworkMessageOffset extends ffi.Struct {
  @ffi.Int32()
  external int contentType;

  external UnnamedUnion11 offsetData;

  @ffi.Size()
  external int offset;
}

/// /
abstract class UA_NetworkMessageOffsetType {
  static const int UA_PUBSUB_OFFSETTYPE_DATASETMESSAGE_SEQUENCENUMBER = 0;
  static const int UA_PUBSUB_OFFSETTYPE_NETWORKMESSAGE_SEQUENCENUMBER = 1;
  static const int UA_PUBSUB_OFFSETTYPE_NETWORKMESSAGE_FIELDENCDODING = 2;
  static const int UA_PUBSUB_OFFSETTYPE_TIMESTAMP_PICOSECONDS = 3;
  static const int UA_PUBSUB_OFFSETTYPE_TIMESTAMP = 4;
  static const int UA_PUBSUB_OFFSETTYPE_TIMESTAMP_NOW = 5;
  static const int UA_PUBSUB_OFFSETTYPE_PAYLOAD_DATAVALUE = 6;
  static const int UA_PUBSUB_OFFSETTYPE_PAYLOAD_VARIANT = 7;
  static const int UA_PUBSUB_OFFSETTYPE_PAYLOAD_RAW = 8;
  static const int UA_PUBSUB_OFFSETTYPE_PUBLISHERID = 9;
  static const int UA_PUBSUB_OFFSETTYPE_WRITERGROUPID = 10;
  static const int UA_PUBSUB_OFFSETTYPE_DATASETWRITERID = 11;
}

final class UnnamedUnion11 extends ffi.Union {
  external UnnamedStruct35 value;

  external ffi.Pointer<UA_DateTime> timestamp;
}

final class UnnamedStruct35 extends ffi.Struct {
  external ffi.Pointer<UA_DataValue> value;

  @ffi.Size()
  external int valueBinarySize;
}

/// UA_NetworkMessage
/// ^^^^^^^^^^^^^^^^^
final class UA_NetworkMessage extends ffi.Struct {
  @UA_Byte()
  external int version;

  @ffi.Bool()
  external bool messageIdEnabled;

  external UA_String messageId;

  @ffi.Bool()
  external bool publisherIdEnabled;

  @ffi.Bool()
  external bool groupHeaderEnabled;

  @ffi.Bool()
  external bool payloadHeaderEnabled;

  @ffi.Int32()
  external int publisherIdType;

  @ffi.Bool()
  external bool dataSetClassIdEnabled;

  @ffi.Bool()
  external bool securityEnabled;

  @ffi.Bool()
  external bool timestampEnabled;

  @ffi.Bool()
  external bool picosecondsEnabled;

  @ffi.Bool()
  external bool chunkMessage;

  @ffi.Bool()
  external bool promotedFieldsEnabled;

  @ffi.Int32()
  external int networkMessageType;

  external UnnamedUnion12 publisherId;

  external UA_Guid dataSetClassId;

  external UA_NetworkMessageGroupHeader groupHeader;

  external UnnamedUnion13 payloadHeader;

  @UA_DateTime()
  external int timestamp;

  @UA_UInt16()
  external int picoseconds;

  @UA_UInt16()
  external int promotedFieldsSize;

  external ffi.Pointer<UA_Variant> promotedFields;

  external UA_NetworkMessageSecurityHeader securityHeader;

  external UnnamedUnion14 payload;

  external UA_ByteString securityFooter;
}

abstract class UA_PublisherIdDatatype {
  static const int UA_PUBLISHERDATATYPE_BYTE = 0;
  static const int UA_PUBLISHERDATATYPE_UINT16 = 1;
  static const int UA_PUBLISHERDATATYPE_UINT32 = 2;
  static const int UA_PUBLISHERDATATYPE_UINT64 = 3;
  static const int UA_PUBLISHERDATATYPE_STRING = 4;
}

abstract class UA_NetworkMessageType {
  static const int UA_NETWORKMESSAGE_DATASET = 0;
  static const int UA_NETWORKMESSAGE_DISCOVERY_REQUEST = 1;
  static const int UA_NETWORKMESSAGE_DISCOVERY_RESPONSE = 2;
}

final class UnnamedUnion12 extends ffi.Union {
  @UA_Byte()
  external int publisherIdByte;

  @UA_UInt16()
  external int publisherIdUInt16;

  @UA_UInt32()
  external int publisherIdUInt32;

  @UA_UInt64()
  external int publisherIdUInt64;

  external UA_Guid publisherIdGuid;

  external UA_String publisherIdString;
}

/// UA_NetworkMessageGroupHeader
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_NetworkMessageGroupHeader extends ffi.Struct {
  @ffi.Bool()
  external bool writerGroupIdEnabled;

  @ffi.Bool()
  external bool groupVersionEnabled;

  @ffi.Bool()
  external bool networkMessageNumberEnabled;

  @ffi.Bool()
  external bool sequenceNumberEnabled;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt32()
  external int groupVersion;

  @UA_UInt16()
  external int networkMessageNumber;

  @UA_UInt16()
  external int sequenceNumber;
}

final class UnnamedUnion13 extends ffi.Union {
  external UA_DataSetPayloadHeader dataSetPayloadHeader;
}

/// amalgamated original file "/src/pubsub/ua_pubsub_networkmessage.h"
final class UA_DataSetPayloadHeader extends ffi.Struct {
  @UA_Byte()
  external int count;

  external ffi.Pointer<UA_UInt16> dataSetWriterIds;
}

/// UA_NetworkMessageSecurityHeader
/// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
final class UA_NetworkMessageSecurityHeader extends ffi.Struct {
  @ffi.Bool()
  external bool networkMessageSigned;

  @ffi.Bool()
  external bool networkMessageEncrypted;

  @ffi.Bool()
  external bool securityFooterEnabled;

  @ffi.Bool()
  external bool forceKeyReset;

  @UA_UInt32()
  external int securityTokenId;

  external UA_ByteString messageNonce;

  @UA_UInt16()
  external int securityFooterSize;
}

final class UnnamedUnion14 extends ffi.Union {
  external UA_DataSetPayload dataSetPayload;
}

final class UA_DataSetPayload extends ffi.Struct {
  external ffi.Pointer<UA_UInt16> sizes;

  external ffi.Pointer<UA_DataSetMessage> dataSetMessages;
}

final class UA_DataSetMessage extends ffi.Struct {
  external UA_DataSetMessageHeader header;

  external UnnamedUnion15 data;
}

final class UA_DataSetMessageHeader extends ffi.Struct {
  @ffi.Bool()
  external bool dataSetMessageValid;

  @ffi.Int32()
  external int fieldEncoding;

  @ffi.Bool()
  external bool dataSetMessageSequenceNrEnabled;

  @ffi.Bool()
  external bool timestampEnabled;

  @ffi.Bool()
  external bool statusEnabled;

  @ffi.Bool()
  external bool configVersionMajorVersionEnabled;

  @ffi.Bool()
  external bool configVersionMinorVersionEnabled;

  @ffi.Int32()
  external int dataSetMessageType;

  @ffi.Bool()
  external bool picoSecondsIncluded;

  @UA_UInt16()
  external int dataSetMessageSequenceNr;

  @UA_UtcTime()
  external int timestamp;

  @UA_UInt16()
  external int picoSeconds;

  @UA_UInt16()
  external int status;

  @UA_UInt32()
  external int configVersionMajorVersion;

  @UA_UInt32()
  external int configVersionMinorVersion;
}

abstract class UA_FieldEncoding {
  static const int UA_FIELDENCODING_VARIANT = 0;
  static const int UA_FIELDENCODING_RAWDATA = 1;
  static const int UA_FIELDENCODING_DATAVALUE = 2;
  static const int UA_FIELDENCODING_UNKNOWN = 3;
}

abstract class UA_DataSetMessageType {
  static const int UA_DATASETMESSAGE_DATAKEYFRAME = 0;
  static const int UA_DATASETMESSAGE_DATADELTAFRAME = 1;
  static const int UA_DATASETMESSAGE_EVENT = 2;
  static const int UA_DATASETMESSAGE_KEEPALIVE = 3;
}

final class UnnamedUnion15 extends ffi.Union {
  external UA_DataSetMessage_DataKeyFrameData keyFrameData;

  external UA_DataSetMessage_DataDeltaFrameData deltaFrameData;
}

/// DataSetMessage
/// ^^^^^^^^^^^^^^
final class UA_DataSetMessage_DataKeyFrameData extends ffi.Struct {
  @UA_UInt16()
  external int fieldCount;

  external ffi.Pointer<UA_DataValue> dataSetFields;

  external UA_ByteString rawFields;

  external ffi.Pointer<UA_String> fieldNames;
}

final class UA_DataSetMessage_DataDeltaFrameData extends ffi.Struct {
  @UA_UInt16()
  external int fieldCount;

  external ffi.Pointer<UA_DataSetMessage_DeltaFrameField> deltaFrameFields;
}

final class UA_DataSetMessage_DeltaFrameField extends ffi.Opaque {}

final class UA_ListOfPubSubReaderGroup extends ffi.Struct {
  external ffi.Pointer<UA_ReaderGroup> lh_first;
}

/// /
final class UA_ReaderGroup extends ffi.Struct {
  @ffi.Int32()
  external int componentType;

  external UA_ReaderGroupConfig config;

  external UA_NodeId identifier;

  external UA_NodeId linkedConnection;

  external UnnamedStruct36 listEntry;

  external UA_ListOfPubSubDataSetReader readers;

  @UA_UInt32()
  external int readersCount;

  @UA_UInt64()
  external int subscribeCallbackId;

  @ffi.Int32()
  external int state;

  @ffi.Bool()
  external bool configurationFrozen;
}

/// ReaderGroup
/// -----------
///
/// ReaderGroup is used to group a list of DataSetReaders. All ReaderGroups are
/// created within a PubSubConnection and automatically deleted if the connection
/// is removed. All network message related filters are only available in the
/// DataSetReader.
///
/// The RT-levels go along with different requirements. The below listed levels
/// can be configured for a ReaderGroup.
///
/// - UA_PUBSUB_RT_NONE: RT applied to this level
/// - PUBSUB_CONFIG_FASTPATH_FIXED_OFFSETS: Extends PubSub RT functionality and
/// implements fast path message decoding in the Subscriber. Uses a buffered
/// network message and only decodes the necessary offsets stored in an offset
/// buffer.
final class UA_ReaderGroupConfig extends ffi.Struct {
  external UA_String name;

  external UA_PubSubSecurityParameters securityParameters;

  external UA_PubSub_CallbackLifecycle pubsubManagerCallback;

  @UA_Duration()
  external double subscribingInterval;

  @ffi.Bool()
  external bool enableBlockingSocket;

  @UA_UInt32()
  external int timeout;

  @ffi.Int32()
  external int rtLevel;

  @ffi.Size()
  external int groupPropertiesSize;

  external ffi.Pointer<UA_KeyValuePair> groupProperties;

  @ffi.Int32()
  external int securityMode;
}

/// DataSetReader
/// -------------
/// DataSetReader can receive NetworkMessages with the DataSetMessage
/// of interest sent by the Publisher. DataSetReaders represent
/// the configuration necessary to receive and process DataSetMessages
/// on the Subscriber side. DataSetReader must be linked with a
/// SubscribedDataSet and be contained within a ReaderGroup.
final class UA_PubSubSecurityParameters extends ffi.Struct {
  @UA_Int32()
  external int securityMode;

  external UA_String securityGroupId;

  @ffi.Size()
  external int keyServersSize;

  external ffi.Pointer<UA_Int32> keyServers;
}

final class UnnamedStruct36 extends ffi.Struct {
  external ffi.Pointer<UA_ReaderGroup> le_next;

  external ffi.Pointer<ffi.Pointer<UA_ReaderGroup>> le_prev;
}

final class UA_ListOfPubSubDataSetReader extends ffi.Struct {
  external ffi.Pointer<UA_DataSetReader> lh_first;
}

/// /
final class UA_DataSetReader extends ffi.Struct {
  @ffi.Int32()
  external int componentType;

  external UA_DataSetReaderConfig config;

  external UA_NodeId identifier;

  external UA_NodeId linkedReaderGroup;

  external UnnamedStruct37 listEntry;

  @ffi.Int32()
  external int state;

  @ffi.Bool()
  external bool configurationFrozen;

  external UA_NetworkMessageOffsetBuffer bufferedMessage;
}

final class UA_DataSetReaderConfig extends ffi.Struct {
  external UA_String name;

  external UA_Variant publisherId;

  @UA_UInt16()
  external int writerGroupId;

  @UA_UInt16()
  external int dataSetWriterId;

  external UA_DataSetMetaDataType dataSetMetaData;

  @UA_DataSetFieldContentMask()
  external int dataSetFieldContentMask;

  @UA_Double()
  external double messageReceiveTimeout;

  external UA_PubSubSecurityParameters securityParameters;

  external UA_ExtensionObject messageSettings;

  external UA_ExtensionObject transportSettings;

  @ffi.Int32()
  external int subscribedDataSetType;

  external UnnamedUnion16 subscribedDataSet;

  @ffi.Int32()
  external int expectedEncoding;
}

/// SubscribedDataSet
/// -----------------
/// SubscribedDataSet describes the processing of the received DataSet.
/// SubscribedDataSet defines which field in the DataSet is mapped to which
/// Variable in the OPC UA Application. SubscribedDataSet has two sub-types
/// called the TargetVariablesType and SubscribedDataSetMirrorType.
/// SubscribedDataSetMirrorType is currently not supported. SubscribedDataSet is
/// set to TargetVariablesType and then the list of target Variables are created
/// in the Subscriber AddressSpace. TargetVariables are a list of variables that
/// are to be added in the Subscriber AddressSpace. It defines a list of Variable
/// mappings between received DataSet fields and added Variables in the
/// Subscriber AddressSpace.
abstract class UA_SubscribedDataSetEnumType {
  static const int UA_PUBSUB_SDS_TARGET = 0;
  static const int UA_PUBSUB_SDS_MIRROR = 1;
}

final class UnnamedUnion16 extends ffi.Union {
  external UA_TargetVariables subscribedDataSetTarget;
}

final class UA_TargetVariables extends ffi.Struct {
  @ffi.Size()
  external int targetVariablesSize;

  external ffi.Pointer<UA_FieldTargetVariable> targetVariables;
}

final class UA_FieldTargetVariable extends ffi.Struct {
  external UA_FieldTargetDataType targetVariable;

  external ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue;

  external ffi.Pointer<ffi.Void> targetVariableContext;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_NodeId> readerIdentifier,
                  ffi.Pointer<UA_NodeId> readerGroupIdentifier,
                  ffi.Pointer<UA_NodeId> targetVariableIdentifier,
                  ffi.Pointer<ffi.Void> targetVariableContext,
                  ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue)>>
      beforeWrite;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<UA_Server> server,
                  ffi.Pointer<UA_NodeId> readerIdentifier,
                  ffi.Pointer<UA_NodeId> readerGroupIdentifier,
                  ffi.Pointer<UA_NodeId> targetVariableIdentifier,
                  ffi.Pointer<ffi.Void> targetVariableContext,
                  ffi.Pointer<ffi.Pointer<UA_DataValue>> externalDataValue)>>
      afterWrite;
}

abstract class UA_PubSubRtEncoding {
  static const int UA_PUBSUB_RT_UNKNOWN = 0;
  static const int UA_PUBSUB_RT_VARIANT = 1;
  static const int UA_PUBSUB_RT_DATA_VALUE = 2;
  static const int UA_PUBSUB_RT_RAW = 4;
}

final class UnnamedStruct37 extends ffi.Struct {
  external ffi.Pointer<UA_DataSetReader> le_next;

  external ffi.Pointer<ffi.Pointer<UA_DataSetReader>> le_prev;
}

final class UnnamedStruct38 extends ffi.Struct {
  external ffi.Pointer<UA_PubSubConnection> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_PubSubConnection>> tqe_prev;
}

final class UA_ListOfPublishedDataSet extends ffi.Struct {
  external ffi.Pointer<UA_PublishedDataSet> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_PublishedDataSet>> tqh_last;
}

/// /
final class UA_PublishedDataSet extends ffi.Struct {
  external UA_PublishedDataSetConfig config;

  external UA_DataSetMetaDataType dataSetMetaData;

  external UA_ListOfDataSetField fields;

  external UA_NodeId identifier;

  @UA_UInt16()
  external int fieldSize;

  @UA_UInt16()
  external int promotedFieldsCount;

  @UA_UInt16()
  external int configurationFreezeCounter;

  external UnnamedStruct41 listEntry;

  @ffi.Bool()
  external bool configurationFrozen;
}

final class UA_PublishedDataSetConfig extends ffi.Struct {
  external UA_String name;

  @ffi.Int32()
  external int publishedDataSetType;

  external UnnamedUnion17 config;
}

/// PublishedDataSets
/// -----------------
/// The PublishedDataSets (PDS) are containers for the published information. The
/// PDS contain the published variables and meta information. The metadata is
/// commonly autogenerated or given as constant argument as part of the template
/// functions. The template functions are standard defined and intended for
/// configuration tools. You should normally create an empty PDS and call the
/// functions to add new fields.
abstract class UA_PublishedDataSetType {
  static const int UA_PUBSUB_DATASET_PUBLISHEDITEMS = 0;
  static const int UA_PUBSUB_DATASET_PUBLISHEDEVENTS = 1;
  static const int UA_PUBSUB_DATASET_PUBLISHEDITEMS_TEMPLATE = 2;
  static const int UA_PUBSUB_DATASET_PUBLISHEDEVENTS_TEMPLATE = 3;
}

final class UnnamedUnion17 extends ffi.Union {
  external UA_PublishedDataItemsTemplateConfig itemsTemplate;

  external UA_PublishedEventConfig event;

  external UA_PublishedEventTemplateConfig eventTemplate;
}

final class UA_PublishedDataItemsTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  @ffi.Size()
  external int variablesToAddSize;

  external ffi.Pointer<UA_PublishedVariableDataType> variablesToAdd;
}

final class UA_PublishedEventConfig extends ffi.Struct {
  external UA_NodeId eventNotfier;

  external UA_ContentFilter filter;
}

final class UA_PublishedEventTemplateConfig extends ffi.Struct {
  external UA_DataSetMetaDataType metaData;

  external UA_NodeId eventNotfier;

  @ffi.Size()
  external int selectedFieldsSize;

  external ffi.Pointer<UA_SimpleAttributeOperand> selectedFields;

  external UA_ContentFilter filter;
}

final class UA_ListOfDataSetField extends ffi.Struct {
  external ffi.Pointer<UA_DataSetField> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_DataSetField>> tqh_last;
}

/// /
final class UA_DataSetField extends ffi.Struct {
  external UA_DataSetFieldConfig config;

  external UnnamedStruct40 listEntry;

  external UA_NodeId identifier;

  external UA_NodeId publishedDataSet;

  external UA_FieldMetaData fieldMetaData;

  @UA_UInt64()
  external int sampleCallbackId;

  @ffi.Bool()
  external bool sampleCallbackIsRegistered;

  @ffi.Bool()
  external bool configurationFrozen;
}

final class UA_DataSetFieldConfig extends ffi.Struct {
  @ffi.Int32()
  external int dataSetFieldType;

  external UnnamedUnion18 field;
}

abstract class UA_DataSetFieldType {
  static const int UA_PUBSUB_DATASETFIELD_VARIABLE = 0;
  static const int UA_PUBSUB_DATASETFIELD_EVENT = 1;
}

final class UnnamedUnion18 extends ffi.Union {
  external UA_DataSetVariableConfig variable;
}

/// DataSetFields
/// -------------
/// The description of published variables is named DataSetField. Each
/// DataSetField contains the selection of one information model node. The
/// DataSetField has additional parameters for the publishing, sampling and error
/// handling process.
final class UA_DataSetVariableConfig extends ffi.Struct {
  external UA_ConfigurationVersionDataType configurationVersion;

  external UA_String fieldNameAlias;

  @ffi.Bool()
  external bool promotedField;

  external UA_PublishedVariableDataType publishParameters;

  external UnnamedStruct39 rtValueSource;
}

final class UnnamedStruct39 extends ffi.Struct {
  @ffi.Bool()
  external bool rtFieldSourceEnabled;

  @ffi.Bool()
  external bool rtInformationModelNode;

  external ffi.Pointer<ffi.Pointer<UA_DataValue>> staticValueSource;
}

final class UnnamedStruct40 extends ffi.Struct {
  external ffi.Pointer<UA_DataSetField> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_DataSetField>> tqe_prev;
}

final class UnnamedStruct41 extends ffi.Struct {
  external ffi.Pointer<UA_PublishedDataSet> tqe_next;

  external ffi.Pointer<ffi.Pointer<UA_PublishedDataSet>> tqe_prev;
}

final class UA_Client extends ffi.Struct {
  external UA_ClientConfig config;

  external UA_Timer timer;

  @UA_StatusCode()
  external int connectStatus;

  @ffi.Int32()
  external int oldChannelState;

  @ffi.Int32()
  external int oldSessionState;

  @UA_StatusCode()
  external int oldConnectStatus;

  @ffi.Bool()
  external bool findServersHandshake;

  @ffi.Bool()
  external bool endpointsHandshake;

  @ffi.Bool()
  external bool noSession;

  external UA_Connection connection;

  external UA_String endpointUrl;

  external UA_String discoveryUrl;

  external UA_SecureChannel channel;

  @UA_UInt32()
  external int requestId;

  @UA_DateTime()
  external int nextChannelRenewal;

  @ffi.Int32()
  external int sessionState;

  external UA_NodeId authenticationToken;

  @UA_UInt32()
  external int requestHandle;

  external UA_ByteString remoteNonce;

  external UA_ByteString localNonce;

  @UA_DateTime()
  external int lastConnectivityCheck;

  @ffi.Bool()
  external bool pendingConnectivityCheck;

  external UnnamedStruct42 asyncServiceCalls;

  external UnnamedStruct44 pendingNotificationsAcks;

  external UnnamedStruct46 subscriptions;

  @UA_UInt32()
  external int monitoredItemHandles;

  @UA_UInt16()
  external int currentlyOutStandingPublishRequests;
}

/// .. _client:
///
/// Client
/// ======
///
/// The client implementation allows remote access to all OPC UA services. For
/// convenience, some functionality has been wrapped in :ref:`high-level
/// abstractions <client-highlevel>`.
///
/// **However**: At this time, the client does not yet contain its own thread or
/// event-driven main-loop, meaning that the client will not perform any actions
/// automatically in the background. This is especially relevant for
/// connection/session management and subscriptions. The user will have to
/// periodically call `UA_Client_run_iterate` to ensure that asynchronous events
/// are handled, including keeping a secure connection established.
/// See more about :ref:`asynchronicity<client-async-services>` and
/// :ref:`subscriptions<client-subscriptions>`.
///
/// .. _client-config:
///
/// Client Configuration
/// --------------------
///
/// The client configuration is used for setting connection parameters and
/// additional settings used by the client.
/// The configuration should not be modified after it is passed to a client.
/// Currently, only one client can use a configuration at a time.
///
/// Examples for configurations are provided in the ``/plugins`` folder.
/// The usual usage is as follows:
///
/// 1. Create a client configuration with default settings as a starting point
/// 2. Modifiy the configuration, e.g. modifying the timeout
/// 3. Instantiate a client with it
/// 4. After shutdown of the client, clean up the configuration (free memory)
///
/// The :ref:`tutorials` provide a good starting point for this.
final class UA_ClientConfig extends ffi.Struct {
  external ffi.Pointer<ffi.Void> clientContext;

  external UA_Logger logger;

  @UA_UInt32()
  external int timeout;

  external UA_ApplicationDescription clientDescription;

  /// Connection configuration
  /// ~~~~~~~~~~~~~~~~~~~~~~~~
  ///
  /// The following configuration elements reduce the "degrees of freedom" the
  /// client has when connecting to a server. If no connection can be made
  /// under these restrictions, then the connection will abort with an error
  /// message.
  external UA_ExtensionObject userIdentityToken;

  @ffi.Int32()
  external int securityMode;

  external UA_String securityPolicyUri;

  /// If either endpoint or userTokenPolicy has been set (at least one non-zero
  /// byte in either structure), then the selected Endpoint and UserTokenPolicy
  /// overwrite the settings in the basic connection configuration. The
  /// userTokenPolicy array in the EndpointDescription is ignored. The selected
  /// userTokenPolicy is set in the dedicated configuration field.
  ///
  /// If the advanced configuration is not set, the client will write to it the
  /// selected Endpoint and UserTokenPolicy during GetEndpoints.
  ///
  /// The information in the advanced configuration is used during reconnect
  /// when the SecureChannel was broken.
  external UA_EndpointDescription endpoint;

  external UA_UserTokenPolicy userTokenPolicy;

  /// If the EndpointDescription has not been defined, the ApplicationURI
  /// constrains the servers considered in the FindServers service and the
  /// Endpoints considered in the GetEndpoints service.
  ///
  /// If empty the applicationURI is not used to filter.
  external UA_String applicationUri;

  /// Custom Data Types
  /// ~~~~~~~~~~~~~~~~~
  /// The following is a linked list of arrays with custom data types. All data
  /// types that are accessible from here are automatically considered for the
  /// decoding of received messages. Custom data types are not cleaned up
  /// together with the configuration. So it is possible to allocate them on
  /// ROM.
  ///
  /// See the section on :ref:`generic-types`. Examples for working with custom
  /// data types are provided in ``/examples/custom_datatype/``.
  external ffi.Pointer<UA_DataTypeArray> customDataTypes;

  /// Advanced Client Configuration
  /// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  @UA_UInt32()
  external int secureChannelLifeTime;

  @UA_UInt32()
  external int requestedSessionTimeout;

  external UA_ConnectionConfig localConnectionConfig;

  @UA_UInt32()
  external int connectivityCheckInterval;

  @ffi.Size()
  external int securityPoliciesSize;

  external ffi.Pointer<UA_SecurityPolicy> securityPolicies;

  external UA_CertificateVerification certificateVerification;

  external UA_ConnectClientConnection initConnectionFunc;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Connection> connection,
              UA_UInt32 timeout,
              ffi.Pointer<UA_Logger> logger)>> pollConnectionFunc;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Client> client,
              ffi.Int32 channelState,
              ffi.Int32 sessionState,
              UA_StatusCode connectStatus)>> stateCallback;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UA_Client> client)>>
      inactivityCallback;

  @UA_UInt16()
  external int outStandingPublishRequests;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<UA_Client> client,
                  UA_UInt32 subscriptionId, ffi.Pointer<ffi.Void> subContext)>>
      subscriptionInactivityCallback;

  external ffi.Pointer<UA_LocaleId> sessionLocaleIds;

  @ffi.Size()
  external int sessionLocaleIdsSize;
}

typedef UA_ConnectClientConnection
    = ffi.Pointer<ffi.NativeFunction<UA_ConnectClientConnectionFunction>>;
typedef UA_ConnectClientConnectionFunction = UA_Connection Function(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    UA_UInt32 timeout,
    ffi.Pointer<UA_Logger> logger);
typedef DartUA_ConnectClientConnectionFunction = UA_Connection Function(
    UA_ConnectionConfig config,
    UA_String endpointUrl,
    DartUA_UInt32 timeout,
    ffi.Pointer<UA_Logger> logger);

final class UnnamedStruct42 extends ffi.Struct {
  external ffi.Pointer<AsyncServiceCall> lh_first;
}

/// /
final class AsyncServiceCall extends ffi.Struct {
  external UnnamedStruct43 pointers;

  @UA_UInt32()
  external int requestId;

  external UA_ClientAsyncServiceCallback callback;

  external ffi.Pointer<UA_DataType> responseType;

  external ffi.Pointer<ffi.Void> userdata;

  @UA_DateTime()
  external int start;

  @UA_UInt32()
  external int timeout;

  external ffi.Pointer<ffi.Void> responsedata;
}

final class UnnamedStruct43 extends ffi.Struct {
  external ffi.Pointer<AsyncServiceCall> le_next;

  external ffi.Pointer<ffi.Pointer<AsyncServiceCall>> le_prev;
}

/// .. _client-async-services:
///
/// Asynchronous Services
/// ---------------------
/// All OPC UA services are asynchronous in nature. So several service calls can
/// be made without waiting for the individual responses. Depending on the
/// server's priorities responses may come in a different ordering than sent.
///
/// As noted in :ref:`the client overview<client>` currently no means
/// of handling asynchronous events automatically is provided. However, some
/// synchronous function calls will trigger handling, but to ensure this
/// happens a client should periodically call `UA_Client_run_iterate`
/// explicitly.
///
/// Connection and session management are also performed in
/// `UA_Client_run_iterate`, so to keep a connection healthy any client need to
/// consider how and when it is appropriate to do the call.
/// This is especially true for the periodic renewal of a SecureChannel's
/// SecurityToken which is designed to have a limited lifetime and will
/// invalidate the connection if not renewed.
typedef UA_ClientAsyncServiceCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncServiceCallbackFunction>>;
typedef UA_ClientAsyncServiceCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<ffi.Void> response);
typedef DartUA_ClientAsyncServiceCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<ffi.Void> response);

final class UnnamedStruct44 extends ffi.Struct {
  external ffi.Pointer<UA_Client_NotificationsAckNumber> lh_first;
}

final class UA_Client_NotificationsAckNumber extends ffi.Struct {
  external UnnamedStruct45 listEntry;

  external UA_SubscriptionAcknowledgement subAck;
}

final class UnnamedStruct45 extends ffi.Struct {
  external ffi.Pointer<UA_Client_NotificationsAckNumber> le_next;

  external ffi.Pointer<ffi.Pointer<UA_Client_NotificationsAckNumber>> le_prev;
}

final class UnnamedStruct46 extends ffi.Struct {
  external ffi.Pointer<UA_Client_Subscription> lh_first;
}

final class UA_Client_Subscription extends ffi.Struct {
  external UnnamedStruct47 listEntry;

  @UA_UInt32()
  external int subscriptionId;

  external ffi.Pointer<ffi.Void> context;

  @UA_Double()
  external double publishingInterval;

  @UA_UInt32()
  external int maxKeepAliveCount;

  external UA_Client_StatusChangeNotificationCallback statusChangeCallback;

  external UA_Client_DeleteSubscriptionCallback deleteCallback;

  @UA_UInt32()
  external int sequenceNumber;

  @UA_DateTime()
  external int lastActivity;

  external UnnamedStruct48 monitoredItems;
}

final class UnnamedStruct47 extends ffi.Struct {
  external ffi.Pointer<UA_Client_Subscription> le_next;

  external ffi.Pointer<ffi.Pointer<UA_Client_Subscription>> le_prev;
}

typedef UA_Client_StatusChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Client_StatusChangeNotificationCallbackFunction>>;
typedef UA_Client_StatusChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    ffi.Pointer<UA_StatusChangeNotification> notification);
typedef DartUA_Client_StatusChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    ffi.Pointer<UA_StatusChangeNotification> notification);

/// .. _client-subscriptions:
///
/// Subscriptions
/// -------------
///
/// Subscriptions in OPC UA are asynchronous. That is, the client sends several
/// PublishRequests to the server. The server returns PublishResponses with
/// notifications. But only when a notification has been generated. The client
/// does not wait for the responses and continues normal operations.
///
/// Note the difference between Subscriptions and MonitoredItems. Subscriptions
/// are used to report back notifications. MonitoredItems are used to generate
/// notifications. Every MonitoredItem is attached to exactly one Subscription.
/// And a Subscription can contain many MonitoredItems.
///
/// The client automatically processes PublishResponses (with a callback) in the
/// background and keeps enough PublishRequests in transit. The PublishResponses
/// may be recieved during a synchronous service call or in
/// ``UA_Client_run_iterate``. See more about
/// :ref:`asynchronicity<client-async-services>`.
typedef UA_Client_DeleteSubscriptionCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_DeleteSubscriptionCallbackFunction>>;
typedef UA_Client_DeleteSubscriptionCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext);
typedef DartUA_Client_DeleteSubscriptionCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext);

final class UnnamedStruct48 extends ffi.Struct {
  external ffi.Pointer<UA_Client_MonitoredItem> lh_first;
}

final class UA_Client_MonitoredItem extends ffi.Struct {
  external UnnamedStruct49 listEntry;

  @UA_UInt32()
  external int monitoredItemId;

  @UA_UInt32()
  external int clientHandle;

  external ffi.Pointer<ffi.Void> context;

  external UA_Client_DeleteMonitoredItemCallback deleteCallback;

  external UnnamedUnion19 handler;

  @ffi.Bool()
  external bool isEventMonitoredItem;
}

final class UnnamedStruct49 extends ffi.Struct {
  external ffi.Pointer<UA_Client_MonitoredItem> le_next;

  external ffi.Pointer<ffi.Pointer<UA_Client_MonitoredItem>> le_prev;
}

/// The clientHandle parameter cannot be set by the user, any value will be replaced
/// by the client before sending the request to the server.
typedef UA_Client_DeleteMonitoredItemCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_DeleteMonitoredItemCallbackFunction>>;
typedef UA_Client_DeleteMonitoredItemCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext);
typedef DartUA_Client_DeleteMonitoredItemCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext);

final class UnnamedUnion19 extends ffi.Union {
  external UA_Client_DataChangeNotificationCallback dataChangeCallback;

  external UA_Client_EventNotificationCallback eventCallback;
}

typedef UA_Client_DataChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Client_DataChangeNotificationCallbackFunction>>;
typedef UA_Client_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Client_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Pointer<UA_DataValue> value);
typedef UA_Client_EventNotificationCallback = ffi
    .Pointer<ffi.NativeFunction<UA_Client_EventNotificationCallbackFunction>>;
typedef UA_Client_EventNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    UA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    UA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    ffi.Size nEventFields,
    ffi.Pointer<UA_Variant> eventFields);
typedef DartUA_Client_EventNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    DartUA_UInt32 subId,
    ffi.Pointer<ffi.Void> subContext,
    DartUA_UInt32 monId,
    ffi.Pointer<ffi.Void> monContext,
    int nEventFields,
    ffi.Pointer<UA_Variant> eventFields);

/// Node Type Lifecycle
/// ~~~~~~~~~~~~~~~~~~~
/// Constructor and destructors for specific object and variable types.
final class UA_NodeTypeLifecycle extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> constructor;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> typeNodeId,
              ffi.Pointer<ffi.Void> typeNodeContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Pointer<ffi.Void>> nodeContext)>> destructor;
}

/// Node Pointer
/// ============
///
/// The "native" format for reference between nodes is the ExpandedNodeId. That
/// is, references can also point to external servers. In practice, most
/// references point to local nodes using numerical NodeIds from the
/// standard-defined namespace zero. In order to save space (and time),
/// pointer-tagging is used for compressed "NodePointer" representations.
/// Numerical NodeIds are immediately contained in the pointer. Full NodeIds and
/// ExpandedNodeIds are behind a pointer indirection. If the Nodestore supports
/// it, a NodePointer can also be an actual pointer to the target node.
///
/// Depending on the processor architecture, some numerical NodeIds don't fit
/// into an immediate encoding and are kept as pointers. ExpandedNodeIds may be
/// internally translated to "normal" NodeIds. Use the provided functions to
/// generate NodePointers that fit the assumptions for the local architecture.
final class UA_NodeHead extends ffi.Struct {
  external UA_NodeId nodeId;

  @ffi.Int32()
  external int nodeClass;

  external UA_QualifiedName browseName;

  external UA_LocalizedText displayName;

  external UA_LocalizedText description;

  @UA_UInt32()
  external int writeMask;

  @ffi.Size()
  external int referencesSize;

  external ffi.Pointer<UA_NodeReferenceKind> references;

  external ffi.Pointer<ffi.Void> context;

  @ffi.Bool()
  external bool constructed;

  external ffi.Pointer<UA_MonitoredItem> monitoredItems;
}

final class UA_NodeReferenceKind extends ffi.Struct {
  external UnnamedUnion3 targets;

  @ffi.Size()
  external int targetsSize;

  @ffi.Bool()
  external bool hasRefTree;

  @UA_Byte()
  external int referenceTypeIndex;

  @ffi.Bool()
  external bool isInverse;
}

final class UnnamedUnion3 extends ffi.Union {
  external ffi.Pointer<UA_ReferenceTarget> array;

  external UnnamedStruct4 tree;
}

/// Base Node Attributes
/// --------------------
///
/// Nodes contain attributes according to their node type. The base node
/// attributes are common to all node types. In the OPC UA :ref:`services`,
/// attributes are referred to via the :ref:`nodeid` of the containing node and
/// an integer :ref:`attribute-id`.
///
/// Internally, open62541 uses ``UA_Node`` in places where the exact node type is
/// not known or not important. The ``nodeClass`` attribute is used to ensure the
/// correctness of casting from ``UA_Node`` to a specific node type.
final class UA_ReferenceTarget extends ffi.Struct {
  external UA_NodePointer targetId;

  @UA_UInt32()
  external int targetNameHash;
}

final class UA_NodePointer extends ffi.Union {
  @ffi.UintPtr()
  external int immediate;

  external ffi.Pointer<UA_NodeId> id;

  external ffi.Pointer<UA_ExpandedNodeId> expandedId;

  external ffi.Pointer<UA_NodeHead> node;
}

final class UnnamedStruct4 extends ffi.Struct {
  external ffi.Pointer<aa_entry> idTreeRoot;

  external ffi.Pointer<aa_entry> nameTreeRoot;
}

final class UA_ReferenceTargetTreeElem extends ffi.Struct {
  external UA_ReferenceTarget target;

  @UA_UInt32()
  external int targetIdHash;

  external aa_entry idTreeEntry;

  external aa_entry nameTreeEntry;
}

/// VariableNode
/// ------------
///
/// Variables store values in a :ref:`datavalue` together with
/// metadata for introspection. Most notably, the attributes data type, value
/// rank and array dimensions constrain the possible values the variable can take
/// on.
///
/// Variables come in two flavours: properties and datavariables. Properties are
/// related to a parent with a ``hasProperty`` reference and may not have child
/// nodes themselves. Datavariables may contain properties (``hasProperty``) and
/// also datavariables (``hasComponents``).
///
/// All variables are instances of some :ref:`variabletypenode` in return
/// constraining the possible data type, value rank and array dimensions
/// attributes.
///
/// Data Type
/// ~~~~~~~~~
///
/// The (scalar) data type of the variable is constrained to be of a specific
/// type or one of its children in the type hierarchy. The data type is given as
/// a NodeId pointing to a :ref:`datatypenode` in the type hierarchy. See the
/// Section :ref:`datatypenode` for more details.
///
/// If the data type attribute points to ``UInt32``, then the value attribute
/// must be of that exact type since ``UInt32`` does not have children in the
/// type hierarchy. If the data type attribute points ``Number``, then the type
/// of the value attribute may still be ``UInt32``, but also ``Float`` or
/// ``Byte``.
///
/// Consistency between the data type attribute in the variable and its
/// :ref:`VariableTypeNode` is ensured.
///
/// Value Rank
/// ~~~~~~~~~~
///
/// This attribute indicates whether the value attribute of the variable is an
/// array and how many dimensions the array has. It may have the following
/// values:
///
/// - ``n >= 1``: the value is an array with the specified number of dimensions
/// - ``n =  0``: the value is an array with one or more dimensions
/// - ``n = -1``: the value is a scalar
/// - ``n = -2``: the value can be a scalar or an array with any number of dimensions
/// - ``n = -3``: the value can be a scalar or a one dimensional array
///
/// Consistency between the value rank attribute in the variable and its
/// :ref:`variabletypenode` is ensured.
///
/// Array Dimensions
/// ~~~~~~~~~~~~~~~~
///
/// If the value rank permits the value to be a (multi-dimensional) array, the
/// exact length in each dimensions can be further constrained with this
/// attribute.
///
/// - For positive lengths, the variable value is guaranteed to be of the same
/// length in this dimension.
/// - The dimension length zero is a wildcard and the actual value may have any
/// length in this dimension.
///
/// Consistency between the array dimensions attribute in the variable and its
/// :ref:`variabletypenode` is ensured.
abstract class UA_ValueSource {
  static const int UA_VALUESOURCE_DATA = 0;
  static const int UA_VALUESOURCE_DATASOURCE = 1;
}

final class UA_ValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> onRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> onWrite;
}

final class UA_DataSource extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Bool includeSourceTimeStamp,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> value)>> write;
}

/// .. _value-callback:
///
/// Value Callback
/// ~~~~~~~~~~~~~~
/// Value Callbacks can be attached to variable and variable type nodes. If
/// not ``NULL``, they are called before reading and after writing respectively.
final class UA_ExternalValueCallback extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeid,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range)>> notificationRead;

  external ffi.Pointer<
      ffi.NativeFunction<
          UA_StatusCode Function(
              ffi.Pointer<UA_Server> server,
              ffi.Pointer<UA_NodeId> sessionId,
              ffi.Pointer<ffi.Void> sessionContext,
              ffi.Pointer<UA_NodeId> nodeId,
              ffi.Pointer<ffi.Void> nodeContext,
              ffi.Pointer<UA_NumericRange> range,
              ffi.Pointer<UA_DataValue> data)>> userWrite;
}

abstract class UA_ValueBackendType {
  static const int UA_VALUEBACKENDTYPE_NONE = 0;
  static const int UA_VALUEBACKENDTYPE_INTERNAL = 1;
  static const int UA_VALUEBACKENDTYPE_DATA_SOURCE_CALLBACK = 2;
  static const int UA_VALUEBACKENDTYPE_EXTERNAL = 3;
}

final class UA_ValueBackend extends ffi.Opaque {}

final class UA_VariableNode extends ffi.Opaque {}

/// .. _variabletypenode:
///
/// VariableTypeNode
/// ----------------
///
/// VariableTypes are used to provide type definitions for variables.
/// VariableTypes constrain the data type, value rank and array dimensions
/// attributes of variable instances. Furthermore, instantiating from a specific
/// variable type may provide semantic information. For example, an instance from
/// ``MotorTemperatureVariableType`` is more meaningful than a float variable
/// instantiated from ``BaseDataVariable``.
final class UA_VariableTypeNode extends ffi.Opaque {}

final class UA_MethodNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool executable;

  external UA_MethodCallback method;

  @ffi.Bool()
  external bool async1;
}

/// .. _methodnode:
///
/// MethodNode
/// ----------
///
/// Methods define callable functions and are invoked using the :ref:`Call
/// <method-services>` service. MethodNodes may have special properties (variable
/// children with a ``hasProperty`` reference) with the :ref:`qualifiedname` ``(0,
/// "InputArguments")`` and ``(0, "OutputArguments")``. The input and output
/// arguments are both described via an array of ``UA_Argument``. While the Call
/// service uses a generic array of :ref:`variant` for input and output, the
/// actual argument values are checked to match the signature of the MethodNode.
///
/// Note that the same MethodNode may be referenced from several objects (and
/// object types). For this, the NodeId of the method *and of the object
/// providing context* is part of a Call request message.
typedef UA_MethodCallback
    = ffi.Pointer<ffi.NativeFunction<UA_MethodCallbackFunction>>;
typedef UA_MethodCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    ffi.Size inputSize,
    ffi.Pointer<UA_Variant> input,
    ffi.Size outputSize,
    ffi.Pointer<UA_Variant> output);
typedef DartUA_MethodCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_NodeId> sessionId,
    ffi.Pointer<ffi.Void> sessionContext,
    ffi.Pointer<UA_NodeId> methodId,
    ffi.Pointer<ffi.Void> methodContext,
    ffi.Pointer<UA_NodeId> objectId,
    ffi.Pointer<ffi.Void> objectContext,
    int inputSize,
    ffi.Pointer<UA_Variant> input,
    int outputSize,
    ffi.Pointer<UA_Variant> output);

/// ObjectNode
/// ----------
///
/// Objects are used to represent systems, system components, real-world objects
/// and software objects. Objects are instances of an :ref:`object
/// type<objecttypenode>` and may contain variables, methods and further
/// objects.
final class UA_ObjectNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;
}

/// .. _objecttypenode:
///
/// ObjectTypeNode
/// --------------
///
/// ObjectTypes provide definitions for Objects. Abstract objects cannot be
/// instantiated. See :ref:`node-lifecycle` for the use of constructor and
/// destructor callbacks.
final class UA_ObjectTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  external UA_NodeTypeLifecycle lifecycle;
}

/// .. _referencetypenode:
///
/// ReferenceTypeNode
/// -----------------
///
/// Each reference between two nodes is typed with a ReferenceType that gives
/// meaning to the relation. The OPC UA standard defines a set of ReferenceTypes
/// as a mandatory part of OPC UA information models.
///
/// - Abstract ReferenceTypes cannot be used in actual references and are only
/// used to structure the ReferenceTypes hierarchy
/// - Symmetric references have the same meaning from the perspective of the
/// source and target node
///
/// The figure below shows the hierarchy of the standard ReferenceTypes (arrows
/// indicate a ``hasSubType`` relation). Refer to Part 3 of the OPC UA
/// specification for the full semantics of each ReferenceType.
///
/// .. graphviz::
///
/// digraph tree {
///
/// node [height=0, shape=box, fillcolor="#E5E5E5", concentrate=true]
///
/// references [label="References\n(Abstract, Symmetric)"]
/// hierarchical_references [label="HierarchicalReferences\n(Abstract)"]
/// references -> hierarchical_references
///
/// nonhierarchical_references [label="NonHierarchicalReferences\n(Abstract, Symmetric)"]
/// references -> nonhierarchical_references
///
/// haschild [label="HasChild\n(Abstract)"]
/// hierarchical_references -> haschild
///
/// aggregates [label="Aggregates\n(Abstract)"]
/// haschild -> aggregates
///
/// organizes [label="Organizes"]
/// hierarchical_references -> organizes
///
/// hascomponent [label="HasComponent"]
/// aggregates -> hascomponent
///
/// hasorderedcomponent [label="HasOrderedComponent"]
/// hascomponent -> hasorderedcomponent
///
/// hasproperty [label="HasProperty"]
/// aggregates -> hasproperty
///
/// hassubtype [label="HasSubtype"]
/// haschild -> hassubtype
///
/// hasmodellingrule [label="HasModellingRule"]
/// nonhierarchical_references -> hasmodellingrule
///
/// hastypedefinition [label="HasTypeDefinition"]
/// nonhierarchical_references -> hastypedefinition
///
/// hasencoding [label="HasEncoding"]
/// nonhierarchical_references -> hasencoding
///
/// hasdescription [label="HasDescription"]
/// nonhierarchical_references -> hasdescription
///
/// haseventsource [label="HasEventSource"]
/// hierarchical_references -> haseventsource
///
/// hasnotifier [label="HasNotifier"]
/// hierarchical_references -> hasnotifier
///
/// generatesevent [label="GeneratesEvent"]
/// nonhierarchical_references -> generatesevent
///
/// alwaysgeneratesevent [label="AlwaysGeneratesEvent"]
/// generatesevent -> alwaysgeneratesevent
///
/// {rank=same hierarchical_references nonhierarchical_references}
/// {rank=same generatesevent haseventsource hasmodellingrule
/// hasencoding hassubtype}
/// {rank=same alwaysgeneratesevent hasproperty}
///
/// }
///
/// The ReferenceType hierarchy can be extended with user-defined ReferenceTypes.
/// Many Companion Specifications for OPC UA define new ReferenceTypes to be used
/// in their domain of interest.
///
/// For the following example of custom ReferenceTypes, we attempt to model the
/// structure of a technical system. For this, we introduce two custom
/// ReferenceTypes. First, the hierarchical ``contains`` ReferenceType indicates
/// that a system (represented by an OPC UA object) contains a component (or
/// subsystem). This gives rise to a tree-structure of containment relations. For
/// example, the motor (object) is contained in the car and the crankshaft is
/// contained in the motor. Second, the symmetric ``connectedTo`` ReferenceType
/// indicates that two components are connected. For example, the motor's
/// crankshaft is connected to the gear box. Connections are independent of the
/// containment hierarchy and can induce a general graph-structure. Further
/// subtypes of ``connectedTo`` could be used to differentiate between physical,
/// electrical and information related connections. A client can then learn the
/// layout of a (physical) system represented in an OPC UA information model
/// based on a common understanding of just two custom reference types.
final class UA_ReferenceTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;

  @ffi.Bool()
  external bool symmetric;

  external UA_LocalizedText inverseName;

  @UA_Byte()
  external int referenceTypeIndex;

  external UA_ReferenceTypeSet subTypes;
}

/// .. _datatypenode:
///
/// DataTypeNode
/// ------------
///
/// DataTypes represent simple and structured data types. DataTypes may contain
/// arrays. But they always describe the structure of a single instance. In
/// open62541, DataTypeNodes in the information model hierarchy are matched to
/// ``UA_DataType`` type descriptions for :ref:`generic-types` via their NodeId.
///
/// Abstract DataTypes (e.g. ``Number``) cannot be the type of actual values.
/// They are used to constrain values to possible child DataTypes (e.g.
/// ``UInt32``).
final class UA_DataTypeNode extends ffi.Struct {
  external UA_NodeHead head;

  @ffi.Bool()
  external bool isAbstract;
}

/// ViewNode
/// --------
///
/// Each View defines a subset of the Nodes in the AddressSpace. Views can be
/// used when browsing an information model to focus on a subset of nodes and
/// references only. ViewNodes can be created and be interacted with. But their
/// use in the :ref:`Browse<view-services>` service is currently unsupported in
/// open62541.
final class UA_ViewNode extends ffi.Struct {
  external UA_NodeHead head;

  @UA_Byte()
  external int eventNotifier;

  @ffi.Bool()
  external bool containsNoLoops;
}

final class UA_AddPublishedDataSetResult extends ffi.Struct {
  @UA_StatusCode()
  external int addResult;

  @ffi.Size()
  external int fieldAddResultsSize;

  external ffi.Pointer<UA_StatusCode> fieldAddResults;

  external UA_ConfigurationVersionDataType configurationVersion;
}

final class UA_DataSetFieldResult extends ffi.Struct {
  @UA_StatusCode()
  external int result;

  external UA_ConfigurationVersionDataType configurationVersion;
}

typedef UA_NodeIteratorCallback
    = ffi.Pointer<ffi.NativeFunction<UA_NodeIteratorCallbackFunction>>;
typedef UA_NodeIteratorCallbackFunction = UA_StatusCode Function(
    UA_NodeId childId,
    ffi.Bool isInverse,
    UA_NodeId referenceTypeId,
    ffi.Pointer<ffi.Void> handle);
typedef DartUA_NodeIteratorCallbackFunction = DartUA_StatusCode Function(
    UA_NodeId childId,
    bool isInverse,
    UA_NodeId referenceTypeId,
    ffi.Pointer<ffi.Void> handle);
typedef UA_Server_DataChangeNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<UA_Server_DataChangeNotificationCallbackFunction>>;
typedef UA_Server_DataChangeNotificationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server,
    UA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    UA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_Server_DataChangeNotificationCallbackFunction = void Function(
    ffi.Pointer<UA_Server> server,
    DartUA_UInt32 monitoredItemId,
    ffi.Pointer<ffi.Void> monitoredItemContext,
    ffi.Pointer<UA_NodeId> nodeId,
    ffi.Pointer<ffi.Void> nodeContext,
    DartUA_UInt32 attributeId,
    ffi.Pointer<UA_DataValue> value);

abstract class UA_AsyncOperationType {
  static const int UA_ASYNCOPERATIONTYPE_INVALID = 0;
  static const int UA_ASYNCOPERATIONTYPE_CALL = 1;
}

final class UA_AsyncOperationRequest extends ffi.Union {
  external UA_CallMethodRequest callMethodRequest;
}

final class UA_AsyncOperationResponse extends ffi.Union {
  external UA_CallMethodResult callMethodResult;
}

/// Statistics
/// ----------
///
/// Statistic counters keeping track of the current state of the stack. Counters
/// are structured per OPC UA communication layer.
final class UA_ServerStatistics extends ffi.Struct {
  external UA_NetworkStatistics ns;

  external UA_SecureChannelStatistics scs;

  external UA_SessionStatistics ss;
}

/// Timed Callbacks
/// ---------------
/// Repeated callbacks can be attached to a client and will be executed in the
/// defined interval.
typedef UA_ClientCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientCallbackFunction>>;
typedef UA_ClientCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);
typedef DartUA_ClientCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client, ffi.Pointer<ffi.Void> data);

/// Async Services
/// ^^^^^^^^^^^^^^
///
/// Call OPC UA Services asynchronously with a callback. The (optional) requestId
/// output can be used to cancel the service while it is still pending.
typedef UA_ClientAsyncReadCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncReadCallbackFunction>>;
typedef UA_ClientAsyncReadCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_ReadResponse> rr);
typedef DartUA_ClientAsyncReadCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_ReadResponse> rr);
typedef UA_ClientAsyncWriteCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncWriteCallbackFunction>>;
typedef UA_ClientAsyncWriteCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_WriteResponse> wr);
typedef DartUA_ClientAsyncWriteCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_WriteResponse> wr);
typedef UA_ClientAsyncBrowseCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncBrowseCallbackFunction>>;
typedef UA_ClientAsyncBrowseCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_BrowseResponse> wr);
typedef DartUA_ClientAsyncBrowseCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_BrowseResponse> wr);

/// Read Attribute
/// ^^^^^^^^^^^^^^
///
/// Asynchronously read a single attribute. The attribute is unpacked from the
/// response as the datatype of the attribute is known ahead of time. Value
/// attributes are variants.
///
/// Note that the last argument (value pointer) of the callbacks can be NULL if
/// the status of the operation is not good.
typedef UA_ClientAsyncReadAttributeCallback = ffi
    .Pointer<ffi.NativeFunction<UA_ClientAsyncReadAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_DataValue> attribute);
typedef DartUA_ClientAsyncReadAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_DataValue> attribute);
typedef UA_ClientAsyncReadValueAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadValueAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_DataValue> value);
typedef DartUA_ClientAsyncReadValueAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_DataValue> value);
typedef UA_ClientAsyncReadDataTypeAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDataTypeAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDataTypeAttributeCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<UA_NodeId> dataType);
typedef DartUA_ClientAsyncReadDataTypeAttributeCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<UA_NodeId> dataType);
typedef UA_ClientReadArrayDimensionsAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientReadArrayDimensionsAttributeCallbackFunction>>;
typedef UA_ClientReadArrayDimensionsAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Variant> arrayDimensions);
typedef DartUA_ClientReadArrayDimensionsAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Variant> arrayDimensions);
typedef UA_ClientAsyncReadNodeClassAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadNodeClassAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadNodeClassAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Int32> nodeClass);
typedef DartUA_ClientAsyncReadNodeClassAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Int32> nodeClass);
typedef UA_ClientAsyncReadBrowseNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadBrowseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadBrowseNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_QualifiedName> browseName);
typedef DartUA_ClientAsyncReadBrowseNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_QualifiedName> browseName);
typedef UA_ClientAsyncReadDisplayNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDisplayNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDisplayNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> displayName);
typedef DartUA_ClientAsyncReadDisplayNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> displayName);
typedef UA_ClientAsyncReadDescriptionAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadDescriptionAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadDescriptionAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> description);
typedef DartUA_ClientAsyncReadDescriptionAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> description);
typedef UA_ClientAsyncReadWriteMaskAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadWriteMaskAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadWriteMaskAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef DartUA_ClientAsyncReadUserWriteMaskAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_UInt32> writeMask);
typedef UA_ClientAsyncReadIsAbstractAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadIsAbstractAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadIsAbstractAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> isAbstract);
typedef DartUA_ClientAsyncReadIsAbstractAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> isAbstract);
typedef UA_ClientAsyncReadSymmetricAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadSymmetricAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadSymmetricAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> symmetric);
typedef DartUA_ClientAsyncReadSymmetricAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> symmetric);
typedef UA_ClientAsyncReadInverseNameAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadInverseNameAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadInverseNameAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> inverseName);
typedef DartUA_ClientAsyncReadInverseNameAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_LocalizedText> inverseName);
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> containsNoLoops);
typedef DartUA_ClientAsyncReadContainsNoLoopsAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> containsNoLoops);
typedef UA_ClientAsyncReadEventNotifierAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadEventNotifierAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadEventNotifierAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> eventNotifier);
typedef DartUA_ClientAsyncReadEventNotifierAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> eventNotifier);
typedef UA_ClientAsyncReadValueRankAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadValueRankAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadValueRankAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Int32> valueRank);
typedef DartUA_ClientAsyncReadValueRankAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Int32> valueRank);
typedef UA_ClientAsyncReadAccessLevelAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadAccessLevelAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> accessLevel);
typedef DartUA_ClientAsyncReadAccessLevelAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> accessLevel);
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Byte> userAccessLevel);
typedef DartUA_ClientAsyncReadUserAccessLevelAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Byte> userAccessLevel);
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<
        UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef DartUA_ClientAsyncReadMinimumSamplingIntervalAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<UA_Double> minimumSamplingInterval);
typedef UA_ClientAsyncReadHistorizingAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadHistorizingAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadHistorizingAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> historizing);
typedef DartUA_ClientAsyncReadHistorizingAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> historizing);
typedef UA_ClientAsyncReadExecutableAttributeCallback = ffi.Pointer<
    ffi.NativeFunction<UA_ClientAsyncReadExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadExecutableAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> executable);
typedef DartUA_ClientAsyncReadExecutableAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> executable);
typedef UA_ClientAsyncReadUserExecutableAttributeCallback = ffi.Pointer<
    ffi
    .NativeFunction<UA_ClientAsyncReadUserExecutableAttributeCallbackFunction>>;
typedef UA_ClientAsyncReadUserExecutableAttributeCallbackFunction
    = ffi.Void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        UA_UInt32 requestId,
        UA_StatusCode status,
        ffi.Pointer<ffi.Bool> userExecutable);
typedef DartUA_ClientAsyncReadUserExecutableAttributeCallbackFunction
    = void Function(
        ffi.Pointer<UA_Client> client,
        ffi.Pointer<ffi.Void> userdata,
        DartUA_UInt32 requestId,
        DartUA_StatusCode status,
        ffi.Pointer<ffi.Bool> userExecutable);
typedef UA_ClientAsyncCallCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncCallCallbackFunction>>;
typedef UA_ClientAsyncCallCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_CallResponse> cr);
typedef DartUA_ClientAsyncCallCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_CallResponse> cr);

/// Node Management
/// ^^^^^^^^^^^^^^^
typedef UA_ClientAsyncAddNodesCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncAddNodesCallbackFunction>>;
typedef UA_ClientAsyncAddNodesCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_AddNodesResponse> ar);
typedef DartUA_ClientAsyncAddNodesCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_AddNodesResponse> ar);

/// amalgamated original file "/plugins/include/open62541/plugin/accesscontrol_default.h"
final class UA_UsernamePasswordLogin extends ffi.Struct {
  external UA_String username;

  external UA_String password;
}

typedef UA_FFI_Callback_method_async
    = ffi.Pointer<ffi.NativeFunction<UA_FFI_Callback_method_asyncFunction>>;
typedef UA_FFI_Callback_method_asyncFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    ffi.Pointer<UA_Variant> response);
typedef DartUA_FFI_Callback_method_asyncFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    ffi.Pointer<UA_Variant> response);

/// amalgamated original file "/src/ua_types_encoding_binary.h"
typedef UA_exchangeEncodeBuffer
    = ffi.Pointer<ffi.NativeFunction<UA_exchangeEncodeBufferFunction>>;
typedef UA_exchangeEncodeBufferFunction = UA_StatusCode Function(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufEnd);
typedef DartUA_exchangeEncodeBufferFunction = DartUA_StatusCode Function(
    ffi.Pointer<ffi.Void> handle,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufPos,
    ffi.Pointer<ffi.Pointer<UA_Byte>> bufEnd);

final class UA_Request extends ffi.Union {
  external UA_RequestHeader requestHeader;

  external UA_FindServersRequest findServersRequest;

  external UA_GetEndpointsRequest getEndpointsRequest;

  external UA_OpenSecureChannelRequest openSecureChannelRequest;

  external UA_CreateSessionRequest createSessionRequest;

  external UA_ActivateSessionRequest activateSessionRequest;

  external UA_CloseSessionRequest closeSessionRequest;

  external UA_AddNodesRequest addNodesRequest;

  external UA_AddReferencesRequest addReferencesRequest;

  external UA_DeleteNodesRequest deleteNodesRequest;

  external UA_DeleteReferencesRequest deleteReferencesRequest;

  external UA_BrowseRequest browseRequest;

  external UA_BrowseNextRequest browseNextRequest;

  external UA_TranslateBrowsePathsToNodeIdsRequest
      translateBrowsePathsToNodeIdsRequest;

  external UA_RegisterNodesRequest registerNodesRequest;

  external UA_UnregisterNodesRequest unregisterNodesRequest;

  external UA_ReadRequest readRequest;

  external UA_WriteRequest writeRequest;

  external UA_CallRequest callRequest;

  external UA_CreateMonitoredItemsRequest createMonitoredItemsRequest;

  external UA_DeleteMonitoredItemsRequest deleteMonitoredItemsRequest;

  external UA_ModifyMonitoredItemsRequest modifyMonitoredItemsRequest;

  external UA_SetMonitoringModeRequest setMonitoringModeRequest;

  external UA_CreateSubscriptionRequest createSubscriptionRequest;

  external UA_ModifySubscriptionRequest modifySubscriptionRequest;

  external UA_SetPublishingModeRequest setPublishingModeRequest;

  external UA_PublishRequest publishRequest;

  external UA_RepublishRequest republishRequest;

  external UA_DeleteSubscriptionsRequest deleteSubscriptionsRequest;
}

final class UA_Response extends ffi.Opaque {}

/// TcpMessageHeader
/// ^^^^^^^^^^^^^^^^
/// TCP Header
final class UA_TcpMessageHeader extends ffi.Struct {
  @UA_UInt32()
  external int messageTypeAndChunkType;

  @UA_UInt32()
  external int messageSize;
}

/// TcpHelloMessage
/// ^^^^^^^^^^^^^^^
/// Hello Message
final class UA_TcpHelloMessage extends ffi.Struct {
  @UA_UInt32()
  external int protocolVersion;

  @UA_UInt32()
  external int receiveBufferSize;

  @UA_UInt32()
  external int sendBufferSize;

  @UA_UInt32()
  external int maxMessageSize;

  @UA_UInt32()
  external int maxChunkCount;

  external UA_String endpointUrl;
}

/// TcpAcknowledgeMessage
/// ^^^^^^^^^^^^^^^^^^^^^
/// Acknowledge Message
final class UA_TcpAcknowledgeMessage extends ffi.Struct {
  @UA_UInt32()
  external int protocolVersion;

  @UA_UInt32()
  external int receiveBufferSize;

  @UA_UInt32()
  external int sendBufferSize;

  @UA_UInt32()
  external int maxMessageSize;

  @UA_UInt32()
  external int maxChunkCount;
}

/// TcpErrorMessage
/// ^^^^^^^^^^^^^^^
/// Error Message
final class UA_TcpErrorMessage extends ffi.Struct {
  @UA_UInt32()
  external int error;

  external UA_String reason;
}

/// SequenceHeader
/// ^^^^^^^^^^^^^^
/// Secure Layer Sequence Header
final class UA_SequenceHeader extends ffi.Struct {
  @UA_UInt32()
  external int sequenceNumber;

  @UA_UInt32()
  external int requestId;
}

final class UA_MessageContext extends ffi.Struct {
  external ffi.Pointer<UA_SecureChannel> channel;

  @UA_UInt32()
  external int requestId;

  @UA_UInt32()
  external int messageType;

  @UA_UInt16()
  external int chunksSoFar;

  @ffi.Size()
  external int messageSizeSoFar;

  external UA_ByteString messageBuffer;

  external ffi.Pointer<UA_Byte> buf_pos;

  external ffi.Pointer<UA_Byte> buf_end;

  @ffi.Bool()
  external bool final1;
}

/// Receive Message
/// ---------------
typedef UA_ProcessMessageCallback = ffi.NativeFunction<
    UA_StatusCode Function(
        ffi.Pointer<ffi.Void> application,
        ffi.Pointer<UA_SecureChannel> channel,
        ffi.Int32 messageType,
        UA_UInt32 requestId,
        ffi.Pointer<UA_ByteString> message)>;
typedef UA_TimerExecutionCallback
    = ffi.Pointer<ffi.NativeFunction<UA_TimerExecutionCallbackFunction>>;
typedef UA_TimerExecutionCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> executionApplication,
    UA_ApplicationCallback cb,
    ffi.Pointer<ffi.Void> callbackApplication,
    ffi.Pointer<ffi.Void> data);
typedef DartUA_TimerExecutionCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> executionApplication,
    UA_ApplicationCallback cb,
    ffi.Pointer<ffi.Void> callbackApplication,
    ffi.Pointer<ffi.Void> data);

final class NotificationQueue extends ffi.Struct {
  external ffi.Pointer<UA_Notification> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_Notification>> tqh_last;
}

/// /
abstract class UA_MonitoredItemSamplingType {
  static const int UA_MONITOREDITEMSAMPLINGTYPE_NONE = 0;
  static const int UA_MONITOREDITEMSAMPLINGTYPE_CYCLIC = 1;
  static const int UA_MONITOREDITEMSAMPLINGTYPE_EVENT = 2;
  static const int UA_MONITOREDITEMSAMPLINGTYPE_PUBLISH = 3;
}

final class UA_ConditionSource extends ffi.Opaque {}

typedef UA_AsyncServiceOperation
    = ffi.Pointer<ffi.NativeFunction<UA_AsyncServiceOperationFunction>>;
typedef UA_AsyncServiceOperationFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    UA_UInt32 requestId,
    UA_UInt32 requestHandle,
    ffi.Size opIndex,
    ffi.Pointer<ffi.Void> requestOperation,
    ffi.Pointer<ffi.Void> responseOperation,
    ffi.Pointer<ffi.Pointer<UA_AsyncResponse>> ar);
typedef DartUA_AsyncServiceOperationFunction = void Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    DartUA_UInt32 requestId,
    DartUA_UInt32 requestHandle,
    int opIndex,
    ffi.Pointer<ffi.Void> requestOperation,
    ffi.Pointer<ffi.Void> responseOperation,
    ffi.Pointer<ffi.Pointer<UA_AsyncResponse>> ar);

final class UA_LocalMonitoredItem extends ffi.Opaque {}

abstract class UA_DiagnosticEvent {
  static const int UA_DIAGNOSTICEVENT_CLOSE = 0;
  static const int UA_DIAGNOSTICEVENT_REJECT = 1;
  static const int UA_DIAGNOSTICEVENT_SECURITYREJECT = 2;
  static const int UA_DIAGNOSTICEVENT_TIMEOUT = 3;
  static const int UA_DIAGNOSTICEVENT_ABORT = 4;
  static const int UA_DIAGNOSTICEVENT_PURGE = 5;
}

/// /
typedef UA_EditNodeCallback
    = ffi.Pointer<ffi.NativeFunction<UA_EditNodeCallbackFunction>>;
typedef UA_EditNodeCallbackFunction = UA_StatusCode Function(
    ffi.Pointer<UA_Server>,
    ffi.Pointer<UA_Session>,
    ffi.Pointer<UA_Node>,
    ffi.Pointer<ffi.Void>);
typedef DartUA_EditNodeCallbackFunction = DartUA_StatusCode Function(
    ffi.Pointer<UA_Server>,
    ffi.Pointer<UA_Session>,
    ffi.Pointer<UA_Node>,
    ffi.Pointer<ffi.Void>);
typedef UA_ServiceOperation
    = ffi.Pointer<ffi.NativeFunction<UA_ServiceOperationFunction>>;
typedef UA_ServiceOperationFunction = ffi.Void Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Void> requestOperation,
    ffi.Pointer<ffi.Void> responseOperation);
typedef DartUA_ServiceOperationFunction = void Function(
    ffi.Pointer<UA_Server> server,
    ffi.Pointer<UA_Session> session,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Void> requestOperation,
    ffi.Pointer<ffi.Void> responseOperation);
typedef pcg32_random_t = pcg_state_setseq_64;

final class pcg_state_setseq_64 extends ffi.Struct {
  @ffi.Uint64()
  external int state;

  @ffi.Uint64()
  external int inc;
}

final class Ctx extends ffi.Struct {
  external ffi.Pointer<u8> pos;

  external ffi.Pointer<u8> end;

  @u16()
  external int depth;

  external ffi.Pointer<UA_DataTypeArray> customTypes;

  external UA_exchangeEncodeBuffer exchangeBufferCallback;

  external ffi.Pointer<ffi.Void> exchangeBufferCallbackHandle;
}

typedef u8 = UA_Byte;
typedef u16 = UA_UInt16;

abstract class UA_VARIANT_ENCODINGMASKTYPE {
  static const int UA_VARIANT_ENCODINGMASKTYPE_TYPEID_MASK = 63;
  static const int UA_VARIANT_ENCODINGMASKTYPE_DIMENSIONS = 64;
  static const int UA_VARIANT_ENCODINGMASKTYPE_ARRAY = 128;
}

/// /
final class UA_PrintElement extends ffi.Opaque {}

final class UA_PrintContext extends ffi.Struct {
  @ffi.Size()
  external int depth;

  external UnnamedStruct51 outputs;
}

final class UnnamedStruct51 extends ffi.Struct {
  external ffi.Pointer<UA_PrintElement> tqh_first;

  external ffi.Pointer<ffi.Pointer<UA_PrintElement>> tqh_last;
}

/// /
typedef UA_PrintOutput = UA_PrintElement;

/// Autogenerated -- do not modify *
final class UA_StatusCodeName extends ffi.Struct {
  @UA_StatusCode()
  external int code;

  external ffi.Pointer<ffi.Char> name;
}

final class UA_RGContext extends ffi.Struct {
  external ffi.Pointer<UA_Server> server;

  external ffi.Pointer<UA_PubSubConnection> connection;

  external ffi.Pointer<UA_ReaderGroup> readerGroup;
}

final class UA_NodePropertyContext extends ffi.Struct {
  external UA_NodeId parentNodeId;

  @UA_UInt32()
  external int parentClassifier;

  @UA_UInt32()
  external int elementClassiefier;
}

/// /
final class UA_AttributeReadContext extends ffi.Struct {
  external UA_ClientAsyncOperationCallback userCallback;

  external ffi.Pointer<ffi.Void> userContext;

  external ffi.Pointer<UA_DataType> resultType;
}

/// Asynchronous Operations
/// ^^^^^^^^^^^^^^^^^^^^^^^
///
/// Many Services can be called with an array of operations. For example, a
/// request to the Read Service contains an array of ReadValueId, each
/// corresponding to a single read operation. For convenience, wrappers are
/// provided to call single operations for the most common Services.
///
/// All async operations have a callback of the following structure: The returned
/// StatusCode is split in two parts. The status indicates the overall success of
/// the request and the operation. The result argument is non-NULL only if the
/// status is no good.
typedef UA_ClientAsyncOperationCallback
    = ffi.Pointer<ffi.NativeFunction<UA_ClientAsyncOperationCallbackFunction>>;
typedef UA_ClientAsyncOperationCallbackFunction = ffi.Void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    UA_UInt32 requestId,
    UA_StatusCode status,
    ffi.Pointer<ffi.Void> result);
typedef DartUA_ClientAsyncOperationCallbackFunction = void Function(
    ffi.Pointer<UA_Client> client,
    ffi.Pointer<ffi.Void> userdata,
    DartUA_UInt32 requestId,
    DartUA_StatusCode status,
    ffi.Pointer<ffi.Void> result);

final class UA_FilterOperatorContext extends ffi.Struct {
  external ffi.Pointer<UA_Server> server;

  external ffi.Pointer<UA_Session> session;

  external ffi.Pointer<UA_NodeId> eventNode;

  external ffi.Pointer<UA_ContentFilter> contentFilter;

  external ffi.Pointer<UA_ContentFilterResult> contentFilterResult;

  external ffi.Pointer<UA_Variant> valueResult;

  @UA_UInt16()
  external int index;
}

final class UA_NodeMapEntry extends ffi.Opaque {}

final class UA_NodeMapSlot extends ffi.Struct {
  external ffi.Pointer<UA_NodeMapEntry> entry;

  @UA_UInt32()
  external int nodeIdHash;
}

final class UA_NodeMap extends ffi.Struct {
  external ffi.Pointer<UA_NodeMapSlot> slots;

  @UA_UInt32()
  external int size;

  @UA_UInt32()
  external int count;

  @UA_UInt32()
  external int sizePrimeIndex;

  @ffi.Array.multi([128])
  external ffi.Array<UA_NodeId> referenceTypeIds;

  @UA_Byte()
  external int referenceTypeCounter;
}

final class UA_PubSubChannelDataUDPMC extends ffi.Struct {
  @ffi.Int()
  external int ai_family;

  external sockaddr_storage ai_addr;

  @socklen_t()
  external int ai_addrlen;

  external sockaddr_storage intf_addr;

  @UA_UInt32()
  external int messageTTL;

  @ffi.Bool()
  external bool enableLoopback;

  @ffi.Bool()
  external bool enableReuse;

  @ffi.Bool()
  external bool isMulticast;
}

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

typedef sa_family_t = ffi.UnsignedShort;
typedef Dartsa_family_t = int;
typedef socklen_t = __socklen_t;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;

const int MSG_OOB = 1;

const int MSG_PEEK = 2;

const int MSG_DONTROUTE = 4;

const int MSG_CTRUNC = 8;

const int MSG_PROXY = 16;

const int MSG_TRUNC = 32;

const int MSG_DONTWAIT = 64;

const int MSG_EOR = 128;

const int MSG_WAITALL = 256;

const int MSG_FIN = 512;

const int MSG_SYN = 1024;

const int MSG_CONFIRM = 2048;

const int MSG_RST = 4096;

const int MSG_ERRQUEUE = 8192;

const int MSG_NOSIGNAL = 16384;

const int MSG_MORE = 32768;

const int MSG_WAITFORONE = 65536;

const int MSG_BATCH = 262144;

const int MSG_ZEROCOPY = 67108864;

const int MSG_FASTOPEN = 536870912;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int SCM_RIGHTS = 1;

const int SHUT_RD = 0;

const int SHUT_WR = 1;

const int SHUT_RDWR = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IPIP = 4;

const int IPPROTO_TCP = 6;

const int IPPROTO_EGP = 8;

const int IPPROTO_PUP = 12;

const int IPPROTO_UDP = 17;

const int IPPROTO_IDP = 22;

const int IPPROTO_TP = 29;

const int IPPROTO_DCCP = 33;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_RSVP = 46;

const int IPPROTO_GRE = 47;

const int IPPROTO_ESP = 50;

const int IPPROTO_AH = 51;

const int IPPROTO_MTP = 92;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_PIM = 103;

const int IPPROTO_COMP = 108;

const int IPPROTO_L2TP = 115;

const int IPPROTO_SCTP = 132;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_MPLS = 137;

const int IPPROTO_ETHERNET = 143;

const int IPPROTO_RAW = 255;

const int IPPROTO_MPTCP = 262;

const int IPPROTO_MAX = 263;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_NONE = 59;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_MH = 135;

const int IPPORT_ECHO = 7;

const int IPPORT_DISCARD = 9;

const int IPPORT_SYSTAT = 11;

const int IPPORT_DAYTIME = 13;

const int IPPORT_NETSTAT = 15;

const int IPPORT_FTP = 21;

const int IPPORT_TELNET = 23;

const int IPPORT_SMTP = 25;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_WHOIS = 43;

const int IPPORT_MTP = 57;

const int IPPORT_TFTP = 69;

const int IPPORT_RJE = 77;

const int IPPORT_FINGER = 79;

const int IPPORT_TTYLINK = 87;

const int IPPORT_SUPDUP = 95;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_WHOSERVER = 513;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_RESERVED = 1024;

const int IPPORT_USERRESERVED = 5000;

const int IFF_UP = 1;

const int IFF_BROADCAST = 2;

const int IFF_DEBUG = 4;

const int IFF_LOOPBACK = 8;

const int IFF_POINTOPOINT = 16;

const int IFF_NOTRAILERS = 32;

const int IFF_RUNNING = 64;

const int IFF_NOARP = 128;

const int IFF_PROMISC = 256;

const int IFF_ALLMULTI = 512;

const int IFF_MASTER = 1024;

const int IFF_SLAVE = 2048;

const int IFF_MULTICAST = 4096;

const int IFF_PORTSEL = 8192;

const int IFF_AUTOMEDIA = 16384;

const int IFF_DYNAMIC = 32768;

const int _PC_LINK_MAX = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_NAME_MAX = 3;

const int _PC_PATH_MAX = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_NO_TRUNC = 7;

const int _PC_VDISABLE = 8;

const int _PC_SYNC_IO = 9;

const int _PC_ASYNC_IO = 10;

const int _PC_PRIO_IO = 11;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_FILESIZEBITS = 13;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_SYMLINK_MAX = 19;

const int _PC_2_SYMLINKS = 20;

const int _SC_ARG_MAX = 0;

const int _SC_CHILD_MAX = 1;

const int _SC_CLK_TCK = 2;

const int _SC_NGROUPS_MAX = 3;

const int _SC_OPEN_MAX = 4;

const int _SC_STREAM_MAX = 5;

const int _SC_TZNAME_MAX = 6;

const int _SC_JOB_CONTROL = 7;

const int _SC_SAVED_IDS = 8;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_TIMERS = 11;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_FSYNC = 15;

const int _SC_MAPPED_FILES = 16;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_SEMAPHORES = 21;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_VERSION = 29;

const int _SC_PAGESIZE = 30;

const int _SC_RTSIG_MAX = 31;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_TIMER_MAX = 35;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_LINE_MAX = 43;

const int _SC_RE_DUP_MAX = 44;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_2_VERSION = 46;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_SW_DEV = 51;

const int _SC_2_LOCALEDEF = 52;

const int _SC_PII = 53;

const int _SC_PII_XTI = 54;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_OSI = 57;

const int _SC_POLL = 58;

const int _SC_SELECT = 59;

const int _SC_UIO_MAXIOV = 60;

const int _SC_IOV_MAX = 60;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_M = 65;

const int _SC_T_IOV_MAX = 66;

const int _SC_THREADS = 67;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_PHYS_PAGES = 85;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_ATEXIT_MAX = 87;

const int _SC_PASS_MAX = 88;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_SHM = 94;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_C_VERSION = 96;

const int _SC_2_UPE = 97;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_INT_MAX = 104;

const int _SC_INT_MIN = 105;

const int _SC_LONG_BIT = 106;

const int _SC_WORD_BIT = 107;

const int _SC_MB_LEN_MAX = 108;

const int _SC_NZERO = 109;

const int _SC_SSIZE_MAX = 110;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_UCHAR_MAX = 115;

const int _SC_UINT_MAX = 116;

const int _SC_ULONG_MAX = 117;

const int _SC_USHRT_MAX = 118;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_ADVISORY_INFO = 132;

const int _SC_BARRIERS = 133;

const int _SC_BASE = 134;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CPUTIME = 138;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_FD_MGMT = 143;

const int _SC_FIFO = 144;

const int _SC_PIPE = 145;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MULTI_PROCESS = 150;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_NETWORKING = 152;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_SPIN_LOCKS = 154;

const int _SC_REGEXP = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_SHELL = 157;

const int _SC_SIGNALS = 158;

const int _SC_SPAWN = 159;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_TIMEOUTS = 164;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_2_PBS = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_STREAMS = 174;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_TRACE = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_IPV6 = 235;

const int _SC_RAW_SOCKETS = 236;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_SS_REPL_MAX = 241;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_MINSIGSTKSZ = 249;

const int _SC_SIGSTKSZ = 250;

const int _CS_PATH = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_V6_ENV = 1148;

const int _CS_V7_ENV = 1149;

const int SI_ASYNCNL = -60;

const int SI_DETHREAD = -7;

const int SI_TKILL = -6;

const int SI_SIGIO = -5;

const int SI_ASYNCIO = -4;

const int SI_MESGQ = -3;

const int SI_TIMER = -2;

const int SI_QUEUE = -1;

const int SI_USER = 0;

const int SI_KERNEL = 128;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLADR = 3;

const int ILL_ILLTRP = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int ILL_BADIADDR = 9;

const int FPE_INTDIV = 1;

const int FPE_INTOVF = 2;

const int FPE_FLTDIV = 3;

const int FPE_FLTOVF = 4;

const int FPE_FLTUND = 5;

const int FPE_FLTRES = 6;

const int FPE_FLTINV = 7;

const int FPE_FLTSUB = 8;

const int FPE_FLTUNK = 14;

const int FPE_CONDTRAP = 15;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int SEGV_BNDERR = 3;

const int SEGV_PKUERR = 4;

const int SEGV_ACCADI = 5;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_MTEAERR = 8;

const int SEGV_MTESERR = 9;

const int SEGV_CPERR = 10;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AO = 5;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int TRAP_BRANCH = 3;

const int TRAP_HWBKPT = 4;

const int TRAP_UNK = 5;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SIGEV_SIGNAL = 0;

const int SIGEV_NONE = 1;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD_ID = 4;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 2;

const int TCP_ESTABLISHED = 1;

const int TCP_SYN_SENT = 2;

const int TCP_SYN_RECV = 3;

const int TCP_FIN_WAIT1 = 4;

const int TCP_FIN_WAIT2 = 5;

const int TCP_TIME_WAIT = 6;

const int TCP_CLOSE = 7;

const int TCP_CLOSE_WAIT = 8;

const int TCP_LAST_ACK = 9;

const int TCP_LISTEN = 10;

const int TCP_CLOSING = 11;

const int TCP_NO_QUEUE = 0;

const int TCP_RECV_QUEUE = 1;

const int TCP_SEND_QUEUE = 2;

const int TCP_QUEUES_NR = 3;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int UA_OPEN62541_VER_MAJOR = 1;

const int UA_OPEN62541_VER_MINOR = 3;

const int UA_OPEN62541_VER_PATCH = 6;

const String UA_OPEN62541_VER_LABEL = '';

const String UA_OPEN62541_VER_COMMIT = 'v1.3.6';

const String UA_OPEN62541_VERSION = 'v1.3.6';

const int UA_LOGLEVEL = 300;

const int UA_MULTITHREADING = 100;

const int UA_VALGRIND_INTERACTIVE_INTERVAL = 1000;

const int _XOPEN_SOURCE = 700;

const int _DEFAULT_SOURCE = 1;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_XOPEN = 1;

const int __USE_XOPEN_EXTENDED = 1;

const int __USE_UNIX98 = 1;

const int _LARGEFILE_SOURCE = 1;

const int __USE_XOPEN2KXSI = 1;

const int __USE_LARGEFILE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDINT_LEAST_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int _STRING_H = 1;

const int NULL = 0;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _STRINGS_H = 1;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int _INTTYPES_H = 1;

const int ____gwchar_t_defined = 1;

const String __PRI64_PREFIX = 'l';

const String __PRIPTR_PREFIX = 'l';

const String PRId8 = 'd';

const String PRId16 = 'd';

const String PRId32 = 'd';

const String PRId64 = 'ld';

const String PRIdLEAST8 = 'd';

const String PRIdLEAST16 = 'd';

const String PRIdLEAST32 = 'd';

const String PRIdLEAST64 = 'ld';

const String PRIdFAST8 = 'd';

const String PRIdFAST16 = 'ld';

const String PRIdFAST32 = 'ld';

const String PRIdFAST64 = 'ld';

const String PRIi8 = 'i';

const String PRIi16 = 'i';

const String PRIi32 = 'i';

const String PRIi64 = 'li';

const String PRIiLEAST8 = 'i';

const String PRIiLEAST16 = 'i';

const String PRIiLEAST32 = 'i';

const String PRIiLEAST64 = 'li';

const String PRIiFAST8 = 'i';

const String PRIiFAST16 = 'li';

const String PRIiFAST32 = 'li';

const String PRIiFAST64 = 'li';

const String PRIo8 = 'o';

const String PRIo16 = 'o';

const String PRIo32 = 'o';

const String PRIo64 = 'lo';

const String PRIoLEAST8 = 'o';

const String PRIoLEAST16 = 'o';

const String PRIoLEAST32 = 'o';

const String PRIoLEAST64 = 'lo';

const String PRIoFAST8 = 'o';

const String PRIoFAST16 = 'lo';

const String PRIoFAST32 = 'lo';

const String PRIoFAST64 = 'lo';

const String PRIu8 = 'u';

const String PRIu16 = 'u';

const String PRIu32 = 'u';

const String PRIu64 = 'lu';

const String PRIuLEAST8 = 'u';

const String PRIuLEAST16 = 'u';

const String PRIuLEAST32 = 'u';

const String PRIuLEAST64 = 'lu';

const String PRIuFAST8 = 'u';

const String PRIuFAST16 = 'lu';

const String PRIuFAST32 = 'lu';

const String PRIuFAST64 = 'lu';

const String PRIx8 = 'x';

const String PRIx16 = 'x';

const String PRIx32 = 'x';

const String PRIx64 = 'lx';

const String PRIxLEAST8 = 'x';

const String PRIxLEAST16 = 'x';

const String PRIxLEAST32 = 'x';

const String PRIxLEAST64 = 'lx';

const String PRIxFAST8 = 'x';

const String PRIxFAST16 = 'lx';

const String PRIxFAST32 = 'lx';

const String PRIxFAST64 = 'lx';

const String PRIX8 = 'X';

const String PRIX16 = 'X';

const String PRIX32 = 'X';

const String PRIX64 = 'lX';

const String PRIXLEAST8 = 'X';

const String PRIXLEAST16 = 'X';

const String PRIXLEAST32 = 'X';

const String PRIXLEAST64 = 'lX';

const String PRIXFAST8 = 'X';

const String PRIXFAST16 = 'lX';

const String PRIXFAST32 = 'lX';

const String PRIXFAST64 = 'lX';

const String PRIdMAX = 'ld';

const String PRIiMAX = 'li';

const String PRIoMAX = 'lo';

const String PRIuMAX = 'lu';

const String PRIxMAX = 'lx';

const String PRIXMAX = 'lX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String SCNd8 = 'hhd';

const String SCNd16 = 'hd';

const String SCNd32 = 'd';

const String SCNd64 = 'ld';

const String SCNdLEAST8 = 'hhd';

const String SCNdLEAST16 = 'hd';

const String SCNdLEAST32 = 'd';

const String SCNdLEAST64 = 'ld';

const String SCNdFAST8 = 'hhd';

const String SCNdFAST16 = 'ld';

const String SCNdFAST32 = 'ld';

const String SCNdFAST64 = 'ld';

const String SCNi8 = 'hhi';

const String SCNi16 = 'hi';

const String SCNi32 = 'i';

const String SCNi64 = 'li';

const String SCNiLEAST8 = 'hhi';

const String SCNiLEAST16 = 'hi';

const String SCNiLEAST32 = 'i';

const String SCNiLEAST64 = 'li';

const String SCNiFAST8 = 'hhi';

const String SCNiFAST16 = 'li';

const String SCNiFAST32 = 'li';

const String SCNiFAST64 = 'li';

const String SCNu8 = 'hhu';

const String SCNu16 = 'hu';

const String SCNu32 = 'u';

const String SCNu64 = 'lu';

const String SCNuLEAST8 = 'hhu';

const String SCNuLEAST16 = 'hu';

const String SCNuLEAST32 = 'u';

const String SCNuLEAST64 = 'lu';

const String SCNuFAST8 = 'hhu';

const String SCNuFAST16 = 'lu';

const String SCNuFAST32 = 'lu';

const String SCNuFAST64 = 'lu';

const String SCNo8 = 'hho';

const String SCNo16 = 'ho';

const String SCNo32 = 'o';

const String SCNo64 = 'lo';

const String SCNoLEAST8 = 'hho';

const String SCNoLEAST16 = 'ho';

const String SCNoLEAST32 = 'o';

const String SCNoLEAST64 = 'lo';

const String SCNoFAST8 = 'hho';

const String SCNoFAST16 = 'lo';

const String SCNoFAST32 = 'lo';

const String SCNoFAST64 = 'lo';

const String SCNx8 = 'hhx';

const String SCNx16 = 'hx';

const String SCNx32 = 'x';

const String SCNx64 = 'lx';

const String SCNxLEAST8 = 'hhx';

const String SCNxLEAST16 = 'hx';

const String SCNxLEAST32 = 'x';

const String SCNxLEAST64 = 'lx';

const String SCNxFAST8 = 'hhx';

const String SCNxFAST16 = 'lx';

const String SCNxFAST32 = 'lx';

const String SCNxFAST64 = 'lx';

const String SCNdMAX = 'ld';

const String SCNiMAX = 'li';

const String SCNoMAX = 'lo';

const String SCNuMAX = 'lu';

const String SCNxMAX = 'lx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const int UA_LITTLE_ENDIAN = 1;

const int UA_BINARY_OVERLAYABLE_INTEGER = 1;

const int UA_FLOAT_IEEE754 = 1;

const int UA_FLOAT_LITTLE_ENDIAN = 1;

const int UA_BINARY_OVERLAYABLE_FLOAT = 1;

const int _ERRNO_H = 1;

const int _BITS_ERRNO_H = 1;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EDEADLK = 35;

const int ENAMETOOLONG = 36;

const int ENOLCK = 37;

const int ENOSYS = 38;

const int ENOTEMPTY = 39;

const int ELOOP = 40;

const int EWOULDBLOCK = 11;

const int ENOMSG = 42;

const int EIDRM = 43;

const int ECHRNG = 44;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELNRNG = 48;

const int EUNATCH = 49;

const int ENOCSI = 50;

const int EL2HLT = 51;

const int EBADE = 52;

const int EBADR = 53;

const int EXFULL = 54;

const int ENOANO = 55;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EDEADLOCK = 35;

const int EBFONT = 59;

const int ENOSTR = 60;

const int ENODATA = 61;

const int ETIME = 62;

const int ENOSR = 63;

const int ENONET = 64;

const int ENOPKG = 65;

const int EREMOTE = 66;

const int ENOLINK = 67;

const int EADV = 68;

const int ESRMNT = 69;

const int ECOMM = 70;

const int EPROTO = 71;

const int EMULTIHOP = 72;

const int EDOTDOT = 73;

const int EBADMSG = 74;

const int EOVERFLOW = 75;

const int ENOTUNIQ = 76;

const int EBADFD = 77;

const int EREMCHG = 78;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBSCN = 81;

const int ELIBMAX = 82;

const int ELIBEXEC = 83;

const int EILSEQ = 84;

const int ERESTART = 85;

const int ESTRPIPE = 86;

const int EUSERS = 87;

const int ENOTSOCK = 88;

const int EDESTADDRREQ = 89;

const int EMSGSIZE = 90;

const int EPROTOTYPE = 91;

const int ENOPROTOOPT = 92;

const int EPROTONOSUPPORT = 93;

const int ESOCKTNOSUPPORT = 94;

const int EOPNOTSUPP = 95;

const int EPFNOSUPPORT = 96;

const int EAFNOSUPPORT = 97;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int ENETDOWN = 100;

const int ENETUNREACH = 101;

const int ENETRESET = 102;

const int ECONNABORTED = 103;

const int ECONNRESET = 104;

const int ENOBUFS = 105;

const int EISCONN = 106;

const int ENOTCONN = 107;

const int ESHUTDOWN = 108;

const int ETOOMANYREFS = 109;

const int ETIMEDOUT = 110;

const int ECONNREFUSED = 111;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EALREADY = 114;

const int EINPROGRESS = 115;

const int ESTALE = 116;

const int EUCLEAN = 117;

const int ENOTNAM = 118;

const int ENAVAIL = 119;

const int EISNAM = 120;

const int EREMOTEIO = 121;

const int EDQUOT = 122;

const int ENOMEDIUM = 123;

const int EMEDIUMTYPE = 124;

const int ECANCELED = 125;

const int ENOKEY = 126;

const int EKEYEXPIRED = 127;

const int EKEYREVOKED = 128;

const int EKEYREJECTED = 129;

const int EOWNERDEAD = 130;

const int ENOTRECOVERABLE = 131;

const int ERFKILL = 132;

const int EHWPOISON = 133;

const int ENOTSUP = 95;

const int _ARPA_INET_H = 1;

const int _NETINET_IN_H = 1;

const int _SYS_SOCKET_H = 1;

const int __iovec_defined = 1;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int SOCK_STREAM = 1;

const int SOCK_DGRAM = 2;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_DCCP = 6;

const int SOCK_PACKET = 10;

const int SOCK_CLOEXEC = 524288;

const int SOCK_NONBLOCK = 2048;

const int PF_UNSPEC = 0;

const int PF_LOCAL = 1;

const int PF_UNIX = 1;

const int PF_FILE = 1;

const int PF_INET = 2;

const int PF_AX25 = 3;

const int PF_IPX = 4;

const int PF_APPLETALK = 5;

const int PF_NETROM = 6;

const int PF_BRIDGE = 7;

const int PF_ATMPVC = 8;

const int PF_X25 = 9;

const int PF_INET6 = 10;

const int PF_ROSE = 11;

const int PF_DECnet = 12;

const int PF_NETBEUI = 13;

const int PF_SECURITY = 14;

const int PF_KEY = 15;

const int PF_NETLINK = 16;

const int PF_ROUTE = 16;

const int PF_PACKET = 17;

const int PF_ASH = 18;

const int PF_ECONET = 19;

const int PF_ATMSVC = 20;

const int PF_RDS = 21;

const int PF_SNA = 22;

const int PF_IRDA = 23;

const int PF_PPPOX = 24;

const int PF_WANPIPE = 25;

const int PF_LLC = 26;

const int PF_IB = 27;

const int PF_MPLS = 28;

const int PF_CAN = 29;

const int PF_TIPC = 30;

const int PF_BLUETOOTH = 31;

const int PF_IUCV = 32;

const int PF_RXRPC = 33;

const int PF_ISDN = 34;

const int PF_PHONET = 35;

const int PF_IEEE802154 = 36;

const int PF_CAIF = 37;

const int PF_ALG = 38;

const int PF_NFC = 39;

const int PF_VSOCK = 40;

const int PF_KCM = 41;

const int PF_QIPCRTR = 42;

const int PF_SMC = 43;

const int PF_XDP = 44;

const int PF_MCTP = 45;

const int PF_MAX = 46;

const int AF_UNSPEC = 0;

const int AF_LOCAL = 1;

const int AF_UNIX = 1;

const int AF_FILE = 1;

const int AF_INET = 2;

const int AF_AX25 = 3;

const int AF_IPX = 4;

const int AF_APPLETALK = 5;

const int AF_NETROM = 6;

const int AF_BRIDGE = 7;

const int AF_ATMPVC = 8;

const int AF_X25 = 9;

const int AF_INET6 = 10;

const int AF_ROSE = 11;

const int AF_DECnet = 12;

const int AF_NETBEUI = 13;

const int AF_SECURITY = 14;

const int AF_KEY = 15;

const int AF_NETLINK = 16;

const int AF_ROUTE = 16;

const int AF_PACKET = 17;

const int AF_ASH = 18;

const int AF_ECONET = 19;

const int AF_ATMSVC = 20;

const int AF_RDS = 21;

const int AF_SNA = 22;

const int AF_IRDA = 23;

const int AF_PPPOX = 24;

const int AF_WANPIPE = 25;

const int AF_LLC = 26;

const int AF_IB = 27;

const int AF_MPLS = 28;

const int AF_CAN = 29;

const int AF_TIPC = 30;

const int AF_BLUETOOTH = 31;

const int AF_IUCV = 32;

const int AF_RXRPC = 33;

const int AF_ISDN = 34;

const int AF_PHONET = 35;

const int AF_IEEE802154 = 36;

const int AF_CAIF = 37;

const int AF_ALG = 38;

const int AF_NFC = 39;

const int AF_VSOCK = 40;

const int AF_KCM = 41;

const int AF_QIPCRTR = 42;

const int AF_SMC = 43;

const int AF_XDP = 44;

const int AF_MCTP = 45;

const int AF_MAX = 46;

const int SOL_RAW = 255;

const int SOL_DECNET = 261;

const int SOL_X25 = 262;

const int SOL_PACKET = 263;

const int SOL_ATM = 264;

const int SOL_AAL = 265;

const int SOL_IRDA = 266;

const int SOL_NETBEUI = 267;

const int SOL_LLC = 268;

const int SOL_DCCP = 269;

const int SOL_NETLINK = 270;

const int SOL_TIPC = 271;

const int SOL_RXRPC = 272;

const int SOL_PPPOL2TP = 273;

const int SOL_BLUETOOTH = 274;

const int SOL_PNPIPE = 275;

const int SOL_RDS = 276;

const int SOL_IUCV = 277;

const int SOL_CAIF = 278;

const int SOL_ALG = 279;

const int SOL_NFC = 280;

const int SOL_KCM = 281;

const int SOL_TLS = 282;

const int SOL_XDP = 283;

const int SOL_MPTCP = 284;

const int SOL_MCTP = 285;

const int SOL_SMC = 286;

const int SOMAXCONN = 4096;

const int _BITS_SOCKADDR_H = 1;

const int __SOCKADDR_COMMON_SIZE = 2;

const int _SS_SIZE = 128;

const int _SS_PADSIZE = 118;

const int MSG_OOB1 = 1;

const int MSG_PEEK1 = 2;

const int MSG_DONTROUTE1 = 4;

const int MSG_CTRUNC1 = 8;

const int MSG_PROXY1 = 16;

const int MSG_TRUNC1 = 32;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR1 = 128;

const int MSG_WAITALL1 = 256;

const int MSG_FIN1 = 512;

const int MSG_SYN1 = 1024;

const int MSG_CONFIRM1 = 2048;

const int MSG_RST1 = 4096;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_MORE1 = 32768;

const int MSG_WAITFORONE1 = 65536;

const int MSG_BATCH1 = 262144;

const int MSG_ZEROCOPY1 = 67108864;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int SCM_RIGHTS1 = 1;

const int __BITS_PER_LONG = 64;

const int FIOSETOWN = 35073;

const int SIOCSPGRP = 35074;

const int FIOGETOWN = 35075;

const int SIOCGPGRP = 35076;

const int SIOCATMARK = 35077;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCGSTAMPNS_OLD = 35079;

const int SOL_SOCKET = 1;

const int SO_DEBUG = 1;

const int SO_REUSEADDR = 2;

const int SO_TYPE = 3;

const int SO_ERROR = 4;

const int SO_DONTROUTE = 5;

const int SO_BROADCAST = 6;

const int SO_SNDBUF = 7;

const int SO_RCVBUF = 8;

const int SO_SNDBUFFORCE = 32;

const int SO_RCVBUFFORCE = 33;

const int SO_KEEPALIVE = 9;

const int SO_OOBINLINE = 10;

const int SO_NO_CHECK = 11;

const int SO_PRIORITY = 12;

const int SO_LINGER = 13;

const int SO_BSDCOMPAT = 14;

const int SO_REUSEPORT = 15;

const int SO_PASSCRED = 16;

const int SO_PEERCRED = 17;

const int SO_RCVLOWAT = 18;

const int SO_SNDLOWAT = 19;

const int SO_RCVTIMEO_OLD = 20;

const int SO_SNDTIMEO_OLD = 21;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_BINDTODEVICE = 25;

const int SO_ATTACH_FILTER = 26;

const int SO_DETACH_FILTER = 27;

const int SO_GET_FILTER = 26;

const int SO_PEERNAME = 28;

const int SO_ACCEPTCONN = 30;

const int SO_PEERSEC = 31;

const int SO_PASSSEC = 34;

const int SO_MARK = 36;

const int SO_PROTOCOL = 38;

const int SO_DOMAIN = 39;

const int SO_RXQ_OVFL = 40;

const int SO_WIFI_STATUS = 41;

const int SCM_WIFI_STATUS = 41;

const int SO_PEEK_OFF = 42;

const int SO_NOFCS = 43;

const int SO_LOCK_FILTER = 44;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_BUSY_POLL = 46;

const int SO_MAX_PACING_RATE = 47;

const int SO_BPF_EXTENSIONS = 48;

const int SO_INCOMING_CPU = 49;

const int SO_ATTACH_BPF = 50;

const int SO_DETACH_BPF = 27;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_CNX_ADVICE = 53;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SO_MEMINFO = 55;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_COOKIE = 57;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SO_PEERGROUPS = 59;

const int SO_ZEROCOPY = 60;

const int SO_TXTIME = 61;

const int SCM_TXTIME = 61;

const int SO_BINDTOIFINDEX = 62;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_RCVTIMEO_NEW = 66;

const int SO_SNDTIMEO_NEW = 67;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_PREFER_BUSY_POLL = 69;

const int SO_BUSY_POLL_BUDGET = 70;

const int SO_NETNS_COOKIE = 71;

const int SO_BUF_LOCK = 72;

const int SO_RESERVE_MEM = 73;

const int SO_TXREHASH = 74;

const int SO_RCVMARK = 75;

const int SO_PASSPIDFD = 76;

const int SO_PEERPIDFD = 77;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPING = 37;

const int SO_RCVTIMEO = 20;

const int SO_SNDTIMEO = 21;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TIMESTAMPING = 37;

const int __osockaddr_defined = 1;

const int SHUT_RD1 = 0;

const int SHUT_WR1 = 1;

const int SHUT_RDWR1 = 2;

const int __USE_KERNEL_IPV6_DEFS = 0;

const int IP_OPTIONS = 4;

const int IP_HDRINCL = 3;

const int IP_TOS = 1;

const int IP_TTL = 2;

const int IP_RECVOPTS = 6;

const int IP_RECVRETOPTS = 7;

const int IP_RETOPTS = 7;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_TTL = 33;

const int IP_MULTICAST_LOOP = 34;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_BLOCK_SOURCE = 38;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_MSFILTER = 41;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int IP_MULTICAST_ALL = 49;

const int IP_UNICAST_IF = 50;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int IP_ROUTER_ALERT = 5;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_MTU_DISCOVER = 10;

const int IP_RECVERR = 11;

const int IP_RECVTTL = 12;

const int IP_RECVTOS = 13;

const int IP_MTU = 14;

const int IP_FREEBIND = 15;

const int IP_IPSEC_POLICY = 16;

const int IP_XFRM_POLICY = 17;

const int IP_PASSSEC = 18;

const int IP_TRANSPARENT = 19;

const int IP_ORIGDSTADDR = 20;

const int IP_RECVORIGDSTADDR = 20;

const int IP_MINTTL = 21;

const int IP_NODEFRAG = 22;

const int IP_CHECKSUM = 23;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVERR_RFC4884 = 26;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_WANT = 1;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int IP_LOCAL_PORT_RANGE = 51;

const int IP_PROTOCOL = 52;

const int SOL_IP = 0;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_MAX_MEMBERSHIPS = 20;

const int IPV6_ADDRFORM = 1;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292RTHDR = 5;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_CHECKSUM = 7;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_NEXTHOP = 9;

const int IPV6_AUTHHDR = 10;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MTU = 24;

const int IPV6_RECVERR = 25;

const int IPV6_V6ONLY = 26;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RECVERR_RFC4884 = 31;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_XFRM_POLICY = 35;

const int IPV6_HDRINCL = 36;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_PKTINFO = 50;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_HOPLIMIT = 52;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_HOPOPTS = 54;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RTHDR = 57;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_DSTOPTS = 59;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_PATHMTU = 61;

const int IPV6_DONTFRAG = 62;

const int IPV6_RECVTCLASS = 66;

const int IPV6_TCLASS = 67;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_IF = 76;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_FREEBIND = 78;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int SOL_IPV6 = 41;

const int SOL_ICMPV6 = 58;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_TP1 = 29;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_AH1 = 51;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_L2TP1 = 115;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_UDPLITE1 = 136;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_ETHERNET1 = 143;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_MPTCP1 = 262;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_MH1 = 135;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_CLASSC_HOST = 255;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_NONE = 4294967295;

const int INADDR_DUMMY = 3221225480;

const int IN_LOOPBACKNET = 127;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INET_ADDRSTRLEN = 16;

const int INET6_ADDRSTRLEN = 46;

const int _NETDB_H = 1;

const int _RPC_NETDB_H = 1;

const String _PATH_HEQUIV = '/etc/hosts.equiv';

const String _PATH_HOSTS = '/etc/hosts';

const String _PATH_NETWORKS = '/etc/networks';

const String _PATH_NSSWITCH_CONF = '/etc/nsswitch.conf';

const String _PATH_PROTOCOLS = '/etc/protocols';

const String _PATH_SERVICES = '/etc/services';

const int HOST_NOT_FOUND = 1;

const int TRY_AGAIN = 2;

const int NO_RECOVERY = 3;

const int NO_DATA = 4;

const int NETDB_INTERNAL = -1;

const int NETDB_SUCCESS = 0;

const int NO_ADDRESS = 4;

const int IPPORT_RESERVED1 = 1024;

const int AI_PASSIVE = 1;

const int AI_CANONNAME = 2;

const int AI_NUMERICHOST = 4;

const int AI_V4MAPPED = 8;

const int AI_ALL = 16;

const int AI_ADDRCONFIG = 32;

const int AI_NUMERICSERV = 1024;

const int EAI_BADFLAGS = -1;

const int EAI_NONAME = -2;

const int EAI_AGAIN = -3;

const int EAI_FAIL = -4;

const int EAI_FAMILY = -6;

const int EAI_SOCKTYPE = -7;

const int EAI_SERVICE = -8;

const int EAI_MEMORY = -10;

const int EAI_SYSTEM = -11;

const int EAI_OVERFLOW = -12;

const int NI_MAXHOST = 1025;

const int NI_MAXSERV = 32;

const int NI_NUMERICHOST = 1;

const int NI_NUMERICSERV = 2;

const int NI_NOFQDN = 4;

const int NI_NAMEREQD = 8;

const int NI_DGRAM = 16;

const int _SYS_IOCTL_H = 1;

const int _IOC_NRBITS = 8;

const int _IOC_TYPEBITS = 8;

const int _IOC_SIZEBITS = 14;

const int _IOC_DIRBITS = 2;

const int _IOC_NRMASK = 255;

const int _IOC_TYPEMASK = 255;

const int _IOC_SIZEMASK = 16383;

const int _IOC_DIRMASK = 3;

const int _IOC_NRSHIFT = 0;

const int _IOC_TYPESHIFT = 8;

const int _IOC_SIZESHIFT = 16;

const int _IOC_DIRSHIFT = 30;

const int _IOC_NONE = 0;

const int _IOC_WRITE = 1;

const int _IOC_READ = 2;

const int IOC_IN = 1073741824;

const int IOC_OUT = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOCSIZE_MASK = 1073676288;

const int IOCSIZE_SHIFT = 16;

const int TCGETS = 21505;

const int TCSETS = 21506;

const int TCSETSW = 21507;

const int TCSETSF = 21508;

const int TCGETA = 21509;

const int TCSETA = 21510;

const int TCSETAW = 21511;

const int TCSETAF = 21512;

const int TCSBRK = 21513;

const int TCXONC = 21514;

const int TCFLSH = 21515;

const int TIOCEXCL = 21516;

const int TIOCNXCL = 21517;

const int TIOCSCTTY = 21518;

const int TIOCGPGRP = 21519;

const int TIOCSPGRP = 21520;

const int TIOCOUTQ = 21521;

const int TIOCSTI = 21522;

const int TIOCGWINSZ = 21523;

const int TIOCSWINSZ = 21524;

const int TIOCMGET = 21525;

const int TIOCMBIS = 21526;

const int TIOCMBIC = 21527;

const int TIOCMSET = 21528;

const int TIOCGSOFTCAR = 21529;

const int TIOCSSOFTCAR = 21530;

const int FIONREAD = 21531;

const int TIOCINQ = 21531;

const int TIOCLINUX = 21532;

const int TIOCCONS = 21533;

const int TIOCGSERIAL = 21534;

const int TIOCSSERIAL = 21535;

const int TIOCPKT = 21536;

const int FIONBIO = 21537;

const int TIOCNOTTY = 21538;

const int TIOCSETD = 21539;

const int TIOCGETD = 21540;

const int TCSBRKP = 21541;

const int TIOCSBRK = 21543;

const int TIOCCBRK = 21544;

const int TIOCGSID = 21545;

const int TIOCGRS485 = 21550;

const int TIOCSRS485 = 21551;

const int TIOCGPTN = 2147767344;

const int TIOCSPTLCK = 1074025521;

const int TIOCGDEV = 2147767346;

const int TCGETX = 21554;

const int TCSETX = 21555;

const int TCSETXF = 21556;

const int TCSETXW = 21557;

const int TIOCSIG = 1074025526;

const int TIOCVHANGUP = 21559;

const int TIOCGPKT = 2147767352;

const int TIOCGPTLCK = 2147767353;

const int TIOCGEXCL = 2147767360;

const int TIOCGPTPEER = 21569;

const int FIONCLEX = 21584;

const int FIOCLEX = 21585;

const int FIOASYNC = 21586;

const int TIOCSERCONFIG = 21587;

const int TIOCSERGWILD = 21588;

const int TIOCSERSWILD = 21589;

const int TIOCGLCKTRMIOS = 21590;

const int TIOCSLCKTRMIOS = 21591;

const int TIOCSERGSTRUCT = 21592;

const int TIOCSERGETLSR = 21593;

const int TIOCSERGETMULTI = 21594;

const int TIOCSERSETMULTI = 21595;

const int TIOCMIWAIT = 21596;

const int TIOCGICOUNT = 21597;

const int FIOQSIZE = 21600;

const int TIOCPKT_DATA = 0;

const int TIOCPKT_FLUSHREAD = 1;

const int TIOCPKT_FLUSHWRITE = 2;

const int TIOCPKT_STOP = 4;

const int TIOCPKT_START = 8;

const int TIOCPKT_NOSTOP = 16;

const int TIOCPKT_DOSTOP = 32;

const int TIOCPKT_IOCTL = 64;

const int TIOCSER_TEMT = 1;

const int SIOCADDRT = 35083;

const int SIOCDELRT = 35084;

const int SIOCRTMSG = 35085;

const int SIOCGIFNAME = 35088;

const int SIOCSIFLINK = 35089;

const int SIOCGIFCONF = 35090;

const int SIOCGIFFLAGS = 35091;

const int SIOCSIFFLAGS = 35092;

const int SIOCGIFADDR = 35093;

const int SIOCSIFADDR = 35094;

const int SIOCGIFDSTADDR = 35095;

const int SIOCSIFDSTADDR = 35096;

const int SIOCGIFBRDADDR = 35097;

const int SIOCSIFBRDADDR = 35098;

const int SIOCGIFNETMASK = 35099;

const int SIOCSIFNETMASK = 35100;

const int SIOCGIFMETRIC = 35101;

const int SIOCSIFMETRIC = 35102;

const int SIOCGIFMEM = 35103;

const int SIOCSIFMEM = 35104;

const int SIOCGIFMTU = 35105;

const int SIOCSIFMTU = 35106;

const int SIOCSIFNAME = 35107;

const int SIOCSIFHWADDR = 35108;

const int SIOCGIFENCAP = 35109;

const int SIOCSIFENCAP = 35110;

const int SIOCGIFHWADDR = 35111;

const int SIOCGIFSLAVE = 35113;

const int SIOCSIFSLAVE = 35120;

const int SIOCADDMULTI = 35121;

const int SIOCDELMULTI = 35122;

const int SIOCGIFINDEX = 35123;

const int SIOGIFINDEX = 35123;

const int SIOCSIFPFLAGS = 35124;

const int SIOCGIFPFLAGS = 35125;

const int SIOCDIFADDR = 35126;

const int SIOCSIFHWBROADCAST = 35127;

const int SIOCGIFCOUNT = 35128;

const int SIOCGIFBR = 35136;

const int SIOCSIFBR = 35137;

const int SIOCGIFTXQLEN = 35138;

const int SIOCSIFTXQLEN = 35139;

const int SIOCDARP = 35155;

const int SIOCGARP = 35156;

const int SIOCSARP = 35157;

const int SIOCDRARP = 35168;

const int SIOCGRARP = 35169;

const int SIOCSRARP = 35170;

const int SIOCGIFMAP = 35184;

const int SIOCSIFMAP = 35185;

const int SIOCADDDLCI = 35200;

const int SIOCDELDLCI = 35201;

const int SIOCDEVPRIVATE = 35312;

const int SIOCPROTOPRIVATE = 35296;

const int NCC = 8;

const int TIOCM_LE = 1;

const int TIOCM_DTR = 2;

const int TIOCM_RTS = 4;

const int TIOCM_ST = 8;

const int TIOCM_SR = 16;

const int TIOCM_CTS = 32;

const int TIOCM_CAR = 64;

const int TIOCM_RNG = 128;

const int TIOCM_DSR = 256;

const int TIOCM_CD = 64;

const int TIOCM_RI = 128;

const int N_TTY = 0;

const int N_SLIP = 1;

const int N_MOUSE = 2;

const int N_PPP = 3;

const int N_STRIP = 4;

const int N_AX25 = 5;

const int N_X25 = 6;

const int N_6PACK = 7;

const int N_MASC = 8;

const int N_R3964 = 9;

const int N_PROFIBUS_FDL = 10;

const int N_IRDA = 11;

const int N_SMSBLOCK = 12;

const int N_HDLC = 13;

const int N_SYNC_PPP = 14;

const int N_HCI = 15;

const int CEOF = 4;

const int CEOL = 0;

const int CERASE = 127;

const int CINTR = 3;

const int CSTATUS = 0;

const int CKILL = 21;

const int CMIN = 1;

const int CQUIT = 28;

const int CSUSP = 26;

const int CTIME = 0;

const int CDSUSP = 25;

const int CSTART = 17;

const int CSTOP = 19;

const int CLNEXT = 22;

const int CDISCARD = 15;

const int CWERASE = 23;

const int CREPRINT = 18;

const int CEOT = 4;

const int CBRK = 0;

const int CRPRNT = 18;

const int CFLUSH = 15;

const int _NET_IF_H = 1;

const int IF_NAMESIZE = 16;

const int IFF_UP1 = 1;

const int IFF_BROADCAST1 = 2;

const int IFF_DEBUG1 = 4;

const int IFF_LOOPBACK1 = 8;

const int IFF_POINTOPOINT1 = 16;

const int IFF_NOTRAILERS1 = 32;

const int IFF_RUNNING1 = 64;

const int IFF_NOARP1 = 128;

const int IFF_PROMISC1 = 256;

const int IFF_ALLMULTI1 = 512;

const int IFF_MASTER1 = 1024;

const int IFF_SLAVE1 = 2048;

const int IFF_MULTICAST1 = 4096;

const int IFF_PORTSEL1 = 8192;

const int IFF_AUTOMEDIA1 = 16384;

const int IFF_DYNAMIC1 = 32768;

const int IFHWADDRLEN = 6;

const int IFNAMSIZ = 16;

const int _SYS_POLL_H = 1;

const int POLLIN = 1;

const int POLLPRI = 2;

const int POLLOUT = 4;

const int POLLRDNORM = 64;

const int POLLRDBAND = 128;

const int POLLWRNORM = 256;

const int POLLWRBAND = 512;

const int POLLERR = 8;

const int POLLHUP = 16;

const int POLLNVAL = 32;

const int _UNISTD_H = 1;

const int _POSIX_VERSION = 200809;

const int __POSIX2_THIS_VERSION = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_LOCALEDEF = 200809;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_FSYNC = 200809;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_VDISABLE = 0;

const int _POSIX_NO_TRUNC = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _POSIX_THREADS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_REGEXP = 1;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPAWN = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_IPV6 = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _XBS5_LP64_OFF64 = 1;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS =
    '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int R_OK = 4;

const int W_OK = 2;

const int X_OK = 1;

const int F_OK = 0;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX1 = 3;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF1 = 5;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_NO_TRUNC1 = 7;

const int _PC_VDISABLE1 = 8;

const int _PC_SYNC_IO1 = 9;

const int _PC_ASYNC_IO1 = 10;

const int _PC_PRIO_IO1 = 11;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_2_SYMLINKS1 = 20;

const int _SC_ARG_MAX1 = 0;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK1 = 2;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_OPEN_MAX1 = 4;

const int _SC_STREAM_MAX1 = 5;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_SAVED_IDS1 = 8;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_TIMERS1 = 11;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_FSYNC1 = 15;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_VERSION1 = 29;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_TIMER_MAX1 = 35;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_LINE_MAX1 = 43;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_2_VERSION1 = 46;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_PII1 = 53;

const int _SC_PII_XTI1 = 54;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_OSI1 = 57;

const int _SC_POLL1 = 58;

const int _SC_SELECT1 = 59;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_M1 = 65;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_PASS_MAX1 = 88;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_UPE1 = 97;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG41 = 100;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN1 = 103;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN1 = 105;

const int _SC_LONG_BIT1 = 106;

const int _SC_WORD_BIT1 = 107;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_NZERO1 = 109;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN1 = 114;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX1 = 116;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USHRT_MAX1 = 118;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE1 = 134;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_CPUTIME1 = 138;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO1 = 144;

const int _SC_PIPE1 = 145;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_NETWORKING1 = 152;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_SHELL1 = 157;

const int _SC_SIGNALS1 = 158;

const int _SC_SPAWN1 = 159;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_STREAMS1 = 174;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG1 = 184;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_IPV61 = 235;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_MINSIGSTKSZ1 = 249;

const int _SC_SIGSTKSZ1 = 250;

const int _CS_PATH1 = 0;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_V6_ENV1 = 1148;

const int _CS_V7_ENV1 = 1149;

const int _GETOPT_POSIX_H = 1;

const int _GETOPT_CORE_H = 1;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int _FCNTL_H = 1;

const int __O_LARGEFILE = 0;

const int F_GETLK64 = 5;

const int F_SETLK64 = 6;

const int F_SETLKW64 = 7;

const int O_ACCMODE = 3;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_CREAT = 64;

const int O_EXCL = 128;

const int O_NOCTTY = 256;

const int O_TRUNC = 512;

const int O_APPEND = 1024;

const int O_NONBLOCK = 2048;

const int O_NDELAY = 2048;

const int O_SYNC = 1052672;

const int O_FSYNC = 1052672;

const int O_ASYNC = 8192;

const int __O_DIRECTORY = 65536;

const int __O_NOFOLLOW = 131072;

const int __O_CLOEXEC = 524288;

const int __O_DIRECT = 16384;

const int __O_NOATIME = 262144;

const int __O_PATH = 2097152;

const int __O_DSYNC = 4096;

const int __O_TMPFILE = 4259840;

const int F_GETLK = 5;

const int F_SETLK = 6;

const int F_SETLKW = 7;

const int O_DIRECTORY = 65536;

const int O_NOFOLLOW = 131072;

const int O_CLOEXEC = 524288;

const int O_DSYNC = 4096;

const int O_RSYNC = 1052672;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int __F_SETOWN = 8;

const int __F_GETOWN = 9;

const int F_SETOWN = 8;

const int F_GETOWN = 9;

const int __F_SETSIG = 10;

const int __F_GETSIG = 11;

const int __F_SETOWN_EX = 15;

const int __F_GETOWN_EX = 16;

const int F_DUPFD_CLOEXEC = 1030;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 0;

const int F_WRLCK = 1;

const int F_UNLCK = 2;

const int F_EXLCK = 4;

const int F_SHLCK = 8;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int FAPPEND = 1024;

const int FFSYNC = 1052672;

const int FASYNC = 8192;

const int FNONBLOCK = 2048;

const int FNDELAY = 2048;

const int __POSIX_FADV_DONTNEED = 4;

const int __POSIX_FADV_NOREUSE = 5;

const int POSIX_FADV_NORMAL = 0;

const int POSIX_FADV_RANDOM = 1;

const int POSIX_FADV_SEQUENTIAL = 2;

const int POSIX_FADV_WILLNEED = 3;

const int POSIX_FADV_DONTNEED = 4;

const int POSIX_FADV_NOREUSE = 5;

const int _BITS_STAT_H = 1;

const int _BITS_STRUCT_STAT_H = 1;

const int __S_IFMT = 61440;

const int __S_IFDIR = 16384;

const int __S_IFCHR = 8192;

const int __S_IFBLK = 24576;

const int __S_IFREG = 32768;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFSOCK = 49152;

const int __S_ISUID = 2048;

const int __S_ISGID = 1024;

const int __S_ISVTX = 512;

const int __S_IREAD = 256;

const int __S_IWRITE = 128;

const int __S_IEXEC = 64;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

const int S_IFMT = 61440;

const int S_IFDIR = 16384;

const int S_IFCHR = 8192;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXU = 448;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXG = 56;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_IRWXO = 7;

const int AT_FDCWD = -100;

const int AT_SYMLINK_NOFOLLOW = 256;

const int AT_REMOVEDIR = 512;

const int AT_SYMLINK_FOLLOW = 1024;

const int AT_EACCESS = 512;

const int _SYS_PARAM_H = 1;

const int _LIBC_LIMITS_H_ = 1;

const int MB_LEN_MAX = 16;

const int LLONG_MIN = -9223372036854775808;

const int LLONG_MAX = 9223372036854775807;

const int ULLONG_MAX = -1;

const int _BITS_POSIX1_LIM_H = 1;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int NGROUPS_MAX = 65536;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int NAME_MAX = 255;

const int PATH_MAX = 4096;

const int PIPE_BUF = 4096;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

const int XATTR_LIST_MAX = 65536;

const int RTSIG_MAX = 32;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int PTHREAD_KEYS_MAX = 1024;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int AIO_PRIO_DELTA_MAX = 20;

const int DELAYTIMER_MAX = 2147483647;

const int TTY_NAME_MAX = 32;

const int LOGIN_NAME_MAX = 256;

const int HOST_NAME_MAX = 64;

const int MQ_PRIO_MAX = 32768;

const int SEM_VALUE_MAX = 2147483647;

const int SSIZE_MAX = 9223372036854775807;

const int _BITS_POSIX2_LIM_H = 1;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int COLL_WEIGHTS_MAX = 255;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int CHARCLASS_NAME_MAX = 2048;

const int RE_DUP_MAX = 32767;

const int _XOPEN_LIM_H = 1;

const int _XOPEN_IOV_MAX = 16;

const int _BITS_UIO_LIM_H = 1;

const int __IOV_MAX = 1024;

const int IOV_MAX = 1024;

const int NL_ARGMAX = 4096;

const int NL_LANGMAX = 2048;

const int NL_MSGMAX = 2147483647;

const int NL_SETMAX = 2147483647;

const int NL_TEXTMAX = 2147483647;

const int NZERO = 20;

const int WORD_BIT = 32;

const int LONG_BIT = 64;

const int SCHAR_MAX = 127;

const int SHRT_MAX = 32767;

const int INT_MAX = 2147483647;

const int LONG_MAX = 9223372036854775807;

const int SCHAR_MIN = -128;

const int SHRT_MIN = -32768;

const int INT_MIN = -2147483648;

const int LONG_MIN = -9223372036854775808;

const int UCHAR_MAX = 255;

const int USHRT_MAX = 65535;

const int UINT_MAX = 4294967295;

const int ULONG_MAX = -1;

const int CHAR_BIT = 8;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGABRT = 6;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGHUP = 1;

const int SIGQUIT = 3;

const int SIGTRAP = 5;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGCLD = 17;

const int _BITS_SIGNUM_ARCH_H = 1;

const int SIGSTKFLT = 16;

const int SIGPWR = 30;

const int SIGBUS = 7;

const int SIGSYS = 31;

const int SIGURG = 23;

const int SIGSTOP = 19;

const int SIGTSTP = 20;

const int SIGCONT = 18;

const int SIGCHLD = 17;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGPOLL = 29;

const int SIGXFSZ = 25;

const int SIGXCPU = 24;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGWINCH = 28;

const int __SIGRTMIN = 32;

const int __SIGRTMAX = 64;

const int _NSIG = 65;

const int __sig_atomic_t_defined = 1;

const int __siginfo_t_defined = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int _BITS_SIGINFO_ARCH_H = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD1 = -7;

const int SI_TKILL1 = -6;

const int SI_SIGIO1 = -5;

const int SI_ASYNCIO1 = -4;

const int SI_MESGQ1 = -3;

const int SI_TIMER1 = -2;

const int SI_QUEUE1 = -1;

const int SI_USER1 = 0;

const int SI_KERNEL1 = 128;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLADR1 = 3;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG1 = 6;

const int ILL_COPROC1 = 7;

const int ILL_BADSTK1 = 8;

const int ILL_BADIADDR1 = 9;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF1 = 2;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTUND1 = 5;

const int FPE_FLTRES1 = 6;

const int FPE_FLTINV1 = 7;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUNK1 = 14;

const int FPE_CONDTRAP1 = 15;

const int SEGV_MAPERR1 = 1;

const int SEGV_ACCERR1 = 2;

const int SEGV_BNDERR1 = 3;

const int SEGV_PKUERR1 = 4;

const int SEGV_ACCADI1 = 5;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR1 = 7;

const int SEGV_MTEAERR1 = 8;

const int SEGV_MTESERR1 = 9;

const int SEGV_CPERR1 = 10;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR1 = 2;

const int BUS_OBJERR1 = 3;

const int BUS_MCEERR_AR1 = 4;

const int BUS_MCEERR_AO1 = 5;

const int TRAP_BRKPT1 = 1;

const int TRAP_TRACE1 = 2;

const int TRAP_BRANCH1 = 3;

const int TRAP_HWBKPT1 = 4;

const int TRAP_UNK1 = 5;

const int CLD_EXITED1 = 1;

const int CLD_KILLED1 = 2;

const int CLD_DUMPED1 = 3;

const int CLD_TRAPPED1 = 4;

const int CLD_STOPPED1 = 5;

const int CLD_CONTINUED1 = 6;

const int POLL_IN1 = 1;

const int POLL_OUT1 = 2;

const int POLL_MSG1 = 3;

const int POLL_ERR1 = 4;

const int POLL_PRI1 = 5;

const int POLL_HUP1 = 6;

const int __sigevent_t_defined = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_NONE1 = 1;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID1 = 4;

const int NSIG = 65;

const int _BITS_SIGACTION_H = 1;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_SIGINFO = 4;

const int SA_ONSTACK = 134217728;

const int SA_RESTART = 268435456;

const int SA_NODEFER = 1073741824;

const int SA_RESETHAND = 2147483648;

const int SA_INTERRUPT = 536870912;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_STACK = 134217728;

const int SIG_BLOCK = 0;

const int SIG_UNBLOCK = 1;

const int SIG_SETMASK = 2;

const int _BITS_SIGCONTEXT_H = 1;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int __stack_t_defined = 1;

const int _SYS_UCONTEXT_H = 1;

const int __NGREG = 23;

const int NGREG = 23;

const int _BITS_SIGSTACK_H = 1;

const int _BITS_SS_FLAGS_H = 1;

const int SS_ONSTACK1 = 1;

const int SS_DISABLE1 = 2;

const int __sigstack_defined = 1;

const int _BITS_SIGTHREAD_H = 1;

const int HZ = 100;

const int EXEC_PAGESIZE = 4096;

const int NOGROUP = -1;

const int MAXHOSTNAMELEN = 64;

const int MAXSYMLINKS = 20;

const int NOFILE = 256;

const int NCARGS = 131072;

const int NBBY = 8;

const int NGROUPS = 65536;

const int CANBSIZ = 255;

const int MAXPATHLEN = 4096;

const int NODEV = -1;

const int DEV_BSIZE = 512;

const int _NETINET_TCP_H = 1;

const int TCP_NODELAY = 1;

const int TCP_MAXSEG = 2;

const int TCP_CORK = 3;

const int TCP_KEEPIDLE = 4;

const int TCP_KEEPINTVL = 5;

const int TCP_KEEPCNT = 6;

const int TCP_SYNCNT = 7;

const int TCP_LINGER2 = 8;

const int TCP_DEFER_ACCEPT = 9;

const int TCP_WINDOW_CLAMP = 10;

const int TCP_INFO = 11;

const int TCP_QUICKACK = 12;

const int TCP_CONGESTION = 13;

const int TCP_MD5SIG = 14;

const int TCP_COOKIE_TRANSACTIONS = 15;

const int TCP_THIN_LINEAR_TIMEOUTS = 16;

const int TCP_THIN_DUPACK = 17;

const int TCP_USER_TIMEOUT = 18;

const int TCP_REPAIR = 19;

const int TCP_REPAIR_QUEUE = 20;

const int TCP_QUEUE_SEQ = 21;

const int TCP_REPAIR_OPTIONS = 22;

const int TCP_FASTOPEN = 23;

const int TCP_TIMESTAMP = 24;

const int TCP_NOTSENT_LOWAT = 25;

const int TCP_CC_INFO = 26;

const int TCP_SAVE_SYN = 27;

const int TCP_SAVED_SYN = 28;

const int TCP_REPAIR_WINDOW = 29;

const int TCP_FASTOPEN_CONNECT = 30;

const int TCP_ULP = 31;

const int TCP_MD5SIG_EXT = 32;

const int TCP_FASTOPEN_KEY = 33;

const int TCP_FASTOPEN_NO_COOKIE = 34;

const int TCP_ZEROCOPY_RECEIVE = 35;

const int TCP_INQ = 36;

const int TCP_CM_INQ = 36;

const int TCP_TX_DELAY = 37;

const int TCP_REPAIR_ON = 1;

const int TCP_REPAIR_OFF = 0;

const int TCP_REPAIR_OFF_NO_WP = -1;

const int TH_FIN = 1;

const int TH_SYN = 2;

const int TH_RST = 4;

const int TH_PUSH = 8;

const int TH_ACK = 16;

const int TH_URG = 32;

const int TCPOPT_EOL = 0;

const int TCPOPT_NOP = 1;

const int TCPOPT_MAXSEG = 2;

const int TCPOLEN_MAXSEG = 4;

const int TCPOPT_WINDOW = 3;

const int TCPOLEN_WINDOW = 3;

const int TCPOPT_SACK_PERMITTED = 4;

const int TCPOLEN_SACK_PERMITTED = 2;

const int TCPOPT_SACK = 5;

const int TCPOPT_TIMESTAMP = 8;

const int TCPOLEN_TIMESTAMP = 10;

const int TCPOLEN_TSTAMP_APPA = 12;

const int TCPOPT_TSTAMP_HDR = 16844810;

const int TCP_MSS = 512;

const int TCP_MAXWIN = 65535;

const int TCP_MAX_WINSHIFT = 14;

const int SOL_TCP = 6;

const int TCPI_OPT_TIMESTAMPS = 1;

const int TCPI_OPT_SACK = 2;

const int TCPI_OPT_WSCALE = 4;

const int TCPI_OPT_ECN = 8;

const int TCPI_OPT_ECN_SEEN = 16;

const int TCPI_OPT_SYN_DATA = 32;

const int TCP_MD5SIG_MAXKEYLEN = 80;

const int TCP_MD5SIG_FLAG_PREFIX = 1;

const int TCP_MD5SIG_FLAG_IFINDEX = 2;

const int TCP_COOKIE_MIN = 8;

const int TCP_COOKIE_MAX = 16;

const int TCP_COOKIE_PAIR_SIZE = 32;

const int TCP_COOKIE_IN_ALWAYS = 1;

const int TCP_COOKIE_OUT_NEVER = 2;

const int TCP_S_DATA_IN = 4;

const int TCP_S_DATA_OUT = 8;

const int TCP_MSS_DEFAULT = 536;

const int TCP_MSS_DESIRED = 1220;

const int UA_IPV6 = 1;

const int UA_INVALID_SOCKET = -1;

const int UA_INTERRUPTED = 4;

const int UA_AGAIN = 11;

const int UA_EAGAIN = 11;

const int UA_WOULDBLOCK = 11;

const int UA_ERR_CONNECTION_PROGRESS = 115;

const int UA_POLLIN = 1;

const int UA_POLLOUT = 4;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _ALLOCA_H = 1;

const int _STDIO_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int __cookie_io_functions_t_defined = 1;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int _BITS_STDIO_LIM_H = 1;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __struct_tm_defined = 1;

const int __itimerspec_defined = 1;

const int TIME_UTC = 1;

const int _BITS_SETJMP_H = 1;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int UA_STATUSCODE_INFOTYPE_DATAVALUE = 1024;

const int UA_STATUSCODE_INFOBITS_OVERFLOW = 128;

const int UA_STATUSCODE_GOOD = 0;

const int UA_STATUSCODE_UNCERTAIN = 1073741824;

const int UA_STATUSCODE_BAD = 2147483648;

const int UA_STATUSCODE_BADUNEXPECTEDERROR = 2147549184;

const int UA_STATUSCODE_BADINTERNALERROR = 2147614720;

const int UA_STATUSCODE_BADOUTOFMEMORY = 2147680256;

const int UA_STATUSCODE_BADRESOURCEUNAVAILABLE = 2147745792;

const int UA_STATUSCODE_BADCOMMUNICATIONERROR = 2147811328;

const int UA_STATUSCODE_BADENCODINGERROR = 2147876864;

const int UA_STATUSCODE_BADDECODINGERROR = 2147942400;

const int UA_STATUSCODE_BADENCODINGLIMITSEXCEEDED = 2148007936;

const int UA_STATUSCODE_BADREQUESTTOOLARGE = 2159542272;

const int UA_STATUSCODE_BADRESPONSETOOLARGE = 2159607808;

const int UA_STATUSCODE_BADUNKNOWNRESPONSE = 2148073472;

const int UA_STATUSCODE_BADTIMEOUT = 2148139008;

const int UA_STATUSCODE_BADSERVICEUNSUPPORTED = 2148204544;

const int UA_STATUSCODE_BADSHUTDOWN = 2148270080;

const int UA_STATUSCODE_BADSERVERNOTCONNECTED = 2148335616;

const int UA_STATUSCODE_BADSERVERHALTED = 2148401152;

const int UA_STATUSCODE_BADNOTHINGTODO = 2148466688;

const int UA_STATUSCODE_BADTOOMANYOPERATIONS = 2148532224;

const int UA_STATUSCODE_BADTOOMANYMONITOREDITEMS = 2161836032;

const int UA_STATUSCODE_BADDATATYPEIDUNKNOWN = 2148597760;

const int UA_STATUSCODE_BADCERTIFICATEINVALID = 2148663296;

const int UA_STATUSCODE_BADSECURITYCHECKSFAILED = 2148728832;

const int UA_STATUSCODE_BADCERTIFICATEPOLICYCHECKFAILED = 2165571584;

const int UA_STATUSCODE_BADCERTIFICATETIMEINVALID = 2148794368;

const int UA_STATUSCODE_BADCERTIFICATEISSUERTIMEINVALID = 2148859904;

const int UA_STATUSCODE_BADCERTIFICATEHOSTNAMEINVALID = 2148925440;

const int UA_STATUSCODE_BADCERTIFICATEURIINVALID = 2148990976;

const int UA_STATUSCODE_BADCERTIFICATEUSENOTALLOWED = 2149056512;

const int UA_STATUSCODE_BADCERTIFICATEISSUERUSENOTALLOWED = 2149122048;

const int UA_STATUSCODE_BADCERTIFICATEUNTRUSTED = 2149187584;

const int UA_STATUSCODE_BADCERTIFICATEREVOCATIONUNKNOWN = 2149253120;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOCATIONUNKNOWN = 2149318656;

const int UA_STATUSCODE_BADCERTIFICATEREVOKED = 2149384192;

const int UA_STATUSCODE_BADCERTIFICATEISSUERREVOKED = 2149449728;

const int UA_STATUSCODE_BADCERTIFICATECHAININCOMPLETE = 2165112832;

const int UA_STATUSCODE_BADUSERACCESSDENIED = 2149515264;

const int UA_STATUSCODE_BADIDENTITYTOKENINVALID = 2149580800;

const int UA_STATUSCODE_BADIDENTITYTOKENREJECTED = 2149646336;

const int UA_STATUSCODE_BADSECURECHANNELIDINVALID = 2149711872;

const int UA_STATUSCODE_BADINVALIDTIMESTAMP = 2149777408;

const int UA_STATUSCODE_BADNONCEINVALID = 2149842944;

const int UA_STATUSCODE_BADSESSIONIDINVALID = 2149908480;

const int UA_STATUSCODE_BADSESSIONCLOSED = 2149974016;

const int UA_STATUSCODE_BADSESSIONNOTACTIVATED = 2150039552;

const int UA_STATUSCODE_BADSUBSCRIPTIONIDINVALID = 2150105088;

const int UA_STATUSCODE_BADREQUESTHEADERINVALID = 2150236160;

const int UA_STATUSCODE_BADTIMESTAMPSTORETURNINVALID = 2150301696;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYCLIENT = 2150367232;

const int UA_STATUSCODE_BADTOOMANYARGUMENTS = 2162491392;

const int UA_STATUSCODE_BADLICENSEEXPIRED = 2165178368;

const int UA_STATUSCODE_BADLICENSELIMITSEXCEEDED = 2165243904;

const int UA_STATUSCODE_BADLICENSENOTAVAILABLE = 2165309440;

const int UA_STATUSCODE_GOODSUBSCRIPTIONTRANSFERRED = 2949120;

const int UA_STATUSCODE_GOODCOMPLETESASYNCHRONOUSLY = 3014656;

const int UA_STATUSCODE_GOODOVERLOAD = 3080192;

const int UA_STATUSCODE_GOODCLAMPED = 3145728;

const int UA_STATUSCODE_BADNOCOMMUNICATION = 2150694912;

const int UA_STATUSCODE_BADWAITINGFORINITIALDATA = 2150760448;

const int UA_STATUSCODE_BADNODEIDINVALID = 2150825984;

const int UA_STATUSCODE_BADNODEIDUNKNOWN = 2150891520;

const int UA_STATUSCODE_BADATTRIBUTEIDINVALID = 2150957056;

const int UA_STATUSCODE_BADINDEXRANGEINVALID = 2151022592;

const int UA_STATUSCODE_BADINDEXRANGENODATA = 2151088128;

const int UA_STATUSCODE_BADDATAENCODINGINVALID = 2151153664;

const int UA_STATUSCODE_BADDATAENCODINGUNSUPPORTED = 2151219200;

const int UA_STATUSCODE_BADNOTREADABLE = 2151284736;

const int UA_STATUSCODE_BADNOTWRITABLE = 2151350272;

const int UA_STATUSCODE_BADOUTOFRANGE = 2151415808;

const int UA_STATUSCODE_BADNOTSUPPORTED = 2151481344;

const int UA_STATUSCODE_BADNOTFOUND = 2151546880;

const int UA_STATUSCODE_BADOBJECTDELETED = 2151612416;

const int UA_STATUSCODE_BADNOTIMPLEMENTED = 2151677952;

const int UA_STATUSCODE_BADMONITORINGMODEINVALID = 2151743488;

const int UA_STATUSCODE_BADMONITOREDITEMIDINVALID = 2151809024;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERINVALID = 2151874560;

const int UA_STATUSCODE_BADMONITOREDITEMFILTERUNSUPPORTED = 2151940096;

const int UA_STATUSCODE_BADFILTERNOTALLOWED = 2152005632;

const int UA_STATUSCODE_BADSTRUCTUREMISSING = 2152071168;

const int UA_STATUSCODE_BADEVENTFILTERINVALID = 2152136704;

const int UA_STATUSCODE_BADCONTENTFILTERINVALID = 2152202240;

const int UA_STATUSCODE_BADFILTEROPERATORINVALID = 2160132096;

const int UA_STATUSCODE_BADFILTEROPERATORUNSUPPORTED = 2160197632;

const int UA_STATUSCODE_BADFILTEROPERANDCOUNTMISMATCH = 2160263168;

const int UA_STATUSCODE_BADFILTEROPERANDINVALID = 2152267776;

const int UA_STATUSCODE_BADFILTERELEMENTINVALID = 2160328704;

const int UA_STATUSCODE_BADFILTERLITERALINVALID = 2160394240;

const int UA_STATUSCODE_BADCONTINUATIONPOINTINVALID = 2152333312;

const int UA_STATUSCODE_BADNOCONTINUATIONPOINTS = 2152398848;

const int UA_STATUSCODE_BADREFERENCETYPEIDINVALID = 2152464384;

const int UA_STATUSCODE_BADBROWSEDIRECTIONINVALID = 2152529920;

const int UA_STATUSCODE_BADNODENOTINVIEW = 2152595456;

const int UA_STATUSCODE_BADNUMERICOVERFLOW = 2165440512;

const int UA_STATUSCODE_BADSERVERURIINVALID = 2152660992;

const int UA_STATUSCODE_BADSERVERNAMEMISSING = 2152726528;

const int UA_STATUSCODE_BADDISCOVERYURLMISSING = 2152792064;

const int UA_STATUSCODE_BADSEMPAHOREFILEMISSING = 2152857600;

const int UA_STATUSCODE_BADREQUESTTYPEINVALID = 2152923136;

const int UA_STATUSCODE_BADSECURITYMODEREJECTED = 2152988672;

const int UA_STATUSCODE_BADSECURITYPOLICYREJECTED = 2153054208;

const int UA_STATUSCODE_BADTOOMANYSESSIONS = 2153119744;

const int UA_STATUSCODE_BADUSERSIGNATUREINVALID = 2153185280;

const int UA_STATUSCODE_BADAPPLICATIONSIGNATUREINVALID = 2153250816;

const int UA_STATUSCODE_BADNOVALIDCERTIFICATES = 2153316352;

const int UA_STATUSCODE_BADIDENTITYCHANGENOTSUPPORTED = 2160459776;

const int UA_STATUSCODE_BADREQUESTCANCELLEDBYREQUEST = 2153381888;

const int UA_STATUSCODE_BADPARENTNODEIDINVALID = 2153447424;

const int UA_STATUSCODE_BADREFERENCENOTALLOWED = 2153512960;

const int UA_STATUSCODE_BADNODEIDREJECTED = 2153578496;

const int UA_STATUSCODE_BADNODEIDEXISTS = 2153644032;

const int UA_STATUSCODE_BADNODECLASSINVALID = 2153709568;

const int UA_STATUSCODE_BADBROWSENAMEINVALID = 2153775104;

const int UA_STATUSCODE_BADBROWSENAMEDUPLICATED = 2153840640;

const int UA_STATUSCODE_BADNODEATTRIBUTESINVALID = 2153906176;

const int UA_STATUSCODE_BADTYPEDEFINITIONINVALID = 2153971712;

const int UA_STATUSCODE_BADSOURCENODEIDINVALID = 2154037248;

const int UA_STATUSCODE_BADTARGETNODEIDINVALID = 2154102784;

const int UA_STATUSCODE_BADDUPLICATEREFERENCENOTALLOWED = 2154168320;

const int UA_STATUSCODE_BADINVALIDSELFREFERENCE = 2154233856;

const int UA_STATUSCODE_BADREFERENCELOCALONLY = 2154299392;

const int UA_STATUSCODE_BADNODELETERIGHTS = 2154364928;

const int UA_STATUSCODE_UNCERTAINREFERENCENOTDELETED = 1086062592;

const int UA_STATUSCODE_BADSERVERINDEXINVALID = 2154430464;

const int UA_STATUSCODE_BADVIEWIDUNKNOWN = 2154496000;

const int UA_STATUSCODE_BADVIEWTIMESTAMPINVALID = 2160656384;

const int UA_STATUSCODE_BADVIEWPARAMETERMISMATCH = 2160721920;

const int UA_STATUSCODE_BADVIEWVERSIONINVALID = 2160787456;

const int UA_STATUSCODE_UNCERTAINNOTALLNODESAVAILABLE = 1086324736;

const int UA_STATUSCODE_GOODRESULTSMAYBEINCOMPLETE = 12189696;

const int UA_STATUSCODE_BADNOTTYPEDEFINITION = 2160590848;

const int UA_STATUSCODE_UNCERTAINREFERENCEOUTOFSERVER = 1080819712;

const int UA_STATUSCODE_BADTOOMANYMATCHES = 2154627072;

const int UA_STATUSCODE_BADQUERYTOOCOMPLEX = 2154692608;

const int UA_STATUSCODE_BADNOMATCH = 2154758144;

const int UA_STATUSCODE_BADMAXAGEINVALID = 2154823680;

const int UA_STATUSCODE_BADSECURITYMODEINSUFFICIENT = 2162556928;

const int UA_STATUSCODE_BADHISTORYOPERATIONINVALID = 2154889216;

const int UA_STATUSCODE_BADHISTORYOPERATIONUNSUPPORTED = 2154954752;

const int UA_STATUSCODE_BADINVALIDTIMESTAMPARGUMENT = 2159869952;

const int UA_STATUSCODE_BADWRITENOTSUPPORTED = 2155020288;

const int UA_STATUSCODE_BADTYPEMISMATCH = 2155085824;

const int UA_STATUSCODE_BADMETHODINVALID = 2155151360;

const int UA_STATUSCODE_BADARGUMENTSMISSING = 2155216896;

const int UA_STATUSCODE_BADNOTEXECUTABLE = 2165374976;

const int UA_STATUSCODE_BADTOOMANYSUBSCRIPTIONS = 2155282432;

const int UA_STATUSCODE_BADTOOMANYPUBLISHREQUESTS = 2155347968;

const int UA_STATUSCODE_BADNOSUBSCRIPTION = 2155413504;

const int UA_STATUSCODE_BADSEQUENCENUMBERUNKNOWN = 2155479040;

const int UA_STATUSCODE_GOODRETRANSMISSIONQUEUENOTSUPPORTED = 14614528;

const int UA_STATUSCODE_BADMESSAGENOTAVAILABLE = 2155544576;

const int UA_STATUSCODE_BADINSUFFICIENTCLIENTPROFILE = 2155610112;

const int UA_STATUSCODE_BADSTATENOTACTIVE = 2160001024;

const int UA_STATUSCODE_BADALREADYEXISTS = 2165637120;

const int UA_STATUSCODE_BADTCPSERVERTOOBUSY = 2155675648;

const int UA_STATUSCODE_BADTCPMESSAGETYPEINVALID = 2155741184;

const int UA_STATUSCODE_BADTCPSECURECHANNELUNKNOWN = 2155806720;

const int UA_STATUSCODE_BADTCPMESSAGETOOLARGE = 2155872256;

const int UA_STATUSCODE_BADTCPNOTENOUGHRESOURCES = 2155937792;

const int UA_STATUSCODE_BADTCPINTERNALERROR = 2156003328;

const int UA_STATUSCODE_BADTCPENDPOINTURLINVALID = 2156068864;

const int UA_STATUSCODE_BADREQUESTINTERRUPTED = 2156134400;

const int UA_STATUSCODE_BADREQUESTTIMEOUT = 2156199936;

const int UA_STATUSCODE_BADSECURECHANNELCLOSED = 2156265472;

const int UA_STATUSCODE_BADSECURECHANNELTOKENUNKNOWN = 2156331008;

const int UA_STATUSCODE_BADSEQUENCENUMBERINVALID = 2156396544;

const int UA_STATUSCODE_BADPROTOCOLVERSIONUNSUPPORTED = 2159935488;

const int UA_STATUSCODE_BADCONFIGURATIONERROR = 2156462080;

const int UA_STATUSCODE_BADNOTCONNECTED = 2156527616;

const int UA_STATUSCODE_BADDEVICEFAILURE = 2156593152;

const int UA_STATUSCODE_BADSENSORFAILURE = 2156658688;

const int UA_STATUSCODE_BADOUTOFSERVICE = 2156724224;

const int UA_STATUSCODE_BADDEADBANDFILTERINVALID = 2156789760;

const int UA_STATUSCODE_UNCERTAINNOCOMMUNICATIONLASTUSABLEVALUE = 1083113472;

const int UA_STATUSCODE_UNCERTAINLASTUSABLEVALUE = 1083179008;

const int UA_STATUSCODE_UNCERTAINSUBSTITUTEVALUE = 1083244544;

const int UA_STATUSCODE_UNCERTAININITIALVALUE = 1083310080;

const int UA_STATUSCODE_UNCERTAINSENSORNOTACCURATE = 1083375616;

const int UA_STATUSCODE_UNCERTAINENGINEERINGUNITSEXCEEDED = 1083441152;

const int UA_STATUSCODE_UNCERTAINSUBNORMAL = 1083506688;

const int UA_STATUSCODE_GOODLOCALOVERRIDE = 9830400;

const int UA_STATUSCODE_BADREFRESHINPROGRESS = 2157379584;

const int UA_STATUSCODE_BADCONDITIONALREADYDISABLED = 2157445120;

const int UA_STATUSCODE_BADCONDITIONALREADYENABLED = 2160852992;

const int UA_STATUSCODE_BADCONDITIONDISABLED = 2157510656;

const int UA_STATUSCODE_BADEVENTIDUNKNOWN = 2157576192;

const int UA_STATUSCODE_BADEVENTNOTACKNOWLEDGEABLE = 2159738880;

const int UA_STATUSCODE_BADDIALOGNOTACTIVE = 2160918528;

const int UA_STATUSCODE_BADDIALOGRESPONSEINVALID = 2160984064;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYACKED = 2161049600;

const int UA_STATUSCODE_BADCONDITIONBRANCHALREADYCONFIRMED = 2161115136;

const int UA_STATUSCODE_BADCONDITIONALREADYSHELVED = 2161180672;

const int UA_STATUSCODE_BADCONDITIONNOTSHELVED = 2161246208;

const int UA_STATUSCODE_BADSHELVINGTIMEOUTOFRANGE = 2161311744;

const int UA_STATUSCODE_BADNODATA = 2157641728;

const int UA_STATUSCODE_BADBOUNDNOTFOUND = 2161573888;

const int UA_STATUSCODE_BADBOUNDNOTSUPPORTED = 2161639424;

const int UA_STATUSCODE_BADDATALOST = 2157772800;

const int UA_STATUSCODE_BADDATAUNAVAILABLE = 2157838336;

const int UA_STATUSCODE_BADENTRYEXISTS = 2157903872;

const int UA_STATUSCODE_BADNOENTRYEXISTS = 2157969408;

const int UA_STATUSCODE_BADTIMESTAMPNOTSUPPORTED = 2158034944;

const int UA_STATUSCODE_GOODENTRYINSERTED = 10616832;

const int UA_STATUSCODE_GOODENTRYREPLACED = 10682368;

const int UA_STATUSCODE_UNCERTAINDATASUBNORMAL = 1084489728;

const int UA_STATUSCODE_GOODNODATA = 10813440;

const int UA_STATUSCODE_GOODMOREDATA = 10878976;

const int UA_STATUSCODE_BADAGGREGATELISTMISMATCH = 2161377280;

const int UA_STATUSCODE_BADAGGREGATENOTSUPPORTED = 2161442816;

const int UA_STATUSCODE_BADAGGREGATEINVALIDINPUTS = 2161508352;

const int UA_STATUSCODE_BADAGGREGATECONFIGURATIONREJECTED = 2161770496;

const int UA_STATUSCODE_GOODDATAIGNORED = 14221312;

const int UA_STATUSCODE_BADREQUESTNOTALLOWED = 2162425856;

const int UA_STATUSCODE_BADREQUESTNOTCOMPLETE = 2165506048;

const int UA_STATUSCODE_BADTICKETREQUIRED = 2166292480;

const int UA_STATUSCODE_BADTICKETINVALID = 2166358016;

const int UA_STATUSCODE_GOODEDITED = 14417920;

const int UA_STATUSCODE_GOODPOSTACTIONFAILED = 14483456;

const int UA_STATUSCODE_UNCERTAINDOMINANTVALUECHANGED = 1088290816;

const int UA_STATUSCODE_GOODDEPENDENTVALUECHANGED = 14680064;

const int UA_STATUSCODE_BADDOMINANTVALUECHANGED = 2162229248;

const int UA_STATUSCODE_UNCERTAINDEPENDENTVALUECHANGED = 1088552960;

const int UA_STATUSCODE_BADDEPENDENTVALUECHANGED = 2162360320;

const int UA_STATUSCODE_GOODEDITED_DEPENDENTVALUECHANGED = 18219008;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED = 18284544;

const int UA_STATUSCODE_GOODEDITED_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    18350080;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE = 2165899264;

const int UA_STATUSCODE_BADINITIALVALUE_OUTOFRANGE = 2165964800;

const int UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED = 2166030336;

const int UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED = 2166095872;

const int
    UA_STATUSCODE_BADOUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    2166161408;

const int
    UA_STATUSCODE_BADEDITED_OUTOFRANGE_DOMINANTVALUECHANGED_DEPENDENTVALUECHANGED =
    2166226944;

const int UA_STATUSCODE_GOODCOMMUNICATIONEVENT = 10944512;

const int UA_STATUSCODE_GOODSHUTDOWNEVENT = 11010048;

const int UA_STATUSCODE_GOODCALLAGAIN = 11075584;

const int UA_STATUSCODE_GOODNONCRITICALTIMEOUT = 11141120;

const int UA_STATUSCODE_BADINVALIDARGUMENT = 2158690304;

const int UA_STATUSCODE_BADCONNECTIONREJECTED = 2158755840;

const int UA_STATUSCODE_BADDISCONNECT = 2158821376;

const int UA_STATUSCODE_BADCONNECTIONCLOSED = 2158886912;

const int UA_STATUSCODE_BADINVALIDSTATE = 2158952448;

const int UA_STATUSCODE_BADENDOFSTREAM = 2159017984;

const int UA_STATUSCODE_BADNODATAAVAILABLE = 2159083520;

const int UA_STATUSCODE_BADWAITINGFORRESPONSE = 2159149056;

const int UA_STATUSCODE_BADOPERATIONABANDONED = 2159214592;

const int UA_STATUSCODE_BADEXPECTEDSTREAMTOBLOCK = 2159280128;

const int UA_STATUSCODE_BADWOULDBLOCK = 2159345664;

const int UA_STATUSCODE_BADSYNTAXERROR = 2159411200;

const int UA_STATUSCODE_BADMAXCONNECTIONSREACHED = 2159476736;

const int UA_NS0ID_BOOLEAN = 1;

const int UA_NS0ID_SBYTE = 2;

const int UA_NS0ID_BYTE = 3;

const int UA_NS0ID_INT16 = 4;

const int UA_NS0ID_UINT16 = 5;

const int UA_NS0ID_INT32 = 6;

const int UA_NS0ID_UINT32 = 7;

const int UA_NS0ID_INT64 = 8;

const int UA_NS0ID_UINT64 = 9;

const int UA_NS0ID_FLOAT = 10;

const int UA_NS0ID_DOUBLE = 11;

const int UA_NS0ID_STRING = 12;

const int UA_NS0ID_DATETIME = 13;

const int UA_NS0ID_GUID = 14;

const int UA_NS0ID_BYTESTRING = 15;

const int UA_NS0ID_XMLELEMENT = 16;

const int UA_NS0ID_NODEID = 17;

const int UA_NS0ID_EXPANDEDNODEID = 18;

const int UA_NS0ID_STATUSCODE = 19;

const int UA_NS0ID_QUALIFIEDNAME = 20;

const int UA_NS0ID_LOCALIZEDTEXT = 21;

const int UA_NS0ID_STRUCTURE = 22;

const int UA_NS0ID_DATAVALUE = 23;

const int UA_NS0ID_BASEDATATYPE = 24;

const int UA_NS0ID_DIAGNOSTICINFO = 25;

const int UA_NS0ID_NUMBER = 26;

const int UA_NS0ID_INTEGER = 27;

const int UA_NS0ID_UINTEGER = 28;

const int UA_NS0ID_ENUMERATION = 29;

const int UA_NS0ID_IMAGE = 30;

const int UA_NS0ID_REFERENCES = 31;

const int UA_NS0ID_NONHIERARCHICALREFERENCES = 32;

const int UA_NS0ID_HIERARCHICALREFERENCES = 33;

const int UA_NS0ID_HASCHILD = 34;

const int UA_NS0ID_ORGANIZES = 35;

const int UA_NS0ID_HASEVENTSOURCE = 36;

const int UA_NS0ID_HASMODELLINGRULE = 37;

const int UA_NS0ID_HASENCODING = 38;

const int UA_NS0ID_HASDESCRIPTION = 39;

const int UA_NS0ID_HASTYPEDEFINITION = 40;

const int UA_NS0ID_GENERATESEVENT = 41;

const int UA_NS0ID_AGGREGATES = 44;

const int UA_NS0ID_HASSUBTYPE = 45;

const int UA_NS0ID_HASPROPERTY = 46;

const int UA_NS0ID_HASCOMPONENT = 47;

const int UA_NS0ID_HASNOTIFIER = 48;

const int UA_NS0ID_HASORDEREDCOMPONENT = 49;

const int UA_NS0ID_DECIMAL = 50;

const int UA_NS0ID_FROMSTATE = 51;

const int UA_NS0ID_TOSTATE = 52;

const int UA_NS0ID_HASCAUSE = 53;

const int UA_NS0ID_HASEFFECT = 54;

const int UA_NS0ID_HASHISTORICALCONFIGURATION = 56;

const int UA_NS0ID_BASEOBJECTTYPE = 58;

const int UA_NS0ID_FOLDERTYPE = 61;

const int UA_NS0ID_BASEVARIABLETYPE = 62;

const int UA_NS0ID_BASEDATAVARIABLETYPE = 63;

const int UA_NS0ID_PROPERTYTYPE = 68;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE = 69;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE = 72;

const int UA_NS0ID_DATATYPESYSTEMTYPE = 75;

const int UA_NS0ID_DATATYPEENCODINGTYPE = 76;

const int UA_NS0ID_MODELLINGRULETYPE = 77;

const int UA_NS0ID_MODELLINGRULE_MANDATORY = 78;

const int UA_NS0ID_MODELLINGRULE_OPTIONAL = 80;

const int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY = 83;

const int UA_NS0ID_ROOTFOLDER = 84;

const int UA_NS0ID_OBJECTSFOLDER = 85;

const int UA_NS0ID_TYPESFOLDER = 86;

const int UA_NS0ID_VIEWSFOLDER = 87;

const int UA_NS0ID_OBJECTTYPESFOLDER = 88;

const int UA_NS0ID_VARIABLETYPESFOLDER = 89;

const int UA_NS0ID_DATATYPESFOLDER = 90;

const int UA_NS0ID_REFERENCETYPESFOLDER = 91;

const int UA_NS0ID_XMLSCHEMA_TYPESYSTEM = 92;

const int UA_NS0ID_OPCBINARYSCHEMA_TYPESYSTEM = 93;

const int UA_NS0ID_PERMISSIONTYPE = 94;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE = 95;

const int UA_NS0ID_ROLEPERMISSIONTYPE = 96;

const int UA_NS0ID_DATATYPEDEFINITION = 97;

const int UA_NS0ID_STRUCTURETYPE = 98;

const int UA_NS0ID_STRUCTUREDEFINITION = 99;

const int UA_NS0ID_ENUMDEFINITION = 100;

const int UA_NS0ID_STRUCTUREFIELD = 101;

const int UA_NS0ID_ENUMFIELD = 102;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DATATYPEVERSION = 104;

const int UA_NS0ID_DATATYPEDESCRIPTIONTYPE_DICTIONARYFRAGMENT = 105;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DATATYPEVERSION = 106;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_NAMESPACEURI = 107;

const int UA_NS0ID_MODELLINGRULETYPE_NAMINGRULE = 111;

const int UA_NS0ID_MODELLINGRULE_MANDATORY_NAMINGRULE = 112;

const int UA_NS0ID_MODELLINGRULE_OPTIONAL_NAMINGRULE = 113;

const int UA_NS0ID_MODELLINGRULE_EXPOSESITSARRAY_NAMINGRULE = 114;

const int UA_NS0ID_HASSUBSTATEMACHINE = 117;

const int UA_NS0ID_NAMINGRULETYPE = 120;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTBINARY = 121;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTBINARY = 122;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTBINARY = 123;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTBINARY = 124;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 125;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTBINARY = 126;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTBINARY = 127;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTBINARY = 128;

const int UA_NS0ID_HASARGUMENTDESCRIPTION = 129;

const int UA_NS0ID_HASOPTIONALINPUTARGUMENTDESCRIPTION = 131;

const int UA_NS0ID_IDTYPE = 256;

const int UA_NS0ID_NODECLASS = 257;

const int UA_NS0ID_NODE = 258;

const int UA_NS0ID_NODE_ENCODING_DEFAULTXML = 259;

const int UA_NS0ID_NODE_ENCODING_DEFAULTBINARY = 260;

const int UA_NS0ID_OBJECTNODE = 261;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTXML = 262;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTBINARY = 263;

const int UA_NS0ID_OBJECTTYPENODE = 264;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTXML = 265;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTBINARY = 266;

const int UA_NS0ID_VARIABLENODE = 267;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTXML = 268;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTBINARY = 269;

const int UA_NS0ID_VARIABLETYPENODE = 270;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTXML = 271;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTBINARY = 272;

const int UA_NS0ID_REFERENCETYPENODE = 273;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTXML = 274;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTBINARY = 275;

const int UA_NS0ID_METHODNODE = 276;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTXML = 277;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTBINARY = 278;

const int UA_NS0ID_VIEWNODE = 279;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTXML = 280;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTBINARY = 281;

const int UA_NS0ID_DATATYPENODE = 282;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTXML = 283;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTBINARY = 284;

const int UA_NS0ID_REFERENCENODE = 285;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTXML = 286;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTBINARY = 287;

const int UA_NS0ID_INTEGERID = 288;

const int UA_NS0ID_COUNTER = 289;

const int UA_NS0ID_DURATION = 290;

const int UA_NS0ID_NUMERICRANGE = 291;

const int UA_NS0ID_UTCTIME = 294;

const int UA_NS0ID_LOCALEID = 295;

const int UA_NS0ID_ARGUMENT = 296;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTXML = 297;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTBINARY = 298;

const int UA_NS0ID_STATUSRESULT = 299;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTXML = 300;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTBINARY = 301;

const int UA_NS0ID_MESSAGESECURITYMODE = 302;

const int UA_NS0ID_USERTOKENTYPE = 303;

const int UA_NS0ID_USERTOKENPOLICY = 304;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTXML = 305;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTBINARY = 306;

const int UA_NS0ID_APPLICATIONTYPE = 307;

const int UA_NS0ID_APPLICATIONDESCRIPTION = 308;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTXML = 309;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTBINARY = 310;

const int UA_NS0ID_APPLICATIONINSTANCECERTIFICATE = 311;

const int UA_NS0ID_ENDPOINTDESCRIPTION = 312;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTXML = 313;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTBINARY = 314;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE = 315;

const int UA_NS0ID_USERIDENTITYTOKEN = 316;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTXML = 317;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 318;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN = 319;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTXML = 320;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 321;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN = 322;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTXML = 323;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 324;

const int UA_NS0ID_X509IDENTITYTOKEN = 325;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTXML = 326;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTBINARY = 327;

const int UA_NS0ID_ENDPOINTCONFIGURATION = 331;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTXML = 332;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTBINARY = 333;

const int UA_NS0ID_BUILDINFO = 338;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTXML = 339;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTBINARY = 340;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE = 344;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTXML = 345;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTBINARY = 346;

const int UA_NS0ID_ATTRIBUTEWRITEMASK = 347;

const int UA_NS0ID_NODEATTRIBUTESMASK = 348;

const int UA_NS0ID_NODEATTRIBUTES = 349;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTXML = 350;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTBINARY = 351;

const int UA_NS0ID_OBJECTATTRIBUTES = 352;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTXML = 353;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTBINARY = 354;

const int UA_NS0ID_VARIABLEATTRIBUTES = 355;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTXML = 356;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTBINARY = 357;

const int UA_NS0ID_METHODATTRIBUTES = 358;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTXML = 359;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTBINARY = 360;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES = 361;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTXML = 362;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 363;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES = 364;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTXML = 365;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 366;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES = 367;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTXML = 368;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 369;

const int UA_NS0ID_DATATYPEATTRIBUTES = 370;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTXML = 371;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTBINARY = 372;

const int UA_NS0ID_VIEWATTRIBUTES = 373;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTXML = 374;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTBINARY = 375;

const int UA_NS0ID_ADDNODESITEM = 376;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTXML = 377;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTBINARY = 378;

const int UA_NS0ID_ADDREFERENCESITEM = 379;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTXML = 380;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTBINARY = 381;

const int UA_NS0ID_DELETENODESITEM = 382;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTXML = 383;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTBINARY = 384;

const int UA_NS0ID_DELETEREFERENCESITEM = 385;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTXML = 386;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTBINARY = 387;

const int UA_NS0ID_SESSIONAUTHENTICATIONTOKEN = 388;

const int UA_NS0ID_REQUESTHEADER = 389;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTXML = 390;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTBINARY = 391;

const int UA_NS0ID_RESPONSEHEADER = 392;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTXML = 393;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTBINARY = 394;

const int UA_NS0ID_SERVICEFAULT = 395;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTXML = 396;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTBINARY = 397;

const int UA_NS0ID_FINDSERVERSREQUEST = 420;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTXML = 421;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTBINARY = 422;

const int UA_NS0ID_FINDSERVERSRESPONSE = 423;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTXML = 424;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTBINARY = 425;

const int UA_NS0ID_GETENDPOINTSREQUEST = 426;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTXML = 427;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTBINARY = 428;

const int UA_NS0ID_GETENDPOINTSRESPONSE = 429;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTXML = 430;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTBINARY = 431;

const int UA_NS0ID_REGISTEREDSERVER = 432;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTXML = 433;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTBINARY = 434;

const int UA_NS0ID_REGISTERSERVERREQUEST = 435;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTXML = 436;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTBINARY = 437;

const int UA_NS0ID_REGISTERSERVERRESPONSE = 438;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTXML = 439;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTBINARY = 440;

const int UA_NS0ID_CHANNELSECURITYTOKEN = 441;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTXML = 442;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTBINARY = 443;

const int UA_NS0ID_OPENSECURECHANNELREQUEST = 444;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTXML = 445;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 446;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE = 447;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 448;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 449;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST = 450;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTXML = 451;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTBINARY = 452;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE = 453;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTXML = 454;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTBINARY = 455;

const int UA_NS0ID_SIGNATUREDATA = 456;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTXML = 457;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTBINARY = 458;

const int UA_NS0ID_CREATESESSIONREQUEST = 459;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTXML = 460;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 461;

const int UA_NS0ID_CREATESESSIONRESPONSE = 462;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTXML = 463;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 464;

const int UA_NS0ID_ACTIVATESESSIONREQUEST = 465;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTXML = 466;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTBINARY = 467;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE = 468;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTXML = 469;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 470;

const int UA_NS0ID_CLOSESESSIONREQUEST = 471;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTXML = 472;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTBINARY = 473;

const int UA_NS0ID_CLOSESESSIONRESPONSE = 474;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTXML = 475;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTBINARY = 476;

const int UA_NS0ID_CANCELREQUEST = 477;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTXML = 478;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTBINARY = 479;

const int UA_NS0ID_CANCELRESPONSE = 480;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTXML = 481;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTBINARY = 482;

const int UA_NS0ID_ADDNODESRESULT = 483;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTXML = 484;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTBINARY = 485;

const int UA_NS0ID_ADDNODESREQUEST = 486;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTXML = 487;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTBINARY = 488;

const int UA_NS0ID_ADDNODESRESPONSE = 489;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTXML = 490;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTBINARY = 491;

const int UA_NS0ID_ADDREFERENCESREQUEST = 492;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTXML = 493;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 494;

const int UA_NS0ID_ADDREFERENCESRESPONSE = 495;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTXML = 496;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 497;

const int UA_NS0ID_DELETENODESREQUEST = 498;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTXML = 499;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTBINARY = 500;

const int UA_NS0ID_DELETENODESRESPONSE = 501;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTXML = 502;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTBINARY = 503;

const int UA_NS0ID_DELETEREFERENCESREQUEST = 504;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTXML = 505;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTBINARY = 506;

const int UA_NS0ID_DELETEREFERENCESRESPONSE = 507;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTXML = 508;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTBINARY = 509;

const int UA_NS0ID_BROWSEDIRECTION = 510;

const int UA_NS0ID_VIEWDESCRIPTION = 511;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTXML = 512;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTBINARY = 513;

const int UA_NS0ID_BROWSEDESCRIPTION = 514;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTXML = 515;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTBINARY = 516;

const int UA_NS0ID_BROWSERESULTMASK = 517;

const int UA_NS0ID_REFERENCEDESCRIPTION = 518;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTXML = 519;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTBINARY = 520;

const int UA_NS0ID_CONTINUATIONPOINT = 521;

const int UA_NS0ID_BROWSERESULT = 522;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTXML = 523;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTBINARY = 524;

const int UA_NS0ID_BROWSEREQUEST = 525;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTXML = 526;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTBINARY = 527;

const int UA_NS0ID_BROWSERESPONSE = 528;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTXML = 529;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTBINARY = 530;

const int UA_NS0ID_BROWSENEXTREQUEST = 531;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTXML = 532;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTBINARY = 533;

const int UA_NS0ID_BROWSENEXTRESPONSE = 534;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTXML = 535;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTBINARY = 536;

const int UA_NS0ID_RELATIVEPATHELEMENT = 537;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTXML = 538;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTBINARY = 539;

const int UA_NS0ID_RELATIVEPATH = 540;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTXML = 541;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTBINARY = 542;

const int UA_NS0ID_BROWSEPATH = 543;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTXML = 544;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTBINARY = 545;

const int UA_NS0ID_BROWSEPATHTARGET = 546;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTXML = 547;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTBINARY = 548;

const int UA_NS0ID_BROWSEPATHRESULT = 549;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTXML = 550;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTBINARY = 551;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 552;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTXML =
    553;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTBINARY =
    554;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 555;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTXML =
    556;

const int
    UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTBINARY = 557;

const int UA_NS0ID_REGISTERNODESREQUEST = 558;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTXML = 559;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 560;

const int UA_NS0ID_REGISTERNODESRESPONSE = 561;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 562;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 563;

const int UA_NS0ID_UNREGISTERNODESREQUEST = 564;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTXML = 565;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTBINARY = 566;

const int UA_NS0ID_UNREGISTERNODESRESPONSE = 567;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTXML = 568;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTBINARY = 569;

const int UA_NS0ID_QUERYDATADESCRIPTION = 570;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTXML = 571;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTBINARY = 572;

const int UA_NS0ID_NODETYPEDESCRIPTION = 573;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTXML = 574;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 575;

const int UA_NS0ID_FILTEROPERATOR = 576;

const int UA_NS0ID_QUERYDATASET = 577;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTXML = 578;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTBINARY = 579;

const int UA_NS0ID_NODEREFERENCE = 580;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTXML = 581;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTBINARY = 582;

const int UA_NS0ID_CONTENTFILTERELEMENT = 583;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTXML = 584;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTBINARY = 585;

const int UA_NS0ID_CONTENTFILTER = 586;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTXML = 587;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTBINARY = 588;

const int UA_NS0ID_FILTEROPERAND = 589;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTXML = 590;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTBINARY = 591;

const int UA_NS0ID_ELEMENTOPERAND = 592;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTXML = 593;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTBINARY = 594;

const int UA_NS0ID_LITERALOPERAND = 595;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTXML = 596;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTBINARY = 597;

const int UA_NS0ID_ATTRIBUTEOPERAND = 598;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 599;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 600;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND = 601;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTXML = 602;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTBINARY = 603;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT = 604;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTXML = 605;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTBINARY = 606;

const int UA_NS0ID_CONTENTFILTERRESULT = 607;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTXML = 608;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTBINARY = 609;

const int UA_NS0ID_PARSINGRESULT = 610;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTXML = 611;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTBINARY = 612;

const int UA_NS0ID_QUERYFIRSTREQUEST = 613;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTXML = 614;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTBINARY = 615;

const int UA_NS0ID_QUERYFIRSTRESPONSE = 616;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTXML = 617;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTBINARY = 618;

const int UA_NS0ID_QUERYNEXTREQUEST = 619;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTXML = 620;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTBINARY = 621;

const int UA_NS0ID_QUERYNEXTRESPONSE = 622;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTXML = 623;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTBINARY = 624;

const int UA_NS0ID_TIMESTAMPSTORETURN = 625;

const int UA_NS0ID_READVALUEID = 626;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTXML = 627;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTBINARY = 628;

const int UA_NS0ID_READREQUEST = 629;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTXML = 630;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTBINARY = 631;

const int UA_NS0ID_READRESPONSE = 632;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTXML = 633;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTBINARY = 634;

const int UA_NS0ID_HISTORYREADVALUEID = 635;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTXML = 636;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTBINARY = 637;

const int UA_NS0ID_HISTORYREADRESULT = 638;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTXML = 639;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTBINARY = 640;

const int UA_NS0ID_HISTORYREADDETAILS = 641;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTXML = 642;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTBINARY = 643;

const int UA_NS0ID_READEVENTDETAILS = 644;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTXML = 645;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTBINARY = 646;

const int UA_NS0ID_READRAWMODIFIEDDETAILS = 647;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 648;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 649;

const int UA_NS0ID_READPROCESSEDDETAILS = 650;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTXML = 651;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTBINARY = 652;

const int UA_NS0ID_READATTIMEDETAILS = 653;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTXML = 654;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTBINARY = 655;

const int UA_NS0ID_HISTORYDATA = 656;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTXML = 657;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTBINARY = 658;

const int UA_NS0ID_HISTORYEVENT = 659;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTXML = 660;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTBINARY = 661;

const int UA_NS0ID_HISTORYREADREQUEST = 662;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTXML = 663;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTBINARY = 664;

const int UA_NS0ID_HISTORYREADRESPONSE = 665;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTXML = 666;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTBINARY = 667;

const int UA_NS0ID_WRITEVALUE = 668;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTXML = 669;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTBINARY = 670;

const int UA_NS0ID_WRITEREQUEST = 671;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTXML = 672;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTBINARY = 673;

const int UA_NS0ID_WRITERESPONSE = 674;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTXML = 675;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTBINARY = 676;

const int UA_NS0ID_HISTORYUPDATEDETAILS = 677;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTXML = 678;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTBINARY = 679;

const int UA_NS0ID_UPDATEDATADETAILS = 680;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTXML = 681;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTBINARY = 682;

const int UA_NS0ID_UPDATEEVENTDETAILS = 683;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTXML = 684;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTBINARY = 685;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS = 686;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTXML = 687;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTBINARY = 688;

const int UA_NS0ID_DELETEATTIMEDETAILS = 689;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTXML = 690;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTBINARY = 691;

const int UA_NS0ID_DELETEEVENTDETAILS = 692;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTXML = 693;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTBINARY = 694;

const int UA_NS0ID_HISTORYUPDATERESULT = 695;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTXML = 696;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTBINARY = 697;

const int UA_NS0ID_HISTORYUPDATEREQUEST = 698;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTXML = 699;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTBINARY = 700;

const int UA_NS0ID_HISTORYUPDATERESPONSE = 701;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTXML = 702;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTBINARY = 703;

const int UA_NS0ID_CALLMETHODREQUEST = 704;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTXML = 705;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTBINARY = 706;

const int UA_NS0ID_CALLMETHODRESULT = 707;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTXML = 708;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTBINARY = 709;

const int UA_NS0ID_CALLREQUEST = 710;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTXML = 711;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTBINARY = 712;

const int UA_NS0ID_CALLRESPONSE = 713;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTXML = 714;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTBINARY = 715;

const int UA_NS0ID_MONITORINGMODE = 716;

const int UA_NS0ID_DATACHANGETRIGGER = 717;

const int UA_NS0ID_DEADBANDTYPE = 718;

const int UA_NS0ID_MONITORINGFILTER = 719;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTXML = 720;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTBINARY = 721;

const int UA_NS0ID_DATACHANGEFILTER = 722;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTXML = 723;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTBINARY = 724;

const int UA_NS0ID_EVENTFILTER = 725;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTXML = 726;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTBINARY = 727;

const int UA_NS0ID_AGGREGATEFILTER = 728;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTXML = 729;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTBINARY = 730;

const int UA_NS0ID_MONITORINGFILTERRESULT = 731;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTXML = 732;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTBINARY = 733;

const int UA_NS0ID_EVENTFILTERRESULT = 734;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTXML = 735;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTBINARY = 736;

const int UA_NS0ID_AGGREGATEFILTERRESULT = 737;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTXML = 738;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTBINARY = 739;

const int UA_NS0ID_MONITORINGPARAMETERS = 740;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTXML = 741;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTBINARY = 742;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST = 743;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTXML = 744;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTBINARY = 745;

const int UA_NS0ID_MONITOREDITEMCREATERESULT = 746;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTXML = 747;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTBINARY = 748;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST = 749;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 750;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 751;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE = 752;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 753;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 754;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST = 755;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTXML = 756;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTBINARY = 757;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT = 758;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTXML = 759;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTBINARY = 760;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST = 761;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 762;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 763;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE = 764;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 765;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 766;

const int UA_NS0ID_SETMONITORINGMODEREQUEST = 767;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTXML = 768;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTBINARY = 769;

const int UA_NS0ID_SETMONITORINGMODERESPONSE = 770;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTXML = 771;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTBINARY = 772;

const int UA_NS0ID_SETTRIGGERINGREQUEST = 773;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTXML = 774;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTBINARY = 775;

const int UA_NS0ID_SETTRIGGERINGRESPONSE = 776;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTXML = 777;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTBINARY = 778;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST = 779;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTXML = 780;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTBINARY = 781;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE = 782;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTXML = 783;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTBINARY = 784;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST = 785;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 786;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 787;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE = 788;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 789;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 790;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST = 791;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTXML = 792;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTBINARY = 793;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE = 794;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTXML = 795;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTBINARY = 796;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST = 797;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTXML = 798;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTBINARY = 799;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE = 800;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTXML = 801;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTBINARY = 802;

const int UA_NS0ID_NOTIFICATIONMESSAGE = 803;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTXML = 804;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTBINARY = 805;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION = 806;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTXML = 807;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTBINARY = 808;

const int UA_NS0ID_DATACHANGENOTIFICATION = 809;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTXML = 810;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 811;

const int UA_NS0ID_STATUSCHANGENOTIFICATION = 818;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTXML = 819;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTBINARY = 820;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT = 821;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTXML = 822;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTBINARY = 823;

const int UA_NS0ID_PUBLISHREQUEST = 824;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTXML = 825;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTBINARY = 826;

const int UA_NS0ID_PUBLISHRESPONSE = 827;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTXML = 828;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 829;

const int UA_NS0ID_REPUBLISHREQUEST = 830;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTXML = 831;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTBINARY = 832;

const int UA_NS0ID_REPUBLISHRESPONSE = 833;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTXML = 834;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTBINARY = 835;

const int UA_NS0ID_TRANSFERRESULT = 836;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTXML = 837;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTBINARY = 838;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST = 839;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 840;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 841;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE = 842;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 843;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 844;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST = 845;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTXML = 846;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTBINARY = 847;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE = 848;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTXML = 849;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTBINARY = 850;

const int UA_NS0ID_REDUNDANCYSUPPORT = 851;

const int UA_NS0ID_SERVERSTATE = 852;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE = 853;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTXML = 854;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTBINARY = 855;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 856;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML =
    857;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY =
    858;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE = 859;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTXML = 860;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTBINARY =
    861;

const int UA_NS0ID_SERVERSTATUSDATATYPE = 862;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTXML = 863;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTBINARY = 864;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE = 865;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 866;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 867;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE = 868;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 869;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY =
    870;

const int UA_NS0ID_SERVICECOUNTERDATATYPE = 871;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTXML = 872;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTBINARY = 873;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 874;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTXML = 875;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTBINARY = 876;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE = 877;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 878;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 879;

const int UA_NS0ID_RANGE = 884;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTXML = 885;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTBINARY = 886;

const int UA_NS0ID_EUINFORMATION = 887;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTXML = 888;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTBINARY = 889;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT = 890;

const int UA_NS0ID_ANNOTATION = 891;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTXML = 892;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTBINARY = 893;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE = 894;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTXML = 895;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTBINARY = 896;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE = 897;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTXML = 898;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTBINARY = 899;

const int UA_NS0ID_EVENTNOTIFICATIONLIST = 914;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTXML = 915;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTBINARY = 916;

const int UA_NS0ID_EVENTFIELDLIST = 917;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTXML = 918;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTBINARY = 919;

const int UA_NS0ID_HISTORYEVENTFIELDLIST = 920;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTXML = 921;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTBINARY = 922;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN = 938;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTXML = 939;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTBINARY = 940;

const int UA_NS0ID_NOTIFICATIONDATA = 945;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTXML = 946;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTBINARY = 947;

const int UA_NS0ID_AGGREGATECONFIGURATION = 948;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTXML = 949;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTBINARY = 950;

const int UA_NS0ID_IMAGEBMP = 2000;

const int UA_NS0ID_IMAGEGIF = 2001;

const int UA_NS0ID_IMAGEJPG = 2002;

const int UA_NS0ID_IMAGEPNG = 2003;

const int UA_NS0ID_SERVERTYPE = 2004;

const int UA_NS0ID_SERVERTYPE_SERVERARRAY = 2005;

const int UA_NS0ID_SERVERTYPE_NAMESPACEARRAY = 2006;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS = 2007;

const int UA_NS0ID_SERVERTYPE_SERVICELEVEL = 2008;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES = 2009;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS = 2010;

const int UA_NS0ID_SERVERTYPE_VENDORSERVERINFO = 2011;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY = 2012;

const int UA_NS0ID_SERVERCAPABILITIESTYPE = 2013;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SERVERPROFILEARRAY = 2014;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_LOCALEIDARRAY = 2016;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MINSUPPORTEDSAMPLERATE = 2017;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MODELLINGRULES = 2019;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE = 2020;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY = 2021;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    2022;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY = 2023;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_ENABLEDFLAG = 2025;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE = 2026;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONDIAGNOSTICSARRAY =
    2027;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_SESSIONSECURITYDIAGNOSTICSARRAY =
    2028;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE = 2029;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS = 2030;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS =
    2031;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SUBSCRIPTIONDIAGNOSTICSARRAY =
    2032;

const int UA_NS0ID_VENDORSERVERINFOTYPE = 2033;

const int UA_NS0ID_SERVERREDUNDANCYTYPE = 2034;

const int UA_NS0ID_SERVERREDUNDANCYTYPE_REDUNDANCYSUPPORT = 2035;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE = 2036;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_CURRENTSERVERID = 2037;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANTSERVERARRAY = 2038;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE = 2039;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_SERVERURIARRAY = 2040;

const int UA_NS0ID_BASEEVENTTYPE = 2041;

const int UA_NS0ID_BASEEVENTTYPE_EVENTID = 2042;

const int UA_NS0ID_BASEEVENTTYPE_EVENTTYPE = 2043;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENODE = 2044;

const int UA_NS0ID_BASEEVENTTYPE_SOURCENAME = 2045;

const int UA_NS0ID_BASEEVENTTYPE_TIME = 2046;

const int UA_NS0ID_BASEEVENTTYPE_RECEIVETIME = 2047;

const int UA_NS0ID_BASEEVENTTYPE_MESSAGE = 2050;

const int UA_NS0ID_BASEEVENTTYPE_SEVERITY = 2051;

const int UA_NS0ID_AUDITEVENTTYPE = 2052;

const int UA_NS0ID_AUDITEVENTTYPE_ACTIONTIMESTAMP = 2053;

const int UA_NS0ID_AUDITEVENTTYPE_STATUS = 2054;

const int UA_NS0ID_AUDITEVENTTYPE_SERVERID = 2055;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTAUDITENTRYID = 2056;

const int UA_NS0ID_AUDITEVENTTYPE_CLIENTUSERID = 2057;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE = 2058;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE = 2059;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE = 2060;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATE = 2061;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTTYPE = 2062;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYPOLICYURI = 2063;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURITYMODE = 2065;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_REQUESTEDLIFETIME = 2066;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE = 2069;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SESSIONID = 2070;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE = 2071;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SECURECHANNELID = 2072;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATE = 2073;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_REVISEDSESSIONTIMEOUT = 2074;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE = 2075;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTSOFTWARECERTIFICATES =
    2076;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_USERIDENTITYTOKEN = 2077;

const int UA_NS0ID_AUDITCANCELEVENTTYPE = 2078;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_REQUESTHANDLE = 2079;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE = 2080;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CERTIFICATE = 2081;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE = 2082;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDHOSTNAME = 2083;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_INVALIDURI = 2084;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE = 2085;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE = 2086;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE = 2087;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE = 2088;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE = 2089;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE = 2090;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE = 2091;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_NODESTOADD = 2092;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE = 2093;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_NODESTODELETE = 2094;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE = 2095;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_REFERENCESTOADD = 2096;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE = 2097;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_REFERENCESTODELETE = 2098;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE = 2099;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE = 2100;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_INDEXRANGE = 2101;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_OLDVALUE = 2102;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_NEWVALUE = 2103;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE = 2104;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE = 2127;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_METHODID = 2128;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_INPUTARGUMENTS = 2129;

const int UA_NS0ID_SYSTEMEVENTTYPE = 2130;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE = 2131;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE = 2132;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE = 2133;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_CHANGES = 2134;

const int UA_NS0ID_SERVERVENDORCAPABILITYTYPE = 2137;

const int UA_NS0ID_SERVERSTATUSTYPE = 2138;

const int UA_NS0ID_SERVERSTATUSTYPE_STARTTIME = 2139;

const int UA_NS0ID_SERVERSTATUSTYPE_CURRENTTIME = 2140;

const int UA_NS0ID_SERVERSTATUSTYPE_STATE = 2141;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO = 2142;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE = 2150;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SERVERVIEWCOUNT = 2151;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSESSIONCOUNT = 2152;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSESSIONCOUNT = 2153;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDSESSIONCOUNT =
    2154;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDSESSIONCOUNT = 2155;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONTIMEOUTCOUNT = 2156;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SESSIONABORTCOUNT = 2157;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_PUBLISHINGINTERVALCOUNT = 2159;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CURRENTSUBSCRIPTIONCOUNT = 2160;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_CUMULATEDSUBSCRIPTIONCOUNT =
    2161;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_SECURITYREJECTEDREQUESTSCOUNT =
    2162;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYTYPE_REJECTEDREQUESTSCOUNT = 2163;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE = 2164;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE = 2165;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLINGINTERVAL = 2166;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE = 2171;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE = 2172;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SESSIONID = 2173;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_SUBSCRIPTIONID = 2174;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PRIORITY = 2175;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGINTERVAL = 2176;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXKEEPALIVECOUNT = 2177;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXNOTIFICATIONSPERPUBLISH =
    2179;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHINGENABLED = 2180;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MODIFYCOUNT = 2181;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_ENABLECOUNT = 2182;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLECOUNT = 2183;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHREQUESTCOUNT = 2184;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGEREQUESTCOUNT =
    2185;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_REPUBLISHMESSAGECOUNT = 2186;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREQUESTCOUNT = 2187;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOALTCLIENTCOUNT =
    2188;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_TRANSFERREDTOSAMECLIENTCOUNT =
    2189;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_PUBLISHREQUESTCOUNT = 2190;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DATACHANGENOTIFICATIONSCOUNT =
    2191;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NOTIFICATIONSCOUNT = 2193;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE = 2196;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE = 2197;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONID = 2198;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SESSIONNAME = 2199;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTDESCRIPTION = 2200;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SERVERURI = 2201;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ENDPOINTURL = 2202;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_LOCALEIDS = 2203;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ACTUALSESSIONTIMEOUT = 2204;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTCONNECTIONTIME = 2205;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CLIENTLASTCONTACTTIME = 2206;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTSUBSCRIPTIONSCOUNT =
    2207;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTMONITOREDITEMSCOUNT =
    2208;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CURRENTPUBLISHREQUESTSINQUEUE =
    2209;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_READCOUNT = 2217;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYREADCOUNT = 2218;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_WRITECOUNT = 2219;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_HISTORYUPDATECOUNT = 2220;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CALLCOUNT = 2221;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATEMONITOREDITEMSCOUNT =
    2222;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYMONITOREDITEMSCOUNT =
    2223;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETMONITORINGMODECOUNT = 2224;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETTRIGGERINGCOUNT = 2225;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEMONITOREDITEMSCOUNT =
    2226;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_CREATESUBSCRIPTIONCOUNT =
    2227;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MODIFYSUBSCRIPTIONCOUNT =
    2228;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_SETPUBLISHINGMODECOUNT = 2229;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_PUBLISHCOUNT = 2230;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REPUBLISHCOUNT = 2231;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSFERSUBSCRIPTIONSCOUNT =
    2232;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETESUBSCRIPTIONSCOUNT =
    2233;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDNODESCOUNT = 2234;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_ADDREFERENCESCOUNT = 2235;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETENODESCOUNT = 2236;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_DELETEREFERENCESCOUNT = 2237;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSECOUNT = 2238;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_BROWSENEXTCOUNT = 2239;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    2240;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYFIRSTCOUNT = 2241;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_QUERYNEXTCOUNT = 2242;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE = 2243;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE = 2244;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SESSIONID = 2245;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDOFSESSION = 2246;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTUSERIDHISTORY = 2247;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_AUTHENTICATIONMECHANISM =
    2248;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_ENCODING = 2249;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_TRANSPORTPROTOCOL = 2250;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYMODE = 2251;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_SECURITYPOLICYURI = 2252;

const int UA_NS0ID_SERVER = 2253;

const int UA_NS0ID_SERVER_SERVERARRAY = 2254;

const int UA_NS0ID_SERVER_NAMESPACEARRAY = 2255;

const int UA_NS0ID_SERVER_SERVERSTATUS = 2256;

const int UA_NS0ID_SERVER_SERVERSTATUS_STARTTIME = 2257;

const int UA_NS0ID_SERVER_SERVERSTATUS_CURRENTTIME = 2258;

const int UA_NS0ID_SERVER_SERVERSTATUS_STATE = 2259;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO = 2260;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 2261;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_PRODUCTURI = 2262;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 2263;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 2264;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 2265;

const int UA_NS0ID_SERVER_SERVERSTATUS_BUILDINFO_BUILDDATE = 2266;

const int UA_NS0ID_SERVER_SERVICELEVEL = 2267;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES = 2268;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SERVERPROFILEARRAY = 2269;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_LOCALEIDARRAY = 2271;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 2272;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS = 2274;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 2275;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    2276;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    2277;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    2278;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    2279;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    2281;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    2282;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    2284;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    2285;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    2286;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    2287;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    2288;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    2289;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY = 2290;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_ENABLEDFLAG = 2294;

const int UA_NS0ID_SERVER_VENDORSERVERINFO = 2295;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY = 2296;

const int UA_NS0ID_STATEMACHINETYPE = 2299;

const int UA_NS0ID_STATETYPE = 2307;

const int UA_NS0ID_STATETYPE_STATENUMBER = 2308;

const int UA_NS0ID_INITIALSTATETYPE = 2309;

const int UA_NS0ID_TRANSITIONTYPE = 2310;

const int UA_NS0ID_TRANSITIONEVENTTYPE = 2311;

const int UA_NS0ID_TRANSITIONTYPE_TRANSITIONNUMBER = 2312;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE = 2315;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE = 2318;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STEPPED = 2323;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_DEFINITION = 2324;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MAXTIMEINTERVAL = 2325;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_MINTIMEINTERVAL = 2326;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATION = 2327;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_EXCEPTIONDEVIATIONFORMAT =
    2328;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE = 2330;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYDATACAPABILITY =
    2331;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_ACCESSHISTORYEVENTSCAPABILITY =
    2332;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTDATACAPABILITY = 2334;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEDATACAPABILITY = 2335;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEDATACAPABILITY = 2336;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETERAWCAPABILITY = 2337;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEATTIMECAPABILITY = 2338;

const int UA_NS0ID_AGGREGATEFUNCTIONTYPE = 2340;

const int UA_NS0ID_AGGREGATEFUNCTION_INTERPOLATIVE = 2341;

const int UA_NS0ID_AGGREGATEFUNCTION_AVERAGE = 2342;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE = 2343;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL = 2344;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM = 2346;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM = 2347;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME = 2348;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME = 2349;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE = 2350;

const int UA_NS0ID_AGGREGATEFUNCTION_ANNOTATIONCOUNT = 2351;

const int UA_NS0ID_AGGREGATEFUNCTION_COUNT = 2352;

const int UA_NS0ID_AGGREGATEFUNCTION_NUMBEROFTRANSITIONS = 2355;

const int UA_NS0ID_AGGREGATEFUNCTION_START = 2357;

const int UA_NS0ID_AGGREGATEFUNCTION_END = 2358;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTA = 2359;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONGOOD = 2360;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONBAD = 2361;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTGOOD = 2362;

const int UA_NS0ID_AGGREGATEFUNCTION_PERCENTBAD = 2363;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY = 2364;

const int UA_NS0ID_DATAITEMTYPE = 2365;

const int UA_NS0ID_DATAITEMTYPE_DEFINITION = 2366;

const int UA_NS0ID_DATAITEMTYPE_VALUEPRECISION = 2367;

const int UA_NS0ID_ANALOGITEMTYPE = 2368;

const int UA_NS0ID_ANALOGITEMTYPE_EURANGE = 2369;

const int UA_NS0ID_ANALOGITEMTYPE_INSTRUMENTRANGE = 2370;

const int UA_NS0ID_ANALOGITEMTYPE_ENGINEERINGUNITS = 2371;

const int UA_NS0ID_DISCRETEITEMTYPE = 2372;

const int UA_NS0ID_TWOSTATEDISCRETETYPE = 2373;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_FALSESTATE = 2374;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_TRUESTATE = 2375;

const int UA_NS0ID_MULTISTATEDISCRETETYPE = 2376;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_ENUMSTRINGS = 2377;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE = 2378;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_INTERMEDIATERESULT = 2379;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE = 2380;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATESESSIONID = 2381;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_CREATECLIENTNAME = 2382;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_INVOCATIONCREATIONTIME = 2383;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTTRANSITIONTIME = 2384;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALL = 2385;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODSESSIONID = 2386;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODINPUTARGUMENTS = 2387;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODOUTPUTARGUMENTS = 2388;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODCALLTIME = 2389;

const int UA_NS0ID_PROGRAMDIAGNOSTICTYPE_LASTMETHODRETURNSTATUS = 2390;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE = 2391;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CREATABLE = 2392;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_DELETABLE = 2393;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AUTODELETE = 2394;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RECYCLECOUNT = 2395;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_INSTANCECOUNT = 2396;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXINSTANCECOUNT = 2397;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_MAXRECYCLECOUNT = 2398;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC = 2399;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY = 2400;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READY_STATENUMBER = 2401;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING = 2402;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNING_STATENUMBER = 2403;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED = 2404;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDED_STATENUMBER = 2405;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED = 2406;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTED_STATENUMBER = 2407;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY = 2408;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALTEDTOREADY_TRANSITIONNUMBER =
    2409;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING = 2410;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTORUNNING_TRANSITIONNUMBER =
    2411;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED = 2412;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOHALTED_TRANSITIONNUMBER =
    2413;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY = 2414;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOREADY_TRANSITIONNUMBER =
    2415;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED = 2416;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RUNNINGTOSUSPENDED_TRANSITIONNUMBER =
    2417;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING = 2418;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTORUNNING_TRANSITIONNUMBER =
    2419;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED = 2420;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOHALTED_TRANSITIONNUMBER =
    2421;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY = 2422;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPENDEDTOREADY_TRANSITIONNUMBER =
    2423;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED = 2424;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_READYTOHALTED_TRANSITIONNUMBER =
    2425;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_START = 2426;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_SUSPEND = 2427;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESUME = 2428;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_HALT = 2429;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_RESET = 2430;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_REGISTERNODESCOUNT = 2730;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNREGISTERNODESCOUNT = 2731;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBROWSECONTINUATIONPOINTS = 2732;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXQUERYCONTINUATIONPOINTS = 2733;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXHISTORYCONTINUATIONPOINTS = 2734;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS = 2735;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS = 2736;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS =
    2737;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE = 2738;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_CHANGES = 2739;

const int UA_NS0ID_SERVERTYPE_AUDITING = 2742;

const int UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY = 2744;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SECURECHANNELID = 2745;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT =
    2746;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT =
    2747;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE = 2748;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ENDPOINTURL = 2749;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ATTRIBUTEID = 2750;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_PARAMETERDATATYPEID = 2751;

const int UA_NS0ID_SERVERSTATUSTYPE_SECONDSTILLSHUTDOWN = 2752;

const int UA_NS0ID_SERVERSTATUSTYPE_SHUTDOWNREASON = 2753;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 2754;

const int UA_NS0ID_STATEVARIABLETYPE = 2755;

const int UA_NS0ID_STATEVARIABLETYPE_ID = 2756;

const int UA_NS0ID_STATEVARIABLETYPE_NAME = 2757;

const int UA_NS0ID_STATEVARIABLETYPE_NUMBER = 2758;

const int UA_NS0ID_STATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 2759;

const int UA_NS0ID_FINITESTATEVARIABLETYPE = 2760;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_ID = 2761;

const int UA_NS0ID_TRANSITIONVARIABLETYPE = 2762;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_ID = 2763;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NAME = 2764;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_NUMBER = 2765;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_TRANSITIONTIME = 2766;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE = 2767;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_ID = 2768;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE = 2769;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION = 2770;

const int UA_NS0ID_FINITESTATEMACHINETYPE = 2771;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE = 2772;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION = 2773;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION = 2774;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE = 2775;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE = 2776;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_OLDSTATEID = 2777;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_NEWSTATEID = 2778;

const int UA_NS0ID_CONDITIONTYPE = 2782;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE = 2787;

const int UA_NS0ID_REFRESHENDEVENTTYPE = 2788;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE = 2789;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE = 2790;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE = 2803;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE = 2829;

const int UA_NS0ID_DIALOGCONDITIONTYPE = 2830;

const int UA_NS0ID_DIALOGCONDITIONTYPE_PROMPT = 2831;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE = 2881;

const int UA_NS0ID_ALARMCONDITIONTYPE = 2915;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE = 2929;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED = 2930;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED = 2932;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED = 2933;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED = 2935;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED = 2936;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED = 2940;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED = 2942;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED = 2943;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED = 2945;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVE = 2947;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVE = 2948;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE = 2949;

const int UA_NS0ID_LIMITALARMTYPE = 2955;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVE_INPUTARGUMENTS = 2991;

const int UA_NS0ID_SERVER_SERVERSTATUS_SECONDSTILLSHUTDOWN = 2992;

const int UA_NS0ID_SERVER_SERVERSTATUS_SHUTDOWNREASON = 2993;

const int UA_NS0ID_SERVER_AUDITING = 2994;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MODELLINGRULES = 2996;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 2997;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTNOTIFICATIONSCOUNT = 2998;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE = 2999;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_FILTER = 3003;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE = 3006;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE = 3012;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE = 3014;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ISDELETEMODIFIED = 3015;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STARTTIME = 3016;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ENDTIME = 3017;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE = 3019;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_REQTIMES = 3020;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_OLDVALUES = 3021;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE = 3022;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTIDS = 3023;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_OLDVALUES = 3024;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_UPDATEDNODE = 3025;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_UPDATEDNODE = 3026;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_UPDATEDNODE = 3027;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3028;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_NEWVALUES = 3029;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_OLDVALUES = 3030;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PERFORMINSERTREPLACE = 3031;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_NEWVALUES = 3032;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_OLDVALUES = 3033;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_OLDVALUES = 3034;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE = 3035;

const int UA_NS0ID_EVENTTYPESFOLDER = 3048;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_SOFTWARECERTIFICATES = 3049;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_MAXRESPONSEMESSAGESIZE = 3050;

const int UA_NS0ID_BUILDINFOTYPE = 3051;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTURI = 3052;

const int UA_NS0ID_BUILDINFOTYPE_MANUFACTURERNAME = 3053;

const int UA_NS0ID_BUILDINFOTYPE_PRODUCTNAME = 3054;

const int UA_NS0ID_BUILDINFOTYPE_SOFTWAREVERSION = 3055;

const int UA_NS0ID_BUILDINFOTYPE_BUILDNUMBER = 3056;

const int UA_NS0ID_BUILDINFOTYPE_BUILDDATE = 3057;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSTYPE_CLIENTCERTIFICATE = 3058;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION =
    3059;

const int UA_NS0ID_DEFAULTBINARY = 3062;

const int UA_NS0ID_DEFAULTXML = 3063;

const int UA_NS0ID_ALWAYSGENERATESEVENT = 3065;

const int UA_NS0ID_ICON = 3067;

const int UA_NS0ID_NODEVERSION = 3068;

const int UA_NS0ID_LOCALTIME = 3069;

const int UA_NS0ID_ALLOWNULLS = 3070;

const int UA_NS0ID_ENUMVALUES = 3071;

const int UA_NS0ID_INPUTARGUMENTS = 3072;

const int UA_NS0ID_OUTPUTARGUMENTS = 3073;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STARTTIME = 3074;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_CURRENTTIME = 3075;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_STATE = 3076;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO = 3077;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTURI = 3078;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_MANUFACTURERNAME = 3079;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_PRODUCTNAME = 3080;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_SOFTWAREVERSION = 3081;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDNUMBER = 3082;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_BUILDINFO_BUILDDATE = 3083;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SECONDSTILLSHUTDOWN = 3084;

const int UA_NS0ID_SERVERTYPE_SERVERSTATUS_SHUTDOWNREASON = 3085;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SERVERPROFILEARRAY = 3086;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_LOCALEIDARRAY = 3087;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MINSUPPORTEDSAMPLERATE = 3088;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBROWSECONTINUATIONPOINTS =
    3089;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXQUERYCONTINUATIONPOINTS =
    3090;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXHISTORYCONTINUATIONPOINTS =
    3091;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3092;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MODELLINGRULES = 3093;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_AGGREGATEFUNCTIONS = 3094;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY = 3095;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    3096;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    3097;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    3098;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    3099;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3100;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    3101;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    3102;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    3104;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    3105;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    3106;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    3107;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    3108;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SAMPLINGINTERVALDIAGNOSTICSARRAY =
    3109;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SUBSCRIPTIONDIAGNOSTICSARRAY =
    3110;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY =
    3111;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3112;

const int
    UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3113;

const int UA_NS0ID_SERVERTYPE_SERVERDIAGNOSTICS_ENABLEDFLAG = 3114;

const int UA_NS0ID_SERVERTYPE_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3115;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SERVERVIEWCOUNT =
    3116;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSESSIONCOUNT =
    3117;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSESSIONCOUNT =
    3118;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDSESSIONCOUNT =
    3119;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3120;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONTIMEOUTCOUNT =
    3121;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SESSIONABORTCOUNT =
    3122;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_PUBLISHINGINTERVALCOUNT =
    3124;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CURRENTSUBSCRIPTIONCOUNT =
    3125;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_CUMULATEDSUBSCRIPTIONCOUNT =
    3126;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_SECURITYREJECTEDREQUESTSCOUNT =
    3127;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SERVERDIAGNOSTICSSUMMARY_REJECTEDREQUESTSCOUNT =
    3128;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3129;

const int
    UA_NS0ID_SERVERDIAGNOSTICSTYPE_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3130;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONID =
    3131;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SESSIONNAME =
    3132;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    3133;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SERVERURI =
    3134;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL =
    3135;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_LOCALEIDS =
    3136;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    3137;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    3138;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    3139;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    3140;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    3141;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    3142;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    3143;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_READCOUNT =
    3151;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    3152;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_WRITECOUNT =
    3153;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    3154;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CALLCOUNT =
    3155;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    3156;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    3157;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    3158;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    3159;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    3160;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    3161;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    3162;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    3163;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    3164;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    3165;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    3166;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    3167;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    3168;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    3169;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    3170;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    3171;

const int UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT =
    3172;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    3173;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    3174;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    3175;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    3176;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    3177;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    3178;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    3179;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    3180;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    3181;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    3182;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    3183;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    3184;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    3185;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    3186;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    3187;

const int UA_NS0ID_TRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3188;

const int UA_NS0ID_NONTRANSPARENTREDUNDANCYTYPE_REDUNDANCYSUPPORT = 3189;

const int UA_NS0ID_BASEEVENTTYPE_LOCALTIME = 3190;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTID = 3191;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_EVENTTYPE = 3192;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENODE = 3193;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SOURCENAME = 3194;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_TIME = 3195;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_RECEIVETIME = 3196;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_LOCALTIME = 3197;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_MESSAGE = 3198;

const int UA_NS0ID_EVENTQUEUEOVERFLOWEVENTTYPE_SEVERITY = 3199;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTID = 3200;

const int UA_NS0ID_AUDITEVENTTYPE_EVENTTYPE = 3201;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENODE = 3202;

const int UA_NS0ID_AUDITEVENTTYPE_SOURCENAME = 3203;

const int UA_NS0ID_AUDITEVENTTYPE_TIME = 3204;

const int UA_NS0ID_AUDITEVENTTYPE_RECEIVETIME = 3205;

const int UA_NS0ID_AUDITEVENTTYPE_LOCALTIME = 3206;

const int UA_NS0ID_AUDITEVENTTYPE_MESSAGE = 3207;

const int UA_NS0ID_AUDITEVENTTYPE_SEVERITY = 3208;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTID = 3209;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_EVENTTYPE = 3210;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENODE = 3211;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SOURCENAME = 3212;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_TIME = 3213;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_RECEIVETIME = 3214;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_LOCALTIME = 3215;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_MESSAGE = 3216;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SEVERITY = 3217;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_ACTIONTIMESTAMP = 3218;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUS = 3219;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_SERVERID = 3220;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTAUDITENTRYID = 3221;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_CLIENTUSERID = 3222;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTID = 3223;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_EVENTTYPE = 3224;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENODE = 3225;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SOURCENAME = 3226;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_TIME = 3227;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_RECEIVETIME = 3228;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_LOCALTIME = 3229;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_MESSAGE = 3230;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SEVERITY = 3231;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_ACTIONTIMESTAMP = 3232;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUS = 3233;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_SERVERID = 3234;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3235;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_CLIENTUSERID = 3236;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTID = 3237;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_EVENTTYPE = 3238;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENODE = 3239;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SOURCENAME = 3240;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_TIME = 3241;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_RECEIVETIME = 3242;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_LOCALTIME = 3243;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_MESSAGE = 3244;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SEVERITY = 3245;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_ACTIONTIMESTAMP = 3246;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUS = 3247;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SERVERID = 3248;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTAUDITENTRYID = 3249;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_CLIENTUSERID = 3250;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_SECURECHANNELID = 3251;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTID = 3252;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_EVENTTYPE = 3253;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENODE = 3254;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SOURCENAME = 3255;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_TIME = 3256;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_RECEIVETIME = 3257;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_LOCALTIME = 3258;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_MESSAGE = 3259;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SEVERITY = 3260;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_ACTIONTIMESTAMP = 3261;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUS = 3262;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_SERVERID = 3263;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3264;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_CLIENTUSERID = 3265;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTID = 3266;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_EVENTTYPE = 3267;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENODE = 3268;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SOURCENAME = 3269;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_TIME = 3270;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_RECEIVETIME = 3271;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_LOCALTIME = 3272;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_MESSAGE = 3273;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SEVERITY = 3274;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3275;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUS = 3276;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SERVERID = 3277;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3278;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_CLIENTUSERID = 3279;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTID = 3281;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_EVENTTYPE = 3282;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENODE = 3283;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SOURCENAME = 3284;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_TIME = 3285;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_RECEIVETIME = 3286;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_LOCALTIME = 3287;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_MESSAGE = 3288;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SEVERITY = 3289;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3290;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUS = 3291;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SERVERID = 3292;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3293;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTUSERID = 3294;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SECURECHANNELID = 3296;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATE = 3297;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_CLIENTCERTIFICATETHUMBPRINT = 3298;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_REVISEDSESSIONTIMEOUT = 3299;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTID = 3300;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_EVENTTYPE = 3301;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENODE = 3302;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SOURCENAME = 3303;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_TIME = 3304;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_RECEIVETIME = 3305;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_LOCALTIME = 3306;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_MESSAGE = 3307;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SEVERITY = 3308;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_ACTIONTIMESTAMP = 3309;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUS = 3310;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SERVERID = 3311;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTAUDITENTRYID = 3312;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_CLIENTUSERID = 3313;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SESSIONID = 3314;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTID = 3315;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_EVENTTYPE = 3316;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENODE = 3317;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SOURCENAME = 3318;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_TIME = 3319;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_RECEIVETIME = 3320;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_LOCALTIME = 3321;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_MESSAGE = 3322;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SEVERITY = 3323;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_ACTIONTIMESTAMP = 3324;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUS = 3325;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SERVERID = 3326;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTAUDITENTRYID = 3327;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_CLIENTUSERID = 3328;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_SESSIONID = 3329;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTID = 3330;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_EVENTTYPE = 3331;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENODE = 3332;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SOURCENAME = 3333;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_TIME = 3334;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_RECEIVETIME = 3335;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_LOCALTIME = 3336;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_MESSAGE = 3337;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SEVERITY = 3338;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_ACTIONTIMESTAMP = 3339;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUS = 3340;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_SERVERID = 3341;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTAUDITENTRYID = 3342;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_CLIENTUSERID = 3343;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTID = 3344;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_EVENTTYPE = 3345;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENODE = 3346;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SOURCENAME = 3347;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_TIME = 3348;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_RECEIVETIME = 3349;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_LOCALTIME = 3350;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_MESSAGE = 3351;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SEVERITY = 3352;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3353;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUS = 3354;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_SERVERID = 3355;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTAUDITENTRYID =
    3356;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CLIENTUSERID = 3357;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_CERTIFICATE = 3358;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTID = 3359;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_EVENTTYPE = 3360;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENODE = 3361;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SOURCENAME = 3362;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_TIME = 3363;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_RECEIVETIME = 3364;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_LOCALTIME = 3365;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_MESSAGE = 3366;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SEVERITY = 3367;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_ACTIONTIMESTAMP = 3368;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUS = 3369;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_SERVERID = 3370;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTAUDITENTRYID = 3371;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CLIENTUSERID = 3372;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_CERTIFICATE = 3373;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTID = 3374;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_EVENTTYPE = 3375;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENODE = 3376;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SOURCENAME = 3377;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_TIME = 3378;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_RECEIVETIME = 3379;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_LOCALTIME = 3380;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_MESSAGE = 3381;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SEVERITY = 3382;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_ACTIONTIMESTAMP = 3383;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUS = 3384;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_SERVERID = 3385;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTAUDITENTRYID = 3386;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CLIENTUSERID = 3387;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_CERTIFICATE = 3388;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTID = 3389;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_EVENTTYPE = 3390;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENODE = 3391;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SOURCENAME = 3392;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_TIME = 3393;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_RECEIVETIME = 3394;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_LOCALTIME = 3395;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_MESSAGE = 3396;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SEVERITY = 3397;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_ACTIONTIMESTAMP = 3398;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUS = 3399;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_SERVERID = 3400;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTAUDITENTRYID = 3401;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CLIENTUSERID = 3402;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_CERTIFICATE = 3403;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTID = 3404;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_EVENTTYPE = 3405;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENODE = 3406;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SOURCENAME = 3407;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_TIME = 3408;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_RECEIVETIME = 3409;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_LOCALTIME = 3410;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_MESSAGE = 3411;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SEVERITY = 3412;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_ACTIONTIMESTAMP = 3413;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUS = 3414;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_SERVERID = 3415;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTAUDITENTRYID = 3416;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CLIENTUSERID = 3417;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_CERTIFICATE = 3418;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTID = 3419;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_EVENTTYPE = 3420;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENODE = 3421;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SOURCENAME = 3422;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_TIME = 3423;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_RECEIVETIME = 3424;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_LOCALTIME = 3425;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_MESSAGE = 3426;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SEVERITY = 3427;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_ACTIONTIMESTAMP = 3428;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUS = 3429;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_SERVERID = 3430;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTAUDITENTRYID = 3431;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CLIENTUSERID = 3432;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_CERTIFICATE = 3433;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTID = 3434;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_EVENTTYPE = 3435;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENODE = 3436;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SOURCENAME = 3437;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_TIME = 3438;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_RECEIVETIME = 3439;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_LOCALTIME = 3440;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_MESSAGE = 3441;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SEVERITY = 3442;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_ACTIONTIMESTAMP = 3443;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_STATUS = 3444;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_SERVERID = 3445;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTAUDITENTRYID = 3446;

const int UA_NS0ID_AUDITNODEMANAGEMENTEVENTTYPE_CLIENTUSERID = 3447;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTID = 3448;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_EVENTTYPE = 3449;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENODE = 3450;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SOURCENAME = 3451;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_TIME = 3452;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_RECEIVETIME = 3453;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_LOCALTIME = 3454;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_MESSAGE = 3455;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SEVERITY = 3456;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_ACTIONTIMESTAMP = 3457;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_STATUS = 3458;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_SERVERID = 3459;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTAUDITENTRYID = 3460;

const int UA_NS0ID_AUDITADDNODESEVENTTYPE_CLIENTUSERID = 3461;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTID = 3462;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_EVENTTYPE = 3463;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENODE = 3464;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SOURCENAME = 3465;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_TIME = 3466;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_RECEIVETIME = 3467;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_LOCALTIME = 3468;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_MESSAGE = 3469;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SEVERITY = 3470;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_ACTIONTIMESTAMP = 3471;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_STATUS = 3472;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_SERVERID = 3473;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTAUDITENTRYID = 3474;

const int UA_NS0ID_AUDITDELETENODESEVENTTYPE_CLIENTUSERID = 3475;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTID = 3476;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_EVENTTYPE = 3477;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENODE = 3478;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SOURCENAME = 3479;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_TIME = 3480;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_RECEIVETIME = 3481;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_LOCALTIME = 3482;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_MESSAGE = 3483;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SEVERITY = 3484;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3485;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_STATUS = 3486;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_SERVERID = 3487;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3488;

const int UA_NS0ID_AUDITADDREFERENCESEVENTTYPE_CLIENTUSERID = 3489;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTID = 3490;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_EVENTTYPE = 3491;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENODE = 3492;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SOURCENAME = 3493;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_TIME = 3494;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_RECEIVETIME = 3495;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_LOCALTIME = 3496;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_MESSAGE = 3497;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SEVERITY = 3498;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_ACTIONTIMESTAMP = 3499;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_STATUS = 3500;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_SERVERID = 3501;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTAUDITENTRYID = 3502;

const int UA_NS0ID_AUDITDELETEREFERENCESEVENTTYPE_CLIENTUSERID = 3503;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTID = 3504;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_EVENTTYPE = 3505;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENODE = 3506;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SOURCENAME = 3507;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_TIME = 3508;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_RECEIVETIME = 3509;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_LOCALTIME = 3510;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_MESSAGE = 3511;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SEVERITY = 3512;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3513;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_STATUS = 3514;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_SERVERID = 3515;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3516;

const int UA_NS0ID_AUDITUPDATEEVENTTYPE_CLIENTUSERID = 3517;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTID = 3518;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_EVENTTYPE = 3519;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENODE = 3520;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SOURCENAME = 3521;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_TIME = 3522;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_RECEIVETIME = 3523;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_LOCALTIME = 3524;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_MESSAGE = 3525;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SEVERITY = 3526;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3527;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_STATUS = 3528;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_SERVERID = 3529;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3530;

const int UA_NS0ID_AUDITWRITEUPDATEEVENTTYPE_CLIENTUSERID = 3531;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTID = 3532;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_EVENTTYPE = 3533;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENODE = 3534;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SOURCENAME = 3535;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_TIME = 3536;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_RECEIVETIME = 3537;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_LOCALTIME = 3538;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_MESSAGE = 3539;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SEVERITY = 3540;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3541;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_STATUS = 3542;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_SERVERID = 3543;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3544;

const int UA_NS0ID_AUDITHISTORYUPDATEEVENTTYPE_CLIENTUSERID = 3545;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTID = 3546;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_EVENTTYPE = 3547;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENODE = 3548;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SOURCENAME = 3549;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_TIME = 3550;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_RECEIVETIME = 3551;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_LOCALTIME = 3552;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_MESSAGE = 3553;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SEVERITY = 3554;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3555;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_STATUS = 3556;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_SERVERID = 3557;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3558;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_CLIENTUSERID = 3559;

const int UA_NS0ID_AUDITHISTORYEVENTUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3560;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTID = 3561;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_EVENTTYPE = 3562;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENODE = 3563;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SOURCENAME = 3564;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_TIME = 3565;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_RECEIVETIME = 3566;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_LOCALTIME = 3567;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_MESSAGE = 3568;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SEVERITY = 3569;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_ACTIONTIMESTAMP = 3570;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_STATUS = 3571;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_SERVERID = 3572;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTAUDITENTRYID = 3573;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_CLIENTUSERID = 3574;

const int UA_NS0ID_AUDITHISTORYVALUEUPDATEEVENTTYPE_PARAMETERDATATYPEID = 3575;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTID = 3576;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_EVENTTYPE = 3577;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENODE = 3578;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SOURCENAME = 3579;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_TIME = 3580;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_RECEIVETIME = 3581;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_LOCALTIME = 3582;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_MESSAGE = 3583;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SEVERITY = 3584;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3585;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_STATUS = 3586;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_SERVERID = 3587;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3588;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_CLIENTUSERID = 3589;

const int UA_NS0ID_AUDITHISTORYDELETEEVENTTYPE_PARAMETERDATATYPEID = 3590;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTID = 3591;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_EVENTTYPE = 3592;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENODE = 3593;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SOURCENAME = 3594;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_TIME = 3595;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_RECEIVETIME = 3596;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_LOCALTIME = 3597;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_MESSAGE = 3598;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SEVERITY = 3599;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_ACTIONTIMESTAMP = 3600;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_STATUS = 3601;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_SERVERID = 3602;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTAUDITENTRYID =
    3603;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_CLIENTUSERID = 3604;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_PARAMETERDATATYPEID =
    3605;

const int UA_NS0ID_AUDITHISTORYRAWMODIFYDELETEEVENTTYPE_UPDATEDNODE = 3606;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTID = 3607;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_EVENTTYPE = 3608;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENODE = 3609;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SOURCENAME = 3610;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_TIME = 3611;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_RECEIVETIME = 3612;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_LOCALTIME = 3613;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_MESSAGE = 3614;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SEVERITY = 3615;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_ACTIONTIMESTAMP = 3616;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_STATUS = 3617;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_SERVERID = 3618;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3619;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_CLIENTUSERID = 3620;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_PARAMETERDATATYPEID = 3621;

const int UA_NS0ID_AUDITHISTORYATTIMEDELETEEVENTTYPE_UPDATEDNODE = 3622;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTID = 3623;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_EVENTTYPE = 3624;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENODE = 3625;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SOURCENAME = 3626;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_TIME = 3627;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_RECEIVETIME = 3628;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_LOCALTIME = 3629;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_MESSAGE = 3630;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SEVERITY = 3631;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_ACTIONTIMESTAMP = 3632;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_STATUS = 3633;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_SERVERID = 3634;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTAUDITENTRYID = 3635;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_CLIENTUSERID = 3636;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_PARAMETERDATATYPEID = 3637;

const int UA_NS0ID_AUDITHISTORYEVENTDELETEEVENTTYPE_UPDATEDNODE = 3638;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTID = 3639;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_EVENTTYPE = 3640;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENODE = 3641;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SOURCENAME = 3642;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_TIME = 3643;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_RECEIVETIME = 3644;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_LOCALTIME = 3645;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_MESSAGE = 3646;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SEVERITY = 3647;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_ACTIONTIMESTAMP = 3648;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_STATUS = 3649;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_SERVERID = 3650;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTAUDITENTRYID = 3651;

const int UA_NS0ID_AUDITUPDATEMETHODEVENTTYPE_CLIENTUSERID = 3652;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTID = 3653;

const int UA_NS0ID_SYSTEMEVENTTYPE_EVENTTYPE = 3654;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENODE = 3655;

const int UA_NS0ID_SYSTEMEVENTTYPE_SOURCENAME = 3656;

const int UA_NS0ID_SYSTEMEVENTTYPE_TIME = 3657;

const int UA_NS0ID_SYSTEMEVENTTYPE_RECEIVETIME = 3658;

const int UA_NS0ID_SYSTEMEVENTTYPE_LOCALTIME = 3659;

const int UA_NS0ID_SYSTEMEVENTTYPE_MESSAGE = 3660;

const int UA_NS0ID_SYSTEMEVENTTYPE_SEVERITY = 3661;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTID = 3662;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_EVENTTYPE = 3663;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENODE = 3664;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SOURCENAME = 3665;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_TIME = 3666;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_RECEIVETIME = 3667;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_LOCALTIME = 3668;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_MESSAGE = 3669;

const int UA_NS0ID_DEVICEFAILUREEVENTTYPE_SEVERITY = 3670;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTID = 3671;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_EVENTTYPE = 3672;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENODE = 3673;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SOURCENAME = 3674;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_TIME = 3675;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_RECEIVETIME = 3676;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_LOCALTIME = 3677;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_MESSAGE = 3678;

const int UA_NS0ID_BASEMODELCHANGEEVENTTYPE_SEVERITY = 3679;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTID = 3680;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_EVENTTYPE = 3681;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENODE = 3682;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SOURCENAME = 3683;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_TIME = 3684;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_RECEIVETIME = 3685;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_LOCALTIME = 3686;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_MESSAGE = 3687;

const int UA_NS0ID_GENERALMODELCHANGEEVENTTYPE_SEVERITY = 3688;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTID = 3689;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_EVENTTYPE = 3690;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENODE = 3691;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SOURCENAME = 3692;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_TIME = 3693;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_RECEIVETIME = 3694;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_LOCALTIME = 3695;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_MESSAGE = 3696;

const int UA_NS0ID_SEMANTICCHANGEEVENTTYPE_SEVERITY = 3697;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTURI = 3698;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_MANUFACTURERNAME = 3699;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_PRODUCTNAME = 3700;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_SOFTWAREVERSION = 3701;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDNUMBER = 3702;

const int UA_NS0ID_SERVERSTATUSTYPE_BUILDINFO_BUILDDATE = 3703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_SOFTWARECERTIFICATES = 3704;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SERVERDIAGNOSTICSSUMMARY_REJECTEDSESSIONCOUNT =
    3705;

const int UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY = 3706;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONDIAGNOSTICSARRAY =
    3707;

const int
    UA_NS0ID_SERVER_SERVERDIAGNOSTICS_SESSIONSDIAGNOSTICSSUMMARY_SESSIONSECURITYDIAGNOSTICSARRAY =
    3708;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANCYSUPPORT = 3709;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NAME = 3714;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_NUMBER = 3715;

const int UA_NS0ID_FINITESTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 3716;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NAME = 3717;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_NUMBER = 3718;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_TRANSITIONTIME = 3719;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_ID = 3720;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NAME = 3721;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_NUMBER = 3722;

const int UA_NS0ID_STATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME = 3723;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_ID = 3724;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NAME = 3725;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_NUMBER = 3726;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3727;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_ID = 3728;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NAME = 3729;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3730;

const int UA_NS0ID_FINITESTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    3731;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_ID = 3732;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NAME = 3733;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3734;

const int UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3735;

const int UA_NS0ID_INITIALSTATETYPE_STATENUMBER = 3736;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTID = 3737;

const int UA_NS0ID_TRANSITIONEVENTTYPE_EVENTTYPE = 3738;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENODE = 3739;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SOURCENAME = 3740;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TIME = 3741;

const int UA_NS0ID_TRANSITIONEVENTTYPE_RECEIVETIME = 3742;

const int UA_NS0ID_TRANSITIONEVENTTYPE_LOCALTIME = 3743;

const int UA_NS0ID_TRANSITIONEVENTTYPE_MESSAGE = 3744;

const int UA_NS0ID_TRANSITIONEVENTTYPE_SEVERITY = 3745;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_ID = 3746;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NAME = 3747;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3748;

const int UA_NS0ID_TRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME = 3749;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_ID = 3750;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NAME = 3751;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3752;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME = 3753;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_ID = 3754;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NAME = 3755;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3756;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3757;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTID = 3758;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_EVENTTYPE = 3759;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENODE = 3760;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SOURCENAME = 3761;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_TIME = 3762;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_RECEIVETIME = 3763;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_LOCALTIME = 3764;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_MESSAGE = 3765;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SEVERITY = 3766;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_ACTIONTIMESTAMP = 3767;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_STATUS = 3768;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_SERVERID = 3769;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTAUDITENTRYID = 3770;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_CLIENTUSERID = 3771;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_METHODID = 3772;

const int UA_NS0ID_AUDITUPDATESTATEEVENTTYPE_INPUTARGUMENTS = 3773;

const int UA_NS0ID_ANALOGITEMTYPE_DEFINITION = 3774;

const int UA_NS0ID_ANALOGITEMTYPE_VALUEPRECISION = 3775;

const int UA_NS0ID_DISCRETEITEMTYPE_DEFINITION = 3776;

const int UA_NS0ID_DISCRETEITEMTYPE_VALUEPRECISION = 3777;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_DEFINITION = 3778;

const int UA_NS0ID_TWOSTATEDISCRETETYPE_VALUEPRECISION = 3779;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_DEFINITION = 3780;

const int UA_NS0ID_MULTISTATEDISCRETETYPE_VALUEPRECISION = 3781;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTID = 3782;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 3783;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 3784;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 3785;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TIME = 3786;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 3787;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 3788;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_MESSAGE = 3789;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_SEVERITY = 3790;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE = 3791;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_ID = 3792;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NAME = 3793;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_NUMBER = 3794;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_FROMSTATE_EFFECTIVEDISPLAYNAME =
    3795;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE = 3796;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_ID = 3797;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NAME = 3798;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_NUMBER = 3799;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TOSTATE_EFFECTIVEDISPLAYNAME =
    3800;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION = 3801;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_ID = 3802;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NAME = 3803;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_NUMBER = 3804;

const int UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_TRANSITIONTIME = 3805;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE = 3806;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTID = 3807;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_EVENTTYPE = 3808;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENODE = 3809;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SOURCENAME = 3810;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TIME = 3811;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_RECEIVETIME = 3812;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_LOCALTIME = 3813;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_MESSAGE = 3814;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SEVERITY = 3815;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_ACTIONTIMESTAMP = 3816;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_STATUS = 3817;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_SERVERID = 3818;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTAUDITENTRYID = 3819;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_CLIENTUSERID = 3820;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_METHODID = 3821;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_INPUTARGUMENTS = 3822;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_OLDSTATEID = 3823;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_NEWSTATEID = 3824;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION = 3825;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_ID = 3826;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NAME = 3827;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_NUMBER = 3828;

const int UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_TRANSITIONTIME =
    3829;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE = 3830;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_ID = 3831;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NAME = 3832;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 3833;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    3834;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION = 3835;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_ID = 3836;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NAME = 3837;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 3838;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 3839;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATESESSIONID =
    3840;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_CREATECLIENTNAME =
    3841;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_INVOCATIONCREATIONTIME =
    3842;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTTRANSITIONTIME =
    3843;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALL =
    3844;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODSESSIONID =
    3845;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTARGUMENTS =
    3846;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTARGUMENTS =
    3847;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODCALLTIME =
    3848;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODRETURNSTATUS =
    3849;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_FINALRESULTDATA = 3850;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE = 3863;

const int UA_NS0ID_ADDCOMMENTMETHODTYPE_INPUTARGUMENTS = 3864;

const int UA_NS0ID_CONDITIONTYPE_EVENTID = 3865;

const int UA_NS0ID_CONDITIONTYPE_EVENTTYPE = 3866;

const int UA_NS0ID_CONDITIONTYPE_SOURCENODE = 3867;

const int UA_NS0ID_CONDITIONTYPE_SOURCENAME = 3868;

const int UA_NS0ID_CONDITIONTYPE_TIME = 3869;

const int UA_NS0ID_CONDITIONTYPE_RECEIVETIME = 3870;

const int UA_NS0ID_CONDITIONTYPE_LOCALTIME = 3871;

const int UA_NS0ID_CONDITIONTYPE_MESSAGE = 3872;

const int UA_NS0ID_CONDITIONTYPE_SEVERITY = 3873;

const int UA_NS0ID_CONDITIONTYPE_RETAIN = 3874;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH = 3875;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 3876;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTID = 3969;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_EVENTTYPE = 3970;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENODE = 3971;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SOURCENAME = 3972;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_TIME = 3973;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_RECEIVETIME = 3974;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_LOCALTIME = 3975;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_MESSAGE = 3976;

const int UA_NS0ID_REFRESHSTARTEVENTTYPE_SEVERITY = 3977;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTID = 3978;

const int UA_NS0ID_REFRESHENDEVENTTYPE_EVENTTYPE = 3979;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENODE = 3980;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SOURCENAME = 3981;

const int UA_NS0ID_REFRESHENDEVENTTYPE_TIME = 3982;

const int UA_NS0ID_REFRESHENDEVENTTYPE_RECEIVETIME = 3983;

const int UA_NS0ID_REFRESHENDEVENTTYPE_LOCALTIME = 3984;

const int UA_NS0ID_REFRESHENDEVENTTYPE_MESSAGE = 3985;

const int UA_NS0ID_REFRESHENDEVENTTYPE_SEVERITY = 3986;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTID = 3987;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_EVENTTYPE = 3988;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENODE = 3989;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SOURCENAME = 3990;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_TIME = 3991;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_RECEIVETIME = 3992;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_LOCALTIME = 3993;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_MESSAGE = 3994;

const int UA_NS0ID_REFRESHREQUIREDEVENTTYPE_SEVERITY = 3995;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTID = 3996;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_EVENTTYPE = 3997;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENODE = 3998;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SOURCENAME = 3999;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_TIME = 4000;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_RECEIVETIME = 4001;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_LOCALTIME = 4002;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_MESSAGE = 4003;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SEVERITY = 4004;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_ACTIONTIMESTAMP = 4005;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_STATUS = 4006;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_SERVERID = 4007;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTAUDITENTRYID = 4008;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_CLIENTUSERID = 4009;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_METHODID = 4010;

const int UA_NS0ID_AUDITCONDITIONEVENTTYPE_INPUTARGUMENTS = 4011;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTID = 4106;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_EVENTTYPE = 4107;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENODE = 4108;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SOURCENAME = 4109;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_TIME = 4110;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_RECEIVETIME = 4111;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_LOCALTIME = 4112;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_MESSAGE = 4113;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SEVERITY = 4114;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_ACTIONTIMESTAMP = 4115;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_STATUS = 4116;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_SERVERID = 4117;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTAUDITENTRYID = 4118;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_CLIENTUSERID = 4119;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_METHODID = 4120;

const int UA_NS0ID_AUDITCONDITIONENABLEEVENTTYPE_INPUTARGUMENTS = 4121;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTID = 4170;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_EVENTTYPE = 4171;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENODE = 4172;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SOURCENAME = 4173;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_TIME = 4174;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_RECEIVETIME = 4175;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_LOCALTIME = 4176;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_MESSAGE = 4177;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SEVERITY = 4178;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_ACTIONTIMESTAMP = 4179;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_STATUS = 4180;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_SERVERID = 4181;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTAUDITENTRYID = 4182;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CLIENTUSERID = 4183;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_METHODID = 4184;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_INPUTARGUMENTS = 4185;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTID = 4188;

const int UA_NS0ID_DIALOGCONDITIONTYPE_EVENTTYPE = 4189;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENODE = 4190;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SOURCENAME = 4191;

const int UA_NS0ID_DIALOGCONDITIONTYPE_TIME = 4192;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RECEIVETIME = 4193;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LOCALTIME = 4194;

const int UA_NS0ID_DIALOGCONDITIONTYPE_MESSAGE = 4195;

const int UA_NS0ID_DIALOGCONDITIONTYPE_SEVERITY = 4196;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RETAIN = 4197;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH = 4198;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 4199;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTID = 5113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_EVENTTYPE = 5114;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENODE = 5115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SOURCENAME = 5116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_TIME = 5117;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RECEIVETIME = 5118;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LOCALTIME = 5119;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_MESSAGE = 5120;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_SEVERITY = 5121;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_RETAIN = 5122;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH = 5123;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    5124;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTID = 5540;

const int UA_NS0ID_ALARMCONDITIONTYPE_EVENTTYPE = 5541;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENODE = 5542;

const int UA_NS0ID_ALARMCONDITIONTYPE_SOURCENAME = 5543;

const int UA_NS0ID_ALARMCONDITIONTYPE_TIME = 5544;

const int UA_NS0ID_ALARMCONDITIONTYPE_RECEIVETIME = 5545;

const int UA_NS0ID_ALARMCONDITIONTYPE_LOCALTIME = 5546;

const int UA_NS0ID_ALARMCONDITIONTYPE_MESSAGE = 5547;

const int UA_NS0ID_ALARMCONDITIONTYPE_SEVERITY = 5548;

const int UA_NS0ID_ALARMCONDITIONTYPE_RETAIN = 5549;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH = 5550;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 5551;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE = 6088;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_ID = 6089;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NAME = 6090;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 6091;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    6092;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION = 6093;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_ID = 6094;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NAME = 6095;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 6096;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME = 6097;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVED_STATENUMBER = 6098;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVED_STATENUMBER = 6100;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVED_STATENUMBER = 6101;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE = 6102;

const int UA_NS0ID_TIMEDSHELVEMETHODTYPE_INPUTARGUMENTS = 6103;

const int UA_NS0ID_LIMITALARMTYPE_EVENTID = 6116;

const int UA_NS0ID_LIMITALARMTYPE_EVENTTYPE = 6117;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENODE = 6118;

const int UA_NS0ID_LIMITALARMTYPE_SOURCENAME = 6119;

const int UA_NS0ID_LIMITALARMTYPE_TIME = 6120;

const int UA_NS0ID_LIMITALARMTYPE_RECEIVETIME = 6121;

const int UA_NS0ID_LIMITALARMTYPE_LOCALTIME = 6122;

const int UA_NS0ID_LIMITALARMTYPE_MESSAGE = 6123;

const int UA_NS0ID_LIMITALARMTYPE_SEVERITY = 6124;

const int UA_NS0ID_LIMITALARMTYPE_RETAIN = 6125;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH = 6126;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 6127;

const int UA_NS0ID_IDTYPE_ENUMSTRINGS = 7591;

const int UA_NS0ID_ENUMVALUETYPE = 7594;

const int UA_NS0ID_MESSAGESECURITYMODE_ENUMSTRINGS = 7595;

const int UA_NS0ID_USERTOKENTYPE_ENUMSTRINGS = 7596;

const int UA_NS0ID_APPLICATIONTYPE_ENUMSTRINGS = 7597;

const int UA_NS0ID_SECURITYTOKENREQUESTTYPE_ENUMSTRINGS = 7598;

const int UA_NS0ID_BROWSEDIRECTION_ENUMSTRINGS = 7603;

const int UA_NS0ID_FILTEROPERATOR_ENUMSTRINGS = 7605;

const int UA_NS0ID_TIMESTAMPSTORETURN_ENUMSTRINGS = 7606;

const int UA_NS0ID_MONITORINGMODE_ENUMSTRINGS = 7608;

const int UA_NS0ID_DATACHANGETRIGGER_ENUMSTRINGS = 7609;

const int UA_NS0ID_DEADBANDTYPE_ENUMSTRINGS = 7610;

const int UA_NS0ID_REDUNDANCYSUPPORT_ENUMSTRINGS = 7611;

const int UA_NS0ID_SERVERSTATE_ENUMSTRINGS = 7612;

const int UA_NS0ID_EXCEPTIONDEVIATIONFORMAT_ENUMSTRINGS = 7614;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTXML = 7616;

const int UA_NS0ID_OPCUA_BINARYSCHEMA = 7617;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEVERSION = 7618;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NAMESPACEURI = 7619;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT = 7650;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DATATYPEVERSION = 7651;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 7652;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE = 7656;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 7657;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 7658;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT = 7659;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DATATYPEVERSION = 7660;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 7661;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY = 7662;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 7663;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 7664;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION = 7665;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION =
    7666;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT =
    7667;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION = 7668;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION =
    7669;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT =
    7670;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN = 7671;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 7672;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7673;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN = 7674;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION =
    7675;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7676;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN = 7677;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION =
    7678;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7679;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN = 7680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 7681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT =
    7682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN = 7683;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION =
    7684;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT =
    7685;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION = 7686;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION =
    7687;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT =
    7688;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO = 7692;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DATATYPEVERSION = 7693;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 7694;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE = 7698;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION =
    7699;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT =
    7700;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM = 7728;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DATATYPEVERSION = 7729;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 7730;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM = 7731;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 7732;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT =
    7733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM = 7734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DATATYPEVERSION = 7735;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 7736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM = 7737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION =
    7738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT =
    7739;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER = 7782;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 7783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT =
    7784;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT = 7929;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION =
    7930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT =
    7931;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER = 7932;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DATATYPEVERSION = 7933;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 7934;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND = 7935;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DATATYPEVERSION = 7936;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 7937;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND = 7938;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 7939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 7940;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND = 7941;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DATATYPEVERSION = 7942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 7943;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND = 7944;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 7945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    7946;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND = 7947;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION =
    7948;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    7949;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT = 8004;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8005;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8006;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER = 8067;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8068;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT =
    8069;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER = 8073;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DATATYPEVERSION = 8074;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8075;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION = 8076;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION =
    8077;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT =
    8078;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST = 8172;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION =
    8173;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT =
    8174;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE = 8208;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION =
    8209;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT =
    8210;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE =
    8211;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8212;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8214;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION =
    8215;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT =
    8216;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE = 8217;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION =
    8218;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT =
    8219;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8220;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8221;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8222;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8223;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8224;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8225;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE = 8226;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION =
    8227;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT =
    8228;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8229;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8230;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8231;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8232;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8233;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8234;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8235;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8236;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8237;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE = 8238;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DATATYPEVERSION = 8239;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RANGE_DICTIONARYFRAGMENT = 8240;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION = 8241;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DATATYPEVERSION = 8242;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8243;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION = 8244;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DATATYPEVERSION = 8245;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8246;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8247;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION =
    8248;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT =
    8249;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTBINARY = 8251;

const int UA_NS0ID_OPCUA_XMLSCHEMA = 8252;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEVERSION = 8253;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NAMESPACEURI = 8254;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT = 8285;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DATATYPEVERSION = 8286;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ARGUMENT_DICTIONARYFRAGMENT = 8287;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE = 8291;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DATATYPEVERSION = 8292;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMVALUETYPE_DICTIONARYFRAGMENT = 8293;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT = 8294;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DATATYPEVERSION = 8295;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STATUSRESULT_DICTIONARYFRAGMENT = 8296;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY = 8297;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DATATYPEVERSION = 8298;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERTOKENPOLICY_DICTIONARYFRAGMENT = 8299;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION = 8300;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DATATYPEVERSION =
    8301;

const int UA_NS0ID_OPCUA_XMLSCHEMA_APPLICATIONDESCRIPTION_DICTIONARYFRAGMENT =
    8302;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION = 8303;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DATATYPEVERSION = 8304;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTDESCRIPTION_DICTIONARYFRAGMENT =
    8305;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN = 8306;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DATATYPEVERSION = 8307;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERIDENTITYTOKEN_DICTIONARYFRAGMENT = 8308;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN = 8309;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DATATYPEVERSION =
    8310;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANONYMOUSIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8311;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN = 8312;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DATATYPEVERSION = 8313;

const int UA_NS0ID_OPCUA_XMLSCHEMA_USERNAMEIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8314;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN = 8315;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DATATYPEVERSION = 8316;

const int UA_NS0ID_OPCUA_XMLSCHEMA_X509IDENTITYTOKEN_DICTIONARYFRAGMENT = 8317;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN = 8318;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DATATYPEVERSION = 8319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ISSUEDIDENTITYTOKEN_DICTIONARYFRAGMENT =
    8320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION = 8321;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DATATYPEVERSION = 8322;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTCONFIGURATION_DICTIONARYFRAGMENT =
    8323;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO = 8327;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DATATYPEVERSION = 8328;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BUILDINFO_DICTIONARYFRAGMENT = 8329;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE = 8333;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DATATYPEVERSION =
    8334;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SIGNEDSOFTWARECERTIFICATE_DICTIONARYFRAGMENT =
    8335;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM = 8363;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DATATYPEVERSION = 8364;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDNODESITEM_DICTIONARYFRAGMENT = 8365;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM = 8366;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DATATYPEVERSION = 8367;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDREFERENCESITEM_DICTIONARYFRAGMENT = 8368;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM = 8369;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DATATYPEVERSION = 8370;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETENODESITEM_DICTIONARYFRAGMENT = 8371;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM = 8372;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DATATYPEVERSION = 8373;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DELETEREFERENCESITEM_DICTIONARYFRAGMENT =
    8374;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER = 8417;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DATATYPEVERSION = 8418;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REGISTEREDSERVER_DICTIONARYFRAGMENT = 8419;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT = 8564;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DATATYPEVERSION = 8565;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTERELEMENT_DICTIONARYFRAGMENT =
    8566;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER = 8567;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DATATYPEVERSION = 8568;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONTENTFILTER_DICTIONARYFRAGMENT = 8569;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND = 8570;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DATATYPEVERSION = 8571;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FILTEROPERAND_DICTIONARYFRAGMENT = 8572;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND = 8573;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DATATYPEVERSION = 8574;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ELEMENTOPERAND_DICTIONARYFRAGMENT = 8575;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND = 8576;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DATATYPEVERSION = 8577;

const int UA_NS0ID_OPCUA_XMLSCHEMA_LITERALOPERAND_DICTIONARYFRAGMENT = 8578;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND = 8579;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DATATYPEVERSION = 8580;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ATTRIBUTEOPERAND_DICTIONARYFRAGMENT = 8581;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND = 8582;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DATATYPEVERSION =
    8583;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLEATTRIBUTEOPERAND_DICTIONARYFRAGMENT =
    8584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT = 8639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DATATYPEVERSION = 8640;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENT_DICTIONARYFRAGMENT = 8641;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER = 8702;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DATATYPEVERSION = 8703;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MONITORINGFILTER_DICTIONARYFRAGMENT = 8704;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER = 8708;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DATATYPEVERSION = 8709;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EVENTFILTER_DICTIONARYFRAGMENT = 8710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION = 8711;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DATATYPEVERSION =
    8712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AGGREGATECONFIGURATION_DICTIONARYFRAGMENT =
    8713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST = 8807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DATATYPEVERSION = 8808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_HISTORYEVENTFIELDLIST_DICTIONARYFRAGMENT =
    8809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE = 8843;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DATATYPEVERSION =
    8844;

const int UA_NS0ID_OPCUA_XMLSCHEMA_REDUNDANTSERVERDATATYPE_DICTIONARYFRAGMENT =
    8845;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE = 8846;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8847;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8848;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE = 8849;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DATATYPEVERSION =
    8850;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SERVERDIAGNOSTICSSUMMARYDATATYPE_DICTIONARYFRAGMENT =
    8851;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE = 8852;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DATATYPEVERSION = 8853;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERSTATUSDATATYPE_DICTIONARYFRAGMENT =
    8854;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE = 8855;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8856;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8857;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE = 8858;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8859;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SESSIONSECURITYDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE = 8861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DATATYPEVERSION =
    8862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVICECOUNTERDATATYPE_DICTIONARYFRAGMENT =
    8863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE = 8864;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DATATYPEVERSION =
    8865;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIPTIONDIAGNOSTICSDATATYPE_DICTIONARYFRAGMENT =
    8866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE = 8867;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8868;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MODELCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE = 8870;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DATATYPEVERSION =
    8871;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SEMANTICCHANGESTRUCTUREDATATYPE_DICTIONARYFRAGMENT =
    8872;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE = 8873;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DATATYPEVERSION = 8874;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RANGE_DICTIONARYFRAGMENT = 8875;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION = 8876;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DATATYPEVERSION = 8877;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EUINFORMATION_DICTIONARYFRAGMENT = 8878;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION = 8879;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DATATYPEVERSION = 8880;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ANNOTATION_DICTIONARYFRAGMENT = 8881;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE = 8882;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DATATYPEVERSION =
    8883;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTICDATATYPE_DICTIONARYFRAGMENT =
    8884;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MAXLIFETIMECOUNT = 8888;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_LATEPUBLISHREQUESTCOUNT = 8889;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTKEEPALIVECOUNT = 8890;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_CURRENTLIFETIMECOUNT = 8891;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_UNACKNOWLEDGEDMESSAGECOUNT =
    8892;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISCARDEDMESSAGECOUNT = 8893;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITOREDITEMCOUNT = 8894;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMCOUNT =
    8895;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_MONITORINGQUEUEOVERFLOWCOUNT =
    8896;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_NEXTSEQUENCENUMBER = 8897;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    8898;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_TOTALREQUESTCOUNT = 8900;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSTYPE_EVENTQUEUEOVERFLOWCOUNT = 8902;

const int UA_NS0ID_TIMEZONEDATATYPE = 8912;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTXML = 8913;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE = 8914;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8915;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT =
    8916;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTBINARY = 8917;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE = 8918;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DATATYPEVERSION = 8919;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TIMEZONEDATATYPE_DICTIONARYFRAGMENT = 8920;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE = 8927;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTID = 8928;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_EVENTTYPE = 8929;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENODE = 8930;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SOURCENAME = 8931;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_TIME = 8932;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_RECEIVETIME = 8933;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_LOCALTIME = 8934;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_MESSAGE = 8935;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SEVERITY = 8936;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_ACTIONTIMESTAMP = 8937;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_STATUS = 8938;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SERVERID = 8939;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTAUDITENTRYID = 8940;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_CLIENTUSERID = 8941;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_METHODID = 8942;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_INPUTARGUMENTS = 8943;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE = 8944;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTID = 8945;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_EVENTTYPE = 8946;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENODE = 8947;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SOURCENAME = 8948;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_TIME = 8949;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_RECEIVETIME = 8950;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_LOCALTIME = 8951;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_MESSAGE = 8952;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SEVERITY = 8953;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_ACTIONTIMESTAMP = 8954;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_STATUS = 8955;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_SERVERID = 8956;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTAUDITENTRYID = 8957;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CLIENTUSERID = 8958;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_METHODID = 8959;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_INPUTARGUMENTS = 8960;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE = 8961;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTID = 8962;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_EVENTTYPE = 8963;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENODE = 8964;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SOURCENAME = 8965;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_TIME = 8966;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_RECEIVETIME = 8967;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_LOCALTIME = 8968;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_MESSAGE = 8969;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SEVERITY = 8970;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_ACTIONTIMESTAMP = 8971;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_STATUS = 8972;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_SERVERID = 8973;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTAUDITENTRYID = 8974;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CLIENTUSERID = 8975;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_METHODID = 8976;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_INPUTARGUMENTS = 8977;

const int UA_NS0ID_TWOSTATEVARIABLETYPE = 8995;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_ID = 8996;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NAME = 8997;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_NUMBER = 8998;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVEDISPLAYNAME = 8999;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRANSITIONTIME = 9000;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_EFFECTIVETRANSITIONTIME = 9001;

const int UA_NS0ID_CONDITIONVARIABLETYPE = 9002;

const int UA_NS0ID_CONDITIONVARIABLETYPE_SOURCETIMESTAMP = 9003;

const int UA_NS0ID_HASTRUESUBSTATE = 9004;

const int UA_NS0ID_HASFALSESUBSTATE = 9005;

const int UA_NS0ID_HASCONDITION = 9006;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE = 9007;

const int UA_NS0ID_CONDITIONREFRESHMETHODTYPE_INPUTARGUMENTS = 9008;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONNAME = 9009;

const int UA_NS0ID_CONDITIONTYPE_BRANCHID = 9010;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE = 9011;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_ID = 9012;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NAME = 9013;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_NUMBER = 9014;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9015;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9016;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9017;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9018;

const int UA_NS0ID_CONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9019;

const int UA_NS0ID_CONDITIONTYPE_QUALITY = 9020;

const int UA_NS0ID_CONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9021;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY = 9022;

const int UA_NS0ID_CONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9023;

const int UA_NS0ID_CONDITIONTYPE_COMMENT = 9024;

const int UA_NS0ID_CONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9025;

const int UA_NS0ID_CONDITIONTYPE_CLIENTUSERID = 9026;

const int UA_NS0ID_CONDITIONTYPE_ENABLE = 9027;

const int UA_NS0ID_CONDITIONTYPE_DISABLE = 9028;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT = 9029;

const int UA_NS0ID_CONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9030;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE = 9031;

const int UA_NS0ID_DIALOGRESPONSEMETHODTYPE_INPUTARGUMENTS = 9032;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONNAME = 9033;

const int UA_NS0ID_DIALOGCONDITIONTYPE_BRANCHID = 9034;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE = 9035;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_ID = 9036;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NAME = 9037;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9038;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9039;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9040;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9041;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9042;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9043;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY = 9044;

const int UA_NS0ID_DIALOGCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9045;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY = 9046;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9047;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT = 9048;

const int UA_NS0ID_DIALOGCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9049;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CLIENTUSERID = 9050;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ENABLE = 9051;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DISABLE = 9052;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT = 9053;

const int UA_NS0ID_DIALOGCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9054;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE = 9055;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_ID = 9056;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NAME = 9057;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_NUMBER = 9058;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVEDISPLAYNAME = 9059;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRANSITIONTIME = 9060;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_EFFECTIVETRANSITIONTIME =
    9061;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_TRUESTATE = 9062;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DIALOGSTATE_FALSESTATE = 9063;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPONSEOPTIONSET = 9064;

const int UA_NS0ID_DIALOGCONDITIONTYPE_DEFAULTRESPONSE = 9065;

const int UA_NS0ID_DIALOGCONDITIONTYPE_OKRESPONSE = 9066;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CANCELRESPONSE = 9067;

const int UA_NS0ID_DIALOGCONDITIONTYPE_LASTRESPONSE = 9068;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND = 9069;

const int UA_NS0ID_DIALOGCONDITIONTYPE_RESPOND_INPUTARGUMENTS = 9070;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONNAME = 9071;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_BRANCHID = 9072;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE = 9073;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_ID = 9074;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NAME = 9075;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_NUMBER = 9076;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9077;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9078;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9079;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9080;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9081;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY = 9082;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9083;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY = 9084;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9085;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT = 9086;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9087;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CLIENTUSERID = 9088;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ENABLE = 9089;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_DISABLE = 9090;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT = 9091;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS =
    9092;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE = 9093;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_ID = 9094;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NAME = 9095;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_NUMBER = 9096;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9097;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME =
    9098;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9099;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9100;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9101;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE = 9102;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_ID = 9103;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NAME = 9104;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9105;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9106;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9107;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9108;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9109;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE =
    9110;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE = 9111;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9112;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM = 9113;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9114;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVETIME = 9115;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONNAME = 9116;

const int UA_NS0ID_ALARMCONDITIONTYPE_BRANCHID = 9117;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE = 9118;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_ID = 9119;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NAME = 9120;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_NUMBER = 9121;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9122;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRANSITIONTIME = 9123;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9124;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_TRUESTATE = 9125;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLEDSTATE_FALSESTATE = 9126;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY = 9127;

const int UA_NS0ID_ALARMCONDITIONTYPE_QUALITY_SOURCETIMESTAMP = 9128;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY = 9129;

const int UA_NS0ID_ALARMCONDITIONTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9130;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT = 9131;

const int UA_NS0ID_ALARMCONDITIONTYPE_COMMENT_SOURCETIMESTAMP = 9132;

const int UA_NS0ID_ALARMCONDITIONTYPE_CLIENTUSERID = 9133;

const int UA_NS0ID_ALARMCONDITIONTYPE_ENABLE = 9134;

const int UA_NS0ID_ALARMCONDITIONTYPE_DISABLE = 9135;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT = 9136;

const int UA_NS0ID_ALARMCONDITIONTYPE_ADDCOMMENT_INPUTARGUMENTS = 9137;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE = 9138;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_ID = 9139;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NAME = 9140;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_NUMBER = 9141;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9142;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRANSITIONTIME = 9143;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9144;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_TRUESTATE = 9145;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKEDSTATE_FALSESTATE = 9146;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE = 9147;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_ID = 9148;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NAME = 9149;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_NUMBER = 9150;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9151;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9152;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9153;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_TRUESTATE = 9154;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRMEDSTATE_FALSESTATE = 9155;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE = 9156;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9157;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM = 9158;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONFIRM_INPUTARGUMENTS = 9159;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE = 9160;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_ID = 9161;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NAME = 9162;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_NUMBER = 9163;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9164;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRANSITIONTIME = 9165;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9166;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_TRUESTATE = 9167;

const int UA_NS0ID_ALARMCONDITIONTYPE_ACTIVESTATE_FALSESTATE = 9168;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE = 9169;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_ID = 9170;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NAME = 9171;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_NUMBER = 9172;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9173;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9174;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9175;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_TRUESTATE = 9176;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDSTATE_FALSESTATE = 9177;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE = 9178;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE = 9179;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9180;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9181;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9182;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9183;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION = 9184;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9185;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9186;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9187;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9188;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVETIME = 9189;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_UNSHELVE = 9211;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9212;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE = 9213;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9214;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESSEDORSHELVED = 9215;

const int UA_NS0ID_ALARMCONDITIONTYPE_MAXTIMESHELVED = 9216;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONNAME = 9217;

const int UA_NS0ID_LIMITALARMTYPE_BRANCHID = 9218;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE = 9219;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_ID = 9220;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NAME = 9221;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9222;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 9223;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9224;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 9225;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9226;

const int UA_NS0ID_LIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9227;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY = 9228;

const int UA_NS0ID_LIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9229;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY = 9230;

const int UA_NS0ID_LIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9231;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT = 9232;

const int UA_NS0ID_LIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9233;

const int UA_NS0ID_LIMITALARMTYPE_CLIENTUSERID = 9234;

const int UA_NS0ID_LIMITALARMTYPE_ENABLE = 9235;

const int UA_NS0ID_LIMITALARMTYPE_DISABLE = 9236;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT = 9237;

const int UA_NS0ID_LIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9238;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE = 9239;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_ID = 9240;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NAME = 9241;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_NUMBER = 9242;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 9243;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9244;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 9245;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9246;

const int UA_NS0ID_LIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9247;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE = 9248;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_ID = 9249;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9250;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9251;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 9252;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9253;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 9254;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9255;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9256;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE = 9257;

const int UA_NS0ID_LIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9258;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM = 9259;

const int UA_NS0ID_LIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9260;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE = 9261;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_ID = 9262;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NAME = 9263;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_NUMBER = 9264;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 9265;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9266;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 9267;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9268;

const int UA_NS0ID_LIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9269;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE = 9270;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9271;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9272;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9273;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 9274;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 9275;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9276;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9277;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9278;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE = 9279;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9280;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9281;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 9282;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 9283;

const int
    UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9284;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9285;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 9286;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 9287;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 9288;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9289;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9290;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9312;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9313;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9314;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9315;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESSEDORSHELVED = 9316;

const int UA_NS0ID_LIMITALARMTYPE_MAXTIMESHELVED = 9317;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE = 9318;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE = 9319;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_ID = 9320;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NAME = 9321;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 9322;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9323;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION = 9324;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_ID = 9325;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NAME = 9326;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 9327;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME =
    9328;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH = 9329;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGH_STATENUMBER = 9330;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH = 9331;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGH_STATENUMBER = 9332;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW = 9333;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOW_STATENUMBER = 9334;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW = 9335;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOW_STATENUMBER = 9336;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW = 9337;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW = 9338;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH = 9339;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH = 9340;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE = 9341;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTID = 9342;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9343;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENODE = 9344;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SOURCENAME = 9345;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_TIME = 9346;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9347;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOCALTIME = 9348;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MESSAGE = 9349;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SEVERITY = 9350;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9351;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BRANCHID = 9352;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RETAIN = 9353;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9354;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9355;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9356;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9357;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9358;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9359;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9360;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9361;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9362;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY = 9363;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9364;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9365;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9366;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT = 9367;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9368;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9369;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ENABLE = 9370;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_DISABLE = 9371;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9372;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9373;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9374;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9375;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9376;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9377;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9378;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9379;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9380;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9381;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9382;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9383;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9384;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9385;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9386;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9387;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9388;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9389;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9390;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9391;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9392;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9393;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9394;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9395;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM = 9396;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9397;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9398;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9399;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9400;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9401;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9402;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9403;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9404;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9405;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9406;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9407;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9408;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9409;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9410;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9411;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9412;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9413;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9414;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9415;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9416;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9417;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9418;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9419;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9420;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9421;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9422;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9423;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9424;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9425;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9426;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9427;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 9449;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9450;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9451;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9452;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 9453;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 9454;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE = 9455;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE = 9456;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9457;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9458;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9459;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9460;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION = 9461;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9462;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9463;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9464;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9465;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 9478;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 9479;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLIMIT = 9480;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 9481;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE = 9482;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTID = 9483;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_EVENTTYPE = 9484;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENODE = 9485;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SOURCENAME = 9486;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_TIME = 9487;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RECEIVETIME = 9488;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOCALTIME = 9489;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MESSAGE = 9490;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SEVERITY = 9491;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 9492;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BRANCHID = 9493;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RETAIN = 9494;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 9495;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 9496;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 9497;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 9498;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9499;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 9500;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9501;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 9502;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 9503;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY = 9504;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 9505;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 9506;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 9507;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT = 9508;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 9509;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 9510;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ENABLE = 9511;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_DISABLE = 9512;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 9513;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9514;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 9515;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9516;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 9517;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 9518;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 9519;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 9520;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9521;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9522;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9523;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 9524;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 9525;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 9526;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 9527;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 9528;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 9529;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9530;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 9531;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9532;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9533;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9534;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 9535;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9536;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM = 9537;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 9538;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 9539;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 9540;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 9541;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 9542;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9543;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9544;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9545;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 9546;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 9547;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 9548;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 9549;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 9550;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9551;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9552;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9553;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9554;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9555;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9556;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 9557;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9558;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 9559;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9560;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9561;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9562;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 9563;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9564;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9565;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9566;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9567;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9568;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 9590;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 9591;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9592;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9593;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 9594;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 9595;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE = 9596;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE = 9597;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_ID = 9598;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME = 9599;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9600;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9601;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION = 9602;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_ID = 9603;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9604;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9605;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9606;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 9619;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 9620;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLIMIT = 9621;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 9622;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE = 9623;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 9624;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 9625;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 9626;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 9627;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 9628;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 9629;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 9630;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 9631;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 9632;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 9633;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 9634;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 9635;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 9636;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 9637;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 9638;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER = 9639;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9640;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9641;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9642;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE = 9643;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE =
    9644;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 9645;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP =
    9646;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 9647;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9648;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 9649;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP =
    9650;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 9651;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 9652;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 9653;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 9654;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    9655;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 9656;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9657;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 9658;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 9659;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 9660;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 9661;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9662;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    9663;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9664;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE = 9665;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE = 9666;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 9667;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 9668;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME = 9669;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER = 9670;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9671;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9672;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9673;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    9674;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    9675;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 9676;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9677;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 9678;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS = 9679;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 9680;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 9681;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 9682;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 9683;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9684;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    9685;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9686;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE = 9687;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE = 9688;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 9689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 9690;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME = 9691;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9692;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9693;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9694;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9695;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    9696;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    9697;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 9698;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    9699;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9700;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9701;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9702;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9703;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9704;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9705;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9706;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9707;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9708;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    9709;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE = 9731;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    9732;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    9733;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9734;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED = 9735;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 9736;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE = 9737;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE =
    9738;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_ID =
    9739;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME =
    9740;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9741;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9742;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION =
    9743;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_ID =
    9744;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9745;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9746;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9747;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 9760;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 9761;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 9762;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 9763;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE = 9764;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 9765;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 9766;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 9767;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 9768;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_TIME = 9769;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 9770;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 9771;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 9772;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 9773;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 9774;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 9775;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 9776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 9777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 9778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 9779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 9780;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9782;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9783;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE = 9784;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE = 9785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 9786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP = 9787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 9788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 9790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP = 9791;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 9792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 9793;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 9794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 9795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 9797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9798;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 9799;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 9800;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 9801;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 9802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9804;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 9806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 9807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 9808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 9809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 9810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 9811;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9813;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 9817;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    9818;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 9819;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS = 9820;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 9821;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 9822;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 9823;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 9824;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9825;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    9826;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9827;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 9828;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE = 9829;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 9830;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 9831;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 9832;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9833;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9834;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9835;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9836;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9837;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    9838;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 9839;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    9840;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9841;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9842;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9843;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9844;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9845;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9846;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9847;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9848;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9849;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    9850;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE = 9872;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    9873;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 9874;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    9875;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 9876;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 9877;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE = 9878;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE = 9879;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_ID =
    9880;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NAME =
    9881;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_NUMBER =
    9882;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9883;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION = 9884;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_ID =
    9885;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NAME =
    9886;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_NUMBER =
    9887;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_TRANSITIONTIME =
    9888;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 9901;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 9902;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 9903;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 9904;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 9905;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE = 9906;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTID = 9907;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_EVENTTYPE = 9908;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENODE = 9909;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SOURCENAME = 9910;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_TIME = 9911;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RECEIVETIME = 9912;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOCALTIME = 9913;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MESSAGE = 9914;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SEVERITY = 9915;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONNAME = 9916;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BRANCHID = 9917;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RETAIN = 9918;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE = 9919;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_ID = 9920;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NAME = 9921;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_NUMBER = 9922;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    9923;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    9924;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    9925;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_TRUESTATE = 9926;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLEDSTATE_FALSESTATE = 9927;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY = 9928;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_QUALITY_SOURCETIMESTAMP = 9929;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY = 9930;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    9931;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT = 9932;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_COMMENT_SOURCETIMESTAMP = 9933;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CLIENTUSERID = 9934;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ENABLE = 9935;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_DISABLE = 9936;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT = 9937;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 9938;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH = 9939;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    9940;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE = 9941;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_ID = 9942;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NAME = 9943;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_NUMBER = 9944;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    9945;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 9946;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    9947;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_TRUESTATE = 9948;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKEDSTATE_FALSESTATE = 9949;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE = 9950;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_ID = 9951;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NAME = 9952;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_NUMBER = 9953;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    9954;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    9955;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    9956;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 9957;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 9958;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE = 9959;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 9960;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM = 9961;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONFIRM_INPUTARGUMENTS = 9962;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE = 9963;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_ID = 9964;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NAME = 9965;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_NUMBER = 9966;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    9967;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 9968;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    9969;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_TRUESTATE = 9970;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ACTIVESTATE_FALSESTATE = 9971;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE = 9972;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_ID = 9973;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NAME = 9974;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_NUMBER = 9975;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    9976;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    9977;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    9978;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 9979;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 9980;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE = 9981;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 9982;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    9983;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    9984;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    9985;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    9986;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    9987;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    9988;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    9989;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    9990;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    9991;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 9992;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_UNSHELVE = 10014;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10015;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10016;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10017;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESSEDORSHELVED = 10018;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_MAXTIMESHELVED = 10019;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE = 10020;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_ID = 10021;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NAME = 10022;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_NUMBER = 10023;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10024;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10025;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10026;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10027;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10028;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE = 10029;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_ID = 10030;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NAME = 10031;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_NUMBER = 10032;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10033;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10034;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10035;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_TRUESTATE = 10036;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHSTATE_FALSESTATE = 10037;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE = 10038;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_ID = 10039;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NAME = 10040;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_NUMBER = 10041;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10042;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRANSITIONTIME = 10043;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10044;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_TRUESTATE = 10045;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWSTATE_FALSESTATE = 10046;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE = 10047;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_ID = 10048;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NAME = 10049;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_NUMBER = 10050;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10051;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10052;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10053;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_TRUESTATE = 10054;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWSTATE_FALSESTATE = 10055;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHHIGHLIMIT = 10056;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_HIGHLIMIT = 10057;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLIMIT = 10058;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LOWLOWLIMIT = 10059;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE = 10060;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTID = 10061;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_EVENTTYPE = 10062;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENODE = 10063;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SOURCENAME = 10064;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_TIME = 10065;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RECEIVETIME = 10066;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOCALTIME = 10067;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MESSAGE = 10068;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SEVERITY = 10069;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONNAME = 10070;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BRANCHID = 10071;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RETAIN = 10072;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE = 10073;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_ID = 10074;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NAME = 10075;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_NUMBER = 10076;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10077;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10078;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10079;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_TRUESTATE = 10080;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLEDSTATE_FALSESTATE = 10081;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY = 10082;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_QUALITY_SOURCETIMESTAMP = 10083;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY = 10084;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10085;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT = 10086;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_COMMENT_SOURCETIMESTAMP = 10087;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CLIENTUSERID = 10088;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ENABLE = 10089;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_DISABLE = 10090;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT = 10091;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10092;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH = 10093;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10094;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE = 10095;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_ID = 10096;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NAME = 10097;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_NUMBER = 10098;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10099;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10100;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10101;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_TRUESTATE = 10102;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKEDSTATE_FALSESTATE = 10103;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE = 10104;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_ID = 10105;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NAME = 10106;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_NUMBER = 10107;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10108;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10109;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10110;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10111;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10112;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE = 10113;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10114;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM = 10115;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONFIRM_INPUTARGUMENTS = 10116;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE = 10117;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_ID = 10118;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NAME = 10119;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_NUMBER = 10120;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10121;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10122;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10123;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_TRUESTATE = 10124;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ACTIVESTATE_FALSESTATE = 10125;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE = 10126;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_ID = 10127;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NAME = 10128;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10129;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10130;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10131;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10132;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10133;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10134;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE = 10135;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10136;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10137;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10138;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10139;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10140;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10141;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10142;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10143;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10144;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10145;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10146;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_UNSHELVE = 10168;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10169;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10170;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10171;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESSEDORSHELVED = 10172;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_MAXTIMESHELVED = 10173;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE = 10174;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_ID = 10175;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NAME = 10176;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_NUMBER = 10177;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10178;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10179;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10180;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_TRUESTATE = 10181;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHSTATE_FALSESTATE = 10182;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE = 10183;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_ID = 10184;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NAME = 10185;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_NUMBER = 10186;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10187;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRANSITIONTIME = 10188;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10189;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_TRUESTATE = 10190;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHSTATE_FALSESTATE = 10191;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE = 10192;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_ID = 10193;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NAME = 10194;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_NUMBER = 10195;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10196;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRANSITIONTIME = 10197;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10198;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_TRUESTATE = 10199;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWSTATE_FALSESTATE = 10200;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE = 10201;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_ID = 10202;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NAME = 10203;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_NUMBER = 10204;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10205;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10206;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10207;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_TRUESTATE = 10208;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWSTATE_FALSESTATE = 10209;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHHIGHLIMIT = 10210;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_HIGHLIMIT = 10211;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLIMIT = 10212;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LOWLOWLIMIT = 10213;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE = 10214;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTID = 10215;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_EVENTTYPE = 10216;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENODE = 10217;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SOURCENAME = 10218;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_TIME = 10219;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RECEIVETIME = 10220;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOCALTIME = 10221;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MESSAGE = 10222;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SEVERITY = 10223;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONNAME = 10224;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BRANCHID = 10225;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RETAIN = 10226;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE = 10227;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_ID = 10228;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NAME = 10229;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_NUMBER =
    10230;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10231;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10232;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10233;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_TRUESTATE =
    10234;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLEDSTATE_FALSESTATE =
    10235;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY = 10236;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_QUALITY_SOURCETIMESTAMP =
    10237;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY = 10238;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10239;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT = 10240;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_COMMENT_SOURCETIMESTAMP =
    10241;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CLIENTUSERID = 10242;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENABLE = 10243;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_DISABLE = 10244;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT = 10245;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    10246;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH = 10247;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10248;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE = 10249;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_ID = 10250;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NAME = 10251;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_NUMBER = 10252;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10253;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    10254;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10255;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_TRUESTATE =
    10256;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKEDSTATE_FALSESTATE =
    10257;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE = 10258;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_ID = 10259;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NAME =
    10260;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_NUMBER =
    10261;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10262;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10263;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10264;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    10265;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    10266;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE = 10267;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10268;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM = 10269;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONFIRM_INPUTARGUMENTS =
    10270;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE = 10271;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_ID = 10272;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NAME = 10273;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_NUMBER = 10274;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10275;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10276;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_TRUESTATE =
    10278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ACTIVESTATE_FALSESTATE =
    10279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE = 10280;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_ID = 10281;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NAME =
    10282;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    10283;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10284;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10285;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10286;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    10287;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10288;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE = 10289;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10290;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10291;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10292;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10293;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10294;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10295;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10296;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10297;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10298;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10299;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10300;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_UNSHELVE =
    10322;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10323;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    10324;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10325;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESSEDORSHELVED =
    10326;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_MAXTIMESHELVED = 10327;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE = 10328;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_ID = 10329;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NAME = 10330;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_NUMBER =
    10331;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10332;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10333;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10334;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_TRUESTATE =
    10335;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHSTATE_FALSESTATE =
    10336;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE = 10337;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_ID = 10338;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NAME = 10339;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_NUMBER = 10340;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10341;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRANSITIONTIME =
    10342;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10343;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_TRUESTATE =
    10344;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHSTATE_FALSESTATE =
    10345;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE = 10346;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_ID = 10347;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NAME = 10348;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_NUMBER = 10349;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10350;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRANSITIONTIME =
    10351;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10352;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_TRUESTATE = 10353;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWSTATE_FALSESTATE =
    10354;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE = 10355;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_ID = 10356;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NAME = 10357;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_NUMBER = 10358;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10359;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10360;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10361;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_TRUESTATE =
    10362;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWSTATE_FALSESTATE =
    10363;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHHIGHLIMIT = 10364;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_HIGHLIMIT = 10365;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLIMIT = 10366;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LOWLOWLIMIT = 10367;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE = 10368;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTID = 10369;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_EVENTTYPE = 10370;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENODE = 10371;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SOURCENAME = 10372;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_TIME = 10373;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RECEIVETIME = 10374;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOCALTIME = 10375;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MESSAGE = 10376;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SEVERITY = 10377;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONNAME = 10378;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BRANCHID = 10379;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RETAIN = 10380;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE = 10381;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_ID = 10382;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NAME = 10383;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_NUMBER = 10384;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    10385;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    10386;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10387;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_TRUESTATE =
    10388;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLEDSTATE_FALSESTATE =
    10389;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY = 10390;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_QUALITY_SOURCETIMESTAMP =
    10391;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY = 10392;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    10393;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT = 10394;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_COMMENT_SOURCETIMESTAMP =
    10395;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CLIENTUSERID = 10396;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ENABLE = 10397;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_DISABLE = 10398;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT = 10399;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    10400;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH = 10401;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    10402;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE = 10403;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_ID = 10404;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NAME = 10405;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_NUMBER = 10406;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    10407;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    10408;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10409;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 10410;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 10411;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE = 10412;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_ID = 10413;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NAME = 10414;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 10415;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10416;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    10417;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10418;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    10419;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    10420;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE = 10421;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    10422;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM = 10423;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONFIRM_INPUTARGUMENTS =
    10424;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE = 10425;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_ID = 10426;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NAME = 10427;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_NUMBER = 10428;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    10429;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    10430;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10431;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 10432;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ACTIVESTATE_FALSESTATE =
    10433;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE = 10434;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_ID = 10435;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 10436;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    10437;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10438;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    10439;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10440;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    10441;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    10442;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE = 10443;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    10444;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    10445;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    10446;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    10447;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10448;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    10449;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    10450;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    10451;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10452;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10453;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    10454;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_UNSHELVE =
    10476;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    10477;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    10478;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10479;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESSEDORSHELVED = 10480;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_MAXTIMESHELVED = 10481;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE = 10482;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_ID = 10483;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NAME = 10484;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_NUMBER = 10485;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVEDISPLAYNAME =
    10486;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRANSITIONTIME =
    10487;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_EFFECTIVETRANSITIONTIME =
    10488;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_TRUESTATE =
    10489;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHSTATE_FALSESTATE =
    10490;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE = 10491;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_ID = 10492;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NAME = 10493;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_NUMBER = 10494;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVEDISPLAYNAME =
    10495;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRANSITIONTIME =
    10496;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_EFFECTIVETRANSITIONTIME =
    10497;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_TRUESTATE = 10498;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHSTATE_FALSESTATE = 10499;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE = 10500;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_ID = 10501;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NAME = 10502;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_NUMBER = 10503;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVEDISPLAYNAME =
    10504;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRANSITIONTIME =
    10505;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_EFFECTIVETRANSITIONTIME =
    10506;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_TRUESTATE = 10507;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWSTATE_FALSESTATE = 10508;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE = 10509;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_ID = 10510;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NAME = 10511;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_NUMBER = 10512;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVEDISPLAYNAME =
    10513;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRANSITIONTIME =
    10514;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_EFFECTIVETRANSITIONTIME =
    10515;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_TRUESTATE = 10516;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWSTATE_FALSESTATE =
    10517;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHHIGHLIMIT = 10518;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_HIGHLIMIT = 10519;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLIMIT = 10520;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LOWLOWLIMIT = 10521;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SETPOINTNODE = 10522;

const int UA_NS0ID_DISCRETEALARMTYPE = 10523;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTID = 10524;

const int UA_NS0ID_DISCRETEALARMTYPE_EVENTTYPE = 10525;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENODE = 10526;

const int UA_NS0ID_DISCRETEALARMTYPE_SOURCENAME = 10527;

const int UA_NS0ID_DISCRETEALARMTYPE_TIME = 10528;

const int UA_NS0ID_DISCRETEALARMTYPE_RECEIVETIME = 10529;

const int UA_NS0ID_DISCRETEALARMTYPE_LOCALTIME = 10530;

const int UA_NS0ID_DISCRETEALARMTYPE_MESSAGE = 10531;

const int UA_NS0ID_DISCRETEALARMTYPE_SEVERITY = 10532;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONNAME = 10533;

const int UA_NS0ID_DISCRETEALARMTYPE_BRANCHID = 10534;

const int UA_NS0ID_DISCRETEALARMTYPE_RETAIN = 10535;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE = 10536;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_ID = 10537;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NAME = 10538;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_NUMBER = 10539;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10540;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10541;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10542;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_TRUESTATE = 10543;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLEDSTATE_FALSESTATE = 10544;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY = 10545;

const int UA_NS0ID_DISCRETEALARMTYPE_QUALITY_SOURCETIMESTAMP = 10546;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY = 10547;

const int UA_NS0ID_DISCRETEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10548;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT = 10549;

const int UA_NS0ID_DISCRETEALARMTYPE_COMMENT_SOURCETIMESTAMP = 10550;

const int UA_NS0ID_DISCRETEALARMTYPE_CLIENTUSERID = 10551;

const int UA_NS0ID_DISCRETEALARMTYPE_ENABLE = 10552;

const int UA_NS0ID_DISCRETEALARMTYPE_DISABLE = 10553;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT = 10554;

const int UA_NS0ID_DISCRETEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10555;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH = 10556;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10557;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE = 10558;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_ID = 10559;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NAME = 10560;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_NUMBER = 10561;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10562;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10563;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10564;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_TRUESTATE = 10565;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKEDSTATE_FALSESTATE = 10566;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE = 10567;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_ID = 10568;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NAME = 10569;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_NUMBER = 10570;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10571;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10572;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10573;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10574;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10575;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE = 10576;

const int UA_NS0ID_DISCRETEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10577;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM = 10578;

const int UA_NS0ID_DISCRETEALARMTYPE_CONFIRM_INPUTARGUMENTS = 10579;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE = 10580;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_ID = 10581;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NAME = 10582;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_NUMBER = 10583;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10584;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10585;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10586;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_TRUESTATE = 10587;

const int UA_NS0ID_DISCRETEALARMTYPE_ACTIVESTATE_FALSESTATE = 10588;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE = 10589;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_ID = 10590;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NAME = 10591;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10592;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10593;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10594;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10595;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10596;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10597;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE = 10598;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10599;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10600;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10601;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10602;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10603;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10604;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10605;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10606;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10607;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10608;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10609;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_UNSHELVE = 10631;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10632;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10633;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10634;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESSEDORSHELVED = 10635;

const int UA_NS0ID_DISCRETEALARMTYPE_MAXTIMESHELVED = 10636;

const int UA_NS0ID_OFFNORMALALARMTYPE = 10637;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTID = 10638;

const int UA_NS0ID_OFFNORMALALARMTYPE_EVENTTYPE = 10639;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENODE = 10640;

const int UA_NS0ID_OFFNORMALALARMTYPE_SOURCENAME = 10641;

const int UA_NS0ID_OFFNORMALALARMTYPE_TIME = 10642;

const int UA_NS0ID_OFFNORMALALARMTYPE_RECEIVETIME = 10643;

const int UA_NS0ID_OFFNORMALALARMTYPE_LOCALTIME = 10644;

const int UA_NS0ID_OFFNORMALALARMTYPE_MESSAGE = 10645;

const int UA_NS0ID_OFFNORMALALARMTYPE_SEVERITY = 10646;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONNAME = 10647;

const int UA_NS0ID_OFFNORMALALARMTYPE_BRANCHID = 10648;

const int UA_NS0ID_OFFNORMALALARMTYPE_RETAIN = 10649;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE = 10650;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_ID = 10651;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 10652;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 10653;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10654;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10655;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    10656;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 10657;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 10658;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY = 10659;

const int UA_NS0ID_OFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 10660;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY = 10661;

const int UA_NS0ID_OFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10662;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT = 10663;

const int UA_NS0ID_OFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 10664;

const int UA_NS0ID_OFFNORMALALARMTYPE_CLIENTUSERID = 10665;

const int UA_NS0ID_OFFNORMALALARMTYPE_ENABLE = 10666;

const int UA_NS0ID_OFFNORMALALARMTYPE_DISABLE = 10667;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT = 10668;

const int UA_NS0ID_OFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10669;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH = 10670;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10671;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE = 10672;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_ID = 10673;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NAME = 10674;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 10675;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10676;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10677;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    10678;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 10679;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 10680;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE = 10681;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 10682;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 10683;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 10684;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    10685;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10686;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    10687;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10688;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10689;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE = 10690;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10691;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM = 10692;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 10693;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE = 10694;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_ID = 10695;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NAME = 10696;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 10697;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10698;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10699;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    10700;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 10701;

const int UA_NS0ID_OFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 10702;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE = 10703;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 10704;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 10705;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10706;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    10707;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10708;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10709;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10710;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10711;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE = 10712;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10713;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10714;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10715;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10716;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10717;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10718;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10719;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10720;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    10721;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10722;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10723;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 10745;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10746;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10747;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10748;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 10749;

const int UA_NS0ID_OFFNORMALALARMTYPE_MAXTIMESHELVED = 10750;

const int UA_NS0ID_TRIPALARMTYPE = 10751;

const int UA_NS0ID_TRIPALARMTYPE_EVENTID = 10752;

const int UA_NS0ID_TRIPALARMTYPE_EVENTTYPE = 10753;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENODE = 10754;

const int UA_NS0ID_TRIPALARMTYPE_SOURCENAME = 10755;

const int UA_NS0ID_TRIPALARMTYPE_TIME = 10756;

const int UA_NS0ID_TRIPALARMTYPE_RECEIVETIME = 10757;

const int UA_NS0ID_TRIPALARMTYPE_LOCALTIME = 10758;

const int UA_NS0ID_TRIPALARMTYPE_MESSAGE = 10759;

const int UA_NS0ID_TRIPALARMTYPE_SEVERITY = 10760;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONNAME = 10761;

const int UA_NS0ID_TRIPALARMTYPE_BRANCHID = 10762;

const int UA_NS0ID_TRIPALARMTYPE_RETAIN = 10763;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE = 10764;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_ID = 10765;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NAME = 10766;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_NUMBER = 10767;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME = 10768;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 10769;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME = 10770;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_TRUESTATE = 10771;

const int UA_NS0ID_TRIPALARMTYPE_ENABLEDSTATE_FALSESTATE = 10772;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY = 10773;

const int UA_NS0ID_TRIPALARMTYPE_QUALITY_SOURCETIMESTAMP = 10774;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY = 10775;

const int UA_NS0ID_TRIPALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 10776;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT = 10777;

const int UA_NS0ID_TRIPALARMTYPE_COMMENT_SOURCETIMESTAMP = 10778;

const int UA_NS0ID_TRIPALARMTYPE_CLIENTUSERID = 10779;

const int UA_NS0ID_TRIPALARMTYPE_ENABLE = 10780;

const int UA_NS0ID_TRIPALARMTYPE_DISABLE = 10781;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT = 10782;

const int UA_NS0ID_TRIPALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 10783;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH = 10784;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 10785;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE = 10786;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_ID = 10787;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NAME = 10788;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_NUMBER = 10789;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 10790;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 10791;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME = 10792;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_TRUESTATE = 10793;

const int UA_NS0ID_TRIPALARMTYPE_ACKEDSTATE_FALSESTATE = 10794;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE = 10795;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_ID = 10796;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NAME = 10797;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_NUMBER = 10798;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME = 10799;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 10800;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME = 10801;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 10802;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 10803;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE = 10804;

const int UA_NS0ID_TRIPALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 10805;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM = 10806;

const int UA_NS0ID_TRIPALARMTYPE_CONFIRM_INPUTARGUMENTS = 10807;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE = 10808;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_ID = 10809;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NAME = 10810;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_NUMBER = 10811;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME = 10812;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 10813;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME = 10814;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_TRUESTATE = 10815;

const int UA_NS0ID_TRIPALARMTYPE_ACTIVESTATE_FALSESTATE = 10816;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE = 10817;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_ID = 10818;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NAME = 10819;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_NUMBER = 10820;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME = 10821;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 10822;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    10823;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 10824;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 10825;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE = 10826;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 10827;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 10828;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 10829;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER = 10830;

const int
    UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    10831;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 10832;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 10833;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME = 10834;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER = 10835;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    10836;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 10837;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_UNSHELVE = 10859;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 10860;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 10861;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    10862;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESSEDORSHELVED = 10863;

const int UA_NS0ID_TRIPALARMTYPE_MAXTIMESHELVED = 10864;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE = 11093;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTID = 11094;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_EVENTTYPE = 11095;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENODE = 11096;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SOURCENAME = 11097;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_TIME = 11098;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_RECEIVETIME = 11099;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_LOCALTIME = 11100;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_MESSAGE = 11101;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SEVERITY = 11102;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_ACTIONTIMESTAMP = 11103;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_STATUS = 11104;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SERVERID = 11105;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTAUDITENTRYID = 11106;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_CLIENTUSERID = 11107;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_METHODID = 11108;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_INPUTARGUMENTS = 11109;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_TRUESTATE = 11110;

const int UA_NS0ID_TWOSTATEVARIABLETYPE_FALSESTATE = 11111;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSID = 11112;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONCLASSNAME = 11113;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSID = 11114;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONCLASSNAME = 11115;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSID = 11116;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONCLASSNAME = 11117;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSID = 11118;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONCLASSNAME = 11119;

const int UA_NS0ID_ALARMCONDITIONTYPE_INPUTNODE = 11120;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSID = 11121;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONCLASSNAME = 11122;

const int UA_NS0ID_LIMITALARMTYPE_INPUTNODE = 11123;

const int UA_NS0ID_LIMITALARMTYPE_HIGHHIGHLIMIT = 11124;

const int UA_NS0ID_LIMITALARMTYPE_HIGHLIMIT = 11125;

const int UA_NS0ID_LIMITALARMTYPE_LOWLIMIT = 11126;

const int UA_NS0ID_LIMITALARMTYPE_LOWLOWLIMIT = 11127;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11128;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11129;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_INPUTNODE = 11130;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11131;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11132;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_INPUTNODE = 11133;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11134;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11135;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11136;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11137;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11138;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11139;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSID = 11140;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONCLASSNAME = 11141;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_INPUTNODE = 11142;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSID = 11143;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONCLASSNAME = 11144;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_INPUTNODE = 11145;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSID = 11146;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONCLASSNAME = 11147;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_INPUTNODE = 11148;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSID = 11149;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONCLASSNAME = 11150;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_INPUTNODE = 11151;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSID = 11152;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONCLASSNAME = 11153;

const int UA_NS0ID_DISCRETEALARMTYPE_INPUTNODE = 11154;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSID = 11155;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11156;

const int UA_NS0ID_OFFNORMALALARMTYPE_INPUTNODE = 11157;

const int UA_NS0ID_OFFNORMALALARMTYPE_NORMALSTATE = 11158;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSID = 11159;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONCLASSNAME = 11160;

const int UA_NS0ID_TRIPALARMTYPE_INPUTNODE = 11161;

const int UA_NS0ID_TRIPALARMTYPE_NORMALSTATE = 11162;

const int UA_NS0ID_BASECONDITIONCLASSTYPE = 11163;

const int UA_NS0ID_PROCESSCONDITIONCLASSTYPE = 11164;

const int UA_NS0ID_MAINTENANCECONDITIONCLASSTYPE = 11165;

const int UA_NS0ID_SYSTEMCONDITIONCLASSTYPE = 11166;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD =
    11168;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATABAD =
    11169;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_PERCENTDATAGOOD =
    11170;

const int
    UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION =
    11171;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_AGGREGATEFUNCTIONS = 11172;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE = 11187;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_TREATUNCERTAINASBAD = 11188;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATABAD = 11189;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_PERCENTDATAGOOD = 11190;

const int UA_NS0ID_AGGREGATECONFIGURATIONTYPE_USESLOPEDEXTRAPOLATION = 11191;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES = 11192;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYDATACAPABILITY =
    11193;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTDATACAPABILITY = 11196;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEDATACAPABILITY = 11197;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEDATACAPABILITY = 11198;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETERAWCAPABILITY = 11199;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEATTIMECAPABILITY = 11200;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_AGGREGATEFUNCTIONS = 11201;

const int UA_NS0ID_HACONFIGURATION = 11202;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION = 11203;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_TREATUNCERTAINASBAD =
    11204;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATABAD =
    11205;

const int UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_PERCENTDATAGOOD =
    11206;

const int
    UA_NS0ID_HACONFIGURATION_AGGREGATECONFIGURATION_USESLOPEDEXTRAPOLATION =
    11207;

const int UA_NS0ID_HACONFIGURATION_STEPPED = 11208;

const int UA_NS0ID_HACONFIGURATION_DEFINITION = 11209;

const int UA_NS0ID_HACONFIGURATION_MAXTIMEINTERVAL = 11210;

const int UA_NS0ID_HACONFIGURATION_MINTIMEINTERVAL = 11211;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATION = 11212;

const int UA_NS0ID_HACONFIGURATION_EXCEPTIONDEVIATIONFORMAT = 11213;

const int UA_NS0ID_ANNOTATIONS = 11214;

const int UA_NS0ID_HISTORICALEVENTFILTER = 11215;

const int UA_NS0ID_MODIFICATIONINFO = 11216;

const int UA_NS0ID_HISTORYMODIFIEDDATA = 11217;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTXML = 11218;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTXML = 11219;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTBINARY = 11226;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTBINARY = 11227;

const int UA_NS0ID_HISTORYUPDATETYPE = 11234;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE = 11238;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_DEFINITION = 11239;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEPRECISION = 11240;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_ENUMVALUES = 11241;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_ACCESSHISTORYEVENTSCAPABILITY =
    11242;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNDATAVALUES = 11268;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_MAXRETURNEVENTVALUES = 11269;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTANNOTATIONCAPABILITY =
    11270;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNDATAVALUES = 11273;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_MAXRETURNEVENTVALUES = 11274;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTANNOTATIONCAPABILITY = 11275;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_INSERTEVENTCAPABILITY = 11278;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_REPLACEEVENTCAPABILITY = 11279;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_UPDATEEVENTCAPABILITY = 11280;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_INSERTEVENTCAPABILITY = 11281;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_REPLACEEVENTCAPABILITY = 11282;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_UPDATEEVENTCAPABILITY = 11283;

const int UA_NS0ID_AGGREGATEFUNCTION_TIMEAVERAGE2 = 11285;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUM2 = 11286;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUM2 = 11287;

const int UA_NS0ID_AGGREGATEFUNCTION_RANGE2 = 11288;

const int UA_NS0ID_AGGREGATEFUNCTION_WORSTQUALITY2 = 11292;

const int UA_NS0ID_PERFORMUPDATETYPE = 11293;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS = 11295;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTXML = 11296;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTBINARY = 11300;

const int UA_NS0ID_AGGREGATEFUNCTION_TOTAL2 = 11304;

const int UA_NS0ID_AGGREGATEFUNCTION_MINIMUMACTUALTIME2 = 11305;

const int UA_NS0ID_AGGREGATEFUNCTION_MAXIMUMACTUALTIME2 = 11306;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATEZERO = 11307;

const int UA_NS0ID_AGGREGATEFUNCTION_DURATIONINSTATENONZERO = 11308;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_CURRENTSERVERID = 11312;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_REDUNDANTSERVERARRAY = 11313;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERURIARRAY = 11314;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER =
    11322;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_UNSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER =
    11323;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOUNSHELVED_TRANSITIONNUMBER =
    11324;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_TIMEDSHELVEDTOONESHOTSHELVED_TRANSITIONNUMBER =
    11325;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOUNSHELVED_TRANSITIONNUMBER =
    11326;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_ONESHOTSHELVEDTOTIMEDSHELVED_TRANSITIONNUMBER =
    11327;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWLOWTOLOW_TRANSITIONNUMBER =
    11340;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LOWTOLOWLOW_TRANSITIONNUMBER =
    11341;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHHIGHTOHIGH_TRANSITIONNUMBER =
    11342;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_HIGHTOHIGHHIGH_TRANSITIONNUMBER =
    11343;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONSAMPLE = 11426;

const int UA_NS0ID_AGGREGATEFUNCTION_STANDARDDEVIATIONPOPULATION = 11427;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCESAMPLE = 11428;

const int UA_NS0ID_AGGREGATEFUNCTION_VARIANCEPOPULATION = 11429;

const int UA_NS0ID_ENUMSTRINGS = 11432;

const int UA_NS0ID_VALUEASTEXT = 11433;

const int UA_NS0ID_PROGRESSEVENTTYPE = 11436;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTID = 11437;

const int UA_NS0ID_PROGRESSEVENTTYPE_EVENTTYPE = 11438;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENODE = 11439;

const int UA_NS0ID_PROGRESSEVENTTYPE_SOURCENAME = 11440;

const int UA_NS0ID_PROGRESSEVENTTYPE_TIME = 11441;

const int UA_NS0ID_PROGRESSEVENTTYPE_RECEIVETIME = 11442;

const int UA_NS0ID_PROGRESSEVENTTYPE_LOCALTIME = 11443;

const int UA_NS0ID_PROGRESSEVENTTYPE_MESSAGE = 11444;

const int UA_NS0ID_PROGRESSEVENTTYPE_SEVERITY = 11445;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE = 11446;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTID = 11447;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_EVENTTYPE = 11448;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENODE = 11449;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SOURCENAME = 11450;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_TIME = 11451;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_RECEIVETIME = 11452;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_LOCALTIME = 11453;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_MESSAGE = 11454;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SEVERITY = 11455;

const int UA_NS0ID_TRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11456;

const int UA_NS0ID_FINITETRANSITIONVARIABLETYPE_EFFECTIVETRANSITIONTIME = 11457;

const int UA_NS0ID_STATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11458;

const int
    UA_NS0ID_FINITESTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11459;

const int UA_NS0ID_TRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11460;

const int UA_NS0ID_MULTISTATEVALUEDISCRETETYPE_VALUEASTEXT = 11461;

const int
    UA_NS0ID_PROGRAMTRANSITIONEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11462;

const int
    UA_NS0ID_PROGRAMTRANSITIONAUDITEVENTTYPE_TRANSITION_EFFECTIVETRANSITIONTIME =
    11463;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11464;

const int
    UA_NS0ID_SHELVEDSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11465;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11466;

const int
    UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11467;

const int
    UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11468;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11469;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11470;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11471;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11472;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11473;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11474;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11475;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11476;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11477;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11478;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11479;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11480;

const int
    UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11481;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11482;

const int
    UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11483;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_SECURECHANNELID = 11485;

const int UA_NS0ID_OPTIONSETTYPE = 11487;

const int UA_NS0ID_OPTIONSETTYPE_OPTIONSETVALUES = 11488;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS = 11489;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_INPUTARGUMENTS = 11490;

const int UA_NS0ID_SERVERTYPE_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11491;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS = 11492;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_INPUTARGUMENTS = 11493;

const int UA_NS0ID_SERVER_GETMONITOREDITEMS_OUTPUTARGUMENTS = 11494;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE = 11495;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_INPUTARGUMENTS = 11496;

const int UA_NS0ID_GETMONITOREDITEMSMETHODTYPE_OUTPUTARGUMENTS = 11497;

const int UA_NS0ID_MAXSTRINGLENGTH = 11498;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFARCHIVE = 11499;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_STARTOFONLINEARCHIVE = 11500;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_DELETEEVENTCAPABILITY = 11501;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_DELETEEVENTCAPABILITY = 11502;

const int UA_NS0ID_HACONFIGURATION_STARTOFARCHIVE = 11503;

const int UA_NS0ID_HACONFIGURATION_STARTOFONLINEARCHIVE = 11504;

const int UA_NS0ID_AGGREGATEFUNCTION_STARTBOUND = 11505;

const int UA_NS0ID_AGGREGATEFUNCTION_ENDBOUND = 11506;

const int UA_NS0ID_AGGREGATEFUNCTION_DELTABOUNDS = 11507;

const int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER = 11508;

const int UA_NS0ID_MODELLINGRULE_OPTIONALPLACEHOLDER_NAMINGRULE = 11509;

const int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER = 11510;

const int UA_NS0ID_MODELLINGRULE_MANDATORYPLACEHOLDER_NAMINGRULE = 11511;

const int UA_NS0ID_MAXARRAYLENGTH = 11512;

const int UA_NS0ID_ENGINEERINGUNITS = 11513;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXARRAYLENGTH = 11514;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11515;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS = 11516;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD =
    11517;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE =
    11519;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11521;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11522;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11523;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11524;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11525;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11526;

const int UA_NS0ID_SERVERTYPE_NAMESPACES = 11527;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXARRAYLENGTH = 11549;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXSTRINGLENGTH = 11550;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS = 11551;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREAD =
    11552;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERWRITE =
    11554;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11556;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11557;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11558;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11559;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11560;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11561;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_VENDORCAPABILITY_PLACEHOLDER = 11562;

const int UA_NS0ID_OPERATIONLIMITSTYPE = 11564;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREAD = 11565;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERWRITE = 11567;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERMETHODCALL = 11569;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERBROWSE = 11570;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERREGISTERNODES = 11571;

const int
    UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11572;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERNODEMANAGEMENT = 11573;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXMONITOREDITEMSPERCALL = 11574;

const int UA_NS0ID_FILETYPE = 11575;

const int UA_NS0ID_FILETYPE_SIZE = 11576;

const int UA_NS0ID_FILETYPE_OPENCOUNT = 11579;

const int UA_NS0ID_FILETYPE_OPEN = 11580;

const int UA_NS0ID_FILETYPE_OPEN_INPUTARGUMENTS = 11581;

const int UA_NS0ID_FILETYPE_OPEN_OUTPUTARGUMENTS = 11582;

const int UA_NS0ID_FILETYPE_CLOSE = 11583;

const int UA_NS0ID_FILETYPE_CLOSE_INPUTARGUMENTS = 11584;

const int UA_NS0ID_FILETYPE_READ = 11585;

const int UA_NS0ID_FILETYPE_READ_INPUTARGUMENTS = 11586;

const int UA_NS0ID_FILETYPE_READ_OUTPUTARGUMENTS = 11587;

const int UA_NS0ID_FILETYPE_WRITE = 11588;

const int UA_NS0ID_FILETYPE_WRITE_INPUTARGUMENTS = 11589;

const int UA_NS0ID_FILETYPE_GETPOSITION = 11590;

const int UA_NS0ID_FILETYPE_GETPOSITION_INPUTARGUMENTS = 11591;

const int UA_NS0ID_FILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11592;

const int UA_NS0ID_FILETYPE_SETPOSITION = 11593;

const int UA_NS0ID_FILETYPE_SETPOSITION_INPUTARGUMENTS = 11594;

const int UA_NS0ID_ADDRESSSPACEFILETYPE = 11595;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SIZE = 11596;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPENCOUNT = 11599;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN = 11600;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_INPUTARGUMENTS = 11601;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_OPEN_OUTPUTARGUMENTS = 11602;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE = 11603;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_CLOSE_INPUTARGUMENTS = 11604;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ = 11605;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_INPUTARGUMENTS = 11606;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_READ_OUTPUTARGUMENTS = 11607;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE = 11608;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITE_INPUTARGUMENTS = 11609;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION = 11610;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_INPUTARGUMENTS = 11611;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_GETPOSITION_OUTPUTARGUMENTS = 11612;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION = 11613;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_SETPOSITION_INPUTARGUMENTS = 11614;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_EXPORTNAMESPACE = 11615;

const int UA_NS0ID_NAMESPACEMETADATATYPE = 11616;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEURI = 11617;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEVERSION = 11618;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEPUBLICATIONDATE = 11619;

const int UA_NS0ID_NAMESPACEMETADATATYPE_ISNAMESPACESUBSET = 11620;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNODEIDTYPES = 11621;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICNUMERICNODEIDRANGE = 11622;

const int UA_NS0ID_NAMESPACEMETADATATYPE_STATICSTRINGNODEIDPATTERN = 11623;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE = 11624;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SIZE = 11625;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPENCOUNT = 11628;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN = 11629;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    11630;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    11631;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE = 11632;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    11633;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ = 11634;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_INPUTARGUMENTS =
    11635;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    11636;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE = 11637;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    11638;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION = 11639;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    11640;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    11641;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION = 11642;

const int
    UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    11643;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_EXPORTNAMESPACE = 11644;

const int UA_NS0ID_NAMESPACESTYPE = 11645;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER = 11646;

const int UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEURI =
    11647;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEVERSION =
    11648;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEPUBLICATIONDATE =
    11649;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_ISNAMESPACESUBSET =
    11650;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNODEIDTYPES =
    11651;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICNUMERICNODEIDRANGE =
    11652;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_STATICSTRINGNODEIDPATTERN =
    11653;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE =
    11654;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SIZE =
    11655;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPENCOUNT =
    11658;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN =
    11659;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    11660;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    11661;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE =
    11662;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    11663;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ =
    11664;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_INPUTARGUMENTS =
    11665;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    11666;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE =
    11667;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    11668;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION =
    11669;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    11670;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    11671;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION =
    11672;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    11673;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_EXPORTNAMESPACE =
    11674;

const int UA_NS0ID_SYSTEMSTATUSCHANGEEVENTTYPE_SYSTEMSTATE = 11696;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_SAMPLEDMONITOREDITEMSCOUNT =
    11697;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_MAXSAMPLEDMONITOREDITEMSCOUNT =
    11698;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSTYPE_DISABLEDMONITOREDITEMSSAMPLINGCOUNT =
    11699;

const int UA_NS0ID_OPTIONSETTYPE_BITMASK = 11701;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXARRAYLENGTH = 11702;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXSTRINGLENGTH = 11703;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS = 11704;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREAD =
    11705;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERWRITE =
    11707;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERMETHODCALL =
    11709;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERBROWSE =
    11710;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERREGISTERNODES =
    11711;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERTRANSLATEBROWSEPATHSTONODEIDS =
    11712;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERNODEMANAGEMENT =
    11713;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXMONITOREDITEMSPERCALL =
    11714;

const int UA_NS0ID_SERVER_NAMESPACES = 11715;

const int UA_NS0ID_BITFIELDMASKDATATYPE = 11737;

const int UA_NS0ID_OPENMETHODTYPE = 11738;

const int UA_NS0ID_OPENMETHODTYPE_INPUTARGUMENTS = 11739;

const int UA_NS0ID_OPENMETHODTYPE_OUTPUTARGUMENTS = 11740;

const int UA_NS0ID_CLOSEMETHODTYPE = 11741;

const int UA_NS0ID_CLOSEMETHODTYPE_INPUTARGUMENTS = 11742;

const int UA_NS0ID_READMETHODTYPE = 11743;

const int UA_NS0ID_READMETHODTYPE_INPUTARGUMENTS = 11744;

const int UA_NS0ID_READMETHODTYPE_OUTPUTARGUMENTS = 11745;

const int UA_NS0ID_WRITEMETHODTYPE = 11746;

const int UA_NS0ID_WRITEMETHODTYPE_INPUTARGUMENTS = 11747;

const int UA_NS0ID_GETPOSITIONMETHODTYPE = 11748;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11749;

const int UA_NS0ID_GETPOSITIONMETHODTYPE_OUTPUTARGUMENTS = 11750;

const int UA_NS0ID_SETPOSITIONMETHODTYPE = 11751;

const int UA_NS0ID_SETPOSITIONMETHODTYPE_INPUTARGUMENTS = 11752;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE = 11753;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTID = 11754;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_EVENTTYPE = 11755;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENODE = 11756;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SOURCENAME = 11757;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_TIME = 11758;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RECEIVETIME = 11759;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LOCALTIME = 11760;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MESSAGE = 11761;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SEVERITY = 11762;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSID = 11763;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONCLASSNAME = 11764;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONNAME = 11765;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_BRANCHID = 11766;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RETAIN = 11767;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE = 11768;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_ID = 11769;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NAME = 11770;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_NUMBER = 11771;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    11772;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 11773;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    11774;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_TRUESTATE = 11775;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLEDSTATE_FALSESTATE = 11776;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY = 11777;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_QUALITY_SOURCETIMESTAMP = 11778;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY = 11779;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    11780;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT = 11781;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_COMMENT_SOURCETIMESTAMP = 11782;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CLIENTUSERID = 11783;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_DISABLE = 11784;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ENABLE = 11785;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT = 11786;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 11787;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH = 11788;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    11789;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE = 11790;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_ID = 11791;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NAME = 11792;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_NUMBER = 11793;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    11794;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 11795;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    11796;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_TRUESTATE = 11797;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKEDSTATE_FALSESTATE = 11798;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE = 11799;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_ID = 11800;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NAME = 11801;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_NUMBER = 11802;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    11803;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    11804;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    11805;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 11806;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 11807;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE = 11808;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 11809;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM = 11810;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONFIRM_INPUTARGUMENTS = 11811;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE = 11812;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_ID = 11813;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NAME = 11814;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_NUMBER = 11815;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    11816;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 11817;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    11818;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_TRUESTATE = 11819;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ACTIVESTATE_FALSESTATE = 11820;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_INPUTNODE = 11821;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE = 11822;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_ID = 11823;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NAME = 11824;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_NUMBER = 11825;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    11826;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    11827;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    11828;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 11829;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 11830;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE = 11831;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 11832;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    11833;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    11834;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    11835;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    11836;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    11837;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    11838;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    11839;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    11840;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    11841;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    11842;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 11843;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_UNSHELVE = 11844;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 11845;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 11846;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    11847;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESSEDORSHELVED = 11848;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_MAXTIMESHELVED = 11849;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_NORMALSTATE = 11850;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_COMMENT = 11851;

const int UA_NS0ID_AUDITCONDITIONRESPONDEVENTTYPE_SELECTEDRESPONSE = 11852;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_COMMENT = 11853;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_COMMENT = 11854;

const int UA_NS0ID_AUDITCONDITIONSHELVINGEVENTTYPE_SHELVINGTIME = 11855;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE = 11856;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTID = 11857;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_EVENTTYPE = 11858;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENODE = 11859;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SOURCENAME = 11860;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TIME = 11861;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_RECEIVETIME = 11862;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_LOCALTIME = 11863;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_MESSAGE = 11864;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SEVERITY = 11865;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_ACTIONTIMESTAMP = 11866;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_STATUS = 11867;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_SERVERID = 11868;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTAUDITENTRYID = 11869;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_CLIENTUSERID = 11870;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_METHODID = 11871;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_INPUTARGUMENTS = 11872;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_OLDSTATEID = 11873;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_NEWSTATEID = 11874;

const int UA_NS0ID_AUDITPROGRAMTRANSITIONEVENTTYPE_TRANSITIONNUMBER = 11875;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_AGGREGATEFUNCTIONS = 11876;

const int UA_NS0ID_HACONFIGURATION_AGGREGATEFUNCTIONS = 11877;

const int UA_NS0ID_NODECLASS_ENUMVALUES = 11878;

const int UA_NS0ID_INSTANCENODE = 11879;

const int UA_NS0ID_TYPENODE = 11880;

const int UA_NS0ID_NODEATTRIBUTESMASK_ENUMVALUES = 11881;

const int UA_NS0ID_BROWSERESULTMASK_ENUMVALUES = 11883;

const int UA_NS0ID_HISTORYUPDATETYPE_ENUMVALUES = 11884;

const int UA_NS0ID_PERFORMUPDATETYPE_ENUMVALUES = 11885;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTXML = 11887;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTXML = 11888;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTBINARY = 11889;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTBINARY = 11890;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSOBJECTTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    11891;

const int UA_NS0ID_SESSIONDIAGNOSTICSVARIABLETYPE_UNAUTHORIZEDREQUESTCOUNT =
    11892;

const int UA_NS0ID_OPENFILEMODE = 11939;

const int UA_NS0ID_OPENFILEMODE_ENUMVALUES = 11940;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK = 11941;

const int UA_NS0ID_MODELCHANGESTRUCTUREVERBMASK_ENUMVALUES = 11942;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE = 11943;

const int UA_NS0ID_NETWORKGROUPDATATYPE = 11944;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE = 11945;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_REDUNDANCYSUPPORT =
    11946;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERURIARRAY = 11947;

const int UA_NS0ID_NONTRANSPARENTNETWORKREDUNDANCYTYPE_SERVERNETWORKGROUPS =
    11948;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTXML = 11949;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTXML = 11950;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE = 11951;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION =
    11952;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT =
    11953;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE = 11954;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION = 11955;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT =
    11956;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTBINARY = 11957;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTBINARY = 11958;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE = 11959;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DATATYPEVERSION =
    11960;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTURLLISTDATATYPE_DICTIONARYFRAGMENT =
    11961;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE = 11962;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DATATYPEVERSION =
    11963;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKGROUPDATATYPE_DICTIONARYFRAGMENT =
    11964;

const int UA_NS0ID_ARRAYITEMTYPE = 12021;

const int UA_NS0ID_ARRAYITEMTYPE_DEFINITION = 12022;

const int UA_NS0ID_ARRAYITEMTYPE_VALUEPRECISION = 12023;

const int UA_NS0ID_ARRAYITEMTYPE_INSTRUMENTRANGE = 12024;

const int UA_NS0ID_ARRAYITEMTYPE_EURANGE = 12025;

const int UA_NS0ID_ARRAYITEMTYPE_ENGINEERINGUNITS = 12026;

const int UA_NS0ID_ARRAYITEMTYPE_TITLE = 12027;

const int UA_NS0ID_ARRAYITEMTYPE_AXISSCALETYPE = 12028;

const int UA_NS0ID_YARRAYITEMTYPE = 12029;

const int UA_NS0ID_YARRAYITEMTYPE_DEFINITION = 12030;

const int UA_NS0ID_YARRAYITEMTYPE_VALUEPRECISION = 12031;

const int UA_NS0ID_YARRAYITEMTYPE_INSTRUMENTRANGE = 12032;

const int UA_NS0ID_YARRAYITEMTYPE_EURANGE = 12033;

const int UA_NS0ID_YARRAYITEMTYPE_ENGINEERINGUNITS = 12034;

const int UA_NS0ID_YARRAYITEMTYPE_TITLE = 12035;

const int UA_NS0ID_YARRAYITEMTYPE_AXISSCALETYPE = 12036;

const int UA_NS0ID_YARRAYITEMTYPE_XAXISDEFINITION = 12037;

const int UA_NS0ID_XYARRAYITEMTYPE = 12038;

const int UA_NS0ID_XYARRAYITEMTYPE_DEFINITION = 12039;

const int UA_NS0ID_XYARRAYITEMTYPE_VALUEPRECISION = 12040;

const int UA_NS0ID_XYARRAYITEMTYPE_INSTRUMENTRANGE = 12041;

const int UA_NS0ID_XYARRAYITEMTYPE_EURANGE = 12042;

const int UA_NS0ID_XYARRAYITEMTYPE_ENGINEERINGUNITS = 12043;

const int UA_NS0ID_XYARRAYITEMTYPE_TITLE = 12044;

const int UA_NS0ID_XYARRAYITEMTYPE_AXISSCALETYPE = 12045;

const int UA_NS0ID_XYARRAYITEMTYPE_XAXISDEFINITION = 12046;

const int UA_NS0ID_IMAGEITEMTYPE = 12047;

const int UA_NS0ID_IMAGEITEMTYPE_DEFINITION = 12048;

const int UA_NS0ID_IMAGEITEMTYPE_VALUEPRECISION = 12049;

const int UA_NS0ID_IMAGEITEMTYPE_INSTRUMENTRANGE = 12050;

const int UA_NS0ID_IMAGEITEMTYPE_EURANGE = 12051;

const int UA_NS0ID_IMAGEITEMTYPE_ENGINEERINGUNITS = 12052;

const int UA_NS0ID_IMAGEITEMTYPE_TITLE = 12053;

const int UA_NS0ID_IMAGEITEMTYPE_AXISSCALETYPE = 12054;

const int UA_NS0ID_IMAGEITEMTYPE_XAXISDEFINITION = 12055;

const int UA_NS0ID_IMAGEITEMTYPE_YAXISDEFINITION = 12056;

const int UA_NS0ID_CUBEITEMTYPE = 12057;

const int UA_NS0ID_CUBEITEMTYPE_DEFINITION = 12058;

const int UA_NS0ID_CUBEITEMTYPE_VALUEPRECISION = 12059;

const int UA_NS0ID_CUBEITEMTYPE_INSTRUMENTRANGE = 12060;

const int UA_NS0ID_CUBEITEMTYPE_EURANGE = 12061;

const int UA_NS0ID_CUBEITEMTYPE_ENGINEERINGUNITS = 12062;

const int UA_NS0ID_CUBEITEMTYPE_TITLE = 12063;

const int UA_NS0ID_CUBEITEMTYPE_AXISSCALETYPE = 12064;

const int UA_NS0ID_CUBEITEMTYPE_XAXISDEFINITION = 12065;

const int UA_NS0ID_CUBEITEMTYPE_YAXISDEFINITION = 12066;

const int UA_NS0ID_CUBEITEMTYPE_ZAXISDEFINITION = 12067;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE = 12068;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_DEFINITION = 12069;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_VALUEPRECISION = 12070;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_INSTRUMENTRANGE = 12071;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_EURANGE = 12072;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_ENGINEERINGUNITS = 12073;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_TITLE = 12074;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISSCALETYPE = 12075;

const int UA_NS0ID_NDIMENSIONARRAYITEMTYPE_AXISDEFINITION = 12076;

const int UA_NS0ID_AXISSCALEENUMERATION = 12077;

const int UA_NS0ID_AXISSCALEENUMERATION_ENUMSTRINGS = 12078;

const int UA_NS0ID_AXISINFORMATION = 12079;

const int UA_NS0ID_XVTYPE = 12080;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTXML = 12081;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTXML = 12082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION = 12083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT = 12085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE = 12086;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DATATYPEVERSION = 12087;

const int UA_NS0ID_OPCUA_XMLSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12088;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTBINARY = 12089;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTBINARY = 12090;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION = 12091;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DATATYPEVERSION = 12092;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_AXISINFORMATION_DICTIONARYFRAGMENT =
    12093;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE = 12094;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DATATYPEVERSION = 12095;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_XVTYPE_DICTIONARYFRAGMENT = 12096;

const int UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER =
    12097;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS =
    12098;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONID =
    12099;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SESSIONNAME =
    12100;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    12101;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SERVERURI =
    12102;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ENDPOINTURL =
    12103;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_LOCALEIDS =
    12104;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    12105;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    12106;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    12107;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    12108;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    12109;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    12110;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    12111;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    12112;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    12113;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_READCOUNT =
    12114;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    12115;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_WRITECOUNT =
    12116;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    12117;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CALLCOUNT =
    12118;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    12119;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    12120;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    12121;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    12122;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    12123;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    12124;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    12125;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    12126;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    12127;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    12128;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    12129;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    12130;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    12131;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    12132;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    12133;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    12134;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSECOUNT =
    12135;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    12136;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    12137;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    12138;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    12139;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    12140;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    12141;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS =
    12142;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    12143;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    12144;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    12145;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    12146;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    12147;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    12148;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    12149;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    12150;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    12151;

const int
    UA_NS0ID_SESSIONSDIAGNOSTICSSUMMARYTYPE_CLIENTNAME_PLACEHOLDER_SUBSCRIPTIONDIAGNOSTICSARRAY =
    12152;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12153;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12154;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12155;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12156;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12157;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12158;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12159;

const int
    UA_NS0ID_SERVERCAPABILITIESTYPE_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12160;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADDATA = 12161;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYREADEVENTS = 12162;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEDATA = 12163;

const int UA_NS0ID_OPERATIONLIMITSTYPE_MAXNODESPERHISTORYUPDATEEVENTS = 12164;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADDATA =
    12165;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYREADEVENTS =
    12166;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEDATA =
    12167;

const int
    UA_NS0ID_SERVER_SERVERCAPABILITIES_OPERATIONLIMITS_MAXNODESPERHISTORYUPDATEEVENTS =
    12168;

const int UA_NS0ID_NAMINGRULETYPE_ENUMVALUES = 12169;

const int UA_NS0ID_VIEWVERSION = 12170;

const int UA_NS0ID_COMPLEXNUMBERTYPE = 12171;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE = 12172;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12173;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTXML = 12174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE = 12175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT = 12177;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12178;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION =
    12179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12180;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12181;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTBINARY = 12182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE = 12183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DATATYPEVERSION = 12184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_COMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE = 12186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DATATYPEVERSION =
    12187;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DOUBLECOMPLEXNUMBERTYPE_DICTIONARYFRAGMENT =
    12188;

const int UA_NS0ID_SERVERONNETWORK = 12189;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST = 12190;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE = 12191;

const int UA_NS0ID_REGISTERSERVER2REQUEST = 12193;

const int UA_NS0ID_REGISTERSERVER2RESPONSE = 12194;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTXML = 12195;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTXML = 12196;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTXML = 12197;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTXML = 12199;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTXML = 12200;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK = 12201;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12202;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT = 12203;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTBINARY = 12207;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTBINARY = 12208;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTBINARY = 12209;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTBINARY = 12211;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTBINARY = 12212;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK = 12213;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DATATYPEVERSION = 12214;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SERVERONNETWORK_DICTIONARYFRAGMENT =
    12215;

const int UA_NS0ID_PROGRESSEVENTTYPE_CONTEXT = 12502;

const int UA_NS0ID_PROGRESSEVENTTYPE_PROGRESS = 12503;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE = 12513;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_INPUTARGUMENTS = 12514;

const int UA_NS0ID_OPENWITHMASKSMETHODTYPE_OUTPUTARGUMENTS = 12515;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE = 12516;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_OUTPUTARGUMENTS = 12517;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE = 12518;

const int UA_NS0ID_ADDCERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12519;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE = 12520;

const int UA_NS0ID_REMOVECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12521;

const int UA_NS0ID_TRUSTLISTTYPE = 12522;

const int UA_NS0ID_TRUSTLISTTYPE_SIZE = 12523;

const int UA_NS0ID_TRUSTLISTTYPE_OPENCOUNT = 12526;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN = 12527;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_INPUTARGUMENTS = 12528;

const int UA_NS0ID_TRUSTLISTTYPE_OPEN_OUTPUTARGUMENTS = 12529;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE = 12530;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSE_INPUTARGUMENTS = 12531;

const int UA_NS0ID_TRUSTLISTTYPE_READ = 12532;

const int UA_NS0ID_TRUSTLISTTYPE_READ_INPUTARGUMENTS = 12533;

const int UA_NS0ID_TRUSTLISTTYPE_READ_OUTPUTARGUMENTS = 12534;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE = 12535;

const int UA_NS0ID_TRUSTLISTTYPE_WRITE_INPUTARGUMENTS = 12536;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION = 12537;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_INPUTARGUMENTS = 12538;

const int UA_NS0ID_TRUSTLISTTYPE_GETPOSITION_OUTPUTARGUMENTS = 12539;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION = 12540;

const int UA_NS0ID_TRUSTLISTTYPE_SETPOSITION_INPUTARGUMENTS = 12541;

const int UA_NS0ID_TRUSTLISTTYPE_LASTUPDATETIME = 12542;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS = 12543;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_INPUTARGUMENTS = 12544;

const int UA_NS0ID_TRUSTLISTTYPE_OPENWITHMASKS_OUTPUTARGUMENTS = 12545;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE = 12546;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_OUTPUTARGUMENTS = 12547;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE = 12548;

const int UA_NS0ID_TRUSTLISTTYPE_ADDCERTIFICATE_INPUTARGUMENTS = 12549;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE = 12550;

const int UA_NS0ID_TRUSTLISTTYPE_REMOVECERTIFICATE_INPUTARGUMENTS = 12551;

const int UA_NS0ID_TRUSTLISTMASKS = 12552;

const int UA_NS0ID_TRUSTLISTMASKS_ENUMVALUES = 12553;

const int UA_NS0ID_TRUSTLISTDATATYPE = 12554;

const int UA_NS0ID_CERTIFICATEGROUPTYPE = 12555;

const int UA_NS0ID_CERTIFICATETYPE = 12556;

const int UA_NS0ID_APPLICATIONCERTIFICATETYPE = 12557;

const int UA_NS0ID_HTTPSCERTIFICATETYPE = 12558;

const int UA_NS0ID_RSAMINAPPLICATIONCERTIFICATETYPE = 12559;

const int UA_NS0ID_RSASHA256APPLICATIONCERTIFICATETYPE = 12560;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE = 12561;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTID = 12562;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12563;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENODE = 12564;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SOURCENAME = 12565;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_TIME = 12566;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12567;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_LOCALTIME = 12568;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_MESSAGE = 12569;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SEVERITY = 12570;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12571;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_STATUS = 12572;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_SERVERID = 12573;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12574;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12575;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_METHODID = 12576;

const int UA_NS0ID_TRUSTLISTUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 12577;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE = 12578;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_INPUTARGUMENTS = 12579;

const int UA_NS0ID_UPDATECERTIFICATEMETHODTYPE_OUTPUTARGUMENTS = 12580;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE = 12581;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SUPPORTEDPRIVATEKEYFORMATS = 12583;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MAXTRUSTLISTSIZE = 12584;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_MULTICASTDNSENABLED = 12585;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE = 12616;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_INPUTARGUMENTS =
    12617;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_UPDATECERTIFICATE_OUTPUTARGUMENTS =
    12618;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE = 12620;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTID = 12621;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_EVENTTYPE = 12622;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENODE = 12623;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SOURCENAME = 12624;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_TIME = 12625;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_RECEIVETIME = 12626;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_LOCALTIME = 12627;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_MESSAGE = 12628;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SEVERITY = 12629;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 12630;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_STATUS = 12631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_SERVERID = 12632;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID = 12633;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 12634;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_METHODID = 12635;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 12636;

const int UA_NS0ID_SERVERCONFIGURATION = 12637;

const int UA_NS0ID_SERVERCONFIGURATION_SUPPORTEDPRIVATEKEYFORMATS = 12639;

const int UA_NS0ID_SERVERCONFIGURATION_MAXTRUSTLISTSIZE = 12640;

const int UA_NS0ID_SERVERCONFIGURATION_MULTICASTDNSENABLED = 12641;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    12642;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    12643;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    12646;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    12647;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    12648;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    12649;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    12650;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    12651;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    12652;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    12653;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    12654;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    12655;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    12656;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    12657;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    12658;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    12659;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    12660;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    12661;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    12662;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    12663;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    12664;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    12665;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    12666;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    12667;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    12668;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    12669;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    12670;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    12671;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTXML = 12676;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE = 12677;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12678;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT = 12679;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTBINARY = 12680;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE = 12681;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DATATYPEVERSION = 12682;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TRUSTLISTDATATYPE_DICTIONARYFRAGMENT =
    12683;

const int UA_NS0ID_FILETYPE_WRITABLE = 12686;

const int UA_NS0ID_FILETYPE_USERWRITABLE = 12687;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_WRITABLE = 12688;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_USERWRITABLE = 12689;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_WRITABLE = 12690;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_USERWRITABLE = 12691;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_WRITABLE =
    12692;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_USERWRITABLE =
    12693;

const int UA_NS0ID_TRUSTLISTTYPE_WRITABLE = 12698;

const int UA_NS0ID_TRUSTLISTTYPE_USERWRITABLE = 12699;

const int UA_NS0ID_CLOSEANDUPDATEMETHODTYPE_INPUTARGUMENTS = 12704;

const int UA_NS0ID_TRUSTLISTTYPE_CLOSEANDUPDATE_INPUTARGUMENTS = 12705;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_SERVERCAPABILITIES = 12708;

const int UA_NS0ID_SERVERCONFIGURATION_SERVERCAPABILITIES = 12710;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT = 12712;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION = 12713;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT =
    12714;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH = 12715;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12716;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12717;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT = 12718;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DATATYPEVERSION =
    12719;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATHELEMENT_DICTIONARYFRAGMENT =
    12720;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH = 12721;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DATATYPEVERSION = 12722;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RELATIVEPATH_DICTIONARYFRAGMENT = 12723;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST = 12731;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_INPUTARGUMENTS =
    12732;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CREATESIGNINGREQUEST_OUTPUTARGUMENTS =
    12733;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_APPLYCHANGES = 12734;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST = 12737;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_INPUTARGUMENTS =
    12738;

const int UA_NS0ID_SERVERCONFIGURATION_CREATESIGNINGREQUEST_OUTPUTARGUMENTS =
    12739;

const int UA_NS0ID_SERVERCONFIGURATION_APPLYCHANGES = 12740;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE = 12741;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_INPUTARGUMENTS = 12742;

const int UA_NS0ID_CREATESIGNINGREQUESTMETHODTYPE_OUTPUTARGUMENTS = 12743;

const int UA_NS0ID_OPTIONSETVALUES = 12745;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE = 12746;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12747;

const int UA_NS0ID_SERVERTYPE_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12748;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE = 12749;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_INPUTARGUMENTS = 12750;

const int UA_NS0ID_SERVER_SETSUBSCRIPTIONDURABLE_OUTPUTARGUMENTS = 12751;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE = 12752;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_INPUTARGUMENTS = 12753;

const int UA_NS0ID_SETSUBSCRIPTIONDURABLEMETHODTYPE_OUTPUTARGUMENTS = 12754;

const int UA_NS0ID_OPTIONSET = 12755;

const int UA_NS0ID_UNION = 12756;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTXML = 12757;

const int UA_NS0ID_UNION_ENCODING_DEFAULTXML = 12758;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET = 12759;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DATATYPEVERSION = 12760;

const int UA_NS0ID_OPCUA_XMLSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12761;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION = 12762;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DATATYPEVERSION = 12763;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UNION_DICTIONARYFRAGMENT = 12764;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTBINARY = 12765;

const int UA_NS0ID_UNION_ENCODING_DEFAULTBINARY = 12766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET = 12767;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DATATYPEVERSION = 12768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_OPTIONSET_DICTIONARYFRAGMENT = 12769;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION = 12770;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DATATYPEVERSION = 12771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UNION_DICTIONARYFRAGMENT = 12772;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE = 12773;

const int UA_NS0ID_GETREJECTEDLISTMETHODTYPE_OUTPUTARGUMENTS = 12774;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST = 12775;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS =
    12776;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST = 12777;

const int UA_NS0ID_SERVERCONFIGURATION_GETREJECTEDLIST_OUTPUTARGUMENTS = 12778;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS =
    12779;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLINGINTERVAL =
    12780;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_SAMPLEDMONITOREDITEMSCOUNT =
    12781;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_MAXSAMPLEDMONITOREDITEMSCOUNT =
    12782;

const int
    UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSARRAYTYPE_SAMPLINGINTERVALDIAGNOSTICS_DISABLEDMONITOREDITEMSSAMPLINGCOUNT =
    12783;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS =
    12784;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SESSIONID =
    12785;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_SUBSCRIPTIONID =
    12786;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PRIORITY =
    12787;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGINTERVAL =
    12788;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXKEEPALIVECOUNT =
    12789;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXLIFETIMECOUNT =
    12790;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MAXNOTIFICATIONSPERPUBLISH =
    12791;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHINGENABLED =
    12792;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MODIFYCOUNT =
    12793;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_ENABLECOUNT =
    12794;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLECOUNT =
    12795;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHREQUESTCOUNT =
    12796;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGEREQUESTCOUNT =
    12797;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_REPUBLISHMESSAGECOUNT =
    12798;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREQUESTCOUNT =
    12799;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOALTCLIENTCOUNT =
    12800;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_TRANSFERREDTOSAMECLIENTCOUNT =
    12801;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_PUBLISHREQUESTCOUNT =
    12802;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DATACHANGENOTIFICATIONSCOUNT =
    12803;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTNOTIFICATIONSCOUNT =
    12804;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NOTIFICATIONSCOUNT =
    12805;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_LATEPUBLISHREQUESTCOUNT =
    12806;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTKEEPALIVECOUNT =
    12807;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_CURRENTLIFETIMECOUNT =
    12808;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_UNACKNOWLEDGEDMESSAGECOUNT =
    12809;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISCARDEDMESSAGECOUNT =
    12810;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITOREDITEMCOUNT =
    12811;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_DISABLEDMONITOREDITEMCOUNT =
    12812;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_MONITORINGQUEUEOVERFLOWCOUNT =
    12813;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_NEXTSEQUENCENUMBER =
    12814;

const int
    UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSARRAYTYPE_SUBSCRIPTIONDIAGNOSTICS_EVENTQUEUEOVERFLOWCOUNT =
    12815;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS = 12816;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONID =
    12817;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SESSIONNAME =
    12818;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTDESCRIPTION =
    12819;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SERVERURI =
    12820;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ENDPOINTURL =
    12821;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_LOCALEIDS =
    12822;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ACTUALSESSIONTIMEOUT =
    12823;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MAXRESPONSEMESSAGESIZE =
    12824;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTCONNECTIONTIME =
    12825;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CLIENTLASTCONTACTTIME =
    12826;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTSUBSCRIPTIONSCOUNT =
    12827;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTMONITOREDITEMSCOUNT =
    12828;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CURRENTPUBLISHREQUESTSINQUEUE =
    12829;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TOTALREQUESTCOUNT =
    12830;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNAUTHORIZEDREQUESTCOUNT =
    12831;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_READCOUNT =
    12832;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYREADCOUNT =
    12833;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_WRITECOUNT =
    12834;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_HISTORYUPDATECOUNT =
    12835;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CALLCOUNT =
    12836;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATEMONITOREDITEMSCOUNT =
    12837;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYMONITOREDITEMSCOUNT =
    12838;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETMONITORINGMODECOUNT =
    12839;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETTRIGGERINGCOUNT =
    12840;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEMONITOREDITEMSCOUNT =
    12841;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_CREATESUBSCRIPTIONCOUNT =
    12842;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_MODIFYSUBSCRIPTIONCOUNT =
    12843;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_SETPUBLISHINGMODECOUNT =
    12844;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_PUBLISHCOUNT =
    12845;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REPUBLISHCOUNT =
    12846;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSFERSUBSCRIPTIONSCOUNT =
    12847;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETESUBSCRIPTIONSCOUNT =
    12848;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDNODESCOUNT =
    12849;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_ADDREFERENCESCOUNT =
    12850;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETENODESCOUNT =
    12851;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_DELETEREFERENCESCOUNT =
    12852;

const int UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSECOUNT =
    12853;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_BROWSENEXTCOUNT =
    12854;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_TRANSLATEBROWSEPATHSTONODEIDSCOUNT =
    12855;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYFIRSTCOUNT =
    12856;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_QUERYNEXTCOUNT =
    12857;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_REGISTERNODESCOUNT =
    12858;

const int
    UA_NS0ID_SESSIONDIAGNOSTICSARRAYTYPE_SESSIONDIAGNOSTICS_UNREGISTERNODESCOUNT =
    12859;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS =
    12860;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SESSIONID =
    12861;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDOFSESSION =
    12862;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTUSERIDHISTORY =
    12863;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_AUTHENTICATIONMECHANISM =
    12864;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_ENCODING =
    12865;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_TRANSPORTPROTOCOL =
    12866;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYMODE =
    12867;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_SECURITYPOLICYURI =
    12868;

const int
    UA_NS0ID_SESSIONSECURITYDIAGNOSTICSARRAYTYPE_SESSIONSECURITYDIAGNOSTICS_CLIENTCERTIFICATE =
    12869;

const int UA_NS0ID_SERVERTYPE_RESENDDATA = 12871;

const int UA_NS0ID_SERVERTYPE_RESENDDATA_INPUTARGUMENTS = 12872;

const int UA_NS0ID_SERVER_RESENDDATA = 12873;

const int UA_NS0ID_SERVER_RESENDDATA_INPUTARGUMENTS = 12874;

const int UA_NS0ID_RESENDDATAMETHODTYPE = 12875;

const int UA_NS0ID_RESENDDATAMETHODTYPE_INPUTARGUMENTS = 12876;

const int UA_NS0ID_NORMALIZEDSTRING = 12877;

const int UA_NS0ID_DECIMALSTRING = 12878;

const int UA_NS0ID_DURATIONSTRING = 12879;

const int UA_NS0ID_TIMESTRING = 12880;

const int UA_NS0ID_DATESTRING = 12881;

const int UA_NS0ID_SERVERTYPE_ESTIMATEDRETURNTIME = 12882;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE = 12883;

const int UA_NS0ID_SERVERTYPE_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12884;

const int UA_NS0ID_SERVER_ESTIMATEDRETURNTIME = 12885;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE = 12886;

const int UA_NS0ID_SERVER_REQUESTSERVERSTATECHANGE_INPUTARGUMENTS = 12887;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE = 12888;

const int UA_NS0ID_REQUESTSERVERSTATECHANGEMETHODTYPE_INPUTARGUMENTS = 12889;

const int UA_NS0ID_DISCOVERYCONFIGURATION = 12890;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION = 12891;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12892;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTXML = 12893;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION = 12894;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION =
    12895;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12896;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION = 12897;

const int UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION =
    12898;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12899;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12900;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTBINARY = 12901;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION = 12902;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DATATYPEVERSION =
    12903;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12904;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION = 12905;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DATATYPEVERSION =
    12906;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_MDNSDISCOVERYCONFIGURATION_DICTIONARYFRAGMENT =
    12907;

const int UA_NS0ID_MAXBYTESTRINGLENGTH = 12908;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12909;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_MAXBYTESTRINGLENGTH = 12910;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_MAXBYTESTRINGLENGTH = 12911;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2 = 12912;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12913;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE = 12914;

const int UA_NS0ID_CONDITIONREFRESH2METHODTYPE_INPUTARGUMENTS = 12915;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2 = 12916;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12917;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2 = 12918;

const int
    UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12919;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2 = 12984;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12985;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2 = 12986;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 12987;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12988;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12989;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2 = 12990;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12991;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12992;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12993;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2 = 12994;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12995;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12996;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12997;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2 = 12998;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    12999;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13000;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13001;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2 = 13002;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13003;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2 = 13004;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13005;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13006;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13007;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2 = 13008;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13009;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2 = 13010;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS = 13011;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE = 13225;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTID = 13226;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EVENTTYPE = 13227;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENODE = 13228;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SOURCENAME = 13229;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_TIME = 13230;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RECEIVETIME = 13231;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LOCALTIME = 13232;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MESSAGE = 13233;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SEVERITY = 13234;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSID = 13235;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONCLASSNAME = 13236;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONNAME = 13237;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_BRANCHID = 13238;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RETAIN = 13239;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE = 13240;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_ID = 13241;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NAME = 13242;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_NUMBER = 13243;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    13244;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    13245;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    13246;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_TRUESTATE =
    13247;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLEDSTATE_FALSESTATE =
    13248;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY = 13249;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_QUALITY_SOURCETIMESTAMP =
    13250;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY = 13251;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    13252;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT = 13253;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_COMMENT_SOURCETIMESTAMP =
    13254;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CLIENTUSERID = 13255;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_DISABLE = 13256;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ENABLE = 13257;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT = 13258;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    13259;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH = 13260;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    13261;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2 = 13262;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    13263;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE = 13264;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_ID = 13265;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NAME = 13266;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_NUMBER = 13267;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    13268;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    13269;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    13270;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_TRUESTATE = 13271;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKEDSTATE_FALSESTATE = 13272;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE = 13273;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_ID = 13274;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NAME = 13275;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_NUMBER = 13276;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    13277;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    13278;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    13279;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    13280;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    13281;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE = 13282;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    13283;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM = 13284;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONFIRM_INPUTARGUMENTS =
    13285;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE = 13286;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_ID = 13287;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NAME = 13288;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_NUMBER = 13289;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    13290;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    13291;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    13292;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_TRUESTATE = 13293;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ACTIVESTATE_FALSESTATE =
    13294;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_INPUTNODE = 13295;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE = 13296;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_ID = 13297;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NAME = 13298;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_NUMBER =
    13299;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    13300;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    13301;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    13302;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    13303;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    13304;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE = 13305;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    13306;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    13307;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    13308;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    13309;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    13310;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    13311;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    13312;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    13313;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    13314;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    13315;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    13316;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    13317;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_UNSHELVE =
    13318;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    13319;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    13320;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    13321;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESSEDORSHELVED = 13322;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_MAXTIMESHELVED = 13323;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_NORMALSTATE = 13324;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONDATE = 13325;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATETYPE = 13326;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CERTIFICATE = 13327;

const int UA_NS0ID_FILETYPE_MIMETYPE = 13341;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE = 13342;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_INPUTARGUMENTS = 13343;

const int UA_NS0ID_CREATEDIRECTORYMETHODTYPE_OUTPUTARGUMENTS = 13344;

const int UA_NS0ID_CREATEFILEMETHODTYPE = 13345;

const int UA_NS0ID_CREATEFILEMETHODTYPE_INPUTARGUMENTS = 13346;

const int UA_NS0ID_CREATEFILEMETHODTYPE_OUTPUTARGUMENTS = 13347;

const int UA_NS0ID_DELETEFILEMETHODTYPE = 13348;

const int UA_NS0ID_DELETEFILEMETHODTYPE_INPUTARGUMENTS = 13349;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE = 13350;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_INPUTARGUMENTS = 13351;

const int UA_NS0ID_MOVEORCOPYMETHODTYPE_OUTPUTARGUMENTS = 13352;

const int UA_NS0ID_FILEDIRECTORYTYPE = 13353;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER = 13354;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY =
    13355;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS =
    13356;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS =
    13357;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE =
    13358;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS =
    13359;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS =
    13360;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY =
    13363;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS =
    13364;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS =
    13365;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER = 13366;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SIZE = 13367;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITABLE = 13368;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_USERWRITABLE = 13369;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPENCOUNT = 13370;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_MIMETYPE = 13371;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN = 13372;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS =
    13373;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS =
    13374;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE = 13375;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS =
    13376;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ = 13377;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS =
    13378;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS =
    13379;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE = 13380;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS =
    13381;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION = 13382;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS =
    13383;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS =
    13384;

const int UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION = 13385;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS =
    13386;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY = 13387;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_INPUTARGUMENTS = 13388;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEDIRECTORY_OUTPUTARGUMENTS = 13389;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE = 13390;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_INPUTARGUMENTS = 13391;

const int UA_NS0ID_FILEDIRECTORYTYPE_CREATEFILE_OUTPUTARGUMENTS = 13392;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT = 13393;

const int UA_NS0ID_FILEDIRECTORYTYPE_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    13394;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY = 13395;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_INPUTARGUMENTS = 13396;

const int UA_NS0ID_FILEDIRECTORYTYPE_MOVEORCOPY_OUTPUTARGUMENTS = 13397;

const int UA_NS0ID_ADDRESSSPACEFILETYPE_MIMETYPE = 13398;

const int UA_NS0ID_NAMESPACEMETADATATYPE_NAMESPACEFILE_MIMETYPE = 13399;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_NAMESPACEFILE_MIMETYPE =
    13400;

const int UA_NS0ID_TRUSTLISTTYPE_MIMETYPE = 13403;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST = 13599;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SIZE = 13600;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITABLE = 13601;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_USERWRITABLE = 13602;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENCOUNT = 13603;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_MIMETYPE = 13604;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN = 13605;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_INPUTARGUMENTS = 13606;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPEN_OUTPUTARGUMENTS = 13607;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE = 13608;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSE_INPUTARGUMENTS = 13609;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ = 13610;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_INPUTARGUMENTS = 13611;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_READ_OUTPUTARGUMENTS = 13612;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE = 13613;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_WRITE_INPUTARGUMENTS = 13614;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION = 13615;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13616;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13617;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION = 13618;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13619;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_LASTUPDATETIME = 13620;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS = 13621;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13622;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13623;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE = 13624;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13625;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13626;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE = 13627;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13628;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE = 13629;

const int
    UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13630;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_CERTIFICATETYPES = 13631;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATEGROUP = 13735;

const int UA_NS0ID_CERTIFICATEUPDATEDAUDITEVENTTYPE_CERTIFICATETYPE = 13736;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE = 13737;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_INPUTARGUMENTS = 13738;

const int UA_NS0ID_SERVERCONFIGURATION_UPDATECERTIFICATE_OUTPUTARGUMENTS =
    13739;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE = 13813;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP = 13814;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    13815;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    13816;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    13817;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    13818;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    13819;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    13820;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    13821;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13822;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13823;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    13824;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13825;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    13826;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13827;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13828;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    13829;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13830;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    13831;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13832;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13833;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    13834;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13835;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    13836;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    13837;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13838;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13839;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13840;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13841;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13842;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    13843;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13844;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13845;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13846;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    13847;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP = 13848;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST =
    13849;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    13850;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    13851;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    13852;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    13853;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    13854;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    13855;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13856;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13857;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    13858;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13859;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    13860;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13861;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13862;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    13863;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13864;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    13865;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13866;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13867;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    13868;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13869;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    13870;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    13871;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13872;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13873;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13874;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13875;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13876;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    13877;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13878;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13879;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13880;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    13881;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP = 13882;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    13883;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    13884;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    13885;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    13886;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    13887;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    13888;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    13889;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13890;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13891;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    13892;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13893;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    13894;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13895;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13896;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    13897;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13898;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    13899;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13900;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13901;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    13902;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13903;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    13904;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    13905;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13906;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13907;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13908;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13909;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13910;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    13911;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13912;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13913;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13914;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    13915;

const int UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER =
    13916;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST =
    13917;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SIZE =
    13918;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITABLE =
    13919;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_USERWRITABLE =
    13920;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENCOUNT =
    13921;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_MIMETYPE =
    13922;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN =
    13923;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13924;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13925;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE =
    13926;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13927;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ =
    13928;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_INPUTARGUMENTS =
    13929;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13930;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE =
    13931;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13932;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION =
    13933;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13934;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13935;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION =
    13936;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13937;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_LASTUPDATETIME =
    13938;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS =
    13939;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13940;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13941;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE =
    13942;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13943;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13944;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE =
    13945;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13946;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE =
    13947;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13948;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_CERTIFICATETYPES =
    13949;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS = 13950;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP =
    13951;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST =
    13952;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SIZE =
    13953;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    13954;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    13955;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENCOUNT =
    13956;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    13957;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN =
    13958;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13959;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13960;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE =
    13961;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13962;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ =
    13963;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13964;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13965;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE =
    13966;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    13967;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION =
    13968;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    13969;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    13970;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION =
    13971;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    13972;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_LASTUPDATETIME =
    13973;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS =
    13974;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    13975;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    13976;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE =
    13977;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    13978;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    13979;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE =
    13980;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    13981;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE =
    13982;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    13983;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    13984;

const int UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP =
    13985;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    13986;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    13987;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    13988;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    13989;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    13990;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    13991;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    13992;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    13993;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    13994;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    13995;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    13996;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    13997;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    13998;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    13999;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    14000;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14001;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    14002;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14003;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14004;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    14005;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14006;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    14007;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    14008;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14009;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14010;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14011;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14012;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14013;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    14014;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14015;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14016;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14017;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    14018;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP =
    14019;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    14020;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    14021;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    14022;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    14023;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    14024;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    14025;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    14026;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14027;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14028;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    14029;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14030;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    14031;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14032;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14033;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    14034;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14035;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    14036;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14037;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14038;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    14039;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14040;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    14041;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    14042;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14043;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14044;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14045;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14046;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14047;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    14048;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14049;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14050;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14051;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    14052;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS = 14053;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP =
    14088;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST =
    14089;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SIZE =
    14090;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITABLE =
    14091;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_USERWRITABLE =
    14092;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENCOUNT =
    14093;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_MIMETYPE =
    14094;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN =
    14095;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14096;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14097;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE =
    14098;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14099;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ =
    14100;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14101;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14102;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE =
    14103;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14104;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION =
    14105;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14106;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14107;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION =
    14108;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14109;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_LASTUPDATETIME =
    14110;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS =
    14111;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14112;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14113;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14114;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14115;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14116;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE =
    14117;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14118;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14119;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14120;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_CERTIFICATETYPES =
    14121;

const int UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP =
    14122;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST =
    14123;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SIZE =
    14124;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITABLE =
    14125;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_USERWRITABLE =
    14126;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENCOUNT =
    14127;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_MIMETYPE =
    14128;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN =
    14129;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_INPUTARGUMENTS =
    14130;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPEN_OUTPUTARGUMENTS =
    14131;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE =
    14132;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSE_INPUTARGUMENTS =
    14133;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ =
    14134;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_INPUTARGUMENTS =
    14135;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_READ_OUTPUTARGUMENTS =
    14136;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE =
    14137;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_WRITE_INPUTARGUMENTS =
    14138;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION =
    14139;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_INPUTARGUMENTS =
    14140;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_GETPOSITION_OUTPUTARGUMENTS =
    14141;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION =
    14142;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_SETPOSITION_INPUTARGUMENTS =
    14143;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_LASTUPDATETIME =
    14144;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS =
    14145;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_INPUTARGUMENTS =
    14146;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_OPENWITHMASKS_OUTPUTARGUMENTS =
    14147;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE =
    14148;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14149;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_CLOSEANDUPDATE_OUTPUTARGUMENTS =
    14150;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE =
    14151;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_ADDCERTIFICATE_INPUTARGUMENTS =
    14152;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE =
    14153;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_REMOVECERTIFICATE_INPUTARGUMENTS =
    14154;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_CERTIFICATETYPES =
    14155;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP =
    14156;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_WRITABLE =
    14157;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_USERWRITABLE =
    14158;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_MIMETYPE =
    14159;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_CLOSEANDUPDATE_INPUTARGUMENTS =
    14160;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_CERTIFICATETYPES =
    14161;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE = 14183;

const int UA_NS0ID_REMOVECONNECTIONMETHODTYPE_INPUTARGUMENTS = 14184;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE = 14209;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS = 14221;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP = 14225;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_REMOVEGROUP_INPUTARGUMENTS = 14226;

const int UA_NS0ID_PUBSUBGROUPTYPE = 14232;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE = 14273;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTXML = 14319;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14320;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION =
    14321;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT =
    14322;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTBINARY = 14323;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE = 14324;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DATATYPEVERSION =
    14325;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDVARIABLEDATATYPE_DICTIONARYFRAGMENT =
    14326;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_SESSIONID = 14413;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_SESSIONID = 14414;

const int UA_NS0ID_SERVER_SERVERREDUNDANCY_SERVERNETWORKGROUPS = 14415;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE = 14416;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER = 14417;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID =
    14418;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS =
    14419;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE =
    14420;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE =
    14421;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE =
    14422;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS =
    14423;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP =
    14424;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS =
    14425;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION = 14432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_REMOVECONNECTION_INPUTARGUMENTS = 14433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS = 14434;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS =
    14435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS =
    14438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    14439;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    14440;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET =
    14441;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14442;

const int UA_NS0ID_PUBLISHSUBSCRIBE = 14443;

const int UA_NS0ID_HASPUBSUBCONNECTION = 14476;

const int UA_NS0ID_DATASETFOLDERTYPE = 14477;

const int UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER = 14478;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS =
    14479;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14480;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14481;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS =
    14482;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    14483;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    14484;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET =
    14485;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14486;

const int UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER = 14487;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_CONFIGURATIONVERSION =
    14489;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS = 14493;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    14494;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    14495;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS = 14496;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_INPUTARGUMENTS = 14497;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS = 14498;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET = 14499;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    14500;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE = 14501;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_INPUTARGUMENTS = 14502;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSMETHODTYPE_OUTPUTARGUMENTS = 14503;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE = 14504;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_INPUTARGUMENTS = 14505;

const int UA_NS0ID_ADDPUBLISHEDEVENTSMETHODTYPE_OUTPUTARGUMENTS = 14506;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE = 14507;

const int UA_NS0ID_REMOVEPUBLISHEDDATASETMETHODTYPE_INPUTARGUMENTS = 14508;

const int UA_NS0ID_PUBLISHEDDATASETTYPE = 14509;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_CONFIGURATIONVERSION = 14519;

const int UA_NS0ID_DATASETMETADATATYPE = 14523;

const int UA_NS0ID_FIELDMETADATA = 14524;

const int UA_NS0ID_DATATYPEDESCRIPTION = 14525;

const int UA_NS0ID_STRUCTURETYPE_ENUMSTRINGS = 14528;

const int UA_NS0ID_KEYVALUEPAIR = 14533;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE = 14534;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_CONFIGURATIONVERSION = 14544;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_PUBLISHEDDATA = 14548;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES = 14555;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_INPUTARGUMENTS = 14556;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_ADDVARIABLES_OUTPUTARGUMENTS = 14557;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES = 14558;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_INPUTARGUMENTS =
    14559;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_REMOVEVARIABLES_OUTPUTARGUMENTS =
    14560;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE = 14564;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_INPUTARGUMENTS =
    14565;

const int UA_NS0ID_PUBLISHEDDATAITEMSADDVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    14566;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE = 14567;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_INPUTARGUMENTS =
    14568;

const int UA_NS0ID_PUBLISHEDDATAITEMSREMOVEVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    14569;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE = 14572;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_CONFIGURATIONVERSION = 14582;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_PUBSUBEVENTNOTIFIER = 14586;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_SELECTEDFIELDS = 14587;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_FILTER = 14588;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE = 14593;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_PUBLISHERID = 14595;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS = 14600;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_STATE = 14601;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_ENABLE = 14602;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_STATUS_DISABLE = 14603;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE = 14604;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEREMOVEGROUPMETHODTYPE_INPUTARGUMENTS =
    14605;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE = 14623;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEWRITERMETHODTYPE_INPUTARGUMENTS = 14624;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE = 14625;

const int UA_NS0ID_PUBSUBGROUPTYPEREMOVEREADERMETHODTYPE_INPUTARGUMENTS = 14626;

const int UA_NS0ID_PUBSUBSTATUSTYPE = 14643;

const int UA_NS0ID_PUBSUBSTATUSTYPE_STATE = 14644;

const int UA_NS0ID_PUBSUBSTATUSTYPE_ENABLE = 14645;

const int UA_NS0ID_PUBSUBSTATUSTYPE_DISABLE = 14646;

const int UA_NS0ID_PUBSUBSTATE = 14647;

const int UA_NS0ID_PUBSUBSTATE_ENUMSTRINGS = 14648;

const int UA_NS0ID_FIELDTARGETDATATYPE = 14744;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTXML = 14794;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTXML = 14795;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTXML = 14796;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTXML = 14797;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTXML = 14798;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTXML = 14799;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTXML = 14800;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTXML = 14801;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTXML = 14802;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTXML = 14803;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTXML = 14804;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE = 14805;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION = 14806;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT =
    14807;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA = 14808;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14809;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14810;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION = 14811;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION = 14812;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT =
    14813;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD = 14826;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DATATYPEVERSION = 14827;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14828;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR = 14829;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14830;

const int UA_NS0ID_OPCUA_XMLSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14831;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14832;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION =
    14833;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT =
    14834;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE = 14835;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION = 14836;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT =
    14837;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTBINARY = 14839;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTBINARY = 14844;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTBINARY = 14845;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTBINARY = 14846;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTBINARY = 14847;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTBINARY = 14848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE = 14849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DATATYPEVERSION =
    14850;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETMETADATATYPE_DICTIONARYFRAGMENT =
    14851;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA = 14852;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DATATYPEVERSION = 14853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDMETADATA_DICTIONARYFRAGMENT = 14854;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION = 14855;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DATATYPEVERSION =
    14856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDESCRIPTION_DICTIONARYFRAGMENT =
    14857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD = 14870;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DATATYPEVERSION = 14871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMFIELD_DICTIONARYFRAGMENT = 14872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR = 14873;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DATATYPEVERSION = 14874;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_KEYVALUEPAIR_DICTIONARYFRAGMENT = 14875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE = 14876;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DATATYPEVERSION =
    14877;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONFIGURATIONVERSIONDATATYPE_DICTIONARYFRAGMENT =
    14878;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DATATYPEVERSION =
    14880;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE_DICTIONARYFRAGMENT =
    14881;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_EXPIRATIONLIMIT = 14900;

const int UA_NS0ID_DATASETTOWRITER = 14936;

const int UA_NS0ID_DATATYPEDICTIONARYTYPE_DEPRECATED = 15001;

const int UA_NS0ID_MAXCHARACTERS = 15002;

const int UA_NS0ID_SERVERTYPE_URISVERSION = 15003;

const int UA_NS0ID_SERVER_URISVERSION = 15004;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION = 15005;

const int UA_NS0ID_UABINARYFILEDATATYPE = 15006;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE = 15007;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE = 15008;

const int UA_NS0ID_BROKERTRANSPORTQUALITYOFSERVICE_ENUMSTRINGS = 15009;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_KEYLIFETIME =
    15010;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYPOLICYURI =
    15011;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXFUTUREKEYCOUNT =
    15012;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE = 15013;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTID = 15014;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_EVENTTYPE = 15015;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENODE = 15016;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SOURCENAME = 15017;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_TIME = 15018;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_RECEIVETIME = 15019;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_LOCALTIME = 15020;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_MESSAGE = 15021;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SEVERITY = 15022;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_ACTIONTIMESTAMP = 15023;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_STATUS = 15024;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_SERVERID = 15025;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTAUDITENTRYID = 15026;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_CLIENTUSERID = 15027;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_METHODID = 15028;

const int UA_NS0ID_AUDITCONDITIONRESETEVENTTYPE_INPUTARGUMENTS = 15029;

const int UA_NS0ID_PERMISSIONTYPE_OPTIONSETVALUES = 15030;

const int UA_NS0ID_ACCESSLEVELTYPE = 15031;

const int UA_NS0ID_ACCESSLEVELTYPE_OPTIONSETVALUES = 15032;

const int UA_NS0ID_EVENTNOTIFIERTYPE = 15033;

const int UA_NS0ID_EVENTNOTIFIERTYPE_OPTIONSETVALUES = 15034;

const int UA_NS0ID_ACCESSRESTRICTIONTYPE_OPTIONSETVALUES = 15035;

const int UA_NS0ID_ATTRIBUTEWRITEMASK_OPTIONSETVALUES = 15036;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DEPRECATED = 15037;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODINPUTVALUES =
    15038;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DEPRECATED = 15039;

const int
    UA_NS0ID_PROGRAMSTATEMACHINETYPE_PROGRAMDIAGNOSTIC_LASTMETHODOUTPUTVALUES =
    15040;

const int UA_NS0ID_KEYVALUEPAIR_ENCODING_DEFAULTJSON = 15041;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTJSON = 15042;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_MAXPASTKEYCOUNT =
    15043;

const int UA_NS0ID_TRUSTLISTDATATYPE_ENCODING_DEFAULTJSON = 15044;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTJSON = 15045;

const int UA_NS0ID_SECURITYGROUPTYPE_KEYLIFETIME = 15046;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYPOLICYURI = 15047;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXFUTUREKEYCOUNT = 15048;

const int UA_NS0ID_CONFIGURATIONVERSIONDATATYPE_ENCODING_DEFAULTJSON = 15049;

const int UA_NS0ID_DATASETMETADATATYPE_ENCODING_DEFAULTJSON = 15050;

const int UA_NS0ID_FIELDMETADATA_ENCODING_DEFAULTJSON = 15051;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION = 15052;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_INPUTARGUMENTS =
    15053;

const int UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE = 15054;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_INPUTARGUMENTS =
    15055;

const int UA_NS0ID_SECURITYGROUPTYPE_MAXPASTKEYCOUNT = 15056;

const int UA_NS0ID_DATATYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15057;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTJSON = 15058;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTJSON = 15059;

const int UA_NS0ID_PUBLISHEDVARIABLEDATATYPE_ENCODING_DEFAULTJSON = 15060;

const int UA_NS0ID_FIELDTARGETDATATYPE_ENCODING_DEFAULTJSON = 15061;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTJSON = 15062;

const int UA_NS0ID_DATATYPEDEFINITION_ENCODING_DEFAULTJSON = 15063;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE = 15064;

const int UA_NS0ID_STRUCTUREFIELD_ENCODING_DEFAULTJSON = 15065;

const int UA_NS0ID_STRUCTUREDEFINITION_ENCODING_DEFAULTJSON = 15066;

const int UA_NS0ID_ENUMDEFINITION_ENCODING_DEFAULTJSON = 15067;

const int UA_NS0ID_NODE_ENCODING_DEFAULTJSON = 15068;

const int UA_NS0ID_INSTANCENODE_ENCODING_DEFAULTJSON = 15069;

const int UA_NS0ID_TYPENODE_ENCODING_DEFAULTJSON = 15070;

const int UA_NS0ID_OBJECTNODE_ENCODING_DEFAULTJSON = 15071;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS = 15072;

const int UA_NS0ID_OBJECTTYPENODE_ENCODING_DEFAULTJSON = 15073;

const int UA_NS0ID_VARIABLENODE_ENCODING_DEFAULTJSON = 15074;

const int UA_NS0ID_VARIABLETYPENODE_ENCODING_DEFAULTJSON = 15075;

const int UA_NS0ID_REFERENCETYPENODE_ENCODING_DEFAULTJSON = 15076;

const int UA_NS0ID_METHODNODE_ENCODING_DEFAULTJSON = 15077;

const int UA_NS0ID_VIEWNODE_ENCODING_DEFAULTJSON = 15078;

const int UA_NS0ID_DATATYPENODE_ENCODING_DEFAULTJSON = 15079;

const int UA_NS0ID_REFERENCENODE_ENCODING_DEFAULTJSON = 15080;

const int UA_NS0ID_ARGUMENT_ENCODING_DEFAULTJSON = 15081;

const int UA_NS0ID_ENUMVALUETYPE_ENCODING_DEFAULTJSON = 15082;

const int UA_NS0ID_ENUMFIELD_ENCODING_DEFAULTJSON = 15083;

const int UA_NS0ID_OPTIONSET_ENCODING_DEFAULTJSON = 15084;

const int UA_NS0ID_UNION_ENCODING_DEFAULTJSON = 15085;

const int UA_NS0ID_TIMEZONEDATATYPE_ENCODING_DEFAULTJSON = 15086;

const int UA_NS0ID_APPLICATIONDESCRIPTION_ENCODING_DEFAULTJSON = 15087;

const int UA_NS0ID_REQUESTHEADER_ENCODING_DEFAULTJSON = 15088;

const int UA_NS0ID_RESPONSEHEADER_ENCODING_DEFAULTJSON = 15089;

const int UA_NS0ID_SERVICEFAULT_ENCODING_DEFAULTJSON = 15090;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTJSON = 15091;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTJSON = 15092;

const int UA_NS0ID_FINDSERVERSREQUEST_ENCODING_DEFAULTJSON = 15093;

const int UA_NS0ID_FINDSERVERSRESPONSE_ENCODING_DEFAULTJSON = 15094;

const int UA_NS0ID_SERVERONNETWORK_ENCODING_DEFAULTJSON = 15095;

const int UA_NS0ID_FINDSERVERSONNETWORKREQUEST_ENCODING_DEFAULTJSON = 15096;

const int UA_NS0ID_FINDSERVERSONNETWORKRESPONSE_ENCODING_DEFAULTJSON = 15097;

const int UA_NS0ID_USERTOKENPOLICY_ENCODING_DEFAULTJSON = 15098;

const int UA_NS0ID_ENDPOINTDESCRIPTION_ENCODING_DEFAULTJSON = 15099;

const int UA_NS0ID_GETENDPOINTSREQUEST_ENCODING_DEFAULTJSON = 15100;

const int UA_NS0ID_GETENDPOINTSRESPONSE_ENCODING_DEFAULTJSON = 15101;

const int UA_NS0ID_REGISTEREDSERVER_ENCODING_DEFAULTJSON = 15102;

const int UA_NS0ID_REGISTERSERVERREQUEST_ENCODING_DEFAULTJSON = 15103;

const int UA_NS0ID_REGISTERSERVERRESPONSE_ENCODING_DEFAULTJSON = 15104;

const int UA_NS0ID_DISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15105;

const int UA_NS0ID_MDNSDISCOVERYCONFIGURATION_ENCODING_DEFAULTJSON = 15106;

const int UA_NS0ID_REGISTERSERVER2REQUEST_ENCODING_DEFAULTJSON = 15107;

const int UA_NS0ID_SUBSCRIBEDDATASETTYPE = 15108;

const int UA_NS0ID_CHOICESTATETYPE = 15109;

const int UA_NS0ID_CHOICESTATETYPE_STATENUMBER = 15110;

const int UA_NS0ID_TARGETVARIABLESTYPE = 15111;

const int UA_NS0ID_HASGUARD = 15112;

const int UA_NS0ID_GUARDVARIABLETYPE = 15113;

const int UA_NS0ID_TARGETVARIABLESTYPE_TARGETVARIABLES = 15114;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES = 15115;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_INPUTARGUMENTS =
    15116;

const int UA_NS0ID_TARGETVARIABLESTYPE_ADDTARGETVARIABLES_OUTPUTARGUMENTS =
    15117;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES = 15118;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_INPUTARGUMENTS =
    15119;

const int UA_NS0ID_TARGETVARIABLESTYPE_REMOVETARGETVARIABLES_OUTPUTARGUMENTS =
    15120;

const int UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE = 15121;

const int
    UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    15122;

const int
    UA_NS0ID_TARGETVARIABLESTYPEADDTARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    15123;

const int UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE = 15124;

const int
    UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    15125;

const int
    UA_NS0ID_TARGETVARIABLESTYPEREMOVETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    15126;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORTYPE = 15127;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE = 15128;

const int UA_NS0ID_EXPRESSIONGUARDVARIABLETYPE_EXPRESSION = 15129;

const int UA_NS0ID_REGISTERSERVER2RESPONSE_ENCODING_DEFAULTJSON = 15130;

const int UA_NS0ID_CHANNELSECURITYTOKEN_ENCODING_DEFAULTJSON = 15131;

const int UA_NS0ID_OPENSECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15132;

const int UA_NS0ID_OPENSECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15133;

const int UA_NS0ID_CLOSESECURECHANNELREQUEST_ENCODING_DEFAULTJSON = 15134;

const int UA_NS0ID_CLOSESECURECHANNELRESPONSE_ENCODING_DEFAULTJSON = 15135;

const int UA_NS0ID_SIGNEDSOFTWARECERTIFICATE_ENCODING_DEFAULTJSON = 15136;

const int UA_NS0ID_SIGNATUREDATA_ENCODING_DEFAULTJSON = 15137;

const int UA_NS0ID_CREATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15138;

const int UA_NS0ID_CREATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15139;

const int UA_NS0ID_USERIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15140;

const int UA_NS0ID_ANONYMOUSIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15141;

const int UA_NS0ID_USERNAMEIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15142;

const int UA_NS0ID_X509IDENTITYTOKEN_ENCODING_DEFAULTJSON = 15143;

const int UA_NS0ID_ISSUEDIDENTITYTOKEN_ENCODING_DEFAULTJSON = 15144;

const int UA_NS0ID_ACTIVATESESSIONREQUEST_ENCODING_DEFAULTJSON = 15145;

const int UA_NS0ID_ACTIVATESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15146;

const int UA_NS0ID_CLOSESESSIONREQUEST_ENCODING_DEFAULTJSON = 15147;

const int UA_NS0ID_CLOSESESSIONRESPONSE_ENCODING_DEFAULTJSON = 15148;

const int UA_NS0ID_CANCELREQUEST_ENCODING_DEFAULTJSON = 15149;

const int UA_NS0ID_CANCELRESPONSE_ENCODING_DEFAULTJSON = 15150;

const int UA_NS0ID_NODEATTRIBUTES_ENCODING_DEFAULTJSON = 15151;

const int UA_NS0ID_OBJECTATTRIBUTES_ENCODING_DEFAULTJSON = 15152;

const int UA_NS0ID_VARIABLEATTRIBUTES_ENCODING_DEFAULTJSON = 15153;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE =
    15154;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE = 15155;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_RESOURCEURI = 15156;

const int UA_NS0ID_METHODATTRIBUTES_ENCODING_DEFAULTJSON = 15157;

const int UA_NS0ID_OBJECTTYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15158;

const int UA_NS0ID_VARIABLETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15159;

const int UA_NS0ID_REFERENCETYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15160;

const int UA_NS0ID_DATATYPEATTRIBUTES_ENCODING_DEFAULTJSON = 15161;

const int UA_NS0ID_VIEWATTRIBUTES_ENCODING_DEFAULTJSON = 15162;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTJSON = 15163;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTJSON = 15164;

const int UA_NS0ID_ADDNODESITEM_ENCODING_DEFAULTJSON = 15165;

const int UA_NS0ID_ADDNODESRESULT_ENCODING_DEFAULTJSON = 15166;

const int UA_NS0ID_ADDNODESREQUEST_ENCODING_DEFAULTJSON = 15167;

const int UA_NS0ID_ADDNODESRESPONSE_ENCODING_DEFAULTJSON = 15168;

const int UA_NS0ID_ADDREFERENCESITEM_ENCODING_DEFAULTJSON = 15169;

const int UA_NS0ID_ADDREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15170;

const int UA_NS0ID_ADDREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15171;

const int UA_NS0ID_DELETENODESITEM_ENCODING_DEFAULTJSON = 15172;

const int UA_NS0ID_DELETENODESREQUEST_ENCODING_DEFAULTJSON = 15173;

const int UA_NS0ID_DELETENODESRESPONSE_ENCODING_DEFAULTJSON = 15174;

const int UA_NS0ID_DELETEREFERENCESITEM_ENCODING_DEFAULTJSON = 15175;

const int UA_NS0ID_DELETEREFERENCESREQUEST_ENCODING_DEFAULTJSON = 15176;

const int UA_NS0ID_DELETEREFERENCESRESPONSE_ENCODING_DEFAULTJSON = 15177;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15178;

const int UA_NS0ID_VIEWDESCRIPTION_ENCODING_DEFAULTJSON = 15179;

const int UA_NS0ID_BROWSEDESCRIPTION_ENCODING_DEFAULTJSON = 15180;

const int UA_NS0ID_USERCREDENTIALCERTIFICATETYPE = 15181;

const int UA_NS0ID_REFERENCEDESCRIPTION_ENCODING_DEFAULTJSON = 15182;

const int UA_NS0ID_BROWSERESULT_ENCODING_DEFAULTJSON = 15183;

const int UA_NS0ID_BROWSEREQUEST_ENCODING_DEFAULTJSON = 15184;

const int UA_NS0ID_BROWSERESPONSE_ENCODING_DEFAULTJSON = 15185;

const int UA_NS0ID_BROWSENEXTREQUEST_ENCODING_DEFAULTJSON = 15186;

const int UA_NS0ID_BROWSENEXTRESPONSE_ENCODING_DEFAULTJSON = 15187;

const int UA_NS0ID_RELATIVEPATHELEMENT_ENCODING_DEFAULTJSON = 15188;

const int UA_NS0ID_RELATIVEPATH_ENCODING_DEFAULTJSON = 15189;

const int UA_NS0ID_BROWSEPATH_ENCODING_DEFAULTJSON = 15190;

const int UA_NS0ID_BROWSEPATHTARGET_ENCODING_DEFAULTJSON = 15191;

const int UA_NS0ID_BROWSEPATHRESULT_ENCODING_DEFAULTJSON = 15192;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSREQUEST_ENCODING_DEFAULTJSON =
    15193;

const int UA_NS0ID_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE_ENCODING_DEFAULTJSON =
    15194;

const int UA_NS0ID_REGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15195;

const int UA_NS0ID_REGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15196;

const int UA_NS0ID_UNREGISTERNODESREQUEST_ENCODING_DEFAULTJSON = 15197;

const int UA_NS0ID_UNREGISTERNODESRESPONSE_ENCODING_DEFAULTJSON = 15198;

const int UA_NS0ID_ENDPOINTCONFIGURATION_ENCODING_DEFAULTJSON = 15199;

const int UA_NS0ID_QUERYDATADESCRIPTION_ENCODING_DEFAULTJSON = 15200;

const int UA_NS0ID_NODETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15201;

const int UA_NS0ID_QUERYDATASET_ENCODING_DEFAULTJSON = 15202;

const int UA_NS0ID_NODEREFERENCE_ENCODING_DEFAULTJSON = 15203;

const int UA_NS0ID_CONTENTFILTERELEMENT_ENCODING_DEFAULTJSON = 15204;

const int UA_NS0ID_CONTENTFILTER_ENCODING_DEFAULTJSON = 15205;

const int UA_NS0ID_FILTEROPERAND_ENCODING_DEFAULTJSON = 15206;

const int UA_NS0ID_ELEMENTOPERAND_ENCODING_DEFAULTJSON = 15207;

const int UA_NS0ID_LITERALOPERAND_ENCODING_DEFAULTJSON = 15208;

const int UA_NS0ID_ATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15209;

const int UA_NS0ID_SIMPLEATTRIBUTEOPERAND_ENCODING_DEFAULTJSON = 15210;

const int UA_NS0ID_CONTENTFILTERELEMENTRESULT_ENCODING_DEFAULTJSON = 15211;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS = 15212;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15213;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15214;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS = 15215;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_INPUTARGUMENTS = 15216;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15217;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE = 15218;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 15219;

const int UA_NS0ID_GETSECURITYKEYSMETHODTYPE_OUTPUTARGUMENTS = 15220;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETMETADATA =
    15221;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER = 15222;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15223;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15224;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15225;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15226;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15227;

const int UA_NS0ID_CONTENTFILTERRESULT_ENCODING_DEFAULTJSON = 15228;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETMETADATA = 15229;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15230;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15231;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15232;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15233;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15234;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15235;

const int UA_NS0ID_PARSINGRESULT_ENCODING_DEFAULTJSON = 15236;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETMETADATA = 15237;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER = 15238;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS =
    15239;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    15240;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    15241;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    15242;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15243;

const int UA_NS0ID_QUERYFIRSTREQUEST_ENCODING_DEFAULTJSON = 15244;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETMETADATA = 15245;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_RESOURCEURI = 15246;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15247;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE = 15248;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15249;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_RESOURCEURI = 15250;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15251;

const int UA_NS0ID_QUERYFIRSTRESPONSE_ENCODING_DEFAULTJSON = 15252;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_INPUTARGUMENTS = 15253;

const int UA_NS0ID_QUERYNEXTREQUEST_ENCODING_DEFAULTJSON = 15254;

const int UA_NS0ID_QUERYNEXTRESPONSE_ENCODING_DEFAULTJSON = 15255;

const int UA_NS0ID_READVALUEID_ENCODING_DEFAULTJSON = 15256;

const int UA_NS0ID_READREQUEST_ENCODING_DEFAULTJSON = 15257;

const int UA_NS0ID_READRESPONSE_ENCODING_DEFAULTJSON = 15258;

const int UA_NS0ID_HISTORYREADVALUEID_ENCODING_DEFAULTJSON = 15259;

const int UA_NS0ID_HISTORYREADRESULT_ENCODING_DEFAULTJSON = 15260;

const int UA_NS0ID_HISTORYREADDETAILS_ENCODING_DEFAULTJSON = 15261;

const int UA_NS0ID_READEVENTDETAILS_ENCODING_DEFAULTJSON = 15262;

const int UA_NS0ID_READRAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15263;

const int UA_NS0ID_READPROCESSEDDETAILS_ENCODING_DEFAULTJSON = 15264;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS = 15265;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_STATE = 15266;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_ENABLE = 15267;

const int UA_NS0ID_PUBSUBGROUPTYPE_STATUS_DISABLE = 15268;

const int UA_NS0ID_READATTIMEDETAILS_ENCODING_DEFAULTJSON = 15269;

const int UA_NS0ID_HISTORYDATA_ENCODING_DEFAULTJSON = 15270;

const int UA_NS0ID_MODIFICATIONINFO_ENCODING_DEFAULTJSON = 15271;

const int UA_NS0ID_HISTORYMODIFIEDDATA_ENCODING_DEFAULTJSON = 15272;

const int UA_NS0ID_HISTORYEVENT_ENCODING_DEFAULTJSON = 15273;

const int UA_NS0ID_HISTORYREADREQUEST_ENCODING_DEFAULTJSON = 15274;

const int UA_NS0ID_HISTORYREADRESPONSE_ENCODING_DEFAULTJSON = 15275;

const int UA_NS0ID_WRITEVALUE_ENCODING_DEFAULTJSON = 15276;

const int UA_NS0ID_WRITEREQUEST_ENCODING_DEFAULTJSON = 15277;

const int UA_NS0ID_WRITERESPONSE_ENCODING_DEFAULTJSON = 15278;

const int UA_NS0ID_HISTORYUPDATEDETAILS_ENCODING_DEFAULTJSON = 15279;

const int UA_NS0ID_UPDATEDATADETAILS_ENCODING_DEFAULTJSON = 15280;

const int UA_NS0ID_UPDATESTRUCTUREDATADETAILS_ENCODING_DEFAULTJSON = 15281;

const int UA_NS0ID_UPDATEEVENTDETAILS_ENCODING_DEFAULTJSON = 15282;

const int UA_NS0ID_DELETERAWMODIFIEDDETAILS_ENCODING_DEFAULTJSON = 15283;

const int UA_NS0ID_DELETEATTIMEDETAILS_ENCODING_DEFAULTJSON = 15284;

const int UA_NS0ID_DELETEEVENTDETAILS_ENCODING_DEFAULTJSON = 15285;

const int UA_NS0ID_HISTORYUPDATERESULT_ENCODING_DEFAULTJSON = 15286;

const int UA_NS0ID_HISTORYUPDATEREQUEST_ENCODING_DEFAULTJSON = 15287;

const int UA_NS0ID_HISTORYUPDATERESPONSE_ENCODING_DEFAULTJSON = 15288;

const int UA_NS0ID_CALLMETHODREQUEST_ENCODING_DEFAULTJSON = 15289;

const int UA_NS0ID_CALLMETHODRESULT_ENCODING_DEFAULTJSON = 15290;

const int UA_NS0ID_CALLREQUEST_ENCODING_DEFAULTJSON = 15291;

const int UA_NS0ID_CALLRESPONSE_ENCODING_DEFAULTJSON = 15292;

const int UA_NS0ID_MONITORINGFILTER_ENCODING_DEFAULTJSON = 15293;

const int UA_NS0ID_DATACHANGEFILTER_ENCODING_DEFAULTJSON = 15294;

const int UA_NS0ID_EVENTFILTER_ENCODING_DEFAULTJSON = 15295;

const int UA_NS0ID_HASDATASETWRITER = 15296;

const int UA_NS0ID_HASDATASETREADER = 15297;

const int UA_NS0ID_DATASETWRITERTYPE = 15298;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS = 15299;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_STATE = 15300;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_ENABLE = 15301;

const int UA_NS0ID_DATASETWRITERTYPE_STATUS_DISABLE = 15302;

const int UA_NS0ID_DATASETWRITERTYPE_TRANSPORTSETTINGS = 15303;

const int UA_NS0ID_AGGREGATECONFIGURATION_ENCODING_DEFAULTJSON = 15304;

const int UA_NS0ID_DATASETWRITERTRANSPORTTYPE = 15305;

const int UA_NS0ID_DATASETREADERTYPE = 15306;

const int UA_NS0ID_DATASETREADERTYPE_STATUS = 15307;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_STATE = 15308;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_ENABLE = 15309;

const int UA_NS0ID_DATASETREADERTYPE_STATUS_DISABLE = 15310;

const int UA_NS0ID_DATASETREADERTYPE_TRANSPORTSETTINGS = 15311;

const int UA_NS0ID_AGGREGATEFILTER_ENCODING_DEFAULTJSON = 15312;

const int UA_NS0ID_MONITORINGFILTERRESULT_ENCODING_DEFAULTJSON = 15313;

const int UA_NS0ID_EVENTFILTERRESULT_ENCODING_DEFAULTJSON = 15314;

const int UA_NS0ID_AGGREGATEFILTERRESULT_ENCODING_DEFAULTJSON = 15315;

const int UA_NS0ID_DATASETREADERTYPE_SUBSCRIBEDDATASET = 15316;

const int UA_NS0ID_ELSEGUARDVARIABLETYPE = 15317;

const int UA_NS0ID_BASEANALOGTYPE = 15318;

const int UA_NS0ID_DATASETREADERTRANSPORTTYPE = 15319;

const int UA_NS0ID_MONITORINGPARAMETERS_ENCODING_DEFAULTJSON = 15320;

const int UA_NS0ID_MONITOREDITEMCREATEREQUEST_ENCODING_DEFAULTJSON = 15321;

const int UA_NS0ID_MONITOREDITEMCREATERESULT_ENCODING_DEFAULTJSON = 15322;

const int UA_NS0ID_CREATEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15323;

const int UA_NS0ID_CREATEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15324;

const int UA_NS0ID_MONITOREDITEMMODIFYREQUEST_ENCODING_DEFAULTJSON = 15325;

const int UA_NS0ID_MONITOREDITEMMODIFYRESULT_ENCODING_DEFAULTJSON = 15326;

const int UA_NS0ID_MODIFYMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15327;

const int UA_NS0ID_MODIFYMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15328;

const int UA_NS0ID_SETMONITORINGMODEREQUEST_ENCODING_DEFAULTJSON = 15329;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15330;

const int UA_NS0ID_SETMONITORINGMODERESPONSE_ENCODING_DEFAULTJSON = 15331;

const int UA_NS0ID_SETTRIGGERINGREQUEST_ENCODING_DEFAULTJSON = 15332;

const int UA_NS0ID_SETTRIGGERINGRESPONSE_ENCODING_DEFAULTJSON = 15333;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_RESOURCEURI = 15334;

const int UA_NS0ID_DELETEMONITOREDITEMSREQUEST_ENCODING_DEFAULTJSON = 15335;

const int UA_NS0ID_DELETEMONITOREDITEMSRESPONSE_ENCODING_DEFAULTJSON = 15336;

const int UA_NS0ID_CREATESUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15337;

const int UA_NS0ID_CREATESUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15338;

const int UA_NS0ID_MODIFYSUBSCRIPTIONREQUEST_ENCODING_DEFAULTJSON = 15339;

const int UA_NS0ID_MODIFYSUBSCRIPTIONRESPONSE_ENCODING_DEFAULTJSON = 15340;

const int UA_NS0ID_SETPUBLISHINGMODEREQUEST_ENCODING_DEFAULTJSON = 15341;

const int UA_NS0ID_SETPUBLISHINGMODERESPONSE_ENCODING_DEFAULTJSON = 15342;

const int UA_NS0ID_NOTIFICATIONMESSAGE_ENCODING_DEFAULTJSON = 15343;

const int UA_NS0ID_NOTIFICATIONDATA_ENCODING_DEFAULTJSON = 15344;

const int UA_NS0ID_DATACHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15345;

const int UA_NS0ID_MONITOREDITEMNOTIFICATION_ENCODING_DEFAULTJSON = 15346;

const int UA_NS0ID_EVENTNOTIFICATIONLIST_ENCODING_DEFAULTJSON = 15347;

const int UA_NS0ID_EVENTFIELDLIST_ENCODING_DEFAULTJSON = 15348;

const int UA_NS0ID_HISTORYEVENTFIELDLIST_ENCODING_DEFAULTJSON = 15349;

const int UA_NS0ID_STATUSCHANGENOTIFICATION_ENCODING_DEFAULTJSON = 15350;

const int UA_NS0ID_SUBSCRIPTIONACKNOWLEDGEMENT_ENCODING_DEFAULTJSON = 15351;

const int UA_NS0ID_PUBLISHREQUEST_ENCODING_DEFAULTJSON = 15352;

const int UA_NS0ID_PUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15353;

const int UA_NS0ID_REPUBLISHREQUEST_ENCODING_DEFAULTJSON = 15354;

const int UA_NS0ID_REPUBLISHRESPONSE_ENCODING_DEFAULTJSON = 15355;

const int UA_NS0ID_TRANSFERRESULT_ENCODING_DEFAULTJSON = 15356;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15357;

const int UA_NS0ID_TRANSFERSUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15358;

const int UA_NS0ID_DELETESUBSCRIPTIONSREQUEST_ENCODING_DEFAULTJSON = 15359;

const int UA_NS0ID_DELETESUBSCRIPTIONSRESPONSE_ENCODING_DEFAULTJSON = 15360;

const int UA_NS0ID_BUILDINFO_ENCODING_DEFAULTJSON = 15361;

const int UA_NS0ID_REDUNDANTSERVERDATATYPE_ENCODING_DEFAULTJSON = 15362;

const int UA_NS0ID_ENDPOINTURLLISTDATATYPE_ENCODING_DEFAULTJSON = 15363;

const int UA_NS0ID_NETWORKGROUPDATATYPE_ENCODING_DEFAULTJSON = 15364;

const int UA_NS0ID_SAMPLINGINTERVALDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON =
    15365;

const int UA_NS0ID_SERVERDIAGNOSTICSSUMMARYDATATYPE_ENCODING_DEFAULTJSON =
    15366;

const int UA_NS0ID_SERVERSTATUSDATATYPE_ENCODING_DEFAULTJSON = 15367;

const int UA_NS0ID_SESSIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15368;

const int UA_NS0ID_SESSIONSECURITYDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON =
    15369;

const int UA_NS0ID_SERVICECOUNTERDATATYPE_ENCODING_DEFAULTJSON = 15370;

const int UA_NS0ID_STATUSRESULT_ENCODING_DEFAULTJSON = 15371;

const int UA_NS0ID_SUBSCRIPTIONDIAGNOSTICSDATATYPE_ENCODING_DEFAULTJSON = 15372;

const int UA_NS0ID_MODELCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15373;

const int UA_NS0ID_SEMANTICCHANGESTRUCTUREDATATYPE_ENCODING_DEFAULTJSON = 15374;

const int UA_NS0ID_RANGE_ENCODING_DEFAULTJSON = 15375;

const int UA_NS0ID_EUINFORMATION_ENCODING_DEFAULTJSON = 15376;

const int UA_NS0ID_COMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15377;

const int UA_NS0ID_DOUBLECOMPLEXNUMBERTYPE_ENCODING_DEFAULTJSON = 15378;

const int UA_NS0ID_AXISINFORMATION_ENCODING_DEFAULTJSON = 15379;

const int UA_NS0ID_XVTYPE_ENCODING_DEFAULTJSON = 15380;

const int UA_NS0ID_PROGRAMDIAGNOSTICDATATYPE_ENCODING_DEFAULTJSON = 15381;

const int UA_NS0ID_ANNOTATION_ENCODING_DEFAULTJSON = 15382;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE = 15383;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATESESSIONID = 15384;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_CREATECLIENTNAME = 15385;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_INVOCATIONCREATIONTIME = 15386;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTTRANSITIONTIME = 15387;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALL = 15388;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODSESSIONID = 15389;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTARGUMENTS = 15390;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTARGUMENTS = 15391;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODINPUTVALUES = 15392;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODOUTPUTVALUES = 15393;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODCALLTIME = 15394;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2TYPE_LASTMETHODRETURNSTATUS = 15395;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE = 15396;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTBINARY = 15397;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 15398;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION =
    15399;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT =
    15400;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTXML = 15401;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE = 15402;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DATATYPEVERSION =
    15403;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PROGRAMDIAGNOSTIC2DATATYPE_DICTIONARYFRAGMENT =
    15404;

const int UA_NS0ID_PROGRAMDIAGNOSTIC2DATATYPE_ENCODING_DEFAULTJSON = 15405;

const int UA_NS0ID_ACCESSLEVELEXTYPE = 15406;

const int UA_NS0ID_ACCESSLEVELEXTYPE_OPTIONSETVALUES = 15407;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONSEXCLUDE = 15408;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTSEXCLUDE = 15409;

const int UA_NS0ID_ROLETYPE_APPLICATIONSEXCLUDE = 15410;

const int UA_NS0ID_ROLETYPE_ENDPOINTSEXCLUDE = 15411;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONSEXCLUDE = 15412;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTSEXCLUDE = 15413;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONSEXCLUDE = 15414;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTSEXCLUDE = 15415;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONSEXCLUDE = 15416;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTSEXCLUDE = 15417;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONSEXCLUDE = 15418;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_AUTHENTICATIONPROFILEURI =
    15419;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_REQUESTEDDELIVERYGUARANTEE =
    15420;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTBINARY = 15421;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTBINARY = 15422;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTSEXCLUDE = 15423;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONSEXCLUDE = 15424;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTSEXCLUDE = 15425;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONSEXCLUDE = 15426;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTSEXCLUDE = 15427;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONSEXCLUDE = 15428;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTSEXCLUDE = 15429;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONSEXCLUDE = 15430;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP = 15431;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15432;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS =
    15433;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS = 15434;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15437;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP =
    15438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15439;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP = 15440;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_INPUTARGUMENTS = 15441;

const int UA_NS0ID_PUBLISHSUBSCRIBE_GETSECURITYGROUP_OUTPUTARGUMENTS = 15442;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS = 15443;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP = 15444;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15445;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15446;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP = 15447;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15448;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE = 15449;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15450;

const int UA_NS0ID_GETSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15451;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE = 15452;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER =
    15453;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP =
    15454;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_INPUTARGUMENTS =
    15455;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15456;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP =
    15457;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPFOLDERNAME_PLACEHOLDER_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15458;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER =
    15459;

const int
    UA_NS0ID_SECURITYGROUPFOLDERTYPE_SECURITYGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    15460;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP = 15461;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_INPUTARGUMENTS =
    15462;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15463;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP = 15464;

const int UA_NS0ID_SECURITYGROUPFOLDERTYPE_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15465;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE = 15466;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15467;

const int UA_NS0ID_ADDSECURITYGROUPMETHODTYPE_OUTPUTARGUMENTS = 15468;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE = 15469;

const int UA_NS0ID_REMOVESECURITYGROUPMETHODTYPE_INPUTARGUMENTS = 15470;

const int UA_NS0ID_SECURITYGROUPTYPE = 15471;

const int UA_NS0ID_SECURITYGROUPTYPE_SECURITYGROUPID = 15472;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS =
    15473;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15474;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15475;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15476;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15477;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15478;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15479;

const int UA_NS0ID_WRITERGROUPDATATYPE = 15480;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS = 15481;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15482;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15483;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15484;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15485;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15486;

const int UA_NS0ID_STRUCTUREDESCRIPTION = 15487;

const int UA_NS0ID_ENUMDESCRIPTION = 15488;

const int UA_NS0ID_EXTENSIONFIELDSTYPE = 15489;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_EXTENSIONFIELDNAME_PLACEHOLDER = 15490;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD = 15491;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_INPUTARGUMENTS = 15492;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15493;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD = 15494;

const int UA_NS0ID_EXTENSIONFIELDSTYPE_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15495;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE = 15496;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15497;

const int UA_NS0ID_ADDEXTENSIONFIELDMETHODTYPE_OUTPUTARGUMENTS = 15498;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE = 15499;

const int UA_NS0ID_REMOVEEXTENSIONFIELDMETHODTYPE_INPUTARGUMENTS = 15500;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION = 15501;

const int UA_NS0ID_NETWORKADDRESSDATATYPE = 15502;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS = 15503;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15504;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15505;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15506;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15507;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15508;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION =
    15509;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE = 15510;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS = 15511;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD =
    15512;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_INPUTARGUMENTS =
    15513;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_ADDEXTENSIONFIELD_OUTPUTARGUMENTS =
    15514;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD =
    15515;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_EXTENSIONFIELDS_REMOVEEXTENSIONFIELD_INPUTARGUMENTS =
    15516;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_MODIFYFIELDSELECTION_OUTPUTARGUMENTS =
    15517;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPEMODIFYFIELDSELECTIONMETHODTYPE_OUTPUTARGUMENTS =
    15518;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT =
    15519;

const int UA_NS0ID_READERGROUPDATATYPE = 15520;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE = 15521;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION =
    15522;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT =
    15523;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15524;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15525;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15526;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTSEXCLUDE = 15527;

const int UA_NS0ID_ENDPOINTTYPE = 15528;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTXML = 15529;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE = 15530;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTXML = 15531;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 15532;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE =
    15533;

const int UA_NS0ID_DATATYPESCHEMAHEADER = 15534;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE = 15535;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTID = 15536;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_EVENTTYPE = 15537;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENODE = 15538;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SOURCENAME = 15539;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_TIME = 15540;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_RECEIVETIME = 15541;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_LOCALTIME = 15542;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_MESSAGE = 15543;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_SEVERITY = 15544;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_CONNECTIONID = 15545;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_GROUPID = 15546;

const int UA_NS0ID_PUBSUBSTATUSEVENTTYPE_STATE = 15547;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE = 15548;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTID = 15549;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_EVENTTYPE = 15550;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENODE = 15551;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SOURCENAME = 15552;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_TIME = 15553;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_RECEIVETIME = 15554;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_LOCALTIME = 15555;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MESSAGE = 15556;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_SEVERITY = 15557;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_CONNECTIONID = 15558;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_GROUPID = 15559;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_STATE = 15560;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_ACTUAL = 15561;

const int UA_NS0ID_PUBSUBTRANSPORTLIMITSEXCEEDEVENTTYPE_MAXIMUM = 15562;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE = 15563;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTID = 15564;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_EVENTTYPE = 15565;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENODE = 15566;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SOURCENAME = 15567;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_TIME = 15568;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_RECEIVETIME = 15569;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_LOCALTIME = 15570;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_MESSAGE = 15571;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_SEVERITY = 15572;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_CONNECTIONID = 15573;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_GROUPID = 15574;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_STATE = 15575;

const int UA_NS0ID_PUBSUBCOMMUNICATIONFAILUREEVENTTYPE_ERROR = 15576;

const int UA_NS0ID_DATASETFIELDFLAGS_OPTIONSETVALUES = 15577;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE = 15578;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    15579;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE = 15580;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE = 15581;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE = 15582;

const int UA_NS0ID_DATASETFIELDCONTENTMASK = 15583;

const int UA_NS0ID_DATASETFIELDCONTENTMASK_OPTIONSETVALUES = 15584;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION = 15585;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DATATYPEVERSION =
    15586;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SIMPLETYPEDESCRIPTION_DICTIONARYFRAGMENT =
    15587;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE = 15588;

const int UA_NS0ID_STRUCTUREDESCRIPTION_ENCODING_DEFAULTXML = 15589;

const int UA_NS0ID_ENUMDESCRIPTION_ENCODING_DEFAULTXML = 15590;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION = 15591;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION = 15592;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT =
    15593;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION = 15594;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15595;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT = 15596;

const int UA_NS0ID_DATASETWRITERDATATYPE = 15597;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE = 15598;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION = 15599;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DATATYPEVERSION =
    15600;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDESCRIPTION_DICTIONARYFRAGMENT =
    15601;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION = 15602;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DATATYPEVERSION = 15603;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDESCRIPTION_DICTIONARYFRAGMENT =
    15604;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE = 15605;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET = 15606;

const int UA_NS0ID_ROLESETTYPE = 15607;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER = 15608;

const int UA_NS0ID_PUBSUBGROUPDATATYPE = 15609;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DATATYPEVERSION = 15610;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE = 15611;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY = 15612;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDIDENTITY_INPUTARGUMENTS =
    15613;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY = 15614;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEIDENTITY_INPUTARGUMENTS =
    15615;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE = 15616;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE = 15617;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE = 15618;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UABINARYFILEDATATYPE_DICTIONARYFRAGMENT =
    15619;

const int UA_NS0ID_ROLETYPE = 15620;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE = 15621;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE = 15622;

const int UA_NS0ID_DATASETREADERDATATYPE = 15623;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY = 15624;

const int UA_NS0ID_ROLETYPE_ADDIDENTITY_INPUTARGUMENTS = 15625;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY = 15626;

const int UA_NS0ID_ROLETYPE_REMOVEIDENTITY_INPUTARGUMENTS = 15627;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE = 15628;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE = 15629;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE = 15630;

const int UA_NS0ID_TARGETVARIABLESDATATYPE = 15631;

const int UA_NS0ID_IDENTITYCRITERIATYPE = 15632;

const int UA_NS0ID_IDENTITYCRITERIATYPE_ENUMVALUES = 15633;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE = 15634;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE = 15635;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE = 15636;

const int UA_NS0ID_ADDIDENTITYMETHODTYPE_INPUTARGUMENTS = 15637;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE = 15638;

const int UA_NS0ID_REMOVEIDENTITYMETHODTYPE_INPUTARGUMENTS = 15639;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE = 15640;

const int UA_NS0ID_DATASETORDERINGTYPE_ENUMSTRINGS = 15641;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK = 15642;

const int UA_NS0ID_UADPNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15643;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS = 15644;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE = 15645;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK = 15646;

const int UA_NS0ID_UADPDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15647;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY = 15648;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDIDENTITY_INPUTARGUMENTS = 15649;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY = 15650;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEIDENTITY_INPUTARGUMENTS =
    15651;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE = 15652;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE = 15653;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK = 15654;

const int UA_NS0ID_JSONNETWORKMESSAGECONTENTMASK_OPTIONSETVALUES = 15655;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER = 15656;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE = 15657;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK = 15658;

const int UA_NS0ID_JSONDATASETMESSAGECONTENTMASK_OPTIONSETVALUES = 15659;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY = 15660;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDIDENTITY_INPUTARGUMENTS =
    15661;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY = 15662;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEIDENTITY_INPUTARGUMENTS =
    15663;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE = 15664;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE = 15665;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15666;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE = 15667;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER = 15668;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE = 15669;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE = 15670;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTBINARY = 15671;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY = 15672;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDIDENTITY_INPUTARGUMENTS = 15673;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY = 15674;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEIDENTITY_INPUTARGUMENTS = 15675;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTBINARY = 15676;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15677;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTBINARY =
    15678;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTBINARY = 15679;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR = 15680;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTBINARY = 15681;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTBINARY = 15682;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15683;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY = 15684;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDIDENTITY_INPUTARGUMENTS = 15685;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY = 15686;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEIDENTITY_INPUTARGUMENTS = 15687;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15688;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTBINARY = 15689;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15690;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15691;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR = 15692;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15693;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTBINARY = 15694;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15695;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY = 15696;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDIDENTITY_INPUTARGUMENTS = 15697;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY = 15698;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEIDENTITY_INPUTARGUMENTS =
    15699;

const int UA_NS0ID_SIMPLETYPEDESCRIPTION_ENCODING_DEFAULTJSON = 15700;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY = 15701;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15702;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTBINARY = 15703;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN = 15704;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15705;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY = 15706;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTBINARY = 15707;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY = 15708;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDIDENTITY_INPUTARGUMENTS =
    15709;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY = 15710;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEIDENTITY_INPUTARGUMENTS =
    15711;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTBINARY = 15712;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTBINARY =
    15713;

const int UA_NS0ID_UABINARYFILEDATATYPE_ENCODING_DEFAULTJSON = 15714;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15715;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN = 15716;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15717;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15718;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15719;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY = 15720;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDIDENTITY_INPUTARGUMENTS =
    15721;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY = 15722;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEIDENTITY_INPUTARGUMENTS =
    15723;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15724;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTBINARY =
    15725;

const int UA_NS0ID_BROKERCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    15726;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15727;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTXML = 15728;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15729;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE = 15730;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION =
    15731;

const int UA_NS0ID_OPCUA_XMLSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT =
    15732;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    15733;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE = 15734;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 15735;

const int UA_NS0ID_IDENTITYMAPPINGRULETYPE_ENCODING_DEFAULTBINARY = 15736;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 15737;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE = 15738;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DATATYPEVERSION =
    15739;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_IDENTITYMAPPINGRULETYPE_DICTIONARYFRAGMENT =
    15740;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER = 15741;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION =
    15742;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT =
    15743;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE = 15744;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLIENTPROCESSINGTIMEOUT = 15745;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD = 15746;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_INPUTARGUMENTS =
    15747;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORREAD_OUTPUTARGUMENTS =
    15748;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE = 15749;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_OUTPUTARGUMENTS =
    15750;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT = 15751;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_INPUTARGUMENTS =
    15752;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_CLOSEANDCOMMIT_OUTPUTARGUMENTS =
    15753;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER = 15754;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE =
    15755;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_ID =
    15756;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NAME =
    15757;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_NUMBER =
    15758;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    15759;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION =
    15760;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_ID =
    15761;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NAME =
    15762;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_NUMBER =
    15763;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_TRANSITIONTIME =
    15764;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    15765;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE = 15766;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION =
    15767;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    15768;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 15769;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION =
    15770;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT =
    15771;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 15772;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION =
    15773;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT =
    15774;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE = 15775;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION =
    15776;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT =
    15777;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE = 15778;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION =
    15779;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT =
    15780;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 15781;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    15782;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15783;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE = 15784;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15785;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15786;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE = 15787;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION =
    15788;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT =
    15789;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER = 15790;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_PUBLISHERID =
    15791;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI =
    15792;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 15793;

const int UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_RESET =
    15794;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE = 15795;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_INPUTARGUMENTS = 15796;

const int UA_NS0ID_GENERATEFILEFORREADMETHODTYPE_OUTPUTARGUMENTS = 15797;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE = 15798;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_OUTPUTARGUMENTS = 15799;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE = 15800;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_INPUTARGUMENTS = 15801;

const int UA_NS0ID_CLOSEANDCOMMITMETHODTYPE_OUTPUTARGUMENTS = 15802;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE = 15803;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE = 15804;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_ID = 15805;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NAME = 15806;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_NUMBER = 15807;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    15808;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION = 15809;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_ID = 15810;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NAME = 15811;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_NUMBER = 15812;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_TRANSITIONTIME =
    15813;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    15814;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE = 15815;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLE_STATENUMBER = 15816;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE = 15817;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARE_STATENUMBER = 15818;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER = 15819;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFER_STATENUMBER =
    15820;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE = 15821;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITE_STATENUMBER = 15822;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR = 15823;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERROR_STATENUMBER = 15824;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE = 15825;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOREADPREPARE_TRANSITIONNUMBER =
    15826;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER =
    15827;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOREADTRANSFER_TRANSITIONNUMBER =
    15828;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE = 15829;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOIDLE_TRANSITIONNUMBER =
    15830;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE = 15831;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_IDLETOAPPLYWRITE_TRANSITIONNUMBER =
    15832;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE = 15833;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOIDLE_TRANSITIONNUMBER =
    15834;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR = 15835;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READPREPARETOERROR_TRANSITIONNUMBER =
    15836;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR = 15837;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_READTRANSFERTOERROR_TRANSITIONNUMBER =
    15838;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR = 15839;

const int
    UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_APPLYWRITETOERROR_TRANSITIONNUMBER =
    15840;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE = 15841;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_ERRORTOIDLE_TRANSITIONNUMBER =
    15842;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_RESET = 15843;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS = 15844;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_STATE = 15845;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_ENABLE = 15846;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_STATUS_DISABLE = 15847;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS =
    15848;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    15849;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    15850;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS = 15851;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15852;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15853;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE = 15854;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15855;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15856;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE = 15857;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION =
    15858;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT =
    15859;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE = 15860;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    15861;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15862;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE =
    15863;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15864;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS = 15865;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE = 15866;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15867;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15868;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE = 15869;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15870;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15871;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE = 15872;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION =
    15873;

const int UA_NS0ID_OVERRIDEVALUEHANDLING = 15874;

const int UA_NS0ID_OVERRIDEVALUEHANDLING_ENUMSTRINGS = 15875;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT =
    15876;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE = 15877;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    15878;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15879;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE = 15880;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15881;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15882;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE = 15883;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION =
    15884;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    15885;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE = 15886;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION =
    15887;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT =
    15888;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 15889;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION =
    15890;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT =
    15891;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_STATE =
    15892;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_ENABLE =
    15893;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_STATUS_DISABLE =
    15894;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 15895;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15896;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15897;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 15898;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15899;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15900;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE = 15901;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTXML = 15902;

const int UA_NS0ID_SESSIONLESSINVOKEREQUESTTYPE_ENCODING_DEFAULTBINARY = 15903;

const int UA_NS0ID_DATASETFIELDFLAGS = 15904;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    15905;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE = 15906;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS = 15907;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_INPUTARGUMENTS = 15908;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYKEYS_OUTPUTARGUMENTS = 15909;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP = 15910;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_INPUTARGUMENTS = 15911;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_GETSECURITYGROUP_OUTPUTARGUMENTS =
    15912;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS = 15913;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP = 15914;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_INPUTARGUMENTS =
    15915;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_ADDSECURITYGROUP_OUTPUTARGUMENTS =
    15916;

const int UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP =
    15917;

const int
    UA_NS0ID_PUBSUBKEYSERVICETYPE_SECURITYGROUPS_REMOVESECURITYGROUP_INPUTARGUMENTS =
    15918;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 15919;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15920;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15921;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 15922;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    15923;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15924;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 15925;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYMODE = 15926;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYGROUPID = 15927;

const int UA_NS0ID_PUBSUBGROUPTYPE_SECURITYKEYSERVICES = 15928;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    15929;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15930;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 15931;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYMODE = 15932;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYGROUPID = 15933;

const int UA_NS0ID_DATASETREADERTYPE_SECURITYKEYSERVICES = 15934;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    15935;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    15936;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS =
    15937;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    15938;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    15939;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE =
    15940;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    15941;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15942;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE =
    15943;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    15944;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15945;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE =
    15946;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    15947;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    15948;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTXML = 15949;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTXML = 15950;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTXML = 15951;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTXML = 15952;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTXML = 15953;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTXML = 15954;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTXML = 15955;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15956;

const int UA_NS0ID_OPCUANAMESPACEMETADATA = 15957;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEURI = 15958;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEVERSION = 15959;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEPUBLICATIONDATE = 15960;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_ISNAMESPACESUBSET = 15961;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNODEIDTYPES = 15962;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICNUMERICNODEIDRANGE = 15963;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_STATICSTRINGNODEIDPATTERN = 15964;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE = 15965;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SIZE = 15966;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITABLE = 15967;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_USERWRITABLE = 15968;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPENCOUNT = 15969;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_MIMETYPE = 15970;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN = 15971;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_INPUTARGUMENTS =
    15972;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_OPEN_OUTPUTARGUMENTS =
    15973;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE = 15974;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_CLOSE_INPUTARGUMENTS =
    15975;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ = 15976;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_INPUTARGUMENTS =
    15977;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_READ_OUTPUTARGUMENTS =
    15978;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE = 15979;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_WRITE_INPUTARGUMENTS =
    15980;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION = 15981;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_INPUTARGUMENTS =
    15982;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_GETPOSITION_OUTPUTARGUMENTS =
    15983;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION = 15984;

const int
    UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_SETPOSITION_INPUTARGUMENTS =
    15985;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_NAMESPACEFILE_EXPORTNAMESPACE = 15986;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15987;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTXML = 15988;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    15989;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15990;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15991;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTXML = 15992;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15993;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    15994;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 15995;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 15996;

const int UA_NS0ID_ROLESETTYPE_ADDROLE = 15997;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_INPUTARGUMENTS = 15998;

const int UA_NS0ID_ROLESETTYPE_ADDROLE_OUTPUTARGUMENTS = 15999;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE = 16000;

const int UA_NS0ID_ROLESETTYPE_REMOVEROLE_INPUTARGUMENTS = 16001;

const int UA_NS0ID_ADDROLEMETHODTYPE = 16002;

const int UA_NS0ID_ADDROLEMETHODTYPE_INPUTARGUMENTS = 16003;

const int UA_NS0ID_ADDROLEMETHODTYPE_OUTPUTARGUMENTS = 16004;

const int UA_NS0ID_REMOVEROLEMETHODTYPE = 16005;

const int UA_NS0ID_REMOVEROLEMETHODTYPE_INPUTARGUMENTS = 16006;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTXML = 16007;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML = 16008;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16009;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTXML = 16010;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTXML = 16011;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTXML = 16012;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    16013;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16014;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16015;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16016;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16017;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16018;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTXML = 16019;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    16020;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16021;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16022;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    16023;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE = 16024;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DATATYPEVERSION = 16025;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENDPOINTTYPE_DICTIONARYFRAGMENT = 16026;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER = 16027;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DATATYPEVERSION = 16028;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPESCHEMAHEADER_DICTIONARYFRAGMENT =
    16029;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE = 16030;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DATATYPEVERSION =
    16031;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    16032;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE = 16033;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DATATYPEVERSION =
    16034;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATASETSOURCEDATATYPE_DICTIONARYFRAGMENT =
    16035;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER = 16036;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE = 16037;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DATATYPEVERSION =
    16038;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDDATAITEMSDATATYPE_DICTIONARYFRAGMENT =
    16039;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE = 16040;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY = 16041;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDIDENTITY_INPUTARGUMENTS = 16042;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY = 16043;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEIDENTITY_INPUTARGUMENTS = 16044;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DATATYPEVERSION =
    16045;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBLISHEDEVENTSDATATYPE_DICTIONARYFRAGMENT =
    16046;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE = 16047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DATATYPEVERSION =
    16048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERDATATYPE_DICTIONARYFRAGMENT =
    16049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE = 16050;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    16051;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE = 16053;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16054;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE = 16056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DATATYPEVERSION = 16057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBGROUPDATATYPE_DICTIONARYFRAGMENT =
    16058;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    16059;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    16060;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    16061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE = 16062;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16063;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16064;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE = 16065;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16066;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16067;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE = 16068;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DATATYPEVERSION =
    16069;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONNECTIONDATATYPE_DICTIONARYFRAGMENT =
    16070;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE = 16071;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    16072;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_CONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16073;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    16074;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    16075;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    16076;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE = 16077;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16078;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16079;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE = 16080;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16081;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16082;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE = 16083;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DATATYPEVERSION =
    16084;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERDATATYPE_DICTIONARYFRAGMENT =
    16085;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE = 16086;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    16087;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16088;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE = 16089;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16090;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16091;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE = 16092;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DATATYPEVERSION =
    16093;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETDATATYPE_DICTIONARYFRAGMENT =
    16094;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE = 16095;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DATATYPEVERSION =
    16096;

const int UA_NS0ID_OPCUA_XMLSCHEMA_TARGETVARIABLESDATATYPE_DICTIONARYFRAGMENT =
    16097;

const int UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE = 16098;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DATATYPEVERSION =
    16099;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_SUBSCRIBEDDATASETMIRRORDATATYPE_DICTIONARYFRAGMENT =
    16100;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    16101;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    16102;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    16103;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE = 16104;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16105;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16106;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE = 16107;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16108;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16109;

const int UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE = 16110;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16111;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_UADPDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16112;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE = 16113;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DATATYPEVERSION =
    16114;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONWRITERGROUPMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16115;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE = 16116;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DATATYPEVERSION =
    16117;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETWRITERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16118;

const int UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE = 16119;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DATATYPEVERSION =
    16120;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_JSONDATASETREADERMESSAGEDATATYPE_DICTIONARYFRAGMENT =
    16121;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    16122;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    16123;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    16124;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE = 16125;

const int UA_NS0ID_ROLEPERMISSIONTYPE_ENCODING_DEFAULTXML = 16126;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE = 16127;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION = 16128;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT =
    16129;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    16130;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE = 16131;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DATATYPEVERSION =
    16132;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ROLEPERMISSIONTYPE_DICTIONARYFRAGMENT =
    16133;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTROLEPERMISSIONS = 16134;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTUSERROLEPERMISSIONS = 16135;

const int UA_NS0ID_OPCUANAMESPACEMETADATA_DEFAULTACCESSRESTRICTIONS = 16136;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTROLEPERMISSIONS = 16137;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTUSERROLEPERMISSIONS = 16138;

const int UA_NS0ID_NAMESPACEMETADATATYPE_DEFAULTACCESSRESTRICTIONS = 16139;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTROLEPERMISSIONS =
    16140;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTUSERROLEPERMISSIONS =
    16141;

const int
    UA_NS0ID_NAMESPACESTYPE_NAMESPACEIDENTIFIER_PLACEHOLDER_DEFAULTACCESSRESTRICTIONS =
    16142;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16143;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE = 16144;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DATATYPEVERSION =
    16145;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETWRITERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16146;

const int UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE = 16147;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DATATYPEVERSION =
    16148;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_BROKERDATASETREADERTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    16149;

const int UA_NS0ID_ENDPOINTTYPE_ENCODING_DEFAULTJSON = 16150;

const int UA_NS0ID_DATATYPESCHEMAHEADER_ENCODING_DEFAULTJSON = 16151;

const int UA_NS0ID_PUBLISHEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16152;

const int UA_NS0ID_PUBLISHEDDATASETSOURCEDATATYPE_ENCODING_DEFAULTJSON = 16153;

const int UA_NS0ID_PUBLISHEDDATAITEMSDATATYPE_ENCODING_DEFAULTJSON = 16154;

const int UA_NS0ID_PUBLISHEDEVENTSDATATYPE_ENCODING_DEFAULTJSON = 16155;

const int UA_NS0ID_DATASETWRITERDATATYPE_ENCODING_DEFAULTJSON = 16156;

const int UA_NS0ID_DATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16157;

const int UA_NS0ID_DATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16158;

const int UA_NS0ID_PUBSUBGROUPDATATYPE_ENCODING_DEFAULTJSON = 16159;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    16160;

const int UA_NS0ID_WRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16161;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_IDENTITIES = 16162;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_APPLICATIONS = 16163;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ENDPOINTS = 16164;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION = 16165;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDAPPLICATION_INPUTARGUMENTS =
    16166;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION = 16167;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16168;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT = 16169;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_ADDENDPOINT_INPUTARGUMENTS =
    16170;

const int UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT = 16171;

const int
    UA_NS0ID_ROLESETTYPE_ROLENAME_PLACEHOLDER_REMOVEENDPOINT_INPUTARGUMENTS =
    16172;

const int UA_NS0ID_ROLETYPE_IDENTITIES = 16173;

const int UA_NS0ID_ROLETYPE_APPLICATIONS = 16174;

const int UA_NS0ID_ROLETYPE_ENDPOINTS = 16175;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION = 16176;

const int UA_NS0ID_ROLETYPE_ADDAPPLICATION_INPUTARGUMENTS = 16177;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION = 16178;

const int UA_NS0ID_ROLETYPE_REMOVEAPPLICATION_INPUTARGUMENTS = 16179;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT = 16180;

const int UA_NS0ID_ROLETYPE_ADDENDPOINT_INPUTARGUMENTS = 16181;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT = 16182;

const int UA_NS0ID_ROLETYPE_REMOVEENDPOINT_INPUTARGUMENTS = 16183;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE = 16184;

const int UA_NS0ID_ADDAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16185;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE = 16186;

const int UA_NS0ID_REMOVEAPPLICATIONMETHODTYPE_INPUTARGUMENTS = 16187;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE = 16188;

const int UA_NS0ID_ADDENDPOINTMETHODTYPE_INPUTARGUMENTS = 16189;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE = 16190;

const int UA_NS0ID_REMOVEENDPOINTMETHODTYPE_INPUTARGUMENTS = 16191;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_IDENTITIES = 16192;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_APPLICATIONS = 16193;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ENDPOINTS = 16194;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION = 16195;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDAPPLICATION_INPUTARGUMENTS =
    16196;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION = 16197;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEAPPLICATION_INPUTARGUMENTS =
    16198;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT = 16199;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_ADDENDPOINT_INPUTARGUMENTS = 16200;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT = 16201;

const int UA_NS0ID_WELLKNOWNROLE_ANONYMOUS_REMOVEENDPOINT_INPUTARGUMENTS =
    16202;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_IDENTITIES = 16203;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_APPLICATIONS = 16204;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ENDPOINTS = 16205;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION = 16206;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDAPPLICATION_INPUTARGUMENTS =
    16207;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION = 16208;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16209;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT = 16210;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_ADDENDPOINT_INPUTARGUMENTS =
    16211;

const int UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT = 16212;

const int
    UA_NS0ID_WELLKNOWNROLE_AUTHENTICATEDUSER_REMOVEENDPOINT_INPUTARGUMENTS =
    16213;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_IDENTITIES = 16214;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_APPLICATIONS = 16215;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ENDPOINTS = 16216;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION = 16217;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDAPPLICATION_INPUTARGUMENTS = 16218;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION = 16219;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16220;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT = 16221;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_ADDENDPOINT_INPUTARGUMENTS = 16222;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT = 16223;

const int UA_NS0ID_WELLKNOWNROLE_OBSERVER_REMOVEENDPOINT_INPUTARGUMENTS = 16224;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_IDENTITIES = 16225;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_APPLICATIONS = 16226;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ENDPOINTS = 16227;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION = 16228;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDAPPLICATION_INPUTARGUMENTS = 16229;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION = 16230;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEAPPLICATION_INPUTARGUMENTS =
    16231;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT = 16232;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_ADDENDPOINT_INPUTARGUMENTS = 16233;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT = 16234;

const int UA_NS0ID_WELLKNOWNROLE_OPERATOR_REMOVEENDPOINT_INPUTARGUMENTS = 16235;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_IDENTITIES = 16236;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_APPLICATIONS = 16237;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ENDPOINTS = 16238;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION = 16239;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDAPPLICATION_INPUTARGUMENTS = 16240;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION = 16241;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEAPPLICATION_INPUTARGUMENTS =
    16242;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT = 16243;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_ADDENDPOINT_INPUTARGUMENTS = 16244;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT = 16245;

const int UA_NS0ID_WELLKNOWNROLE_ENGINEER_REMOVEENDPOINT_INPUTARGUMENTS = 16246;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_IDENTITIES = 16247;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_APPLICATIONS = 16248;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ENDPOINTS = 16249;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION = 16250;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDAPPLICATION_INPUTARGUMENTS =
    16251;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION = 16252;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEAPPLICATION_INPUTARGUMENTS =
    16253;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT = 16254;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_ADDENDPOINT_INPUTARGUMENTS = 16255;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT = 16256;

const int UA_NS0ID_WELLKNOWNROLE_SUPERVISOR_REMOVEENDPOINT_INPUTARGUMENTS =
    16257;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_IDENTITIES = 16258;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_APPLICATIONS = 16259;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ENDPOINTS = 16260;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION = 16261;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDAPPLICATION_INPUTARGUMENTS =
    16262;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION = 16263;

const int
    UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEAPPLICATION_INPUTARGUMENTS =
    16264;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT = 16265;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_ADDENDPOINT_INPUTARGUMENTS =
    16266;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT = 16267;

const int UA_NS0ID_WELLKNOWNROLE_SECURITYADMIN_REMOVEENDPOINT_INPUTARGUMENTS =
    16268;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_IDENTITIES = 16269;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_APPLICATIONS = 16270;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ENDPOINTS = 16271;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION = 16272;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDAPPLICATION_INPUTARGUMENTS =
    16273;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION = 16274;

const int
    UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEAPPLICATION_INPUTARGUMENTS =
    16275;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT = 16276;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_ADDENDPOINT_INPUTARGUMENTS =
    16277;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT = 16278;

const int UA_NS0ID_WELLKNOWNROLE_CONFIGUREADMIN_REMOVEENDPOINT_INPUTARGUMENTS =
    16279;

const int UA_NS0ID_WRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16280;

const int UA_NS0ID_PUBSUBCONNECTIONDATATYPE_ENCODING_DEFAULTJSON = 16281;

const int UA_NS0ID_CONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16282;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    16283;

const int UA_NS0ID_READERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16284;

const int UA_NS0ID_READERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16285;

const int UA_NS0ID_DATASETREADERDATATYPE_ENCODING_DEFAULTJSON = 16286;

const int UA_NS0ID_DATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON = 16287;

const int UA_NS0ID_DATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16288;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET = 16289;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE = 16290;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS =
    16291;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16292;

const int UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16293;

const int
    UA_NS0ID_SERVERTYPE_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16294;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET = 16295;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE = 16296;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_INPUTARGUMENTS =
    16297;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16298;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE = 16299;

const int UA_NS0ID_SERVERCAPABILITIESTYPE_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16300;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE = 16301;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_INPUTARGUMENTS =
    16302;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_ADDROLE_OUTPUTARGUMENTS =
    16303;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE = 16304;

const int UA_NS0ID_SERVER_SERVERCAPABILITIES_ROLESET_REMOVEROLE_INPUTARGUMENTS =
    16305;

const int UA_NS0ID_AUDIODATATYPE = 16307;

const int UA_NS0ID_SUBSCRIBEDDATASETDATATYPE_ENCODING_DEFAULTJSON = 16308;

const int UA_NS0ID_SELECTIONLISTTYPE = 16309;

const int UA_NS0ID_TARGETVARIABLESDATATYPE_ENCODING_DEFAULTJSON = 16310;

const int UA_NS0ID_SUBSCRIBEDDATASETMIRRORDATATYPE_ENCODING_DEFAULTJSON = 16311;

const int UA_NS0ID_SELECTIONLISTTYPE_RESTRICTTOLIST = 16312;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE = 16313;

const int UA_NS0ID_FILESYSTEM = 16314;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER = 16315;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY =
    16316;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_INPUTARGUMENTS =
    16317;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEDIRECTORY_OUTPUTARGUMENTS =
    16318;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE = 16319;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_INPUTARGUMENTS =
    16320;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_CREATEFILE_OUTPUTARGUMENTS =
    16321;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    16322;

const int UA_NS0ID_UADPWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16323;

const int UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY = 16324;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_INPUTARGUMENTS =
    16325;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_MOVEORCOPY_OUTPUTARGUMENTS =
    16326;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER = 16327;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SIZE = 16328;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITABLE = 16329;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_USERWRITABLE = 16330;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPENCOUNT = 16331;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_MIMETYPE = 16332;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN = 16333;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_INPUTARGUMENTS = 16334;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_OPEN_OUTPUTARGUMENTS = 16335;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE = 16336;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_CLOSE_INPUTARGUMENTS = 16337;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ = 16338;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_INPUTARGUMENTS = 16339;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_READ_OUTPUTARGUMENTS = 16340;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE = 16341;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_WRITE_INPUTARGUMENTS = 16342;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION = 16343;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_INPUTARGUMENTS =
    16344;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_GETPOSITION_OUTPUTARGUMENTS =
    16345;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION = 16346;

const int UA_NS0ID_FILESYSTEM_FILENAME_PLACEHOLDER_SETPOSITION_INPUTARGUMENTS =
    16347;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY = 16348;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_INPUTARGUMENTS = 16349;

const int UA_NS0ID_FILESYSTEM_CREATEDIRECTORY_OUTPUTARGUMENTS = 16350;

const int UA_NS0ID_FILESYSTEM_CREATEFILE = 16351;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_INPUTARGUMENTS = 16352;

const int UA_NS0ID_FILESYSTEM_CREATEFILE_OUTPUTARGUMENTS = 16353;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT = 16354;

const int UA_NS0ID_FILESYSTEM_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS = 16355;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY = 16356;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_INPUTARGUMENTS = 16357;

const int UA_NS0ID_FILESYSTEM_MOVEORCOPY_OUTPUTARGUMENTS = 16358;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_GENERATEFILEFORWRITE_INPUTARGUMENTS =
    16359;

const int UA_NS0ID_GENERATEFILEFORWRITEMETHODTYPE_INPUTARGUMENTS = 16360;

const int UA_NS0ID_HASALARMSUPPRESSIONGROUP = 16361;

const int UA_NS0ID_ALARMGROUPMEMBER = 16362;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSID = 16363;

const int UA_NS0ID_CONDITIONTYPE_CONDITIONSUBCLASSNAME = 16364;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSID = 16365;

const int UA_NS0ID_DIALOGCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16366;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSID = 16367;

const int UA_NS0ID_ACKNOWLEDGEABLECONDITIONTYPE_CONDITIONSUBCLASSNAME = 16368;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSID = 16369;

const int UA_NS0ID_ALARMCONDITIONTYPE_CONDITIONSUBCLASSNAME = 16370;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE = 16371;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_ID = 16372;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NAME = 16373;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_NUMBER = 16374;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16375;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16376;

const int
    UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16377;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_TRUESTATE = 16378;

const int UA_NS0ID_ALARMCONDITIONTYPE_OUTOFSERVICESTATE_FALSESTATE = 16379;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE = 16380;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_ID = 16381;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NAME = 16382;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_NUMBER = 16383;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16384;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRANSITIONTIME = 16385;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16386;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_TRUESTATE = 16387;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCESTATE_FALSESTATE = 16388;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLEENABLED = 16389;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND = 16390;

const int UA_NS0ID_UADPDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16391;

const int UA_NS0ID_UADPDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16392;

const int UA_NS0ID_JSONWRITERGROUPMESSAGEDATATYPE_ENCODING_DEFAULTJSON = 16393;

const int UA_NS0ID_JSONDATASETWRITERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16394;

const int UA_NS0ID_ALARMCONDITIONTYPE_ONDELAY = 16395;

const int UA_NS0ID_ALARMCONDITIONTYPE_OFFDELAY = 16396;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUPFLAG = 16397;

const int UA_NS0ID_ALARMCONDITIONTYPE_FIRSTINGROUP = 16398;

const int UA_NS0ID_ALARMCONDITIONTYPE_ALARMGROUP_PLACEHOLDER = 16399;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMTIME = 16400;

const int UA_NS0ID_ALARMCONDITIONTYPE_REALARMREPEATCOUNT = 16401;

const int UA_NS0ID_ALARMCONDITIONTYPE_SILENCE = 16402;

const int UA_NS0ID_ALARMCONDITIONTYPE_SUPPRESS = 16403;

const int UA_NS0ID_JSONDATASETREADERMESSAGEDATATYPE_ENCODING_DEFAULTJSON =
    16404;

const int UA_NS0ID_ALARMGROUPTYPE = 16405;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER = 16406;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTID =
    16407;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_EVENTTYPE =
    16408;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENODE =
    16409;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SOURCENAME =
    16410;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_TIME =
    16411;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RECEIVETIME =
    16412;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LOCALTIME =
    16413;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MESSAGE =
    16414;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SEVERITY =
    16415;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSID =
    16416;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONCLASSNAME =
    16417;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSID =
    16418;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONSUBCLASSNAME =
    16419;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONDITIONNAME =
    16420;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_BRANCHID =
    16421;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RETAIN =
    16422;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE =
    16423;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_ID =
    16424;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NAME =
    16425;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_NUMBER =
    16426;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    16427;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRANSITIONTIME =
    16428;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    16429;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_TRUESTATE =
    16430;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLEDSTATE_FALSESTATE =
    16431;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY =
    16432;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_QUALITY_SOURCETIMESTAMP =
    16433;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY =
    16434;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LASTSEVERITY_SOURCETIMESTAMP =
    16435;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT =
    16436;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_COMMENT_SOURCETIMESTAMP =
    16437;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CLIENTUSERID =
    16438;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_DISABLE =
    16439;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ENABLE =
    16440;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT =
    16441;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ADDCOMMENT_INPUTARGUMENTS =
    16442;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE =
    16443;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_ID =
    16444;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NAME =
    16445;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_NUMBER =
    16446;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    16447;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRANSITIONTIME =
    16448;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    16449;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_TRUESTATE =
    16450;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKEDSTATE_FALSESTATE =
    16451;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE =
    16452;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_ID =
    16453;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NAME =
    16454;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_NUMBER =
    16455;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    16456;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRANSITIONTIME =
    16457;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    16458;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_TRUESTATE =
    16459;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRMEDSTATE_FALSESTATE =
    16460;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE =
    16461;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACKNOWLEDGE_INPUTARGUMENTS =
    16462;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM =
    16463;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_CONFIRM_INPUTARGUMENTS =
    16464;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE =
    16465;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_ID =
    16466;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NAME =
    16467;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_NUMBER =
    16468;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    16469;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRANSITIONTIME =
    16470;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    16471;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_TRUESTATE =
    16472;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ACTIVESTATE_FALSESTATE =
    16473;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_INPUTNODE =
    16474;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE =
    16475;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_ID =
    16476;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NAME =
    16477;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_NUMBER =
    16478;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    16479;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRANSITIONTIME =
    16480;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    16481;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_TRUESTATE =
    16482;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDSTATE_FALSESTATE =
    16483;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE =
    16484;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_ID =
    16485;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NAME =
    16486;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_NUMBER =
    16487;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16488;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRANSITIONTIME =
    16489;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16490;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_TRUESTATE =
    16491;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OUTOFSERVICESTATE_FALSESTATE =
    16492;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE =
    16493;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_ID =
    16494;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NAME =
    16495;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_NUMBER =
    16496;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16497;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRANSITIONTIME =
    16498;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16499;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_TRUESTATE =
    16500;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCESTATE_FALSESTATE =
    16501;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE =
    16502;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE =
    16503;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_ID =
    16504;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NAME =
    16505;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    16506;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    16507;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION =
    16508;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_ID =
    16509;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NAME =
    16510;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    16511;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    16512;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    16513;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVETIME =
    16514;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_UNSHELVE =
    16515;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_ONESHOTSHELVE =
    16516;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE =
    16517;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    16518;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESSEDORSHELVED =
    16519;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_MAXTIMESHELVED =
    16520;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLEENABLED =
    16521;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND =
    16522;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    16523;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16524;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16525;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    16526;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_ONDELAY =
    16527;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_OFFDELAY =
    16528;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUPFLAG =
    16529;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_FIRSTINGROUP =
    16530;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMTIME =
    16531;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REALARMREPEATCOUNT =
    16532;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SILENCE =
    16533;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SUPPRESS =
    16534;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP =
    16535;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSID = 16536;

const int UA_NS0ID_LIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16537;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE = 16538;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16539;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16540;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16541;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16542;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16543;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16544;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16545;

const int UA_NS0ID_LIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16546;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE = 16547;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_ID = 16548;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NAME = 16549;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_NUMBER = 16550;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16551;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16552;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 16553;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16554;

const int UA_NS0ID_LIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16555;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLEENABLED = 16556;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND = 16557;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS =
    16558;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS =
    16559;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP =
    16560;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS =
    16561;

const int UA_NS0ID_LIMITALARMTYPE_ONDELAY = 16562;

const int UA_NS0ID_LIMITALARMTYPE_OFFDELAY = 16563;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUPFLAG = 16564;

const int UA_NS0ID_LIMITALARMTYPE_FIRSTINGROUP = 16565;

const int UA_NS0ID_LIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16566;

const int UA_NS0ID_LIMITALARMTYPE_REALARMTIME = 16567;

const int UA_NS0ID_LIMITALARMTYPE_REALARMREPEATCOUNT = 16568;

const int UA_NS0ID_LIMITALARMTYPE_SILENCE = 16569;

const int UA_NS0ID_LIMITALARMTYPE_SUPPRESS = 16570;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS =
    16571;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16572;

const int UA_NS0ID_LIMITALARMTYPE_BASEHIGHLIMIT = 16573;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLIMIT = 16574;

const int UA_NS0ID_LIMITALARMTYPE_BASELOWLOWLIMIT = 16575;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16576;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16577;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16578;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16579;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16580;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16581;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16582;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16583;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16584;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16585;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16586;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16587;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16588;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16589;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16590;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16591;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16592;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16593;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16594;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16595;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16596;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16597;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION = 16598;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_INPUTARGUMENTS = 16599;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_ADDCONNECTION_OUTPUTARGUMENTS = 16600;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE =
    16601;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ONDELAY = 16602;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_OFFDELAY = 16603;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16604;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16605;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16606;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMTIME = 16607;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16608;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SILENCE = 16609;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SUPPRESS = 16610;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16611;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16612;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16613;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16614;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16615;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSID = 16616;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_CONDITIONSUBCLASSNAME = 16617;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE = 16618;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_ID = 16619;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NAME = 16620;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16621;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16622;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16623;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16624;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16625;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16626;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE = 16627;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_ID = 16628;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NAME = 16629;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_NUMBER = 16630;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16631;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16632;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16633;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_TRUESTATE = 16634;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCESTATE_FALSESTATE = 16635;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLEENABLED = 16636;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND = 16637;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16638;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE =
    16639;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16640;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16641;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ONDELAY = 16642;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_OFFDELAY = 16643;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUPFLAG = 16644;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_FIRSTINGROUP = 16645;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_ALARMGROUP_PLACEHOLDER = 16646;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMTIME = 16647;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REALARMREPEATCOUNT = 16648;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SILENCE = 16649;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SUPPRESS = 16650;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER =
    16651;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHHIGHLIMIT = 16652;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASEHIGHLIMIT = 16653;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLIMIT = 16654;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_BASELOWLOWLIMIT = 16655;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16656;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16657;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16658;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16659;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16660;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16661;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16662;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16663;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16664;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16665;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16666;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16667;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16668;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16669;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16670;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16671;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16672;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16674;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16675;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16676;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16677;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS =
    16678;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    16679;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER =
    16680;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    16681;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ONDELAY = 16682;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_OFFDELAY = 16683;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16684;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16685;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16686;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMTIME = 16687;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16688;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SILENCE = 16689;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SUPPRESS = 16690;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE = 16691;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16692;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16693;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16694;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16695;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSID = 16696;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_CONDITIONSUBCLASSNAME = 16697;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE = 16698;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_ID = 16699;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NAME = 16700;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16701;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16702;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16703;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16704;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16705;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16706;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE = 16707;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_ID = 16708;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NAME = 16709;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_NUMBER = 16710;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16711;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16712;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16713;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_TRUESTATE = 16714;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCESTATE_FALSESTATE = 16715;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLEENABLED = 16716;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND = 16717;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_INPUTARGUMENTS = 16718;

const int UA_NS0ID_ADDCONNECTIONMETHODTYPE_OUTPUTARGUMENTS = 16719;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16720;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16721;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ONDELAY = 16722;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_OFFDELAY = 16723;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUPFLAG = 16724;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_FIRSTINGROUP = 16725;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_ALARMGROUP_PLACEHOLDER = 16726;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMTIME = 16727;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REALARMREPEATCOUNT = 16728;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SILENCE = 16729;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SUPPRESS = 16730;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16731;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHHIGHLIMIT = 16732;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASEHIGHLIMIT = 16733;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLIMIT = 16734;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_BASELOWLOWLIMIT = 16735;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16736;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16737;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16738;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16739;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME =
    16740;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16741;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16742;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16743;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16744;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16745;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16746;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16747;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16748;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16749;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16750;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16751;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16752;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16753;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE =
    16754;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE =
    16755;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16756;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16757;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16758;

const int UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETCLASSID = 16759;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16760;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16761;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16762;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16763;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16764;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16765;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16766;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16767;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16768;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16769;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16770;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16771;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16772;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16773;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16774;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16775;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16776;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSID = 16777;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_CONDITIONSUBCLASSNAME = 16778;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE = 16779;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_ID = 16780;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NAME = 16781;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16782;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16783;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16784;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16785;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16786;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16787;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE = 16788;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_ID = 16789;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NAME = 16790;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_NUMBER = 16791;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16792;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16793;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16794;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_TRUESTATE = 16795;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCESTATE_FALSESTATE = 16796;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLEENABLED = 16797;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND = 16798;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16799;

const int UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETCLASSID = 16800;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    16801;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    16802;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ONDELAY = 16803;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_OFFDELAY = 16804;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUPFLAG = 16805;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_FIRSTINGROUP = 16806;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_ALARMGROUP_PLACEHOLDER = 16807;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMTIME = 16808;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REALARMREPEATCOUNT = 16809;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SILENCE = 16810;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SUPPRESS = 16811;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    16812;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHHIGHLIMIT = 16813;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASEHIGHLIMIT = 16814;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLIMIT = 16815;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASELOWLOWLIMIT = 16816;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_BASESETPOINTNODE = 16817;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID =
    16818;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME =
    16819;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16820;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID =
    16821;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME =
    16822;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16823;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16824;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16825;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16826;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16827;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16828;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16829;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16830;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16831;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER =
    16832;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16833;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16834;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16835;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE =
    16836;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE =
    16837;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16838;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16839;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    16840;

const int UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETCLASSID = 16841;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE =
    16842;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16843;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16844;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16845;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16846;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16847;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16848;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16849;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16850;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16851;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16852;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16853;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16854;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16855;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16856;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16857;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16858;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSID = 16859;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_CONDITIONSUBCLASSNAME = 16860;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE = 16861;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_ID = 16862;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NAME =
    16863;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    16864;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16865;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16866;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16867;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    16868;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16869;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE = 16870;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_ID = 16871;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NAME = 16872;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_NUMBER = 16873;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16874;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    16875;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16876;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_TRUESTATE =
    16877;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCESTATE_FALSESTATE =
    16878;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLEENABLED = 16879;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND = 16880;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE =
    16881;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16882;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16883;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER =
    16884;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ONDELAY = 16885;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_OFFDELAY = 16886;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUPFLAG = 16887;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_FIRSTINGROUP = 16888;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ALARMGROUP_PLACEHOLDER =
    16889;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMTIME = 16890;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REALARMREPEATCOUNT = 16891;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SILENCE = 16892;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SUPPRESS = 16893;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_INPUTARGUMENTS =
    16894;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHHIGHLIMIT = 16895;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASEHIGHLIMIT = 16896;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLIMIT = 16897;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_BASELOWLOWLIMIT = 16898;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_ENGINEERINGUNITS = 16899;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSID = 16900;

const int UA_NS0ID_DISCRETEALARMTYPE_CONDITIONSUBCLASSNAME = 16901;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE = 16902;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_ID = 16903;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NAME = 16904;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16905;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16906;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16907;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16908;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16909;

const int UA_NS0ID_DISCRETEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16910;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE = 16911;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_ID = 16912;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NAME = 16913;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_NUMBER = 16914;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16915;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16916;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16917;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_TRUESTATE = 16918;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCESTATE_FALSESTATE = 16919;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLEENABLED = 16920;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND = 16921;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    16922;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER =
    16923;

const int
    UA_NS0ID_DATASETFOLDERTYPE_DATASETFOLDERNAME_PLACEHOLDER_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    16924;

const int
    UA_NS0ID_DATASETFOLDERTYPE_PUBLISHEDDATASETNAME_PLACEHOLDER_DATASETCLASSID =
    16925;

const int UA_NS0ID_DISCRETEALARMTYPE_ONDELAY = 16926;

const int UA_NS0ID_DISCRETEALARMTYPE_OFFDELAY = 16927;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUPFLAG = 16928;

const int UA_NS0ID_DISCRETEALARMTYPE_FIRSTINGROUP = 16929;

const int UA_NS0ID_DISCRETEALARMTYPE_ALARMGROUP_PLACEHOLDER = 16930;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMTIME = 16931;

const int UA_NS0ID_DISCRETEALARMTYPE_REALARMREPEATCOUNT = 16932;

const int UA_NS0ID_DISCRETEALARMTYPE_SILENCE = 16933;

const int UA_NS0ID_DISCRETEALARMTYPE_SUPPRESS = 16934;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE = 16935;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16936;

const int UA_NS0ID_OFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16937;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16938;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16939;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16940;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16941;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16942;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 16943;

const int
    UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16944;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16945;

const int UA_NS0ID_OFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 16946;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE = 16947;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_ID = 16948;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NAME = 16949;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16950;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 16951;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16952;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16953;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16954;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16955;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLEENABLED = 16956;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND = 16957;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    16958;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    16959;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE = 16960;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    16961;

const int UA_NS0ID_OFFNORMALALARMTYPE_ONDELAY = 16962;

const int UA_NS0ID_OFFNORMALALARMTYPE_OFFDELAY = 16963;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 16964;

const int UA_NS0ID_OFFNORMALALARMTYPE_FIRSTINGROUP = 16965;

const int UA_NS0ID_OFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 16966;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMTIME = 16967;

const int UA_NS0ID_OFFNORMALALARMTYPE_REALARMREPEATCOUNT = 16968;

const int UA_NS0ID_OFFNORMALALARMTYPE_SILENCE = 16969;

const int UA_NS0ID_OFFNORMALALARMTYPE_SUPPRESS = 16970;

const int
    UA_NS0ID_DATASETFOLDERTYPE_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    16971;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSID = 16972;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_CONDITIONSUBCLASSNAME = 16973;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE = 16974;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_ID = 16975;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NAME = 16976;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_NUMBER = 16977;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    16978;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    16979;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    16980;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 16981;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    16982;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE = 16983;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_ID = 16984;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NAME = 16985;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_NUMBER = 16986;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    16987;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRANSITIONTIME = 16988;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    16989;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_TRUESTATE = 16990;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCESTATE_FALSESTATE = 16991;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLEENABLED = 16992;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND = 16993;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER = 16994;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_INPUTARGUMENTS = 16995;

const int UA_NS0ID_DATASETFOLDERTYPE_ADDDATASETFOLDER_OUTPUTARGUMENTS = 16996;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER = 16997;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ONDELAY = 16998;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_OFFDELAY = 16999;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUPFLAG = 17000;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_FIRSTINGROUP = 17001;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_ALARMGROUP_PLACEHOLDER = 17002;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMTIME = 17003;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REALARMREPEATCOUNT = 17004;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SILENCE = 17005;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SUPPRESS = 17006;

const int UA_NS0ID_DATASETFOLDERTYPE_REMOVEDATASETFOLDER_INPUTARGUMENTS = 17007;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSID = 17008;

const int UA_NS0ID_TRIPALARMTYPE_CONDITIONSUBCLASSNAME = 17009;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE = 17010;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_ID = 17011;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NAME = 17012;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17013;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME = 17014;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME = 17015;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17016;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17017;

const int UA_NS0ID_TRIPALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17018;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE = 17019;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_ID = 17020;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NAME = 17021;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_NUMBER = 17022;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME = 17023;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17024;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME = 17025;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_TRUESTATE = 17026;

const int UA_NS0ID_TRIPALARMTYPE_SILENCESTATE_FALSESTATE = 17027;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLEENABLED = 17028;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND = 17029;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE = 17030;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_INPUTARGUMENTS =
    17031;

const int UA_NS0ID_ADDPUBLISHEDDATAITEMSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS =
    17032;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE = 17033;

const int UA_NS0ID_TRIPALARMTYPE_ONDELAY = 17034;

const int UA_NS0ID_TRIPALARMTYPE_OFFDELAY = 17035;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUPFLAG = 17036;

const int UA_NS0ID_TRIPALARMTYPE_FIRSTINGROUP = 17037;

const int UA_NS0ID_TRIPALARMTYPE_ALARMGROUP_PLACEHOLDER = 17038;

const int UA_NS0ID_TRIPALARMTYPE_REALARMTIME = 17039;

const int UA_NS0ID_TRIPALARMTYPE_REALARMREPEATCOUNT = 17040;

const int UA_NS0ID_TRIPALARMTYPE_SILENCE = 17041;

const int UA_NS0ID_TRIPALARMTYPE_SUPPRESS = 17042;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_INPUTARGUMENTS = 17043;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSID = 17044;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_CONDITIONSUBCLASSNAME = 17045;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE = 17046;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_ID = 17047;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NAME =
    17048;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    17049;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    17050;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    17051;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17052;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    17053;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    17054;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE = 17055;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_ID = 17056;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NAME = 17057;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_NUMBER = 17058;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    17059;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    17060;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    17061;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_TRUESTATE =
    17062;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCESTATE_FALSESTATE =
    17063;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLEENABLED = 17064;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND = 17065;

const int UA_NS0ID_ADDPUBLISHEDEVENTSTEMPLATEMETHODTYPE_OUTPUTARGUMENTS = 17066;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE = 17067;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17068;

const int UA_NS0ID_ADDDATASETFOLDERMETHODTYPE_OUTPUTARGUMENTS = 17069;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ONDELAY = 17070;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_OFFDELAY = 17071;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUPFLAG = 17072;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_FIRSTINGROUP = 17073;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_ALARMGROUP_PLACEHOLDER =
    17074;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMTIME = 17075;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REALARMREPEATCOUNT = 17076;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SILENCE = 17077;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SUPPRESS = 17078;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE = 17079;

const int UA_NS0ID_DISCREPANCYALARMTYPE = 17080;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTID = 17081;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EVENTTYPE = 17082;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENODE = 17083;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SOURCENAME = 17084;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TIME = 17085;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RECEIVETIME = 17086;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LOCALTIME = 17087;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MESSAGE = 17088;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SEVERITY = 17089;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSID = 17090;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONCLASSNAME = 17091;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSID = 17092;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONSUBCLASSNAME = 17093;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONNAME = 17094;

const int UA_NS0ID_DISCREPANCYALARMTYPE_BRANCHID = 17095;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RETAIN = 17096;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE = 17097;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_ID = 17098;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NAME = 17099;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_NUMBER = 17100;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    17101;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRANSITIONTIME = 17102;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    17103;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_TRUESTATE = 17104;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLEDSTATE_FALSESTATE = 17105;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY = 17106;

const int UA_NS0ID_DISCREPANCYALARMTYPE_QUALITY_SOURCETIMESTAMP = 17107;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY = 17108;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP = 17109;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT = 17110;

const int UA_NS0ID_DISCREPANCYALARMTYPE_COMMENT_SOURCETIMESTAMP = 17111;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CLIENTUSERID = 17112;

const int UA_NS0ID_DISCREPANCYALARMTYPE_DISABLE = 17113;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ENABLE = 17114;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT = 17115;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 17116;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH = 17117;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS = 17118;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2 = 17119;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    17120;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE = 17121;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_ID = 17122;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NAME = 17123;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_NUMBER = 17124;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME = 17125;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 17126;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    17127;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_TRUESTATE = 17128;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKEDSTATE_FALSESTATE = 17129;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE = 17130;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_ID = 17131;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NAME = 17132;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_NUMBER = 17133;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    17134;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME = 17135;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    17136;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 17137;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 17138;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE = 17139;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 17140;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM = 17141;

const int UA_NS0ID_DISCREPANCYALARMTYPE_CONFIRM_INPUTARGUMENTS = 17142;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE = 17143;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_ID = 17144;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NAME = 17145;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_NUMBER = 17146;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    17147;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 17148;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    17149;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_TRUESTATE = 17150;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ACTIVESTATE_FALSESTATE = 17151;

const int UA_NS0ID_DISCREPANCYALARMTYPE_INPUTNODE = 17152;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE = 17153;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_ID = 17154;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NAME = 17155;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_NUMBER = 17156;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    17157;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME = 17158;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    17159;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 17160;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 17161;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE = 17162;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_ID = 17163;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NAME = 17164;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_NUMBER = 17165;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    17166;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    17167;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    17168;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_TRUESTATE = 17169;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OUTOFSERVICESTATE_FALSESTATE = 17170;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE = 17171;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_ID = 17172;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NAME = 17173;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_NUMBER = 17174;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    17175;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRANSITIONTIME = 17176;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    17177;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_TRUESTATE = 17178;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCESTATE_FALSESTATE = 17179;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE = 17180;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 17181;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID = 17182;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME = 17183;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    17184;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    17185;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION = 17186;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID = 17187;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    17188;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    17189;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    17190;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    17191;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 17192;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_UNSHELVE = 17193;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE = 17194;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 17195;

const int
    UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    17196;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESSEDORSHELVED = 17197;

const int UA_NS0ID_DISCREPANCYALARMTYPE_MAXTIMESHELVED = 17198;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLEENABLED = 17199;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND = 17200;

const int UA_NS0ID_REMOVEDATASETFOLDERMETHODTYPE_INPUTARGUMENTS = 17201;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE = 17202;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTSETTINGS = 17203;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE =
    17204;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ONDELAY = 17205;

const int UA_NS0ID_DISCREPANCYALARMTYPE_OFFDELAY = 17206;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUPFLAG = 17207;

const int UA_NS0ID_DISCREPANCYALARMTYPE_FIRSTINGROUP = 17208;

const int UA_NS0ID_DISCREPANCYALARMTYPE_ALARMGROUP_PLACEHOLDER = 17209;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMTIME = 17210;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REALARMREPEATCOUNT = 17211;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SILENCE = 17212;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SUPPRESS = 17213;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_WRITERGROUPID =
    17214;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TARGETVALUENODE = 17215;

const int UA_NS0ID_DISCREPANCYALARMTYPE_EXPECTEDTIME = 17216;

const int UA_NS0ID_DISCREPANCYALARMTYPE_TOLERANCE = 17217;

const int UA_NS0ID_SAFETYCONDITIONCLASSTYPE = 17218;

const int UA_NS0ID_HIGHLYMANAGEDALARMCONDITIONCLASSTYPE = 17219;

const int UA_NS0ID_TRAININGCONDITIONCLASSTYPE = 17220;

const int UA_NS0ID_TESTINGCONDITIONSUBCLASSTYPE = 17221;

const int UA_NS0ID_AUDITCONDITIONCOMMENTEVENTTYPE_CONDITIONEVENTID = 17222;

const int UA_NS0ID_AUDITCONDITIONACKNOWLEDGEEVENTTYPE_CONDITIONEVENTID = 17223;

const int UA_NS0ID_AUDITCONDITIONCONFIRMEVENTTYPE_CONDITIONEVENTID = 17224;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE = 17225;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTID = 17226;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_EVENTTYPE = 17227;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENODE = 17228;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SOURCENAME = 17229;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_TIME = 17230;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_RECEIVETIME = 17231;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_LOCALTIME = 17232;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_MESSAGE = 17233;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SEVERITY = 17234;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_ACTIONTIMESTAMP = 17235;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_STATUS = 17236;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_SERVERID = 17237;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTAUDITENTRYID =
    17238;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_CLIENTUSERID = 17239;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_METHODID = 17240;

const int UA_NS0ID_AUDITCONDITIONSUPPRESSIONEVENTTYPE_INPUTARGUMENTS = 17241;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE = 17242;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTID = 17243;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_EVENTTYPE = 17244;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENODE = 17245;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SOURCENAME = 17246;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_TIME = 17247;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_RECEIVETIME = 17248;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_LOCALTIME = 17249;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_MESSAGE = 17250;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SEVERITY = 17251;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_ACTIONTIMESTAMP = 17252;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_STATUS = 17253;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_SERVERID = 17254;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTAUDITENTRYID = 17255;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_CLIENTUSERID = 17256;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_METHODID = 17257;

const int UA_NS0ID_AUDITCONDITIONSILENCEEVENTTYPE_INPUTARGUMENTS = 17258;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE = 17259;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTID = 17260;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_EVENTTYPE = 17261;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENODE = 17262;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SOURCENAME = 17263;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_TIME = 17264;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_RECEIVETIME = 17265;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_LOCALTIME = 17266;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_MESSAGE = 17267;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SEVERITY = 17268;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_ACTIONTIMESTAMP = 17269;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_STATUS = 17270;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_SERVERID = 17271;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTAUDITENTRYID =
    17272;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_CLIENTUSERID = 17273;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_METHODID = 17274;

const int UA_NS0ID_AUDITCONDITIONOUTOFSERVICEEVENTTYPE_INPUTARGUMENTS = 17275;

const int UA_NS0ID_HASEFFECTDISABLE = 17276;

const int UA_NS0ID_ALARMRATEVARIABLETYPE = 17277;

const int UA_NS0ID_ALARMRATEVARIABLETYPE_RATE = 17278;

const int UA_NS0ID_ALARMMETRICSTYPE = 17279;

const int UA_NS0ID_ALARMMETRICSTYPE_ALARMCOUNT = 17280;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMACTIVESTATE = 17281;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMUNACK = 17282;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMREALARMCOUNT = 17283;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE = 17284;

const int UA_NS0ID_ALARMMETRICSTYPE_CURRENTALARMRATE_RATE = 17285;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE = 17286;

const int UA_NS0ID_ALARMMETRICSTYPE_MAXIMUMALARMRATE_RATE = 17287;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE = 17288;

const int UA_NS0ID_ALARMMETRICSTYPE_AVERAGEALARMRATE_RATE = 17289;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17290;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS =
    17291;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI =
    17292;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER =
    17293;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_INPUTARGUMENTS =
    17294;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    17295;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS = 17296;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SETSECURITYKEYS_INPUTARGUMENTS = 17297;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE = 17298;

const int UA_NS0ID_SETSECURITYKEYSMETHODTYPE_INPUTARGUMENTS = 17299;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17300;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_ADDDATASETWRITER_OUTPUTARGUMENTS =
    17301;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MAXNETWORKMESSAGESIZE =
    17302;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17303;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17304;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17305;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI = 17306;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17307;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_MESSAGESETTINGS =
    17308;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_RESTRICTTOLIST =
    17309;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER = 17310;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYMODE =
    17311;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    17312;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    17313;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS =
    17314;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_STATE =
    17315;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_ENABLE =
    17316;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_STATUS_DISABLE =
    17317;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PUBLISHINGINTERVAL =
    17318;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_KEEPALIVETIME =
    17319;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17320;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_PRIORITY =
    17321;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_LOCALEIDS =
    17322;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER =
    17323;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_REMOVEDATASETWRITER_INPUTARGUMENTS =
    17324;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER = 17325;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYMODE =
    17326;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYGROUPID =
    17327;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    17328;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS =
    17329;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_STATE =
    17330;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_ENABLE =
    17331;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_STATUS_DISABLE =
    17332;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER =
    17333;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_REMOVEDATASETREADER_INPUTARGUMENTS =
    17334;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17335;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17336;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17337;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17338;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17339;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17340;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17341;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17342;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17343;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17344;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17345;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17346;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17347;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17348;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17349;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17350;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17351;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    17352;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    17353;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    17354;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER =
    17355;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP =
    17356;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_INPUTARGUMENTS =
    17357;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDWRITERGROUP_OUTPUTARGUMENTS =
    17358;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP =
    17359;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_INPUTARGUMENTS =
    17360;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDREADERGROUP_OUTPUTARGUMENTS =
    17361;

const int UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP =
    17362;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_REMOVEGROUP_INPUTARGUMENTS =
    17363;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS = 17364;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SETSECURITYKEYS_INPUTARGUMENTS = 17365;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION = 17366;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_INPUTARGUMENTS = 17367;

const int UA_NS0ID_PUBLISHSUBSCRIBE_ADDCONNECTION_OUTPUTARGUMENTS = 17368;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION = 17369;

const int UA_NS0ID_PUBLISHSUBSCRIBE_REMOVECONNECTION_INPUTARGUMENTS = 17370;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS = 17371;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS =
    17372;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_INPUTARGUMENTS =
    17373;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMS_OUTPUTARGUMENTS =
    17374;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS =
    17375;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_INPUTARGUMENTS =
    17376;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTS_OUTPUTARGUMENTS =
    17377;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE =
    17378;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_INPUTARGUMENTS =
    17379;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDDATAITEMSTEMPLATE_OUTPUTARGUMENTS =
    17380;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE =
    17381;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_INPUTARGUMENTS =
    17382;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDPUBLISHEDEVENTSTEMPLATE_OUTPUTARGUMENTS =
    17383;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET =
    17384;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEPUBLISHEDDATASET_INPUTARGUMENTS =
    17385;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES = 17386;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_INPUTARGUMENTS =
    17387;

const int UA_NS0ID_DATASETREADERTYPE_CREATETARGETVARIABLES_OUTPUTARGUMENTS =
    17388;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR = 17389;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_INPUTARGUMENTS = 17390;

const int UA_NS0ID_DATASETREADERTYPE_CREATEDATASETMIRROR_OUTPUTARGUMENTS =
    17391;

const int UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE = 17392;

const int
    UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_INPUTARGUMENTS =
    17393;

const int
    UA_NS0ID_DATASETREADERTYPECREATETARGETVARIABLESMETHODTYPE_OUTPUTARGUMENTS =
    17394;

const int UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE = 17395;

const int
    UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_INPUTARGUMENTS =
    17396;

const int
    UA_NS0ID_DATASETREADERTYPECREATEDATASETMIRRORMETHODTYPE_OUTPUTARGUMENTS =
    17397;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER = 17398;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_INPUTARGUMENTS =
    17399;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_ADDDATASETREADER_OUTPUTARGUMENTS =
    17400;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_INPUTARGUMENTS =
    17401;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_ADDDATASETFOLDER_OUTPUTARGUMENTS =
    17402;

const int UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER =
    17403;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_PUBLISHEDDATASETS_REMOVEDATASETFOLDER_INPUTARGUMENTS =
    17404;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS = 17405;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_STATE = 17406;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_ENABLE = 17407;

const int UA_NS0ID_PUBLISHSUBSCRIBE_STATUS_DISABLE = 17408;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS = 17409;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17410;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION = 17411;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17412;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17413;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17414;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17415;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR = 17416;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17417;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17418;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17419;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17420;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_RESET = 17421;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_SUBERROR = 17422;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS = 17423;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR = 17424;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17425;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17426;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP = 17427;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_INPUTARGUMENTS = 17428;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17429;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17430;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17431;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17432;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17433;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17434;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17435;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17436;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17437;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17438;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17439;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17440;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17441;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17442;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17443;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17444;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17445;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17446;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17447;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17448;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17449;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17450;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17451;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17452;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17453;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17454;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17455;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDWRITERGROUP_OUTPUTARGUMENTS = 17456;

const int UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES = 17457;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    17458;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    17459;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    17460;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    17461;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    17462;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    17463;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    17464;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP = 17465;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    17466;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17467;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    17468;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE =
    17469;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    17470;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    17471;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    17472;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 17473;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DATATYPEVERSION =
    17474;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMCONNECTIONTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    17475;

const int UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    17476;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETOFFSET = 17477;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES =
    17478;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_SUPPORTEDTRANSPORTPROFILES = 17479;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_CONNECTIONPROPERTIES =
    17480;

const int UA_NS0ID_PUBLISHSUBSCRIBE_SUPPORTEDTRANSPORTPROFILES = 17481;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17482;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17483;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17484;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_CONNECTIONPROPERTIES = 17485;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES =
    17486;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_GROUPPROPERTIES =
    17487;

const int UA_NS0ID_PUBSUBGROUPTYPE_GROUPPROPERTIES = 17488;

const int UA_NS0ID_WRITERGROUPTYPE_GROUPPROPERTIES = 17489;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERPROPERTIES =
    17490;

const int UA_NS0ID_READERGROUPTYPE_GROUPPROPERTIES = 17491;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETREADERPROPERTIES =
    17492;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERPROPERTIES = 17493;

const int UA_NS0ID_DATASETREADERTYPE_DATASETREADERPROPERTIES = 17494;

const int UA_NS0ID_CREATECREDENTIALMETHODTYPE_OUTPUTARGUMENTS = 17495;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE = 17496;

const int UA_NS0ID_ANALOGUNITTYPE = 17497;

const int UA_NS0ID_ANALOGUNITTYPE_DEFINITION = 17498;

const int UA_NS0ID_ANALOGUNITTYPE_VALUEPRECISION = 17499;

const int UA_NS0ID_ANALOGUNITTYPE_INSTRUMENTRANGE = 17500;

const int UA_NS0ID_ANALOGUNITTYPE_EURANGE = 17501;

const int UA_NS0ID_ANALOGUNITTYPE_ENGINEERINGUNITS = 17502;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17503;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17504;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17505;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17506;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_INPUTARGUMENTS = 17507;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDREADERGROUP_OUTPUTARGUMENTS = 17508;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17509;

const int
    UA_NS0ID_PUBLISHSUBSCRIBE_CONNECTIONNAME_PLACEHOLDER_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17510;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER =
    17511;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_RESOURCEURI =
    17512;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_PROFILEURI =
    17513;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ENDPOINTURLS =
    17514;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICESTATUS =
    17515;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY =
    17516;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17517;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17518;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL =
    17519;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS =
    17520;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL =
    17521;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL =
    17522;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_INPUTARGUMENTS =
    17523;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONFOLDERTYPE_CREATECREDENTIAL_OUTPUTARGUMENTS =
    17524;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY =
    17525;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17526;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17527;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL = 17528;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_INPUTARGUMENTS =
    17529;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_CREATECREDENTIAL_OUTPUTARGUMENTS =
    17530;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE = 17531;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_INPUTARGUMENTS = 17532;

const int UA_NS0ID_GETENCRYPTINGKEYMETHODTYPE_OUTPUTARGUMENTS = 17533;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY = 17534;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_INPUTARGUMENTS =
    17535;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_GETENCRYPTINGKEY_OUTPUTARGUMENTS =
    17536;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTBINARY = 17537;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE = 17538;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION =
    17539;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT =
    17540;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTXML = 17541;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE = 17542;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DATATYPEVERSION =
    17543;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ADDITIONALPARAMETERSTYPE_DICTIONARYFRAGMENT =
    17544;

const int UA_NS0ID_RSAENCRYPTEDSECRET = 17545;

const int UA_NS0ID_ECCENCRYPTEDSECRET = 17546;

const int UA_NS0ID_ADDITIONALPARAMETERSTYPE_ENCODING_DEFAULTJSON = 17547;

const int UA_NS0ID_EPHEMERALKEYTYPE = 17548;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTBINARY = 17549;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE = 17550;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17551;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT =
    17552;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTXML = 17553;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE = 17554;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DATATYPEVERSION = 17555;

const int UA_NS0ID_OPCUA_XMLSCHEMA_EPHEMERALKEYTYPE_DICTIONARYFRAGMENT = 17556;

const int UA_NS0ID_EPHEMERALKEYTYPE_ENCODING_DEFAULTJSON = 17557;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_HEADERLAYOUTURI =
    17558;

const int UA_NS0ID_WRITERGROUPTYPE_HEADERLAYOUTURI = 17559;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    17560;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE = 17561;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_HEADERLAYOUTURI =
    17562;

const int UA_NS0ID_DATASETREADERTYPE_KEYFRAMECOUNT = 17563;

const int UA_NS0ID_DATASETREADERTYPE_HEADERLAYOUTURI = 17564;

const int UA_NS0ID_BASEANALOGTYPE_DEFINITION = 17565;

const int UA_NS0ID_BASEANALOGTYPE_VALUEPRECISION = 17566;

const int UA_NS0ID_BASEANALOGTYPE_INSTRUMENTRANGE = 17567;

const int UA_NS0ID_BASEANALOGTYPE_EURANGE = 17568;

const int UA_NS0ID_BASEANALOGTYPE_ENGINEERINGUNITS = 17569;

const int UA_NS0ID_ANALOGUNITRANGETYPE = 17570;

const int UA_NS0ID_ANALOGUNITRANGETYPE_DEFINITION = 17571;

const int UA_NS0ID_ANALOGUNITRANGETYPE_VALUEPRECISION = 17572;

const int UA_NS0ID_ANALOGUNITRANGETYPE_INSTRUMENTRANGE = 17573;

const int UA_NS0ID_ANALOGUNITRANGETYPE_EURANGE = 17574;

const int UA_NS0ID_ANALOGUNITRANGETYPE_ENGINEERINGUNITS = 17575;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONS =
    17576;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17577;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_ADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17578;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONS =
    17579;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17580;

const int
    UA_NS0ID_DATAGRAMCONNECTIONTRANSPORTTYPE_DISCOVERYADDRESS_NETWORKINTERFACE_RESTRICTTOLIST =
    17581;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONS = 17582;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17583;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE_RESTRICTTOLIST = 17584;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONS = 17585;

const int
    UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_SELECTIONDESCRIPTIONS =
    17586;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE_RESTRICTTOLIST =
    17587;

const int UA_NS0ID_INDEX = 17588;

const int UA_NS0ID_DICTIONARYENTRYTYPE = 17589;

const int UA_NS0ID_DICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17590;

const int UA_NS0ID_DICTIONARYFOLDERTYPE = 17591;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYFOLDERNAME_PLACEHOLDER =
    17592;

const int UA_NS0ID_DICTIONARYFOLDERTYPE_DICTIONARYENTRYNAME_PLACEHOLDER = 17593;

const int UA_NS0ID_DICTIONARIES = 17594;

const int UA_NS0ID_DICTIONARIES_DICTIONARYFOLDERNAME_PLACEHOLDER = 17595;

const int UA_NS0ID_DICTIONARIES_DICTIONARYENTRYNAME_PLACEHOLDER = 17596;

const int UA_NS0ID_HASDICTIONARYENTRY = 17597;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE = 17598;

const int UA_NS0ID_IRDIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER =
    17599;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE = 17600;

const int UA_NS0ID_URIDICTIONARYENTRYTYPE_DICTIONARYENTRYNAME_PLACEHOLDER =
    17601;

const int UA_NS0ID_BASEINTERFACETYPE = 17602;

const int UA_NS0ID_HASINTERFACE = 17603;

const int UA_NS0ID_HASADDIN = 17604;

const int UA_NS0ID_DEFAULTINSTANCEBROWSENAME = 17605;

const int UA_NS0ID_GENERICATTRIBUTEVALUE = 17606;

const int UA_NS0ID_GENERICATTRIBUTES = 17607;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTXML = 17608;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTXML = 17609;

const int UA_NS0ID_GENERICATTRIBUTEVALUE_ENCODING_DEFAULTBINARY = 17610;

const int UA_NS0ID_GENERICATTRIBUTES_ENCODING_DEFAULTBINARY = 17611;

const int UA_NS0ID_SERVERTYPE_LOCALTIME = 17612;

const int UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_INPUTARGUMENTS =
    17613;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPEADDWRITERGROUPMETHODTYPE_OUTPUTARGUMENTS =
    17614;

const int UA_NS0ID_AUDITSECURITYEVENTTYPE_STATUSCODEID = 17615;

const int UA_NS0ID_AUDITCHANNELEVENTTYPE_STATUSCODEID = 17616;

const int UA_NS0ID_AUDITOPENSECURECHANNELEVENTTYPE_STATUSCODEID = 17617;

const int UA_NS0ID_AUDITSESSIONEVENTTYPE_STATUSCODEID = 17618;

const int UA_NS0ID_AUDITCREATESESSIONEVENTTYPE_STATUSCODEID = 17619;

const int UA_NS0ID_AUDITURLMISMATCHEVENTTYPE_STATUSCODEID = 17620;

const int UA_NS0ID_AUDITACTIVATESESSIONEVENTTYPE_STATUSCODEID = 17621;

const int UA_NS0ID_AUDITCANCELEVENTTYPE_STATUSCODEID = 17622;

const int UA_NS0ID_AUDITCERTIFICATEEVENTTYPE_STATUSCODEID = 17623;

const int UA_NS0ID_AUDITCERTIFICATEDATAMISMATCHEVENTTYPE_STATUSCODEID = 17624;

const int UA_NS0ID_AUDITCERTIFICATEEXPIREDEVENTTYPE_STATUSCODEID = 17625;

const int UA_NS0ID_AUDITCERTIFICATEINVALIDEVENTTYPE_STATUSCODEID = 17626;

const int UA_NS0ID_AUDITCERTIFICATEUNTRUSTEDEVENTTYPE_STATUSCODEID = 17627;

const int UA_NS0ID_AUDITCERTIFICATEREVOKEDEVENTTYPE_STATUSCODEID = 17628;

const int UA_NS0ID_AUDITCERTIFICATEMISMATCHEVENTTYPE_STATUSCODEID = 17629;

const int UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE = 17630;

const int
    UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_INPUTARGUMENTS =
    17631;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONS = 17632;

const int UA_NS0ID_SELECTIONLISTTYPE_SELECTIONDESCRIPTIONS = 17633;

const int UA_NS0ID_SERVER_LOCALTIME = 17634;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLESTATES = 17635;

const int UA_NS0ID_FINITESTATEMACHINETYPE_AVAILABLETRANSITIONS = 17636;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLESTATES =
    17637;

const int
    UA_NS0ID_TEMPORARYFILETRANSFERTYPE_TRANSFERSTATE_PLACEHOLDER_AVAILABLETRANSITIONS =
    17638;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLESTATES = 17639;

const int UA_NS0ID_FILETRANSFERSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17640;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE = 17641;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTID = 17642;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_EVENTTYPE = 17643;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENODE = 17644;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SOURCENAME = 17645;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_TIME = 17646;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_RECEIVETIME = 17647;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_LOCALTIME = 17648;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_MESSAGE = 17649;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SEVERITY = 17650;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 17651;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_STATUS = 17652;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_SERVERID = 17653;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    17654;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_CLIENTUSERID = 17655;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_METHODID = 17656;

const int UA_NS0ID_ROLEMAPPINGRULECHANGEDAUDITEVENTTYPE_INPUTARGUMENTS = 17657;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLESTATES = 17658;

const int UA_NS0ID_ALARMCONDITIONTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17659;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLESTATES =
    17660;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17661;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLESTATES = 17662;

const int UA_NS0ID_SHELVEDSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17663;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17664;

const int UA_NS0ID_LIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17665;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLESTATES = 17666;

const int UA_NS0ID_EXCLUSIVELIMITSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17667;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17668;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17669;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17670;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17671;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17672;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17673;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17674;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17675;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17676;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17677;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLESTATES = 17678;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17679;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17680;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17681;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17682;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17683;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLESTATES =
    17684;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17685;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17686;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17687;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17688;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17689;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLESTATES =
    17690;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LIMITSTATE_AVAILABLETRANSITIONS =
    17691;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17692;

const int UA_NS0ID_DISCRETEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17693;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17694;

const int UA_NS0ID_OFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17695;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17696;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17697;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17698;

const int UA_NS0ID_TRIPALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS = 17699;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    17700;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17701;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLESTATES = 17702;

const int UA_NS0ID_DISCREPANCYALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    17703;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLESTATES = 17704;

const int UA_NS0ID_PROGRAMSTATEMACHINETYPE_AVAILABLETRANSITIONS = 17705;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONS =
    17706;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    17707;

const int UA_NS0ID_INTERFACETYPES = 17708;

const int UA_NS0ID_RATIONALNUMBERTYPE = 17709;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONS = 17710;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_TRANSPORTPROFILEURI_SELECTIONDESCRIPTIONS =
    17711;

const int UA_NS0ID_RATIONALNUMBERTYPE_NUMERATOR = 17712;

const int UA_NS0ID_RATIONALNUMBERTYPE_DENOMINATOR = 17713;

const int UA_NS0ID_VECTORTYPE = 17714;

const int UA_NS0ID_VECTORTYPE_VECTORUNIT = 17715;

const int UA_NS0ID_THREEDVECTORTYPE = 17716;

const int UA_NS0ID_THREEDVECTORTYPE_VECTORUNIT = 17717;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT =
    17718;

const int
    UA_NS0ID_FILEDIRECTORYTYPE_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    17719;

const int
    UA_NS0ID_PUBSUBCONNECTIONADDREADERGROUPGROUPMETHODTYPE_OUTPUTARGUMENTS =
    17720;

const int UA_NS0ID_CONNECTIONTRANSPORTTYPE = 17721;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT =
    17722;

const int
    UA_NS0ID_FILESYSTEM_FILEDIRECTORYNAME_PLACEHOLDER_DELETEFILESYSTEMOBJECT_INPUTARGUMENTS =
    17723;

const int UA_NS0ID_PUBSUBGROUPTYPE_MAXNETWORKMESSAGESIZE = 17724;

const int UA_NS0ID_WRITERGROUPTYPE = 17725;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYMODE = 17726;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYGROUPID = 17727;

const int UA_NS0ID_WRITERGROUPTYPE_SECURITYKEYSERVICES = 17728;

const int UA_NS0ID_WRITERGROUPTYPE_MAXNETWORKMESSAGESIZE = 17729;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS = 17730;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_STATE = 17731;

const int UA_NS0ID_AUTHORIZATIONSERVICES = 17732;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_ENABLE = 17734;

const int UA_NS0ID_WRITERGROUPTYPE_STATUS_DISABLE = 17735;

const int UA_NS0ID_WRITERGROUPTYPE_WRITERGROUPID = 17736;

const int UA_NS0ID_WRITERGROUPTYPE_PUBLISHINGINTERVAL = 17737;

const int UA_NS0ID_WRITERGROUPTYPE_KEEPALIVETIME = 17738;

const int UA_NS0ID_WRITERGROUPTYPE_PRIORITY = 17739;

const int UA_NS0ID_WRITERGROUPTYPE_LOCALEIDS = 17740;

const int UA_NS0ID_WRITERGROUPTYPE_TRANSPORTSETTINGS = 17741;

const int UA_NS0ID_WRITERGROUPTYPE_MESSAGESETTINGS = 17742;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER = 17743;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETWRITERID =
    17744;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    17745;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_KEYFRAMECOUNT =
    17746;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    17747;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_MESSAGESETTINGS =
    17748;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS = 17749;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_STATE =
    17750;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_ENABLE =
    17751;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_STATUS_DISABLE =
    17752;

const int UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    17753;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    17754;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    17755;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    17756;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17757;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17758;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17759;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    17760;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    17761;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17762;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17763;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17764;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    17765;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    17766;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    17767;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    17768;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17769;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17770;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17771;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17772;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17773;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17774;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17775;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17776;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17777;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17778;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17779;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17780;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17781;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17782;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17783;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17784;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17785;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17786;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17787;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17788;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17789;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17790;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17791;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17792;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17793;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17794;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17795;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17796;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17797;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    17798;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    17799;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    17800;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    17801;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    17802;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    17803;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    17804;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    17805;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    17806;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    17807;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    17808;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    17809;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    17810;

const int
    UA_NS0ID_WRITERGROUPTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    17811;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS = 17812;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 17813;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 17814;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 17815;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    17816;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    17817;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    17818;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 17819;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 17820;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    17821;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    17822;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    17823;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_RESET = 17824;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_SUBERROR = 17825;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS = 17826;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 17827;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    17828;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    17829;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    17830;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    17831;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    17832;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    17833;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    17834;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    17835;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    17836;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    17837;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    17838;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    17839;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    17840;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    17841;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    17842;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    17843;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    17844;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    17845;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    17846;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    17847;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    17848;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    17849;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    17850;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    17851;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE = 17852;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    17853;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    17854;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    17855;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    17856;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    17857;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 17858;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES =
    17859;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICECERTIFICATE =
    17860;

const int UA_NS0ID_DECIMALDATATYPE = 17861;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTXML = 17862;

const int UA_NS0ID_DECIMALDATATYPE_ENCODING_DEFAULTBINARY = 17863;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    17864;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_LISTID = 17865;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_AGENCYID = 17866;

const int UA_NS0ID_ALARMCONDITIONTYPE_AUDIBLESOUND_VERSIONID = 17867;

const int UA_NS0ID_ALARMCONDITIONTYPE_UNSUPPRESS = 17868;

const int UA_NS0ID_ALARMCONDITIONTYPE_REMOVEFROMSERVICE = 17869;

const int UA_NS0ID_ALARMCONDITIONTYPE_PLACEINSERVICE = 17870;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    17871;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    17872;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    17873;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS =
    17874;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_UNSUPPRESS =
    17875;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_REMOVEFROMSERVICE =
    17876;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_PLACEINSERVICE =
    17877;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    17878;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_LISTID = 17879;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17880;

const int UA_NS0ID_LIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17881;

const int UA_NS0ID_LIMITALARMTYPE_UNSUPPRESS = 17882;

const int UA_NS0ID_LIMITALARMTYPE_REMOVEFROMSERVICE = 17883;

const int UA_NS0ID_LIMITALARMTYPE_PLACEINSERVICE = 17884;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    17885;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17886;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17887;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17888;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17889;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17890;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17891;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    17892;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_LISTID = 17893;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_AGENCYID = 17894;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_AUDIBLESOUND_VERSIONID = 17895;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_UNSUPPRESS = 17896;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_REMOVEFROMSERVICE = 17897;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_PLACEINSERVICE = 17898;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    17899;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS =
    17900;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    17901;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    17902;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    17903;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17904;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17905;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    17906;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 17907;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 17908;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 17909;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 17910;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_REMOVEFROMSERVICE = 17911;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_PLACEINSERVICE = 17912;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    17913;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17914;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17915;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID =
    17916;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17917;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17918;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17919;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    17920;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID =
    17921;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID =
    17922;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID =
    17923;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17924;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17925;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17926;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    17927;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_LISTID = 17928;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17929;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_AUDIBLESOUND_VERSIONID = 17930;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_UNSUPPRESS = 17931;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_REMOVEFROMSERVICE = 17932;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_PLACEINSERVICE = 17933;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    17934;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_LISTID = 17935;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_AGENCYID = 17936;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_AUDIBLESOUND_VERSIONID =
    17937;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_UNSUPPRESS = 17938;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_REMOVEFROMSERVICE = 17939;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_PLACEINSERVICE = 17940;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    17941;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_LISTID = 17942;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_AGENCYID = 17943;

const int UA_NS0ID_DISCRETEALARMTYPE_AUDIBLESOUND_VERSIONID = 17944;

const int UA_NS0ID_DISCRETEALARMTYPE_UNSUPPRESS = 17945;

const int UA_NS0ID_DISCRETEALARMTYPE_REMOVEFROMSERVICE = 17946;

const int UA_NS0ID_DISCRETEALARMTYPE_PLACEINSERVICE = 17947;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    17948;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17949;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17950;

const int UA_NS0ID_OFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17951;

const int UA_NS0ID_OFFNORMALALARMTYPE_UNSUPPRESS = 17952;

const int UA_NS0ID_OFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17953;

const int UA_NS0ID_OFFNORMALALARMTYPE_PLACEINSERVICE = 17954;

const int UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    17955;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_LISTID = 17956;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_AGENCYID = 17957;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_AUDIBLESOUND_VERSIONID = 17958;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_UNSUPPRESS = 17959;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_REMOVEFROMSERVICE = 17960;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_PLACEINSERVICE = 17961;

const int
    UA_NS0ID_WRITERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    17962;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_LISTID = 17963;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_AGENCYID = 17964;

const int UA_NS0ID_TRIPALARMTYPE_AUDIBLESOUND_VERSIONID = 17965;

const int UA_NS0ID_TRIPALARMTYPE_UNSUPPRESS = 17966;

const int UA_NS0ID_TRIPALARMTYPE_REMOVEFROMSERVICE = 17967;

const int UA_NS0ID_TRIPALARMTYPE_PLACEINSERVICE = 17968;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER = 17969;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_LISTID = 17970;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_AGENCYID = 17971;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_AUDIBLESOUND_VERSIONID =
    17972;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_UNSUPPRESS = 17973;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_REMOVEFROMSERVICE = 17974;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_PLACEINSERVICE = 17975;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_INPUTARGUMENTS = 17976;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_LISTID = 17977;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_AGENCYID = 17978;

const int UA_NS0ID_DISCREPANCYALARMTYPE_AUDIBLESOUND_VERSIONID = 17979;

const int UA_NS0ID_DISCREPANCYALARMTYPE_UNSUPPRESS = 17980;

const int UA_NS0ID_DISCREPANCYALARMTYPE_REMOVEFROMSERVICE = 17981;

const int UA_NS0ID_DISCREPANCYALARMTYPE_PLACEINSERVICE = 17982;

const int UA_NS0ID_HASEFFECTENABLE = 17983;

const int UA_NS0ID_HASEFFECTSUPPRESSED = 17984;

const int UA_NS0ID_HASEFFECTUNSUPPRESSED = 17985;

const int UA_NS0ID_AUDIOVARIABLETYPE = 17986;

const int UA_NS0ID_WRITERGROUPTYPE_ADDDATASETWRITER_OUTPUTARGUMENTS = 17987;

const int UA_NS0ID_AUDIOVARIABLETYPE_LISTID = 17988;

const int UA_NS0ID_AUDIOVARIABLETYPE_AGENCYID = 17989;

const int UA_NS0ID_AUDIOVARIABLETYPE_VERSIONID = 17990;

const int UA_NS0ID_ALARMMETRICSTYPE_STARTTIME = 17991;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER = 17992;

const int UA_NS0ID_WRITERGROUPTYPE_REMOVEDATASETWRITER_INPUTARGUMENTS = 17993;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE = 17994;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE_INPUTARGUMENTS = 17995;

const int UA_NS0ID_PUBSUBGROUPTYPEADDWRITERRMETHODTYPE_OUTPUTARGUMENTS = 17996;

const int UA_NS0ID_WRITERGROUPTRANSPORTTYPE = 17997;

const int UA_NS0ID_WRITERGROUPMESSAGETYPE = 17998;

const int UA_NS0ID_READERGROUPTYPE = 17999;

const int UA_NS0ID_READERGROUPTYPE_SECURITYMODE = 18000;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE = 18001;

const int UA_NS0ID_READERGROUPTYPE_SECURITYGROUPID = 18002;

const int UA_NS0ID_READERGROUPTYPE_SECURITYKEYSERVICES = 18003;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_ENDPOINTURLS = 18004;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_SERVICESTATUS = 18005;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL = 18006;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_UPDATECREDENTIAL_INPUTARGUMENTS =
    18007;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_DELETECREDENTIAL = 18008;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE = 18009;

const int UA_NS0ID_KEYCREDENTIALUPDATEMETHODTYPE_INPUTARGUMENTS = 18010;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE = 18011;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTID = 18012;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_EVENTTYPE = 18013;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENODE = 18014;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SOURCENAME = 18015;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_TIME = 18016;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RECEIVETIME = 18017;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_LOCALTIME = 18018;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_MESSAGE = 18019;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SEVERITY = 18020;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_ACTIONTIMESTAMP = 18021;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_STATUS = 18022;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_SERVERID = 18023;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTAUDITENTRYID = 18024;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_CLIENTUSERID = 18025;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_METHODID = 18026;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_INPUTARGUMENTS = 18027;

const int UA_NS0ID_KEYCREDENTIALAUDITEVENTTYPE_RESOURCEURI = 18028;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE = 18029;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTID = 18030;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_EVENTTYPE = 18031;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENODE = 18032;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SOURCENAME = 18033;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_TIME = 18034;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RECEIVETIME = 18035;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_LOCALTIME = 18036;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_MESSAGE = 18037;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SEVERITY = 18038;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18039;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_STATUS = 18040;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_SERVERID = 18041;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    18042;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_CLIENTUSERID = 18043;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_METHODID = 18044;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_INPUTARGUMENTS = 18045;

const int UA_NS0ID_KEYCREDENTIALUPDATEDAUDITEVENTTYPE_RESOURCEURI = 18046;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE = 18047;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTID = 18048;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_EVENTTYPE = 18049;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENODE = 18050;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SOURCENAME = 18051;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_TIME = 18052;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RECEIVETIME = 18053;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_LOCALTIME = 18054;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_MESSAGE = 18055;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SEVERITY = 18056;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_ACTIONTIMESTAMP = 18057;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_STATUS = 18058;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_SERVERID = 18059;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTAUDITENTRYID =
    18060;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_CLIENTUSERID = 18061;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_METHODID = 18062;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_INPUTARGUMENTS = 18063;

const int UA_NS0ID_KEYCREDENTIALDELETEDAUDITEVENTTYPE_RESOURCEURI = 18064;

const int UA_NS0ID_READERGROUPTYPE_MAXNETWORKMESSAGESIZE = 18065;

const int UA_NS0ID_READERGROUPTYPE_STATUS = 18067;

const int UA_NS0ID_READERGROUPTYPE_STATUS_STATE = 18068;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_RESOURCEURI = 18069;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_SERVICEURI = 18072;

const int UA_NS0ID_AUTHORIZATIONSERVICECONFIGURATIONTYPE_ISSUERENDPOINTURL =
    18073;

const int UA_NS0ID_READERGROUPTYPE_STATUS_ENABLE = 18074;

const int UA_NS0ID_READERGROUPTYPE_STATUS_DISABLE = 18075;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER = 18076;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_PUBLISHERID =
    18077;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_WRITERGROUPID =
    18078;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETWRITERID =
    18079;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETMETADATA =
    18080;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DATASETFIELDCONTENTMASK =
    18081;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGERECEIVETIMEOUT =
    18082;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYMODE =
    18083;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYGROUPID =
    18084;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SECURITYKEYSERVICES =
    18085;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_TRANSPORTSETTINGS =
    18086;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_MESSAGESETTINGS =
    18087;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS = 18088;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_STATE =
    18089;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_ENABLE =
    18090;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_STATUS_DISABLE =
    18091;

const int UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS =
    18092;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18093;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18094;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18095;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18096;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18097;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18098;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18099;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18100;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18101;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18102;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18103;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18104;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18105;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18106;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18107;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18108;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18109;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18110;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18111;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18112;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18113;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18114;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18115;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18116;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18117;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18118;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18119;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18120;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18121;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18122;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18123;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18124;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18125;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18126;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18127;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18128;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18129;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18130;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18131;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18132;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18133;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18134;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18135;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18136;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18137;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18138;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18139;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18140;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18141;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18142;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    18143;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    18144;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    18145;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    18146;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    18147;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18148;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18149;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18150;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18151;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18152;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18153;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18154;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION = 18155;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER = 18156;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_RESOURCEURI =
    18157;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18158;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_ENDPOINTURLS =
    18159;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_SERVICESTATUS =
    18160;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL =
    18161;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_UPDATECREDENTIAL_INPUTARGUMENTS =
    18162;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_DELETECREDENTIAL =
    18163;

const int
    UA_NS0ID_KEYCREDENTIALCONFIGURATION_SERVICENAME_PLACEHOLDER_PROFILEURI =
    18164;

const int UA_NS0ID_KEYCREDENTIALCONFIGURATIONTYPE_PROFILEURI = 18165;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION = 18166;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION = 18167;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT =
    18168;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD = 18169;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18170;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18171;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION = 18172;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION = 18173;

const int UA_NS0ID_OPCUA_XMLSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT =
    18174;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION = 18175;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18176;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18177;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION = 18178;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DATATYPEVERSION =
    18179;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATATYPEDEFINITION_DICTIONARYFRAGMENT =
    18180;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD = 18181;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DATATYPEVERSION = 18182;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREFIELD_DICTIONARYFRAGMENT = 18183;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION = 18184;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DATATYPEVERSION =
    18185;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_STRUCTUREDEFINITION_DICTIONARYFRAGMENT =
    18186;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION = 18187;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DATATYPEVERSION = 18188;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ENUMDEFINITION_DICTIONARYFRAGMENT = 18189;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE = 18190;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_ID = 18191;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NAME = 18192;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_NUMBER = 18193;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18194;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRANSITIONTIME = 18195;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18196;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_TRUESTATE = 18197;

const int UA_NS0ID_ALARMCONDITIONTYPE_LATCHEDSTATE_FALSESTATE = 18198;

const int UA_NS0ID_ALARMCONDITIONTYPE_RESET = 18199;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_LISTID =
    18200;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_AGENCYID =
    18201;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_AUDIBLESOUND_VERSIONID =
    18202;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE =
    18203;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_ID =
    18204;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NAME =
    18205;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_NUMBER =
    18206;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18207;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRANSITIONTIME =
    18208;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18209;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_TRUESTATE =
    18210;

const int
    UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_LATCHEDSTATE_FALSESTATE =
    18211;

const int UA_NS0ID_ALARMGROUPTYPE_ALARMCONDITIONINSTANCE_PLACEHOLDER_RESET =
    18212;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE = 18213;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_ID = 18214;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NAME = 18215;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18216;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18217;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18218;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18219;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18220;

const int UA_NS0ID_LIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18221;

const int UA_NS0ID_LIMITALARMTYPE_RESET = 18222;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18223;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18224;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18225;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18226;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18227;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18228;

const int
    UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18229;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18230;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18231;

const int UA_NS0ID_EXCLUSIVELIMITALARMTYPE_RESET = 18232;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE = 18233;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_ID = 18234;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NAME = 18235;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_NUMBER = 18236;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18237;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18238;

const int
    UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18239;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_TRUESTATE = 18240;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_LATCHEDSTATE_FALSESTATE = 18241;

const int UA_NS0ID_NONEXCLUSIVELIMITALARMTYPE_RESET = 18242;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_LISTID = 18243;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_AGENCYID = 18244;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_AUDIBLESOUND_VERSIONID = 18245;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18246;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18247;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18248;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18249;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18250;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18251;

const int
    UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18252;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18253;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18254;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_UNSUPPRESS = 18255;

const int UA_NS0ID_NONEXCLUSIVELEVELALARMTYPE_RESET = 18256;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE = 18257;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_ID = 18258;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NAME = 18259;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_NUMBER = 18260;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18261;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18262;

const int
    UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18263;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_TRUESTATE = 18264;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_LATCHEDSTATE_FALSESTATE = 18265;

const int UA_NS0ID_EXCLUSIVELEVELALARMTYPE_RESET = 18266;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18267;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18268;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18269;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18270;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18271;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18272;

const int
    UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18273;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18274;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18275;

const int UA_NS0ID_NONEXCLUSIVEDEVIATIONALARMTYPE_RESET = 18276;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18277;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18278;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18279;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER =
    18280;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18281;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18282;

const int
    UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18283;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18284;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18285;

const int UA_NS0ID_NONEXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18286;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE = 18287;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_ID = 18288;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NAME = 18289;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18290;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18291;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18292;

const int
    UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18293;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_TRUESTATE = 18294;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_LATCHEDSTATE_FALSESTATE = 18295;

const int UA_NS0ID_EXCLUSIVEDEVIATIONALARMTYPE_RESET = 18296;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE = 18297;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_ID = 18298;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NAME = 18299;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_NUMBER = 18300;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18301;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18302;

const int
    UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18303;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18304;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18305;

const int UA_NS0ID_EXCLUSIVERATEOFCHANGEALARMTYPE_RESET = 18306;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE = 18307;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_ID = 18308;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NAME = 18309;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_NUMBER = 18310;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18311;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18312;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18313;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_TRUESTATE = 18314;

const int UA_NS0ID_DISCRETEALARMTYPE_LATCHEDSTATE_FALSESTATE = 18315;

const int UA_NS0ID_DISCRETEALARMTYPE_RESET = 18316;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE = 18317;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18318;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18319;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18320;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18321;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18322;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18323;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18324;

const int UA_NS0ID_OFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18325;

const int UA_NS0ID_OFFNORMALALARMTYPE_RESET = 18326;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE = 18327;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_ID = 18328;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NAME = 18329;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_NUMBER = 18330;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18331;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18332;

const int
    UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18333;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_TRUESTATE = 18334;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_LATCHEDSTATE_FALSESTATE = 18335;

const int UA_NS0ID_SYSTEMOFFNORMALALARMTYPE_RESET = 18336;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE = 18337;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_ID = 18338;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NAME = 18339;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_NUMBER = 18340;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME = 18341;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18342;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME = 18343;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_TRUESTATE = 18344;

const int UA_NS0ID_TRIPALARMTYPE_LATCHEDSTATE_FALSESTATE = 18345;

const int UA_NS0ID_TRIPALARMTYPE_RESET = 18346;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE = 18347;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTID = 18348;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_EVENTTYPE = 18349;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENODE = 18350;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SOURCENAME = 18351;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_TIME = 18352;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RECEIVETIME = 18353;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LOCALTIME = 18354;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MESSAGE = 18355;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SEVERITY = 18356;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18357;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18358;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18359;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18360;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONNAME = 18361;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_BRANCHID = 18362;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RETAIN = 18363;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18364;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18365;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18366;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18367;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    18368;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    18369;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    18370;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18371;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE =
    18372;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY = 18373;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP =
    18374;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY = 18375;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    18376;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT = 18377;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP =
    18378;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CLIENTUSERID = 18379;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_DISABLE = 18380;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ENABLE = 18381;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT = 18382;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    18383;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18384;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    18385;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18386;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    18387;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE = 18388;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18389;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18390;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18391;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    18392;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    18393;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    18394;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18395;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18396;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18397;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18398;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18399;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18400;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    18401;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    18402;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    18403;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE =
    18404;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    18405;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18406;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    18407;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM = 18408;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18409;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE = 18410;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18411;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18412;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18413;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    18414;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    18415;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    18416;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18417;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18418;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_INPUTNODE = 18419;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18420;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18421;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18422;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18423;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    18424;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    18425;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    18426;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    18427;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    18428;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18429;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18430;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18431;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER =
    18432;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    18433;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    18434;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    18435;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    18436;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    18437;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18438;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    18439;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    18440;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    18441;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    18442;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    18443;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    18444;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    18445;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    18446;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    18447;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    18448;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    18449;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    18450;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    18451;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    18452;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    18453;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    18454;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18455;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    18456;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18457;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18458;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18459;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18460;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18461;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18462;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18463;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE = 18464;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18465;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18466;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18467;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    18468;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    18469;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    18470;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18471;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE =
    18472;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ONDELAY = 18473;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_OFFDELAY = 18474;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18475;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18476;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18477;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18478;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18479;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18480;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18481;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18482;

const int
    UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18483;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18484;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18485;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18486;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMTIME = 18487;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18488;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SILENCE = 18489;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_SUPPRESS = 18490;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_UNSUPPRESS = 18491;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18492;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18493;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_RESET = 18494;

const int UA_NS0ID_INSTRUMENTDIAGNOSTICALARMTYPE_NORMALSTATE = 18495;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE = 18496;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTID = 18497;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_EVENTTYPE = 18498;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENODE = 18499;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SOURCENAME = 18500;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_TIME = 18501;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RECEIVETIME = 18502;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LOCALTIME = 18503;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MESSAGE = 18504;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SEVERITY = 18505;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSID = 18506;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONCLASSNAME = 18507;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSID = 18508;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONSUBCLASSNAME = 18509;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONNAME = 18510;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_BRANCHID = 18511;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RETAIN = 18512;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE = 18513;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_ID = 18514;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NAME = 18515;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_NUMBER = 18516;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    18517;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    18518;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    18519;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_TRUESTATE = 18520;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLEDSTATE_FALSESTATE = 18521;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY = 18522;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_QUALITY_SOURCETIMESTAMP = 18523;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY = 18524;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    18525;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT = 18526;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_COMMENT_SOURCETIMESTAMP = 18527;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CLIENTUSERID = 18528;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_DISABLE = 18529;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ENABLE = 18530;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT = 18531;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ADDCOMMENT_INPUTARGUMENTS = 18532;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH = 18533;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    18534;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2 = 18535;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    18536;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE = 18537;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_ID = 18538;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NAME = 18539;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_NUMBER = 18540;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    18541;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRANSITIONTIME = 18542;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    18543;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_TRUESTATE = 18544;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKEDSTATE_FALSESTATE = 18545;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE = 18546;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_ID = 18547;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NAME = 18548;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_NUMBER = 18549;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    18550;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    18551;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    18552;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 18553;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRMEDSTATE_FALSESTATE = 18554;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE = 18555;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS = 18556;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM = 18557;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_CONFIRM_INPUTARGUMENTS = 18558;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE = 18559;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_ID = 18560;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NAME = 18561;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_NUMBER = 18562;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    18563;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRANSITIONTIME = 18564;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    18565;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_TRUESTATE = 18566;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ACTIVESTATE_FALSESTATE = 18567;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_INPUTNODE = 18568;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE = 18569;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_ID = 18570;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NAME = 18571;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_NUMBER = 18572;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    18573;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    18574;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    18575;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_TRUESTATE = 18576;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDSTATE_FALSESTATE = 18577;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE = 18578;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_ID = 18579;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NAME = 18580;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_NUMBER = 18581;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    18582;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    18583;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    18584;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    18585;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    18586;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE = 18587;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE = 18588;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    18589;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    18590;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    18591;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    18592;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    18593;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    18594;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    18595;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    18596;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    18597;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    18598;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    18599;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    18600;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVETIME = 18601;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE = 18602;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    18603;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_UNSHELVE = 18604;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    18605;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESSEDORSHELVED = 18606;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_MAXTIMESHELVED = 18607;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLEENABLED = 18608;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND = 18609;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_LISTID = 18610;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_AGENCYID = 18611;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_AUDIBLESOUND_VERSIONID = 18612;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE = 18613;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_ID = 18614;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NAME = 18615;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_NUMBER = 18616;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    18617;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    18618;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    18619;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_TRUESTATE = 18620;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCESTATE_FALSESTATE = 18621;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ONDELAY = 18622;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_OFFDELAY = 18623;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUPFLAG = 18624;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_FIRSTINGROUP = 18625;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE = 18626;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_ID = 18627;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NAME = 18628;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_NUMBER = 18629;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18630;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18631;

const int
    UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18632;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_TRUESTATE = 18633;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_LATCHEDSTATE_FALSESTATE = 18634;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_ALARMGROUP_PLACEHOLDER = 18635;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMTIME = 18636;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REALARMREPEATCOUNT = 18637;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SILENCE = 18638;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_SUPPRESS = 18639;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_UNSUPPRESS = 18640;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_REMOVEFROMSERVICE = 18641;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_PLACEINSERVICE = 18642;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_RESET = 18643;

const int UA_NS0ID_SYSTEMDIAGNOSTICALARMTYPE_NORMALSTATE = 18644;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE = 18645;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_ID = 18646;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NAME = 18647;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_NUMBER = 18648;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18649;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    18650;

const int
    UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18651;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_TRUESTATE =
    18652;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_LATCHEDSTATE_FALSESTATE =
    18653;

const int UA_NS0ID_CERTIFICATEEXPIRATIONALARMTYPE_RESET = 18654;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE = 18655;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_ID = 18656;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NAME = 18657;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_NUMBER = 18658;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    18659;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRANSITIONTIME = 18660;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    18661;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_TRUESTATE = 18662;

const int UA_NS0ID_DISCREPANCYALARMTYPE_LATCHEDSTATE_FALSESTATE = 18663;

const int UA_NS0ID_DISCREPANCYALARMTYPE_RESET = 18664;

const int UA_NS0ID_STATISTICALCONDITIONCLASSTYPE = 18665;

const int UA_NS0ID_ALARMMETRICSTYPE_RESET = 18666;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS =
    18667;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18668;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18669;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18670;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18671;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18672;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18673;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18674;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18675;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18676;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18677;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18678;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18679;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18680;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18681;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18682;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18683;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18684;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18685;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18686;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18687;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18688;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18689;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18690;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18691;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18692;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18693;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18694;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18695;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18696;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18697;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18698;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18699;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18700;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18701;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18702;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18703;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18704;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18705;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18706;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18707;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18708;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18709;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18710;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18711;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18712;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    18713;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_CONNECTIONNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    18714;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS = 18715;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 18716;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION = 18717;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18718;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18719;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18720;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18721;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR = 18722;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 18723;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18724;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18725;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18726;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_RESET = 18727;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_SUBERROR = 18728;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS = 18729;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 18730;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18731;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18732;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18733;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18734;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18735;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18736;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18737;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18738;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18739;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18740;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18741;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18742;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18743;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18744;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18745;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18746;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18747;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18748;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18749;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18750;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18751;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18752;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18753;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18754;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18755;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18756;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18757;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18758;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18759;

const int UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES = 18760;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    18761;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    18762;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    18763;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    18764;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    18765;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    18766;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    18767;

const int
    UA_NS0ID_PUBLISHSUBSCRIBETYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    18768;

const int UA_NS0ID_THREEDVECTORTYPE_X = 18769;

const int UA_NS0ID_THREEDVECTORTYPE_Y = 18770;

const int UA_NS0ID_THREEDVECTORTYPE_Z = 18771;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE = 18772;

const int UA_NS0ID_CARTESIANCOORDINATESTYPE_LENGTHUNIT = 18773;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE = 18774;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_LENGTHUNIT = 18775;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_X = 18776;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Y = 18777;

const int UA_NS0ID_THREEDCARTESIANCOORDINATESTYPE_Z = 18778;

const int UA_NS0ID_ORIENTATIONTYPE = 18779;

const int UA_NS0ID_ORIENTATIONTYPE_ANGLEUNIT = 18780;

const int UA_NS0ID_THREEDORIENTATIONTYPE = 18781;

const int UA_NS0ID_THREEDORIENTATIONTYPE_ANGLEUNIT = 18782;

const int UA_NS0ID_THREEDORIENTATIONTYPE_A = 18783;

const int UA_NS0ID_THREEDORIENTATIONTYPE_B = 18784;

const int UA_NS0ID_THREEDORIENTATIONTYPE_C = 18785;

const int UA_NS0ID_FRAMETYPE = 18786;

const int UA_NS0ID_FRAMETYPE_ORIENTATION = 18787;

const int UA_NS0ID_FRAMETYPE_CONSTANT = 18788;

const int UA_NS0ID_FRAMETYPE_BASEFRAME = 18789;

const int UA_NS0ID_FRAMETYPE_FIXEDBASE = 18790;

const int UA_NS0ID_THREEDFRAMETYPE = 18791;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION = 18792;

const int UA_NS0ID_THREEDFRAMETYPE_CONSTANT = 18793;

const int UA_NS0ID_THREEDFRAMETYPE_BASEFRAME = 18794;

const int UA_NS0ID_THREEDFRAMETYPE_FIXEDBASE = 18795;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES = 18796;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18797;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_X = 18798;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Y = 18799;

const int UA_NS0ID_THREEDFRAMETYPE_CARTESIANCOORDINATES_Z = 18800;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES = 18801;

const int UA_NS0ID_FRAMETYPE_CARTESIANCOORDINATES_LENGTHUNIT = 18802;

const int UA_NS0ID_FRAMETYPE_ORIENTATION_ANGLEUNIT = 18803;

const int UA_NS0ID_HASWRITERGROUP = 18804;

const int UA_NS0ID_HASREADERGROUP = 18805;

const int UA_NS0ID_RATIONALNUMBER = 18806;

const int UA_NS0ID_VECTOR = 18807;

const int UA_NS0ID_THREEDVECTOR = 18808;

const int UA_NS0ID_CARTESIANCOORDINATES = 18809;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES = 18810;

const int UA_NS0ID_ORIENTATION = 18811;

const int UA_NS0ID_THREEDORIENTATION = 18812;

const int UA_NS0ID_FRAME = 18813;

const int UA_NS0ID_THREEDFRAME = 18814;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTBINARY = 18815;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTBINARY = 18816;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTBINARY = 18817;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18818;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTBINARY = 18819;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTBINARY = 18820;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTBINARY = 18821;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTBINARY = 18822;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTBINARY = 18823;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER = 18824;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18825;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18826;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR = 18827;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DATATYPEVERSION = 18828;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18829;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR = 18830;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18831;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18832;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES = 18833;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION =
    18834;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    18835;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES = 18836;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION =
    18837;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    18838;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION = 18839;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DATATYPEVERSION = 18840;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 18841;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION = 18842;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 18843;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT =
    18844;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME = 18845;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DATATYPEVERSION = 18846;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FRAME_DICTIONARYFRAGMENT = 18847;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME = 18848;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DATATYPEVERSION = 18849;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 18850;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTXML = 18851;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTXML = 18852;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTXML = 18853;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18854;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTXML = 18855;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTXML = 18856;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTXML = 18857;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTXML = 18858;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTXML = 18859;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER = 18860;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DATATYPEVERSION = 18861;

const int UA_NS0ID_OPCUA_XMLSCHEMA_RATIONALNUMBER_DICTIONARYFRAGMENT = 18862;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR = 18863;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DATATYPEVERSION = 18864;

const int UA_NS0ID_OPCUA_XMLSCHEMA_VECTOR_DICTIONARYFRAGMENT = 18865;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR = 18866;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DATATYPEVERSION = 18867;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDVECTOR_DICTIONARYFRAGMENT = 18868;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES = 18869;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DATATYPEVERSION = 18870;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18871;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18872;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18873;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18874;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18875;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18876;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18877;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18878;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18879;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18880;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18881;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18882;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18883;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18884;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18885;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18886;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18887;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18888;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18889;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18890;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18891;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18892;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18893;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18894;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18895;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18896;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18897;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18898;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18899;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18900;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18901;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18902;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18903;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18904;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18905;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18906;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18907;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18908;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18909;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18910;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18911;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18912;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18913;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18914;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18915;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18916;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18917;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18918;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18919;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18920;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18921;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18922;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18923;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18924;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18925;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18926;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18927;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18928;

const int
    UA_NS0ID_PUBLISHEDDATASETTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18929;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18930;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18931;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18932;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18933;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18934;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18935;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18936;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18937;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18938;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18939;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18940;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    18941;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    18942;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    18943;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    18944;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    18945;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    18946;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    18947;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    18948;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    18949;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    18950;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    18951;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    18952;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    18953;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    18954;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    18955;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    18956;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    18957;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    18958;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    18959;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    18960;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    18961;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    18962;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    18963;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    18964;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    18965;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    18966;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    18967;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    18968;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    18969;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    18970;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    18971;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    18972;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    18973;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    18974;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    18975;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    18976;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    18977;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    18978;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    18979;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    18980;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    18981;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    18982;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    18983;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    18984;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    18985;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    18986;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    18987;

const int
    UA_NS0ID_PUBLISHEDDATAITEMSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    18988;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS =
    18989;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    18990;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    18991;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    18992;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    18993;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    18994;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    18995;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    18996;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    18997;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    18998;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    18999;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19000;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19001;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19002;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19003;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19004;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19005;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19006;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19007;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19008;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19009;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19010;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19011;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19012;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19013;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19014;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19015;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19016;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19017;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19018;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19019;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19020;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19021;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19022;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19023;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19024;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19025;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19026;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19027;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19028;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19029;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19030;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19031;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19032;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19033;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19034;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19035;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19036;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19037;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19038;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19039;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19040;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19041;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE =
    19042;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19043;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19044;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19045;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19046;

const int
    UA_NS0ID_PUBLISHEDEVENTSTYPE_DATASETWRITERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19047;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    19048;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES = 19049;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DATATYPEVERSION =
    19050;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_THREEDCARTESIANCOORDINATES_DICTIONARYFRAGMENT =
    19051;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION = 19052;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DATATYPEVERSION = 19053;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ORIENTATION_DICTIONARYFRAGMENT = 19054;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION = 19055;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DATATYPEVERSION = 19056;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDORIENTATION_DICTIONARYFRAGMENT = 19057;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME = 19058;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DATATYPEVERSION = 19059;

const int UA_NS0ID_OPCUA_XMLSCHEMA_FRAME_DICTIONARYFRAGMENT = 19060;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME = 19061;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DATATYPEVERSION = 19062;

const int UA_NS0ID_OPCUA_XMLSCHEMA_THREEDFRAME_DICTIONARYFRAGMENT = 19063;

const int UA_NS0ID_RATIONALNUMBER_ENCODING_DEFAULTJSON = 19064;

const int UA_NS0ID_VECTOR_ENCODING_DEFAULTJSON = 19065;

const int UA_NS0ID_THREEDVECTOR_ENCODING_DEFAULTJSON = 19066;

const int UA_NS0ID_CARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19067;

const int UA_NS0ID_THREEDCARTESIANCOORDINATES_ENCODING_DEFAULTJSON = 19068;

const int UA_NS0ID_ORIENTATION_ENCODING_DEFAULTJSON = 19069;

const int UA_NS0ID_THREEDORIENTATION_ENCODING_DEFAULTJSON = 19070;

const int UA_NS0ID_FRAME_ENCODING_DEFAULTJSON = 19071;

const int UA_NS0ID_THREEDFRAME_ENCODING_DEFAULTJSON = 19072;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_ANGLEUNIT = 19073;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_A = 19074;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_B = 19075;

const int UA_NS0ID_THREEDFRAMETYPE_ORIENTATION_C = 19076;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE = 19077;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_DEFINITION = 19078;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEPRECISION =
    19079;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMVALUES = 19080;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASTEXT =
    19081;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_ENUMDICTIONARYENTRIES =
    19082;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETEBASETYPE_VALUEASDICTIONARYENTRIES =
    19083;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE = 19084;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_DEFINITION = 19085;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEPRECISION = 19086;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMVALUES = 19087;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASTEXT = 19088;

const int UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_ENUMDICTIONARYENTRIES =
    19089;

const int
    UA_NS0ID_MULTISTATEDICTIONARYENTRYDISCRETETYPE_VALUEASDICTIONARYENTRIES =
    19090;

const int UA_NS0ID_HISTORYSERVERCAPABILITIES_SERVERTIMESTAMPSUPPORTED = 19091;

const int UA_NS0ID_HISTORICALDATACONFIGURATIONTYPE_SERVERTIMESTAMPSUPPORTED =
    19092;

const int UA_NS0ID_HACONFIGURATION_SERVERTIMESTAMPSUPPORTED = 19093;

const int UA_NS0ID_HISTORYSERVERCAPABILITIESTYPE_SERVERTIMESTAMPSUPPORTED =
    19094;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE = 19095;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTID = 19096;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_EVENTTYPE = 19097;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENODE = 19098;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SOURCENAME = 19099;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_TIME = 19100;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_RECEIVETIME = 19101;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_LOCALTIME = 19102;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_MESSAGE = 19103;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SEVERITY = 19104;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_ACTIONTIMESTAMP =
    19105;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_STATUS = 19106;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS =
    19107;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    19108;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    19109;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19110;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19111;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19112;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19113;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    19114;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    19115;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19116;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19117;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19118;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19119;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19120;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19121;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19122;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19123;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19124;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19125;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19126;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19127;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19128;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19129;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19130;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19131;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19132;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19133;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19134;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19135;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19136;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19137;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19138;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19139;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19140;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19141;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19142;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19143;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19144;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19145;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19146;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19147;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19148;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19149;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19150;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19151;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19152;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES =
    19153;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    19154;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    19155;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19156;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19157;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS =
    19158;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    19159;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    19160;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    19161;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    19162;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS =
    19163;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    19164;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    19165;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19166;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    19167;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19168;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19169;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19170;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19171;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    19172;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19173;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    19174;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_WRITERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19175;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS =
    19176;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_DIAGNOSTICSLEVEL =
    19177;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION =
    19178;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19179;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19180;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19181;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19182;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR =
    19183;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_ACTIVE =
    19184;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19185;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19186;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19187;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_RESET =
    19188;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_SUBERROR =
    19189;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS =
    19190;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR =
    19191;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19192;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19193;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19194;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19195;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19196;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19197;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19198;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19199;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19200;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19201;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19202;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19203;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19204;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19205;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19206;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19207;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19208;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19209;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19210;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19211;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19212;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19213;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19214;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19215;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19216;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19217;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19218;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19219;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19220;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES =
    19221;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES =
    19222;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    19223;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    19224;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19225;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19226;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    19227;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    19228;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    19229;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19230;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19231;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    19232;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19233;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19234;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19235;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19236;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19237;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19238;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    19239;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_READERGROUPNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19240;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS = 19241;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19242;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION = 19243;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19244;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19245;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19246;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19247;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR = 19248;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19249;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19250;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19251;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19252;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_RESET = 19253;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_SUBERROR = 19254;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS = 19255;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19256;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19257;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19258;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19259;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19260;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19261;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19262;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19263;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19264;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19265;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19266;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19267;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19268;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19269;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19270;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19271;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19272;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19273;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19274;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19275;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19276;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19277;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19278;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19279;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19280;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19281;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19282;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19283;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19284;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19285;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES = 19286;

const int UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS =
    19287;

const int
    UA_NS0ID_PUBSUBCONNECTIONTYPE_DIAGNOSTICS_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    19288;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_SERVERID = 19289;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTAUDITENTRYID =
    19290;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_CLIENTUSERID = 19291;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PARAMETERDATATYPEID =
    19292;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_PERFORMINSERTREPLACE =
    19293;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_NEWVALUES = 19294;

const int UA_NS0ID_AUDITHISTORYANNOTATIONUPDATEEVENTTYPE_OLDVALUES = 19295;

const int UA_NS0ID_TRUSTLISTTYPE_UPDATEFREQUENCY = 19296;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE = 19297;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTID = 19298;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_EVENTTYPE = 19299;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENODE = 19300;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SOURCENAME = 19301;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TIME = 19302;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RECEIVETIME = 19303;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LOCALTIME = 19304;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MESSAGE = 19305;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SEVERITY = 19306;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSID = 19307;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONCLASSNAME = 19308;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSID = 19309;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONSUBCLASSNAME = 19310;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONNAME = 19311;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_BRANCHID = 19312;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RETAIN = 19313;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE = 19314;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_ID = 19315;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NAME = 19316;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_NUMBER = 19317;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVEDISPLAYNAME =
    19318;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRANSITIONTIME =
    19319;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_EFFECTIVETRANSITIONTIME =
    19320;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_TRUESTATE = 19321;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLEDSTATE_FALSESTATE = 19322;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY = 19323;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_QUALITY_SOURCETIMESTAMP = 19324;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY = 19325;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTSEVERITY_SOURCETIMESTAMP =
    19326;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT = 19327;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_COMMENT_SOURCETIMESTAMP = 19328;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CLIENTUSERID = 19329;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_DISABLE = 19330;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ENABLE = 19331;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT = 19332;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ADDCOMMENT_INPUTARGUMENTS =
    19333;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH = 19334;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH_INPUTARGUMENTS =
    19335;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2 = 19336;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONDITIONREFRESH2_INPUTARGUMENTS =
    19337;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE = 19338;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_ID = 19339;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NAME = 19340;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_NUMBER = 19341;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVEDISPLAYNAME =
    19342;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRANSITIONTIME =
    19343;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_EFFECTIVETRANSITIONTIME =
    19344;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_TRUESTATE = 19345;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKEDSTATE_FALSESTATE = 19346;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE = 19347;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_ID = 19348;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NAME = 19349;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_NUMBER = 19350;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVEDISPLAYNAME =
    19351;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRANSITIONTIME =
    19352;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_EFFECTIVETRANSITIONTIME =
    19353;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_TRUESTATE = 19354;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRMEDSTATE_FALSESTATE =
    19355;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE = 19356;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACKNOWLEDGE_INPUTARGUMENTS =
    19357;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM = 19358;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_CONFIRM_INPUTARGUMENTS = 19359;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE = 19360;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_ID = 19361;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NAME = 19362;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_NUMBER = 19363;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVEDISPLAYNAME =
    19364;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRANSITIONTIME =
    19365;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_EFFECTIVETRANSITIONTIME =
    19366;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_TRUESTATE = 19367;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ACTIVESTATE_FALSESTATE = 19368;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_INPUTNODE = 19369;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE = 19370;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_ID = 19371;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NAME = 19372;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_NUMBER = 19373;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVEDISPLAYNAME =
    19374;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRANSITIONTIME =
    19375;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_EFFECTIVETRANSITIONTIME =
    19376;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_TRUESTATE =
    19377;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDSTATE_FALSESTATE =
    19378;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE = 19379;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_ID = 19380;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NAME = 19381;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_NUMBER = 19382;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVEDISPLAYNAME =
    19383;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRANSITIONTIME =
    19384;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_EFFECTIVETRANSITIONTIME =
    19385;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_TRUESTATE =
    19386;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OUTOFSERVICESTATE_FALSESTATE =
    19387;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE = 19388;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE =
    19389;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_ID =
    19390;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NAME =
    19391;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_NUMBER =
    19392;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_CURRENTSTATE_EFFECTIVEDISPLAYNAME =
    19393;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION =
    19394;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_ID =
    19395;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NAME =
    19396;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_NUMBER =
    19397;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_TRANSITIONTIME =
    19398;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_LASTTRANSITION_EFFECTIVETRANSITIONTIME =
    19399;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLESTATES =
    19400;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_AVAILABLETRANSITIONS =
    19401;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVETIME =
    19402;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE =
    19403;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_TIMEDSHELVE_INPUTARGUMENTS =
    19404;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_UNSHELVE = 19405;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SHELVINGSTATE_ONESHOTSHELVE =
    19406;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESSEDORSHELVED = 19407;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_MAXTIMESHELVED = 19408;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLEENABLED = 19409;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND = 19410;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_LISTID = 19411;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_AGENCYID = 19412;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_AUDIBLESOUND_VERSIONID = 19413;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE = 19414;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_ID = 19415;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NAME = 19416;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_NUMBER = 19417;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVEDISPLAYNAME =
    19418;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRANSITIONTIME =
    19419;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_EFFECTIVETRANSITIONTIME =
    19420;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_TRUESTATE = 19421;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCESTATE_FALSESTATE = 19422;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ONDELAY = 19423;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_OFFDELAY = 19424;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUPFLAG = 19425;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_FIRSTINGROUP = 19426;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE = 19427;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_ID = 19428;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NAME = 19429;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_NUMBER = 19430;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVEDISPLAYNAME =
    19431;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRANSITIONTIME =
    19432;

const int
    UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_EFFECTIVETRANSITIONTIME =
    19433;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_TRUESTATE = 19434;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LATCHEDSTATE_FALSESTATE = 19435;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_ALARMGROUP_PLACEHOLDER = 19436;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMTIME = 19437;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REALARMREPEATCOUNT = 19438;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SILENCE = 19439;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_SUPPRESS = 19440;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UNSUPPRESS = 19441;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_REMOVEFROMSERVICE = 19442;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_PLACEINSERVICE = 19443;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_RESET = 19444;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_NORMALSTATE = 19445;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_TRUSTLISTID = 19446;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_LASTUPDATETIME = 19447;

const int UA_NS0ID_TRUSTLISTOUTOFDATEALARMTYPE_UPDATEFREQUENCY = 19448;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_TRUSTLIST_UPDATEFREQUENCY = 19449;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS = 19550;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19551;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19552;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19553;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19554;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19555;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19556;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR = 19557;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19558;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19559;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19560;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19561;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_RESET = 19562;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_SUBERROR = 19563;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS = 19564;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19565;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19566;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19567;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19568;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19569;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19570;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19571;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19572;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19573;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19574;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19575;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19576;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19577;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19578;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19579;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19580;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19581;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19582;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19583;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19584;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19585;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19586;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19587;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19588;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19589;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19590;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19591;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19592;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19593;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19594;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES = 19595;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19596;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19597;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19598;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19599;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19600;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19601;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19602;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19603;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19604;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19605;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19606;

const int UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19607;

const int
    UA_NS0ID_DATASETWRITERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19608;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS = 19609;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 19610;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION = 19611;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE =
    19612;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    19613;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19614;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19615;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR = 19616;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 19617;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    19618;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    19619;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    19620;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_RESET = 19621;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_SUBERROR = 19622;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS = 19623;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 19624;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    19625;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    19626;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19627;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19628;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    19629;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19630;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19631;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19632;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19633;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    19634;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19635;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19636;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19637;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19638;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    19639;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19640;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19641;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19642;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19643;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    19644;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19645;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19646;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19647;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19648;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    19649;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19650;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19651;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19652;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19653;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES = 19654;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES =
    19655;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    19656;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    19657;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    19658;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    19659;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    19660;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19661;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19662;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19663;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19664;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER =
    19665;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    19666;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE = 19667;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    19668;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION =
    19669;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    19670;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION =
    19671;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    19672;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    19673;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19674;

const int UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    19675;

const int
    UA_NS0ID_DATASETREADERTYPE_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19676;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE = 19677;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_DIAGNOSTICSLEVEL = 19678;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION = 19679;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_ACTIVE = 19680;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_CLASSIFICATION =
    19681;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19682;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19683;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR = 19684;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_ACTIVE = 19685;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_CLASSIFICATION = 19686;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_DIAGNOSTICSLEVEL = 19687;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19688;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_RESET = 19689;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_SUBERROR = 19690;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS = 19691;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR = 19692;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_ACTIVE = 19693;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19694;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19695;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19696;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19697;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19698;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19699;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19700;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19701;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19702;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19703;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19704;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19705;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19706;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19707;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19708;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19709;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19710;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19711;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT = 19712;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19713;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19714;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19715;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19716;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD = 19717;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19718;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19719;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19720;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19721;

const int UA_NS0ID_PUBSUBDIAGNOSTICSTYPE_LIVEVALUES = 19722;

const int UA_NS0ID_DIAGNOSTICSLEVEL = 19723;

const int UA_NS0ID_DIAGNOSTICSLEVEL_ENUMSTRINGS = 19724;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE = 19725;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_ACTIVE = 19726;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_CLASSIFICATION = 19727;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_DIAGNOSTICSLEVEL = 19728;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERTYPE_TIMEFIRSTCHANGE = 19729;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION = 19730;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCOUNTERCLASSIFICATION_ENUMSTRINGS = 19731;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE = 19732;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_DIAGNOSTICSLEVEL = 19733;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION = 19734;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_ACTIVE = 19735;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_CLASSIFICATION =
    19736;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19737;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19738;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR = 19739;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_ACTIVE = 19740;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_CLASSIFICATION = 19741;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19742;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_TOTALERROR_TIMEFIRSTCHANGE = 19743;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_RESET = 19744;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_SUBERROR = 19745;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS = 19746;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR = 19747;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_ACTIVE = 19748;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19749;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19750;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19751;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19752;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19753;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19754;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19755;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19756;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19757;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19758;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19759;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19760;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19761;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19762;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19763;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19764;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19765;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19766;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19767;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19768;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19769;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19770;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19771;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19772;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19773;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19774;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19775;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19776;

const int UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES = 19777;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19778;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19779;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19780;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19781;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19782;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19783;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS =
    19784;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSROOTTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19785;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE = 19786;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_DIAGNOSTICSLEVEL = 19787;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION = 19788;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_ACTIVE =
    19789;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_CLASSIFICATION =
    19790;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19791;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19792;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR = 19793;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_ACTIVE = 19794;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_CLASSIFICATION =
    19795;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19796;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19797;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_RESET = 19798;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_SUBERROR = 19799;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS = 19800;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR = 19801;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_ACTIVE =
    19802;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19803;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19804;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19805;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19806;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19807;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19808;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19809;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19810;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19811;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19812;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19813;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19814;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19815;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19816;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19817;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19818;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19819;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19820;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19821;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19822;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19823;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19824;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19825;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19826;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19827;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19828;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19829;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19830;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES = 19831;

const int UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS =
    19832;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSCONNECTIONTYPE_LIVEVALUES_RESOLVEDADDRESS_DIAGNOSTICSLEVEL =
    19833;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE = 19834;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_DIAGNOSTICSLEVEL = 19835;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION = 19836;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_ACTIVE =
    19837;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION =
    19838;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19839;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19840;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR = 19841;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_ACTIVE = 19842;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_CLASSIFICATION =
    19843;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19844;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19845;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_RESET = 19846;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_SUBERROR = 19847;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS = 19848;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR = 19849;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE =
    19850;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19851;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19852;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19853;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19854;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19855;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19856;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19857;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19858;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19859;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19860;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19861;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19862;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19863;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19864;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19865;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19866;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19867;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19868;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19869;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19870;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19871;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19872;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19873;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19874;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19875;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19876;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19877;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19878;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES = 19879;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES =
    19880;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_ACTIVE =
    19881;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_CLASSIFICATION =
    19882;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19883;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_SENTNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19884;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS =
    19885;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_ACTIVE =
    19886;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_CLASSIFICATION =
    19887;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_DIAGNOSTICSLEVEL =
    19888;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_FAILEDTRANSMISSIONS_TIMEFIRSTCHANGE =
    19889;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS =
    19890;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_ACTIVE =
    19891;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_CLASSIFICATION =
    19892;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19893;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_COUNTERS_ENCRYPTIONERRORS_TIMEFIRSTCHANGE =
    19894;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS =
    19895;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETWRITERS_DIAGNOSTICSLEVEL =
    19896;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS =
    19897;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETWRITERS_DIAGNOSTICSLEVEL =
    19898;

const int UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID =
    19899;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    19900;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID =
    19901;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSWRITERGROUPTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    19902;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE = 19903;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_DIAGNOSTICSLEVEL = 19904;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION = 19905;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_ACTIVE =
    19906;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_CLASSIFICATION =
    19907;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19908;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19909;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR = 19910;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_ACTIVE = 19911;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_CLASSIFICATION =
    19912;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19913;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19914;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_RESET = 19915;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_SUBERROR = 19916;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS = 19917;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR = 19918;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_ACTIVE =
    19919;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19920;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19921;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19922;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19923;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19924;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19925;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19926;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19927;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19928;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19929;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19930;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19931;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19932;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19933;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19934;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    19935;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    19936;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    19937;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    19938;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    19939;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    19940;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    19941;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    19942;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    19943;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    19944;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    19945;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    19946;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    19947;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES = 19948;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES =
    19949;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    19950;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    19951;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19952;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19953;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    19954;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    19955;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    19956;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    19957;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    19958;

const int UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS =
    19959;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    19960;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    19961;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    19962;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    19963;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS =
    19964;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    19965;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS =
    19966;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSREADERGROUPTYPE_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    19967;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE = 19968;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_DIAGNOSTICSLEVEL = 19969;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION = 19970;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_ACTIVE =
    19971;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_CLASSIFICATION =
    19972;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    19973;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    19974;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR = 19975;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_ACTIVE = 19976;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_CLASSIFICATION =
    19977;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    19978;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    19979;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_RESET = 19980;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_SUBERROR = 19981;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS = 19982;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR =
    19983;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_ACTIVE =
    19984;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    19985;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    19986;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    19987;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    19988;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    19989;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    19990;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    19991;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    19992;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    19993;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    19994;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    19995;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    19996;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    19997;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    19998;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    19999;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    20000;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    20001;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    20002;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    20003;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    20004;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    20005;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    20006;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    20007;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    20008;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    20009;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    20010;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    20011;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    20012;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES = 20013;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES =
    20014;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    20015;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    20016;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    20017;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    20018;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER =
    20019;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    20020;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE =
    20021;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    20022;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION =
    20023;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    20024;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION =
    20025;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETWRITERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    20026;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE = 20027;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_DIAGNOSTICSLEVEL = 20028;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION = 20029;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_ACTIVE =
    20030;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_CLASSIFICATION =
    20031;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    20032;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALINFORMATION_TIMEFIRSTCHANGE =
    20033;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR = 20034;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_ACTIVE = 20035;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_CLASSIFICATION =
    20036;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_DIAGNOSTICSLEVEL =
    20037;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_TOTALERROR_TIMEFIRSTCHANGE =
    20038;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_RESET = 20039;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_SUBERROR = 20040;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS = 20041;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR =
    20042;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_ACTIVE =
    20043;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_CLASSIFICATION =
    20044;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    20045;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    20046;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD =
    20047;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    20048;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    20049;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    20050;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    20051;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT =
    20052;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    20053;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    20054;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    20055;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    20056;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR =
    20057;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    20058;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    20059;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    20060;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    20061;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT =
    20062;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    20063;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    20064;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    20065;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    20066;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD =
    20067;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    20068;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    20069;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    20070;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    20071;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES = 20072;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES =
    20073;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_ACTIVE =
    20074;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_CLASSIFICATION =
    20075;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_DIAGNOSTICSLEVEL =
    20076;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_FAILEDDATASETMESSAGES_TIMEFIRSTCHANGE =
    20077;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS =
    20078;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    20079;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    20080;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    20081;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    20082;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER =
    20083;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MESSAGESEQUENCENUMBER_DIAGNOSTICSLEVEL =
    20084;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE =
    20085;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_STATUSCODE_DIAGNOSTICSLEVEL =
    20086;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION =
    20087;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MAJORVERSION_DIAGNOSTICSLEVEL =
    20088;

const int UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION =
    20089;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_MINORVERSION_DIAGNOSTICSLEVEL =
    20090;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID =
    20091;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    20092;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID =
    20093;

const int
    UA_NS0ID_PUBSUBDIAGNOSTICSDATASETREADERTYPE_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    20094;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20290;

const int UA_NS0ID_DATASETORDERINGTYPE = 20408;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID =
    20409;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20588;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    20884;

const int UA_NS0ID_VERSIONTIME = 20998;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE = 20999;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTXML = 21000;

const int UA_NS0ID_SESSIONLESSINVOKERESPONSETYPE_ENCODING_DEFAULTBINARY = 21001;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_FIELDTARGETDATATYPE = 21002;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_SECURITYTOKENID_DIAGNOSTICSLEVEL =
    21003;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID =
    21004;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_DIAGNOSTICS_LIVEVALUES_TIMETONEXTTOKENID_DIAGNOSTICSLEVEL =
    21005;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_SUBSCRIBEDDATASET =
    21006;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES =
    21009;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_INPUTARGUMENTS =
    21010;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATETARGETVARIABLES_OUTPUTARGUMENTS =
    21011;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR =
    21012;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_INPUTARGUMENTS =
    21013;

const int
    UA_NS0ID_READERGROUPTYPE_DATASETREADERNAME_PLACEHOLDER_CREATEDATASETMIRROR_OUTPUTARGUMENTS =
    21014;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS = 21015;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_DIAGNOSTICSLEVEL = 21016;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION = 21017;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_ACTIVE = 21018;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_CLASSIFICATION =
    21019;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_DIAGNOSTICSLEVEL =
    21020;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALINFORMATION_TIMEFIRSTCHANGE =
    21021;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR = 21022;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_ACTIVE = 21023;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_CLASSIFICATION =
    21024;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_DIAGNOSTICSLEVEL =
    21025;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_TOTALERROR_TIMEFIRSTCHANGE =
    21026;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_RESET = 21027;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_SUBERROR = 21028;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS = 21029;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR = 21030;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_ACTIVE =
    21031;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_CLASSIFICATION =
    21032;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_DIAGNOSTICSLEVEL =
    21033;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEERROR_TIMEFIRSTCHANGE =
    21034;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD =
    21035;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_ACTIVE =
    21036;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_CLASSIFICATION =
    21037;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_DIAGNOSTICSLEVEL =
    21038;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYMETHOD_TIMEFIRSTCHANGE =
    21039;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT =
    21040;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_ACTIVE =
    21041;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_CLASSIFICATION =
    21042;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_DIAGNOSTICSLEVEL =
    21043;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALBYPARENT_TIMEFIRSTCHANGE =
    21044;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR =
    21045;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_ACTIVE =
    21046;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_CLASSIFICATION =
    21047;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_DIAGNOSTICSLEVEL =
    21048;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEOPERATIONALFROMERROR_TIMEFIRSTCHANGE =
    21049;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT =
    21050;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_ACTIVE =
    21051;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_CLASSIFICATION =
    21052;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_DIAGNOSTICSLEVEL =
    21053;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEPAUSEDBYPARENT_TIMEFIRSTCHANGE =
    21054;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD =
    21055;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_ACTIVE =
    21056;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_CLASSIFICATION =
    21057;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_DIAGNOSTICSLEVEL =
    21058;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_STATEDISABLEDBYMETHOD_TIMEFIRSTCHANGE =
    21059;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES = 21060;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES =
    21061;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_ACTIVE =
    21062;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_CLASSIFICATION =
    21063;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    21064;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    21065;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES =
    21066;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_ACTIVE =
    21067;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_CLASSIFICATION =
    21068;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_DIAGNOSTICSLEVEL =
    21069;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_RECEIVEDINVALIDNETWORKMESSAGES_TIMEFIRSTCHANGE =
    21070;

const int UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS =
    21071;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_ACTIVE =
    21072;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_CLASSIFICATION =
    21073;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_DIAGNOSTICSLEVEL =
    21074;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_COUNTERS_DECRYPTIONERRORS_TIMEFIRSTCHANGE =
    21075;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS =
    21076;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_CONFIGUREDDATASETREADERS_DIAGNOSTICSLEVEL =
    21077;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS =
    21078;

const int
    UA_NS0ID_READERGROUPTYPE_DIAGNOSTICS_LIVEVALUES_OPERATIONALDATASETREADERS_DIAGNOSTICSLEVEL =
    21079;

const int UA_NS0ID_READERGROUPTYPE_TRANSPORTSETTINGS = 21080;

const int UA_NS0ID_READERGROUPTYPE_MESSAGESETTINGS = 21081;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER = 21082;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_INPUTARGUMENTS = 21083;

const int UA_NS0ID_READERGROUPTYPE_ADDDATASETREADER_OUTPUTARGUMENTS = 21084;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER = 21085;

const int UA_NS0ID_READERGROUPTYPE_REMOVEDATASETREADER_INPUTARGUMENTS = 21086;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE = 21087;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_INPUTARGUMENTS = 21088;

const int UA_NS0ID_PUBSUBGROUPTYPEADDREADERMETHODTYPE_OUTPUTARGUMENTS = 21089;

const int UA_NS0ID_READERGROUPTRANSPORTTYPE = 21090;

const int UA_NS0ID_READERGROUPMESSAGETYPE = 21091;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETWRITERID = 21092;

const int UA_NS0ID_DATASETWRITERTYPE_DATASETFIELDCONTENTMASK = 21093;

const int UA_NS0ID_DATASETWRITERTYPE_KEYFRAMECOUNT = 21094;

const int UA_NS0ID_DATASETWRITERTYPE_MESSAGESETTINGS = 21095;

const int UA_NS0ID_DATASETWRITERMESSAGETYPE = 21096;

const int UA_NS0ID_DATASETREADERTYPE_PUBLISHERID = 21097;

const int UA_NS0ID_DATASETREADERTYPE_WRITERGROUPID = 21098;

const int UA_NS0ID_DATASETREADERTYPE_DATASETWRITERID = 21099;

const int UA_NS0ID_DATASETREADERTYPE_DATASETMETADATA = 21100;

const int UA_NS0ID_DATASETREADERTYPE_DATASETFIELDCONTENTMASK = 21101;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGERECEIVETIMEOUT = 21102;

const int UA_NS0ID_DATASETREADERTYPE_MESSAGESETTINGS = 21103;

const int UA_NS0ID_DATASETREADERMESSAGETYPE = 21104;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE = 21105;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_GROUPVERSION = 21106;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_DATASETORDERING = 21107;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21108;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_SAMPLINGOFFSET = 21109;

const int UA_NS0ID_UADPWRITERGROUPMESSAGETYPE_PUBLISHINGOFFSET = 21110;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE = 21111;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21112;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_CONFIGUREDSIZE = 21113;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_NETWORKMESSAGENUMBER = 21114;

const int UA_NS0ID_UADPDATASETWRITERMESSAGETYPE_DATASETOFFSET = 21115;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE = 21116;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_GROUPVERSION = 21117;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGENUMBER = 21119;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETCLASSID = 21120;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK =
    21121;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21122;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PUBLISHINGINTERVAL = 21123;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_PROCESSINGOFFSET = 21124;

const int UA_NS0ID_UADPDATASETREADERMESSAGETYPE_RECEIVEOFFSET = 21125;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE = 21126;

const int UA_NS0ID_JSONWRITERGROUPMESSAGETYPE_NETWORKMESSAGECONTENTMASK = 21127;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE = 21128;

const int UA_NS0ID_JSONDATASETWRITERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21129;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE = 21130;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_NETWORKMESSAGECONTENTMASK =
    21131;

const int UA_NS0ID_JSONDATASETREADERMESSAGETYPE_DATASETMESSAGECONTENTMASK =
    21132;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE = 21133;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATCOUNT = 21134;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTTYPE_MESSAGEREPEATDELAY = 21135;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE = 21136;

const int UA_NS0ID_BROKERWRITERGROUPTRANSPORTTYPE_QUEUENAME = 21137;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE = 21138;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_QUEUENAME = 21139;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAQUEUENAME = 21140;

const int UA_NS0ID_BROKERDATASETWRITERTRANSPORTTYPE_METADATAUPDATETIME = 21141;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE = 21142;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_QUEUENAME = 21143;

const int UA_NS0ID_BROKERDATASETREADERTRANSPORTTYPE_METADATAQUEUENAME = 21144;

const int UA_NS0ID_NETWORKADDRESSTYPE = 21145;

const int UA_NS0ID_NETWORKADDRESSTYPE_NETWORKINTERFACE = 21146;

const int UA_NS0ID_NETWORKADDRESSURLTYPE = 21147;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_NETWORKINTERFACE = 21148;

const int UA_NS0ID_NETWORKADDRESSURLTYPE_URL = 21149;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21150;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTBINARY = 21151;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTBINARY = 21152;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTBINARY = 21153;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTBINARY = 21154;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTBINARY =
    21155;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE = 21156;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION =
    21157;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21158;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE = 21159;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION =
    21160;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT =
    21161;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE = 21162;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION =
    21163;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT =
    21164;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE = 21165;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION =
    21166;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21167;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21168;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION =
    21169;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT =
    21170;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE =
    21171;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    21172;

const int
    UA_NS0ID_OPCUA_BINARYSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    21173;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTXML = 21174;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTXML = 21175;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTXML = 21176;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTXML = 21177;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTXML = 21178;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTXML =
    21179;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE = 21180;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DATATYPEVERSION = 21181;

const int UA_NS0ID_OPCUA_XMLSCHEMA_WRITERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21182;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE = 21183;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DATATYPEVERSION =
    21184;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSDATATYPE_DICTIONARYFRAGMENT =
    21185;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE = 21186;

const int UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DATATYPEVERSION =
    21187;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_NETWORKADDRESSURLDATATYPE_DICTIONARYFRAGMENT =
    21188;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE = 21189;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DATATYPEVERSION = 21190;

const int UA_NS0ID_OPCUA_XMLSCHEMA_READERGROUPDATATYPE_DICTIONARYFRAGMENT =
    21191;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE = 21192;

const int UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DATATYPEVERSION =
    21193;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_PUBSUBCONFIGURATIONDATATYPE_DICTIONARYFRAGMENT =
    21194;

const int UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 21195;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DATATYPEVERSION =
    21196;

const int
    UA_NS0ID_OPCUA_XMLSCHEMA_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_DICTIONARYFRAGMENT =
    21197;

const int UA_NS0ID_WRITERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21198;

const int UA_NS0ID_NETWORKADDRESSDATATYPE_ENCODING_DEFAULTJSON = 21199;

const int UA_NS0ID_NETWORKADDRESSURLDATATYPE_ENCODING_DEFAULTJSON = 21200;

const int UA_NS0ID_READERGROUPDATATYPE_ENCODING_DEFAULTJSON = 21201;

const int UA_NS0ID_PUBSUBCONFIGURATIONDATATYPE_ENCODING_DEFAULTJSON = 21202;

const int UA_NS0ID_DATAGRAMWRITERGROUPTRANSPORTDATATYPE_ENCODING_DEFAULTJSON =
    21203;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_TRUSTLIST_UPDATEFREQUENCY =
    21383;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    21679;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    21975;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22271;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22567;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_TRUSTLIST_UPDATEFREQUENCY =
    22863;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_TRUSTLIST_UPDATEFREQUENCY =
    23159;

const int UA_NS0ID_ALIASNAMETYPE = 23455;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE = 23456;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_ALIAS_PLACEHOLDER = 23457;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER =
    23458;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS =
    23459;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23460;

const int
    UA_NS0ID_ALIASNAMECATEGORYTYPE_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23461;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS = 23462;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_INPUTARGUMENTS = 23463;

const int UA_NS0ID_ALIASNAMECATEGORYTYPE_FINDALIAS_OUTPUTARGUMENTS = 23464;

const int UA_NS0ID_FINDALIASMETHODTYPE = 23465;

const int UA_NS0ID_FINDALIASMETHODTYPE_INPUTARGUMENTS = 23466;

const int UA_NS0ID_FINDALIASMETHODTYPE_OUTPUTARGUMENTS = 23467;

const int UA_NS0ID_ALIASNAMEDATATYPE = 23468;

const int UA_NS0ID_ALIASFOR = 23469;

const int UA_NS0ID_ALIASES = 23470;

const int UA_NS0ID_ALIASES_ALIAS_PLACEHOLDER = 23471;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23472;

const int UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23473;

const int
    UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23474;

const int
    UA_NS0ID_ALIASES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23475;

const int UA_NS0ID_ALIASES_FINDALIAS = 23476;

const int UA_NS0ID_ALIASES_FINDALIAS_INPUTARGUMENTS = 23477;

const int UA_NS0ID_ALIASES_FINDALIAS_OUTPUTARGUMENTS = 23478;

const int UA_NS0ID_TAGVARIABLES = 23479;

const int UA_NS0ID_TAGVARIABLES_ALIAS_PLACEHOLDER = 23480;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23481;

const int UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS =
    23482;

const int
    UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23483;

const int
    UA_NS0ID_TAGVARIABLES_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23484;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS = 23485;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_INPUTARGUMENTS = 23486;

const int UA_NS0ID_TAGVARIABLES_FINDALIAS_OUTPUTARGUMENTS = 23487;

const int UA_NS0ID_TOPICS = 23488;

const int UA_NS0ID_TOPICS_ALIAS_PLACEHOLDER = 23489;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER = 23490;

const int UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS = 23491;

const int
    UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_INPUTARGUMENTS =
    23492;

const int
    UA_NS0ID_TOPICS_SUBALIASNAMECATEGORIES_PLACEHOLDER_FINDALIAS_OUTPUTARGUMENTS =
    23493;

const int UA_NS0ID_TOPICS_FINDALIAS = 23494;

const int UA_NS0ID_TOPICS_FINDALIAS_INPUTARGUMENTS = 23495;

const int UA_NS0ID_TOPICS_FINDALIAS_OUTPUTARGUMENTS = 23496;

const int UA_NS0ID_READANNOTATIONDATADETAILS = 23497;

const int UA_NS0ID_CURRENCYUNITTYPE = 23498;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTBINARY = 23499;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTBINARY = 23500;

const int UA_NS0ID_CURRENCYUNIT = 23501;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE = 23502;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23503;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT =
    23504;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTXML = 23505;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTXML = 23506;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTBINARY = 23507;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE = 23508;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DATATYPEVERSION = 23509;

const int UA_NS0ID_OPCUA_XMLSCHEMA_ALIASNAMEDATATYPE_DICTIONARYFRAGMENT = 23510;

const int UA_NS0ID_ALIASNAMEDATATYPE_ENCODING_DEFAULTJSON = 23511;

const int UA_NS0ID_READANNOTATIONDATADETAILS_ENCODING_DEFAULTJSON = 23512;

const int UA_NS0ID_IORDEREDOBJECTTYPE = 23513;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE = 23514;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23515;

const int UA_NS0ID_OPCUA_BINARYSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT =
    23516;

const int UA_NS0ID_IORDEREDOBJECTTYPE_NUMBERINLIST = 23517;

const int UA_NS0ID_ORDEREDLISTTYPE = 23518;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER = 23519;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTXML = 23520;

const int UA_NS0ID_ORDEREDLISTTYPE_ORDEREDOBJECT_PLACEHOLDER_NUMBERINLIST =
    23521;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE = 23522;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DATATYPEVERSION = 23523;

const int UA_NS0ID_OPCUA_XMLSCHEMA_CURRENCYUNITTYPE_DICTIONARYFRAGMENT = 23524;

const int UA_NS0ID_ORDEREDLISTTYPE_NODEVERSION = 23525;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST = 23526;

const int UA_NS0ID_CERTIFICATEGROUPTYPE_GETREJECTEDLIST_OUTPUTARGUMENTS = 23527;

const int UA_NS0ID_CURRENCYUNITTYPE_ENCODING_DEFAULTJSON = 23528;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23529;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23530;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23531;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23532;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23533;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23534;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST =
    23535;

const int
    UA_NS0ID_CERTIFICATEGROUPFOLDERTYPE_ADDITIONALGROUP_PLACEHOLDER_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23536;

const int UA_NS0ID_ECCAPPLICATIONCERTIFICATETYPE = 23537;

const int UA_NS0ID_ECCNISTP256APPLICATIONCERTIFICATETYPE = 23538;

const int UA_NS0ID_ECCNISTP384APPLICATIONCERTIFICATETYPE = 23539;

const int UA_NS0ID_ECCBRAINPOOLP256R1APPLICATIONCERTIFICATETYPE = 23540;

const int UA_NS0ID_ECCBRAINPOOLP384R1APPLICATIONCERTIFICATETYPE = 23541;

const int UA_NS0ID_ECCCURVE25519APPLICATIONCERTIFICATETYPE = 23542;

const int UA_NS0ID_ECCCURVE448APPLICATIONCERTIFICATETYPE = 23543;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23544;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23545;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23546;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23547;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23548;

const int
    UA_NS0ID_SERVERCONFIGURATIONTYPE_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23549;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST =
    23550;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTAPPLICATIONGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23551;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST =
    23552;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTHTTPSGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23553;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST =
    23554;

const int
    UA_NS0ID_SERVERCONFIGURATION_CERTIFICATEGROUPS_DEFAULTUSERTOKENGROUP_GETREJECTEDLIST_OUTPUTARGUMENTS =
    23555;

const int UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE = 23556;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER =
    23557;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICEURI =
    23558;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_SERVICECERTIFICATE =
    23559;

const int
    UA_NS0ID_AUTHORIZATIONSERVICESCONFIGURATIONFOLDERTYPE_SERVICENAME_PLACEHOLDER_ISSUERENDPOINTURL =
    23560;

const int UA_ACCESSLEVELMASK_READ = 1;

const int UA_ACCESSLEVELMASK_WRITE = 2;

const int UA_ACCESSLEVELMASK_HISTORYREAD = 4;

const int UA_ACCESSLEVELMASK_HISTORYWRITE = 8;

const int UA_ACCESSLEVELMASK_SEMANTICCHANGE = 16;

const int UA_ACCESSLEVELMASK_STATUSWRITE = 32;

const int UA_ACCESSLEVELMASK_TIMESTAMPWRITE = 64;

const int UA_WRITEMASK_ACCESSLEVEL = 1;

const int UA_WRITEMASK_ARRRAYDIMENSIONS = 2;

const int UA_WRITEMASK_BROWSENAME = 4;

const int UA_WRITEMASK_CONTAINSNOLOOPS = 8;

const int UA_WRITEMASK_DATATYPE = 16;

const int UA_WRITEMASK_DESCRIPTION = 32;

const int UA_WRITEMASK_DISPLAYNAME = 64;

const int UA_WRITEMASK_EVENTNOTIFIER = 128;

const int UA_WRITEMASK_EXECUTABLE = 256;

const int UA_WRITEMASK_HISTORIZING = 512;

const int UA_WRITEMASK_INVERSENAME = 1024;

const int UA_WRITEMASK_ISABSTRACT = 2048;

const int UA_WRITEMASK_MINIMUMSAMPLINGINTERVAL = 4096;

const int UA_WRITEMASK_NODECLASS = 8192;

const int UA_WRITEMASK_NODEID = 16384;

const int UA_WRITEMASK_SYMMETRIC = 32768;

const int UA_WRITEMASK_USERACCESSLEVEL = 65536;

const int UA_WRITEMASK_USEREXECUTABLE = 131072;

const int UA_WRITEMASK_USERWRITEMASK = 262144;

const int UA_WRITEMASK_VALUERANK = 524288;

const int UA_WRITEMASK_WRITEMASK = 1048576;

const int UA_WRITEMASK_VALUEFORVARIABLETYPE = 2097152;

const int UA_VALUERANK_SCALAR_OR_ONE_DIMENSION = -3;

const int UA_VALUERANK_ANY = -2;

const int UA_VALUERANK_SCALAR = -1;

const int UA_VALUERANK_ONE_OR_MORE_DIMENSIONS = 0;

const int UA_VALUERANK_ONE_DIMENSION = 1;

const int UA_VALUERANK_TWO_DIMENSIONS = 2;

const int UA_VALUERANK_THREE_DIMENSIONS = 3;

const int UA_EVENTNOTIFIER_SUBSCRIBE_TO_EVENT = 1;

const int UA_EVENTNOTIFIER_HISTORY_READ = 4;

const int UA_EVENTNOTIFIER_HISTORY_WRITE = 8;

const int UA_TRUE = 1;

const int UA_FALSE = 0;

const int UA_SBYTE_MIN = -128;

const int UA_SBYTE_MAX = 127;

const int UA_BYTE_MIN = 0;

const int UA_BYTE_MAX = 255;

const int UA_INT16_MIN = -32768;

const int UA_INT16_MAX = 32767;

const int UA_UINT16_MIN = 0;

const int UA_UINT16_MAX = 65535;

const int UA_INT32_MIN = -2147483648;

const int UA_INT32_MAX = 2147483647;

const int UA_UINT32_MIN = 0;

const int UA_UINT32_MAX = 4294967295;

const int UA_INT64_MAX = 9223372036854775807;

const int UA_INT64_MIN = -9223372036854775808;

const int UA_UINT64_MIN = 0;

const int UA_UINT64_MAX = -1;

const int UA_DATETIME_USEC = 10;

const int UA_DATETIME_MSEC = 10000;

const int UA_DATETIME_SEC = 10000000;

const int UA_DATETIME_UNIX_EPOCH = 116444736000000000;

const int UA_DATATYPEKINDS = 31;

const int UA_TYPES_COUNT = 236;

const int UA_TYPES_BOOLEAN = 0;

const int UA_TYPES_SBYTE = 1;

const int UA_TYPES_BYTE = 2;

const int UA_TYPES_INT16 = 3;

const int UA_TYPES_UINT16 = 4;

const int UA_TYPES_INT32 = 5;

const int UA_TYPES_UINT32 = 6;

const int UA_TYPES_INT64 = 7;

const int UA_TYPES_UINT64 = 8;

const int UA_TYPES_FLOAT = 9;

const int UA_TYPES_DOUBLE = 10;

const int UA_TYPES_STRING = 11;

const int UA_TYPES_DATETIME = 12;

const int UA_TYPES_GUID = 13;

const int UA_TYPES_BYTESTRING = 14;

const int UA_TYPES_XMLELEMENT = 15;

const int UA_TYPES_NODEID = 16;

const int UA_TYPES_EXPANDEDNODEID = 17;

const int UA_TYPES_STATUSCODE = 18;

const int UA_TYPES_QUALIFIEDNAME = 19;

const int UA_TYPES_LOCALIZEDTEXT = 20;

const int UA_TYPES_EXTENSIONOBJECT = 21;

const int UA_TYPES_DATAVALUE = 22;

const int UA_TYPES_VARIANT = 23;

const int UA_TYPES_DIAGNOSTICINFO = 24;

const int UA_TYPES_KEYVALUEPAIR = 25;

const int UA_TYPES_SIMPLETYPEDESCRIPTION = 26;

const int UA_TYPES_PUBSUBSTATE = 27;

const int UA_DATASETFIELDFLAGS_NONE = 0;

const int UA_DATASETFIELDFLAGS_PROMOTEDFIELD = 1;

const int UA_TYPES_DATASETFIELDFLAGS = 28;

const int UA_TYPES_CONFIGURATIONVERSIONDATATYPE = 29;

const int UA_TYPES_PUBLISHEDVARIABLEDATATYPE = 30;

const int UA_TYPES_PUBLISHEDDATAITEMSDATATYPE = 31;

const int UA_DATASETFIELDCONTENTMASK_NONE = 0;

const int UA_DATASETFIELDCONTENTMASK_STATUSCODE = 1;

const int UA_DATASETFIELDCONTENTMASK_SOURCETIMESTAMP = 2;

const int UA_DATASETFIELDCONTENTMASK_SERVERTIMESTAMP = 4;

const int UA_DATASETFIELDCONTENTMASK_SOURCEPICOSECONDS = 8;

const int UA_DATASETFIELDCONTENTMASK_SERVERPICOSECONDS = 16;

const int UA_DATASETFIELDCONTENTMASK_RAWDATA = 32;

const int UA_TYPES_DATASETFIELDCONTENTMASK = 32;

const int UA_TYPES_DATASETWRITERDATATYPE = 33;

const int UA_TYPES_NETWORKADDRESSURLDATATYPE = 34;

const int UA_TYPES_OVERRIDEVALUEHANDLING = 35;

const int UA_TYPES_DATASETORDERINGTYPE = 36;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PUBLISHERID = 1;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPHEADER = 2;

const int UA_UADPNETWORKMESSAGECONTENTMASK_WRITERGROUPID = 4;

const int UA_UADPNETWORKMESSAGECONTENTMASK_GROUPVERSION = 8;

const int UA_UADPNETWORKMESSAGECONTENTMASK_NETWORKMESSAGENUMBER = 16;

const int UA_UADPNETWORKMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PAYLOADHEADER = 64;

const int UA_UADPNETWORKMESSAGECONTENTMASK_TIMESTAMP = 128;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PICOSECONDS = 256;

const int UA_UADPNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 512;

const int UA_UADPNETWORKMESSAGECONTENTMASK_PROMOTEDFIELDS = 1024;

const int UA_TYPES_UADPNETWORKMESSAGECONTENTMASK = 37;

const int UA_TYPES_UADPWRITERGROUPMESSAGEDATATYPE = 38;

const int UA_UADPDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_UADPDATASETMESSAGECONTENTMASK_TIMESTAMP = 1;

const int UA_UADPDATASETMESSAGECONTENTMASK_PICOSECONDS = 2;

const int UA_UADPDATASETMESSAGECONTENTMASK_STATUS = 4;

const int UA_UADPDATASETMESSAGECONTENTMASK_MAJORVERSION = 8;

const int UA_UADPDATASETMESSAGECONTENTMASK_MINORVERSION = 16;

const int UA_UADPDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 32;

const int UA_TYPES_UADPDATASETMESSAGECONTENTMASK = 39;

const int UA_TYPES_UADPDATASETWRITERMESSAGEDATATYPE = 40;

const int UA_TYPES_UADPDATASETREADERMESSAGEDATATYPE = 41;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONNETWORKMESSAGECONTENTMASK_NETWORKMESSAGEHEADER = 1;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETMESSAGEHEADER = 2;

const int UA_JSONNETWORKMESSAGECONTENTMASK_SINGLEDATASETMESSAGE = 4;

const int UA_JSONNETWORKMESSAGECONTENTMASK_PUBLISHERID = 8;

const int UA_JSONNETWORKMESSAGECONTENTMASK_DATASETCLASSID = 16;

const int UA_JSONNETWORKMESSAGECONTENTMASK_REPLYTO = 32;

const int UA_TYPES_JSONNETWORKMESSAGECONTENTMASK = 42;

const int UA_TYPES_JSONWRITERGROUPMESSAGEDATATYPE = 43;

const int UA_JSONDATASETMESSAGECONTENTMASK_NONE = 0;

const int UA_JSONDATASETMESSAGECONTENTMASK_DATASETWRITERID = 1;

const int UA_JSONDATASETMESSAGECONTENTMASK_METADATAVERSION = 2;

const int UA_JSONDATASETMESSAGECONTENTMASK_SEQUENCENUMBER = 4;

const int UA_JSONDATASETMESSAGECONTENTMASK_TIMESTAMP = 8;

const int UA_JSONDATASETMESSAGECONTENTMASK_STATUS = 16;

const int UA_TYPES_JSONDATASETMESSAGECONTENTMASK = 44;

const int UA_TYPES_JSONDATASETWRITERMESSAGEDATATYPE = 45;

const int UA_TYPES_JSONDATASETREADERMESSAGEDATATYPE = 46;

const int UA_TYPES_DATAGRAMCONNECTIONTRANSPORTDATATYPE = 47;

const int UA_TYPES_DATAGRAMWRITERGROUPTRANSPORTDATATYPE = 48;

const int UA_TYPES_BROKERCONNECTIONTRANSPORTDATATYPE = 49;

const int UA_TYPES_BROKERTRANSPORTQUALITYOFSERVICE = 50;

const int UA_TYPES_BROKERWRITERGROUPTRANSPORTDATATYPE = 51;

const int UA_TYPES_BROKERDATASETWRITERTRANSPORTDATATYPE = 52;

const int UA_TYPES_BROKERDATASETREADERTRANSPORTDATATYPE = 53;

const int UA_TYPES_NODECLASS = 54;

const int UA_PERMISSIONTYPE_NONE = 0;

const int UA_PERMISSIONTYPE_BROWSE = 1;

const int UA_PERMISSIONTYPE_READROLEPERMISSIONS = 2;

const int UA_PERMISSIONTYPE_WRITEATTRIBUTE = 4;

const int UA_PERMISSIONTYPE_WRITEROLEPERMISSIONS = 8;

const int UA_PERMISSIONTYPE_WRITEHISTORIZING = 16;

const int UA_PERMISSIONTYPE_READ = 32;

const int UA_PERMISSIONTYPE_WRITE = 64;

const int UA_PERMISSIONTYPE_READHISTORY = 128;

const int UA_PERMISSIONTYPE_INSERTHISTORY = 256;

const int UA_PERMISSIONTYPE_MODIFYHISTORY = 512;

const int UA_PERMISSIONTYPE_DELETEHISTORY = 1024;

const int UA_PERMISSIONTYPE_RECEIVEEVENTS = 2048;

const int UA_PERMISSIONTYPE_CALL = 4096;

const int UA_PERMISSIONTYPE_ADDREFERENCE = 8192;

const int UA_PERMISSIONTYPE_REMOVEREFERENCE = 16384;

const int UA_PERMISSIONTYPE_DELETENODE = 32768;

const int UA_PERMISSIONTYPE_ADDNODE = 65536;

const int UA_TYPES_PERMISSIONTYPE = 55;

const int UA_TYPES_ROLEPERMISSIONTYPE = 56;

const int UA_TYPES_STRUCTURETYPE = 57;

const int UA_TYPES_STRUCTUREFIELD = 58;

const int UA_TYPES_STRUCTUREDEFINITION = 59;

const int UA_TYPES_ARGUMENT = 60;

const int UA_TYPES_ENUMVALUETYPE = 61;

const int UA_TYPES_ENUMFIELD = 62;

const int UA_TYPES_DURATION = 63;

const int UA_TYPES_UTCTIME = 64;

const int UA_TYPES_LOCALEID = 65;

const int UA_TYPES_TIMEZONEDATATYPE = 66;

const int UA_TYPES_APPLICATIONTYPE = 67;

const int UA_TYPES_APPLICATIONDESCRIPTION = 68;

const int UA_TYPES_REQUESTHEADER = 69;

const int UA_TYPES_RESPONSEHEADER = 70;

const int UA_TYPES_SERVICEFAULT = 71;

const int UA_TYPES_FINDSERVERSREQUEST = 72;

const int UA_TYPES_FINDSERVERSRESPONSE = 73;

const int UA_TYPES_MESSAGESECURITYMODE = 74;

const int UA_TYPES_USERTOKENTYPE = 75;

const int UA_TYPES_USERTOKENPOLICY = 76;

const int UA_TYPES_ENDPOINTDESCRIPTION = 77;

const int UA_TYPES_GETENDPOINTSREQUEST = 78;

const int UA_TYPES_GETENDPOINTSRESPONSE = 79;

const int UA_TYPES_SECURITYTOKENREQUESTTYPE = 80;

const int UA_TYPES_CHANNELSECURITYTOKEN = 81;

const int UA_TYPES_OPENSECURECHANNELREQUEST = 82;

const int UA_TYPES_OPENSECURECHANNELRESPONSE = 83;

const int UA_TYPES_CLOSESECURECHANNELREQUEST = 84;

const int UA_TYPES_CLOSESECURECHANNELRESPONSE = 85;

const int UA_TYPES_SIGNEDSOFTWARECERTIFICATE = 86;

const int UA_TYPES_SIGNATUREDATA = 87;

const int UA_TYPES_CREATESESSIONREQUEST = 88;

const int UA_TYPES_CREATESESSIONRESPONSE = 89;

const int UA_TYPES_USERIDENTITYTOKEN = 90;

const int UA_TYPES_ANONYMOUSIDENTITYTOKEN = 91;

const int UA_TYPES_USERNAMEIDENTITYTOKEN = 92;

const int UA_TYPES_X509IDENTITYTOKEN = 93;

const int UA_TYPES_ISSUEDIDENTITYTOKEN = 94;

const int UA_TYPES_ACTIVATESESSIONREQUEST = 95;

const int UA_TYPES_ACTIVATESESSIONRESPONSE = 96;

const int UA_TYPES_CLOSESESSIONREQUEST = 97;

const int UA_TYPES_CLOSESESSIONRESPONSE = 98;

const int UA_TYPES_NODEATTRIBUTESMASK = 99;

const int UA_TYPES_NODEATTRIBUTES = 100;

const int UA_TYPES_OBJECTATTRIBUTES = 101;

const int UA_TYPES_VARIABLEATTRIBUTES = 102;

const int UA_TYPES_METHODATTRIBUTES = 103;

const int UA_TYPES_OBJECTTYPEATTRIBUTES = 104;

const int UA_TYPES_VARIABLETYPEATTRIBUTES = 105;

const int UA_TYPES_REFERENCETYPEATTRIBUTES = 106;

const int UA_TYPES_DATATYPEATTRIBUTES = 107;

const int UA_TYPES_VIEWATTRIBUTES = 108;

const int UA_TYPES_ADDNODESITEM = 109;

const int UA_TYPES_ADDNODESRESULT = 110;

const int UA_TYPES_ADDNODESREQUEST = 111;

const int UA_TYPES_ADDNODESRESPONSE = 112;

const int UA_TYPES_ADDREFERENCESITEM = 113;

const int UA_TYPES_ADDREFERENCESREQUEST = 114;

const int UA_TYPES_ADDREFERENCESRESPONSE = 115;

const int UA_TYPES_DELETENODESITEM = 116;

const int UA_TYPES_DELETENODESREQUEST = 117;

const int UA_TYPES_DELETENODESRESPONSE = 118;

const int UA_TYPES_DELETEREFERENCESITEM = 119;

const int UA_TYPES_DELETEREFERENCESREQUEST = 120;

const int UA_TYPES_DELETEREFERENCESRESPONSE = 121;

const int UA_TYPES_BROWSEDIRECTION = 122;

const int UA_TYPES_VIEWDESCRIPTION = 123;

const int UA_TYPES_BROWSEDESCRIPTION = 124;

const int UA_TYPES_BROWSERESULTMASK = 125;

const int UA_TYPES_REFERENCEDESCRIPTION = 126;

const int UA_TYPES_BROWSERESULT = 127;

const int UA_TYPES_BROWSEREQUEST = 128;

const int UA_TYPES_BROWSERESPONSE = 129;

const int UA_TYPES_BROWSENEXTREQUEST = 130;

const int UA_TYPES_BROWSENEXTRESPONSE = 131;

const int UA_TYPES_RELATIVEPATHELEMENT = 132;

const int UA_TYPES_RELATIVEPATH = 133;

const int UA_TYPES_BROWSEPATH = 134;

const int UA_TYPES_BROWSEPATHTARGET = 135;

const int UA_TYPES_BROWSEPATHRESULT = 136;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSREQUEST = 137;

const int UA_TYPES_TRANSLATEBROWSEPATHSTONODEIDSRESPONSE = 138;

const int UA_TYPES_REGISTERNODESREQUEST = 139;

const int UA_TYPES_REGISTERNODESRESPONSE = 140;

const int UA_TYPES_UNREGISTERNODESREQUEST = 141;

const int UA_TYPES_UNREGISTERNODESRESPONSE = 142;

const int UA_TYPES_FILTEROPERATOR = 143;

const int UA_TYPES_CONTENTFILTERELEMENT = 144;

const int UA_TYPES_CONTENTFILTER = 145;

const int UA_TYPES_ELEMENTOPERAND = 146;

const int UA_TYPES_LITERALOPERAND = 147;

const int UA_TYPES_ATTRIBUTEOPERAND = 148;

const int UA_TYPES_SIMPLEATTRIBUTEOPERAND = 149;

const int UA_TYPES_CONTENTFILTERELEMENTRESULT = 150;

const int UA_TYPES_CONTENTFILTERRESULT = 151;

const int UA_TYPES_TIMESTAMPSTORETURN = 152;

const int UA_TYPES_READVALUEID = 153;

const int UA_TYPES_READREQUEST = 154;

const int UA_TYPES_READRESPONSE = 155;

const int UA_TYPES_WRITEVALUE = 156;

const int UA_TYPES_WRITEREQUEST = 157;

const int UA_TYPES_WRITERESPONSE = 158;

const int UA_TYPES_CALLMETHODREQUEST = 159;

const int UA_TYPES_CALLMETHODRESULT = 160;

const int UA_TYPES_CALLREQUEST = 161;

const int UA_TYPES_CALLRESPONSE = 162;

const int UA_TYPES_MONITORINGMODE = 163;

const int UA_TYPES_DATACHANGETRIGGER = 164;

const int UA_TYPES_DEADBANDTYPE = 165;

const int UA_TYPES_DATACHANGEFILTER = 166;

const int UA_TYPES_EVENTFILTER = 167;

const int UA_TYPES_AGGREGATECONFIGURATION = 168;

const int UA_TYPES_AGGREGATEFILTER = 169;

const int UA_TYPES_EVENTFILTERRESULT = 170;

const int UA_TYPES_MONITORINGPARAMETERS = 171;

const int UA_TYPES_MONITOREDITEMCREATEREQUEST = 172;

const int UA_TYPES_MONITOREDITEMCREATERESULT = 173;

const int UA_TYPES_CREATEMONITOREDITEMSREQUEST = 174;

const int UA_TYPES_CREATEMONITOREDITEMSRESPONSE = 175;

const int UA_TYPES_MONITOREDITEMMODIFYREQUEST = 176;

const int UA_TYPES_MONITOREDITEMMODIFYRESULT = 177;

const int UA_TYPES_MODIFYMONITOREDITEMSREQUEST = 178;

const int UA_TYPES_MODIFYMONITOREDITEMSRESPONSE = 179;

const int UA_TYPES_SETMONITORINGMODEREQUEST = 180;

const int UA_TYPES_SETMONITORINGMODERESPONSE = 181;

const int UA_TYPES_SETTRIGGERINGREQUEST = 182;

const int UA_TYPES_SETTRIGGERINGRESPONSE = 183;

const int UA_TYPES_DELETEMONITOREDITEMSREQUEST = 184;

const int UA_TYPES_DELETEMONITOREDITEMSRESPONSE = 185;

const int UA_TYPES_CREATESUBSCRIPTIONREQUEST = 186;

const int UA_TYPES_CREATESUBSCRIPTIONRESPONSE = 187;

const int UA_TYPES_MODIFYSUBSCRIPTIONREQUEST = 188;

const int UA_TYPES_MODIFYSUBSCRIPTIONRESPONSE = 189;

const int UA_TYPES_SETPUBLISHINGMODEREQUEST = 190;

const int UA_TYPES_SETPUBLISHINGMODERESPONSE = 191;

const int UA_TYPES_NOTIFICATIONMESSAGE = 192;

const int UA_TYPES_MONITOREDITEMNOTIFICATION = 193;

const int UA_TYPES_EVENTFIELDLIST = 194;

const int UA_TYPES_STATUSCHANGENOTIFICATION = 195;

const int UA_TYPES_SUBSCRIPTIONACKNOWLEDGEMENT = 196;

const int UA_TYPES_PUBLISHREQUEST = 197;

const int UA_TYPES_PUBLISHRESPONSE = 198;

const int UA_TYPES_REPUBLISHREQUEST = 199;

const int UA_TYPES_REPUBLISHRESPONSE = 200;

const int UA_TYPES_TRANSFERRESULT = 201;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSREQUEST = 202;

const int UA_TYPES_TRANSFERSUBSCRIPTIONSRESPONSE = 203;

const int UA_TYPES_DELETESUBSCRIPTIONSREQUEST = 204;

const int UA_TYPES_DELETESUBSCRIPTIONSRESPONSE = 205;

const int UA_TYPES_BUILDINFO = 206;

const int UA_TYPES_REDUNDANCYSUPPORT = 207;

const int UA_TYPES_SERVERSTATE = 208;

const int UA_TYPES_SERVERDIAGNOSTICSSUMMARYDATATYPE = 209;

const int UA_TYPES_SERVERSTATUSDATATYPE = 210;

const int UA_TYPES_RANGE = 211;

const int UA_TYPES_EUINFORMATION = 212;

const int UA_TYPES_AXISSCALEENUMERATION = 213;

const int UA_TYPES_COMPLEXNUMBERTYPE = 214;

const int UA_TYPES_DOUBLECOMPLEXNUMBERTYPE = 215;

const int UA_TYPES_AXISINFORMATION = 216;

const int UA_TYPES_XVTYPE = 217;

const int UA_TYPES_STRUCTUREDESCRIPTION = 218;

const int UA_TYPES_FIELDMETADATA = 219;

const int UA_TYPES_PUBLISHEDEVENTSDATATYPE = 220;

const int UA_TYPES_WRITERGROUPDATATYPE = 221;

const int UA_TYPES_FIELDTARGETDATATYPE = 222;

const int UA_TYPES_SUBSCRIBEDDATASETMIRRORDATATYPE = 223;

const int UA_TYPES_ENUMDEFINITION = 224;

const int UA_TYPES_DATACHANGENOTIFICATION = 225;

const int UA_TYPES_EVENTNOTIFICATIONLIST = 226;

const int UA_TYPES_ENUMDESCRIPTION = 227;

const int UA_TYPES_UABINARYFILEDATATYPE = 228;

const int UA_TYPES_DATASETMETADATATYPE = 229;

const int UA_TYPES_PUBLISHEDDATASETDATATYPE = 230;

const int UA_TYPES_DATASETREADERDATATYPE = 231;

const int UA_TYPES_TARGETVARIABLESDATATYPE = 232;

const int UA_TYPES_READERGROUPDATATYPE = 233;

const int UA_TYPES_PUBSUBCONNECTIONDATATYPE = 234;

const int UA_TYPES_PUBSUBCONFIGURATIONDATATYPE = 235;

const String UA_PRINTF_GUID_FORMAT =
    '%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x';

const String UA_PRINTF_STRING_FORMAT = '"%.*s"';

const int UA_REFERENCETYPEINDEX_REFERENCES = 0;

const int UA_REFERENCETYPEINDEX_HASSUBTYPE = 1;

const int UA_REFERENCETYPEINDEX_AGGREGATES = 2;

const int UA_REFERENCETYPEINDEX_HIERARCHICALREFERENCES = 3;

const int UA_REFERENCETYPEINDEX_NONHIERARCHICALREFERENCES = 4;

const int UA_REFERENCETYPEINDEX_HASCHILD = 5;

const int UA_REFERENCETYPEINDEX_ORGANIZES = 6;

const int UA_REFERENCETYPEINDEX_HASEVENTSOURCE = 7;

const int UA_REFERENCETYPEINDEX_HASMODELLINGRULE = 8;

const int UA_REFERENCETYPEINDEX_HASENCODING = 9;

const int UA_REFERENCETYPEINDEX_HASDESCRIPTION = 10;

const int UA_REFERENCETYPEINDEX_HASTYPEDEFINITION = 11;

const int UA_REFERENCETYPEINDEX_GENERATESEVENT = 12;

const int UA_REFERENCETYPEINDEX_HASPROPERTY = 13;

const int UA_REFERENCETYPEINDEX_HASCOMPONENT = 14;

const int UA_REFERENCETYPEINDEX_HASNOTIFIER = 15;

const int UA_REFERENCETYPEINDEX_HASORDEREDCOMPONENT = 16;

const int UA_REFERENCETYPEINDEX_HASINTERFACE = 17;

const int UA_REFERENCETYPESET_MAX = 128;

const int UA_TRANSPORT_COUNT = 8;

const int UA_TRANSPORT_MESSAGETYPE = 0;

const int UA_TRANSPORT_CHUNKTYPE = 1;

const int UA_TRANSPORT_TCPMESSAGEHEADER = 2;

const int UA_TRANSPORT_TCPHELLOMESSAGE = 3;

const int UA_TRANSPORT_TCPACKNOWLEDGEMESSAGE = 4;

const int UA_TRANSPORT_TCPERRORMESSAGE = 5;

const int UA_TRANSPORT_ASYMMETRICALGORITHMSECURITYHEADER = 6;

const int UA_TRANSPORT_SEQUENCEHEADER = 7;

const int UA_SECURECHANNEL_MESSAGEHEADER_LENGTH = 8;

const int UA_SECURECHANNEL_CHANNELHEADER_LENGTH = 12;

const int UA_SECURECHANNEL_SYMMETRIC_SECURITYHEADER_LENGTH = 4;

const int UA_SECURECHANNEL_SEQUENCEHEADER_LENGTH = 8;

const int UA_SECURECHANNEL_SYMMETRIC_HEADER_UNENCRYPTEDLENGTH = 16;

const int UA_SECURECHANNEL_SYMMETRIC_HEADER_TOTALLENGTH = 24;

const int UA_SECURECHANNEL_MESSAGE_MIN_LENGTH = 16;

const int UA_MAXCONTINUATIONPOINTS = 5;

const int UA_REFTREE_INITIAL_SIZE = 16;

const int UA_MAX_ARRAY_DIMS = 100;

const int UA_ENCODING_MAX_RECURSION = 100;

const int UA_NODEIDTYPE_NUMERIC_TWOBYTE = 0;

const int UA_NODEIDTYPE_NUMERIC_FOURBYTE = 1;

const int UA_NODEIDTYPE_NUMERIC_COMPLETE = 2;

const int UA_EXPANDEDNODEID_SERVERINDEX_FLAG = 64;

const int UA_EXPANDEDNODEID_NAMESPACEURI_FLAG = 128;

const int UA_LOCALIZEDTEXT_ENCODINGMASKTYPE_LOCALE = 1;

const int UA_LOCALIZEDTEXT_ENCODINGMASKTYPE_TEXT = 2;

const int MAX_PICO_SECONDS = 9999;

const int Boolean_members = 0;

const int SByte_members = 0;

const int Byte_members = 0;

const int Int16_members = 0;

const int UInt16_members = 0;

const int Int32_members = 0;

const int UInt32_members = 0;

const int Int64_members = 0;

const int UInt64_members = 0;

const int Float_members = 0;

const int Double_members = 0;

const int String_members = 0;

const int DateTime_members = 0;

const int Guid_members = 0;

const int ByteString_members = 0;

const int XmlElement_members = 0;

const int NodeId_members = 0;

const int ExpandedNodeId_members = 0;

const int StatusCode_members = 0;

const int QualifiedName_members = 0;

const int LocalizedText_members = 0;

const int ExtensionObject_members = 0;

const int DataValue_members = 0;

const int Variant_members = 0;

const int DiagnosticInfo_members = 0;

const int PubSubState_members = 0;

const int DataSetFieldFlags_members = 0;

const int DataSetFieldContentMask_members = 0;

const int OverrideValueHandling_members = 0;

const int DataSetOrderingType_members = 0;

const int UadpNetworkMessageContentMask_members = 0;

const int UadpDataSetMessageContentMask_members = 0;

const int JsonNetworkMessageContentMask_members = 0;

const int JsonDataSetMessageContentMask_members = 0;

const int BrokerTransportQualityOfService_members = 0;

const int NodeClass_members = 0;

const int PermissionType_members = 0;

const int StructureType_members = 0;

const int Duration_members = 0;

const int UtcTime_members = 0;

const int LocaleId_members = 0;

const int ApplicationType_members = 0;

const int MessageSecurityMode_members = 0;

const int UserTokenType_members = 0;

const int SecurityTokenRequestType_members = 0;

const int NodeAttributesMask_members = 0;

const int BrowseDirection_members = 0;

const int BrowseResultMask_members = 0;

const int FilterOperator_members = 0;

const int TimestampsToReturn_members = 0;

const int MonitoringMode_members = 0;

const int DataChangeTrigger_members = 0;

const int DeadbandType_members = 0;

const int RedundancySupport_members = 0;

const int ServerState_members = 0;

const int AxisScaleEnumeration_members = 0;

const int MessageType_members = 0;

const int ChunkType_members = 0;

const int UA_BITMASK_MESSAGETYPE = 16777215;

const int UA_BITMASK_CHUNKTYPE = 4278190080;

const int UA_SEQUENCENUMBER_ROLLOVER = 4294966271;

const int UA_SECURECHANNEL_ASYMMETRIC_SECURITYHEADER_FIXED_LENGTH = 12;

const int UA_SESSION_NONCELENTH = 32;

const int UA_NODEPOINTER_MASK = 3;

const int UA_NODEPOINTER_TAG_IMMEDIATE = 0;

const int UA_NODEPOINTER_TAG_NODEID = 1;

const int UA_NODEPOINTER_TAG_EXPANDEDNODEID = 2;

const int UA_NODEPOINTER_TAG_NODE = 3;

const int STARTCHANNELID = 1;

const int STARTTOKENID = 1;

const int UA_MAXTIMEOUT = 50;

const int UA_MAX_STACKBUF = 128;

const int MIN_PAYLOAD_SIZE_ETHERNET = 46;

const int UA_DATETIMESTAMP_2000 = 125911584000000000;

const int UA_MAX_TREE_RECURSE = 50;

const int UA_PARENT_REFERENCES_COUNT = 2;

const int UA_MINMESSAGESIZE = 8192;

const int UA_SESSION_LOCALNONCELENGTH = 32;

const int MAX_DATA_SIZE = 4096;

const int LEAPOCH = 951868800;

const int DAYS_PER_400Y = 146097;

const int DAYS_PER_100Y = 36524;

const int DAYS_PER_4Y = 1461;

const int KNOWNREFTYPES = 17;

const int UA_MAX_RETRANSMISSIONQUEUESIZE = 256;

const int EMIT_REFS_ROOT_COUNT = 4;

const String ANSI_COLOR_RED = '\x1B[31m';

const String ANSI_COLOR_GREEN = '\x1B[32m';

const String ANSI_COLOR_YELLOW = '\x1B[33m';

const String ANSI_COLOR_BLUE = '\x1B[34m';

const String ANSI_COLOR_MAGENTA = '\x1B[35m';

const String ANSI_COLOR_CYAN = '\x1B[36m';

const String ANSI_COLOR_RESET = '\x1B[0m';

const String ANONYMOUS_POLICY = 'open62541-anonymous-policy';

const String CERTIFICATE_POLICY = 'open62541-certificate-policy';

const String USERNAME_POLICY = 'open62541-username-policy';

const int UA_NODEMAP_MINSIZE = 64;

const String MANUFACTURER_NAME = 'open62541';

const String PRODUCT_NAME = 'open62541 OPC UA Server';

const String PRODUCT_URI = 'http://open62541.org';

const String APPLICATION_NAME = 'open62541-based OPC UA Application';

const String APPLICATION_URI = 'urn:unconfigured:application';

const String APPLICATION_URI_SERVER = 'urn:open62541.server.application';

const int _SYS_SYSLOG_H = 1;

const int _BITS_SYSLOG_PATH_H = 1;

const String _PATH_LOG = '/dev/log';

const int LOG_EMERG = 0;

const int LOG_ALERT = 1;

const int LOG_CRIT = 2;

const int LOG_ERR = 3;

const int LOG_WARNING = 4;

const int LOG_NOTICE = 5;

const int LOG_INFO = 6;

const int LOG_DEBUG = 7;

const int LOG_PRIMASK = 7;

const int LOG_KERN = 0;

const int LOG_USER = 8;

const int LOG_MAIL = 16;

const int LOG_DAEMON = 24;

const int LOG_AUTH = 32;

const int LOG_SYSLOG = 40;

const int LOG_LPR = 48;

const int LOG_NEWS = 56;

const int LOG_UUCP = 64;

const int LOG_CRON = 72;

const int LOG_AUTHPRIV = 80;

const int LOG_FTP = 88;

const int LOG_LOCAL0 = 128;

const int LOG_LOCAL1 = 136;

const int LOG_LOCAL2 = 144;

const int LOG_LOCAL3 = 152;

const int LOG_LOCAL4 = 160;

const int LOG_LOCAL5 = 168;

const int LOG_LOCAL6 = 176;

const int LOG_LOCAL7 = 184;

const int LOG_NFACILITIES = 24;

const int LOG_FACMASK = 1016;

const int LOG_PID = 1;

const int LOG_CONS = 2;

const int LOG_ODELAY = 4;

const int LOG_NDELAY = 8;

const int LOG_NOWAIT = 16;

const int LOG_PERROR = 32;

const int LOGBUFSIZE = 512;

const int RECEIVE_MSG_BUFFER_SIZE = 4096;

const int _SYS_TIME_H = 1;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int ITIMER_PROF = 2;

const int MAXBACKLOG = 100;

const int NOHELLOTIMEOUT = 120000;
